# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
AppParCurves module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_appparcurves.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _AppParCurves.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AppParCurves')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AppParCurves')
    _AppParCurves = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AppParCurves', [dirname(__file__)])
        except ImportError:
            import _AppParCurves
            return _AppParCurves
        try:
            _mod = imp.load_module('_AppParCurves', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AppParCurves = swig_import_helper()
    del swig_import_helper
else:
    import _AppParCurves
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AppParCurves.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_AppParCurves.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_AppParCurves.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_AppParCurves.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_AppParCurves.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_AppParCurves.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_AppParCurves.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_AppParCurves.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_AppParCurves.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_AppParCurves.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_AppParCurves.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_AppParCurves.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_AppParCurves.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_AppParCurves.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_AppParCurves.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_AppParCurves.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_AppParCurves.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _AppParCurves.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _AppParCurves.process_exception(error, method_name, class_name)
process_exception = _AppParCurves.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.gp
import OCC.Core.TColgp
AppParCurves_NoConstraint = _AppParCurves.AppParCurves_NoConstraint
AppParCurves_PassPoint = _AppParCurves.AppParCurves_PassPoint
AppParCurves_TangencyPoint = _AppParCurves.AppParCurves_TangencyPoint
AppParCurves_CurvaturePoint = _AppParCurves.AppParCurves_CurvaturePoint

def Handle_AppParCurves_HArray1OfMultiCurve_Create() -> "opencascade::handle< AppParCurves_HArray1OfMultiCurve >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_Create()
Handle_AppParCurves_HArray1OfMultiCurve_Create = _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_Create

def Handle_AppParCurves_HArray1OfMultiCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< AppParCurves_HArray1OfMultiCurve >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_DownCast(t)
Handle_AppParCurves_HArray1OfMultiCurve_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_DownCast

def Handle_AppParCurves_HArray1OfMultiCurve_IsNull(t: 'opencascade::handle< AppParCurves_HArray1OfMultiCurve > const &') -> "bool":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_IsNull(t)
Handle_AppParCurves_HArray1OfMultiCurve_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_IsNull

def Handle_AppParCurves_HArray1OfConstraintCouple_Create() -> "opencascade::handle< AppParCurves_HArray1OfConstraintCouple >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_Create()
Handle_AppParCurves_HArray1OfConstraintCouple_Create = _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_Create

def Handle_AppParCurves_HArray1OfConstraintCouple_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< AppParCurves_HArray1OfConstraintCouple >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_DownCast(t)
Handle_AppParCurves_HArray1OfConstraintCouple_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_DownCast

def Handle_AppParCurves_HArray1OfConstraintCouple_IsNull(t: 'opencascade::handle< AppParCurves_HArray1OfConstraintCouple > const &') -> "bool":
    return _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_IsNull(t)
Handle_AppParCurves_HArray1OfConstraintCouple_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_IsNull

def Handle_AppParCurves_HArray1OfMultiPoint_Create() -> "opencascade::handle< AppParCurves_HArray1OfMultiPoint >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_Create()
Handle_AppParCurves_HArray1OfMultiPoint_Create = _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_Create

def Handle_AppParCurves_HArray1OfMultiPoint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< AppParCurves_HArray1OfMultiPoint >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_DownCast(t)
Handle_AppParCurves_HArray1OfMultiPoint_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_DownCast

def Handle_AppParCurves_HArray1OfMultiPoint_IsNull(t: 'opencascade::handle< AppParCurves_HArray1OfMultiPoint > const &') -> "bool":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_IsNull(t)
Handle_AppParCurves_HArray1OfMultiPoint_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_IsNull

def Handle_AppParCurves_HArray1OfMultiBSpCurve_Create() -> "opencascade::handle< AppParCurves_HArray1OfMultiBSpCurve >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_Create()
Handle_AppParCurves_HArray1OfMultiBSpCurve_Create = _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_Create

def Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< AppParCurves_HArray1OfMultiBSpCurve >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast(t)
Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast

def Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull(t: 'opencascade::handle< AppParCurves_HArray1OfMultiBSpCurve > const &') -> "bool":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull(t)
Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull
class AppParCurves_Array1OfMultiCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfMultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfMultiCurve(*args))
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiCurve

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

AppParCurves_Array1OfMultiCurve.begin = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_begin, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.end = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_end, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.cbegin = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_cbegin, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.cend = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_cend, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.Init = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_Init, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.Size = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_Size, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.Length = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_Length, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.IsEmpty = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_IsEmpty, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.Lower = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_Lower, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.Upper = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_Upper, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.IsDeletable = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_IsDeletable, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.IsAllocated = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_IsAllocated, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.Assign = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_Assign, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.Move = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_Move, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.Set = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_Set, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.First = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_First, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.ChangeFirst = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeFirst, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.Last = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_Last, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.ChangeLast = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeLast, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.Value = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_Value, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.ChangeValue = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeValue, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.__call__ = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve___call__, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.SetValue = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_SetValue, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve.Resize = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiCurve_Resize, None, AppParCurves_Array1OfMultiCurve)
AppParCurves_Array1OfMultiCurve_swigregister = _AppParCurves.AppParCurves_Array1OfMultiCurve_swigregister
AppParCurves_Array1OfMultiCurve_swigregister(AppParCurves_Array1OfMultiCurve)

class AppParCurves_Array1OfConstraintCouple(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfConstraintCouple_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfConstraintCouple(*args))
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfConstraintCouple

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

AppParCurves_Array1OfConstraintCouple.begin = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_begin, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.end = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_end, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.cbegin = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_cbegin, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.cend = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_cend, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.Init = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Init, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.Size = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Size, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.Length = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Length, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.IsEmpty = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_IsEmpty, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.Lower = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Lower, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.Upper = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Upper, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.IsDeletable = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_IsDeletable, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.IsAllocated = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_IsAllocated, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.Assign = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Assign, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.Move = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Move, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.Set = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Set, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.First = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_First, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.ChangeFirst = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeFirst, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.Last = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Last, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.ChangeLast = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeLast, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.Value = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Value, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.ChangeValue = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeValue, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.__call__ = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple___call__, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.SetValue = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_SetValue, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple.Resize = new_instancemethod(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Resize, None, AppParCurves_Array1OfConstraintCouple)
AppParCurves_Array1OfConstraintCouple_swigregister = _AppParCurves.AppParCurves_Array1OfConstraintCouple_swigregister
AppParCurves_Array1OfConstraintCouple_swigregister(AppParCurves_Array1OfConstraintCouple)

class AppParCurves_SequenceOfMultiCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_SequenceOfMultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_SequenceOfMultiCurve(*args))
    delNode = staticmethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_delNode)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_SequenceOfMultiCurve
AppParCurves_SequenceOfMultiCurve.begin = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_begin, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.end = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_end, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.cbegin = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_cbegin, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.cend = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_cend, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Size = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Size, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Length = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Length, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Lower = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Lower, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Upper = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Upper, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.IsEmpty = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_IsEmpty, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Reverse = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Reverse, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Exchange = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Exchange, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Clear = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Clear, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Assign = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Assign, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Set = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Set, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Remove = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Remove, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Append = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Append, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Prepend = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Prepend, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.InsertBefore = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_InsertBefore, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.InsertAfter = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_InsertAfter, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Split = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Split, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.First = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_First, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.ChangeFirst = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeFirst, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Last = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Last, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.ChangeLast = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeLast, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.Value = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Value, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.ChangeValue = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeValue, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.__call__ = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve___call__, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve.SetValue = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_SetValue, None, AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve_swigregister = _AppParCurves.AppParCurves_SequenceOfMultiCurve_swigregister
AppParCurves_SequenceOfMultiCurve_swigregister(AppParCurves_SequenceOfMultiCurve)

def AppParCurves_SequenceOfMultiCurve_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _AppParCurves.AppParCurves_SequenceOfMultiCurve_delNode(theNode, theAl)
AppParCurves_SequenceOfMultiCurve_delNode = _AppParCurves.AppParCurves_SequenceOfMultiCurve_delNode

class AppParCurves_SequenceOfMultiBSpCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_SequenceOfMultiBSpCurve(*args))
    delNode = staticmethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_delNode)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_SequenceOfMultiBSpCurve
AppParCurves_SequenceOfMultiBSpCurve.begin = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_begin, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.end = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_end, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.cbegin = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_cbegin, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.cend = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_cend, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Size = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Size, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Length = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Length, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Lower = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Lower, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Upper = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Upper, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.IsEmpty = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_IsEmpty, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Reverse = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Reverse, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Exchange = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Exchange, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Clear = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Clear, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Assign = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Assign, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Set = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Set, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Remove = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Remove, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Append = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Append, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Prepend = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Prepend, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.InsertBefore = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_InsertBefore, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.InsertAfter = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_InsertAfter, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Split = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Split, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.First = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_First, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.ChangeFirst = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeFirst, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Last = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Last, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.ChangeLast = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeLast, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.Value = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Value, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.ChangeValue = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeValue, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.__call__ = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve___call__, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve.SetValue = new_instancemethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_SetValue, None, AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve_swigregister = _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_swigregister
AppParCurves_SequenceOfMultiBSpCurve_swigregister(AppParCurves_SequenceOfMultiBSpCurve)

def AppParCurves_SequenceOfMultiBSpCurve_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_delNode(theNode, theAl)
AppParCurves_SequenceOfMultiBSpCurve_delNode = _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_delNode

class AppParCurves_Array1OfMultiBSpCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfMultiBSpCurve(*args))
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiBSpCurve

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

AppParCurves_Array1OfMultiBSpCurve.begin = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_begin, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.end = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_end, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.cbegin = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_cbegin, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.cend = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_cend, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.Init = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Init, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.Size = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Size, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.Length = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Length, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.IsEmpty = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsEmpty, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.Lower = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Lower, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.Upper = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Upper, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.IsDeletable = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsDeletable, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.IsAllocated = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsAllocated, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.Assign = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Assign, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.Move = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Move, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.Set = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Set, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.First = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_First, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.ChangeFirst = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeFirst, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.Last = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Last, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.ChangeLast = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeLast, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.Value = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Value, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.ChangeValue = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeValue, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.__call__ = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve___call__, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.SetValue = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_SetValue, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve.Resize = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Resize, None, AppParCurves_Array1OfMultiBSpCurve)
AppParCurves_Array1OfMultiBSpCurve_swigregister = _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_swigregister
AppParCurves_Array1OfMultiBSpCurve_swigregister(AppParCurves_Array1OfMultiBSpCurve)

class AppParCurves_Array1OfMultiPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfMultiPoint_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfMultiPoint(*args))
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiPoint

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

AppParCurves_Array1OfMultiPoint.begin = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_begin, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.end = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_end, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.cbegin = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_cbegin, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.cend = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_cend, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.Init = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_Init, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.Size = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_Size, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.Length = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_Length, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.IsEmpty = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_IsEmpty, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.Lower = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_Lower, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.Upper = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_Upper, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.IsDeletable = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_IsDeletable, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.IsAllocated = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_IsAllocated, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.Assign = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_Assign, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.Move = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_Move, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.Set = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_Set, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.First = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_First, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.ChangeFirst = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeFirst, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.Last = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_Last, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.ChangeLast = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeLast, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.Value = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_Value, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.ChangeValue = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeValue, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.__call__ = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint___call__, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.SetValue = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_SetValue, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint.Resize = new_instancemethod(_AppParCurves.AppParCurves_Array1OfMultiPoint_Resize, None, AppParCurves_Array1OfMultiPoint)
AppParCurves_Array1OfMultiPoint_swigregister = _AppParCurves.AppParCurves_Array1OfMultiPoint_swigregister
AppParCurves_Array1OfMultiPoint_swigregister(AppParCurves_Array1OfMultiPoint)

class appparcurves(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Bernstein(*args) -> "void":
        """
        :param NbPoles:
        	:type NbPoles: int
        	:param U:
        	:type U: math_Vector
        	:param A:
        	:type A: math_Matrix
        	:param DA:
        	:type DA: math_Matrix
        	:rtype: void
        """
        return _AppParCurves.appparcurves_Bernstein(*args)

    Bernstein = staticmethod(Bernstein)

    def BernsteinMatrix(*args) -> "void":
        """
        :param NbPoles:
        	:type NbPoles: int
        	:param U:
        	:type U: math_Vector
        	:param A:
        	:type A: math_Matrix
        	:rtype: void
        """
        return _AppParCurves.appparcurves_BernsteinMatrix(*args)

    BernsteinMatrix = staticmethod(BernsteinMatrix)

    def SecondDerivativeBernstein(*args) -> "void":
        """
        :param U:
        	:type U: float
        	:param DDA:
        	:type DDA: math_Vector
        	:rtype: void
        """
        return _AppParCurves.appparcurves_SecondDerivativeBernstein(*args)

    SecondDerivativeBernstein = staticmethod(SecondDerivativeBernstein)

    def SplineFunction(*args) -> "void":
        """
        :param NbPoles:
        	:type NbPoles: int
        	:param Degree:
        	:type Degree: int
        	:param Parameters:
        	:type Parameters: math_Vector
        	:param FlatKnots:
        	:type FlatKnots: math_Vector
        	:param A:
        	:type A: math_Matrix
        	:param DA:
        	:type DA: math_Matrix
        	:param Index:
        	:type Index: math_IntegerVector
        	:rtype: void
        """
        return _AppParCurves.appparcurves_SplineFunction(*args)

    SplineFunction = staticmethod(SplineFunction)

    __repr__ = _dumps_object


    def __init__(self):
        _AppParCurves.appparcurves_swiginit(self, _AppParCurves.new_appparcurves())
    __swig_destroy__ = _AppParCurves.delete_appparcurves
appparcurves_swigregister = _AppParCurves.appparcurves_swigregister
appparcurves_swigregister(appparcurves)

def appparcurves_Bernstein(*args) -> "void":
    """
    :param NbPoles:
    	:type NbPoles: int
    	:param U:
    	:type U: math_Vector
    	:param A:
    	:type A: math_Matrix
    	:param DA:
    	:type DA: math_Matrix
    	:rtype: void
    """
    return _AppParCurves.appparcurves_Bernstein(*args)

def appparcurves_BernsteinMatrix(*args) -> "void":
    """
    :param NbPoles:
    	:type NbPoles: int
    	:param U:
    	:type U: math_Vector
    	:param A:
    	:type A: math_Matrix
    	:rtype: void
    """
    return _AppParCurves.appparcurves_BernsteinMatrix(*args)

def appparcurves_SecondDerivativeBernstein(*args) -> "void":
    """
    :param U:
    	:type U: float
    	:param DDA:
    	:type DDA: math_Vector
    	:rtype: void
    """
    return _AppParCurves.appparcurves_SecondDerivativeBernstein(*args)

def appparcurves_SplineFunction(*args) -> "void":
    """
    :param NbPoles:
    	:type NbPoles: int
    	:param Degree:
    	:type Degree: int
    	:param Parameters:
    	:type Parameters: math_Vector
    	:param FlatKnots:
    	:type FlatKnots: math_Vector
    	:param A:
    	:type A: math_Matrix
    	:param DA:
    	:type DA: math_Matrix
    	:param Index:
    	:type Index: math_IntegerVector
    	:rtype: void
    """
    return _AppParCurves.appparcurves_SplineFunction(*args)

class AppParCurves_ConstraintCouple(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * returns an indefinite ConstraintCouple.
        	:rtype: None
        * Create a couple the object <Index> will have the constraint <Cons>.
        	:param TheIndex:
        	:type TheIndex: int
        	:param Cons:
        	:type Cons: AppParCurves_Constraint
        	:rtype: None
        """
        _AppParCurves.AppParCurves_ConstraintCouple_swiginit(self, _AppParCurves.new_AppParCurves_ConstraintCouple(*args))

    def Constraint(self, *args) -> "AppParCurves_Constraint":
        """
        * returns the constraint of the object.
        	:rtype: AppParCurves_Constraint
        """
        return _AppParCurves.AppParCurves_ConstraintCouple_Constraint(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * returns the index of the constraint object.
        	:rtype: int
        """
        return _AppParCurves.AppParCurves_ConstraintCouple_Index(self, *args)


    def SetConstraint(self, *args) -> "void":
        """
        * Changes the constraint of the object.
        	:param Cons:
        	:type Cons: AppParCurves_Constraint
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_ConstraintCouple_SetConstraint(self, *args)


    def SetIndex(self, *args) -> "void":
        """
        * Changes the index of the constraint object.
        	:param TheIndex:
        	:type TheIndex: int
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_ConstraintCouple_SetIndex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_ConstraintCouple
AppParCurves_ConstraintCouple.Constraint = new_instancemethod(_AppParCurves.AppParCurves_ConstraintCouple_Constraint, None, AppParCurves_ConstraintCouple)
AppParCurves_ConstraintCouple.Index = new_instancemethod(_AppParCurves.AppParCurves_ConstraintCouple_Index, None, AppParCurves_ConstraintCouple)
AppParCurves_ConstraintCouple.SetConstraint = new_instancemethod(_AppParCurves.AppParCurves_ConstraintCouple_SetConstraint, None, AppParCurves_ConstraintCouple)
AppParCurves_ConstraintCouple.SetIndex = new_instancemethod(_AppParCurves.AppParCurves_ConstraintCouple_SetIndex, None, AppParCurves_ConstraintCouple)
AppParCurves_ConstraintCouple_swigregister = _AppParCurves.AppParCurves_ConstraintCouple_swigregister
AppParCurves_ConstraintCouple_swigregister(AppParCurves_ConstraintCouple)

class AppParCurves_MultiCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * returns an indefinite MultiCurve.
        	:rtype: None
        * creates a MultiCurve, describing Bezier curves all containing the same number of MultiPoint. An exception is raised if Degree < 0.
        	:param NbPol:
        	:type NbPol: int
        	:rtype: None
        * creates a MultiCurve, describing Bezier curves all containing the same number of MultiPoint. Each MultiPoint must have NbCurves Poles.
        	:param tabMU:
        	:type tabMU: AppParCurves_Array1OfMultiPoint
        	:rtype: None
        """
        _AppParCurves.AppParCurves_MultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_MultiCurve(*args))

    def Curve(self, *args) -> "void":
        """
        * returns the Pole array of the curve of range CuIndex. An exception is raised if the dimension of the curve is 2d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param TabPnt:
        	:type TabPnt: TColgp_Array1OfPnt
        	:rtype: None
        * returns the Pole array of the curve of range CuIndex. An exception is raised if the dimension of the curve is 3d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param TabPnt:
        	:type TabPnt: TColgp_Array1OfPnt2d
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_MultiCurve_Curve(self, *args)


    def D1(self, *args) -> "void":
        """
        * returns the value of the point with a parameter U on the Bezier curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 3d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:rtype: void
        * returns the value of the point with a parameter U on the Bezier curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 2d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:rtype: void
        """
        return _AppParCurves.AppParCurves_MultiCurve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        * returns the value of the point with a parameter U on the Bezier curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 3d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:param V2:
        	:type V2: gp_Vec
        	:rtype: void
        * returns the value of the point with a parameter U on the Bezier curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 2d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:rtype: void
        """
        return _AppParCurves.AppParCurves_MultiCurve_D2(self, *args)


    def Degree(self, *args) -> "Standard_Integer":
        """
        * returns the degree of the curves.
        	:rtype: int
        """
        return _AppParCurves.AppParCurves_MultiCurve_Degree(self, *args)


    def Dimension(self, *args) -> "Standard_Integer":
        """
        * returns the dimension of the CuIndex curve. An exception is raised if CuIndex<0 or CuIndex>NbCurves.
        	:param CuIndex:
        	:type CuIndex: int
        	:rtype: int
        """
        return _AppParCurves.AppParCurves_MultiCurve_Dimension(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(AppParCurves_MultiCurve self) -> std::string"""
        return _AppParCurves.AppParCurves_MultiCurve_DumpToString(self)


    def NbCurves(self, *args) -> "Standard_Integer":
        """
        * Returns the number of curves resulting from the approximation of a MultiLine.
        	:rtype: int
        """
        return _AppParCurves.AppParCurves_MultiCurve_NbCurves(self, *args)


    def NbPoles(self, *args) -> "Standard_Integer":
        """
        * Returns the number of poles on curves resulting from the approximation of a MultiLine.
        	:rtype: int
        """
        return _AppParCurves.AppParCurves_MultiCurve_NbPoles(self, *args)


    def Pole(self, *args) -> "gp_Pnt const":
        """
        * returns the Nieme pole of the CuIndex curve. the curve must be a 3D curve.
        	:param CuIndex:
        	:type CuIndex: int
        	:param Nieme:
        	:type Nieme: int
        	:rtype: gp_Pnt
        """
        return _AppParCurves.AppParCurves_MultiCurve_Pole(self, *args)


    def Pole2d(self, *args) -> "gp_Pnt2d const":
        """
        * returns the Nieme pole of the CuIndex curve. the curve must be a 2D curve.
        	:param CuIndex:
        	:type CuIndex: int
        	:param Nieme:
        	:type Nieme: int
        	:rtype: gp_Pnt2d
        """
        return _AppParCurves.AppParCurves_MultiCurve_Pole2d(self, *args)


    def SetNbPoles(self, *args) -> "void":
        """
        * The number of poles of the MultiCurve will be set to <nbPoles>.
        	:param nbPoles:
        	:type nbPoles: int
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_MultiCurve_SetNbPoles(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * sets the MultiPoint of range Index to the value <MPoint>. An exception is raised if Index <0 or Index >NbMPoint.
        	:param Index:
        	:type Index: int
        	:param MPoint:
        	:type MPoint: AppParCurves_MultiPoint
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_MultiCurve_SetValue(self, *args)


    def Transform(self, *args) -> "void":
        """
        * Applies a transformation to the curve of range <CuIndex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve. newz = z + dz*oldz
        	:param CuIndex:
        	:type CuIndex: int
        	:param x:
        	:type x: float
        	:param dx:
        	:type dx: float
        	:param y:
        	:type y: float
        	:param dy:
        	:type dy: float
        	:param z:
        	:type z: float
        	:param dz:
        	:type dz: float
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_MultiCurve_Transform(self, *args)


    def Transform2d(self, *args) -> "void":
        """
        * Applies a transformation to the Curve of range <CuIndex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve.
        	:param CuIndex:
        	:type CuIndex: int
        	:param x:
        	:type x: float
        	:param dx:
        	:type dx: float
        	:param y:
        	:type y: float
        	:param dy:
        	:type dy: float
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_MultiCurve_Transform2d(self, *args)


    def Value(self, *args) -> "void":
        """
        * returns the Index MultiPoint. An exception is raised if Index <0 or Index >Degree+1.
        	:param Index:
        	:type Index: int
        	:rtype: AppParCurves_MultiPoint
        * returns the value of the point with a parameter U on the Bezier curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 2d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt
        	:rtype: void
        * returns the value of the point with a parameter U on the Bezier curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 3d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt2d
        	:rtype: void
        """
        return _AppParCurves.AppParCurves_MultiCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiCurve
AppParCurves_MultiCurve.Curve = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_Curve, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.D1 = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_D1, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.D2 = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_D2, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.Degree = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_Degree, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.Dimension = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_Dimension, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.DumpToString = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_DumpToString, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.NbCurves = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_NbCurves, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.NbPoles = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_NbPoles, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.Pole = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_Pole, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.Pole2d = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_Pole2d, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.SetNbPoles = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_SetNbPoles, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.SetValue = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_SetValue, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.Transform = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_Transform, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.Transform2d = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_Transform2d, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve.Value = new_instancemethod(_AppParCurves.AppParCurves_MultiCurve_Value, None, AppParCurves_MultiCurve)
AppParCurves_MultiCurve_swigregister = _AppParCurves.AppParCurves_MultiCurve_swigregister
AppParCurves_MultiCurve_swigregister(AppParCurves_MultiCurve)

class AppParCurves_MultiPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * creates an indefinite MultiPoint.
        	:rtype: None
        * constructs a set of Points used to approximate a Multiline. These Points can be of 2 or 3 dimensions. Points will be initialized with SetPoint and SetPoint2d. NbPoints is the number of 3D Points. NbPoints2d is the number of 2D Points.
        	:param NbPoints:
        	:type NbPoints: int
        	:param NbPoints2d:
        	:type NbPoints2d: int
        	:rtype: None
        * creates a MultiPoint only composed of 3D points.
        	:param tabP:
        	:type tabP: TColgp_Array1OfPnt
        	:rtype: None
        * creates a MultiPoint only composed of 2D points.
        	:param tabP2d:
        	:type tabP2d: TColgp_Array1OfPnt2d
        	:rtype: None
        * constructs a set of Points used to approximate a Multiline. These Points can be of 2 or 3 dimensions. Points will be initialized with SetPoint and SetPoint2d. NbPoints is the total number of Points.
        	:param tabP:
        	:type tabP: TColgp_Array1OfPnt
        	:param tabP2d:
        	:type tabP2d: TColgp_Array1OfPnt2d
        	:rtype: None
        """
        _AppParCurves.AppParCurves_MultiPoint_swiginit(self, _AppParCurves.new_AppParCurves_MultiPoint(*args))

    def Dimension(self, *args) -> "Standard_Integer":
        """
        * returns the dimension of the point of range Index. An exception is raised if Index <0 or Index > NbCurves.
        	:param Index:
        	:type Index: int
        	:rtype: int
        """
        return _AppParCurves.AppParCurves_MultiPoint_Dimension(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(AppParCurves_MultiPoint self) -> std::string"""
        return _AppParCurves.AppParCurves_MultiPoint_DumpToString(self)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * returns the number of points of dimension 3D.
        	:rtype: int
        """
        return _AppParCurves.AppParCurves_MultiPoint_NbPoints(self, *args)


    def NbPoints2d(self, *args) -> "Standard_Integer":
        """
        * returns the number of points of dimension 2D.
        	:rtype: int
        """
        return _AppParCurves.AppParCurves_MultiPoint_NbPoints2d(self, *args)


    def Point(self, *args) -> "gp_Pnt const":
        """
        * returns the 3d Point of range Index. An exception is raised if Index < 0 or Index < number of 3d Points.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Pnt
        """
        return _AppParCurves.AppParCurves_MultiPoint_Point(self, *args)


    def Point2d(self, *args) -> "gp_Pnt2d const":
        """
        * returns the 2d Point of range Index. An exception is raised if index <= number of 3d Points or Index > total number of Points.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Pnt2d
        """
        return _AppParCurves.AppParCurves_MultiPoint_Point2d(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        * the 3d Point of range Index of this MultiPoint is set to <Point>. An exception is raised if Index < 0 or Index > number of 3d Points.
        	:param Index:
        	:type Index: int
        	:param Point:
        	:type Point: gp_Pnt
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_MultiPoint_SetPoint(self, *args)


    def SetPoint2d(self, *args) -> "void":
        """
        * The 2d Point of range Index is set to <Point>. An exception is raised if Index > 3d Points or Index > total number of Points.
        	:param Index:
        	:type Index: int
        	:param Point:
        	:type Point: gp_Pnt2d
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_MultiPoint_SetPoint2d(self, *args)


    def Transform(self, *args) -> "void":
        """
        * Applies a transformation to the curve of range <CuIndex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve. newz = z + dz*oldz
        	:param CuIndex:
        	:type CuIndex: int
        	:param x:
        	:type x: float
        	:param dx:
        	:type dx: float
        	:param y:
        	:type y: float
        	:param dy:
        	:type dy: float
        	:param z:
        	:type z: float
        	:param dz:
        	:type dz: float
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_MultiPoint_Transform(self, *args)


    def Transform2d(self, *args) -> "void":
        """
        * Applies a transformation to the Curve of range <CuIndex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve.
        	:param CuIndex:
        	:type CuIndex: int
        	:param x:
        	:type x: float
        	:param dx:
        	:type dx: float
        	:param y:
        	:type y: float
        	:param dy:
        	:type dy: float
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_MultiPoint_Transform2d(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiPoint
AppParCurves_MultiPoint.Dimension = new_instancemethod(_AppParCurves.AppParCurves_MultiPoint_Dimension, None, AppParCurves_MultiPoint)
AppParCurves_MultiPoint.DumpToString = new_instancemethod(_AppParCurves.AppParCurves_MultiPoint_DumpToString, None, AppParCurves_MultiPoint)
AppParCurves_MultiPoint.NbPoints = new_instancemethod(_AppParCurves.AppParCurves_MultiPoint_NbPoints, None, AppParCurves_MultiPoint)
AppParCurves_MultiPoint.NbPoints2d = new_instancemethod(_AppParCurves.AppParCurves_MultiPoint_NbPoints2d, None, AppParCurves_MultiPoint)
AppParCurves_MultiPoint.Point = new_instancemethod(_AppParCurves.AppParCurves_MultiPoint_Point, None, AppParCurves_MultiPoint)
AppParCurves_MultiPoint.Point2d = new_instancemethod(_AppParCurves.AppParCurves_MultiPoint_Point2d, None, AppParCurves_MultiPoint)
AppParCurves_MultiPoint.SetPoint = new_instancemethod(_AppParCurves.AppParCurves_MultiPoint_SetPoint, None, AppParCurves_MultiPoint)
AppParCurves_MultiPoint.SetPoint2d = new_instancemethod(_AppParCurves.AppParCurves_MultiPoint_SetPoint2d, None, AppParCurves_MultiPoint)
AppParCurves_MultiPoint.Transform = new_instancemethod(_AppParCurves.AppParCurves_MultiPoint_Transform, None, AppParCurves_MultiPoint)
AppParCurves_MultiPoint.Transform2d = new_instancemethod(_AppParCurves.AppParCurves_MultiPoint_Transform2d, None, AppParCurves_MultiPoint)
AppParCurves_MultiPoint_swigregister = _AppParCurves.AppParCurves_MultiPoint_swigregister
AppParCurves_MultiPoint_swigregister(AppParCurves_MultiPoint)

class AppParCurves_MultiBSpCurve(AppParCurves_MultiCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * returns an indefinite MultiBSpCurve.
        	:rtype: None
        * creates a MultiBSpCurve, describing BSpline curves all containing the same number of MultiPoint. An exception is raised if Degree < 0.
        	:param NbPol:
        	:type NbPol: int
        	:rtype: None
        * creates a MultiBSpCurve, describing BSpline curves all containing the same number of MultiPoint. Each MultiPoint must have NbCurves Poles.
        	:param tabMU:
        	:type tabMU: AppParCurves_Array1OfMultiPoint
        	:param Knots:
        	:type Knots: TColStd_Array1OfReal
        	:param Mults:
        	:type Mults: TColStd_Array1OfInteger
        	:rtype: None
        * creates a MultiBSpCurve, describing BSpline curves, taking control points from <SC>.
        	:param SC:
        	:type SC: AppParCurves_MultiCurve
        	:param Knots:
        	:type Knots: TColStd_Array1OfReal
        	:param Mults:
        	:type Mults: TColStd_Array1OfInteger
        	:rtype: None
        """
        _AppParCurves.AppParCurves_MultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_MultiBSpCurve(*args))

    def D1(self, *args) -> "void":
        """
        * returns the value of the point with a parameter U on the BSpline curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 3d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:rtype: void
        * returns the value of the point with a parameter U on the BSpline curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 2d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:rtype: void
        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        * returns the value of the point with a parameter U on the BSpline curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 3d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:param V2:
        	:type V2: gp_Vec
        	:rtype: void
        * returns the value of the point with a parameter U on the BSpline curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 2d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:rtype: void
        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_D2(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(AppParCurves_MultiBSpCurve self) -> std::string"""
        return _AppParCurves.AppParCurves_MultiBSpCurve_DumpToString(self)


    def Knots(self, *args) -> "TColStd_Array1OfReal const &":
        """
        * Returns an array of Reals containing the multiplicities of curves resulting from the approximation.
        	:rtype: TColStd_Array1OfReal
        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_Knots(self, *args)


    def Multiplicities(self, *args) -> "TColStd_Array1OfInteger const &":
        """
        * Returns an array of Reals containing the multiplicities of curves resulting from the approximation.
        	:rtype: TColStd_Array1OfInteger
        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_Multiplicities(self, *args)


    def SetKnots(self, *args) -> "void":
        """
        * Knots of the multiBSpCurve are assigned to <theknots>.
        	:param theKnots:
        	:type theKnots: TColStd_Array1OfReal
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_SetKnots(self, *args)


    def SetMultiplicities(self, *args) -> "void":
        """
        * Multiplicities of the multiBSpCurve are assigned to <theMults>.
        	:param theMults:
        	:type theMults: TColStd_Array1OfInteger
        	:rtype: None
        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_SetMultiplicities(self, *args)


    def Value(self, *args) -> "void":
        """
        * returns the value of the point with a parameter U on the BSpline curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 2d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt
        	:rtype: void
        * returns the value of the point with a parameter U on the BSpline curve number CuIndex. An exception is raised if CuIndex <0 or > NbCurves. An exception is raised if the curve dimension is 3d.
        	:param CuIndex:
        	:type CuIndex: int
        	:param U:
        	:type U: float
        	:param Pt:
        	:type Pt: gp_Pnt2d
        	:rtype: void
        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiBSpCurve
AppParCurves_MultiBSpCurve.D1 = new_instancemethod(_AppParCurves.AppParCurves_MultiBSpCurve_D1, None, AppParCurves_MultiBSpCurve)
AppParCurves_MultiBSpCurve.D2 = new_instancemethod(_AppParCurves.AppParCurves_MultiBSpCurve_D2, None, AppParCurves_MultiBSpCurve)
AppParCurves_MultiBSpCurve.DumpToString = new_instancemethod(_AppParCurves.AppParCurves_MultiBSpCurve_DumpToString, None, AppParCurves_MultiBSpCurve)
AppParCurves_MultiBSpCurve.Knots = new_instancemethod(_AppParCurves.AppParCurves_MultiBSpCurve_Knots, None, AppParCurves_MultiBSpCurve)
AppParCurves_MultiBSpCurve.Multiplicities = new_instancemethod(_AppParCurves.AppParCurves_MultiBSpCurve_Multiplicities, None, AppParCurves_MultiBSpCurve)
AppParCurves_MultiBSpCurve.SetKnots = new_instancemethod(_AppParCurves.AppParCurves_MultiBSpCurve_SetKnots, None, AppParCurves_MultiBSpCurve)
AppParCurves_MultiBSpCurve.SetMultiplicities = new_instancemethod(_AppParCurves.AppParCurves_MultiBSpCurve_SetMultiplicities, None, AppParCurves_MultiBSpCurve)
AppParCurves_MultiBSpCurve.Value = new_instancemethod(_AppParCurves.AppParCurves_MultiBSpCurve_Value, None, AppParCurves_MultiBSpCurve)
AppParCurves_MultiBSpCurve_swigregister = _AppParCurves.AppParCurves_MultiBSpCurve_swigregister
AppParCurves_MultiBSpCurve_swigregister(AppParCurves_MultiBSpCurve)

class AppParCurves_HArray1OfMultiCurve(AppParCurves_Array1OfMultiCurve, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfMultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfMultiCurve(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiCurve_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiCurve
AppParCurves_HArray1OfMultiCurve.Array1 = new_instancemethod(_AppParCurves.AppParCurves_HArray1OfMultiCurve_Array1, None, AppParCurves_HArray1OfMultiCurve)
AppParCurves_HArray1OfMultiCurve.ChangeArray1 = new_instancemethod(_AppParCurves.AppParCurves_HArray1OfMultiCurve_ChangeArray1, None, AppParCurves_HArray1OfMultiCurve)
AppParCurves_HArray1OfMultiCurve_swigregister = _AppParCurves.AppParCurves_HArray1OfMultiCurve_swigregister
AppParCurves_HArray1OfMultiCurve_swigregister(AppParCurves_HArray1OfMultiCurve)

class AppParCurves_HArray1OfConstraintCouple(AppParCurves_Array1OfConstraintCouple, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfConstraintCouple_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfConstraintCouple(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfConstraintCouple_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfConstraintCouple
AppParCurves_HArray1OfConstraintCouple.Array1 = new_instancemethod(_AppParCurves.AppParCurves_HArray1OfConstraintCouple_Array1, None, AppParCurves_HArray1OfConstraintCouple)
AppParCurves_HArray1OfConstraintCouple.ChangeArray1 = new_instancemethod(_AppParCurves.AppParCurves_HArray1OfConstraintCouple_ChangeArray1, None, AppParCurves_HArray1OfConstraintCouple)
AppParCurves_HArray1OfConstraintCouple_swigregister = _AppParCurves.AppParCurves_HArray1OfConstraintCouple_swigregister
AppParCurves_HArray1OfConstraintCouple_swigregister(AppParCurves_HArray1OfConstraintCouple)

class AppParCurves_HArray1OfMultiPoint(AppParCurves_Array1OfMultiPoint, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfMultiPoint_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfMultiPoint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiPoint_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiPoint
AppParCurves_HArray1OfMultiPoint.Array1 = new_instancemethod(_AppParCurves.AppParCurves_HArray1OfMultiPoint_Array1, None, AppParCurves_HArray1OfMultiPoint)
AppParCurves_HArray1OfMultiPoint.ChangeArray1 = new_instancemethod(_AppParCurves.AppParCurves_HArray1OfMultiPoint_ChangeArray1, None, AppParCurves_HArray1OfMultiPoint)
AppParCurves_HArray1OfMultiPoint_swigregister = _AppParCurves.AppParCurves_HArray1OfMultiPoint_swigregister
AppParCurves_HArray1OfMultiPoint_swigregister(AppParCurves_HArray1OfMultiPoint)

class AppParCurves_HArray1OfMultiBSpCurve(AppParCurves_Array1OfMultiBSpCurve, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfMultiBSpCurve(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiBSpCurve
AppParCurves_HArray1OfMultiBSpCurve.Array1 = new_instancemethod(_AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_Array1, None, AppParCurves_HArray1OfMultiBSpCurve)
AppParCurves_HArray1OfMultiBSpCurve.ChangeArray1 = new_instancemethod(_AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_ChangeArray1, None, AppParCurves_HArray1OfMultiBSpCurve)
AppParCurves_HArray1OfMultiBSpCurve_swigregister = _AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_swigregister
AppParCurves_HArray1OfMultiBSpCurve_swigregister(AppParCurves_HArray1OfMultiBSpCurve)



