# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ApproxInt module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_approxint.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ApproxInt.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ApproxInt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ApproxInt')
    _ApproxInt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ApproxInt', [dirname(__file__)])
        except ImportError:
            import _ApproxInt
            return _ApproxInt
        try:
            _mod = imp.load_module('_ApproxInt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ApproxInt = swig_import_helper()
    del swig_import_helper
else:
    import _ApproxInt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ApproxInt.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ApproxInt.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ApproxInt.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ApproxInt.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ApproxInt.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ApproxInt.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ApproxInt.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ApproxInt.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ApproxInt.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ApproxInt.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ApproxInt.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ApproxInt.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ApproxInt.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ApproxInt.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ApproxInt.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ApproxInt.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ApproxInt.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ApproxInt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ApproxInt.process_exception(error, method_name, class_name)
process_exception = _ApproxInt.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColgp
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.gp
import OCC.Core.IntSurf
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
class ApproxInt_KnotTools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BuildKnots(*args) -> "void":
        """
        * Main function to build optimal knot sequence. At least one set from (thePntsXYZ, thePntsU1V1, thePntsU2V2) should exist. @param thePntsXYZ - Set of 3d points. @param thePntsU1V1 - Set of 2d points. @param thePntsU2V2 - Set of 2d points. @param thePars - Expected parameters assoiated with set. @param theApproxXYZ - Flag, existence of 3d set. @param theApproxU1V1 - Flag existence of first 2d set. @param theApproxU2V2 - Flag existence of second 2d set. @param theMinNbPnts - Minimal number of points per knot interval. @param theKnots - output knots sequence.
        	:param thePntsXYZ:
        	:type thePntsXYZ: TColgp_Array1OfPnt
        	:param thePntsU1V1:
        	:type thePntsU1V1: TColgp_Array1OfPnt2d
        	:param thePntsU2V2:
        	:type thePntsU2V2: TColgp_Array1OfPnt2d
        	:param thePars:
        	:type thePars: math_Vector
        	:param theApproxXYZ:
        	:type theApproxXYZ: bool
        	:param theApproxU1V1:
        	:type theApproxU1V1: bool
        	:param theApproxU2V2:
        	:type theApproxU2V2: bool
        	:param theMinNbPnts:
        	:type theMinNbPnts: int
        	:param theKnots:
        	:type theKnots: NCollection_Vector<int>
        	:rtype: void
        """
        return _ApproxInt.ApproxInt_KnotTools_BuildKnots(*args)

    BuildKnots = staticmethod(BuildKnots)

    __repr__ = _dumps_object


    def __init__(self):
        _ApproxInt.ApproxInt_KnotTools_swiginit(self, _ApproxInt.new_ApproxInt_KnotTools())
    __swig_destroy__ = _ApproxInt.delete_ApproxInt_KnotTools
ApproxInt_KnotTools_swigregister = _ApproxInt.ApproxInt_KnotTools_swigregister
ApproxInt_KnotTools_swigregister(ApproxInt_KnotTools)

def ApproxInt_KnotTools_BuildKnots(*args) -> "void":
    """
    * Main function to build optimal knot sequence. At least one set from (thePntsXYZ, thePntsU1V1, thePntsU2V2) should exist. @param thePntsXYZ - Set of 3d points. @param thePntsU1V1 - Set of 2d points. @param thePntsU2V2 - Set of 2d points. @param thePars - Expected parameters assoiated with set. @param theApproxXYZ - Flag, existence of 3d set. @param theApproxU1V1 - Flag existence of first 2d set. @param theApproxU2V2 - Flag existence of second 2d set. @param theMinNbPnts - Minimal number of points per knot interval. @param theKnots - output knots sequence.
    	:param thePntsXYZ:
    	:type thePntsXYZ: TColgp_Array1OfPnt
    	:param thePntsU1V1:
    	:type thePntsU1V1: TColgp_Array1OfPnt2d
    	:param thePntsU2V2:
    	:type thePntsU2V2: TColgp_Array1OfPnt2d
    	:param thePars:
    	:type thePars: math_Vector
    	:param theApproxXYZ:
    	:type theApproxXYZ: bool
    	:param theApproxU1V1:
    	:type theApproxU1V1: bool
    	:param theApproxU2V2:
    	:type theApproxU2V2: bool
    	:param theMinNbPnts:
    	:type theMinNbPnts: int
    	:param theKnots:
    	:type theKnots: NCollection_Vector<int>
    	:rtype: void
    """
    return _ApproxInt.ApproxInt_KnotTools_BuildKnots(*args)

class ApproxInt_SvSurfaces(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Compute(self, *args) -> "Standard_Boolean":
        """
        * returns True if Tg,Tguv1 Tguv2 can be computed.
        	:param u1:
        	:type u1: float
        	:param v1:
        	:type v1: float
        	:param u2:
        	:type u2: float
        	:param v2:
        	:type v2: float
        	:param Pt:
        	:type Pt: gp_Pnt
        	:param Tg:
        	:type Tg: gp_Vec
        	:param Tguv1:
        	:type Tguv1: gp_Vec2d
        	:param Tguv2:
        	:type Tguv2: gp_Vec2d
        	:rtype: bool
        """
        return _ApproxInt.ApproxInt_SvSurfaces_Compute(self, *args)


    def Pnt(self, *args) -> "void":
        """
        :param u1:
        	:type u1: float
        	:param v1:
        	:type v1: float
        	:param u2:
        	:type u2: float
        	:param v2:
        	:type v2: float
        	:param P:
        	:type P: gp_Pnt
        	:rtype: void
        """
        return _ApproxInt.ApproxInt_SvSurfaces_Pnt(self, *args)


    def SeekPoint(self, *args) -> "Standard_Boolean":
        """
        * computes point on curve and parameters on the surfaces
        	:param u1:
        	:type u1: float
        	:param v1:
        	:type v1: float
        	:param u2:
        	:type u2: float
        	:param v2:
        	:type v2: float
        	:param Point:
        	:type Point: IntSurf_PntOn2S
        	:rtype: bool
        """
        return _ApproxInt.ApproxInt_SvSurfaces_SeekPoint(self, *args)


    def Tangency(self, *args) -> "Standard_Boolean":
        """
        :param u1:
        	:type u1: float
        	:param v1:
        	:type v1: float
        	:param u2:
        	:type u2: float
        	:param v2:
        	:type v2: float
        	:param Tg:
        	:type Tg: gp_Vec
        	:rtype: bool
        """
        return _ApproxInt.ApproxInt_SvSurfaces_Tangency(self, *args)


    def TangencyOnSurf1(self, *args) -> "Standard_Boolean":
        """
        :param u1:
        	:type u1: float
        	:param v1:
        	:type v1: float
        	:param u2:
        	:type u2: float
        	:param v2:
        	:type v2: float
        	:param Tg:
        	:type Tg: gp_Vec2d
        	:rtype: bool
        """
        return _ApproxInt.ApproxInt_SvSurfaces_TangencyOnSurf1(self, *args)


    def TangencyOnSurf2(self, *args) -> "Standard_Boolean":
        """
        :param u1:
        	:type u1: float
        	:param v1:
        	:type v1: float
        	:param u2:
        	:type u2: float
        	:param v2:
        	:type v2: float
        	:param Tg:
        	:type Tg: gp_Vec2d
        	:rtype: bool
        """
        return _ApproxInt.ApproxInt_SvSurfaces_TangencyOnSurf2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ApproxInt.delete_ApproxInt_SvSurfaces
ApproxInt_SvSurfaces.Compute = new_instancemethod(_ApproxInt.ApproxInt_SvSurfaces_Compute, None, ApproxInt_SvSurfaces)
ApproxInt_SvSurfaces.Pnt = new_instancemethod(_ApproxInt.ApproxInt_SvSurfaces_Pnt, None, ApproxInt_SvSurfaces)
ApproxInt_SvSurfaces.SeekPoint = new_instancemethod(_ApproxInt.ApproxInt_SvSurfaces_SeekPoint, None, ApproxInt_SvSurfaces)
ApproxInt_SvSurfaces.Tangency = new_instancemethod(_ApproxInt.ApproxInt_SvSurfaces_Tangency, None, ApproxInt_SvSurfaces)
ApproxInt_SvSurfaces.TangencyOnSurf1 = new_instancemethod(_ApproxInt.ApproxInt_SvSurfaces_TangencyOnSurf1, None, ApproxInt_SvSurfaces)
ApproxInt_SvSurfaces.TangencyOnSurf2 = new_instancemethod(_ApproxInt.ApproxInt_SvSurfaces_TangencyOnSurf2, None, ApproxInt_SvSurfaces)
ApproxInt_SvSurfaces_swigregister = _ApproxInt.ApproxInt_SvSurfaces_swigregister
ApproxInt_SvSurfaces_swigregister(ApproxInt_SvSurfaces)



