# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BOPAlgo module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_bopalgo.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BOPAlgo.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BOPAlgo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BOPAlgo')
    _BOPAlgo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BOPAlgo', [dirname(__file__)])
        except ImportError:
            import _BOPAlgo
            return _BOPAlgo
        try:
            _mod = imp.load_module('_BOPAlgo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BOPAlgo = swig_import_helper()
    del swig_import_helper
else:
    import _BOPAlgo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BOPAlgo.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BOPAlgo.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BOPAlgo.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BOPAlgo.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BOPAlgo.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BOPAlgo.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BOPAlgo.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BOPAlgo.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BOPAlgo.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BOPAlgo.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BOPAlgo.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BOPAlgo.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BOPAlgo.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BOPAlgo.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BOPAlgo.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BOPAlgo.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BOPAlgo.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BOPAlgo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BOPAlgo.process_exception(error, method_name, class_name)
process_exception = _BOPAlgo.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TopTools
import OCC.Core.TCollection
import OCC.Core.IntTools
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.Geom2dHatch
import OCC.Core.IntRes2d
import OCC.Core.HatchGen
import OCC.Core.Geom2dInt
import OCC.Core.IntCurve
import OCC.Core.Extrema
import OCC.Core.Intf
import OCC.Core.GeomAPI
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.AppParCurves
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.IntSurf
import OCC.Core.IntCurvesFace
import OCC.Core.IntPatch
import OCC.Core.IntAna
import OCC.Core.GeomInt
import OCC.Core.IntImp
import OCC.Core.ApproxInt
import OCC.Core.BOPDS
import OCC.Core.BRepTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.BOPTools
BOPAlgo_CheckUnknown = _BOPAlgo.BOPAlgo_CheckUnknown
BOPAlgo_BadType = _BOPAlgo.BOPAlgo_BadType
BOPAlgo_SelfIntersect = _BOPAlgo.BOPAlgo_SelfIntersect
BOPAlgo_TooSmallEdge = _BOPAlgo.BOPAlgo_TooSmallEdge
BOPAlgo_NonRecoverableFace = _BOPAlgo.BOPAlgo_NonRecoverableFace
BOPAlgo_IncompatibilityOfVertex = _BOPAlgo.BOPAlgo_IncompatibilityOfVertex
BOPAlgo_IncompatibilityOfEdge = _BOPAlgo.BOPAlgo_IncompatibilityOfEdge
BOPAlgo_IncompatibilityOfFace = _BOPAlgo.BOPAlgo_IncompatibilityOfFace
BOPAlgo_OperationAborted = _BOPAlgo.BOPAlgo_OperationAborted
BOPAlgo_GeomAbs_C0 = _BOPAlgo.BOPAlgo_GeomAbs_C0
BOPAlgo_InvalidCurveOnSurface = _BOPAlgo.BOPAlgo_InvalidCurveOnSurface
BOPAlgo_NotValid = _BOPAlgo.BOPAlgo_NotValid
BOPAlgo_COMMON = _BOPAlgo.BOPAlgo_COMMON
BOPAlgo_FUSE = _BOPAlgo.BOPAlgo_FUSE
BOPAlgo_CUT = _BOPAlgo.BOPAlgo_CUT
BOPAlgo_CUT21 = _BOPAlgo.BOPAlgo_CUT21
BOPAlgo_SECTION = _BOPAlgo.BOPAlgo_SECTION
BOPAlgo_UNKNOWN = _BOPAlgo.BOPAlgo_UNKNOWN
BOPAlgo_GlueOff = _BOPAlgo.BOPAlgo_GlueOff
BOPAlgo_GlueShift = _BOPAlgo.BOPAlgo_GlueShift
BOPAlgo_GlueFull = _BOPAlgo.BOPAlgo_GlueFull
class BOPAlgo_ListOfCheckResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BOPAlgo.BOPAlgo_ListOfCheckResult_swiginit(self, _BOPAlgo.new_BOPAlgo_ListOfCheckResult(*args))
    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_ListOfCheckResult
BOPAlgo_ListOfCheckResult.begin = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_begin, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.end = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_end, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.cbegin = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_cbegin, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.cend = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_cend, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.Size = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_Size, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.Assign = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_Assign, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.Set = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_Set, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.Clear = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_Clear, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.First = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_First, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.Last = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_Last, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.Append = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_Append, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.Prepend = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_Prepend, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.RemoveFirst = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_RemoveFirst, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.Remove = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_Remove, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.InsertBefore = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_InsertBefore, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.InsertAfter = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_InsertAfter, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult.Reverse = new_instancemethod(_BOPAlgo.BOPAlgo_ListOfCheckResult_Reverse, None, BOPAlgo_ListOfCheckResult)
BOPAlgo_ListOfCheckResult_swigregister = _BOPAlgo.BOPAlgo_ListOfCheckResult_swigregister
BOPAlgo_ListOfCheckResult_swigregister(BOPAlgo_ListOfCheckResult)

class BOPAlgo_CheckResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddFaultyShape1(self, *args) -> "void":
        """
        * adds faulty sub-shapes from object to a list
        	:param TheShape:
        	:type TheShape: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CheckResult_AddFaultyShape1(self, *args)


    def AddFaultyShape2(self, *args) -> "void":
        """
        * adds faulty sub-shapes from tool to a list
        	:param TheShape:
        	:type TheShape: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CheckResult_AddFaultyShape2(self, *args)


    def __init__(self, *args):
        """
        * empty constructor
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_CheckResult_swiginit(self, _BOPAlgo.new_BOPAlgo_CheckResult(*args))

    def GetCheckStatus(self, *args) -> "BOPAlgo_CheckStatus":
        """
        * gets status of faulty
        	:rtype: BOPAlgo_CheckStatus
        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetCheckStatus(self, *args)


    def GetFaultyShapes1(self, *args) -> "TopTools_ListOfShape const &":
        """
        * returns list of faulty shapes for object
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetFaultyShapes1(self, *args)


    def GetFaultyShapes2(self, *args) -> "TopTools_ListOfShape const &":
        """
        * returns list of faulty shapes for tool
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetFaultyShapes2(self, *args)


    def GetMaxDistance1(self, *args) -> "Standard_Real":
        """
        * Returns the distance for the first shape
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetMaxDistance1(self, *args)


    def GetMaxDistance2(self, *args) -> "Standard_Real":
        """
        * Returns the distance for the second shape
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetMaxDistance2(self, *args)


    def GetMaxParameter1(self, *args) -> "Standard_Real":
        """
        * Returns the parameter for the fircst shape
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetMaxParameter1(self, *args)


    def GetMaxParameter2(self, *args) -> "Standard_Real":
        """
        * Returns the parameter for the second shape
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetMaxParameter2(self, *args)


    def GetShape1(self, *args) -> "TopoDS_Shape const":
        """
        * returns ancestor shape (object) for faulties
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetShape1(self, *args)


    def GetShape2(self, *args) -> "TopoDS_Shape const":
        """
        * returns ancestor shape (tool) for faulties
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetShape2(self, *args)


    def SetCheckStatus(self, *args) -> "void":
        """
        * set status of faulty
        	:param TheStatus:
        	:type TheStatus: BOPAlgo_CheckStatus
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetCheckStatus(self, *args)


    def SetMaxDistance1(self, *args) -> "void":
        """
        * Sets max distance for the first shape
        	:param theDist:
        	:type theDist: float
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetMaxDistance1(self, *args)


    def SetMaxDistance2(self, *args) -> "void":
        """
        * Sets max distance for the second shape
        	:param theDist:
        	:type theDist: float
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetMaxDistance2(self, *args)


    def SetMaxParameter1(self, *args) -> "void":
        """
        * Sets the parameter for the first shape
        	:param thePar:
        	:type thePar: float
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetMaxParameter1(self, *args)


    def SetMaxParameter2(self, *args) -> "void":
        """
        * Sets the parameter for the second shape
        	:param thePar:
        	:type thePar: float
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetMaxParameter2(self, *args)


    def SetShape1(self, *args) -> "void":
        """
        * sets ancestor shape (object) for faulty sub-shapes
        	:param TheShape:
        	:type TheShape: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetShape1(self, *args)


    def SetShape2(self, *args) -> "void":
        """
        * sets ancestor shape (tool) for faulty sub-shapes
        	:param TheShape:
        	:type TheShape: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetShape2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_CheckResult
BOPAlgo_CheckResult.AddFaultyShape1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_AddFaultyShape1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.AddFaultyShape2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_AddFaultyShape2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetCheckStatus = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetCheckStatus, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetFaultyShapes1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetFaultyShapes1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetFaultyShapes2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetFaultyShapes2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetMaxDistance1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetMaxDistance1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetMaxDistance2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetMaxDistance2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetMaxParameter1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetMaxParameter1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetMaxParameter2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetMaxParameter2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetShape1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetShape1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetShape2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetShape2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetCheckStatus = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetCheckStatus, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetMaxDistance1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetMaxDistance1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetMaxDistance2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetMaxDistance2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetMaxParameter1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetMaxParameter1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetMaxParameter2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetMaxParameter2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetShape1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetShape1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetShape2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetShape2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult_swigregister = _BOPAlgo.BOPAlgo_CheckResult_swigregister
BOPAlgo_CheckResult_swigregister(BOPAlgo_CheckResult)

class BOPAlgo_Options(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddError(self, *args) -> "void":
        """
        * //!@name Error reporting mechanism Adds the alert as error (fail)
        	:param theAlert:
        	:type theAlert: Message_Alert
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Options_AddError(self, *args)


    def AddWarning(self, *args) -> "void":
        """
        * Adds the alert as warning
        	:param theAlert:
        	:type theAlert: Message_Alert
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Options_AddWarning(self, *args)


    def Allocator(self, *args) -> "opencascade::handle< NCollection_BaseAllocator > const &":
        """
        * Returns allocator
        	:rtype: opencascade::handle<NCollection_BaseAllocator>
        """
        return _BOPAlgo.BOPAlgo_Options_Allocator(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Constructor with allocator
        	:param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_Options_swiginit(self, _BOPAlgo.new_BOPAlgo_Options(*args))

    def Clear(self, *args) -> "void":
        """
        * Clears all warnings and errors, and any data cached by the algorithm. User defined options are not cleared.
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Options_Clear(self, *args)


    def ClearWarnings(self, *args) -> "void":
        """
        * Clears the warnings of the algorithm
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Options_ClearWarnings(self, *args)


    def DumpErrorsToString(self) -> "std::string":
        """DumpErrorsToString(BOPAlgo_Options self) -> std::string"""
        return _BOPAlgo.BOPAlgo_Options_DumpErrorsToString(self)


    def DumpWarningsToString(self) -> "std::string":
        """DumpWarningsToString(BOPAlgo_Options self) -> std::string"""
        return _BOPAlgo.BOPAlgo_Options_DumpWarningsToString(self)


    def FuzzyValue(self, *args) -> "Standard_Real":
        """
        * Returns the additional tolerance
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_Options_FuzzyValue(self, *args)


    def GetParallelMode(*args) -> "Standard_Boolean":
        """
        * //!@name Parallel processing mode Gets the global parallel mode
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_Options_GetParallelMode(*args)

    GetParallelMode = staticmethod(GetParallelMode)

    def GetReport(self, *args) -> "opencascade::handle< Message_Report > const &":
        """
        * Returns report collecting all errors and warnings
        	:rtype: opencascade::handle<Message_Report>
        """
        return _BOPAlgo.BOPAlgo_Options_GetReport(self, *args)


    def HasError(self, *args) -> "Standard_Boolean":
        """
        * Returns true if algorithm has generated error of specified type
        	:param theType:
        	:type theType: Standard_Type
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_Options_HasError(self, *args)


    def HasErrors(self, *args) -> "Standard_Boolean":
        """
        * Returns true if algorithm has failed
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_Options_HasErrors(self, *args)


    def HasWarning(self, *args) -> "Standard_Boolean":
        """
        * Returns true if algorithm has generated warning of specified type
        	:param theType:
        	:type theType: Standard_Type
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_Options_HasWarning(self, *args)


    def HasWarnings(self, *args) -> "Standard_Boolean":
        """
        * Returns true if algorithm has generated some warning alerts
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_Options_HasWarnings(self, *args)


    def RunParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag of parallel processing
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_Options_RunParallel(self, *args)


    def SetFuzzyValue(self, *args) -> "void":
        """
        * //!@name Fuzzy tolerance Sets the additional tolerance
        	:param theFuzz:
        	:type theFuzz: float
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Options_SetFuzzyValue(self, *args)


    def SetParallelMode(*args) -> "void":
        """
        * Sets the global parallel mode
        	:param theNewMode:
        	:type theNewMode: bool
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_Options_SetParallelMode(*args)

    SetParallelMode = staticmethod(SetParallelMode)

    def SetProgressIndicator(self, *args) -> "void":
        """
        * //!@name Progress indicator Set the Progress Indicator object.
        	:param theObj:
        	:type theObj: Message_ProgressIndicator
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Options_SetProgressIndicator(self, *args)


    def SetRunParallel(self, *args) -> "void":
        """
        * Set the flag of parallel processing if <theFlag> is true the parallel processing is switched on if <theFlag> is false the parallel processing is switched off
        	:param theFlag:
        	:type theFlag: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Options_SetRunParallel(self, *args)


    def SetUseOBB(self, *args) -> "void":
        """
        * //!@name Usage of Oriented Bounding boxes Enables/Disables the usage of OBB
        	:param theUseOBB:
        	:type theUseOBB: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Options_SetUseOBB(self, *args)


    def UseOBB(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag defining usage of OBB
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_Options_UseOBB(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_Options
BOPAlgo_Options.AddError = new_instancemethod(_BOPAlgo.BOPAlgo_Options_AddError, None, BOPAlgo_Options)
BOPAlgo_Options.AddWarning = new_instancemethod(_BOPAlgo.BOPAlgo_Options_AddWarning, None, BOPAlgo_Options)
BOPAlgo_Options.Allocator = new_instancemethod(_BOPAlgo.BOPAlgo_Options_Allocator, None, BOPAlgo_Options)
BOPAlgo_Options.Clear = new_instancemethod(_BOPAlgo.BOPAlgo_Options_Clear, None, BOPAlgo_Options)
BOPAlgo_Options.ClearWarnings = new_instancemethod(_BOPAlgo.BOPAlgo_Options_ClearWarnings, None, BOPAlgo_Options)
BOPAlgo_Options.DumpErrorsToString = new_instancemethod(_BOPAlgo.BOPAlgo_Options_DumpErrorsToString, None, BOPAlgo_Options)
BOPAlgo_Options.DumpWarningsToString = new_instancemethod(_BOPAlgo.BOPAlgo_Options_DumpWarningsToString, None, BOPAlgo_Options)
BOPAlgo_Options.FuzzyValue = new_instancemethod(_BOPAlgo.BOPAlgo_Options_FuzzyValue, None, BOPAlgo_Options)
BOPAlgo_Options.GetReport = new_instancemethod(_BOPAlgo.BOPAlgo_Options_GetReport, None, BOPAlgo_Options)
BOPAlgo_Options.HasError = new_instancemethod(_BOPAlgo.BOPAlgo_Options_HasError, None, BOPAlgo_Options)
BOPAlgo_Options.HasErrors = new_instancemethod(_BOPAlgo.BOPAlgo_Options_HasErrors, None, BOPAlgo_Options)
BOPAlgo_Options.HasWarning = new_instancemethod(_BOPAlgo.BOPAlgo_Options_HasWarning, None, BOPAlgo_Options)
BOPAlgo_Options.HasWarnings = new_instancemethod(_BOPAlgo.BOPAlgo_Options_HasWarnings, None, BOPAlgo_Options)
BOPAlgo_Options.RunParallel = new_instancemethod(_BOPAlgo.BOPAlgo_Options_RunParallel, None, BOPAlgo_Options)
BOPAlgo_Options.SetFuzzyValue = new_instancemethod(_BOPAlgo.BOPAlgo_Options_SetFuzzyValue, None, BOPAlgo_Options)
BOPAlgo_Options.SetProgressIndicator = new_instancemethod(_BOPAlgo.BOPAlgo_Options_SetProgressIndicator, None, BOPAlgo_Options)
BOPAlgo_Options.SetRunParallel = new_instancemethod(_BOPAlgo.BOPAlgo_Options_SetRunParallel, None, BOPAlgo_Options)
BOPAlgo_Options.SetUseOBB = new_instancemethod(_BOPAlgo.BOPAlgo_Options_SetUseOBB, None, BOPAlgo_Options)
BOPAlgo_Options.UseOBB = new_instancemethod(_BOPAlgo.BOPAlgo_Options_UseOBB, None, BOPAlgo_Options)
BOPAlgo_Options_swigregister = _BOPAlgo.BOPAlgo_Options_swigregister
BOPAlgo_Options_swigregister(BOPAlgo_Options)

def BOPAlgo_Options_GetParallelMode(*args) -> "Standard_Boolean":
    """
    * //!@name Parallel processing mode Gets the global parallel mode
    	:rtype: bool
    """
    return _BOPAlgo.BOPAlgo_Options_GetParallelMode(*args)

def BOPAlgo_Options_SetParallelMode(*args) -> "void":
    """
    * Sets the global parallel mode
    	:param theNewMode:
    	:type theNewMode: bool
    	:rtype: void
    """
    return _BOPAlgo.BOPAlgo_Options_SetParallelMode(*args)

class BOPAlgo_SectionAttribute(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Approximation(self, *args) -> "Standard_Boolean":
        """
        * Sets the Approximation flag
        	:param theApprox:
        	:type theApprox: bool
        	:rtype: None
        * Returns the Approximation flag
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_SectionAttribute_Approximation(self, *args)


    def __init__(self, *args):
        """
        * Default constructor
        	:rtype: None
        * Constructor
        	:param theAproximation:
        	:type theAproximation: bool
        	:param thePCurveOnS1:
        	:type thePCurveOnS1: bool
        	:param thePCurveOnS2:
        	:type thePCurveOnS2: bool
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_SectionAttribute_swiginit(self, _BOPAlgo.new_BOPAlgo_SectionAttribute(*args))

    def PCurveOnS1(self, *args) -> "Standard_Boolean":
        """
        * Sets the PCurveOnS1 flag
        	:param thePCurveOnS1:
        	:type thePCurveOnS1: bool
        	:rtype: None
        * Returns the PCurveOnS1 flag
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_SectionAttribute_PCurveOnS1(self, *args)


    def PCurveOnS2(self, *args) -> "Standard_Boolean":
        """
        * Sets the PCurveOnS2 flag
        	:param thePCurveOnS2:
        	:type thePCurveOnS2: bool
        	:rtype: None
        * Returns the PCurveOnS2 flag
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_SectionAttribute_PCurveOnS2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_SectionAttribute
BOPAlgo_SectionAttribute.Approximation = new_instancemethod(_BOPAlgo.BOPAlgo_SectionAttribute_Approximation, None, BOPAlgo_SectionAttribute)
BOPAlgo_SectionAttribute.PCurveOnS1 = new_instancemethod(_BOPAlgo.BOPAlgo_SectionAttribute_PCurveOnS1, None, BOPAlgo_SectionAttribute)
BOPAlgo_SectionAttribute.PCurveOnS2 = new_instancemethod(_BOPAlgo.BOPAlgo_SectionAttribute_PCurveOnS2, None, BOPAlgo_SectionAttribute)
BOPAlgo_SectionAttribute_swigregister = _BOPAlgo.BOPAlgo_SectionAttribute_swigregister
BOPAlgo_SectionAttribute_swigregister(BOPAlgo_SectionAttribute)

class BOPAlgo_Tools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ClassifyFaces(*args) -> "void":
        """
        * Classifies the faces <theFaces> relatively solids <theSolids>. The IN faces for solids are stored into output data map <theInParts>. //! The map <theSolidsIF> contains INTERNAL faces of the solids, to avoid their additional classification. //! Firstly, it checks the intersection of bounding boxes of the shapes. If the Box is not stored in the <theShapeBoxMap> map, it builds the box. If the bounding boxes of solid and face are interfering the classification is performed. //! It is assumed that all faces and solids are already intersected and do not have any geometrically coinciding parts without topological sharing of these parts
        	:param theFaces:
        	:type theFaces: TopTools_ListOfShape
        	:param theSolids:
        	:type theSolids: TopTools_ListOfShape
        	:param theRunParallel:
        	:type theRunParallel: bool
        	:param theContext:
        	:type theContext: IntTools_Context
        	:param theInParts:
        	:type theInParts: TopTools_IndexedDataMapOfShapeListOfShape
        	:param theShapeBoxMap: default value is TopTools_DataMapOfShapeBox()
        	:type theShapeBoxMap: TopTools_DataMapOfShapeBox
        	:param theSolidsIF: default value is TopTools_DataMapOfShapeListOfShape()
        	:type theSolidsIF: TopTools_DataMapOfShapeListOfShape
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_Tools_ClassifyFaces(*args)

    ClassifyFaces = staticmethod(ClassifyFaces)

    def ComputeToleranceOfCB(*args) -> "Standard_Real":
        """
        :param theCB:
        	:type theCB: BOPDS_CommonBlock
        	:param theDS:
        	:type theDS: BOPDS_PDS
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_Tools_ComputeToleranceOfCB(*args)

    ComputeToleranceOfCB = staticmethod(ComputeToleranceOfCB)

    def EdgesToWires(*args) -> "Standard_Integer":
        """
        * Creates planar wires from the given edges. The input edges are expected to be planar. And for the performance sake the method does not check if the edges are really planar. Thus, the result wires will also be not planar if the input edges are not planar. The edges may be not shared, but the resulting wires will be sharing the coinciding parts and intersecting parts. The output wires may be non-manifold and contain free and multi-connected vertices. Parameters: <theEdges> - input edges; <theWires> - output wires; <theShared> - boolean flag which defines whether the input edges are already shared or have to be intersected; <theAngTol> - the angular tolerance which will be used for distinguishing the planes in which the edges are located. Default value is 1.e-8 which is used for intersection of planes in IntTools_FaceFace. Method returns the following error statuses: 0 - in case of success (at least one wire has been built); 1 - in case there are no edges in the given shape; 2 - sharing of the edges has failed.
        	:param theEdges:
        	:type theEdges: TopoDS_Shape
        	:param theWires:
        	:type theWires: TopoDS_Shape
        	:param theShared: default value is Standard_False
        	:type theShared: bool
        	:param theAngTol: default value is 1e-8
        	:type theAngTol: float
        	:rtype: int
        """
        return _BOPAlgo.BOPAlgo_Tools_EdgesToWires(*args)

    EdgesToWires = staticmethod(EdgesToWires)

    def FillInternals(*args) -> "void":
        """
        * Classifies the given parts relatively the given solids and fills the solids with the parts classified as INTERNAL. //! @param theSolids - The solids to put internals to @param theParts - The parts to classify relatively solids @param theImages - Possible images of the parts that has to be classified @param theContext - Cashed geometrical tools to speed-up classifications
        	:param theSolids:
        	:type theSolids: TopTools_ListOfShape
        	:param theParts:
        	:type theParts: TopTools_ListOfShape
        	:param theImages:
        	:type theImages: TopTools_DataMapOfShapeListOfShape
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_Tools_FillInternals(*args)

    FillInternals = staticmethod(FillInternals)

    def IntersectVertices(*args) -> "void":
        """
        * Finds chains of intersecting vertices
        	:param theVertices:
        	:type theVertices: TopTools_IndexedDataMapOfShapeReal
        	:param theFuzzyValue:
        	:type theFuzzyValue: float
        	:param theChains:
        	:type theChains: TopTools_ListOfListOfShape
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_Tools_IntersectVertices(*args)

    IntersectVertices = staticmethod(IntersectVertices)

    def PerformCommonBlocks(*args) -> "void":
        """
        * Create Common Blocks from the groups of pave blocks of <theMBlocks> connection map.
        	:param theMBlocks:
        	:type theMBlocks: BOPDS_IndexedDataMapOfPaveBlockListOfPaveBlock
        	:param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:param theDS:
        	:type theDS: BOPDS_PDS
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        * Create Common Blocks on faces using the PB->Faces connection map <theMBlocks>.
        	:param theMBlocks:
        	:type theMBlocks: BOPDS_IndexedDataMapOfPaveBlockListOfInteger
        	:param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:param pDS:
        	:type pDS: BOPDS_PDS
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_Tools_PerformCommonBlocks(*args)

    PerformCommonBlocks = staticmethod(PerformCommonBlocks)

    def TreatCompound(*args) -> "void":
        """
        * Collect in the output list recursively all non-compound subshapes of the first level of the given shape theS. If a shape presents in the map theMFence it is skipped. All shapes put in the output are also added into theMFence.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:param theMFence:
        	:type theMFence: TopTools_MapOfShape
        	:param theLS:
        	:type theLS: TopTools_ListOfShape
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_Tools_TreatCompound(*args)

    TreatCompound = staticmethod(TreatCompound)

    def WiresToFaces(*args) -> "Standard_Boolean":
        """
        * Creates planar faces from given planar wires. The method does not check if the wires are really planar. The input wires may be non-manifold but should be shared. The wires located in the same planes and included into other wires will create holes in the faces built from outer wires. The tolerance values of the input shapes may be modified during the operation due to projection of the edges on the planes for creation of 2D curves. Parameters: <theWires> - the given wires; <theFaces> - the output faces; <theAngTol> - the angular tolerance for distinguishing the planes in which the wires are located. Default value is 1.e-8 which is used for intersection of planes in IntTools_FaceFace. Method returns True in case of success, i.e. at least one face has been built.
        	:param theWires:
        	:type theWires: TopoDS_Shape
        	:param theFaces:
        	:type theFaces: TopoDS_Shape
        	:param theAngTol: default value is 1e-8
        	:type theAngTol: float
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_Tools_WiresToFaces(*args)

    WiresToFaces = staticmethod(WiresToFaces)

    __repr__ = _dumps_object


    def __init__(self):
        _BOPAlgo.BOPAlgo_Tools_swiginit(self, _BOPAlgo.new_BOPAlgo_Tools())
    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_Tools
BOPAlgo_Tools_swigregister = _BOPAlgo.BOPAlgo_Tools_swigregister
BOPAlgo_Tools_swigregister(BOPAlgo_Tools)

def BOPAlgo_Tools_ClassifyFaces(*args) -> "void":
    """
    * Classifies the faces <theFaces> relatively solids <theSolids>. The IN faces for solids are stored into output data map <theInParts>. //! The map <theSolidsIF> contains INTERNAL faces of the solids, to avoid their additional classification. //! Firstly, it checks the intersection of bounding boxes of the shapes. If the Box is not stored in the <theShapeBoxMap> map, it builds the box. If the bounding boxes of solid and face are interfering the classification is performed. //! It is assumed that all faces and solids are already intersected and do not have any geometrically coinciding parts without topological sharing of these parts
    	:param theFaces:
    	:type theFaces: TopTools_ListOfShape
    	:param theSolids:
    	:type theSolids: TopTools_ListOfShape
    	:param theRunParallel:
    	:type theRunParallel: bool
    	:param theContext:
    	:type theContext: IntTools_Context
    	:param theInParts:
    	:type theInParts: TopTools_IndexedDataMapOfShapeListOfShape
    	:param theShapeBoxMap: default value is TopTools_DataMapOfShapeBox()
    	:type theShapeBoxMap: TopTools_DataMapOfShapeBox
    	:param theSolidsIF: default value is TopTools_DataMapOfShapeListOfShape()
    	:type theSolidsIF: TopTools_DataMapOfShapeListOfShape
    	:rtype: void
    """
    return _BOPAlgo.BOPAlgo_Tools_ClassifyFaces(*args)

def BOPAlgo_Tools_ComputeToleranceOfCB(*args) -> "Standard_Real":
    """
    :param theCB:
    	:type theCB: BOPDS_CommonBlock
    	:param theDS:
    	:type theDS: BOPDS_PDS
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: float
    """
    return _BOPAlgo.BOPAlgo_Tools_ComputeToleranceOfCB(*args)

def BOPAlgo_Tools_EdgesToWires(*args) -> "Standard_Integer":
    """
    * Creates planar wires from the given edges. The input edges are expected to be planar. And for the performance sake the method does not check if the edges are really planar. Thus, the result wires will also be not planar if the input edges are not planar. The edges may be not shared, but the resulting wires will be sharing the coinciding parts and intersecting parts. The output wires may be non-manifold and contain free and multi-connected vertices. Parameters: <theEdges> - input edges; <theWires> - output wires; <theShared> - boolean flag which defines whether the input edges are already shared or have to be intersected; <theAngTol> - the angular tolerance which will be used for distinguishing the planes in which the edges are located. Default value is 1.e-8 which is used for intersection of planes in IntTools_FaceFace. Method returns the following error statuses: 0 - in case of success (at least one wire has been built); 1 - in case there are no edges in the given shape; 2 - sharing of the edges has failed.
    	:param theEdges:
    	:type theEdges: TopoDS_Shape
    	:param theWires:
    	:type theWires: TopoDS_Shape
    	:param theShared: default value is Standard_False
    	:type theShared: bool
    	:param theAngTol: default value is 1e-8
    	:type theAngTol: float
    	:rtype: int
    """
    return _BOPAlgo.BOPAlgo_Tools_EdgesToWires(*args)

def BOPAlgo_Tools_FillInternals(*args) -> "void":
    """
    * Classifies the given parts relatively the given solids and fills the solids with the parts classified as INTERNAL. //! @param theSolids - The solids to put internals to @param theParts - The parts to classify relatively solids @param theImages - Possible images of the parts that has to be classified @param theContext - Cashed geometrical tools to speed-up classifications
    	:param theSolids:
    	:type theSolids: TopTools_ListOfShape
    	:param theParts:
    	:type theParts: TopTools_ListOfShape
    	:param theImages:
    	:type theImages: TopTools_DataMapOfShapeListOfShape
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: void
    """
    return _BOPAlgo.BOPAlgo_Tools_FillInternals(*args)

def BOPAlgo_Tools_IntersectVertices(*args) -> "void":
    """
    * Finds chains of intersecting vertices
    	:param theVertices:
    	:type theVertices: TopTools_IndexedDataMapOfShapeReal
    	:param theFuzzyValue:
    	:type theFuzzyValue: float
    	:param theChains:
    	:type theChains: TopTools_ListOfListOfShape
    	:rtype: void
    """
    return _BOPAlgo.BOPAlgo_Tools_IntersectVertices(*args)

def BOPAlgo_Tools_PerformCommonBlocks(*args) -> "void":
    """
    * Create Common Blocks from the groups of pave blocks of <theMBlocks> connection map.
    	:param theMBlocks:
    	:type theMBlocks: BOPDS_IndexedDataMapOfPaveBlockListOfPaveBlock
    	:param theAllocator:
    	:type theAllocator: NCollection_BaseAllocator
    	:param theDS:
    	:type theDS: BOPDS_PDS
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    * Create Common Blocks on faces using the PB->Faces connection map <theMBlocks>.
    	:param theMBlocks:
    	:type theMBlocks: BOPDS_IndexedDataMapOfPaveBlockListOfInteger
    	:param theAllocator:
    	:type theAllocator: NCollection_BaseAllocator
    	:param pDS:
    	:type pDS: BOPDS_PDS
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    """
    return _BOPAlgo.BOPAlgo_Tools_PerformCommonBlocks(*args)

def BOPAlgo_Tools_TreatCompound(*args) -> "void":
    """
    * Collect in the output list recursively all non-compound subshapes of the first level of the given shape theS. If a shape presents in the map theMFence it is skipped. All shapes put in the output are also added into theMFence.
    	:param theS:
    	:type theS: TopoDS_Shape
    	:param theMFence:
    	:type theMFence: TopTools_MapOfShape
    	:param theLS:
    	:type theLS: TopTools_ListOfShape
    	:rtype: void
    """
    return _BOPAlgo.BOPAlgo_Tools_TreatCompound(*args)

def BOPAlgo_Tools_WiresToFaces(*args) -> "Standard_Boolean":
    """
    * Creates planar faces from given planar wires. The method does not check if the wires are really planar. The input wires may be non-manifold but should be shared. The wires located in the same planes and included into other wires will create holes in the faces built from outer wires. The tolerance values of the input shapes may be modified during the operation due to projection of the edges on the planes for creation of 2D curves. Parameters: <theWires> - the given wires; <theFaces> - the output faces; <theAngTol> - the angular tolerance for distinguishing the planes in which the wires are located. Default value is 1.e-8 which is used for intersection of planes in IntTools_FaceFace. Method returns True in case of success, i.e. at least one face has been built.
    	:param theWires:
    	:type theWires: TopoDS_Shape
    	:param theFaces:
    	:type theFaces: TopoDS_Shape
    	:param theAngTol: default value is 1e-8
    	:type theAngTol: float
    	:rtype: bool
    """
    return _BOPAlgo.BOPAlgo_Tools_WiresToFaces(*args)

class BOPAlgo_WireEdgeSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddShape(self, *args) -> "void":
        """
        :param sS:
        	:type sS: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_WireEdgeSet_AddShape(self, *args)


    def AddStartElement(self, *args) -> "void":
        """
        :param sS:
        	:type sS: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_WireEdgeSet_AddStartElement(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_WireEdgeSet_swiginit(self, _BOPAlgo.new_BOPAlgo_WireEdgeSet(*args))

    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _BOPAlgo.BOPAlgo_WireEdgeSet_Clear(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _BOPAlgo.BOPAlgo_WireEdgeSet_Face(self, *args)


    def SetFace(self, *args) -> "void":
        """
        :param aF:
        	:type aF: TopoDS_Face
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_WireEdgeSet_SetFace(self, *args)


    def Shapes(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _BOPAlgo.BOPAlgo_WireEdgeSet_Shapes(self, *args)


    def StartElements(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _BOPAlgo.BOPAlgo_WireEdgeSet_StartElements(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_WireEdgeSet
BOPAlgo_WireEdgeSet.AddShape = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_AddShape, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.AddStartElement = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_AddStartElement, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.Clear = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_Clear, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.Face = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_Face, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.SetFace = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_SetFace, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.Shapes = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_Shapes, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.StartElements = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_StartElements, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet_swigregister = _BOPAlgo.BOPAlgo_WireEdgeSet_swigregister
BOPAlgo_WireEdgeSet_swigregister(BOPAlgo_WireEdgeSet)

class BOPAlgo_Algo(BOPAlgo_Options):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Perform(self, *args) -> "void":
        """:rtype: void"""
        return _BOPAlgo.BOPAlgo_Algo_Perform(self, *args)


    __repr__ = _dumps_object

BOPAlgo_Algo.Perform = new_instancemethod(_BOPAlgo.BOPAlgo_Algo_Perform, None, BOPAlgo_Algo)
BOPAlgo_Algo_swigregister = _BOPAlgo.BOPAlgo_Algo_swigregister
BOPAlgo_Algo_swigregister(BOPAlgo_Algo)

class BOPAlgo_MakeConnected(BOPAlgo_Options):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddArgument(self, *args) -> "void":
        """
        * Adds the shape to the arguments. @param theS [in] One of the argument shapes.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_AddArgument(self, *args)


    def Arguments(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of arguments of the operation.
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_Arguments(self, *args)


    def __init__(self, *args):
        """
        * @name Constructor Empty constructor
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_MakeConnected_swiginit(self, _BOPAlgo.new_BOPAlgo_MakeConnected(*args))

    def Clear(self, *args) -> "void":
        """
        * @name Clearing the contents of the algorithm from previous runs Clears the contents of the algorithm.
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_Clear(self, *args)


    def ClearRepetitions(self, *args) -> "void":
        """
        * Clears the repetitions performed on the periodic shape, keeping the shape periodic.
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_ClearRepetitions(self, *args)


    def GetModified(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of shapes modified from the given shape. @param theS [in] The shape for which the modified shapes are necessary.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_GetModified(self, *args)


    def GetOrigins(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of original shapes from which the current shape has been created. @param theS [in] The shape for which the origins are necessary.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_GetOrigins(self, *args)


    def History(self, *args) -> "opencascade::handle< BRepTools_History > const &":
        """
        * @name History methods Returns the history of operations
        	:rtype: opencascade::handle<BRepTools_History>
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_History(self, *args)


    def MakePeriodic(self, *args) -> "void":
        """
        * @name Shape periodicity & repetition Makes the connected shape periodic. Repeated calls of this method overwrite the previous calls working with the basis connected shape. @param theParams [in] Periodic options.
        	:param theParams:
        	:type theParams: BOPAlgo_MakePeriodic::PeriodicityParams
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_MakePeriodic(self, *args)


    def MaterialsOnNegativeSide(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the original shapes which images contain the the given shape with REVERSED orientation. @param theS [in] The shape for which the materials are necessary.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_MaterialsOnNegativeSide(self, *args)


    def MaterialsOnPositiveSide(self, *args) -> "TopTools_ListOfShape const &":
        """
        * @name Material transitions Returns the original shapes which images contain the the given shape with FORWARD orientation. @param theS [in] The shape for which the materials are necessary.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_MaterialsOnPositiveSide(self, *args)


    def Perform(self, *args) -> "void":
        """
        * @name Performing the operations Performs the operation, i.e. makes the input shapes connected.
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_Perform(self, *args)


    def PeriodicShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the resulting periodic & repeated shape
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_PeriodicShape(self, *args)


    def PeriodicityTool(self, *args) -> "BOPAlgo_MakePeriodic const &":
        """
        * Returns the periodicity tool.
        	:rtype: BOPAlgo_MakePeriodic
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_PeriodicityTool(self, *args)


    def RepeatShape(self, *args) -> "void":
        """
        * Performs repetition of the periodic shape in specified direction required number of times. @param theDirectionID [in] The direction's ID (0 for X, 1 for Y, 2 for Z); @param theTimes [in] Requested number of repetitions (sign of the value defines  the side of the repetition direction (positive or negative)).
        	:param theDirectionID:
        	:type theDirectionID: int
        	:param theTimes:
        	:type theTimes: int
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_RepeatShape(self, *args)


    def SetArguments(self, *args) -> "void":
        """
        * @name Setters for the shapes to make connected Sets the shape for making them connected. @param theArgs [in] The arguments for the operation.
        	:param theArgs:
        	:type theArgs: TopTools_ListOfShape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_SetArguments(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * @name Getting the result shapes Returns the resulting connected shape
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_MakeConnected_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_MakeConnected
BOPAlgo_MakeConnected.AddArgument = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_AddArgument, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.Arguments = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_Arguments, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.Clear = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_Clear, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.ClearRepetitions = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_ClearRepetitions, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.GetModified = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_GetModified, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.GetOrigins = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_GetOrigins, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.History = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_History, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.MakePeriodic = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_MakePeriodic, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.MaterialsOnNegativeSide = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_MaterialsOnNegativeSide, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.MaterialsOnPositiveSide = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_MaterialsOnPositiveSide, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.Perform = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_Perform, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.PeriodicShape = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_PeriodicShape, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.PeriodicityTool = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_PeriodicityTool, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.RepeatShape = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_RepeatShape, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.SetArguments = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_SetArguments, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected.Shape = new_instancemethod(_BOPAlgo.BOPAlgo_MakeConnected_Shape, None, BOPAlgo_MakeConnected)
BOPAlgo_MakeConnected_swigregister = _BOPAlgo.BOPAlgo_MakeConnected_swigregister
BOPAlgo_MakeConnected_swigregister(BOPAlgo_MakeConnected)

class BOPAlgo_MakePeriodic(BOPAlgo_Options):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * @name Constructor Empty constructor
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_MakePeriodic_swiginit(self, _BOPAlgo.new_BOPAlgo_MakePeriodic(*args))

    def Clear(self, *args) -> "void":
        """
        * @name Clearing the algorithm from previous runs Clears the algorithm from previous runs
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_Clear(self, *args)


    def ClearRepetitions(self, *args) -> "void":
        """
        * Clears all performed repetitions. The next repetition will be performed on the base shape.
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_ClearRepetitions(self, *args)


    def GetTwins(self, *args) -> "TopTools_ListOfShape const &":
        """
        * @name Getting the identical shapes Returns the identical shapes for the given shape located on the opposite periodic side. Returns empty list in case the shape has no twin. //! @param theS [in] Shape to get the twins for.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_GetTwins(self, *args)


    def History(self, *args) -> "opencascade::handle< BRepTools_History > const &":
        """
        * @name Getting the History of the algorithm Returns the History of the algorithm
        	:rtype: opencascade::handle<BRepTools_History>
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_History(self, *args)


    def IsInputTrimmed(self, *args) -> "Standard_Boolean":
        """
        * Returns whether the input shape was trimmed in the specified direction. @param theDirectionID [in] The direction's ID.
        	:param theDirectionID:
        	:type theDirectionID: int
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_IsInputTrimmed(self, *args)


    def IsInputXTrimmed(self, *args) -> "Standard_Boolean":
        """
        * Returns whether the input shape was already trimmed for X period.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_IsInputXTrimmed(self, *args)


    def IsInputYTrimmed(self, *args) -> "Standard_Boolean":
        """
        * Returns whether the input shape was already trimmed for Y period.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_IsInputYTrimmed(self, *args)


    def IsInputZTrimmed(self, *args) -> "Standard_Boolean":
        """
        * Returns whether the input shape was already trimmed for Z period.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_IsInputZTrimmed(self, *args)


    def IsPeriodic(self, *args) -> "Standard_Boolean":
        """
        * Returns the info about Periodicity of the shape in specified direction. @param theDirectionID [in] The direction's ID.
        	:param theDirectionID:
        	:type theDirectionID: int
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_IsPeriodic(self, *args)


    def IsXPeriodic(self, *args) -> "Standard_Boolean":
        """
        * Returns the info about periodicity of the shape in X direction.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_IsXPeriodic(self, *args)


    def IsYPeriodic(self, *args) -> "Standard_Boolean":
        """
        * Returns the info about periodicity of the shape in Y direction.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_IsYPeriodic(self, *args)


    def IsZPeriodic(self, *args) -> "Standard_Boolean":
        """
        * Returns the info about periodicity of the shape in Z direction.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_IsZPeriodic(self, *args)


    def MakePeriodic(self, *args) -> "void":
        """
        * @name Methods for setting/getting periodicity info using ID as a direction Sets the flag to make the shape periodic in specified direction: - 0 - X direction; - 1 - Y direction; - 2 - Z direction. //! @param theDirectionID [in] The direction's ID; @param theIsPeriodic [in] Flag defining periodicity in given direction; @param thePeriod [in] Required period in given direction.
        	:param theDirectionID:
        	:type theDirectionID: int
        	:param theIsPeriodic:
        	:type theIsPeriodic: bool
        	:param thePeriod: default value is 0.0
        	:type thePeriod: float
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_MakePeriodic(self, *args)


    def MakeXPeriodic(self, *args) -> "void":
        """
        * @name Named methods for setting/getting info about shape's periodicity Sets the flag to make the shape periodic in X direction. @param theIsPeriodic [in] Flag defining periodicity in X direction; @param thePeriod [in] Required period in X direction.
        	:param theIsPeriodic:
        	:type theIsPeriodic: bool
        	:param thePeriod: default value is 0.0
        	:type thePeriod: float
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_MakeXPeriodic(self, *args)


    def MakeYPeriodic(self, *args) -> "void":
        """
        * Sets the flag to make the shape periodic in Y direction. @param theIsPeriodic [in] Flag defining periodicity in Y direction; @param thePeriod [in] Required period in Y direction.
        	:param theIsPeriodic:
        	:type theIsPeriodic: bool
        	:param thePeriod: default value is 0.0
        	:type thePeriod: float
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_MakeYPeriodic(self, *args)


    def MakeZPeriodic(self, *args) -> "void":
        """
        * Sets the flag to make the shape periodic in Z direction. @param theIsPeriodic [in] Flag defining periodicity in Z direction; @param thePeriod [in] Required period in Z direction.
        	:param theIsPeriodic:
        	:type theIsPeriodic: bool
        	:param thePeriod: default value is 0.0
        	:type thePeriod: float
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_MakeZPeriodic(self, *args)


    def Perform(self, *args) -> "void":
        """
        * @name Performing the operation Makes the shape periodic in necessary directions
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_Perform(self, *args)


    def Period(self, *args) -> "Standard_Real":
        """
        * Returns the Period of the shape in specified direction. @param theDirectionID [in] The direction's ID.
        	:param theDirectionID:
        	:type theDirectionID: int
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_Period(self, *args)


    def PeriodFirst(self, *args) -> "Standard_Real":
        """
        * Returns the first periodic parameter in the specified direction. @param theDirectionID [in] The direction's ID.
        	:param theDirectionID:
        	:type theDirectionID: int
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_PeriodFirst(self, *args)


    def PeriodicityParameters(self, *args) -> "BOPAlgo_MakePeriodic::PeriodicityParams const &":
        """:rtype: PeriodicityParams"""
        return _BOPAlgo.BOPAlgo_MakePeriodic_PeriodicityParameters(self, *args)


    def RepeatShape(self, *args) -> "TopoDS_Shape const":
        """
        * @name Using the algorithm to repeat the shape Performs repetition of the shape in specified direction required number of times. Negative value of times means that the repetition should be perform in negative direction. Makes the repeated shape a base for following repetitions. //! @param theDirectionID [in] The direction's ID; @param theTimes [in] Requested number of repetitions.
        	:param theDirectionID:
        	:type theDirectionID: int
        	:param theTimes:
        	:type theTimes: int
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_RepeatShape(self, *args)


    def RepeatedShape(self, *args) -> "TopoDS_Shape const":
        """
        * @name Starting the repetitions over Returns the repeated shape
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_RepeatedShape(self, *args)


    def SetPeriodicityParameters(self, *args) -> "void":
        """
        * //!< Array of start parameters of the XYZ periods: required for trimming @name Setters/Getters for periodicity parameters structure Sets the periodicity parameters. @param theParams [in] Periodicity parameters
        	:param theParams:
        	:type theParams: PeriodicityParams
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_SetPeriodicityParameters(self, *args)


    def SetShape(self, *args) -> "void":
        """
        * @name Setting the shape to make it periodic Sets the shape to make it periodic. @param theShape [in] The shape to make periodic.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_SetShape(self, *args)


    def SetTrimmed(self, *args) -> "void":
        """
        * @name Methods for setting/getting trimming info taking Direction ID as a parameter Defines whether the input shape is already trimmed in specified direction to fit the period in this direction. Direction is defined by an ID: - 0 - X direction; - 1 - Y direction; - 2 - Z direction. //! If the shape is not trimmed it is required to set the first parameter of the period in that direction. The algorithm will make the shape fit into the period. //! Before calling this method, the shape has to be set to be periodic in this direction. //! @param theDirectionID [in] The direction's ID; @param theIsTrimmed [in] The flag defining trimming of the shape in given direction; @param theFirst [in] The first periodic parameter in the given direction.
        	:param theDirectionID:
        	:type theDirectionID: int
        	:param theIsTrimmed:
        	:type theIsTrimmed: bool
        	:param theFirst: default value is 0.0
        	:type theFirst: float
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_SetTrimmed(self, *args)


    def SetXTrimmed(self, *args) -> "void":
        """
        * @name Named methods for setting/getting trimming info Defines whether the input shape is already trimmed in X direction to fit the X period. If the shape is not trimmed it is required to set the first parameter for the X period. The algorithm will make the shape fit into the period. //! Before calling this method, the shape has to be set to be periodic in this direction. //! @param theIsTrimmed [in] Flag defining whether the shape is already trimmed  in X direction to fit the X period; @param theFirst [in] The first X periodic parameter.
        	:param theIsTrimmed:
        	:type theIsTrimmed: bool
        	:param theFirst: default value is 0.0
        	:type theFirst: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_SetXTrimmed(self, *args)


    def SetYTrimmed(self, *args) -> "void":
        """
        * Defines whether the input shape is already trimmed in Y direction to fit the Y period. If the shape is not trimmed it is required to set the first parameter for the Y period. The algorithm will make the shape fit into the period. //! Before calling this method, the shape has to be set to be periodic in this direction. //! @param theIsTrimmed [in] Flag defining whether the shape is already trimmed  in Y direction to fit the Y period; @param theFirst [in] The first Y periodic parameter.
        	:param theIsTrimmed:
        	:type theIsTrimmed: bool
        	:param theFirst: default value is 0.0
        	:type theFirst: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_SetYTrimmed(self, *args)


    def SetZTrimmed(self, *args) -> "void":
        """
        * Defines whether the input shape is already trimmed in Z direction to fit the Z period. If the shape is not trimmed it is required to set the first parameter for the Z period. The algorithm will make the shape fit into the period. //! Before calling this method, the shape has to be set to be periodic in this direction. //! @param theIsTrimmed [in] Flag defining whether the shape is already trimmed  in Z direction to fit the Z period; @param theFirst [in] The first Z periodic parameter.
        	:param theIsTrimmed:
        	:type theIsTrimmed: bool
        	:param theFirst: default value is 0.0
        	:type theFirst: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_SetZTrimmed(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * @name Obtaining the result shape Returns the resulting periodic shape
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_Shape(self, *args)


    def ToDirectionID(*args) -> "Standard_Integer":
        """
        * @name Conversion of the integer to ID of periodic direction Converts the integer to ID of periodic direction
        	:param theDirectionID:
        	:type theDirectionID: int
        	:rtype: int
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_ToDirectionID(*args)

    ToDirectionID = staticmethod(ToDirectionID)

    def XPeriod(self, *args) -> "Standard_Real":
        """
        * Returns the XPeriod of the shape
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_XPeriod(self, *args)


    def XPeriodFirst(self, *args) -> "Standard_Real":
        """
        * Returns the first parameter for the X period.
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_XPeriodFirst(self, *args)


    def XRepeat(self, *args) -> "TopoDS_Shape const":
        """
        * Repeats the shape in X direction specified number of times. Negative value of times means that the repetition should be perform in negative X direction. Makes the repeated shape a base for following repetitions. //! @param theTimes [in] Requested number of repetitions.
        	:param theTimes:
        	:type theTimes: int
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_XRepeat(self, *args)


    def YPeriod(self, *args) -> "Standard_Real":
        """
        * Returns the YPeriod of the shape.
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_YPeriod(self, *args)


    def YPeriodFirst(self, *args) -> "Standard_Real":
        """
        * Returns the first parameter for the Y period.
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_YPeriodFirst(self, *args)


    def YRepeat(self, *args) -> "TopoDS_Shape const":
        """
        * Repeats the shape in Y direction specified number of times. Negative value of times means that the repetition should be perform in negative Y direction. Makes the repeated shape a base for following repetitions. //! @param theTimes [in] Requested number of repetitions.
        	:param theTimes:
        	:type theTimes: int
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_YRepeat(self, *args)


    def ZPeriod(self, *args) -> "Standard_Real":
        """
        * Returns the ZPeriod of the shape.
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_ZPeriod(self, *args)


    def ZPeriodFirst(self, *args) -> "Standard_Real":
        """
        * Returns the first parameter for the Z period.
        	:rtype: float
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_ZPeriodFirst(self, *args)


    def ZRepeat(self, *args) -> "TopoDS_Shape const":
        """
        * Repeats the shape in Z direction specified number of times. Negative value of times means that the repetition should be perform in negative Z direction. Makes the repeated shape a base for following repetitions. //! @param theTimes [in] Requested number of repetitions.
        	:param theTimes:
        	:type theTimes: int
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_MakePeriodic_ZRepeat(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_MakePeriodic
BOPAlgo_MakePeriodic.Clear = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_Clear, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.ClearRepetitions = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_ClearRepetitions, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.GetTwins = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_GetTwins, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.History = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_History, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.IsInputTrimmed = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_IsInputTrimmed, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.IsInputXTrimmed = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_IsInputXTrimmed, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.IsInputYTrimmed = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_IsInputYTrimmed, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.IsInputZTrimmed = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_IsInputZTrimmed, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.IsPeriodic = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_IsPeriodic, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.IsXPeriodic = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_IsXPeriodic, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.IsYPeriodic = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_IsYPeriodic, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.IsZPeriodic = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_IsZPeriodic, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.MakePeriodic = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_MakePeriodic, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.MakeXPeriodic = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_MakeXPeriodic, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.MakeYPeriodic = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_MakeYPeriodic, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.MakeZPeriodic = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_MakeZPeriodic, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.Perform = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_Perform, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.Period = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_Period, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.PeriodFirst = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_PeriodFirst, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.PeriodicityParameters = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_PeriodicityParameters, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.RepeatShape = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_RepeatShape, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.RepeatedShape = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_RepeatedShape, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.SetPeriodicityParameters = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_SetPeriodicityParameters, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.SetShape = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_SetShape, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.SetTrimmed = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_SetTrimmed, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.SetXTrimmed = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_SetXTrimmed, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.SetYTrimmed = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_SetYTrimmed, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.SetZTrimmed = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_SetZTrimmed, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.Shape = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_Shape, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.XPeriod = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_XPeriod, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.XPeriodFirst = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_XPeriodFirst, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.XRepeat = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_XRepeat, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.YPeriod = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_YPeriod, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.YPeriodFirst = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_YPeriodFirst, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.YRepeat = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_YRepeat, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.ZPeriod = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_ZPeriod, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.ZPeriodFirst = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_ZPeriodFirst, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic.ZRepeat = new_instancemethod(_BOPAlgo.BOPAlgo_MakePeriodic_ZRepeat, None, BOPAlgo_MakePeriodic)
BOPAlgo_MakePeriodic_swigregister = _BOPAlgo.BOPAlgo_MakePeriodic_swigregister
BOPAlgo_MakePeriodic_swigregister(BOPAlgo_MakePeriodic)

def BOPAlgo_MakePeriodic_ToDirectionID(*args) -> "Standard_Integer":
    """
    * @name Conversion of the integer to ID of periodic direction Converts the integer to ID of periodic direction
    	:param theDirectionID:
    	:type theDirectionID: int
    	:rtype: int
    """
    return _BOPAlgo.BOPAlgo_MakePeriodic_ToDirectionID(*args)

class BOPAlgo_ArgumentAnalyzer(BOPAlgo_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetArgumentTypeMode(self) -> "Standard_Boolean":
        """GetArgumentTypeMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetArgumentTypeMode(self)


    def SetArgumentTypeMode(self, value: 'Standard_Boolean') -> "void":
        """SetArgumentTypeMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetArgumentTypeMode(self, value)


    def __init__(self, *args):
        """
        * empty constructor
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_ArgumentAnalyzer_swiginit(self, _BOPAlgo.new_BOPAlgo_ArgumentAnalyzer(*args))

    def GetContinuityMode(self) -> "Standard_Boolean":
        """GetContinuityMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetContinuityMode(self)


    def SetContinuityMode(self, value: 'Standard_Boolean') -> "void":
        """SetContinuityMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetContinuityMode(self, value)


    def GetCurveOnSurfaceMode(self) -> "Standard_Boolean":
        """GetCurveOnSurfaceMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetCurveOnSurfaceMode(self)


    def SetCurveOnSurfaceMode(self, value: 'Standard_Boolean') -> "void":
        """SetCurveOnSurfaceMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetCurveOnSurfaceMode(self, value)


    def GetCheckResult(self, *args) -> "BOPAlgo_ListOfCheckResult const &":
        """
        * returns a result of test
        	:rtype: BOPAlgo_ListOfCheckResult
        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetCheckResult(self, *args)


    def GetShape1(self, *args) -> "TopoDS_Shape const":
        """
        * returns object shape;
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetShape1(self, *args)


    def GetShape2(self, *args) -> "TopoDS_Shape const":
        """
        * returns tool shape
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetShape2(self, *args)


    def HasFaulty(self, *args) -> "Standard_Boolean":
        """
        * result of test
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_HasFaulty(self, *args)


    def GetMergeEdgeMode(self) -> "Standard_Boolean":
        """GetMergeEdgeMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetMergeEdgeMode(self)


    def SetMergeEdgeMode(self, value: 'Standard_Boolean') -> "void":
        """SetMergeEdgeMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetMergeEdgeMode(self, value)


    def GetMergeVertexMode(self) -> "Standard_Boolean":
        """GetMergeVertexMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetMergeVertexMode(self)


    def SetMergeVertexMode(self, value: 'Standard_Boolean') -> "void":
        """SetMergeVertexMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetMergeVertexMode(self, value)


    def OperationType(self, *args) -> "BOPAlgo_Operation":
        """
        * returns ref
        	:rtype: BOPAlgo_Operation
        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_OperationType(self, *args)


    def GetRebuildFaceMode(self) -> "Standard_Boolean":
        """GetRebuildFaceMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetRebuildFaceMode(self)


    def SetRebuildFaceMode(self, value: 'Standard_Boolean') -> "void":
        """SetRebuildFaceMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetRebuildFaceMode(self, value)


    def GetSelfInterMode(self) -> "Standard_Boolean":
        """GetSelfInterMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetSelfInterMode(self)


    def SetSelfInterMode(self, value: 'Standard_Boolean') -> "void":
        """SetSelfInterMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetSelfInterMode(self, value)


    def SetShape1(self, *args) -> "void":
        """
        * sets object shape
        	:param TheShape:
        	:type TheShape: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetShape1(self, *args)


    def SetShape2(self, *args) -> "void":
        """
        * sets tool shape
        	:param TheShape:
        	:type TheShape: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetShape2(self, *args)


    def GetSmallEdgeMode(self) -> "Standard_Boolean":
        """GetSmallEdgeMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetSmallEdgeMode(self)


    def SetSmallEdgeMode(self, value: 'Standard_Boolean') -> "void":
        """SetSmallEdgeMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetSmallEdgeMode(self, value)


    def GetStopOnFirstFaulty(self) -> "Standard_Boolean":
        """GetStopOnFirstFaulty(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetStopOnFirstFaulty(self)


    def SetStopOnFirstFaulty(self, value: 'Standard_Boolean') -> "void":
        """SetStopOnFirstFaulty(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetStopOnFirstFaulty(self, value)


    def GetTangentMode(self) -> "Standard_Boolean":
        """GetTangentMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetTangentMode(self)


    def SetTangentMode(self, value: 'Standard_Boolean') -> "void":
        """SetTangentMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetTangentMode(self, value)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_ArgumentAnalyzer
BOPAlgo_ArgumentAnalyzer.GetArgumentTypeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetArgumentTypeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetArgumentTypeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetArgumentTypeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetContinuityMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetContinuityMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetContinuityMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetContinuityMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetCurveOnSurfaceMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetCurveOnSurfaceMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetCurveOnSurfaceMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetCurveOnSurfaceMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetCheckResult = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetCheckResult, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetShape1 = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetShape1, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetShape2 = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetShape2, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.HasFaulty = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_HasFaulty, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetMergeEdgeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetMergeEdgeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetMergeEdgeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetMergeEdgeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetMergeVertexMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetMergeVertexMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetMergeVertexMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetMergeVertexMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.OperationType = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_OperationType, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetRebuildFaceMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetRebuildFaceMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetRebuildFaceMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetRebuildFaceMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetSelfInterMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetSelfInterMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetSelfInterMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetSelfInterMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetShape1 = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetShape1, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetShape2 = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetShape2, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetSmallEdgeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetSmallEdgeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetSmallEdgeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetSmallEdgeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetStopOnFirstFaulty = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetStopOnFirstFaulty, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetStopOnFirstFaulty = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetStopOnFirstFaulty, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetTangentMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetTangentMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetTangentMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetTangentMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer_swigregister = _BOPAlgo.BOPAlgo_ArgumentAnalyzer_swigregister
BOPAlgo_ArgumentAnalyzer_swigregister(BOPAlgo_ArgumentAnalyzer)

class BOPAlgo_BuilderArea(BOPAlgo_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Areas(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the found areas
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_BuilderArea_Areas(self, *args)


    def IsAvoidInternalShapes(self, *args) -> "Standard_Boolean":
        """
        * Returns the AvoidInternalShapes flag
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_BuilderArea_IsAvoidInternalShapes(self, *args)


    def Loops(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the found loops
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_BuilderArea_Loops(self, *args)


    def SetAvoidInternalShapes(self, *args) -> "void":
        """
        * Defines the preventing of addition of internal parts into result. The default value is False, i.e. the internal parts are added into result.
        	:param theAvoidInternal:
        	:type theAvoidInternal: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_BuilderArea_SetAvoidInternalShapes(self, *args)


    def SetContext(self, *args) -> "void":
        """
        * Sets the context for the algorithms
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_BuilderArea_SetContext(self, *args)


    def SetShapes(self, *args) -> "void":
        """
        * Sets the shapes for building areas
        	:param theLS:
        	:type theLS: TopTools_ListOfShape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_BuilderArea_SetShapes(self, *args)


    def Shapes(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the input shapes
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_BuilderArea_Shapes(self, *args)


    __repr__ = _dumps_object

BOPAlgo_BuilderArea.Areas = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_Areas, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea.IsAvoidInternalShapes = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_IsAvoidInternalShapes, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea.Loops = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_Loops, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea.SetAvoidInternalShapes = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_SetAvoidInternalShapes, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea.SetContext = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_SetContext, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea.SetShapes = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_SetShapes, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea.Shapes = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_Shapes, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea_swigregister = _BOPAlgo.BOPAlgo_BuilderArea_swigregister
BOPAlgo_BuilderArea_swigregister(BOPAlgo_BuilderArea)

class BOPAlgo_BuilderShape(BOPAlgo_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Generated(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of shapes Generated from the shape theS.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_BuilderShape_Generated(self, *args)


    def HasDeleted(self, *args) -> "Standard_Boolean":
        """
        * Returns true if any of the input shapes has been deleted during operation.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_BuilderShape_HasDeleted(self, *args)


    def HasGenerated(self, *args) -> "Standard_Boolean":
        """
        * Returns true if any of the input shapes has generated shapes during operation.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_BuilderShape_HasGenerated(self, *args)


    def HasHistory(self, *args) -> "Standard_Boolean":
        """
        * Returns flag of history availability
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_BuilderShape_HasHistory(self, *args)


    def HasModified(self, *args) -> "Standard_Boolean":
        """
        * Returns true if any of the input shapes has been modified during operation.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_BuilderShape_HasModified(self, *args)


    def History(self, *args) -> "opencascade::handle< BRepTools_History >":
        """
        * History Tool
        	:rtype: opencascade::handle<BRepTools_History>
        """
        return _BOPAlgo.BOPAlgo_BuilderShape_History(self, *args)


    def IsDeleted(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the shape theS has been deleted. In this case the shape will have no Modified elements, but can have Generated elements.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_BuilderShape_IsDeleted(self, *args)


    def Modified(self, *args) -> "TopTools_ListOfShape const &":
        """
        * @name History methods Returns the list of shapes Modified from the shape theS.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_BuilderShape_Modified(self, *args)


    def SetToFillHistory(self, *args) -> "void":
        """
        * @name Enabling/Disabling the history collection. Allows disabling the history collection
        	:param theHistFlag:
        	:type theHistFlag: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_BuilderShape_SetToFillHistory(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * @name Getting the result Returns the result of algorithm
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_BuilderShape_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_BuilderShape
BOPAlgo_BuilderShape.Generated = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_Generated, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.HasDeleted = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_HasDeleted, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.HasGenerated = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_HasGenerated, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.HasHistory = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_HasHistory, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.HasModified = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_HasModified, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.History = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_History, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.IsDeleted = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_IsDeleted, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.Modified = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_Modified, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.SetToFillHistory = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_SetToFillHistory, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.Shape = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_Shape, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape_swigregister = _BOPAlgo.BOPAlgo_BuilderShape_swigregister
BOPAlgo_BuilderShape_swigregister(BOPAlgo_BuilderShape)

class BOPAlgo_PaveFiller(BOPAlgo_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddArgument(self, *args) -> "void":
        """
        * Adds the argument for operation
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_PaveFiller_AddArgument(self, *args)


    def Arguments(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of arguments
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_PaveFiller_Arguments(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_PaveFiller_swiginit(self, _BOPAlgo.new_BOPAlgo_PaveFiller(*args))

    def Context(self, *args) -> "opencascade::handle< IntTools_Context > const &":
        """:rtype: opencascade::handle<IntTools_Context>"""
        return _BOPAlgo.BOPAlgo_PaveFiller_Context(self, *args)


    def DS(self, *args) -> "BOPDS_DS const &":
        """:rtype: BOPDS_DS"""
        return _BOPAlgo.BOPAlgo_PaveFiller_DS(self, *args)


    def Glue(self, *args) -> "BOPAlgo_GlueEnum":
        """
        * Returns the glue option of the algorithm
        	:rtype: BOPAlgo_GlueEnum
        """
        return _BOPAlgo.BOPAlgo_PaveFiller_Glue(self, *args)


    def IsAvoidBuildPCurve(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag to avoid building of p-curves of edges on faces
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_PaveFiller_IsAvoidBuildPCurve(self, *args)


    def NonDestructive(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag that defines the mode of treatment. In non-destructive mode the argument shapes are not modified. Instead a copy of a sub-shape is created in the result if it is needed to be updated.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_PaveFiller_NonDestructive(self, *args)


    def PDS(self, *args) -> "BOPDS_PDS":
        """:rtype: BOPDS_PDS"""
        return _BOPAlgo.BOPAlgo_PaveFiller_PDS(self, *args)


    def SetArguments(self, *args) -> "void":
        """
        * Sets the arguments for operation
        	:param theLS:
        	:type theLS: TopTools_ListOfShape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_PaveFiller_SetArguments(self, *args)


    def SetAvoidBuildPCurve(self, *args) -> "void":
        """
        * Sets the flag to avoid building of p-curves of edges on faces
        	:param theValue:
        	:type theValue: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_PaveFiller_SetAvoidBuildPCurve(self, *args)


    def SetGlue(self, *args) -> "void":
        """
        * Sets the glue option for the algorithm
        	:param theGlue:
        	:type theGlue: BOPAlgo_GlueEnum
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_PaveFiller_SetGlue(self, *args)


    def SetNonDestructive(self, *args) -> "void":
        """
        * Sets the flag that defines the mode of treatment. In non-destructive mode the argument shapes are not modified. Instead a copy of a sub-shape is created in the result if it is needed to be updated.
        	:param theFlag:
        	:type theFlag: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_PaveFiller_SetNonDestructive(self, *args)


    def SetSectionAttribute(self, *args) -> "void":
        """
        :param theSecAttr:
        	:type theSecAttr: BOPAlgo_SectionAttribute
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_PaveFiller_SetSectionAttribute(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_PaveFiller
BOPAlgo_PaveFiller.AddArgument = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_AddArgument, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.Arguments = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_Arguments, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.Context = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_Context, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.DS = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_DS, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.Glue = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_Glue, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.IsAvoidBuildPCurve = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_IsAvoidBuildPCurve, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.NonDestructive = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_NonDestructive, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.PDS = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_PDS, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.SetArguments = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_SetArguments, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.SetAvoidBuildPCurve = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_SetAvoidBuildPCurve, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.SetGlue = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_SetGlue, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.SetNonDestructive = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_SetNonDestructive, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.SetSectionAttribute = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_SetSectionAttribute, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller_swigregister = _BOPAlgo.BOPAlgo_PaveFiller_swigregister
BOPAlgo_PaveFiller_swigregister(BOPAlgo_PaveFiller)

class BOPAlgo_ShellSplitter(BOPAlgo_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddStartElement(self, *args) -> "void":
        """
        * adds a face <theS> to process
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_ShellSplitter_AddStartElement(self, *args)


    def __init__(self, *args):
        """
        * empty constructor
        	:rtype: None
        * constructor
        	:param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_ShellSplitter_swiginit(self, _BOPAlgo.new_BOPAlgo_ShellSplitter(*args))

    def Shells(self, *args) -> "TopTools_ListOfShape const &":
        """
        * returns the loops
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_ShellSplitter_Shells(self, *args)


    def SplitBlock(*args) -> "void":
        """
        :param theCB:
        	:type theCB: BOPTools_ConnexityBlock
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_ShellSplitter_SplitBlock(*args)

    SplitBlock = staticmethod(SplitBlock)

    def StartElements(self, *args) -> "TopTools_ListOfShape const &":
        """
        * return the faces to process
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_ShellSplitter_StartElements(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_ShellSplitter
BOPAlgo_ShellSplitter.AddStartElement = new_instancemethod(_BOPAlgo.BOPAlgo_ShellSplitter_AddStartElement, None, BOPAlgo_ShellSplitter)
BOPAlgo_ShellSplitter.Shells = new_instancemethod(_BOPAlgo.BOPAlgo_ShellSplitter_Shells, None, BOPAlgo_ShellSplitter)
BOPAlgo_ShellSplitter.StartElements = new_instancemethod(_BOPAlgo.BOPAlgo_ShellSplitter_StartElements, None, BOPAlgo_ShellSplitter)
BOPAlgo_ShellSplitter_swigregister = _BOPAlgo.BOPAlgo_ShellSplitter_swigregister
BOPAlgo_ShellSplitter_swigregister(BOPAlgo_ShellSplitter)

def BOPAlgo_ShellSplitter_SplitBlock(*args) -> "void":
    """
    :param theCB:
    	:type theCB: BOPTools_ConnexityBlock
    	:rtype: void
    """
    return _BOPAlgo.BOPAlgo_ShellSplitter_SplitBlock(*args)

class BOPAlgo_WireSplitter(BOPAlgo_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_WireSplitter_swiginit(self, _BOPAlgo.new_BOPAlgo_WireSplitter(*args))

    def Context(self, *args) -> "opencascade::handle< IntTools_Context > const &":
        """
        * Returns the context
        	:rtype: opencascade::handle<IntTools_Context>
        """
        return _BOPAlgo.BOPAlgo_WireSplitter_Context(self, *args)


    def MakeWire(*args) -> "void":
        """
        :param theLE:
        	:type theLE: TopTools_ListOfShape
        	:param theW:
        	:type theW: TopoDS_Wire
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_WireSplitter_MakeWire(*args)

    MakeWire = staticmethod(MakeWire)

    def SetContext(self, *args) -> "void":
        """
        * Sets the context for the algorithm
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_WireSplitter_SetContext(self, *args)


    def SetWES(self, *args) -> "void":
        """
        :param theWES:
        	:type theWES: BOPAlgo_WireEdgeSet
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_WireSplitter_SetWES(self, *args)


    def SplitBlock(*args) -> "void":
        """
        :param theF:
        	:type theF: TopoDS_Face
        	:param theCB:
        	:type theCB: BOPTools_ConnexityBlock
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_WireSplitter_SplitBlock(*args)

    SplitBlock = staticmethod(SplitBlock)

    def WES(self, *args) -> "BOPAlgo_WireEdgeSet &":
        """:rtype: BOPAlgo_WireEdgeSet"""
        return _BOPAlgo.BOPAlgo_WireSplitter_WES(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_WireSplitter
BOPAlgo_WireSplitter.Context = new_instancemethod(_BOPAlgo.BOPAlgo_WireSplitter_Context, None, BOPAlgo_WireSplitter)
BOPAlgo_WireSplitter.SetContext = new_instancemethod(_BOPAlgo.BOPAlgo_WireSplitter_SetContext, None, BOPAlgo_WireSplitter)
BOPAlgo_WireSplitter.SetWES = new_instancemethod(_BOPAlgo.BOPAlgo_WireSplitter_SetWES, None, BOPAlgo_WireSplitter)
BOPAlgo_WireSplitter.WES = new_instancemethod(_BOPAlgo.BOPAlgo_WireSplitter_WES, None, BOPAlgo_WireSplitter)
BOPAlgo_WireSplitter_swigregister = _BOPAlgo.BOPAlgo_WireSplitter_swigregister
BOPAlgo_WireSplitter_swigregister(BOPAlgo_WireSplitter)

def BOPAlgo_WireSplitter_MakeWire(*args) -> "void":
    """
    :param theLE:
    	:type theLE: TopTools_ListOfShape
    	:param theW:
    	:type theW: TopoDS_Wire
    	:rtype: None
    """
    return _BOPAlgo.BOPAlgo_WireSplitter_MakeWire(*args)

def BOPAlgo_WireSplitter_SplitBlock(*args) -> "void":
    """
    :param theF:
    	:type theF: TopoDS_Face
    	:param theCB:
    	:type theCB: BOPTools_ConnexityBlock
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: void
    """
    return _BOPAlgo.BOPAlgo_WireSplitter_SplitBlock(*args)

class BOPAlgo_Builder(BOPAlgo_BuilderShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddArgument(self, *args) -> "void":
        """
        * @name Arguments Adds the argument to the operation.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_Builder_AddArgument(self, *args)


    def Arguments(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of arguments.
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_Builder_Arguments(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_Builder_swiginit(self, _BOPAlgo.new_BOPAlgo_Builder(*args))

    def BuildBOP(self, *args) -> "void":
        """
        * @name BOPs on open solids Builds the result shape according to the given states for the objects and tools. These states can be unambiguously converted into the Boolean operation type. Thus, it performs the Boolean operation on the given groups of shapes. //! The result is built basing on the result of Builder operation (GF or any other). The only condition for the Builder is that the splits of faces should be created and classified relatively solids. //! The method uses classification approach for choosing the faces which will participate in building the result shape: - All faces from each group having the given state for the opposite group will be taken into result. //! Such approach shows better results (in comparison with BOPAlgo_BuilderSolid approach) when working with open solids. However, the result may not be always correct on such data (at least, not as expected) as the correct classification of the faces relatively open solids is not always possible and may vary depending on the chosen classification point on the face. //! History is not created for the solids in this method. //! To avoid pollution of the report of Builder algorithm, there is a possibility to pass the different report to collect the alerts of the method only. But, if the new report is not given, the Builder report will be used. So, even if Builder passed without any errors, but some error has been stored into its report in this method, for the following calls the Builder report must be cleared. //! The method may set the following errors: - BOPAlgo_AlertBuilderFailed - Building operation has not been performed yet or failed; - BOPAlgo_AlertBOPNotSet - invalid BOP type is given (COMMON/FUSE/CUT/CUT21 are supported); - BOPAlgo_AlertTooFewArguments - arguments are not given; - BOPAlgo_AlertUnknownShape - the shape is unknown for the operation. //! Parameters: @param theObjects - The group of Objects for BOP; @param theObjState - State for objects faces to pass into result; @param theTools - The group of Tools for BOP; @param theObjState - State for tools faces to pass into result; @param theReport - The alternative report to avoid pollution of the main one.
        	:param theObjects:
        	:type theObjects: TopTools_ListOfShape
        	:param theObjState:
        	:type theObjState: TopAbs_State
        	:param theTools:
        	:type theTools: TopTools_ListOfShape
        	:param theToolsState:
        	:type theToolsState: TopAbs_State
        	:param theReport: default value is NULL
        	:type theReport: Message_Report
        	:rtype: void
        * Builds the result of Boolean operation of given type basing on the result of Builder operation (GF or any other). //! The method converts the given type of operation into the states for the objects and tools required for their face to pass into result and performs the call to the same method, but with states instead of operation type. //! The conversion looks as follows: - COMMON is built from the faces of objects located IN any of the tools and vice versa. - FUSE is built from the faces OUT of all given shapes; - CUT is built from the faces of the objects OUT of the tools and faces of the tools located IN solids of the objects. //! @param theObjects - The group of Objects for BOP; @param theTools - The group of Tools for BOP; @param theOperation - The BOP type; @param theReport - The alternative report to avoid pollution of the global one.
        	:param theObjects:
        	:type theObjects: TopTools_ListOfShape
        	:param theTools:
        	:type theTools: TopTools_ListOfShape
        	:param theOperation:
        	:type theOperation: BOPAlgo_Operation
        	:param theReport: default value is NULL
        	:type theReport: Message_Report
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Builder_BuildBOP(self, *args)


    def CheckInverted(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag defining whether the check for input solids on inverted status should be performed or not.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_Builder_CheckInverted(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears the content of the algorithm.
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_Builder_Clear(self, *args)


    def Context(self, *args) -> "opencascade::handle< IntTools_Context >":
        """
        * Returns the Context, tool for cashing heavy algorithms.
        	:rtype: opencascade::handle<IntTools_Context>
        """
        return _BOPAlgo.BOPAlgo_Builder_Context(self, *args)


    def Glue(self, *args) -> "BOPAlgo_GlueEnum":
        """
        * Returns the glue option of the algorithm
        	:rtype: BOPAlgo_GlueEnum
        """
        return _BOPAlgo.BOPAlgo_Builder_Glue(self, *args)


    def Images(self, *args) -> "TopTools_DataMapOfShapeListOfShape const &":
        """
        * @name Images/Origins Returns the map of images.
        	:rtype: TopTools_DataMapOfShapeListOfShape
        """
        return _BOPAlgo.BOPAlgo_Builder_Images(self, *args)


    def NonDestructive(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag that defines the mode of treatment. In non-destructive mode the argument shapes are not modified. Instead a copy of a sub-shape is created in the result if it is needed to be updated.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_Builder_NonDestructive(self, *args)


    def Origins(self, *args) -> "TopTools_DataMapOfShapeListOfShape const &":
        """
        * Returns the map of origins.
        	:rtype: TopTools_DataMapOfShapeListOfShape
        """
        return _BOPAlgo.BOPAlgo_Builder_Origins(self, *args)


    def PDS(self, *args) -> "BOPDS_PDS":
        """
        * Returns the Data Structure, holder of intersection information.
        	:rtype: BOPDS_PDS
        """
        return _BOPAlgo.BOPAlgo_Builder_PDS(self, *args)


    def PPaveFiller(self, *args) -> "BOPAlgo_PPaveFiller":
        """
        * Returns the PaveFiller, algorithm for sub-shapes intersection.
        	:rtype: BOPAlgo_PPaveFiller
        """
        return _BOPAlgo.BOPAlgo_Builder_PPaveFiller(self, *args)


    def PerformWithFiller(self, *args) -> "void":
        """
        * Performs the operation with the prepared filler. The intersection will not be performed in this case.
        	:param theFiller:
        	:type theFiller: BOPAlgo_PaveFiller
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_Builder_PerformWithFiller(self, *args)


    def SetArguments(self, *args) -> "void":
        """
        * Sets the list of arguments for the operation.
        	:param theLS:
        	:type theLS: TopTools_ListOfShape
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_Builder_SetArguments(self, *args)


    def SetCheckInverted(self, *args) -> "void":
        """
        * Enables/Disables the check of the input solids for inverted status
        	:param theCheck:
        	:type theCheck: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Builder_SetCheckInverted(self, *args)


    def SetGlue(self, *args) -> "void":
        """
        * Sets the glue option for the algorithm
        	:param theGlue:
        	:type theGlue: BOPAlgo_GlueEnum
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Builder_SetGlue(self, *args)


    def SetNonDestructive(self, *args) -> "void":
        """
        * @name Options Sets the flag that defines the mode of treatment. In non-destructive mode the argument shapes are not modified. Instead a copy of a sub-shape is created in the result if it is needed to be updated. This flag is taken into account if internal PaveFiller is used only. In the case of calling PerformWithFiller the corresponding flag of that PaveFiller is in force.
        	:param theFlag:
        	:type theFlag: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_Builder_SetNonDestructive(self, *args)


    def ShapesSD(self, *args) -> "TopTools_DataMapOfShapeShape const &":
        """
        * Returns the map of Same Domain (SD) shapes - coinciding shapes from different arguments.
        	:rtype: TopTools_DataMapOfShapeShape
        """
        return _BOPAlgo.BOPAlgo_Builder_ShapesSD(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_Builder
BOPAlgo_Builder.AddArgument = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_AddArgument, None, BOPAlgo_Builder)
BOPAlgo_Builder.Arguments = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_Arguments, None, BOPAlgo_Builder)
BOPAlgo_Builder.BuildBOP = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_BuildBOP, None, BOPAlgo_Builder)
BOPAlgo_Builder.CheckInverted = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_CheckInverted, None, BOPAlgo_Builder)
BOPAlgo_Builder.Clear = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_Clear, None, BOPAlgo_Builder)
BOPAlgo_Builder.Context = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_Context, None, BOPAlgo_Builder)
BOPAlgo_Builder.Glue = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_Glue, None, BOPAlgo_Builder)
BOPAlgo_Builder.Images = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_Images, None, BOPAlgo_Builder)
BOPAlgo_Builder.NonDestructive = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_NonDestructive, None, BOPAlgo_Builder)
BOPAlgo_Builder.Origins = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_Origins, None, BOPAlgo_Builder)
BOPAlgo_Builder.PDS = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_PDS, None, BOPAlgo_Builder)
BOPAlgo_Builder.PPaveFiller = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_PPaveFiller, None, BOPAlgo_Builder)
BOPAlgo_Builder.PerformWithFiller = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_PerformWithFiller, None, BOPAlgo_Builder)
BOPAlgo_Builder.SetArguments = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_SetArguments, None, BOPAlgo_Builder)
BOPAlgo_Builder.SetCheckInverted = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_SetCheckInverted, None, BOPAlgo_Builder)
BOPAlgo_Builder.SetGlue = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_SetGlue, None, BOPAlgo_Builder)
BOPAlgo_Builder.SetNonDestructive = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_SetNonDestructive, None, BOPAlgo_Builder)
BOPAlgo_Builder.ShapesSD = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_ShapesSD, None, BOPAlgo_Builder)
BOPAlgo_Builder_swigregister = _BOPAlgo.BOPAlgo_Builder_swigregister
BOPAlgo_Builder_swigregister(BOPAlgo_Builder)

class BOPAlgo_BuilderFace(BOPAlgo_BuilderArea):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_BuilderFace_swiginit(self, _BOPAlgo.new_BOPAlgo_BuilderFace(*args))

    def Face(self, *args) -> "TopoDS_Face const":
        """
        * Returns the face generatix
        	:rtype: TopoDS_Face
        """
        return _BOPAlgo.BOPAlgo_BuilderFace_Face(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """:rtype: TopAbs_Orientation"""
        return _BOPAlgo.BOPAlgo_BuilderFace_Orientation(self, *args)


    def SetFace(self, *args) -> "void":
        """
        * Sets the face generatix
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_BuilderFace_SetFace(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_BuilderFace
BOPAlgo_BuilderFace.Face = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderFace_Face, None, BOPAlgo_BuilderFace)
BOPAlgo_BuilderFace.Orientation = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderFace_Orientation, None, BOPAlgo_BuilderFace)
BOPAlgo_BuilderFace.SetFace = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderFace_SetFace, None, BOPAlgo_BuilderFace)
BOPAlgo_BuilderFace_swigregister = _BOPAlgo.BOPAlgo_BuilderFace_swigregister
BOPAlgo_BuilderFace_swigregister(BOPAlgo_BuilderFace)

class BOPAlgo_BuilderSolid(BOPAlgo_BuilderArea):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * @name Constructors Empty constructor
        	:rtype: None
        * Constructor with allocator
        	:param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_BuilderSolid_swiginit(self, _BOPAlgo.new_BOPAlgo_BuilderSolid(*args))

    def GetBoxesMap(self, *args) -> "TopTools_DataMapOfShapeBox const &":
        """
        * @name Getting the bounding boxes of the created solids For classification purposes the algorithm builds the bounding boxes for all created solids. This method returns the data map of solid - box pairs.
        	:rtype: TopTools_DataMapOfShapeBox
        """
        return _BOPAlgo.BOPAlgo_BuilderSolid_GetBoxesMap(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_BuilderSolid
BOPAlgo_BuilderSolid.GetBoxesMap = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderSolid_GetBoxesMap, None, BOPAlgo_BuilderSolid)
BOPAlgo_BuilderSolid_swigregister = _BOPAlgo.BOPAlgo_BuilderSolid_swigregister
BOPAlgo_BuilderSolid_swigregister(BOPAlgo_BuilderSolid)

class BOPAlgo_CheckerSI(BOPAlgo_PaveFiller):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _BOPAlgo.BOPAlgo_CheckerSI_swiginit(self, _BOPAlgo.new_BOPAlgo_CheckerSI(*args))

    def SetLevelOfCheck(self, *args) -> "void":
        """
        * Sets the level of checking shape on self-interference. It defines which interferences will be checked: 0 - only V/V; 1 - V/V and V/E; 2 - V/V, V/E and E/E; 3 - V/V, V/E, E/E and V/F; 4 - V/V, V/E, E/E, V/F and E/F; 5 - V/V, V/E, E/E, V/F, E/F and F/F; 6 - V/V, V/E, E/E, V/F, E/F, F/F and V/S; 7 - V/V, V/E, E/E, V/F, E/F, F/F, V/S and E/S; 8 - V/V, V/E, E/E, V/F, E/F, F/F, V/S, E/S and F/S; 9 - V/V, V/E, E/E, V/F, E/F, F/F, V/S, E/S, F/S and S/S - all interferences (Default value)
        	:param theLevel:
        	:type theLevel: int
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CheckerSI_SetLevelOfCheck(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_CheckerSI
BOPAlgo_CheckerSI.SetLevelOfCheck = new_instancemethod(_BOPAlgo.BOPAlgo_CheckerSI_SetLevelOfCheck, None, BOPAlgo_CheckerSI)
BOPAlgo_CheckerSI_swigregister = _BOPAlgo.BOPAlgo_CheckerSI_swigregister
BOPAlgo_CheckerSI_swigregister(BOPAlgo_CheckerSI)

class BOPAlgo_RemoveFeatures(BOPAlgo_BuilderShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddFaceToRemove(self, *args) -> "void":
        """
        * Adds the face to remove from the input shape. @param theFace [in] The shape to extract the faces for removal.
        	:param theFace:
        	:type theFace: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_RemoveFeatures_AddFaceToRemove(self, *args)


    def AddFacesToRemove(self, *args) -> "void":
        """
        * Adds the faces to remove from the input shape. @param theFaces [in] The list of shapes to extract the faces for removal.
        	:param theFaces:
        	:type theFaces: TopTools_ListOfShape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_RemoveFeatures_AddFacesToRemove(self, *args)


    def __init__(self, *args):
        """
        * @name Constructors Empty constructor
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_RemoveFeatures_swiginit(self, _BOPAlgo.new_BOPAlgo_RemoveFeatures(*args))

    def Clear(self, *args) -> "void":
        """
        * @name Clearing the contents of the algorithm Clears the contents of the algorithm from previous run, allowing reusing it for following removals.
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_RemoveFeatures_Clear(self, *args)


    def FacesToRemove(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of faces which have been requested for removal from the input shape.
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_RemoveFeatures_FacesToRemove(self, *args)


    def InputShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the input shape
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_RemoveFeatures_InputShape(self, *args)


    def SetShape(self, *args) -> "void":
        """
        * @name Setting input data for the algorithm Sets the shape for processing. @param theShape [in] The shape to remove the faces from.  It should either be the SOLID, COMPSOLID or COMPOUND of Solids.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_RemoveFeatures_SetShape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_RemoveFeatures
BOPAlgo_RemoveFeatures.AddFaceToRemove = new_instancemethod(_BOPAlgo.BOPAlgo_RemoveFeatures_AddFaceToRemove, None, BOPAlgo_RemoveFeatures)
BOPAlgo_RemoveFeatures.AddFacesToRemove = new_instancemethod(_BOPAlgo.BOPAlgo_RemoveFeatures_AddFacesToRemove, None, BOPAlgo_RemoveFeatures)
BOPAlgo_RemoveFeatures.Clear = new_instancemethod(_BOPAlgo.BOPAlgo_RemoveFeatures_Clear, None, BOPAlgo_RemoveFeatures)
BOPAlgo_RemoveFeatures.FacesToRemove = new_instancemethod(_BOPAlgo.BOPAlgo_RemoveFeatures_FacesToRemove, None, BOPAlgo_RemoveFeatures)
BOPAlgo_RemoveFeatures.InputShape = new_instancemethod(_BOPAlgo.BOPAlgo_RemoveFeatures_InputShape, None, BOPAlgo_RemoveFeatures)
BOPAlgo_RemoveFeatures.SetShape = new_instancemethod(_BOPAlgo.BOPAlgo_RemoveFeatures_SetShape, None, BOPAlgo_RemoveFeatures)
BOPAlgo_RemoveFeatures_swigregister = _BOPAlgo.BOPAlgo_RemoveFeatures_swigregister
BOPAlgo_RemoveFeatures_swigregister(BOPAlgo_RemoveFeatures)

class BOPAlgo_CellsBuilder(BOPAlgo_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddAllToResult(self, *args) -> "void":
        """
        * Add all split parts to result. <theMaterial> defines the removal of internal boundaries; <theUpdate> parameter defines whether to remove boundaries now or not.
        	:param theMaterial: default value is 0
        	:type theMaterial: int
        	:param theUpdate: default value is Standard_False
        	:type theUpdate: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CellsBuilder_AddAllToResult(self, *args)


    def AddToResult(self, *args) -> "void":
        """
        * Adding the parts to result. The parts are defined by two lists of shapes: <theLSToTake> defines the arguments which parts should be taken into result; <theLSToAvoid> defines the arguments which parts should not be taken into result; To be taken into result the part must be IN for all shapes from the list <theLSToTake> and must be OUT of all shapes from the list <theLSToAvoid>. To remove internal boundaries between any cells in the result <theMaterial> variable should be used. The boundaries between cells with the same material will be removed. Default value is 0. Thus, to remove any boundary the value of this variable should not be equal to 0. <theUpdate> parameter defines whether to remove boundaries now or not.
        	:param theLSToTake:
        	:type theLSToTake: TopTools_ListOfShape
        	:param theLSToAvoid:
        	:type theLSToAvoid: TopTools_ListOfShape
        	:param theMaterial: default value is 0
        	:type theMaterial: int
        	:param theUpdate: default value is Standard_False
        	:type theUpdate: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CellsBuilder_AddToResult(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_CellsBuilder_swiginit(self, _BOPAlgo.new_BOPAlgo_CellsBuilder(*args))

    def GetAllParts(self, *args) -> "TopoDS_Shape const":
        """
        * Get all split parts.
        	:rtype: TopoDS_Shape
        """
        return _BOPAlgo.BOPAlgo_CellsBuilder_GetAllParts(self, *args)


    def MakeContainers(self, *args) -> "void":
        """
        * Makes the Containers of proper type from the parts added to result.
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CellsBuilder_MakeContainers(self, *args)


    def RemoveAllFromResult(self, *args) -> "void":
        """
        * Remove all parts from result.
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CellsBuilder_RemoveAllFromResult(self, *args)


    def RemoveFromResult(self, *args) -> "void":
        """
        * Removing the parts from result. The parts are defined by two lists of shapes: <theLSToTake> defines the arguments which parts should be removed from result; <theLSToAvoid> defines the arguments which parts should not be removed from result. To be removed from the result the part must be IN for all shapes from the list <theLSToTake> and must be OUT of all shapes from the list <theLSToAvoid>.
        	:param theLSToTake:
        	:type theLSToTake: TopTools_ListOfShape
        	:param theLSToAvoid:
        	:type theLSToAvoid: TopTools_ListOfShape
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CellsBuilder_RemoveFromResult(self, *args)


    def RemoveInternalBoundaries(self, *args) -> "void":
        """
        * Removes internal boundaries between cells with the same material. If the result contains the cells with same material but of different dimension the removal of internal boundaries between these cells will not be performed. In case of some errors during the removal the method will set the appropriate warning status - use GetReport() to access them.
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_CellsBuilder_RemoveInternalBoundaries(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_CellsBuilder
BOPAlgo_CellsBuilder.AddAllToResult = new_instancemethod(_BOPAlgo.BOPAlgo_CellsBuilder_AddAllToResult, None, BOPAlgo_CellsBuilder)
BOPAlgo_CellsBuilder.AddToResult = new_instancemethod(_BOPAlgo.BOPAlgo_CellsBuilder_AddToResult, None, BOPAlgo_CellsBuilder)
BOPAlgo_CellsBuilder.GetAllParts = new_instancemethod(_BOPAlgo.BOPAlgo_CellsBuilder_GetAllParts, None, BOPAlgo_CellsBuilder)
BOPAlgo_CellsBuilder.MakeContainers = new_instancemethod(_BOPAlgo.BOPAlgo_CellsBuilder_MakeContainers, None, BOPAlgo_CellsBuilder)
BOPAlgo_CellsBuilder.RemoveAllFromResult = new_instancemethod(_BOPAlgo.BOPAlgo_CellsBuilder_RemoveAllFromResult, None, BOPAlgo_CellsBuilder)
BOPAlgo_CellsBuilder.RemoveFromResult = new_instancemethod(_BOPAlgo.BOPAlgo_CellsBuilder_RemoveFromResult, None, BOPAlgo_CellsBuilder)
BOPAlgo_CellsBuilder.RemoveInternalBoundaries = new_instancemethod(_BOPAlgo.BOPAlgo_CellsBuilder_RemoveInternalBoundaries, None, BOPAlgo_CellsBuilder)
BOPAlgo_CellsBuilder_swigregister = _BOPAlgo.BOPAlgo_CellsBuilder_swigregister
BOPAlgo_CellsBuilder_swigregister(BOPAlgo_CellsBuilder)

class BOPAlgo_MakerVolume(BOPAlgo_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor.
        	:rtype: None
        * Empty contructor.
        	:param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_MakerVolume_swiginit(self, _BOPAlgo.new_BOPAlgo_MakerVolume(*args))

    def Box(self, *args) -> "TopoDS_Solid const":
        """
        * Returns the solid box <mySBox>.
        	:rtype: TopoDS_Solid
        """
        return _BOPAlgo.BOPAlgo_MakerVolume_Box(self, *args)


    def Faces(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the processed faces <myFaces>.
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_MakerVolume_Faces(self, *args)


    def IsAvoidInternalShapes(self, *args) -> "Standard_Boolean":
        """
        * Returns the AvoidInternalShapes flag
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_MakerVolume_IsAvoidInternalShapes(self, *args)


    def IsIntersect(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag <myIntersect>.
        	:rtype: bool
        """
        return _BOPAlgo.BOPAlgo_MakerVolume_IsIntersect(self, *args)


    def SetAvoidInternalShapes(self, *args) -> "void":
        """
        * Defines the preventing of addition of internal for solid parts into the result. By default the internal parts are added into result.
        	:param theAvoidInternal:
        	:type theAvoidInternal: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakerVolume_SetAvoidInternalShapes(self, *args)


    def SetIntersect(self, *args) -> "void":
        """
        * Sets the flag myIntersect: if <bIntersect> is True the shapes from <myArguments> will be intersected. if <bIntersect> is False no intersection will be done.
        	:param bIntersect:
        	:type bIntersect: bool
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_MakerVolume_SetIntersect(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_MakerVolume
BOPAlgo_MakerVolume.Box = new_instancemethod(_BOPAlgo.BOPAlgo_MakerVolume_Box, None, BOPAlgo_MakerVolume)
BOPAlgo_MakerVolume.Faces = new_instancemethod(_BOPAlgo.BOPAlgo_MakerVolume_Faces, None, BOPAlgo_MakerVolume)
BOPAlgo_MakerVolume.IsAvoidInternalShapes = new_instancemethod(_BOPAlgo.BOPAlgo_MakerVolume_IsAvoidInternalShapes, None, BOPAlgo_MakerVolume)
BOPAlgo_MakerVolume.IsIntersect = new_instancemethod(_BOPAlgo.BOPAlgo_MakerVolume_IsIntersect, None, BOPAlgo_MakerVolume)
BOPAlgo_MakerVolume.SetAvoidInternalShapes = new_instancemethod(_BOPAlgo.BOPAlgo_MakerVolume_SetAvoidInternalShapes, None, BOPAlgo_MakerVolume)
BOPAlgo_MakerVolume.SetIntersect = new_instancemethod(_BOPAlgo.BOPAlgo_MakerVolume_SetIntersect, None, BOPAlgo_MakerVolume)
BOPAlgo_MakerVolume_swigregister = _BOPAlgo.BOPAlgo_MakerVolume_swigregister
BOPAlgo_MakerVolume_swigregister(BOPAlgo_MakerVolume)

class BOPAlgo_Section(BOPAlgo_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Constructor with allocator
        	:param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_Section_swiginit(self, _BOPAlgo.new_BOPAlgo_Section(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_Section
BOPAlgo_Section_swigregister = _BOPAlgo.BOPAlgo_Section_swigregister
BOPAlgo_Section_swigregister(BOPAlgo_Section)

class BOPAlgo_ToolsProvider(BOPAlgo_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddTool(self, *args) -> "void":
        """
        * Adds Tool argument of the operation
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_ToolsProvider_AddTool(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_ToolsProvider_swiginit(self, _BOPAlgo.new_BOPAlgo_ToolsProvider(*args))

    def SetTools(self, *args) -> "void":
        """
        * Adds the Tool arguments of the operation
        	:param theShapes:
        	:type theShapes: TopTools_ListOfShape
        	:rtype: void
        """
        return _BOPAlgo.BOPAlgo_ToolsProvider_SetTools(self, *args)


    def Tools(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the Tool arguments of the operation
        	:rtype: TopTools_ListOfShape
        """
        return _BOPAlgo.BOPAlgo_ToolsProvider_Tools(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_ToolsProvider
BOPAlgo_ToolsProvider.AddTool = new_instancemethod(_BOPAlgo.BOPAlgo_ToolsProvider_AddTool, None, BOPAlgo_ToolsProvider)
BOPAlgo_ToolsProvider.SetTools = new_instancemethod(_BOPAlgo.BOPAlgo_ToolsProvider_SetTools, None, BOPAlgo_ToolsProvider)
BOPAlgo_ToolsProvider.Tools = new_instancemethod(_BOPAlgo.BOPAlgo_ToolsProvider_Tools, None, BOPAlgo_ToolsProvider)
BOPAlgo_ToolsProvider_swigregister = _BOPAlgo.BOPAlgo_ToolsProvider_swigregister
BOPAlgo_ToolsProvider_swigregister(BOPAlgo_ToolsProvider)

class BOPAlgo_BOP(BOPAlgo_ToolsProvider):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_BOP_swiginit(self, _BOPAlgo.new_BOPAlgo_BOP(*args))

    def Operation(self, *args) -> "BOPAlgo_Operation":
        """:rtype: BOPAlgo_Operation"""
        return _BOPAlgo.BOPAlgo_BOP_Operation(self, *args)


    def SetOperation(self, *args) -> "void":
        """
        :param theOperation:
        	:type theOperation: BOPAlgo_Operation
        	:rtype: None
        """
        return _BOPAlgo.BOPAlgo_BOP_SetOperation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_BOP
BOPAlgo_BOP.Operation = new_instancemethod(_BOPAlgo.BOPAlgo_BOP_Operation, None, BOPAlgo_BOP)
BOPAlgo_BOP.SetOperation = new_instancemethod(_BOPAlgo.BOPAlgo_BOP_SetOperation, None, BOPAlgo_BOP)
BOPAlgo_BOP_swigregister = _BOPAlgo.BOPAlgo_BOP_swigregister
BOPAlgo_BOP_swigregister(BOPAlgo_BOP)

class BOPAlgo_Splitter(BOPAlgo_ToolsProvider):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPAlgo.BOPAlgo_Splitter_swiginit(self, _BOPAlgo.new_BOPAlgo_Splitter(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_Splitter
BOPAlgo_Splitter_swigregister = _BOPAlgo.BOPAlgo_Splitter_swigregister
BOPAlgo_Splitter_swigregister(BOPAlgo_Splitter)



