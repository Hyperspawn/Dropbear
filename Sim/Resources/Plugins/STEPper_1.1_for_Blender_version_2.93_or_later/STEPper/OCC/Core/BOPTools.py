# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BOPTools module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_boptools.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BOPTools.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BOPTools')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BOPTools')
    _BOPTools = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BOPTools', [dirname(__file__)])
        except ImportError:
            import _BOPTools
            return _BOPTools
        try:
            _mod = imp.load_module('_BOPTools', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BOPTools = swig_import_helper()
    del swig_import_helper
else:
    import _BOPTools
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BOPTools.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BOPTools.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BOPTools.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BOPTools.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BOPTools.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BOPTools.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BOPTools.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BOPTools.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BOPTools.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BOPTools.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BOPTools.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BOPTools.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BOPTools.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BOPTools.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BOPTools.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BOPTools.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BOPTools.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BOPTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BOPTools.process_exception(error, method_name, class_name)
process_exception = _BOPTools.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.IntTools
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.Geom2dHatch
import OCC.Core.IntRes2d
import OCC.Core.HatchGen
import OCC.Core.Geom2dInt
import OCC.Core.IntCurve
import OCC.Core.Extrema
import OCC.Core.Intf
import OCC.Core.GeomAPI
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.AppParCurves
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.IntSurf
import OCC.Core.TopTools
import OCC.Core.IntCurvesFace
import OCC.Core.IntPatch
import OCC.Core.IntAna
import OCC.Core.GeomInt
import OCC.Core.IntImp
import OCC.Core.ApproxInt
class BOPTools_ListOfConnexityBlock(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BOPTools.BOPTools_ListOfConnexityBlock_swiginit(self, _BOPTools.new_BOPTools_ListOfConnexityBlock(*args))
    __swig_destroy__ = _BOPTools.delete_BOPTools_ListOfConnexityBlock
BOPTools_ListOfConnexityBlock.begin = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_begin, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.end = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_end, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.cbegin = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_cbegin, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.cend = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_cend, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.Size = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_Size, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.Assign = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_Assign, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.Set = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_Set, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.Clear = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_Clear, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.First = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_First, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.Last = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_Last, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.Append = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_Append, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.Prepend = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_Prepend, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.RemoveFirst = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_RemoveFirst, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.Remove = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_Remove, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.InsertBefore = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_InsertBefore, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.InsertAfter = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_InsertAfter, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock.Reverse = new_instancemethod(_BOPTools.BOPTools_ListOfConnexityBlock_Reverse, None, BOPTools_ListOfConnexityBlock)
BOPTools_ListOfConnexityBlock_swigregister = _BOPTools.BOPTools_ListOfConnexityBlock_swigregister
BOPTools_ListOfConnexityBlock_swigregister(BOPTools_ListOfConnexityBlock)

class BOPTools_MapOfSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BOPTools.BOPTools_MapOfSet_swiginit(self, _BOPTools.new_BOPTools_MapOfSet(*args))
    __swig_destroy__ = _BOPTools.delete_BOPTools_MapOfSet
BOPTools_MapOfSet.cbegin = new_instancemethod(_BOPTools.BOPTools_MapOfSet_cbegin, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.cend = new_instancemethod(_BOPTools.BOPTools_MapOfSet_cend, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Exchange = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Exchange, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Assign = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Assign, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Set = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Set, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.ReSize = new_instancemethod(_BOPTools.BOPTools_MapOfSet_ReSize, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Add = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Add, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Added = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Added, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Remove = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Remove, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Clear = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Clear, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Size = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Size, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.IsEqual = new_instancemethod(_BOPTools.BOPTools_MapOfSet_IsEqual, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Contains = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Contains, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Union = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Union, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Unite = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Unite, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.HasIntersection = new_instancemethod(_BOPTools.BOPTools_MapOfSet_HasIntersection, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Intersection = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Intersection, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Intersect = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Intersect, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Subtraction = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Subtraction, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Subtract = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Subtract, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Difference = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Difference, None, BOPTools_MapOfSet)
BOPTools_MapOfSet.Differ = new_instancemethod(_BOPTools.BOPTools_MapOfSet_Differ, None, BOPTools_MapOfSet)
BOPTools_MapOfSet_swigregister = _BOPTools.BOPTools_MapOfSet_swigregister
BOPTools_MapOfSet_swigregister(BOPTools_MapOfSet)

class BOPTools_ListOfCoupleOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BOPTools.BOPTools_ListOfCoupleOfShape_swiginit(self, _BOPTools.new_BOPTools_ListOfCoupleOfShape(*args))
    __swig_destroy__ = _BOPTools.delete_BOPTools_ListOfCoupleOfShape
BOPTools_ListOfCoupleOfShape.begin = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_begin, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.end = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_end, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.cbegin = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_cbegin, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.cend = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_cend, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.Size = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_Size, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.Assign = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_Assign, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.Set = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_Set, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.Clear = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_Clear, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.First = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_First, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.Last = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_Last, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.Append = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_Append, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.Prepend = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_Prepend, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.RemoveFirst = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_RemoveFirst, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.Remove = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_Remove, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.InsertBefore = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_InsertBefore, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.InsertAfter = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_InsertAfter, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape.Reverse = new_instancemethod(_BOPTools.BOPTools_ListOfCoupleOfShape_Reverse, None, BOPTools_ListOfCoupleOfShape)
BOPTools_ListOfCoupleOfShape_swigregister = _BOPTools.BOPTools_ListOfCoupleOfShape_swigregister
BOPTools_ListOfCoupleOfShape_swigregister(BOPTools_ListOfCoupleOfShape)

class BOPTools_IndexedDataMapOfSetShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BOPTools.BOPTools_IndexedDataMapOfSetShape_swiginit(self, _BOPTools.new_BOPTools_IndexedDataMapOfSetShape(*args))
    __swig_destroy__ = _BOPTools.delete_BOPTools_IndexedDataMapOfSetShape
BOPTools_IndexedDataMapOfSetShape.begin = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_begin, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.end = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_end, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.cbegin = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_cbegin, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.cend = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_cend, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.Exchange = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_Exchange, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.Assign = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_Assign, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.Set = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_Set, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.ReSize = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_ReSize, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.Add = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_Add, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.Contains = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_Contains, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.Substitute = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_Substitute, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.Swap = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_Swap, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.RemoveLast = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_RemoveLast, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.RemoveFromIndex = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_RemoveFromIndex, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.RemoveKey = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_RemoveKey, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.FindKey = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_FindKey, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.FindFromIndex = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_FindFromIndex, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.ChangeFromIndex = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_ChangeFromIndex, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.__call__ = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape___call__, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.FindIndex = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_FindIndex, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.ChangeFromKey = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_ChangeFromKey, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.Seek = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_Seek, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.ChangeSeek = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_ChangeSeek, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.FindFromKey = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_FindFromKey, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.Clear = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_Clear, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape.Size = new_instancemethod(_BOPTools.BOPTools_IndexedDataMapOfSetShape_Size, None, BOPTools_IndexedDataMapOfSetShape)
BOPTools_IndexedDataMapOfSetShape_swigregister = _BOPTools.BOPTools_IndexedDataMapOfSetShape_swigregister
BOPTools_IndexedDataMapOfSetShape_swigregister(BOPTools_IndexedDataMapOfSetShape)

class BOPTools_AlgoTools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AreFacesSameDomain(*args) -> "Standard_Boolean":
        """
        * Checking if the faces are coinciding Checks if the given faces are same-domain, i.e. coincide.
        	:param theF1:
        	:type theF1: TopoDS_Face
        	:param theF2:
        	:type theF2: TopoDS_Face
        	:param theContext:
        	:type theContext: IntTools_Context
        	:param theFuzz: default value is Precision::Confusion()
        	:type theFuzz: float
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_AreFacesSameDomain(*args)

    AreFacesSameDomain = staticmethod(AreFacesSameDomain)

    def ComputeState(*args) -> "TopAbs_State":
        """
        * @name Point/Edge/Face classification relatively solid Computes the 3-D state of the point thePoint toward solid theSolid. theTol - value of precision of computation theContext- cahed geometrical tools Returns 3-D state.
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:param theSolid:
        	:type theSolid: TopoDS_Solid
        	:param theTol:
        	:type theTol: float
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: TopAbs_State
        * Computes the 3-D state of the vertex theVertex toward solid theSolid. theTol - value of precision of computation theContext- cahed geometrical tools Returns 3-D state.
        	:param theVertex:
        	:type theVertex: TopoDS_Vertex
        	:param theSolid:
        	:type theSolid: TopoDS_Solid
        	:param theTol:
        	:type theTol: float
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: TopAbs_State
        * Computes the 3-D state of the edge theEdge toward solid theSolid. theTol - value of precision of computation theContext- cahed geometrical tools Returns 3-D state.
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theSolid:
        	:type theSolid: TopoDS_Solid
        	:param theTol:
        	:type theTol: float
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: TopAbs_State
        * Computes the 3-D state of the face theFace toward solid theSolid. theTol - value of precision of computation theBounds - set of edges of <theSolid> to avoid theContext- cahed geometrical tools Returns 3-D state.
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theSolid:
        	:type theSolid: TopoDS_Solid
        	:param theTol:
        	:type theTol: float
        	:param theBounds:
        	:type theBounds: TopTools_IndexedMapOfShape
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: TopAbs_State
        """
        return _BOPTools.BOPTools_AlgoTools_ComputeState(*args)

    ComputeState = staticmethod(ComputeState)

    def ComputeStateByOnePoint(*args) -> "TopAbs_State":
        """
        * Computes the 3-D state of the shape theShape toward solid theSolid. theTol - value of precision of computation theContext- cahed geometrical tools Returns 3-D state.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theSolid:
        	:type theSolid: TopoDS_Solid
        	:param theTol:
        	:type theTol: float
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: TopAbs_State
        """
        return _BOPTools.BOPTools_AlgoTools_ComputeStateByOnePoint(*args)

    ComputeStateByOnePoint = staticmethod(ComputeStateByOnePoint)

    def ComputeTolerance(*args) -> "Standard_Real &, Standard_Real &":
        """
        * @name Edge/Face Deviation computation Computes the necessary value of the tolerance for the edge
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theMaxDist:
        	:type theMaxDist: float
        	:param theMaxPar:
        	:type theMaxPar: float
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_ComputeTolerance(*args)

    ComputeTolerance = staticmethod(ComputeTolerance)

    def ComputeVV(*args) -> "Standard_Integer":
        """
        * @name Intersection of the vertices Intersects the vertex <theV1> with the point <theP> with tolerance <theTolP>. Returns the error status: - 0 - no error, meaning that the vertex intersects the point; - 1 - the distance between vertex and point is grater than the sum of tolerances.
        	:param theV:
        	:type theV: TopoDS_Vertex
        	:param theP:
        	:type theP: gp_Pnt
        	:param theTolP:
        	:type theTolP: float
        	:rtype: int
        * Intersects the given vertices with given fuzzy value. Returns the error status: - 0 - no error, meaning that the vertices interferes with given tolerance; - 1 - the distance between vertices is grater than the sum of their tolerances.
        	:param theV1:
        	:type theV1: TopoDS_Vertex
        	:param theV2:
        	:type theV2: TopoDS_Vertex
        	:param theFuzz: default value is Precision::Confusion()
        	:type theFuzz: float
        	:rtype: int
        """
        return _BOPTools.BOPTools_AlgoTools_ComputeVV(*args)

    ComputeVV = staticmethod(ComputeVV)

    def CopyEdge(*args) -> "TopoDS_Edge":
        """
        * Makes a copy of <theEdge> with vertices.
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:rtype: TopoDS_Edge
        """
        return _BOPTools.BOPTools_AlgoTools_CopyEdge(*args)

    CopyEdge = staticmethod(CopyEdge)

    def CorrectCurveOnSurface(*args) -> "void":
        """
        * Provides valid values of tolerances for the shape <theS> in terms of BRepCheck_InvalidCurveOnSurface.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:param theMapToAvoid:
        	:type theMapToAvoid: TopTools_IndexedMapOfShape
        	:param theTolMax: default value is 0.0001
        	:type theTolMax: float
        	:param theRunParallel: default value is Standard_False
        	:type theRunParallel: bool
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_CorrectCurveOnSurface(*args)

    CorrectCurveOnSurface = staticmethod(CorrectCurveOnSurface)

    def CorrectPointOnCurve(*args) -> "void":
        """
        * Provides valid values of tolerances for the shape <theS> in terms of BRepCheck_InvalidPointOnCurve.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:param theMapToAvoid:
        	:type theMapToAvoid: TopTools_IndexedMapOfShape
        	:param theTolMax: default value is 0.0001
        	:type theTolMax: float
        	:param theRunParallel: default value is Standard_False
        	:type theRunParallel: bool
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_CorrectPointOnCurve(*args)

    CorrectPointOnCurve = staticmethod(CorrectPointOnCurve)

    def CorrectRange(*args) -> "void":
        """
        * @name Correction of the edges range Correct shrunk range <aSR> taking into account 3D-curve resolution and corresponding tolerance values of <aE1>, <aE2>
        	:param aE1:
        	:type aE1: TopoDS_Edge
        	:param aE2:
        	:type aE2: TopoDS_Edge
        	:param aSR:
        	:type aSR: IntTools_Range
        	:param aNewSR:
        	:type aNewSR: IntTools_Range
        	:rtype: void
        * Correct shrunk range <aSR> taking into account 3D-curve resolution and corresponding tolerance values of <aE>, <aF>
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aSR:
        	:type aSR: IntTools_Range
        	:param aNewSR:
        	:type aNewSR: IntTools_Range
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_CorrectRange(*args)

    CorrectRange = staticmethod(CorrectRange)

    def CorrectShapeTolerances(*args) -> "void":
        """
        * Corrects tolerance values of the sub-shapes of the shape <theS> if needed.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:param theMapToAvoid:
        	:type theMapToAvoid: TopTools_IndexedMapOfShape
        	:param theRunParallel: default value is Standard_False
        	:type theRunParallel: bool
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_CorrectShapeTolerances(*args)

    CorrectShapeTolerances = staticmethod(CorrectShapeTolerances)

    def CorrectTolerances(*args) -> "void":
        """
        * @name Methods for shape validation (correction) Provides valid values of tolerances for the shape <theS> <theTolMax> is max value of the tolerance that can be accepted for correction. If real value of the tolerance will be greater than <aTolMax>, the correction does not perform.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:param theMapToAvoid:
        	:type theMapToAvoid: TopTools_IndexedMapOfShape
        	:param theTolMax: default value is 0.0001
        	:type theTolMax: float
        	:param theRunParallel: default value is Standard_False
        	:type theRunParallel: bool
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_CorrectTolerances(*args)

    CorrectTolerances = staticmethod(CorrectTolerances)

    def Dimension(*args) -> "Standard_Integer":
        """
        * Retutns dimension of the shape <theS>.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: int
        """
        return _BOPTools.BOPTools_AlgoTools_Dimension(*args)

    Dimension = staticmethod(Dimension)

    def GetEdgeOff(*args) -> "Standard_Boolean":
        """
        * @name Looking for the edge in the face Returns True if the face theFace contains the edge theEdge but with opposite orientation. If the method returns True theEdgeOff is the edge founded
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theEdgeOff:
        	:type theEdgeOff: TopoDS_Edge
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_GetEdgeOff(*args)

    GetEdgeOff = staticmethod(GetEdgeOff)

    def GetEdgeOnFace(*args) -> "Standard_Boolean":
        """
        * For the face theFace gets the edge theEdgeOnF that is the same as theEdge Returns True if such edge exists Returns False if there is no such edge
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theEdgeOnF:
        	:type theEdgeOnF: TopoDS_Edge
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_GetEdgeOnFace(*args)

    GetEdgeOnFace = staticmethod(GetEdgeOnFace)

    def GetFaceOff(*args) -> "Standard_Boolean":
        """
        * @name Face classification relatively solid For the face theFace and its edge theEdge finds the face suitable to produce shell. theLCEF - set of faces to search. All faces from theLCEF must share edge theEdge
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theLCEF:
        	:type theLCEF: BOPTools_ListOfCoupleOfShape
        	:param theFaceOff:
        	:type theFaceOff: TopoDS_Face
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_GetFaceOff(*args)

    GetFaceOff = staticmethod(GetFaceOff)

    def IsBlockInOnFace(*args) -> "Standard_Boolean":
        """
        * Returns True if PaveBlock <aPB> lays on the face <aF>, i.e the <PB> is IN or ON in 2D of <aF>
        	:param aShR:
        	:type aShR: IntTools_Range
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aContext:
        	:type aContext: IntTools_Context
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_IsBlockInOnFace(*args)

    IsBlockInOnFace = staticmethod(IsBlockInOnFace)

    def IsHole(*args) -> "Standard_Boolean":
        """
        * @name Wire classification relatively face Checks if the wire is a hole for the face.
        	:param theW:
        	:type theW: TopoDS_Shape
        	:param theF:
        	:type theF: TopoDS_Shape
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_IsHole(*args)

    IsHole = staticmethod(IsHole)

    def IsInternalFace(*args) -> "Standard_Boolean":
        """
        * Returns True if the face theFace is inside of the couple of faces theFace1, theFace2. The faces theFace, theFace1, theFace2 must share the edge theEdge Return values: * 0 state is not IN * 1 state is IN * 2 state can not be found by the method of angles
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theFace1:
        	:type theFace1: TopoDS_Face
        	:param theFace2:
        	:type theFace2: TopoDS_Face
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: int
        * Returns True if the face theFace is inside of the appropriate couple of faces (from the set theLF) . The faces of the set theLF and theFace must share the edge theEdge * 0 state is not IN * 1 state is IN * 2 state can not be found by the method of angles
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theLF:
        	:type theLF: TopTools_ListOfShape
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: int
        * Returns True if the face theFace is inside the solid theSolid. theMEF - Map Edge/Faces for theSolid theTol - value of precision of computation theContext- cahed geometrical tools
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theSolid:
        	:type theSolid: TopoDS_Solid
        	:param theMEF:
        	:type theMEF: TopTools_IndexedDataMapOfShapeListOfShape
        	:param theTol:
        	:type theTol: float
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_IsInternalFace(*args)

    IsInternalFace = staticmethod(IsInternalFace)

    def IsInvertedSolid(*args) -> "Standard_Boolean":
        """
        * @name Solid classification Returns true if the solid <theSolid> is inverted
        	:param theSolid:
        	:type theSolid: TopoDS_Solid
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_IsInvertedSolid(*args)

    IsInvertedSolid = staticmethod(IsInvertedSolid)

    def IsMicroEdge(*args) -> "Standard_Boolean":
        """
        * @name Checking edge on micro status Checks if it is possible to compute shrunk range for the edge <aE> Flag <theCheckSplittable> defines whether to take into account the possibility to split the edge or not.
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theContext:
        	:type theContext: IntTools_Context
        	:param theCheckSplittable: default value is Standard_True
        	:type theCheckSplittable: bool
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_IsMicroEdge(*args)

    IsMicroEdge = staticmethod(IsMicroEdge)

    def IsOpenShell(*args) -> "Standard_Boolean":
        """
        * Returns true if the shell <theShell> is open
        	:param theShell:
        	:type theShell: TopoDS_Shell
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_IsOpenShell(*args)

    IsOpenShell = staticmethod(IsOpenShell)

    def IsSplitToReverse(*args) -> "Standard_Boolean":
        """
        * @name Choosing correct orientation for the split shape Checks if the direction of the split shape is opposite to the direction of the original shape. The method is an overload for (Edge,Edge) and (Face,Face) corresponding methods and checks only these types of shapes. For faces the method checks if normal directions are opposite. For edges the method checks if tangent vectors are opposite. //! In case the directions do not coincide, it returns True, meaning that split shape has to be reversed to match the direction of the original shape. //! If requested (<theError> is not null), the method returns the status of the operation: - 0 - no error; - Error from (Edge,Edge) or (Face,Face) corresponding method - 100 - bad types. In case of any error the method always returns False. //! @param theSplit [in] Split shape @param theShape [in] Original shape @param theContext [in] Cashed geometrical tools @param theError [out] Error Status of the operation
        	:param theSplit:
        	:type theSplit: TopoDS_Shape
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theContext:
        	:type theContext: IntTools_Context
        	:param theError: default value is NULL
        	:type theError: int *
        	:rtype: bool
        * Checks if the normal direction of the split face is opposite to the normal direction of the original face. The normal directions for both faces are taken in the same point - point inside the split face is projected onto the original face. Returns True if the normals do not coincide, meaning the necessity to revert the orientation of the split face to match the direction of the original face. //! If requested (<theError> is not null), the method returns the status of the operation: - 0 - no error; - 1 - unable to find the point inside split face; - 2 - unable to compute the normal for the split face; - 3 - unable to project the point inside the split face on the original face; - 4 - unable to compute the normal for the original face. In case of any error the method always returns False. //! @param theSplit [in] Split face @param theShape [in] Original face @param theContext [in] Cashed geometrical tools @param theError [out] Error Status of the operation
        	:param theSplit:
        	:type theSplit: TopoDS_Face
        	:param theShape:
        	:type theShape: TopoDS_Face
        	:param theContext:
        	:type theContext: IntTools_Context
        	:param theError: default value is NULL
        	:type theError: int *
        	:rtype: bool
        * Checks if the tangent vector of the split edge is opposite to the tangent vector of the original edge. The tangent vectors for both edges are computed in the same point - point inside the split edge is projected onto the original edge. Returns True if the tangent vectors do not coincide, meaning the necessity to revert the orientation of the split edge to match the direction of the original edge. //! If requested (<theError> is not null), the method returns the status of the operation: - 0 - no error; - 1 - degenerated edges are given; - 2 - unable to compute the tangent vector for the split edge; - 3 - unable to project the point inside the split edge on the original edge; - 4 - unable to compute the tangent vector for the original edge; In case of any error the method always returns False. //! @param theSplit [in] Split edge @param theShape [in] Original edge @param theContext [in] Cashed geometrical tools @param theError [out] Error Status of the operation
        	:param theSplit:
        	:type theSplit: TopoDS_Edge
        	:param theShape:
        	:type theShape: TopoDS_Edge
        	:param theContext:
        	:type theContext: IntTools_Context
        	:param theError: default value is NULL
        	:type theError: int *
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_IsSplitToReverse(*args)

    IsSplitToReverse = staticmethod(IsSplitToReverse)

    def IsSplitToReverseWithWarn(*args) -> "Standard_Boolean":
        """
        * Add-on for the *IsSplitToReverse()* to check for its errors and in case of any add the *BOPAlgo_AlertUnableToOrientTheShape* warning to the report.
        	:param theSplit:
        	:type theSplit: TopoDS_Shape
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theContext:
        	:type theContext: IntTools_Context
        	:param theReport: default value is NULL
        	:type theReport: Message_Report
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools_IsSplitToReverseWithWarn(*args)

    IsSplitToReverseWithWarn = staticmethod(IsSplitToReverseWithWarn)

    def MakeConnexityBlock(*args) -> "void":
        """
        * @name Making connexity blocks For the list of faces theLS build block theLSCB in terms of connexity by edges theMapAvoid - set of edges to avoid for the treatment
        	:param theLS:
        	:type theLS: TopTools_ListOfShape
        	:param theMapAvoid:
        	:type theMapAvoid: TopTools_IndexedMapOfShape
        	:param theLSCB:
        	:type theLSCB: TopTools_ListOfShape
        	:param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_MakeConnexityBlock(*args)

    MakeConnexityBlock = staticmethod(MakeConnexityBlock)

    def MakeConnexityBlocks(*args) -> "void":
        """
        * For the compound <theS> builds the blocks (compounds) of elements of type <theElementType> connected through the shapes of the type <theConnectionType>. The blocks are stored into the list <theLCB>.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:param theConnectionType:
        	:type theConnectionType: TopAbs_ShapeEnum
        	:param theElementType:
        	:type theElementType: TopAbs_ShapeEnum
        	:param theLCB:
        	:type theLCB: TopTools_ListOfShape
        	:rtype: void
        * For the compound <theS> builds the blocks (compounds) of elements of type <theElementType> connected through the shapes of the type <theConnectionType>. The blocks are stored into the list of lists <theLCB>. Returns also the connection map <theConnectionMap>, filled during operation.
        	:param theS:
        	:type theS: TopoDS_Shape
        	:param theConnectionType:
        	:type theConnectionType: TopAbs_ShapeEnum
        	:param theElementType:
        	:type theElementType: TopAbs_ShapeEnum
        	:param theLCB:
        	:type theLCB: TopTools_ListOfListOfShape
        	:param theConnectionMap:
        	:type theConnectionMap: TopTools_IndexedDataMapOfShapeListOfShape
        	:rtype: void
        * Makes connexity blocks of elements of the given type with the given type of the connecting elements. The blocks are checked on regularity (multi-connectivity) and stored to the list of blocks <theLCB>.
        	:param theLS:
        	:type theLS: TopTools_ListOfShape
        	:param theConnectionType:
        	:type theConnectionType: TopAbs_ShapeEnum
        	:param theElementType:
        	:type theElementType: TopAbs_ShapeEnum
        	:param theLCB:
        	:type theLCB: BOPTools_ListOfConnexityBlock
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_MakeConnexityBlocks(*args)

    MakeConnexityBlocks = staticmethod(MakeConnexityBlocks)

    def MakeContainer(*args) -> "void":
        """
        * @name Other methods Makes empty container of requested type
        	:param theType:
        	:type theType: TopAbs_ShapeEnum
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_MakeContainer(*args)

    MakeContainer = staticmethod(MakeContainer)

    def MakeEdge(*args) -> "void":
        """
        * @name Edge construction Makes the edge based on the given curve with given bounding vertices.
        	:param theCurve:
        	:type theCurve: IntTools_Curve
        	:param theV1:
        	:type theV1: TopoDS_Vertex
        	:param theT1:
        	:type theT1: float
        	:param theV2:
        	:type theV2: TopoDS_Vertex
        	:param theT2:
        	:type theT2: float
        	:param theTolR3D:
        	:type theTolR3D: float
        	:param theE:
        	:type theE: TopoDS_Edge
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_MakeEdge(*args)

    MakeEdge = staticmethod(MakeEdge)

    def MakeNewVertex(*args) -> "void":
        """
        * Make a vertex using 3D-point <aP1> and 3D-tolerance value <aTol>
        	:param aP1:
        	:type aP1: gp_Pnt
        	:param aTol:
        	:type aTol: float
        	:param aNewVertex:
        	:type aNewVertex: TopoDS_Vertex
        	:rtype: void
        * Make a vertex using couple of vertices <aV1, aV2>
        	:param aV1:
        	:type aV1: TopoDS_Vertex
        	:param aV2:
        	:type aV2: TopoDS_Vertex
        	:param aNewVertex:
        	:type aNewVertex: TopoDS_Vertex
        	:rtype: void
        * Make a vertex in place of intersection between two edges <aE1, aE2> with parameters <aP1, aP2>
        	:param aE1:
        	:type aE1: TopoDS_Edge
        	:param aP1:
        	:type aP1: float
        	:param aE2:
        	:type aE2: TopoDS_Edge
        	:param aP2:
        	:type aP2: float
        	:param aNewVertex:
        	:type aNewVertex: TopoDS_Vertex
        	:rtype: void
        * Make a vertex in place of intersection between the edge <aE1> with parameter <aP1> and the face <aF2>
        	:param aE1:
        	:type aE1: TopoDS_Edge
        	:param aP1:
        	:type aP1: float
        	:param aF2:
        	:type aF2: TopoDS_Face
        	:param aNewVertex:
        	:type aNewVertex: TopoDS_Vertex
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_MakeNewVertex(*args)

    MakeNewVertex = staticmethod(MakeNewVertex)

    def MakePCurve(*args) -> "void":
        """
        * @name PCurve construction Makes 2d curve of the edge <theE> on the faces <theF1> and <theF2>. <theContext> - storage for caching the geometrical tools
        	:param theE:
        	:type theE: TopoDS_Edge
        	:param theF1:
        	:type theF1: TopoDS_Face
        	:param theF2:
        	:type theF2: TopoDS_Face
        	:param theCurve:
        	:type theCurve: IntTools_Curve
        	:param thePC1:
        	:type thePC1: bool
        	:param thePC2:
        	:type thePC2: bool
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_MakePCurve(*args)

    MakePCurve = staticmethod(MakePCurve)

    def MakeSectEdge(*args) -> "void":
        """
        * Make the edge from 3D-Curve <aIC> and two vertices <aV1,aV2> at parameters <aP1,aP2>
        	:param aIC:
        	:type aIC: IntTools_Curve
        	:param aV1:
        	:type aV1: TopoDS_Vertex
        	:param aP1:
        	:type aP1: float
        	:param aV2:
        	:type aV2: TopoDS_Vertex
        	:param aP2:
        	:type aP2: float
        	:param aNewEdge:
        	:type aNewEdge: TopoDS_Edge
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_MakeSectEdge(*args)

    MakeSectEdge = staticmethod(MakeSectEdge)

    def MakeSplitEdge(*args) -> "void":
        """
        * Make the edge from base edge <aE1> and two vertices <aV1,aV2> at parameters <aP1,aP2>
        	:param aE1:
        	:type aE1: TopoDS_Edge
        	:param aV1:
        	:type aV1: TopoDS_Vertex
        	:param aP1:
        	:type aP1: float
        	:param aV2:
        	:type aV2: TopoDS_Vertex
        	:param aP2:
        	:type aP2: float
        	:param aNewEdge:
        	:type aNewEdge: TopoDS_Edge
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_MakeSplitEdge(*args)

    MakeSplitEdge = staticmethod(MakeSplitEdge)

    def MakeVertex(*args) -> "void":
        """
        * @name Vertices construction Makes the vertex in the middle of given vertices with the tolerance covering all tolerance spheres of vertices.
        	:param theLV:
        	:type theLV: TopTools_ListOfShape
        	:param theV:
        	:type theV: TopoDS_Vertex
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_MakeVertex(*args)

    MakeVertex = staticmethod(MakeVertex)

    def OrientEdgesOnWire(*args) -> "void":
        """
        * @name Orienting elements in container Correctly orients edges on the wire
        	:param theWire:
        	:type theWire: TopoDS_Shape
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_OrientEdgesOnWire(*args)

    OrientEdgesOnWire = staticmethod(OrientEdgesOnWire)

    def OrientFacesOnShell(*args) -> "void":
        """
        * Correctly orients faces on the shell
        	:param theShell:
        	:type theShell: TopoDS_Shape
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_OrientFacesOnShell(*args)

    OrientFacesOnShell = staticmethod(OrientFacesOnShell)

    def PointOnEdge(*args) -> "void":
        """
        * Compute a 3D-point on the edge <aEdge> at parameter <aPrm>
        	:param aEdge:
        	:type aEdge: TopoDS_Edge
        	:param aPrm:
        	:type aPrm: float
        	:param aP:
        	:type aP: gp_Pnt
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_PointOnEdge(*args)

    PointOnEdge = staticmethod(PointOnEdge)

    def Sense(*args) -> "Standard_Integer":
        """
        * Checks if the normals direction of the given faces computed near the shared edge coincide. Returns the status of operation: * 0 - in case of error (shared edge not found or directions are not collinear) * 1 - normal directions coincide; * -1 - normal directions are opposite.
        	:param theF1:
        	:type theF1: TopoDS_Face
        	:param theF2:
        	:type theF2: TopoDS_Face
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: int
        """
        return _BOPTools.BOPTools_AlgoTools_Sense(*args)

    Sense = staticmethod(Sense)

    def UpdateVertex(*args) -> "void":
        """
        * @name Updating the vertex Update the tolerance value for vertex <aV> taking into account the fact that <aV> lays on the curve <aIC>
        	:param aIC:
        	:type aIC: IntTools_Curve
        	:param aT:
        	:type aT: float
        	:param aV:
        	:type aV: TopoDS_Vertex
        	:rtype: void
        * Update the tolerance value for vertex <aV> taking into account the fact that <aV> lays on the edge <aE>
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aT:
        	:type aT: float
        	:param aV:
        	:type aV: TopoDS_Vertex
        	:rtype: void
        * Update the tolerance value for vertex <aVN> taking into account the fact that <aVN> should cover tolerance zone of <aVF>
        	:param aVF:
        	:type aVF: TopoDS_Vertex
        	:param aVN:
        	:type aVN: TopoDS_Vertex
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools_UpdateVertex(*args)

    UpdateVertex = staticmethod(UpdateVertex)

    __repr__ = _dumps_object


    def __init__(self):
        _BOPTools.BOPTools_AlgoTools_swiginit(self, _BOPTools.new_BOPTools_AlgoTools())
    __swig_destroy__ = _BOPTools.delete_BOPTools_AlgoTools
BOPTools_AlgoTools_swigregister = _BOPTools.BOPTools_AlgoTools_swigregister
BOPTools_AlgoTools_swigregister(BOPTools_AlgoTools)

def BOPTools_AlgoTools_AreFacesSameDomain(*args) -> "Standard_Boolean":
    """
    * Checking if the faces are coinciding Checks if the given faces are same-domain, i.e. coincide.
    	:param theF1:
    	:type theF1: TopoDS_Face
    	:param theF2:
    	:type theF2: TopoDS_Face
    	:param theContext:
    	:type theContext: IntTools_Context
    	:param theFuzz: default value is Precision::Confusion()
    	:type theFuzz: float
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_AreFacesSameDomain(*args)

def BOPTools_AlgoTools_ComputeState(*args) -> "TopAbs_State":
    """
    * @name Point/Edge/Face classification relatively solid Computes the 3-D state of the point thePoint toward solid theSolid. theTol - value of precision of computation theContext- cahed geometrical tools Returns 3-D state.
    	:param thePoint:
    	:type thePoint: gp_Pnt
    	:param theSolid:
    	:type theSolid: TopoDS_Solid
    	:param theTol:
    	:type theTol: float
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: TopAbs_State
    * Computes the 3-D state of the vertex theVertex toward solid theSolid. theTol - value of precision of computation theContext- cahed geometrical tools Returns 3-D state.
    	:param theVertex:
    	:type theVertex: TopoDS_Vertex
    	:param theSolid:
    	:type theSolid: TopoDS_Solid
    	:param theTol:
    	:type theTol: float
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: TopAbs_State
    * Computes the 3-D state of the edge theEdge toward solid theSolid. theTol - value of precision of computation theContext- cahed geometrical tools Returns 3-D state.
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:param theSolid:
    	:type theSolid: TopoDS_Solid
    	:param theTol:
    	:type theTol: float
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: TopAbs_State
    * Computes the 3-D state of the face theFace toward solid theSolid. theTol - value of precision of computation theBounds - set of edges of <theSolid> to avoid theContext- cahed geometrical tools Returns 3-D state.
    	:param theFace:
    	:type theFace: TopoDS_Face
    	:param theSolid:
    	:type theSolid: TopoDS_Solid
    	:param theTol:
    	:type theTol: float
    	:param theBounds:
    	:type theBounds: TopTools_IndexedMapOfShape
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: TopAbs_State
    """
    return _BOPTools.BOPTools_AlgoTools_ComputeState(*args)

def BOPTools_AlgoTools_ComputeStateByOnePoint(*args) -> "TopAbs_State":
    """
    * Computes the 3-D state of the shape theShape toward solid theSolid. theTol - value of precision of computation theContext- cahed geometrical tools Returns 3-D state.
    	:param theShape:
    	:type theShape: TopoDS_Shape
    	:param theSolid:
    	:type theSolid: TopoDS_Solid
    	:param theTol:
    	:type theTol: float
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: TopAbs_State
    """
    return _BOPTools.BOPTools_AlgoTools_ComputeStateByOnePoint(*args)

def BOPTools_AlgoTools_ComputeTolerance(*args) -> "Standard_Real &, Standard_Real &":
    """
    * @name Edge/Face Deviation computation Computes the necessary value of the tolerance for the edge
    	:param theFace:
    	:type theFace: TopoDS_Face
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:param theMaxDist:
    	:type theMaxDist: float
    	:param theMaxPar:
    	:type theMaxPar: float
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_ComputeTolerance(*args)

def BOPTools_AlgoTools_ComputeVV(*args) -> "Standard_Integer":
    """
    * @name Intersection of the vertices Intersects the vertex <theV1> with the point <theP> with tolerance <theTolP>. Returns the error status: - 0 - no error, meaning that the vertex intersects the point; - 1 - the distance between vertex and point is grater than the sum of tolerances.
    	:param theV:
    	:type theV: TopoDS_Vertex
    	:param theP:
    	:type theP: gp_Pnt
    	:param theTolP:
    	:type theTolP: float
    	:rtype: int
    * Intersects the given vertices with given fuzzy value. Returns the error status: - 0 - no error, meaning that the vertices interferes with given tolerance; - 1 - the distance between vertices is grater than the sum of their tolerances.
    	:param theV1:
    	:type theV1: TopoDS_Vertex
    	:param theV2:
    	:type theV2: TopoDS_Vertex
    	:param theFuzz: default value is Precision::Confusion()
    	:type theFuzz: float
    	:rtype: int
    """
    return _BOPTools.BOPTools_AlgoTools_ComputeVV(*args)

def BOPTools_AlgoTools_CopyEdge(*args) -> "TopoDS_Edge":
    """
    * Makes a copy of <theEdge> with vertices.
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:rtype: TopoDS_Edge
    """
    return _BOPTools.BOPTools_AlgoTools_CopyEdge(*args)

def BOPTools_AlgoTools_CorrectCurveOnSurface(*args) -> "void":
    """
    * Provides valid values of tolerances for the shape <theS> in terms of BRepCheck_InvalidCurveOnSurface.
    	:param theS:
    	:type theS: TopoDS_Shape
    	:param theMapToAvoid:
    	:type theMapToAvoid: TopTools_IndexedMapOfShape
    	:param theTolMax: default value is 0.0001
    	:type theTolMax: float
    	:param theRunParallel: default value is Standard_False
    	:type theRunParallel: bool
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_CorrectCurveOnSurface(*args)

def BOPTools_AlgoTools_CorrectPointOnCurve(*args) -> "void":
    """
    * Provides valid values of tolerances for the shape <theS> in terms of BRepCheck_InvalidPointOnCurve.
    	:param theS:
    	:type theS: TopoDS_Shape
    	:param theMapToAvoid:
    	:type theMapToAvoid: TopTools_IndexedMapOfShape
    	:param theTolMax: default value is 0.0001
    	:type theTolMax: float
    	:param theRunParallel: default value is Standard_False
    	:type theRunParallel: bool
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_CorrectPointOnCurve(*args)

def BOPTools_AlgoTools_CorrectRange(*args) -> "void":
    """
    * @name Correction of the edges range Correct shrunk range <aSR> taking into account 3D-curve resolution and corresponding tolerance values of <aE1>, <aE2>
    	:param aE1:
    	:type aE1: TopoDS_Edge
    	:param aE2:
    	:type aE2: TopoDS_Edge
    	:param aSR:
    	:type aSR: IntTools_Range
    	:param aNewSR:
    	:type aNewSR: IntTools_Range
    	:rtype: void
    * Correct shrunk range <aSR> taking into account 3D-curve resolution and corresponding tolerance values of <aE>, <aF>
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aSR:
    	:type aSR: IntTools_Range
    	:param aNewSR:
    	:type aNewSR: IntTools_Range
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_CorrectRange(*args)

def BOPTools_AlgoTools_CorrectShapeTolerances(*args) -> "void":
    """
    * Corrects tolerance values of the sub-shapes of the shape <theS> if needed.
    	:param theS:
    	:type theS: TopoDS_Shape
    	:param theMapToAvoid:
    	:type theMapToAvoid: TopTools_IndexedMapOfShape
    	:param theRunParallel: default value is Standard_False
    	:type theRunParallel: bool
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_CorrectShapeTolerances(*args)

def BOPTools_AlgoTools_CorrectTolerances(*args) -> "void":
    """
    * @name Methods for shape validation (correction) Provides valid values of tolerances for the shape <theS> <theTolMax> is max value of the tolerance that can be accepted for correction. If real value of the tolerance will be greater than <aTolMax>, the correction does not perform.
    	:param theS:
    	:type theS: TopoDS_Shape
    	:param theMapToAvoid:
    	:type theMapToAvoid: TopTools_IndexedMapOfShape
    	:param theTolMax: default value is 0.0001
    	:type theTolMax: float
    	:param theRunParallel: default value is Standard_False
    	:type theRunParallel: bool
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_CorrectTolerances(*args)

def BOPTools_AlgoTools_Dimension(*args) -> "Standard_Integer":
    """
    * Retutns dimension of the shape <theS>.
    	:param theS:
    	:type theS: TopoDS_Shape
    	:rtype: int
    """
    return _BOPTools.BOPTools_AlgoTools_Dimension(*args)

def BOPTools_AlgoTools_GetEdgeOff(*args) -> "Standard_Boolean":
    """
    * @name Looking for the edge in the face Returns True if the face theFace contains the edge theEdge but with opposite orientation. If the method returns True theEdgeOff is the edge founded
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:param theFace:
    	:type theFace: TopoDS_Face
    	:param theEdgeOff:
    	:type theEdgeOff: TopoDS_Edge
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_GetEdgeOff(*args)

def BOPTools_AlgoTools_GetEdgeOnFace(*args) -> "Standard_Boolean":
    """
    * For the face theFace gets the edge theEdgeOnF that is the same as theEdge Returns True if such edge exists Returns False if there is no such edge
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:param theFace:
    	:type theFace: TopoDS_Face
    	:param theEdgeOnF:
    	:type theEdgeOnF: TopoDS_Edge
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_GetEdgeOnFace(*args)

def BOPTools_AlgoTools_GetFaceOff(*args) -> "Standard_Boolean":
    """
    * @name Face classification relatively solid For the face theFace and its edge theEdge finds the face suitable to produce shell. theLCEF - set of faces to search. All faces from theLCEF must share edge theEdge
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:param theFace:
    	:type theFace: TopoDS_Face
    	:param theLCEF:
    	:type theLCEF: BOPTools_ListOfCoupleOfShape
    	:param theFaceOff:
    	:type theFaceOff: TopoDS_Face
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_GetFaceOff(*args)

def BOPTools_AlgoTools_IsBlockInOnFace(*args) -> "Standard_Boolean":
    """
    * Returns True if PaveBlock <aPB> lays on the face <aF>, i.e the <PB> is IN or ON in 2D of <aF>
    	:param aShR:
    	:type aShR: IntTools_Range
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aContext:
    	:type aContext: IntTools_Context
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_IsBlockInOnFace(*args)

def BOPTools_AlgoTools_IsHole(*args) -> "Standard_Boolean":
    """
    * @name Wire classification relatively face Checks if the wire is a hole for the face.
    	:param theW:
    	:type theW: TopoDS_Shape
    	:param theF:
    	:type theF: TopoDS_Shape
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_IsHole(*args)

def BOPTools_AlgoTools_IsInternalFace(*args) -> "Standard_Boolean":
    """
    * Returns True if the face theFace is inside of the couple of faces theFace1, theFace2. The faces theFace, theFace1, theFace2 must share the edge theEdge Return values: * 0 state is not IN * 1 state is IN * 2 state can not be found by the method of angles
    	:param theFace:
    	:type theFace: TopoDS_Face
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:param theFace1:
    	:type theFace1: TopoDS_Face
    	:param theFace2:
    	:type theFace2: TopoDS_Face
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: int
    * Returns True if the face theFace is inside of the appropriate couple of faces (from the set theLF) . The faces of the set theLF and theFace must share the edge theEdge * 0 state is not IN * 1 state is IN * 2 state can not be found by the method of angles
    	:param theFace:
    	:type theFace: TopoDS_Face
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:param theLF:
    	:type theLF: TopTools_ListOfShape
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: int
    * Returns True if the face theFace is inside the solid theSolid. theMEF - Map Edge/Faces for theSolid theTol - value of precision of computation theContext- cahed geometrical tools
    	:param theFace:
    	:type theFace: TopoDS_Face
    	:param theSolid:
    	:type theSolid: TopoDS_Solid
    	:param theMEF:
    	:type theMEF: TopTools_IndexedDataMapOfShapeListOfShape
    	:param theTol:
    	:type theTol: float
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_IsInternalFace(*args)

def BOPTools_AlgoTools_IsInvertedSolid(*args) -> "Standard_Boolean":
    """
    * @name Solid classification Returns true if the solid <theSolid> is inverted
    	:param theSolid:
    	:type theSolid: TopoDS_Solid
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_IsInvertedSolid(*args)

def BOPTools_AlgoTools_IsMicroEdge(*args) -> "Standard_Boolean":
    """
    * @name Checking edge on micro status Checks if it is possible to compute shrunk range for the edge <aE> Flag <theCheckSplittable> defines whether to take into account the possibility to split the edge or not.
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:param theContext:
    	:type theContext: IntTools_Context
    	:param theCheckSplittable: default value is Standard_True
    	:type theCheckSplittable: bool
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_IsMicroEdge(*args)

def BOPTools_AlgoTools_IsOpenShell(*args) -> "Standard_Boolean":
    """
    * Returns true if the shell <theShell> is open
    	:param theShell:
    	:type theShell: TopoDS_Shell
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_IsOpenShell(*args)

def BOPTools_AlgoTools_IsSplitToReverse(*args) -> "Standard_Boolean":
    """
    * @name Choosing correct orientation for the split shape Checks if the direction of the split shape is opposite to the direction of the original shape. The method is an overload for (Edge,Edge) and (Face,Face) corresponding methods and checks only these types of shapes. For faces the method checks if normal directions are opposite. For edges the method checks if tangent vectors are opposite. //! In case the directions do not coincide, it returns True, meaning that split shape has to be reversed to match the direction of the original shape. //! If requested (<theError> is not null), the method returns the status of the operation: - 0 - no error; - Error from (Edge,Edge) or (Face,Face) corresponding method - 100 - bad types. In case of any error the method always returns False. //! @param theSplit [in] Split shape @param theShape [in] Original shape @param theContext [in] Cashed geometrical tools @param theError [out] Error Status of the operation
    	:param theSplit:
    	:type theSplit: TopoDS_Shape
    	:param theShape:
    	:type theShape: TopoDS_Shape
    	:param theContext:
    	:type theContext: IntTools_Context
    	:param theError: default value is NULL
    	:type theError: int *
    	:rtype: bool
    * Checks if the normal direction of the split face is opposite to the normal direction of the original face. The normal directions for both faces are taken in the same point - point inside the split face is projected onto the original face. Returns True if the normals do not coincide, meaning the necessity to revert the orientation of the split face to match the direction of the original face. //! If requested (<theError> is not null), the method returns the status of the operation: - 0 - no error; - 1 - unable to find the point inside split face; - 2 - unable to compute the normal for the split face; - 3 - unable to project the point inside the split face on the original face; - 4 - unable to compute the normal for the original face. In case of any error the method always returns False. //! @param theSplit [in] Split face @param theShape [in] Original face @param theContext [in] Cashed geometrical tools @param theError [out] Error Status of the operation
    	:param theSplit:
    	:type theSplit: TopoDS_Face
    	:param theShape:
    	:type theShape: TopoDS_Face
    	:param theContext:
    	:type theContext: IntTools_Context
    	:param theError: default value is NULL
    	:type theError: int *
    	:rtype: bool
    * Checks if the tangent vector of the split edge is opposite to the tangent vector of the original edge. The tangent vectors for both edges are computed in the same point - point inside the split edge is projected onto the original edge. Returns True if the tangent vectors do not coincide, meaning the necessity to revert the orientation of the split edge to match the direction of the original edge. //! If requested (<theError> is not null), the method returns the status of the operation: - 0 - no error; - 1 - degenerated edges are given; - 2 - unable to compute the tangent vector for the split edge; - 3 - unable to project the point inside the split edge on the original edge; - 4 - unable to compute the tangent vector for the original edge; In case of any error the method always returns False. //! @param theSplit [in] Split edge @param theShape [in] Original edge @param theContext [in] Cashed geometrical tools @param theError [out] Error Status of the operation
    	:param theSplit:
    	:type theSplit: TopoDS_Edge
    	:param theShape:
    	:type theShape: TopoDS_Edge
    	:param theContext:
    	:type theContext: IntTools_Context
    	:param theError: default value is NULL
    	:type theError: int *
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_IsSplitToReverse(*args)

def BOPTools_AlgoTools_IsSplitToReverseWithWarn(*args) -> "Standard_Boolean":
    """
    * Add-on for the *IsSplitToReverse()* to check for its errors and in case of any add the *BOPAlgo_AlertUnableToOrientTheShape* warning to the report.
    	:param theSplit:
    	:type theSplit: TopoDS_Shape
    	:param theShape:
    	:type theShape: TopoDS_Shape
    	:param theContext:
    	:type theContext: IntTools_Context
    	:param theReport: default value is NULL
    	:type theReport: Message_Report
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools_IsSplitToReverseWithWarn(*args)

def BOPTools_AlgoTools_MakeConnexityBlock(*args) -> "void":
    """
    * @name Making connexity blocks For the list of faces theLS build block theLSCB in terms of connexity by edges theMapAvoid - set of edges to avoid for the treatment
    	:param theLS:
    	:type theLS: TopTools_ListOfShape
    	:param theMapAvoid:
    	:type theMapAvoid: TopTools_IndexedMapOfShape
    	:param theLSCB:
    	:type theLSCB: TopTools_ListOfShape
    	:param theAllocator:
    	:type theAllocator: NCollection_BaseAllocator
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_MakeConnexityBlock(*args)

def BOPTools_AlgoTools_MakeConnexityBlocks(*args) -> "void":
    """
    * For the compound <theS> builds the blocks (compounds) of elements of type <theElementType> connected through the shapes of the type <theConnectionType>. The blocks are stored into the list <theLCB>.
    	:param theS:
    	:type theS: TopoDS_Shape
    	:param theConnectionType:
    	:type theConnectionType: TopAbs_ShapeEnum
    	:param theElementType:
    	:type theElementType: TopAbs_ShapeEnum
    	:param theLCB:
    	:type theLCB: TopTools_ListOfShape
    	:rtype: void
    * For the compound <theS> builds the blocks (compounds) of elements of type <theElementType> connected through the shapes of the type <theConnectionType>. The blocks are stored into the list of lists <theLCB>. Returns also the connection map <theConnectionMap>, filled during operation.
    	:param theS:
    	:type theS: TopoDS_Shape
    	:param theConnectionType:
    	:type theConnectionType: TopAbs_ShapeEnum
    	:param theElementType:
    	:type theElementType: TopAbs_ShapeEnum
    	:param theLCB:
    	:type theLCB: TopTools_ListOfListOfShape
    	:param theConnectionMap:
    	:type theConnectionMap: TopTools_IndexedDataMapOfShapeListOfShape
    	:rtype: void
    * Makes connexity blocks of elements of the given type with the given type of the connecting elements. The blocks are checked on regularity (multi-connectivity) and stored to the list of blocks <theLCB>.
    	:param theLS:
    	:type theLS: TopTools_ListOfShape
    	:param theConnectionType:
    	:type theConnectionType: TopAbs_ShapeEnum
    	:param theElementType:
    	:type theElementType: TopAbs_ShapeEnum
    	:param theLCB:
    	:type theLCB: BOPTools_ListOfConnexityBlock
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_MakeConnexityBlocks(*args)

def BOPTools_AlgoTools_MakeContainer(*args) -> "void":
    """
    * @name Other methods Makes empty container of requested type
    	:param theType:
    	:type theType: TopAbs_ShapeEnum
    	:param theShape:
    	:type theShape: TopoDS_Shape
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_MakeContainer(*args)

def BOPTools_AlgoTools_MakeEdge(*args) -> "void":
    """
    * @name Edge construction Makes the edge based on the given curve with given bounding vertices.
    	:param theCurve:
    	:type theCurve: IntTools_Curve
    	:param theV1:
    	:type theV1: TopoDS_Vertex
    	:param theT1:
    	:type theT1: float
    	:param theV2:
    	:type theV2: TopoDS_Vertex
    	:param theT2:
    	:type theT2: float
    	:param theTolR3D:
    	:type theTolR3D: float
    	:param theE:
    	:type theE: TopoDS_Edge
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_MakeEdge(*args)

def BOPTools_AlgoTools_MakeNewVertex(*args) -> "void":
    """
    * Make a vertex using 3D-point <aP1> and 3D-tolerance value <aTol>
    	:param aP1:
    	:type aP1: gp_Pnt
    	:param aTol:
    	:type aTol: float
    	:param aNewVertex:
    	:type aNewVertex: TopoDS_Vertex
    	:rtype: void
    * Make a vertex using couple of vertices <aV1, aV2>
    	:param aV1:
    	:type aV1: TopoDS_Vertex
    	:param aV2:
    	:type aV2: TopoDS_Vertex
    	:param aNewVertex:
    	:type aNewVertex: TopoDS_Vertex
    	:rtype: void
    * Make a vertex in place of intersection between two edges <aE1, aE2> with parameters <aP1, aP2>
    	:param aE1:
    	:type aE1: TopoDS_Edge
    	:param aP1:
    	:type aP1: float
    	:param aE2:
    	:type aE2: TopoDS_Edge
    	:param aP2:
    	:type aP2: float
    	:param aNewVertex:
    	:type aNewVertex: TopoDS_Vertex
    	:rtype: void
    * Make a vertex in place of intersection between the edge <aE1> with parameter <aP1> and the face <aF2>
    	:param aE1:
    	:type aE1: TopoDS_Edge
    	:param aP1:
    	:type aP1: float
    	:param aF2:
    	:type aF2: TopoDS_Face
    	:param aNewVertex:
    	:type aNewVertex: TopoDS_Vertex
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_MakeNewVertex(*args)

def BOPTools_AlgoTools_MakePCurve(*args) -> "void":
    """
    * @name PCurve construction Makes 2d curve of the edge <theE> on the faces <theF1> and <theF2>. <theContext> - storage for caching the geometrical tools
    	:param theE:
    	:type theE: TopoDS_Edge
    	:param theF1:
    	:type theF1: TopoDS_Face
    	:param theF2:
    	:type theF2: TopoDS_Face
    	:param theCurve:
    	:type theCurve: IntTools_Curve
    	:param thePC1:
    	:type thePC1: bool
    	:param thePC2:
    	:type thePC2: bool
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_MakePCurve(*args)

def BOPTools_AlgoTools_MakeSectEdge(*args) -> "void":
    """
    * Make the edge from 3D-Curve <aIC> and two vertices <aV1,aV2> at parameters <aP1,aP2>
    	:param aIC:
    	:type aIC: IntTools_Curve
    	:param aV1:
    	:type aV1: TopoDS_Vertex
    	:param aP1:
    	:type aP1: float
    	:param aV2:
    	:type aV2: TopoDS_Vertex
    	:param aP2:
    	:type aP2: float
    	:param aNewEdge:
    	:type aNewEdge: TopoDS_Edge
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_MakeSectEdge(*args)

def BOPTools_AlgoTools_MakeSplitEdge(*args) -> "void":
    """
    * Make the edge from base edge <aE1> and two vertices <aV1,aV2> at parameters <aP1,aP2>
    	:param aE1:
    	:type aE1: TopoDS_Edge
    	:param aV1:
    	:type aV1: TopoDS_Vertex
    	:param aP1:
    	:type aP1: float
    	:param aV2:
    	:type aV2: TopoDS_Vertex
    	:param aP2:
    	:type aP2: float
    	:param aNewEdge:
    	:type aNewEdge: TopoDS_Edge
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_MakeSplitEdge(*args)

def BOPTools_AlgoTools_MakeVertex(*args) -> "void":
    """
    * @name Vertices construction Makes the vertex in the middle of given vertices with the tolerance covering all tolerance spheres of vertices.
    	:param theLV:
    	:type theLV: TopTools_ListOfShape
    	:param theV:
    	:type theV: TopoDS_Vertex
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_MakeVertex(*args)

def BOPTools_AlgoTools_OrientEdgesOnWire(*args) -> "void":
    """
    * @name Orienting elements in container Correctly orients edges on the wire
    	:param theWire:
    	:type theWire: TopoDS_Shape
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_OrientEdgesOnWire(*args)

def BOPTools_AlgoTools_OrientFacesOnShell(*args) -> "void":
    """
    * Correctly orients faces on the shell
    	:param theShell:
    	:type theShell: TopoDS_Shape
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_OrientFacesOnShell(*args)

def BOPTools_AlgoTools_PointOnEdge(*args) -> "void":
    """
    * Compute a 3D-point on the edge <aEdge> at parameter <aPrm>
    	:param aEdge:
    	:type aEdge: TopoDS_Edge
    	:param aPrm:
    	:type aPrm: float
    	:param aP:
    	:type aP: gp_Pnt
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_PointOnEdge(*args)

def BOPTools_AlgoTools_Sense(*args) -> "Standard_Integer":
    """
    * Checks if the normals direction of the given faces computed near the shared edge coincide. Returns the status of operation: * 0 - in case of error (shared edge not found or directions are not collinear) * 1 - normal directions coincide; * -1 - normal directions are opposite.
    	:param theF1:
    	:type theF1: TopoDS_Face
    	:param theF2:
    	:type theF2: TopoDS_Face
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: int
    """
    return _BOPTools.BOPTools_AlgoTools_Sense(*args)

def BOPTools_AlgoTools_UpdateVertex(*args) -> "void":
    """
    * @name Updating the vertex Update the tolerance value for vertex <aV> taking into account the fact that <aV> lays on the curve <aIC>
    	:param aIC:
    	:type aIC: IntTools_Curve
    	:param aT:
    	:type aT: float
    	:param aV:
    	:type aV: TopoDS_Vertex
    	:rtype: void
    * Update the tolerance value for vertex <aV> taking into account the fact that <aV> lays on the edge <aE>
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aT:
    	:type aT: float
    	:param aV:
    	:type aV: TopoDS_Vertex
    	:rtype: void
    * Update the tolerance value for vertex <aVN> taking into account the fact that <aVN> should cover tolerance zone of <aVF>
    	:param aVF:
    	:type aVF: TopoDS_Vertex
    	:param aVN:
    	:type aVN: TopoDS_Vertex
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools_UpdateVertex(*args)

class BOPTools_AlgoTools2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AdjustPCurveOnFace(*args) -> "void":
        """
        * Adjust P-Curve <theC2D> (3D-curve <theC3D>) on surface of the face <theF>. <theContext> - storage for caching the geometrical tools
        	:param theF:
        	:type theF: TopoDS_Face
        	:param theC3D:
        	:type theC3D: Geom_Curve
        	:param theC2D:
        	:type theC2D: Geom2d_Curve
        	:param theC2DA:
        	:type theC2DA: Geom2d_Curve
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        * Adjust P-Curve <aC2D> (3D-curve <C3D>) on surface <aF> . [aT1, aT2] - range to adjust <theContext> - storage for caching the geometrical tools
        	:param theF:
        	:type theF: TopoDS_Face
        	:param theFirst:
        	:type theFirst: float
        	:param theLast:
        	:type theLast: float
        	:param theC2D:
        	:type theC2D: Geom2d_Curve
        	:param theC2DA:
        	:type theC2DA: Geom2d_Curve
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools2D_AdjustPCurveOnFace(*args)

    AdjustPCurveOnFace = staticmethod(AdjustPCurveOnFace)

    def AdjustPCurveOnSurf(*args) -> "void":
        """
        * Adjust P-Curve <aC2D> (3D-curve <C3D>) on surface <aF> . [aT1, aT2] - range to adjust
        	:param aF:
        	:type aF: BRepAdaptor_Surface
        	:param aT1:
        	:type aT1: float
        	:param aT2:
        	:type aT2: float
        	:param aC2D:
        	:type aC2D: Geom2d_Curve
        	:param aC2DA:
        	:type aC2DA: Geom2d_Curve
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools2D_AdjustPCurveOnSurf(*args)

    AdjustPCurveOnSurf = staticmethod(AdjustPCurveOnSurf)

    def AttachExistingPCurve(*args) -> "Standard_Integer":
        """
        * Attach P-Curve from the edge <aEold> on surface <aF> to the edge <aEnew> Returns 0 in case of success
        	:param aEold:
        	:type aEold: TopoDS_Edge
        	:param aEnew:
        	:type aEnew: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aCtx:
        	:type aCtx: IntTools_Context
        	:rtype: int
        """
        return _BOPTools.BOPTools_AlgoTools2D_AttachExistingPCurve(*args)

    AttachExistingPCurve = staticmethod(AttachExistingPCurve)

    def BuildPCurveForEdgeOnFace(*args) -> "void":
        """
        * Compute P-Curve for the edge <aE> on the face <aF>. Raises exception Standard_ConstructionError if projection algorithm fails. <theContext> - storage for caching the geometrical tools
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools2D_BuildPCurveForEdgeOnFace(*args)

    BuildPCurveForEdgeOnFace = staticmethod(BuildPCurveForEdgeOnFace)

    def EdgeTangent(*args) -> "Standard_Boolean":
        """
        * Compute tangent for the edge <aE> [in 3D] at parameter <aT>
        	:param anE:
        	:type anE: TopoDS_Edge
        	:param aT:
        	:type aT: float
        	:param Tau:
        	:type Tau: gp_Vec
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools2D_EdgeTangent(*args)

    EdgeTangent = staticmethod(EdgeTangent)

    def HasCurveOnSurface(*args) -> "Standard_Boolean":
        """
        * Returns True if the edge <aE> has P-Curve <aC> on surface <aF> . [aFirst, aLast] - range of the P-Curve [aToler] - reached tolerance If the P-Curve does not exist, aC.IsNull()=True.
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aC:
        	:type aC: Geom2d_Curve
        	:param aFirst:
        	:type aFirst: float
        	:param aLast:
        	:type aLast: float
        	:param aToler:
        	:type aToler: float
        	:rtype: bool
        * Returns True if the edge <aE> has P-Curve <aC> on surface <aF> . If the P-Curve does not exist, aC.IsNull()=True.
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools2D_HasCurveOnSurface(*args)

    HasCurveOnSurface = staticmethod(HasCurveOnSurface)

    def IntermediatePoint(*args) -> "Standard_Real":
        """
        * Compute intermediate value in between [aFirst, aLast] .
        	:param aFirst:
        	:type aFirst: float
        	:param aLast:
        	:type aLast: float
        	:rtype: float
        * Compute intermediate value of parameter for the edge <anE>.
        	:param anE:
        	:type anE: TopoDS_Edge
        	:rtype: float
        """
        return _BOPTools.BOPTools_AlgoTools2D_IntermediatePoint(*args)

    IntermediatePoint = staticmethod(IntermediatePoint)

    def IsEdgeIsoline(*args) -> "Standard_Boolean &, Standard_Boolean &":
        """
        * Checks if CurveOnSurface of theE on theF matches with isoline of theF surface. Sets corresponding values for isTheUIso and isTheVIso variables. ATTENTION!!! This method is based on comparation between direction of surface (which theF is based on) iso-lines and the direction of the edge p-curve (on theF) in middle-point of the p-curve. This method should be used carefully (e.g. BRep_Tool::IsClosed(...) together) in order to avoid false classification some p-curves as isoline (e.g. circle on a plane).
        	:param theE:
        	:type theE: TopoDS_Edge
        	:param theF:
        	:type theF: TopoDS_Face
        	:param isTheUIso:
        	:type isTheUIso: bool
        	:param isTheVIso:
        	:type isTheVIso: bool
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools2D_IsEdgeIsoline(*args)

    IsEdgeIsoline = staticmethod(IsEdgeIsoline)

    def Make2D(*args) -> "Standard_Real &, Standard_Real &, Standard_Real &":
        """
        * Make P-Curve <aC> for the edge <aE> on surface <aF> . [aFirst, aLast] - range of the P-Curve [aToler] - reached tolerance Raises exception Standard_ConstructionError if algorithm fails. <theContext> - storage for caching the geometrical tools
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aC:
        	:type aC: Geom2d_Curve
        	:param aFirst:
        	:type aFirst: float
        	:param aLast:
        	:type aLast: float
        	:param aToler:
        	:type aToler: float
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools2D_Make2D(*args)

    Make2D = staticmethod(Make2D)

    def MakePCurveOnFace(*args) -> "Standard_Real &":
        """
        * Make P-Curve <aC> for the 3D-curve <C3D> on surface <aF> . [aToler] - reached tolerance Raises exception Standard_ConstructionError if projection algorithm fails. <theContext> - storage for caching the geometrical tools
        	:param aF:
        	:type aF: TopoDS_Face
        	:param C3D:
        	:type C3D: Geom_Curve
        	:param aC:
        	:type aC: Geom2d_Curve
        	:param aToler:
        	:type aToler: float
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        * Make P-Curve <aC> for the 3D-curve <C3D> on surface <aF> . [aT1, aT2] - range to build [aToler] - reached tolerance Raises exception Standard_ConstructionError if projection algorithm fails. <theContext> - storage for caching the geometrical tools
        	:param aF:
        	:type aF: TopoDS_Face
        	:param C3D:
        	:type C3D: Geom_Curve
        	:param aT1:
        	:type aT1: float
        	:param aT2:
        	:type aT2: float
        	:param aC:
        	:type aC: Geom2d_Curve
        	:param aToler:
        	:type aToler: float
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools2D_MakePCurveOnFace(*args)

    MakePCurveOnFace = staticmethod(MakePCurveOnFace)

    def PointOnSurface(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Compute surface parameters <U,V> of the face <aF> for the point from the edge <aE> at parameter <aT>. If <aE> has't pcurve on surface, algorithm tries to get it by projection and can raise exception Standard_ConstructionError if projection algorithm fails. <theContext> - storage for caching the geometrical tools
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aT:
        	:type aT: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools2D_PointOnSurface(*args)

    PointOnSurface = staticmethod(PointOnSurface)

    __repr__ = _dumps_object


    def __init__(self):
        _BOPTools.BOPTools_AlgoTools2D_swiginit(self, _BOPTools.new_BOPTools_AlgoTools2D())
    __swig_destroy__ = _BOPTools.delete_BOPTools_AlgoTools2D
BOPTools_AlgoTools2D_swigregister = _BOPTools.BOPTools_AlgoTools2D_swigregister
BOPTools_AlgoTools2D_swigregister(BOPTools_AlgoTools2D)

def BOPTools_AlgoTools2D_AdjustPCurveOnFace(*args) -> "void":
    """
    * Adjust P-Curve <theC2D> (3D-curve <theC3D>) on surface of the face <theF>. <theContext> - storage for caching the geometrical tools
    	:param theF:
    	:type theF: TopoDS_Face
    	:param theC3D:
    	:type theC3D: Geom_Curve
    	:param theC2D:
    	:type theC2D: Geom2d_Curve
    	:param theC2DA:
    	:type theC2DA: Geom2d_Curve
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    * Adjust P-Curve <aC2D> (3D-curve <C3D>) on surface <aF> . [aT1, aT2] - range to adjust <theContext> - storage for caching the geometrical tools
    	:param theF:
    	:type theF: TopoDS_Face
    	:param theFirst:
    	:type theFirst: float
    	:param theLast:
    	:type theLast: float
    	:param theC2D:
    	:type theC2D: Geom2d_Curve
    	:param theC2DA:
    	:type theC2DA: Geom2d_Curve
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools2D_AdjustPCurveOnFace(*args)

def BOPTools_AlgoTools2D_AdjustPCurveOnSurf(*args) -> "void":
    """
    * Adjust P-Curve <aC2D> (3D-curve <C3D>) on surface <aF> . [aT1, aT2] - range to adjust
    	:param aF:
    	:type aF: BRepAdaptor_Surface
    	:param aT1:
    	:type aT1: float
    	:param aT2:
    	:type aT2: float
    	:param aC2D:
    	:type aC2D: Geom2d_Curve
    	:param aC2DA:
    	:type aC2DA: Geom2d_Curve
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools2D_AdjustPCurveOnSurf(*args)

def BOPTools_AlgoTools2D_AttachExistingPCurve(*args) -> "Standard_Integer":
    """
    * Attach P-Curve from the edge <aEold> on surface <aF> to the edge <aEnew> Returns 0 in case of success
    	:param aEold:
    	:type aEold: TopoDS_Edge
    	:param aEnew:
    	:type aEnew: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aCtx:
    	:type aCtx: IntTools_Context
    	:rtype: int
    """
    return _BOPTools.BOPTools_AlgoTools2D_AttachExistingPCurve(*args)

def BOPTools_AlgoTools2D_BuildPCurveForEdgeOnFace(*args) -> "void":
    """
    * Compute P-Curve for the edge <aE> on the face <aF>. Raises exception Standard_ConstructionError if projection algorithm fails. <theContext> - storage for caching the geometrical tools
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools2D_BuildPCurveForEdgeOnFace(*args)

def BOPTools_AlgoTools2D_EdgeTangent(*args) -> "Standard_Boolean":
    """
    * Compute tangent for the edge <aE> [in 3D] at parameter <aT>
    	:param anE:
    	:type anE: TopoDS_Edge
    	:param aT:
    	:type aT: float
    	:param Tau:
    	:type Tau: gp_Vec
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools2D_EdgeTangent(*args)

def BOPTools_AlgoTools2D_HasCurveOnSurface(*args) -> "Standard_Boolean":
    """
    * Returns True if the edge <aE> has P-Curve <aC> on surface <aF> . [aFirst, aLast] - range of the P-Curve [aToler] - reached tolerance If the P-Curve does not exist, aC.IsNull()=True.
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aC:
    	:type aC: Geom2d_Curve
    	:param aFirst:
    	:type aFirst: float
    	:param aLast:
    	:type aLast: float
    	:param aToler:
    	:type aToler: float
    	:rtype: bool
    * Returns True if the edge <aE> has P-Curve <aC> on surface <aF> . If the P-Curve does not exist, aC.IsNull()=True.
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools2D_HasCurveOnSurface(*args)

def BOPTools_AlgoTools2D_IntermediatePoint(*args) -> "Standard_Real":
    """
    * Compute intermediate value in between [aFirst, aLast] .
    	:param aFirst:
    	:type aFirst: float
    	:param aLast:
    	:type aLast: float
    	:rtype: float
    * Compute intermediate value of parameter for the edge <anE>.
    	:param anE:
    	:type anE: TopoDS_Edge
    	:rtype: float
    """
    return _BOPTools.BOPTools_AlgoTools2D_IntermediatePoint(*args)

def BOPTools_AlgoTools2D_IsEdgeIsoline(*args) -> "Standard_Boolean &, Standard_Boolean &":
    """
    * Checks if CurveOnSurface of theE on theF matches with isoline of theF surface. Sets corresponding values for isTheUIso and isTheVIso variables. ATTENTION!!! This method is based on comparation between direction of surface (which theF is based on) iso-lines and the direction of the edge p-curve (on theF) in middle-point of the p-curve. This method should be used carefully (e.g. BRep_Tool::IsClosed(...) together) in order to avoid false classification some p-curves as isoline (e.g. circle on a plane).
    	:param theE:
    	:type theE: TopoDS_Edge
    	:param theF:
    	:type theF: TopoDS_Face
    	:param isTheUIso:
    	:type isTheUIso: bool
    	:param isTheVIso:
    	:type isTheVIso: bool
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools2D_IsEdgeIsoline(*args)

def BOPTools_AlgoTools2D_Make2D(*args) -> "Standard_Real &, Standard_Real &, Standard_Real &":
    """
    * Make P-Curve <aC> for the edge <aE> on surface <aF> . [aFirst, aLast] - range of the P-Curve [aToler] - reached tolerance Raises exception Standard_ConstructionError if algorithm fails. <theContext> - storage for caching the geometrical tools
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aC:
    	:type aC: Geom2d_Curve
    	:param aFirst:
    	:type aFirst: float
    	:param aLast:
    	:type aLast: float
    	:param aToler:
    	:type aToler: float
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools2D_Make2D(*args)

def BOPTools_AlgoTools2D_MakePCurveOnFace(*args) -> "Standard_Real &":
    """
    * Make P-Curve <aC> for the 3D-curve <C3D> on surface <aF> . [aToler] - reached tolerance Raises exception Standard_ConstructionError if projection algorithm fails. <theContext> - storage for caching the geometrical tools
    	:param aF:
    	:type aF: TopoDS_Face
    	:param C3D:
    	:type C3D: Geom_Curve
    	:param aC:
    	:type aC: Geom2d_Curve
    	:param aToler:
    	:type aToler: float
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    * Make P-Curve <aC> for the 3D-curve <C3D> on surface <aF> . [aT1, aT2] - range to build [aToler] - reached tolerance Raises exception Standard_ConstructionError if projection algorithm fails. <theContext> - storage for caching the geometrical tools
    	:param aF:
    	:type aF: TopoDS_Face
    	:param C3D:
    	:type C3D: Geom_Curve
    	:param aT1:
    	:type aT1: float
    	:param aT2:
    	:type aT2: float
    	:param aC:
    	:type aC: Geom2d_Curve
    	:param aToler:
    	:type aToler: float
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools2D_MakePCurveOnFace(*args)

def BOPTools_AlgoTools2D_PointOnSurface(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Compute surface parameters <U,V> of the face <aF> for the point from the edge <aE> at parameter <aT>. If <aE> has't pcurve on surface, algorithm tries to get it by projection and can raise exception Standard_ConstructionError if projection algorithm fails. <theContext> - storage for caching the geometrical tools
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aT:
    	:type aT: float
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools2D_PointOnSurface(*args)

class BOPTools_AlgoTools3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DoSplitSEAMOnFace(*args) -> "void":
        """
        * Make the edge <aSp> seam edge for the face <aF>
        	:param aSp:
        	:type aSp: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools3D_DoSplitSEAMOnFace(*args)

    DoSplitSEAMOnFace = staticmethod(DoSplitSEAMOnFace)

    def GetApproxNormalToFaceOnEdge(*args) -> "Standard_Boolean":
        """
        * Computes normal to the face <aF> for the 3D-point that belongs to the edge <aE> at parameter <aT>. Output: aPx - the 3D-point where the normal computed aD - the normal; Warning: The normal is computed not exactly in the point on the edge, but in point that is near to the edge towards to the face material (so, we'll have approx. normal); The point is computed using PointNearEdge function, with the shifting value BOPTools_AlgoTools3D::MinStepIn2d(), from the edge, but if this value is too big, the point will be computed using Hatcher (PointInFace function). Returns True in case of success.
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aT:
        	:type aT: float
        	:param aPx:
        	:type aPx: gp_Pnt
        	:param aD:
        	:type aD: gp_Dir
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: bool
        * Computes normal to the face <aF> for the 3D-point that belongs to the edge <aE> at parameter <aT>. Output: aPx - the 3D-point where the normal computed aD - the normal; Warning: The normal is computed not exactly in the point on the edge, but in point that is near to the edge towards to the face material (so, we'll have approx. normal); The point is computed using PointNearEdge function with the shifting value <aDt2D> from the edge; No checks on this value will be done. Returns True in case of success.
        	:param theE:
        	:type theE: TopoDS_Edge
        	:param theF:
        	:type theF: TopoDS_Face
        	:param aT:
        	:type aT: float
        	:param aP:
        	:type aP: gp_Pnt
        	:param aDNF:
        	:type aDNF: gp_Dir
        	:param aDt2D:
        	:type aDt2D: float
        	:rtype: bool
        * Computes normal to the face <aF> for the 3D-point that belongs to the edge <aE> at parameter <aT>. Output: aPx - the 3D-point where the normal computed aD - the normal; Warning: The normal is computed not exactly in the point on the edge, but in point that is near to the edge towards to the face material (so, we'll have approx. normal); The point is computed using PointNearEdge function with the shifting value <aDt2D> from the edge, but if this value is too big the point will be computed using Hatcher (PointInFace function). Returns True in case of success.
        	:param theE:
        	:type theE: TopoDS_Edge
        	:param theF:
        	:type theF: TopoDS_Face
        	:param aT:
        	:type aT: float
        	:param aDt2D:
        	:type aDt2D: float
        	:param aP:
        	:type aP: gp_Pnt
        	:param aDNF:
        	:type aDNF: gp_Dir
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools3D_GetApproxNormalToFaceOnEdge(*args)

    GetApproxNormalToFaceOnEdge = staticmethod(GetApproxNormalToFaceOnEdge)

    def GetNormalToFaceOnEdge(*args) -> "void":
        """
        * Computes normal to the face <aF> for the point on the edge <aE> at parameter <aT>. <theContext> - storage for caching the geometrical tools
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aT:
        	:type aT: float
        	:param aD:
        	:type aD: gp_Dir
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        * Computes normal to the face <aF> for the point on the edge <aE> at arbitrary intermediate parameter. <theContext> - storage for caching the geometrical tools
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aD:
        	:type aD: gp_Dir
        	:param theContext: default value is opencascade::handle<IntTools_Context>()
        	:type theContext: IntTools_Context
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools3D_GetNormalToFaceOnEdge(*args)

    GetNormalToFaceOnEdge = staticmethod(GetNormalToFaceOnEdge)

    def GetNormalToSurface(*args) -> "Standard_Boolean":
        """
        * Compute normal <aD> to surface <aS> in point (U,V) Returns True if directions aD1U, aD1V coincide
        	:param aS:
        	:type aS: Geom_Surface
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param aD:
        	:type aD: gp_Dir
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools3D_GetNormalToSurface(*args)

    GetNormalToSurface = staticmethod(GetNormalToSurface)

    def IsEmptyShape(*args) -> "Standard_Boolean":
        """
        * Returns True if the shape <aS> does not contain geometry information (e.g. empty compound)
        	:param aS:
        	:type aS: TopoDS_Shape
        	:rtype: bool
        """
        return _BOPTools.BOPTools_AlgoTools3D_IsEmptyShape(*args)

    IsEmptyShape = staticmethod(IsEmptyShape)

    def MinStepIn2d(*args) -> "Standard_Real":
        """
        * Returns simple step value that is used in 2D-computations = 1.e-5
        	:rtype: float
        """
        return _BOPTools.BOPTools_AlgoTools3D_MinStepIn2d(*args)

    MinStepIn2d = staticmethod(MinStepIn2d)

    def OrientEdgeOnFace(*args) -> "void":
        """
        * Get the edge <aER> from the face <aF> that is the same as the edge <aE>
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aER:
        	:type aER: TopoDS_Edge
        	:rtype: void
        """
        return _BOPTools.BOPTools_AlgoTools3D_OrientEdgeOnFace(*args)

    OrientEdgeOnFace = staticmethod(OrientEdgeOnFace)

    def PointInFace(*args) -> "Standard_Integer":
        """
        * Computes arbitrary point <theP> inside the face <theF>. <theP2D> - 2D representation of <theP> on the surface of <theF> Returns 0 in case of success.
        	:param theF:
        	:type theF: TopoDS_Face
        	:param theP:
        	:type theP: gp_Pnt
        	:param theP2D:
        	:type theP2D: gp_Pnt2d
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: int
        * Computes a point <theP> inside the face <theF> using starting point taken by the parameter <theT> from the 2d curve of the edge <theE> on the face <theF> in the direction perpendicular to the tangent vector of the 2d curve of the edge. The point will be distanced on <theDt2D> from the 2d curve. <theP2D> - 2D representation of <theP> on the surface of <theF> Returns 0 in case of success.
        	:param theF:
        	:type theF: TopoDS_Face
        	:param theE:
        	:type theE: TopoDS_Edge
        	:param theT:
        	:type theT: float
        	:param theDt2D:
        	:type theDt2D: float
        	:param theP:
        	:type theP: gp_Pnt
        	:param theP2D:
        	:type theP2D: gp_Pnt2d
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: int
        * Computes a point <theP> inside the face <theF> using the line <theL> so that 2D point <theP2D>, 2D representation of <theP> on the surface of <theF>, lies on that line. Returns 0 in case of success.
        	:param theF:
        	:type theF: TopoDS_Face
        	:param theL:
        	:type theL: Geom2d_Curve
        	:param theP:
        	:type theP: gp_Pnt
        	:param theP2D:
        	:type theP2D: gp_Pnt2d
        	:param theContext:
        	:type theContext: IntTools_Context
        	:param theDt2D: default value is 0.0
        	:type theDt2D: float
        	:rtype: int
        """
        return _BOPTools.BOPTools_AlgoTools3D_PointInFace(*args)

    PointInFace = staticmethod(PointInFace)

    def PointNearEdge(*args) -> "Standard_Integer":
        """
        * Compute the point <aPx>, (<aP2D>) that is near to the edge <aE> at parameter <aT> towards to the material of the face <aF>. The value of shifting in 2D is <aDt2D> If the value of shifting is too big the point will be computed using Hatcher (PointInFace function). Returns error status: 0 - in case of success; 1 - <aE> does not have 2d curve on the face <aF>; 2 - the computed point is out of the face.
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aT:
        	:type aT: float
        	:param aDt2D:
        	:type aDt2D: float
        	:param aP2D:
        	:type aP2D: gp_Pnt2d
        	:param aPx:
        	:type aPx: gp_Pnt
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: int
        * Compute the point <aPx>, (<aP2D>) that is near to the edge <aE> at parameter <aT> towards to the material of the face <aF>. The value of shifting in 2D is <aDt2D>. No checks on this value will be done. Returns error status: 0 - in case of success; 1 - <aE> does not have 2d curve on the face <aF>.
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aT:
        	:type aT: float
        	:param aDt2D:
        	:type aDt2D: float
        	:param aP2D:
        	:type aP2D: gp_Pnt2d
        	:param aPx:
        	:type aPx: gp_Pnt
        	:rtype: int
        * Computes the point <aPx>, (<aP2D>) that is near to the edge <aE> at parameter <aT> towards to the material of the face <aF>. The value of shifting in 2D is dt2D=BOPTools_AlgoTools3D::MinStepIn2d() If the value of shifting is too big the point will be computed using Hatcher (PointInFace function). Returns error status: 0 - in case of success; 1 - <aE> does not have 2d curve on the face <aF>; 2 - the computed point is out of the face.
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aT:
        	:type aT: float
        	:param aP2D:
        	:type aP2D: gp_Pnt2d
        	:param aPx:
        	:type aPx: gp_Pnt
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: int
        * Compute the point <aPx>, (<aP2D>) that is near to the edge <aE> at arbitrary parameter towards to the material of the face <aF>. The value of shifting in 2D is dt2D=BOPTools_AlgoTools3D::MinStepIn2d(). If the value of shifting is too big the point will be computed using Hatcher (PointInFace function). Returns error status: 0 - in case of success; 1 - <aE> does not have 2d curve on the face <aF>; 2 - the computed point is out of the face.
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aP2D:
        	:type aP2D: gp_Pnt2d
        	:param aPx:
        	:type aPx: gp_Pnt
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: int
        """
        return _BOPTools.BOPTools_AlgoTools3D_PointNearEdge(*args)

    PointNearEdge = staticmethod(PointNearEdge)

    def SenseFlag(*args) -> "Standard_Integer":
        """
        * Returns 1 if scalar product aNF1* aNF2>0. Returns 0 if directions aNF1 aNF2 coincide Returns -1 if scalar product aNF1* aNF2<0.
        	:param aNF1:
        	:type aNF1: gp_Dir
        	:param aNF2:
        	:type aNF2: gp_Dir
        	:rtype: int
        """
        return _BOPTools.BOPTools_AlgoTools3D_SenseFlag(*args)

    SenseFlag = staticmethod(SenseFlag)

    __repr__ = _dumps_object


    def __init__(self):
        _BOPTools.BOPTools_AlgoTools3D_swiginit(self, _BOPTools.new_BOPTools_AlgoTools3D())
    __swig_destroy__ = _BOPTools.delete_BOPTools_AlgoTools3D
BOPTools_AlgoTools3D_swigregister = _BOPTools.BOPTools_AlgoTools3D_swigregister
BOPTools_AlgoTools3D_swigregister(BOPTools_AlgoTools3D)

def BOPTools_AlgoTools3D_DoSplitSEAMOnFace(*args) -> "void":
    """
    * Make the edge <aSp> seam edge for the face <aF>
    	:param aSp:
    	:type aSp: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools3D_DoSplitSEAMOnFace(*args)

def BOPTools_AlgoTools3D_GetApproxNormalToFaceOnEdge(*args) -> "Standard_Boolean":
    """
    * Computes normal to the face <aF> for the 3D-point that belongs to the edge <aE> at parameter <aT>. Output: aPx - the 3D-point where the normal computed aD - the normal; Warning: The normal is computed not exactly in the point on the edge, but in point that is near to the edge towards to the face material (so, we'll have approx. normal); The point is computed using PointNearEdge function, with the shifting value BOPTools_AlgoTools3D::MinStepIn2d(), from the edge, but if this value is too big, the point will be computed using Hatcher (PointInFace function). Returns True in case of success.
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aT:
    	:type aT: float
    	:param aPx:
    	:type aPx: gp_Pnt
    	:param aD:
    	:type aD: gp_Dir
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: bool
    * Computes normal to the face <aF> for the 3D-point that belongs to the edge <aE> at parameter <aT>. Output: aPx - the 3D-point where the normal computed aD - the normal; Warning: The normal is computed not exactly in the point on the edge, but in point that is near to the edge towards to the face material (so, we'll have approx. normal); The point is computed using PointNearEdge function with the shifting value <aDt2D> from the edge; No checks on this value will be done. Returns True in case of success.
    	:param theE:
    	:type theE: TopoDS_Edge
    	:param theF:
    	:type theF: TopoDS_Face
    	:param aT:
    	:type aT: float
    	:param aP:
    	:type aP: gp_Pnt
    	:param aDNF:
    	:type aDNF: gp_Dir
    	:param aDt2D:
    	:type aDt2D: float
    	:rtype: bool
    * Computes normal to the face <aF> for the 3D-point that belongs to the edge <aE> at parameter <aT>. Output: aPx - the 3D-point where the normal computed aD - the normal; Warning: The normal is computed not exactly in the point on the edge, but in point that is near to the edge towards to the face material (so, we'll have approx. normal); The point is computed using PointNearEdge function with the shifting value <aDt2D> from the edge, but if this value is too big the point will be computed using Hatcher (PointInFace function). Returns True in case of success.
    	:param theE:
    	:type theE: TopoDS_Edge
    	:param theF:
    	:type theF: TopoDS_Face
    	:param aT:
    	:type aT: float
    	:param aDt2D:
    	:type aDt2D: float
    	:param aP:
    	:type aP: gp_Pnt
    	:param aDNF:
    	:type aDNF: gp_Dir
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools3D_GetApproxNormalToFaceOnEdge(*args)

def BOPTools_AlgoTools3D_GetNormalToFaceOnEdge(*args) -> "void":
    """
    * Computes normal to the face <aF> for the point on the edge <aE> at parameter <aT>. <theContext> - storage for caching the geometrical tools
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aT:
    	:type aT: float
    	:param aD:
    	:type aD: gp_Dir
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    * Computes normal to the face <aF> for the point on the edge <aE> at arbitrary intermediate parameter. <theContext> - storage for caching the geometrical tools
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aD:
    	:type aD: gp_Dir
    	:param theContext: default value is opencascade::handle<IntTools_Context>()
    	:type theContext: IntTools_Context
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools3D_GetNormalToFaceOnEdge(*args)

def BOPTools_AlgoTools3D_GetNormalToSurface(*args) -> "Standard_Boolean":
    """
    * Compute normal <aD> to surface <aS> in point (U,V) Returns True if directions aD1U, aD1V coincide
    	:param aS:
    	:type aS: Geom_Surface
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:param aD:
    	:type aD: gp_Dir
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools3D_GetNormalToSurface(*args)

def BOPTools_AlgoTools3D_IsEmptyShape(*args) -> "Standard_Boolean":
    """
    * Returns True if the shape <aS> does not contain geometry information (e.g. empty compound)
    	:param aS:
    	:type aS: TopoDS_Shape
    	:rtype: bool
    """
    return _BOPTools.BOPTools_AlgoTools3D_IsEmptyShape(*args)

def BOPTools_AlgoTools3D_MinStepIn2d(*args) -> "Standard_Real":
    """
    * Returns simple step value that is used in 2D-computations = 1.e-5
    	:rtype: float
    """
    return _BOPTools.BOPTools_AlgoTools3D_MinStepIn2d(*args)

def BOPTools_AlgoTools3D_OrientEdgeOnFace(*args) -> "void":
    """
    * Get the edge <aER> from the face <aF> that is the same as the edge <aE>
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aER:
    	:type aER: TopoDS_Edge
    	:rtype: void
    """
    return _BOPTools.BOPTools_AlgoTools3D_OrientEdgeOnFace(*args)

def BOPTools_AlgoTools3D_PointInFace(*args) -> "Standard_Integer":
    """
    * Computes arbitrary point <theP> inside the face <theF>. <theP2D> - 2D representation of <theP> on the surface of <theF> Returns 0 in case of success.
    	:param theF:
    	:type theF: TopoDS_Face
    	:param theP:
    	:type theP: gp_Pnt
    	:param theP2D:
    	:type theP2D: gp_Pnt2d
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: int
    * Computes a point <theP> inside the face <theF> using starting point taken by the parameter <theT> from the 2d curve of the edge <theE> on the face <theF> in the direction perpendicular to the tangent vector of the 2d curve of the edge. The point will be distanced on <theDt2D> from the 2d curve. <theP2D> - 2D representation of <theP> on the surface of <theF> Returns 0 in case of success.
    	:param theF:
    	:type theF: TopoDS_Face
    	:param theE:
    	:type theE: TopoDS_Edge
    	:param theT:
    	:type theT: float
    	:param theDt2D:
    	:type theDt2D: float
    	:param theP:
    	:type theP: gp_Pnt
    	:param theP2D:
    	:type theP2D: gp_Pnt2d
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: int
    * Computes a point <theP> inside the face <theF> using the line <theL> so that 2D point <theP2D>, 2D representation of <theP> on the surface of <theF>, lies on that line. Returns 0 in case of success.
    	:param theF:
    	:type theF: TopoDS_Face
    	:param theL:
    	:type theL: Geom2d_Curve
    	:param theP:
    	:type theP: gp_Pnt
    	:param theP2D:
    	:type theP2D: gp_Pnt2d
    	:param theContext:
    	:type theContext: IntTools_Context
    	:param theDt2D: default value is 0.0
    	:type theDt2D: float
    	:rtype: int
    """
    return _BOPTools.BOPTools_AlgoTools3D_PointInFace(*args)

def BOPTools_AlgoTools3D_PointNearEdge(*args) -> "Standard_Integer":
    """
    * Compute the point <aPx>, (<aP2D>) that is near to the edge <aE> at parameter <aT> towards to the material of the face <aF>. The value of shifting in 2D is <aDt2D> If the value of shifting is too big the point will be computed using Hatcher (PointInFace function). Returns error status: 0 - in case of success; 1 - <aE> does not have 2d curve on the face <aF>; 2 - the computed point is out of the face.
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aT:
    	:type aT: float
    	:param aDt2D:
    	:type aDt2D: float
    	:param aP2D:
    	:type aP2D: gp_Pnt2d
    	:param aPx:
    	:type aPx: gp_Pnt
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: int
    * Compute the point <aPx>, (<aP2D>) that is near to the edge <aE> at parameter <aT> towards to the material of the face <aF>. The value of shifting in 2D is <aDt2D>. No checks on this value will be done. Returns error status: 0 - in case of success; 1 - <aE> does not have 2d curve on the face <aF>.
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aT:
    	:type aT: float
    	:param aDt2D:
    	:type aDt2D: float
    	:param aP2D:
    	:type aP2D: gp_Pnt2d
    	:param aPx:
    	:type aPx: gp_Pnt
    	:rtype: int
    * Computes the point <aPx>, (<aP2D>) that is near to the edge <aE> at parameter <aT> towards to the material of the face <aF>. The value of shifting in 2D is dt2D=BOPTools_AlgoTools3D::MinStepIn2d() If the value of shifting is too big the point will be computed using Hatcher (PointInFace function). Returns error status: 0 - in case of success; 1 - <aE> does not have 2d curve on the face <aF>; 2 - the computed point is out of the face.
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aT:
    	:type aT: float
    	:param aP2D:
    	:type aP2D: gp_Pnt2d
    	:param aPx:
    	:type aPx: gp_Pnt
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: int
    * Compute the point <aPx>, (<aP2D>) that is near to the edge <aE> at arbitrary parameter towards to the material of the face <aF>. The value of shifting in 2D is dt2D=BOPTools_AlgoTools3D::MinStepIn2d(). If the value of shifting is too big the point will be computed using Hatcher (PointInFace function). Returns error status: 0 - in case of success; 1 - <aE> does not have 2d curve on the face <aF>; 2 - the computed point is out of the face.
    	:param aE:
    	:type aE: TopoDS_Edge
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aP2D:
    	:type aP2D: gp_Pnt2d
    	:param aPx:
    	:type aPx: gp_Pnt
    	:param theContext:
    	:type theContext: IntTools_Context
    	:rtype: int
    """
    return _BOPTools.BOPTools_AlgoTools3D_PointNearEdge(*args)

def BOPTools_AlgoTools3D_SenseFlag(*args) -> "Standard_Integer":
    """
    * Returns 1 if scalar product aNF1* aNF2>0. Returns 0 if directions aNF1 aNF2 coincide Returns -1 if scalar product aNF1* aNF2<0.
    	:param aNF1:
    	:type aNF1: gp_Dir
    	:param aNF2:
    	:type aNF2: gp_Dir
    	:rtype: int
    """
    return _BOPTools.BOPTools_AlgoTools3D_SenseFlag(*args)

class BOPTools_ConnexityBlock(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPTools.BOPTools_ConnexityBlock_swiginit(self, _BOPTools.new_BOPTools_ConnexityBlock(*args))

    def ChangeLoops(self, *args) -> "TopTools_ListOfShape &":
        """:rtype: TopTools_ListOfShape"""
        return _BOPTools.BOPTools_ConnexityBlock_ChangeLoops(self, *args)


    def ChangeShapes(self, *args) -> "TopTools_ListOfShape &":
        """:rtype: TopTools_ListOfShape"""
        return _BOPTools.BOPTools_ConnexityBlock_ChangeShapes(self, *args)


    def IsRegular(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BOPTools.BOPTools_ConnexityBlock_IsRegular(self, *args)


    def Loops(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _BOPTools.BOPTools_ConnexityBlock_Loops(self, *args)


    def SetRegular(self, *args) -> "void":
        """
        :param theFlag:
        	:type theFlag: bool
        	:rtype: None
        """
        return _BOPTools.BOPTools_ConnexityBlock_SetRegular(self, *args)


    def Shapes(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _BOPTools.BOPTools_ConnexityBlock_Shapes(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPTools.delete_BOPTools_ConnexityBlock
BOPTools_ConnexityBlock.ChangeLoops = new_instancemethod(_BOPTools.BOPTools_ConnexityBlock_ChangeLoops, None, BOPTools_ConnexityBlock)
BOPTools_ConnexityBlock.ChangeShapes = new_instancemethod(_BOPTools.BOPTools_ConnexityBlock_ChangeShapes, None, BOPTools_ConnexityBlock)
BOPTools_ConnexityBlock.IsRegular = new_instancemethod(_BOPTools.BOPTools_ConnexityBlock_IsRegular, None, BOPTools_ConnexityBlock)
BOPTools_ConnexityBlock.Loops = new_instancemethod(_BOPTools.BOPTools_ConnexityBlock_Loops, None, BOPTools_ConnexityBlock)
BOPTools_ConnexityBlock.SetRegular = new_instancemethod(_BOPTools.BOPTools_ConnexityBlock_SetRegular, None, BOPTools_ConnexityBlock)
BOPTools_ConnexityBlock.Shapes = new_instancemethod(_BOPTools.BOPTools_ConnexityBlock_Shapes, None, BOPTools_ConnexityBlock)
BOPTools_ConnexityBlock_swigregister = _BOPTools.BOPTools_ConnexityBlock_swigregister
BOPTools_ConnexityBlock_swigregister(BOPTools_ConnexityBlock)

class BOPTools_CoupleOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _BOPTools.BOPTools_CoupleOfShape_swiginit(self, _BOPTools.new_BOPTools_CoupleOfShape(*args))

    def SetShape1(self, *args) -> "void":
        """
        :param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        return _BOPTools.BOPTools_CoupleOfShape_SetShape1(self, *args)


    def SetShape2(self, *args) -> "void":
        """
        :param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        return _BOPTools.BOPTools_CoupleOfShape_SetShape2(self, *args)


    def Shape1(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BOPTools.BOPTools_CoupleOfShape_Shape1(self, *args)


    def Shape2(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BOPTools.BOPTools_CoupleOfShape_Shape2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPTools.delete_BOPTools_CoupleOfShape
BOPTools_CoupleOfShape.SetShape1 = new_instancemethod(_BOPTools.BOPTools_CoupleOfShape_SetShape1, None, BOPTools_CoupleOfShape)
BOPTools_CoupleOfShape.SetShape2 = new_instancemethod(_BOPTools.BOPTools_CoupleOfShape_SetShape2, None, BOPTools_CoupleOfShape)
BOPTools_CoupleOfShape.Shape1 = new_instancemethod(_BOPTools.BOPTools_CoupleOfShape_Shape1, None, BOPTools_CoupleOfShape)
BOPTools_CoupleOfShape.Shape2 = new_instancemethod(_BOPTools.BOPTools_CoupleOfShape_Shape2, None, BOPTools_CoupleOfShape)
BOPTools_CoupleOfShape_swigregister = _BOPTools.BOPTools_CoupleOfShape_swigregister
BOPTools_CoupleOfShape_swigregister(BOPTools_CoupleOfShape)

class BOPTools_Set(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        :param theS:
        	:type theS: TopoDS_Shape
        	:param theType:
        	:type theType: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _BOPTools.BOPTools_Set_Add(self, *args)


    def Assign(self, *args) -> "BOPTools_Set &":
        """
        :param Other:
        	:type Other: BOPTools_Set
        	:rtype: BOPTools_Set
        """
        return _BOPTools.BOPTools_Set_Assign(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _BOPTools.BOPTools_Set_swiginit(self, _BOPTools.new_BOPTools_Set(*args))

    def HashCode(self, *args) -> "Standard_Integer":
        """
        * Computes a hash code for this set, in the range [1, theUpperBound] @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _BOPTools.BOPTools_Set_HashCode(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        :param aOther:
        	:type aOther: BOPTools_Set
        	:rtype: bool
        """
        return _BOPTools.BOPTools_Set_IsEqual(self, *args)


    def NbShapes(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _BOPTools.BOPTools_Set_NbShapes(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BOPTools.BOPTools_Set_Shape(self, *args)


    def Set(self, *args) -> "BOPTools_Set &":
        """
        :param Other:
        	:type Other: BOPTools_Set
        	:rtype: BOPTools_Set
        """
        return _BOPTools.BOPTools_Set_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPTools.delete_BOPTools_Set
BOPTools_Set.Add = new_instancemethod(_BOPTools.BOPTools_Set_Add, None, BOPTools_Set)
BOPTools_Set.Assign = new_instancemethod(_BOPTools.BOPTools_Set_Assign, None, BOPTools_Set)
BOPTools_Set.HashCode = new_instancemethod(_BOPTools.BOPTools_Set_HashCode, None, BOPTools_Set)
BOPTools_Set.__hash__ = new_instancemethod(_BOPTools.BOPTools_Set___hash__, None, BOPTools_Set)
BOPTools_Set.IsEqual = new_instancemethod(_BOPTools.BOPTools_Set_IsEqual, None, BOPTools_Set)
BOPTools_Set.NbShapes = new_instancemethod(_BOPTools.BOPTools_Set_NbShapes, None, BOPTools_Set)
BOPTools_Set.Shape = new_instancemethod(_BOPTools.BOPTools_Set_Shape, None, BOPTools_Set)
BOPTools_Set.Set = new_instancemethod(_BOPTools.BOPTools_Set_Set, None, BOPTools_Set)
BOPTools_Set_swigregister = _BOPTools.BOPTools_Set_swigregister
BOPTools_Set_swigregister(BOPTools_Set)

class BOPTools_SetMapHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        * Computes a hash code for the given set, in the range [1, theUpperBound] @param theSet the set which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param theSet:
        	:type theSet: BOPTools_Set
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _BOPTools.BOPTools_SetMapHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        :param aSet1:
        	:type aSet1: BOPTools_Set
        	:param aSet2:
        	:type aSet2: BOPTools_Set
        	:rtype: bool
        """
        return _BOPTools.BOPTools_SetMapHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _BOPTools.BOPTools_SetMapHasher_swiginit(self, _BOPTools.new_BOPTools_SetMapHasher())
    __swig_destroy__ = _BOPTools.delete_BOPTools_SetMapHasher
BOPTools_SetMapHasher_swigregister = _BOPTools.BOPTools_SetMapHasher_swigregister
BOPTools_SetMapHasher_swigregister(BOPTools_SetMapHasher)

def BOPTools_SetMapHasher_HashCode(*args) -> "Standard_Integer":
    """
    * Computes a hash code for the given set, in the range [1, theUpperBound] @param theSet the set which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
    	:param theSet:
    	:type theSet: BOPTools_Set
    	:param theUpperBound:
    	:type theUpperBound: int
    	:rtype: int
    """
    return _BOPTools.BOPTools_SetMapHasher_HashCode(*args)

def BOPTools_SetMapHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    :param aSet1:
    	:type aSet1: BOPTools_Set
    	:param aSet2:
    	:type aSet2: BOPTools_Set
    	:rtype: bool
    """
    return _BOPTools.BOPTools_SetMapHasher_IsEqual(*args)



