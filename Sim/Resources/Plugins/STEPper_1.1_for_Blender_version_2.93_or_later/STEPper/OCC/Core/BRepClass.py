# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepClass module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepclass.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepClass.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepClass')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepClass')
    _BRepClass = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepClass', [dirname(__file__)])
        except ImportError:
            import _BRepClass
            return _BRepClass
        try:
            _mod = imp.load_module('_BRepClass', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepClass = swig_import_helper()
    del swig_import_helper
else:
    import _BRepClass
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepClass.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepClass.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepClass.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepClass.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepClass.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepClass.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepClass.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepClass.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepClass.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepClass.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepClass.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepClass.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepClass.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepClass.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepClass.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepClass.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepClass.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepClass.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepClass.process_exception(error, method_name, class_name)
process_exception = _BRepClass.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.IntRes2d
import OCC.Core.Geom2dInt
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.math
import OCC.Core.IntCurve
import OCC.Core.Extrema
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAdaptor
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
class BRepClass_Edge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _BRepClass.BRepClass_Edge_swiginit(self, _BRepClass.new_BRepClass_Edge(*args))

    def Edge(self, *args) -> "TopoDS_Edge":
        """:rtype: TopoDS_Edge"""
        return _BRepClass.BRepClass_Edge_Edge(self, *args)


    def Face(self, *args) -> "TopoDS_Face":
        """:rtype: TopoDS_Face"""
        return _BRepClass.BRepClass_Edge_Face(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepClass.delete_BRepClass_Edge
BRepClass_Edge.Edge = new_instancemethod(_BRepClass.BRepClass_Edge_Edge, None, BRepClass_Edge)
BRepClass_Edge.Face = new_instancemethod(_BRepClass.BRepClass_Edge_Face, None, BRepClass_Edge)
BRepClass_Edge_swigregister = _BRepClass.BRepClass_Edge_swigregister
BRepClass_Edge_swigregister(BRepClass_Edge)

class BRepClass_FClass2dOfFClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an undefined classifier.
        	:rtype: None
        """
        _BRepClass.BRepClass_FClass2dOfFClassifier_swiginit(self, _BRepClass.new_BRepClass_FClass2dOfFClassifier(*args))

    def ClosestIntersection(self, *args) -> "Standard_Integer":
        """
        * Returns 0 if the last compared edge had no relevant intersection. Else returns the index of this intersection in the last intersection algorithm.
        	:rtype: int
        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_ClosestIntersection(self, *args)


    def Compare(self, *args) -> "void":
        """
        * Updates the classification process with the edge <E> from the boundary.
        	:param E:
        	:type E: BRepClass_Edge
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:rtype: None
        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_Compare(self, *args)


    def Intersector(self, *args) -> "BRepClass_Intersector &":
        """
        * Returns the intersecting algorithm.
        	:rtype: BRepClass_Intersector
        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_Intersector(self, *args)


    def IsHeadOrEnd(self, *args) -> "Standard_Boolean":
        """
        * Returns the Standard_True if the closest intersection point represents head or end of the edge. Returns Standard_False otherwise.
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_IsHeadOrEnd(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the current value of the parameter.
        	:rtype: float
        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_Parameter(self, *args)


    def Reset(self, *args) -> "void":
        """
        * Starts a classification process. The point to classify is the origin of the line <L>. <P> is the original length of the segment on <L> used to compute intersections. <Tol> is the tolerance attached to the line segment in intersections.
        	:param L:
        	:type L: gp_Lin2d
        	:param P:
        	:type P: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_Reset(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        * Returns the current state of the point.
        	:rtype: TopAbs_State
        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_State(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepClass.delete_BRepClass_FClass2dOfFClassifier
BRepClass_FClass2dOfFClassifier.ClosestIntersection = new_instancemethod(_BRepClass.BRepClass_FClass2dOfFClassifier_ClosestIntersection, None, BRepClass_FClass2dOfFClassifier)
BRepClass_FClass2dOfFClassifier.Compare = new_instancemethod(_BRepClass.BRepClass_FClass2dOfFClassifier_Compare, None, BRepClass_FClass2dOfFClassifier)
BRepClass_FClass2dOfFClassifier.Intersector = new_instancemethod(_BRepClass.BRepClass_FClass2dOfFClassifier_Intersector, None, BRepClass_FClass2dOfFClassifier)
BRepClass_FClass2dOfFClassifier.IsHeadOrEnd = new_instancemethod(_BRepClass.BRepClass_FClass2dOfFClassifier_IsHeadOrEnd, None, BRepClass_FClass2dOfFClassifier)
BRepClass_FClass2dOfFClassifier.Parameter = new_instancemethod(_BRepClass.BRepClass_FClass2dOfFClassifier_Parameter, None, BRepClass_FClass2dOfFClassifier)
BRepClass_FClass2dOfFClassifier.Reset = new_instancemethod(_BRepClass.BRepClass_FClass2dOfFClassifier_Reset, None, BRepClass_FClass2dOfFClassifier)
BRepClass_FClass2dOfFClassifier.State = new_instancemethod(_BRepClass.BRepClass_FClass2dOfFClassifier_State, None, BRepClass_FClass2dOfFClassifier)
BRepClass_FClass2dOfFClassifier_swigregister = _BRepClass.BRepClass_FClass2dOfFClassifier_swigregister
BRepClass_FClass2dOfFClassifier_swigregister(BRepClass_FClass2dOfFClassifier)

class BRepClass_FClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor, undefined algorithm.
        	:rtype: None
        * Creates an algorithm to classify the Point P with Tolerance <T> on the face described by <F>.
        	:param F:
        	:type F: BRepClass_FaceExplorer
        	:param P:
        	:type P: gp_Pnt2d
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _BRepClass.BRepClass_FClassifier_swiginit(self, _BRepClass.new_BRepClass_FClassifier(*args))

    def Edge(self, *args) -> "BRepClass_Edge const &":
        """
        * Returns the Edge used to determine the classification. When the State is ON this is the Edge containing the point.
        	:rtype: BRepClass_Edge
        """
        return _BRepClass.BRepClass_FClassifier_Edge(self, *args)


    def EdgeParameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on Edge() used to determine the classification.
        	:rtype: float
        """
        return _BRepClass.BRepClass_FClassifier_EdgeParameter(self, *args)


    def NoWires(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the face contains no wire. The state is IN.
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FClassifier_NoWires(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Classify the Point P with Tolerance <T> on the face described by <F>.
        	:param F:
        	:type F: BRepClass_FaceExplorer
        	:param P:
        	:type P: gp_Pnt2d
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _BRepClass.BRepClass_FClassifier_Perform(self, *args)


    def Position(self, *args) -> "IntRes2d_Position":
        """
        * Returns the position of the point on the edge returned by Edge.
        	:rtype: IntRes2d_Position
        """
        return _BRepClass.BRepClass_FClassifier_Position(self, *args)


    def Rejected(self, *args) -> "Standard_Boolean":
        """
        * Returns True when the state was computed by a rejection. The state is OUT.
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FClassifier_Rejected(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        * Returns the result of the classification.
        	:rtype: TopAbs_State
        """
        return _BRepClass.BRepClass_FClassifier_State(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepClass.delete_BRepClass_FClassifier
BRepClass_FClassifier.Edge = new_instancemethod(_BRepClass.BRepClass_FClassifier_Edge, None, BRepClass_FClassifier)
BRepClass_FClassifier.EdgeParameter = new_instancemethod(_BRepClass.BRepClass_FClassifier_EdgeParameter, None, BRepClass_FClassifier)
BRepClass_FClassifier.NoWires = new_instancemethod(_BRepClass.BRepClass_FClassifier_NoWires, None, BRepClass_FClassifier)
BRepClass_FClassifier.Perform = new_instancemethod(_BRepClass.BRepClass_FClassifier_Perform, None, BRepClass_FClassifier)
BRepClass_FClassifier.Position = new_instancemethod(_BRepClass.BRepClass_FClassifier_Position, None, BRepClass_FClassifier)
BRepClass_FClassifier.Rejected = new_instancemethod(_BRepClass.BRepClass_FClassifier_Rejected, None, BRepClass_FClassifier)
BRepClass_FClassifier.State = new_instancemethod(_BRepClass.BRepClass_FClassifier_State, None, BRepClass_FClassifier)
BRepClass_FClassifier_swigregister = _BRepClass.BRepClass_FClassifier_swigregister
BRepClass_FClassifier_swigregister(BRepClass_FClassifier)

class BRepClass_FaceExplorer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _BRepClass.BRepClass_FaceExplorer_swiginit(self, _BRepClass.new_BRepClass_FaceExplorer(*args))

    def CheckPoint(self, *args) -> "Standard_Boolean":
        """
        * Checks the point and change its coords if it is located too far from the bounding box of the face. New Coordinates of the point will be on the line between the point and the center of the bounding box. Returns True if point was not changed.
        	:param thePoint:
        	:type thePoint: gp_Pnt2d
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FaceExplorer_CheckPoint(self, *args)


    def CurrentEdge(self, *args) -> "void":
        """
        * Current edge in current wire and its orientation.
        	:param E:
        	:type E: BRepClass_Edge
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:rtype: None
        """
        return _BRepClass.BRepClass_FaceExplorer_CurrentEdge(self, *args)


    def InitEdges(self, *args) -> "void":
        """
        * Starts an exploration of the edges of the current wire.
        	:rtype: None
        """
        return _BRepClass.BRepClass_FaceExplorer_InitEdges(self, *args)


    def InitWires(self, *args) -> "void":
        """
        * Starts an exploration of the wires.
        	:rtype: None
        """
        return _BRepClass.BRepClass_FaceExplorer_InitWires(self, *args)


    def MoreEdges(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a current edge.
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FaceExplorer_MoreEdges(self, *args)


    def MoreWires(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a current wire.
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FaceExplorer_MoreWires(self, *args)


    def NextEdge(self, *args) -> "void":
        """
        * Sets the explorer to the next edge.
        	:rtype: None
        """
        return _BRepClass.BRepClass_FaceExplorer_NextEdge(self, *args)


    def NextWire(self, *args) -> "void":
        """
        * Sets the explorer to the next wire.
        	:rtype: None
        """
        return _BRepClass.BRepClass_FaceExplorer_NextWire(self, *args)


    def OtherSegment(self, *args) -> "Standard_Boolean":
        """
        * Returns in <L>, <Par> a segment having at least one intersection with the face boundary to compute intersections. Each call gives another segment.
        	:param P:
        	:type P: gp_Pnt2d
        	:param L:
        	:type L: gp_Lin2d
        	:param Par:
        	:type Par: float
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FaceExplorer_OtherSegment(self, *args)


    def Reject(self, *args) -> "Standard_Boolean":
        """
        * Should return True if the point is outside a bounding volume of the face.
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FaceExplorer_Reject(self, *args)


    def RejectEdge(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the edge bounding volume does not intersect the segment.
        	:param L:
        	:type L: gp_Lin2d
        	:param Par:
        	:type Par: float
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FaceExplorer_RejectEdge(self, *args)


    def RejectWire(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the wire bounding volume does not intersect the segment.
        	:param L:
        	:type L: gp_Lin2d
        	:param Par:
        	:type Par: float
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FaceExplorer_RejectWire(self, *args)


    def Segment(self, *args) -> "Standard_Boolean":
        """
        * Returns in <L>, <Par> a segment having at least one intersection with the face boundary to compute intersections.
        	:param P:
        	:type P: gp_Pnt2d
        	:param L:
        	:type L: gp_Lin2d
        	:param Par:
        	:type Par: float
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FaceExplorer_Segment(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepClass.delete_BRepClass_FaceExplorer
BRepClass_FaceExplorer.CheckPoint = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_CheckPoint, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.CurrentEdge = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_CurrentEdge, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.InitEdges = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_InitEdges, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.InitWires = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_InitWires, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.MoreEdges = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_MoreEdges, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.MoreWires = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_MoreWires, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.NextEdge = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_NextEdge, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.NextWire = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_NextWire, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.OtherSegment = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_OtherSegment, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.Reject = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_Reject, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.RejectEdge = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_RejectEdge, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.RejectWire = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_RejectWire, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer.Segment = new_instancemethod(_BRepClass.BRepClass_FaceExplorer_Segment, None, BRepClass_FaceExplorer)
BRepClass_FaceExplorer_swigregister = _BRepClass.BRepClass_FaceExplorer_swigregister
BRepClass_FaceExplorer_swigregister(BRepClass_FaceExplorer)

class BRepClass_FacePassiveClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an undefined classifier.
        	:rtype: None
        """
        _BRepClass.BRepClass_FacePassiveClassifier_swiginit(self, _BRepClass.new_BRepClass_FacePassiveClassifier(*args))

    def ClosestIntersection(self, *args) -> "Standard_Integer":
        """
        * Returns 0 if the last compared edge had no relevant intersection. Else returns the index of this intersection in the last intersection algorithm.
        	:rtype: int
        """
        return _BRepClass.BRepClass_FacePassiveClassifier_ClosestIntersection(self, *args)


    def Compare(self, *args) -> "void":
        """
        * Updates the classification process with the edge <E> from the boundary.
        	:param E:
        	:type E: BRepClass_Edge
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:rtype: None
        """
        return _BRepClass.BRepClass_FacePassiveClassifier_Compare(self, *args)


    def Intersector(self, *args) -> "BRepClass_Intersector &":
        """
        * Returns the intersecting algorithm.
        	:rtype: BRepClass_Intersector
        """
        return _BRepClass.BRepClass_FacePassiveClassifier_Intersector(self, *args)


    def IsHeadOrEnd(self, *args) -> "Standard_Boolean":
        """
        * Returns the Standard_True if the closest intersection point represents head or end of the edge. Returns Standard_False otherwise.
        	:rtype: bool
        """
        return _BRepClass.BRepClass_FacePassiveClassifier_IsHeadOrEnd(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the current value of the parameter.
        	:rtype: float
        """
        return _BRepClass.BRepClass_FacePassiveClassifier_Parameter(self, *args)


    def Reset(self, *args) -> "void":
        """
        * Starts a classification process. The point to classify is the origin of the line <L>. <P> is the original length of the segment on <L> used to compute intersections. <Tol> is the tolerance attached to the line segment in intersections.
        	:param L:
        	:type L: gp_Lin2d
        	:param P:
        	:type P: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _BRepClass.BRepClass_FacePassiveClassifier_Reset(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        * Returns the current state of the point.
        	:rtype: TopAbs_State
        """
        return _BRepClass.BRepClass_FacePassiveClassifier_State(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepClass.delete_BRepClass_FacePassiveClassifier
BRepClass_FacePassiveClassifier.ClosestIntersection = new_instancemethod(_BRepClass.BRepClass_FacePassiveClassifier_ClosestIntersection, None, BRepClass_FacePassiveClassifier)
BRepClass_FacePassiveClassifier.Compare = new_instancemethod(_BRepClass.BRepClass_FacePassiveClassifier_Compare, None, BRepClass_FacePassiveClassifier)
BRepClass_FacePassiveClassifier.Intersector = new_instancemethod(_BRepClass.BRepClass_FacePassiveClassifier_Intersector, None, BRepClass_FacePassiveClassifier)
BRepClass_FacePassiveClassifier.IsHeadOrEnd = new_instancemethod(_BRepClass.BRepClass_FacePassiveClassifier_IsHeadOrEnd, None, BRepClass_FacePassiveClassifier)
BRepClass_FacePassiveClassifier.Parameter = new_instancemethod(_BRepClass.BRepClass_FacePassiveClassifier_Parameter, None, BRepClass_FacePassiveClassifier)
BRepClass_FacePassiveClassifier.Reset = new_instancemethod(_BRepClass.BRepClass_FacePassiveClassifier_Reset, None, BRepClass_FacePassiveClassifier)
BRepClass_FacePassiveClassifier.State = new_instancemethod(_BRepClass.BRepClass_FacePassiveClassifier_State, None, BRepClass_FacePassiveClassifier)
BRepClass_FacePassiveClassifier_swigregister = _BRepClass.BRepClass_FacePassiveClassifier_swigregister
BRepClass_FacePassiveClassifier_swigregister(BRepClass_FacePassiveClassifier)

class BRepClass_Intersector(OCC.Core.Geom2dInt.Geom2dInt_IntConicCurveOfGInter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _BRepClass.BRepClass_Intersector_swiginit(self, _BRepClass.new_BRepClass_Intersector(*args))

    def LocalGeometry(self, *args) -> "void":
        """
        * Returns in <T>, <N> and <C> the tangent, normal and curvature of the edge <E> at parameter value <U>.
        	:param E:
        	:type E: BRepClass_Edge
        	:param U:
        	:type U: float
        	:param T:
        	:type T: gp_Dir2d
        	:param N:
        	:type N: gp_Dir2d
        	:param C:
        	:type C: float
        	:rtype: None
        """
        return _BRepClass.BRepClass_Intersector_LocalGeometry(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Intersect the line segment and the edge.
        	:param L:
        	:type L: gp_Lin2d
        	:param P:
        	:type P: float
        	:param Tol:
        	:type Tol: float
        	:param E:
        	:type E: BRepClass_Edge
        	:rtype: None
        """
        return _BRepClass.BRepClass_Intersector_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepClass.delete_BRepClass_Intersector
BRepClass_Intersector.LocalGeometry = new_instancemethod(_BRepClass.BRepClass_Intersector_LocalGeometry, None, BRepClass_Intersector)
BRepClass_Intersector.Perform = new_instancemethod(_BRepClass.BRepClass_Intersector_Perform, None, BRepClass_Intersector)
BRepClass_Intersector_swigregister = _BRepClass.BRepClass_Intersector_swigregister
BRepClass_Intersector_swigregister(BRepClass_Intersector)



