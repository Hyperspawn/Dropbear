# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepExtrema module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepextrema.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepExtrema.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepExtrema')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepExtrema')
    _BRepExtrema = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepExtrema', [dirname(__file__)])
        except ImportError:
            import _BRepExtrema
            return _BRepExtrema
        try:
            _mod = imp.load_module('_BRepExtrema', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepExtrema = swig_import_helper()
    del swig_import_helper
else:
    import _BRepExtrema
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepExtrema.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepExtrema.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepExtrema.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepExtrema.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepExtrema.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepExtrema.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepExtrema.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepExtrema.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepExtrema.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepExtrema.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepExtrema.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepExtrema.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepExtrema.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepExtrema.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepExtrema.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepExtrema.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepExtrema.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepExtrema.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepExtrema.process_exception(error, method_name, class_name)
process_exception = _BRepExtrema.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Extrema
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.GeomAdaptor
import OCC.Core.Bnd
import OCC.Core.BVH
BRepExtrema_IsVertex = _BRepExtrema.BRepExtrema_IsVertex
BRepExtrema_IsOnEdge = _BRepExtrema.BRepExtrema_IsOnEdge
BRepExtrema_IsInFace = _BRepExtrema.BRepExtrema_IsInFace

def Handle_BRepExtrema_TriangleSet_Create() -> "opencascade::handle< BRepExtrema_TriangleSet >":
    return _BRepExtrema.Handle_BRepExtrema_TriangleSet_Create()
Handle_BRepExtrema_TriangleSet_Create = _BRepExtrema.Handle_BRepExtrema_TriangleSet_Create

def Handle_BRepExtrema_TriangleSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepExtrema_TriangleSet >":
    return _BRepExtrema.Handle_BRepExtrema_TriangleSet_DownCast(t)
Handle_BRepExtrema_TriangleSet_DownCast = _BRepExtrema.Handle_BRepExtrema_TriangleSet_DownCast

def Handle_BRepExtrema_TriangleSet_IsNull(t: 'opencascade::handle< BRepExtrema_TriangleSet > const &') -> "bool":
    return _BRepExtrema.Handle_BRepExtrema_TriangleSet_IsNull(t)
Handle_BRepExtrema_TriangleSet_IsNull = _BRepExtrema.Handle_BRepExtrema_TriangleSet_IsNull
class BRepExtrema_SeqOfSolution(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepExtrema.BRepExtrema_SeqOfSolution_swiginit(self, _BRepExtrema.new_BRepExtrema_SeqOfSolution(*args))
    delNode = staticmethod(_BRepExtrema.BRepExtrema_SeqOfSolution_delNode)
    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_SeqOfSolution
BRepExtrema_SeqOfSolution.begin = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_begin, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.end = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_end, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.cbegin = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_cbegin, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.cend = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_cend, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Size = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Size, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Length = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Length, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Lower = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Lower, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Upper = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Upper, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.IsEmpty = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_IsEmpty, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Reverse = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Reverse, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Exchange = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Exchange, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Clear = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Clear, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Assign = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Assign, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Set = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Set, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Remove = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Remove, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Append = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Append, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Prepend = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Prepend, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.InsertBefore = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_InsertBefore, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.InsertAfter = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_InsertAfter, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Split = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Split, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.First = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_First, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.ChangeFirst = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_ChangeFirst, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Last = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Last, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.ChangeLast = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_ChangeLast, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.Value = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_Value, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.ChangeValue = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_ChangeValue, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.__call__ = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution___call__, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution.SetValue = new_instancemethod(_BRepExtrema.BRepExtrema_SeqOfSolution_SetValue, None, BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution_swigregister = _BRepExtrema.BRepExtrema_SeqOfSolution_swigregister
BRepExtrema_SeqOfSolution_swigregister(BRepExtrema_SeqOfSolution)

def BRepExtrema_SeqOfSolution_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _BRepExtrema.BRepExtrema_SeqOfSolution_delNode(theNode, theAl)
BRepExtrema_SeqOfSolution_delNode = _BRepExtrema.BRepExtrema_SeqOfSolution_delNode

class BRepExtrema_ShapeList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepExtrema.BRepExtrema_ShapeList_swiginit(self, _BRepExtrema.new_BRepExtrema_ShapeList(*args))
    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ShapeList
BRepExtrema_ShapeList.begin = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_begin, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.end = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_end, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.cbegin = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_cbegin, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.cend = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_cend, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.Length = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_Length, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.Size = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_Size, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.Lower = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_Lower, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.Upper = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_Upper, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.IsEmpty = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_IsEmpty, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.Assign = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_Assign, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.Set = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_Set, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.Append = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_Append, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.Appended = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_Appended, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.Value = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_Value, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.First = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_First, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.ChangeFirst = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_ChangeFirst, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.Last = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_Last, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.ChangeLast = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_ChangeLast, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.__call__ = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList___call__, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.ChangeValue = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_ChangeValue, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList.SetValue = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeList_SetValue, None, BRepExtrema_ShapeList)
BRepExtrema_ShapeList_swigregister = _BRepExtrema.BRepExtrema_ShapeList_swigregister
BRepExtrema_ShapeList_swigregister(BRepExtrema_ShapeList)

class BRepExtrema_MapOfIntegerPackedMapOfInteger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_swiginit(self, _BRepExtrema.new_BRepExtrema_MapOfIntegerPackedMapOfInteger(*args))
    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_MapOfIntegerPackedMapOfInteger
BRepExtrema_MapOfIntegerPackedMapOfInteger.begin = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_begin, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.end = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_end, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.cbegin = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_cbegin, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.cend = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_cend, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.Exchange = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Exchange, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.Assign = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Assign, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.Set = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Set, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.ReSize = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_ReSize, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.Bind = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Bind, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.Bound = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Bound, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.IsBound = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_IsBound, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.UnBind = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_UnBind, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.Seek = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Seek, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.Find = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Find, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.ChangeSeek = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_ChangeSeek, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.ChangeFind = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_ChangeFind, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.__call__ = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger___call__, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.Clear = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Clear, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.Size = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Size, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger.Keys = new_instancemethod(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Keys, None, BRepExtrema_MapOfIntegerPackedMapOfInteger)
BRepExtrema_MapOfIntegerPackedMapOfInteger_swigregister = _BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_swigregister
BRepExtrema_MapOfIntegerPackedMapOfInteger_swigregister(BRepExtrema_MapOfIntegerPackedMapOfInteger)

class BRepExtrema_DistShapeShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * create empty tool
        	:rtype: None
        * computation of the minimum distance (value and pair of points) using default deflection Default value is Precision::Confusion().
        	:param Shape1:
        	:type Shape1: TopoDS_Shape
        	:param Shape2:
        	:type Shape2: TopoDS_Shape
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        * create tool and load both shapes into it
        	:param Shape1:
        	:type Shape1: TopoDS_Shape
        	:param Shape2:
        	:type Shape2: TopoDS_Shape
        	:param theDeflection:
        	:type theDeflection: float
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_DistShapeShape_swiginit(self, _BRepExtrema.new_BRepExtrema_DistShapeShape(*args))

    def DumpToString(self) -> "std::string":
        """DumpToString(BRepExtrema_DistShapeShape self) -> std::string"""
        return _BRepExtrema.BRepExtrema_DistShapeShape_DumpToString(self)


    def InnerSolution(self, *args) -> "Standard_Boolean":
        """
        * True if one of the shapes is a solid and the other shape is completely or partially inside the solid.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_InnerSolution(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the minimum distance is found.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_IsDone(self, *args)


    def LoadS1(self, *args) -> "void":
        """
        * load first shape into extrema
        	:param Shape1:
        	:type Shape1: TopoDS_Shape
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_LoadS1(self, *args)


    def LoadS2(self, *args) -> "void":
        """
        * load second shape into extrema
        	:param Shape1:
        	:type Shape1: TopoDS_Shape
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_LoadS2(self, *args)


    def NbSolution(self, *args) -> "Standard_Integer":
        """
        * Returns the number of solutions satisfying the minimum distance.
        	:rtype: int
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_NbSolution(self, *args)


    def ParOnEdgeS1(self, *args) -> "void":
        """
        * gives the corresponding parameter t if the Nth solution is situated on an Egde of the first shape
        	:param N:
        	:type N: int
        	:param t:
        	:type t: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_ParOnEdgeS1(self, *args)


    def ParOnEdgeS2(self, *args) -> "void":
        """
        * gives the corresponding parameter t if the Nth solution is situated on an Egde of the first shape
        	:param N:
        	:type N: int
        	:param t:
        	:type t: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_ParOnEdgeS2(self, *args)


    def ParOnFaceS1(self, *args) -> "void":
        """
        * gives the corresponding parameters (U,V) if the Nth solution is situated on an face of the first shape
        	:param N:
        	:type N: int
        	:param u:
        	:type u: float
        	:param v:
        	:type v: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_ParOnFaceS1(self, *args)


    def ParOnFaceS2(self, *args) -> "void":
        """
        * gives the corresponding parameters (U,V) if the Nth solution is situated on an Face of the second shape
        	:param N:
        	:type N: int
        	:param u:
        	:type u: float
        	:param v:
        	:type v: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_ParOnFaceS2(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        * computation of the minimum distance (value and couple of points). Parameter theDeflection is used to specify a maximum deviation of extreme distances from the minimum one. Returns IsDone status.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_Perform(self, *args)


    def PointOnShape1(self, *args) -> "gp_Pnt const":
        """
        * Returns the Point corresponding to the <N>th solution on the first Shape
        	:param N:
        	:type N: int
        	:rtype: gp_Pnt
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_PointOnShape1(self, *args)


    def PointOnShape2(self, *args) -> "gp_Pnt const":
        """
        * Returns the Point corresponding to the <N>th solution on the second Shape
        	:param N:
        	:type N: int
        	:rtype: gp_Pnt
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_PointOnShape2(self, *args)


    def SetAlgo(self, *args) -> "void":
        """
        :param A:
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SetAlgo(self, *args)


    def SetDeflection(self, *args) -> "void":
        """
        :param theDeflection:
        	:type theDeflection: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SetDeflection(self, *args)


    def SetFlag(self, *args) -> "void":
        """
        :param F:
        	:type F: Extrema_ExtFlag
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SetFlag(self, *args)


    def SupportOnShape1(self, *args) -> "TopoDS_Shape":
        """
        * gives the support where the Nth solution on the first shape is situated. This support can be a Vertex, an Edge or a Face.
        	:param N:
        	:type N: int
        	:rtype: TopoDS_Shape
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SupportOnShape1(self, *args)


    def SupportOnShape2(self, *args) -> "TopoDS_Shape":
        """
        * gives the support where the Nth solution on the second shape is situated. This support can be a Vertex, an Edge or a Face.
        	:param N:
        	:type N: int
        	:rtype: TopoDS_Shape
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SupportOnShape2(self, *args)


    def SupportTypeShape1(self, *args) -> "BRepExtrema_SupportType":
        """
        * gives the type of the support where the Nth solution on the first shape is situated: IsVertex => the Nth solution on the first shape is a Vertex IsOnEdge => the Nth soluion on the first shape is on a Edge IsInFace => the Nth solution on the first shape is inside a face the corresponding support is obtained by the method SupportOnShape1
        	:param N:
        	:type N: int
        	:rtype: BRepExtrema_SupportType
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SupportTypeShape1(self, *args)


    def SupportTypeShape2(self, *args) -> "BRepExtrema_SupportType":
        """
        * gives the type of the support where the Nth solution on the second shape is situated: IsVertex => the Nth solution on the second shape is a Vertex IsOnEdge => the Nth soluion on the secondt shape is on a Edge IsInFace => the Nth solution on the second shape is inside a face the corresponding support is obtained by the method SupportOnShape2
        	:param N:
        	:type N: int
        	:rtype: BRepExtrema_SupportType
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_SupportTypeShape2(self, *args)


    def Value(self, *args) -> "Standard_Real":
        """
        * Returns the value of the minimum distance.
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_DistShapeShape_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_DistShapeShape
BRepExtrema_DistShapeShape.DumpToString = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_DumpToString, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.InnerSolution = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_InnerSolution, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_IsDone, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.LoadS1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_LoadS1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.LoadS2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_LoadS2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.NbSolution = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_NbSolution, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.ParOnEdgeS1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnEdgeS1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.ParOnEdgeS2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnEdgeS2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.ParOnFaceS1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnFaceS1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.ParOnFaceS2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnFaceS2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_Perform, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.PointOnShape1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_PointOnShape1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.PointOnShape2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_PointOnShape2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SetAlgo = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SetAlgo, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SetDeflection = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SetDeflection, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SetFlag = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SetFlag, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SupportOnShape1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SupportOnShape1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SupportOnShape2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SupportOnShape2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SupportTypeShape1 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SupportTypeShape1, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.SupportTypeShape2 = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_SupportTypeShape2, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape.Value = new_instancemethod(_BRepExtrema.BRepExtrema_DistShapeShape_Value, None, BRepExtrema_DistShapeShape)
BRepExtrema_DistShapeShape_swigregister = _BRepExtrema.BRepExtrema_DistShapeShape_swigregister
BRepExtrema_DistShapeShape_swigregister(BRepExtrema_DistShapeShape)

class BRepExtrema_DistanceSS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * computes the distance between two Shapes ( face edge vertex).
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param B1:
        	:type B1: Bnd_Box
        	:param B2:
        	:type B2: Bnd_Box
        	:param DstRef:
        	:type DstRef: float
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        * computes the distance between two Shapes ( face edge vertex). Parameter theDeflection is used to specify a maximum deviation of extreme distances from the minimum one. Default value is Precision::Confusion().
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param B1:
        	:type B1: Bnd_Box
        	:param B2:
        	:type B2: Bnd_Box
        	:param DstRef:
        	:type DstRef: float
        	:param aDeflection:
        	:type aDeflection: float
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_DistanceSS_swiginit(self, _BRepExtrema.new_BRepExtrema_DistanceSS(*args))

    def DistValue(self, *args) -> "Standard_Real":
        """
        * returns the distance value
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_DistanceSS_DistValue(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distance has been computed
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_DistanceSS_IsDone(self, *args)


    def Seq1Value(self, *args) -> "BRepExtrema_SeqOfSolution const &":
        """
        * returns the list of solutions on the first shape
        	:rtype: BRepExtrema_SeqOfSolution
        """
        return _BRepExtrema.BRepExtrema_DistanceSS_Seq1Value(self, *args)


    def Seq2Value(self, *args) -> "BRepExtrema_SeqOfSolution const &":
        """
        * returns the list of solutions on the second shape
        	:rtype: BRepExtrema_SeqOfSolution
        """
        return _BRepExtrema.BRepExtrema_DistanceSS_Seq2Value(self, *args)


    def SetAlgo(self, *args) -> "void":
        """
        * sets the flag controlling ...
        	:param A:
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_DistanceSS_SetAlgo(self, *args)


    def SetFlag(self, *args) -> "void":
        """
        * sets the flag controlling minimum and maximum search
        	:param F:
        	:type F: Extrema_ExtFlag
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_DistanceSS_SetFlag(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_DistanceSS
BRepExtrema_DistanceSS.DistValue = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_DistValue, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_IsDone, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS.Seq1Value = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_Seq1Value, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS.Seq2Value = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_Seq2Value, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS.SetAlgo = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_SetAlgo, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS.SetFlag = new_instancemethod(_BRepExtrema.BRepExtrema_DistanceSS_SetFlag, None, BRepExtrema_DistanceSS)
BRepExtrema_DistanceSS_swigregister = _BRepExtrema.BRepExtrema_DistanceSS_swigregister
BRepExtrema_DistanceSS_swigregister(BRepExtrema_DistanceSS)

class BRepExtrema_ElementFilter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NoCheck = _BRepExtrema.BRepExtrema_ElementFilter_NoCheck
    Overlap = _BRepExtrema.BRepExtrema_ElementFilter_Overlap
    DoCheck = _BRepExtrema.BRepExtrema_ElementFilter_DoCheck

    def PreCheckElements(self, *args) -> "BRepExtrema_ElementFilter::FilterResult":
        """
        * Checks if two mesh elements should be tested for overlapping/intersection (used for detection correct/incorrect cases of shared edges and vertices).
        	:param Standard_Integer:
        	:type Standard_Integer: 
        	:param Standard_Integer:
        	:type Standard_Integer: 
        	:rtype: FilterResult
        """
        return _BRepExtrema.BRepExtrema_ElementFilter_PreCheckElements(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        _BRepExtrema.BRepExtrema_ElementFilter_swiginit(self, _BRepExtrema.new_BRepExtrema_ElementFilter())
    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ElementFilter
BRepExtrema_ElementFilter.PreCheckElements = new_instancemethod(_BRepExtrema.BRepExtrema_ElementFilter_PreCheckElements, None, BRepExtrema_ElementFilter)
BRepExtrema_ElementFilter_swigregister = _BRepExtrema.BRepExtrema_ElementFilter_swigregister
BRepExtrema_ElementFilter_swigregister(BRepExtrema_ElementFilter)

class BRepExtrema_ExtCC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances.
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ExtCC_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtCC(*args))

    def Initialize(self, *args) -> "void":
        """
        :param E2:
        	:type E2: TopoDS_Edge
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtCC_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ExtCC_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if E1 and E2 are parallel.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ExtCC_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _BRepExtrema.BRepExtrema_ExtCC_NbExt(self, *args)


    def ParameterOnE1(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on the first edge of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_ExtCC_ParameterOnE1(self, *args)


    def ParameterOnE2(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on the second edge of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_ExtCC_ParameterOnE2(self, *args)


    def Perform(self, *args) -> "void":
        """
        * An exception is raised if the fields have not been initialized.
        	:param E1:
        	:type E1: TopoDS_Edge
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtCC_Perform(self, *args)


    def PointOnE1(self, *args) -> "gp_Pnt":
        """
        * Returns the Point of the <N>th extremum distance on the edge E1.
        	:param N:
        	:type N: int
        	:rtype: gp_Pnt
        """
        return _BRepExtrema.BRepExtrema_ExtCC_PointOnE1(self, *args)


    def PointOnE2(self, *args) -> "gp_Pnt":
        """
        * Returns the Point of the <N>th extremum distance on the edge E2.
        	:param N:
        	:type N: int
        	:rtype: gp_Pnt
        """
        return _BRepExtrema.BRepExtrema_ExtCC_PointOnE2(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the <N>th extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_ExtCC_SquareDistance(self, *args)


    def TrimmedSquareDistances(self, *args) -> "void":
        """
        * if the edges is a trimmed curve, dist11 is a square distance between the point on E1 of parameter FirstParameter and the point of parameter FirstParameter on E2.
        	:param dist11:
        	:type dist11: float
        	:param distP12:
        	:type distP12: float
        	:param distP21:
        	:type distP21: float
        	:param distP22:
        	:type distP22: float
        	:param P11:
        	:type P11: gp_Pnt
        	:param P12:
        	:type P12: gp_Pnt
        	:param P21:
        	:type P21: gp_Pnt
        	:param P22:
        	:type P22: gp_Pnt
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtCC_TrimmedSquareDistances(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ExtCC
BRepExtrema_ExtCC.Initialize = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_Initialize, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_IsDone, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.IsParallel = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_IsParallel, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.NbExt = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_NbExt, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.ParameterOnE1 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_ParameterOnE1, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.ParameterOnE2 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_ParameterOnE2, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_Perform, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.PointOnE1 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_PointOnE1, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.PointOnE2 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_PointOnE2, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.SquareDistance = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_SquareDistance, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC.TrimmedSquareDistances = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCC_TrimmedSquareDistances, None, BRepExtrema_ExtCC)
BRepExtrema_ExtCC_swigregister = _BRepExtrema.BRepExtrema_ExtCC_swigregister
BRepExtrema_ExtCC_swigregister(BRepExtrema_ExtCC)

class BRepExtrema_ExtCF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ExtCF_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtCF(*args))

    def Initialize(self, *args) -> "void":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtCF_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ExtCF_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the curve is on a parallel surface.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ExtCF_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _BRepExtrema.BRepExtrema_ExtCF_NbExt(self, *args)


    def ParameterOnEdge(self, *args) -> "Standard_Real":
        """
        * Returns the parameters on the Edge of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_ExtCF_ParameterOnEdge(self, *args)


    def ParameterOnFace(self, *args) -> "void":
        """
        * Returns the parameters on the Face of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtCF_ParameterOnFace(self, *args)


    def Perform(self, *args) -> "void":
        """
        * An exception is raised if the fields have not been initialized. Be careful: this method uses the Face only for classify not for the fields.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtCF_Perform(self, *args)


    def PointOnEdge(self, *args) -> "gp_Pnt":
        """
        * Returns the Point of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: gp_Pnt
        """
        return _BRepExtrema.BRepExtrema_ExtCF_PointOnEdge(self, *args)


    def PointOnFace(self, *args) -> "gp_Pnt":
        """
        * Returns the Point of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: gp_Pnt
        """
        return _BRepExtrema.BRepExtrema_ExtCF_PointOnFace(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the <N>th extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_ExtCF_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ExtCF
BRepExtrema_ExtCF.Initialize = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_Initialize, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_IsDone, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.IsParallel = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_IsParallel, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.NbExt = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_NbExt, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.ParameterOnEdge = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_ParameterOnEdge, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.ParameterOnFace = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_ParameterOnFace, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_Perform, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.PointOnEdge = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_PointOnEdge, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.PointOnFace = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_PointOnFace, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF.SquareDistance = new_instancemethod(_BRepExtrema.BRepExtrema_ExtCF_SquareDistance, None, BRepExtrema_ExtCF)
BRepExtrema_ExtCF_swigregister = _BRepExtrema.BRepExtrema_ExtCF_swigregister
BRepExtrema_ExtCF_swigregister(BRepExtrema_ExtCF)

class BRepExtrema_ExtFF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances.
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ExtFF_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtFF(*args))

    def Initialize(self, *args) -> "void":
        """
        :param F2:
        	:type F2: TopoDS_Face
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtFF_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ExtFF_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the surfaces are parallel.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ExtFF_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _BRepExtrema.BRepExtrema_ExtFF_NbExt(self, *args)


    def ParameterOnFace1(self, *args) -> "void":
        """
        * Returns the parameters on the Face F1 of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtFF_ParameterOnFace1(self, *args)


    def ParameterOnFace2(self, *args) -> "void":
        """
        * Returns the parameters on the Face F2 of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtFF_ParameterOnFace2(self, *args)


    def Perform(self, *args) -> "void":
        """
        * An exception is raised if the fields have not been initialized. Be careful: this method uses the Face F2 only for classify, not for the fields.
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtFF_Perform(self, *args)


    def PointOnFace1(self, *args) -> "gp_Pnt":
        """
        * Returns the Point of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: gp_Pnt
        """
        return _BRepExtrema.BRepExtrema_ExtFF_PointOnFace1(self, *args)


    def PointOnFace2(self, *args) -> "gp_Pnt":
        """
        * Returns the Point of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: gp_Pnt
        """
        return _BRepExtrema.BRepExtrema_ExtFF_PointOnFace2(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the <N>th extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_ExtFF_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ExtFF
BRepExtrema_ExtFF.Initialize = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_Initialize, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_IsDone, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.IsParallel = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_IsParallel, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.NbExt = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_NbExt, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.ParameterOnFace1 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_ParameterOnFace1, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.ParameterOnFace2 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_ParameterOnFace2, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_Perform, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.PointOnFace1 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_PointOnFace1, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.PointOnFace2 = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_PointOnFace2, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF.SquareDistance = new_instancemethod(_BRepExtrema.BRepExtrema_ExtFF_SquareDistance, None, BRepExtrema_ExtFF)
BRepExtrema_ExtFF_swigregister = _BRepExtrema.BRepExtrema_ExtFF_swigregister
BRepExtrema_ExtFF_swigregister(BRepExtrema_ExtFF)

class BRepExtrema_ExtPC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ExtPC_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtPC(*args))

    def Initialize(self, *args) -> "void":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtPC_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ExtPC_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the <N>th extremum distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ExtPC_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _BRepExtrema.BRepExtrema_ExtPC_NbExt(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on the edge of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_ExtPC_Parameter(self, *args)


    def Perform(self, *args) -> "void":
        """
        * An exception is raised if the fields have not been initialized.
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtPC_Perform(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """
        * Returns the Point of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: gp_Pnt
        """
        return _BRepExtrema.BRepExtrema_ExtPC_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the <N>th extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_ExtPC_SquareDistance(self, *args)


    def TrimmedSquareDistances(self, *args) -> "void":
        """
        * if the curve is a trimmed curve, dist1 is a square distance between <P> and the point of parameter FirstParameter <pnt1> and dist2 is a square distance between <P> and the point of parameter LastParameter <pnt2>.
        	:param dist1:
        	:type dist1: float
        	:param dist2:
        	:type dist2: float
        	:param pnt1:
        	:type pnt1: gp_Pnt
        	:param pnt2:
        	:type pnt2: gp_Pnt
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtPC_TrimmedSquareDistances(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ExtPC
BRepExtrema_ExtPC.Initialize = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_Initialize, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_IsDone, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.IsMin = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_IsMin, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.NbExt = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_NbExt, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.Parameter = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_Parameter, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_Perform, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.Point = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_Point, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.SquareDistance = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_SquareDistance, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC.TrimmedSquareDistances = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPC_TrimmedSquareDistances, None, BRepExtrema_ExtPC)
BRepExtrema_ExtPC_swigregister = _BRepExtrema.BRepExtrema_ExtPC_swigregister
BRepExtrema_ExtPC_swigregister(BRepExtrema_ExtPC)

class BRepExtrema_ExtPF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances.
        	:param TheVertex:
        	:type TheVertex: TopoDS_Vertex
        	:param TheFace:
        	:type TheFace: TopoDS_Face
        	:param TheFlag: default value is Extrema_ExtFlag_MINMAX
        	:type TheFlag: Extrema_ExtFlag
        	:param TheAlgo: default value is Extrema_ExtAlgo_Grad
        	:type TheAlgo: Extrema_ExtAlgo
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ExtPF_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtPF(*args))

    def Initialize(self, *args) -> "void":
        """
        :param TheFace:
        	:type TheFace: TopoDS_Face
        	:param TheFlag: default value is Extrema_ExtFlag_MINMAX
        	:type TheFlag: Extrema_ExtFlag
        	:param TheAlgo: default value is Extrema_ExtAlgo_Grad
        	:type TheAlgo: Extrema_ExtAlgo
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtPF_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ExtPF_IsDone(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _BRepExtrema.BRepExtrema_ExtPF_NbExt(self, *args)


    def Parameter(self, *args) -> "void":
        """
        * Returns the parameters on the Face of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtPF_Parameter(self, *args)


    def Perform(self, *args) -> "void":
        """
        * An exception is raised if the fields have not been initialized. Be careful: this method uses the Face only for classify not for the fields.
        	:param TheVertex:
        	:type TheVertex: TopoDS_Vertex
        	:param TheFace:
        	:type TheFace: TopoDS_Face
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtPF_Perform(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """
        * Returns the Point of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: gp_Pnt
        """
        return _BRepExtrema.BRepExtrema_ExtPF_Point(self, *args)


    def SetAlgo(self, *args) -> "void":
        """
        :param A:
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtPF_SetAlgo(self, *args)


    def SetFlag(self, *args) -> "void":
        """
        :param F:
        	:type F: Extrema_ExtFlag
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ExtPF_SetFlag(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the <N>th extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_ExtPF_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ExtPF
BRepExtrema_ExtPF.Initialize = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_Initialize, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_IsDone, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.NbExt = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_NbExt, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.Parameter = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_Parameter, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_Perform, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.Point = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_Point, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.SetAlgo = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_SetAlgo, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.SetFlag = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_SetFlag, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF.SquareDistance = new_instancemethod(_BRepExtrema.BRepExtrema_ExtPF_SquareDistance, None, BRepExtrema_ExtPF)
BRepExtrema_ExtPF_swigregister = _BRepExtrema.BRepExtrema_ExtPF_swigregister
BRepExtrema_ExtPF_swigregister(BRepExtrema_ExtPF)

class BRepExtrema_Poly(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Distance(*args) -> "Standard_Real &":
        """
        * returns Standard_True if OK.
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:param dist:
        	:type dist: float
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_Poly_Distance(*args)

    Distance = staticmethod(Distance)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepExtrema.BRepExtrema_Poly_swiginit(self, _BRepExtrema.new_BRepExtrema_Poly())
    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_Poly
BRepExtrema_Poly_swigregister = _BRepExtrema.BRepExtrema_Poly_swigregister
BRepExtrema_Poly_swigregister(BRepExtrema_Poly)

def BRepExtrema_Poly_Distance(*args) -> "Standard_Real &":
    """
    * returns Standard_True if OK.
    	:param S1:
    	:type S1: TopoDS_Shape
    	:param S2:
    	:type S2: TopoDS_Shape
    	:param P1:
    	:type P1: gp_Pnt
    	:param P2:
    	:type P2: gp_Pnt
    	:param dist:
    	:type dist: float
    	:rtype: bool
    """
    return _BRepExtrema.BRepExtrema_Poly_Distance(*args)

class BRepExtrema_ShapeProximity(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates empty proximity tool.
        	:param theTolerance: default value is 0.0
        	:type theTolerance: float
        	:rtype: None
        * Creates proximity tool for the given two shapes.
        	:param theShape1:
        	:type theShape1: TopoDS_Shape
        	:param theShape2:
        	:type theShape2: TopoDS_Shape
        	:param theTolerance: default value is 0.0
        	:type theTolerance: float
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ShapeProximity_swiginit(self, _BRepExtrema.new_BRepExtrema_ShapeProximity(*args))

    def ElementSet1(self, *args) -> "opencascade::handle< BRepExtrema_TriangleSet > const &":
        """
        * Returns set of all the face triangles of the 1st shape.
        	:rtype: opencascade::handle<BRepExtrema_TriangleSet>
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_ElementSet1(self, *args)


    def ElementSet2(self, *args) -> "opencascade::handle< BRepExtrema_TriangleSet > const &":
        """
        * Returns set of all the face triangles of the 2nd shape.
        	:rtype: opencascade::handle<BRepExtrema_TriangleSet>
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_ElementSet2(self, *args)


    def GetSubShape1(self, *args) -> "TopoDS_Face const":
        """
        * Returns sub-shape from 1st shape with the given index (started from 0).
        	:param theID:
        	:type theID: int
        	:rtype: TopoDS_Face
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_GetSubShape1(self, *args)


    def GetSubShape2(self, *args) -> "TopoDS_Face const":
        """
        * Returns sub-shape from 1st shape with the given index (started from 0).
        	:param theID:
        	:type theID: int
        	:rtype: TopoDS_Face
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_GetSubShape2(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the search is completed.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_IsDone(self, *args)


    def LoadShape1(self, *args) -> "Standard_Boolean":
        """
        * Loads 1st shape into proximity tool.
        	:param theShape1:
        	:type theShape1: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_LoadShape1(self, *args)


    def LoadShape2(self, *args) -> "Standard_Boolean":
        """
        * Loads 2nd shape into proximity tool.
        	:param theShape2:
        	:type theShape2: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_LoadShape2(self, *args)


    def OverlapSubShapes1(self, *args) -> "BRepExtrema_MapOfIntegerPackedMapOfInteger const &":
        """
        * Returns set of IDs of overlapped faces of 1st shape (started from 0).
        	:rtype: BRepExtrema_MapOfIntegerPackedMapOfInteger
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_OverlapSubShapes1(self, *args)


    def OverlapSubShapes2(self, *args) -> "BRepExtrema_MapOfIntegerPackedMapOfInteger const &":
        """
        * Returns set of IDs of overlapped faces of 2nd shape (started from 0).
        	:rtype: BRepExtrema_MapOfIntegerPackedMapOfInteger
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_OverlapSubShapes2(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs search of overlapped faces.
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_Perform(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * Sets tolerance value for overlap test (distance between shapes).
        	:param theTolerance:
        	:type theTolerance: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_SetTolerance(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        * Returns tolerance value for overlap test (distance between shapes).
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_ShapeProximity_Tolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ShapeProximity
BRepExtrema_ShapeProximity.ElementSet1 = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_ElementSet1, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity.ElementSet2 = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_ElementSet2, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity.GetSubShape1 = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_GetSubShape1, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity.GetSubShape2 = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_GetSubShape2, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_IsDone, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity.LoadShape1 = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_LoadShape1, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity.LoadShape2 = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_LoadShape2, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity.OverlapSubShapes1 = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_OverlapSubShapes1, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity.OverlapSubShapes2 = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_OverlapSubShapes2, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_Perform, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity.SetTolerance = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_SetTolerance, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity.Tolerance = new_instancemethod(_BRepExtrema.BRepExtrema_ShapeProximity_Tolerance, None, BRepExtrema_ShapeProximity)
BRepExtrema_ShapeProximity_swigregister = _BRepExtrema.BRepExtrema_ShapeProximity_swigregister
BRepExtrema_ShapeProximity_swigregister(BRepExtrema_ShapeProximity)

class BRepExtrema_SolutionElem(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * This constructor is used when the solution of a distance is a Vertex. The different initialized fields are: @param theDist the distance @param thePoint the solution point @param theSolType the type of solution @param theVertex and the Vertex
        	:param theDist:
        	:type theDist: float
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:param theSolType:
        	:type theSolType: BRepExtrema_SupportType
        	:param theVertex:
        	:type theVertex: TopoDS_Vertex
        	:rtype: None
        * This constructor is used when the solution of distance is on an Edge. The different initialized fields are: @param theDist the distance @param thePoint the solution point @param theSolType the type of solution @param theEdge the Edge @param theParam the parameter to locate the solution
        	:param theDist:
        	:type theDist: float
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:param theSolType:
        	:type theSolType: BRepExtrema_SupportType
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theParam:
        	:type theParam: float
        	:rtype: None
        * This constructor is used when the solution of distance is in a Face. The different initialized fields are: @param theDist the distance @param thePoint the solution point @param theSolType the type of solution @param theFace the Face @param theU U parameter to locate the solution @param theV V parameter to locate the solution
        	:param theDist:
        	:type theDist: float
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:param theSolType:
        	:type theSolType: BRepExtrema_SupportType
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_SolutionElem_swiginit(self, _BRepExtrema.new_BRepExtrema_SolutionElem(*args))

    def Dist(self, *args) -> "Standard_Real":
        """
        * Returns the value of the minimum distance.
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_SolutionElem_Dist(self, *args)


    def Edge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the vertex if the solution is an Edge.
        	:rtype: TopoDS_Edge
        """
        return _BRepExtrema.BRepExtrema_SolutionElem_Edge(self, *args)


    def EdgeParameter(self, *args) -> "void":
        """
        * Returns the parameter value if the solution is on Edge.
        	:param theParam:
        	:type theParam: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_SolutionElem_EdgeParameter(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """
        * Returns the vertex if the solution is an Face.
        	:rtype: TopoDS_Face
        """
        return _BRepExtrema.BRepExtrema_SolutionElem_Face(self, *args)


    def FaceParameter(self, *args) -> "void":
        """
        * Returns the parameters U and V if the solution is in a Face.
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_SolutionElem_FaceParameter(self, *args)


    def Point(self, *args) -> "gp_Pnt const":
        """
        * Returns the solution point.
        	:rtype: gp_Pnt
        """
        return _BRepExtrema.BRepExtrema_SolutionElem_Point(self, *args)


    def SupportKind(self, *args) -> "BRepExtrema_SupportType":
        """
        * Returns the Support type: IsVertex => The solution is a vertex. IsOnEdge => The solution belongs to an Edge. IsInFace => The solution is inside a Face.
        	:rtype: BRepExtrema_SupportType
        """
        return _BRepExtrema.BRepExtrema_SolutionElem_SupportKind(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the vertex if the solution is a Vertex.
        	:rtype: TopoDS_Vertex
        """
        return _BRepExtrema.BRepExtrema_SolutionElem_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_SolutionElem
BRepExtrema_SolutionElem.Dist = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_Dist, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.Edge = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_Edge, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.EdgeParameter = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_EdgeParameter, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.Face = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_Face, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.FaceParameter = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_FaceParameter, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.Point = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_Point, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.SupportKind = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_SupportKind, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem.Vertex = new_instancemethod(_BRepExtrema.BRepExtrema_SolutionElem_Vertex, None, BRepExtrema_SolutionElem)
BRepExtrema_SolutionElem_swigregister = _BRepExtrema.BRepExtrema_SolutionElem_swigregister
BRepExtrema_SolutionElem_swigregister(BRepExtrema_SolutionElem)

class BRepExtrema_TriangleSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates empty triangle set.
        	:rtype: None
        * Creates triangle set from the given face.
        	:param theFaces:
        	:type theFaces: BRepExtrema_ShapeList
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_TriangleSet_swiginit(self, _BRepExtrema.new_BRepExtrema_TriangleSet(*args))

    def Box(self, *args) -> "BVH_Box< Standard_Real,3 >":
        """
        * Returns AABB of the given triangle.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: BVH_Box<float, 3>
        """
        return _BRepExtrema.BRepExtrema_TriangleSet_Box(self, *args)


    def Center(self, *args) -> "Standard_Real":
        """
        * Returns centroid position along specified axis.
        	:param theIndex:
        	:type theIndex: int
        	:param theAxis:
        	:type theAxis: int
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_TriangleSet_Center(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears triangle set data.
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_TriangleSet_Clear(self, *args)


    def GetFaceID(self, *args) -> "Standard_Integer":
        """
        * Returns face ID of the given triangle.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: int
        """
        return _BRepExtrema.BRepExtrema_TriangleSet_GetFaceID(self, *args)


    def GetVertices(self, *args) -> "void":
        """
        * Returns vertices of the given triangle.
        	:param theIndex:
        	:type theIndex: int
        	:param theVertex1:
        	:type theVertex1: BVH_Vec3d
        	:param theVertex2:
        	:type theVertex2: BVH_Vec3d
        	:param theVertex3:
        	:type theVertex3: BVH_Vec3d
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_TriangleSet_GetVertices(self, *args)


    def Init(self, *args) -> "Standard_Boolean":
        """
        * Initializes triangle set.
        	:param theFaces:
        	:type theFaces: BRepExtrema_ShapeList
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_TriangleSet_Init(self, *args)


    def Size(self, *args) -> "Standard_Integer":
        """
        * @name methods implementing BVH set interface Returns total number of triangles.
        	:rtype: int
        """
        return _BRepExtrema.BRepExtrema_TriangleSet_Size(self, *args)


    def Swap(self, *args) -> "void":
        """
        * Swaps indices of two specified triangles.
        	:param theIndex1:
        	:type theIndex1: int
        	:param theIndex2:
        	:type theIndex2: int
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_TriangleSet_Swap(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepExtrema_TriangleSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_TriangleSet
BRepExtrema_TriangleSet.Box = new_instancemethod(_BRepExtrema.BRepExtrema_TriangleSet_Box, None, BRepExtrema_TriangleSet)
BRepExtrema_TriangleSet.Center = new_instancemethod(_BRepExtrema.BRepExtrema_TriangleSet_Center, None, BRepExtrema_TriangleSet)
BRepExtrema_TriangleSet.Clear = new_instancemethod(_BRepExtrema.BRepExtrema_TriangleSet_Clear, None, BRepExtrema_TriangleSet)
BRepExtrema_TriangleSet.GetFaceID = new_instancemethod(_BRepExtrema.BRepExtrema_TriangleSet_GetFaceID, None, BRepExtrema_TriangleSet)
BRepExtrema_TriangleSet.GetVertices = new_instancemethod(_BRepExtrema.BRepExtrema_TriangleSet_GetVertices, None, BRepExtrema_TriangleSet)
BRepExtrema_TriangleSet.Init = new_instancemethod(_BRepExtrema.BRepExtrema_TriangleSet_Init, None, BRepExtrema_TriangleSet)
BRepExtrema_TriangleSet.Size = new_instancemethod(_BRepExtrema.BRepExtrema_TriangleSet_Size, None, BRepExtrema_TriangleSet)
BRepExtrema_TriangleSet.Swap = new_instancemethod(_BRepExtrema.BRepExtrema_TriangleSet_Swap, None, BRepExtrema_TriangleSet)
BRepExtrema_TriangleSet_swigregister = _BRepExtrema.BRepExtrema_TriangleSet_swigregister
BRepExtrema_TriangleSet_swigregister(BRepExtrema_TriangleSet)

class BRepExtrema_SelfIntersection(BRepExtrema_ElementFilter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates unitialized self-intersection tool.
        	:param theTolerance: default value is 0.0
        	:type theTolerance: float
        	:rtype: None
        * Creates self-intersection tool for the given shape.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theTolerance: default value is 0.0
        	:type theTolerance: float
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_SelfIntersection_swiginit(self, _BRepExtrema.new_BRepExtrema_SelfIntersection(*args))

    def ElementSet(self, *args) -> "opencascade::handle< BRepExtrema_TriangleSet > const &":
        """
        * Returns set of all the face triangles of the shape.
        	:rtype: opencascade::handle<BRepExtrema_TriangleSet>
        """
        return _BRepExtrema.BRepExtrema_SelfIntersection_ElementSet(self, *args)


    def GetSubShape(self, *args) -> "TopoDS_Face const":
        """
        * Returns sub-shape from the shape for the given index (started from 0).
        	:param theID:
        	:type theID: int
        	:rtype: TopoDS_Face
        """
        return _BRepExtrema.BRepExtrema_SelfIntersection_GetSubShape(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the detection is completed.
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_SelfIntersection_IsDone(self, *args)


    def LoadShape(self, *args) -> "Standard_Boolean":
        """
        * Loads shape for detection of self-intersections.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepExtrema.BRepExtrema_SelfIntersection_LoadShape(self, *args)


    def OverlapElements(self, *args) -> "BRepExtrema_MapOfIntegerPackedMapOfInteger const &":
        """
        * Returns set of IDs of overlapped sub-shapes (started from 0).
        	:rtype: BRepExtrema_MapOfIntegerPackedMapOfInteger
        """
        return _BRepExtrema.BRepExtrema_SelfIntersection_OverlapElements(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs detection of self-intersections.
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_SelfIntersection_Perform(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * Sets tolerance value used for self-intersection test.
        	:param theTolerance:
        	:type theTolerance: float
        	:rtype: None
        """
        return _BRepExtrema.BRepExtrema_SelfIntersection_SetTolerance(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        * Returns tolerance value used for self-intersection test.
        	:rtype: float
        """
        return _BRepExtrema.BRepExtrema_SelfIntersection_Tolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_SelfIntersection
BRepExtrema_SelfIntersection.ElementSet = new_instancemethod(_BRepExtrema.BRepExtrema_SelfIntersection_ElementSet, None, BRepExtrema_SelfIntersection)
BRepExtrema_SelfIntersection.GetSubShape = new_instancemethod(_BRepExtrema.BRepExtrema_SelfIntersection_GetSubShape, None, BRepExtrema_SelfIntersection)
BRepExtrema_SelfIntersection.IsDone = new_instancemethod(_BRepExtrema.BRepExtrema_SelfIntersection_IsDone, None, BRepExtrema_SelfIntersection)
BRepExtrema_SelfIntersection.LoadShape = new_instancemethod(_BRepExtrema.BRepExtrema_SelfIntersection_LoadShape, None, BRepExtrema_SelfIntersection)
BRepExtrema_SelfIntersection.OverlapElements = new_instancemethod(_BRepExtrema.BRepExtrema_SelfIntersection_OverlapElements, None, BRepExtrema_SelfIntersection)
BRepExtrema_SelfIntersection.Perform = new_instancemethod(_BRepExtrema.BRepExtrema_SelfIntersection_Perform, None, BRepExtrema_SelfIntersection)
BRepExtrema_SelfIntersection.SetTolerance = new_instancemethod(_BRepExtrema.BRepExtrema_SelfIntersection_SetTolerance, None, BRepExtrema_SelfIntersection)
BRepExtrema_SelfIntersection.Tolerance = new_instancemethod(_BRepExtrema.BRepExtrema_SelfIntersection_Tolerance, None, BRepExtrema_SelfIntersection)
BRepExtrema_SelfIntersection_swigregister = _BRepExtrema.BRepExtrema_SelfIntersection_swigregister
BRepExtrema_SelfIntersection_swigregister(BRepExtrema_SelfIntersection)



