# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepFill module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepfill.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepFill.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepFill')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepFill')
    _BRepFill = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepFill', [dirname(__file__)])
        except ImportError:
            import _BRepFill
            return _BRepFill
        try:
            _mod = imp.load_module('_BRepFill', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepFill = swig_import_helper()
    del swig_import_helper
else:
    import _BRepFill
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepFill.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepFill.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepFill.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepFill.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepFill.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepFill.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepFill.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepFill.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepFill.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepFill.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepFill.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepFill.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepFill.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepFill.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepFill.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepFill.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepFill.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepFill.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepFill.process_exception(error, method_name, class_name)
process_exception = _BRepFill.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TCollection
import OCC.Core.MAT
import OCC.Core.TColStd
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.AppParCurves
import OCC.Core.math
import OCC.Core.GeomPlate
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.TColGeom2d
import OCC.Core.GeomLProp
import OCC.Core.Law
import OCC.Core.AdvApp2Var
import OCC.Core.AdvApprox
import OCC.Core.PLib
import OCC.Core.Plate
import OCC.Core.GeomFill
import OCC.Core.Convert
import OCC.Core.AppBlend
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.TColGeom
import OCC.Core.BRepMAT2d
import OCC.Core.Bisector
import OCC.Core.IntRes2d
BRepFill_NoContact = _BRepFill.BRepFill_NoContact
BRepFill_Contact = _BRepFill.BRepFill_Contact
BRepFill_ContactOnBorder = _BRepFill.BRepFill_ContactOnBorder
BRepFill_Modified = _BRepFill.BRepFill_Modified
BRepFill_Right = _BRepFill.BRepFill_Right
BRepFill_Round = _BRepFill.BRepFill_Round

def Handle_BRepFill_CurveConstraint_Create() -> "opencascade::handle< BRepFill_CurveConstraint >":
    return _BRepFill.Handle_BRepFill_CurveConstraint_Create()
Handle_BRepFill_CurveConstraint_Create = _BRepFill.Handle_BRepFill_CurveConstraint_Create

def Handle_BRepFill_CurveConstraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepFill_CurveConstraint >":
    return _BRepFill.Handle_BRepFill_CurveConstraint_DownCast(t)
Handle_BRepFill_CurveConstraint_DownCast = _BRepFill.Handle_BRepFill_CurveConstraint_DownCast

def Handle_BRepFill_CurveConstraint_IsNull(t: 'opencascade::handle< BRepFill_CurveConstraint > const &') -> "bool":
    return _BRepFill.Handle_BRepFill_CurveConstraint_IsNull(t)
Handle_BRepFill_CurveConstraint_IsNull = _BRepFill.Handle_BRepFill_CurveConstraint_IsNull

def Handle_BRepFill_LocationLaw_Create() -> "opencascade::handle< BRepFill_LocationLaw >":
    return _BRepFill.Handle_BRepFill_LocationLaw_Create()
Handle_BRepFill_LocationLaw_Create = _BRepFill.Handle_BRepFill_LocationLaw_Create

def Handle_BRepFill_LocationLaw_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepFill_LocationLaw >":
    return _BRepFill.Handle_BRepFill_LocationLaw_DownCast(t)
Handle_BRepFill_LocationLaw_DownCast = _BRepFill.Handle_BRepFill_LocationLaw_DownCast

def Handle_BRepFill_LocationLaw_IsNull(t: 'opencascade::handle< BRepFill_LocationLaw > const &') -> "bool":
    return _BRepFill.Handle_BRepFill_LocationLaw_IsNull(t)
Handle_BRepFill_LocationLaw_IsNull = _BRepFill.Handle_BRepFill_LocationLaw_IsNull

def Handle_BRepFill_PipeShell_Create() -> "opencascade::handle< BRepFill_PipeShell >":
    return _BRepFill.Handle_BRepFill_PipeShell_Create()
Handle_BRepFill_PipeShell_Create = _BRepFill.Handle_BRepFill_PipeShell_Create

def Handle_BRepFill_PipeShell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepFill_PipeShell >":
    return _BRepFill.Handle_BRepFill_PipeShell_DownCast(t)
Handle_BRepFill_PipeShell_DownCast = _BRepFill.Handle_BRepFill_PipeShell_DownCast

def Handle_BRepFill_PipeShell_IsNull(t: 'opencascade::handle< BRepFill_PipeShell > const &') -> "bool":
    return _BRepFill.Handle_BRepFill_PipeShell_IsNull(t)
Handle_BRepFill_PipeShell_IsNull = _BRepFill.Handle_BRepFill_PipeShell_IsNull

def Handle_BRepFill_SectionLaw_Create() -> "opencascade::handle< BRepFill_SectionLaw >":
    return _BRepFill.Handle_BRepFill_SectionLaw_Create()
Handle_BRepFill_SectionLaw_Create = _BRepFill.Handle_BRepFill_SectionLaw_Create

def Handle_BRepFill_SectionLaw_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepFill_SectionLaw >":
    return _BRepFill.Handle_BRepFill_SectionLaw_DownCast(t)
Handle_BRepFill_SectionLaw_DownCast = _BRepFill.Handle_BRepFill_SectionLaw_DownCast

def Handle_BRepFill_SectionLaw_IsNull(t: 'opencascade::handle< BRepFill_SectionLaw > const &') -> "bool":
    return _BRepFill.Handle_BRepFill_SectionLaw_IsNull(t)
Handle_BRepFill_SectionLaw_IsNull = _BRepFill.Handle_BRepFill_SectionLaw_IsNull

def Handle_BRepFill_ACRLaw_Create() -> "opencascade::handle< BRepFill_ACRLaw >":
    return _BRepFill.Handle_BRepFill_ACRLaw_Create()
Handle_BRepFill_ACRLaw_Create = _BRepFill.Handle_BRepFill_ACRLaw_Create

def Handle_BRepFill_ACRLaw_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepFill_ACRLaw >":
    return _BRepFill.Handle_BRepFill_ACRLaw_DownCast(t)
Handle_BRepFill_ACRLaw_DownCast = _BRepFill.Handle_BRepFill_ACRLaw_DownCast

def Handle_BRepFill_ACRLaw_IsNull(t: 'opencascade::handle< BRepFill_ACRLaw > const &') -> "bool":
    return _BRepFill.Handle_BRepFill_ACRLaw_IsNull(t)
Handle_BRepFill_ACRLaw_IsNull = _BRepFill.Handle_BRepFill_ACRLaw_IsNull

def Handle_BRepFill_Edge3DLaw_Create() -> "opencascade::handle< BRepFill_Edge3DLaw >":
    return _BRepFill.Handle_BRepFill_Edge3DLaw_Create()
Handle_BRepFill_Edge3DLaw_Create = _BRepFill.Handle_BRepFill_Edge3DLaw_Create

def Handle_BRepFill_Edge3DLaw_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepFill_Edge3DLaw >":
    return _BRepFill.Handle_BRepFill_Edge3DLaw_DownCast(t)
Handle_BRepFill_Edge3DLaw_DownCast = _BRepFill.Handle_BRepFill_Edge3DLaw_DownCast

def Handle_BRepFill_Edge3DLaw_IsNull(t: 'opencascade::handle< BRepFill_Edge3DLaw > const &') -> "bool":
    return _BRepFill.Handle_BRepFill_Edge3DLaw_IsNull(t)
Handle_BRepFill_Edge3DLaw_IsNull = _BRepFill.Handle_BRepFill_Edge3DLaw_IsNull

def Handle_BRepFill_EdgeOnSurfLaw_Create() -> "opencascade::handle< BRepFill_EdgeOnSurfLaw >":
    return _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_Create()
Handle_BRepFill_EdgeOnSurfLaw_Create = _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_Create

def Handle_BRepFill_EdgeOnSurfLaw_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepFill_EdgeOnSurfLaw >":
    return _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_DownCast(t)
Handle_BRepFill_EdgeOnSurfLaw_DownCast = _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_DownCast

def Handle_BRepFill_EdgeOnSurfLaw_IsNull(t: 'opencascade::handle< BRepFill_EdgeOnSurfLaw > const &') -> "bool":
    return _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_IsNull(t)
Handle_BRepFill_EdgeOnSurfLaw_IsNull = _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_IsNull

def Handle_BRepFill_NSections_Create() -> "opencascade::handle< BRepFill_NSections >":
    return _BRepFill.Handle_BRepFill_NSections_Create()
Handle_BRepFill_NSections_Create = _BRepFill.Handle_BRepFill_NSections_Create

def Handle_BRepFill_NSections_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepFill_NSections >":
    return _BRepFill.Handle_BRepFill_NSections_DownCast(t)
Handle_BRepFill_NSections_DownCast = _BRepFill.Handle_BRepFill_NSections_DownCast

def Handle_BRepFill_NSections_IsNull(t: 'opencascade::handle< BRepFill_NSections > const &') -> "bool":
    return _BRepFill.Handle_BRepFill_NSections_IsNull(t)
Handle_BRepFill_NSections_IsNull = _BRepFill.Handle_BRepFill_NSections_IsNull

def Handle_BRepFill_ShapeLaw_Create() -> "opencascade::handle< BRepFill_ShapeLaw >":
    return _BRepFill.Handle_BRepFill_ShapeLaw_Create()
Handle_BRepFill_ShapeLaw_Create = _BRepFill.Handle_BRepFill_ShapeLaw_Create

def Handle_BRepFill_ShapeLaw_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepFill_ShapeLaw >":
    return _BRepFill.Handle_BRepFill_ShapeLaw_DownCast(t)
Handle_BRepFill_ShapeLaw_DownCast = _BRepFill.Handle_BRepFill_ShapeLaw_DownCast

def Handle_BRepFill_ShapeLaw_IsNull(t: 'opencascade::handle< BRepFill_ShapeLaw > const &') -> "bool":
    return _BRepFill.Handle_BRepFill_ShapeLaw_IsNull(t)
Handle_BRepFill_ShapeLaw_IsNull = _BRepFill.Handle_BRepFill_ShapeLaw_IsNull

def Handle_BRepFill_DraftLaw_Create() -> "opencascade::handle< BRepFill_DraftLaw >":
    return _BRepFill.Handle_BRepFill_DraftLaw_Create()
Handle_BRepFill_DraftLaw_Create = _BRepFill.Handle_BRepFill_DraftLaw_Create

def Handle_BRepFill_DraftLaw_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepFill_DraftLaw >":
    return _BRepFill.Handle_BRepFill_DraftLaw_DownCast(t)
Handle_BRepFill_DraftLaw_DownCast = _BRepFill.Handle_BRepFill_DraftLaw_DownCast

def Handle_BRepFill_DraftLaw_IsNull(t: 'opencascade::handle< BRepFill_DraftLaw > const &') -> "bool":
    return _BRepFill.Handle_BRepFill_DraftLaw_IsNull(t)
Handle_BRepFill_DraftLaw_IsNull = _BRepFill.Handle_BRepFill_DraftLaw_IsNull
class BRepFill_IndexedDataMapOfOrientedShapeListOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_IndexedDataMapOfOrientedShapeListOfShape(*args))
    __swig_destroy__ = _BRepFill.delete_BRepFill_IndexedDataMapOfOrientedShapeListOfShape
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.begin = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_begin, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.end = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_end, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.cbegin = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_cbegin, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.cend = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_cend, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Exchange = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Exchange, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Assign = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Assign, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Set = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Set, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.ReSize = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ReSize, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Add = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Add, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Contains = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Contains, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Substitute = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Substitute, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Swap = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Swap, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.RemoveLast = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_RemoveLast, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.RemoveFromIndex = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_RemoveFromIndex, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.RemoveKey = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_RemoveKey, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.FindKey = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindKey, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.FindFromIndex = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromIndex, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.ChangeFromIndex = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromIndex, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.__call__ = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape___call__, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.FindIndex = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindIndex, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.ChangeFromKey = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromKey, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Seek = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Seek, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.ChangeSeek = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeSeek, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.FindFromKey = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromKey, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Clear = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Clear, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape.Size = new_instancemethod(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Size, None, BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swigregister = _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swigregister
BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swigregister(BRepFill_IndexedDataMapOfOrientedShapeListOfShape)

class BRepFill_DataMapOfShapeHArray2OfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeHArray2OfShape(*args))
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeHArray2OfShape
BRepFill_DataMapOfShapeHArray2OfShape.begin = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_begin, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.end = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_end, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.cbegin = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_cbegin, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.cend = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_cend, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Exchange = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Exchange, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Assign, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Set, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ReSize, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Bind, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Bound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Bound, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_IsBound, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_UnBind, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Seek = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Seek, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Find, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.ChangeSeek = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ChangeSeek, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ChangeFind, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.__call__ = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape___call__, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Clear, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape.Size = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Size, None, BRepFill_DataMapOfShapeHArray2OfShape)
BRepFill_DataMapOfShapeHArray2OfShape_swigregister = _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_swigregister
BRepFill_DataMapOfShapeHArray2OfShape_swigregister(BRepFill_DataMapOfShapeHArray2OfShape)

class BRepFill_ListOfOffsetWire(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_ListOfOffsetWire_swiginit(self, _BRepFill.new_BRepFill_ListOfOffsetWire(*args))
    __swig_destroy__ = _BRepFill.delete_BRepFill_ListOfOffsetWire
BRepFill_ListOfOffsetWire.begin = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_begin, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.end = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_end, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.cbegin = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_cbegin, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.cend = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_cend, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Size = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Size, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Assign = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Assign, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Set = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Set, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Clear = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Clear, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.First = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_First, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Last = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Last, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Append = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Append, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Prepend = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Prepend, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.RemoveFirst = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_RemoveFirst, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Remove = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Remove, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.InsertBefore = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_InsertBefore, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.InsertAfter = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_InsertAfter, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire.Reverse = new_instancemethod(_BRepFill.BRepFill_ListOfOffsetWire_Reverse, None, BRepFill_ListOfOffsetWire)
BRepFill_ListOfOffsetWire_swigregister = _BRepFill.BRepFill_ListOfOffsetWire_swigregister
BRepFill_ListOfOffsetWire_swigregister(BRepFill_ListOfOffsetWire)

class BRepFill_ListIteratorOfListOfOffsetWire(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_swiginit(self, _BRepFill.new_BRepFill_ListIteratorOfListOfOffsetWire(*args))
    __swig_destroy__ = _BRepFill.delete_BRepFill_ListIteratorOfListOfOffsetWire
BRepFill_ListIteratorOfListOfOffsetWire.More = new_instancemethod(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_More, None, BRepFill_ListIteratorOfListOfOffsetWire)
BRepFill_ListIteratorOfListOfOffsetWire.Next = new_instancemethod(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Next, None, BRepFill_ListIteratorOfListOfOffsetWire)
BRepFill_ListIteratorOfListOfOffsetWire.Value = new_instancemethod(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Value, None, BRepFill_ListIteratorOfListOfOffsetWire)
BRepFill_ListIteratorOfListOfOffsetWire.ChangeValue = new_instancemethod(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_ChangeValue, None, BRepFill_ListIteratorOfListOfOffsetWire)
BRepFill_ListIteratorOfListOfOffsetWire_swigregister = _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_swigregister
BRepFill_ListIteratorOfListOfOffsetWire_swigregister(BRepFill_ListIteratorOfListOfOffsetWire)

class BRepFill_DataMapOfShapeSequenceOfPnt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeSequenceOfPnt(*args))
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeSequenceOfPnt
BRepFill_DataMapOfShapeSequenceOfPnt.begin = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_begin, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.end = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_end, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.cbegin = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_cbegin, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.cend = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_cend, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Exchange = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Exchange, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Assign, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Set, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ReSize, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Bind, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Bound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Bound, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_IsBound, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_UnBind, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Seek = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Seek, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Find, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.ChangeSeek = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ChangeSeek, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ChangeFind, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.__call__ = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt___call__, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Clear, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt.Size = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Size, None, BRepFill_DataMapOfShapeSequenceOfPnt)
BRepFill_DataMapOfShapeSequenceOfPnt_swigregister = _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_swigregister
BRepFill_DataMapOfShapeSequenceOfPnt_swigregister(BRepFill_DataMapOfShapeSequenceOfPnt)

class BRepFill_DataMapOfNodeDataMapOfShapeShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfNodeDataMapOfShapeShape(*args))
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfNodeDataMapOfShapeShape
BRepFill_DataMapOfNodeDataMapOfShapeShape.begin = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_begin, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.end = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_end, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.cbegin = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_cbegin, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.cend = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_cend, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Exchange = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Exchange, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Assign, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Set, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ReSize, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Bind, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Bound = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Bound, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_IsBound, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_UnBind, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Seek = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Seek, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Find, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.ChangeSeek = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ChangeSeek, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ChangeFind, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.__call__ = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape___call__, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Clear, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape.Size = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Size, None, BRepFill_DataMapOfNodeDataMapOfShapeShape)
BRepFill_DataMapOfNodeDataMapOfShapeShape_swigregister = _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_swigregister
BRepFill_DataMapOfNodeDataMapOfShapeShape_swigregister(BRepFill_DataMapOfNodeDataMapOfShapeShape)

class BRepFill_DataMapOfShapeDataMapOfShapeListOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeDataMapOfShapeListOfShape(*args))
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeDataMapOfShapeListOfShape
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.begin = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_begin, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.end = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_end, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.cbegin = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_cbegin, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.cend = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_cend, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Exchange = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Exchange, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Assign, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Set, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ReSize, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Bind, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Bound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Bound, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_IsBound, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_UnBind, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Seek = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Seek, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Find, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.ChangeSeek = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ChangeSeek, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ChangeFind, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.__call__ = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape___call__, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Clear, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape.Size = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Size, None, BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swigregister = _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swigregister
BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swigregister(BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)

class BRepFill_SequenceOfSection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_SequenceOfSection_swiginit(self, _BRepFill.new_BRepFill_SequenceOfSection(*args))
    delNode = staticmethod(_BRepFill.BRepFill_SequenceOfSection_delNode)
    __swig_destroy__ = _BRepFill.delete_BRepFill_SequenceOfSection
BRepFill_SequenceOfSection.begin = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_begin, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.end = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_end, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.cbegin = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_cbegin, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.cend = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_cend, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Size = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Size, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Length = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Length, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Lower = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Lower, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Upper = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Upper, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.IsEmpty = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_IsEmpty, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Reverse = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Reverse, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Exchange = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Exchange, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Clear = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Clear, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Assign = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Assign, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Set = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Set, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Remove = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Remove, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Append = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Append, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Prepend = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Prepend, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.InsertBefore = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_InsertBefore, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.InsertAfter = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_InsertAfter, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Split = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Split, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.First = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_First, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.ChangeFirst = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_ChangeFirst, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Last = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Last, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.ChangeLast = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_ChangeLast, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.Value = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_Value, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.ChangeValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_ChangeValue, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.__call__ = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection___call__, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection.SetValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfSection_SetValue, None, BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection_swigregister = _BRepFill.BRepFill_SequenceOfSection_swigregister
BRepFill_SequenceOfSection_swigregister(BRepFill_SequenceOfSection)

def BRepFill_SequenceOfSection_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _BRepFill.BRepFill_SequenceOfSection_delNode(theNode, theAl)
BRepFill_SequenceOfSection_delNode = _BRepFill.BRepFill_SequenceOfSection_delNode

class BRepFill_DataMapOfOrientedShapeListOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfOrientedShapeListOfShape(*args))
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfOrientedShapeListOfShape
BRepFill_DataMapOfOrientedShapeListOfShape.begin = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_begin, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.end = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_end, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.cbegin = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_cbegin, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.cend = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_cend, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Exchange = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Exchange, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Assign, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Set, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ReSize, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Bind, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Bound = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Bound, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_IsBound, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_UnBind, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Seek = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Seek, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Find, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.ChangeSeek = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ChangeSeek, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ChangeFind, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.__call__ = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape___call__, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Clear, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape.Size = new_instancemethod(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Size, None, BRepFill_DataMapOfOrientedShapeListOfShape)
BRepFill_DataMapOfOrientedShapeListOfShape_swigregister = _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_swigregister
BRepFill_DataMapOfOrientedShapeListOfShape_swigregister(BRepFill_DataMapOfOrientedShapeListOfShape)

class BRepFill_DataMapOfNodeShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfNodeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfNodeShape(*args))
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfNodeShape
BRepFill_DataMapOfNodeShape.begin = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_begin, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.end = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_end, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.cbegin = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_cbegin, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.cend = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_cend, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Exchange = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Exchange, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Assign, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Set, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_ReSize, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Bind, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Bound = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Bound, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_IsBound, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_UnBind, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Seek = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Seek, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Find, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.ChangeSeek = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_ChangeSeek, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_ChangeFind, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.__call__ = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape___call__, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Clear, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape.Size = new_instancemethod(_BRepFill.BRepFill_DataMapOfNodeShape_Size, None, BRepFill_DataMapOfNodeShape)
BRepFill_DataMapOfNodeShape_swigregister = _BRepFill.BRepFill_DataMapOfNodeShape_swigregister
BRepFill_DataMapOfNodeShape_swigregister(BRepFill_DataMapOfNodeShape)

class BRepFill_SequenceOfFaceAndOrder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_SequenceOfFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_SequenceOfFaceAndOrder(*args))
    delNode = staticmethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_delNode)
    __swig_destroy__ = _BRepFill.delete_BRepFill_SequenceOfFaceAndOrder
BRepFill_SequenceOfFaceAndOrder.begin = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_begin, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.end = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_end, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.cbegin = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_cbegin, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.cend = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_cend, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Size = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Size, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Length = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Length, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Lower = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Lower, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Upper = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Upper, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.IsEmpty = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_IsEmpty, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Reverse = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Reverse, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Exchange = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Exchange, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Clear = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Clear, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Assign = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Assign, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Set = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Set, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Remove = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Remove, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Append = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Append, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Prepend = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Prepend, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.InsertBefore = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_InsertBefore, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.InsertAfter = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_InsertAfter, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Split = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Split, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.First = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_First, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.ChangeFirst = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_ChangeFirst, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Last = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Last, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.ChangeLast = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_ChangeLast, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.Value = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Value, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.ChangeValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_ChangeValue, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.__call__ = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder___call__, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder.SetValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfFaceAndOrder_SetValue, None, BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder_swigregister = _BRepFill.BRepFill_SequenceOfFaceAndOrder_swigregister
BRepFill_SequenceOfFaceAndOrder_swigregister(BRepFill_SequenceOfFaceAndOrder)

def BRepFill_SequenceOfFaceAndOrder_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _BRepFill.BRepFill_SequenceOfFaceAndOrder_delNode(theNode, theAl)
BRepFill_SequenceOfFaceAndOrder_delNode = _BRepFill.BRepFill_SequenceOfFaceAndOrder_delNode

class BRepFill_DataMapOfShapeSequenceOfReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeSequenceOfReal(*args))
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeSequenceOfReal
BRepFill_DataMapOfShapeSequenceOfReal.begin = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_begin, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.end = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_end, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.cbegin = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_cbegin, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.cend = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_cend, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Exchange = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Exchange, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Assign = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Assign, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Set = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Set, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.ReSize = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ReSize, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Bind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Bind, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Bound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Bound, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.IsBound = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_IsBound, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.UnBind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_UnBind, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Seek = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Seek, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Find = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Find, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.ChangeSeek = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ChangeSeek, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.ChangeFind = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ChangeFind, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.__call__ = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal___call__, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Clear = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Clear, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal.Size = new_instancemethod(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Size, None, BRepFill_DataMapOfShapeSequenceOfReal)
BRepFill_DataMapOfShapeSequenceOfReal_swigregister = _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_swigregister
BRepFill_DataMapOfShapeSequenceOfReal_swigregister(BRepFill_DataMapOfShapeSequenceOfReal)

class BRepFill_SequenceOfEdgeFaceAndOrder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_SequenceOfEdgeFaceAndOrder(*args))
    delNode = staticmethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_delNode)
    __swig_destroy__ = _BRepFill.delete_BRepFill_SequenceOfEdgeFaceAndOrder
BRepFill_SequenceOfEdgeFaceAndOrder.begin = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_begin, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.end = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_end, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.cbegin = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_cbegin, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.cend = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_cend, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Size = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Size, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Length = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Length, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Lower = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Lower, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Upper = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Upper, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.IsEmpty = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_IsEmpty, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Reverse = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Reverse, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Exchange = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Exchange, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Clear = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Clear, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Assign = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Assign, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Set = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Set, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Remove = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Remove, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Append = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Append, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Prepend = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Prepend, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.InsertBefore = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_InsertBefore, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.InsertAfter = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_InsertAfter, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Split = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Split, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.First = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_First, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.ChangeFirst = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_ChangeFirst, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Last = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Last, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.ChangeLast = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_ChangeLast, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.Value = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Value, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.ChangeValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_ChangeValue, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.__call__ = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder___call__, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder.SetValue = new_instancemethod(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_SetValue, None, BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder_swigregister = _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_swigregister
BRepFill_SequenceOfEdgeFaceAndOrder_swigregister(BRepFill_SequenceOfEdgeFaceAndOrder)

def BRepFill_SequenceOfEdgeFaceAndOrder_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_delNode(theNode, theAl)
BRepFill_SequenceOfEdgeFaceAndOrder_delNode = _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_delNode

class brepfill(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Axe(*args) -> "Standard_Boolean &":
        """
        * Computes <AxeProf> as Follow. <Location> is the Position of the nearest vertex V of <Profile> to <Spine>.<XDirection> is confused with the tangent to <Spine> at the projected point of V on the Spine. <Direction> is normal to <Spine>. <Spine> is a plane wire or a plane face.
        	:param Spine:
        	:type Spine: TopoDS_Shape
        	:param Profile:
        	:type Profile: TopoDS_Wire
        	:param AxeProf:
        	:type AxeProf: gp_Ax3
        	:param ProfOnSpine:
        	:type ProfOnSpine: bool
        	:param Tol:
        	:type Tol: float
        	:rtype: void
        """
        return _BRepFill.brepfill_Axe(*args)

    Axe = staticmethod(Axe)

    def ComputeACR(*args) -> "void":
        """
        * Compute ACR on a wire
        	:param wire:
        	:type wire: TopoDS_Wire
        	:param ACR:
        	:type ACR: TColStd_Array1OfReal
        	:rtype: void
        """
        return _BRepFill.brepfill_ComputeACR(*args)

    ComputeACR = staticmethod(ComputeACR)

    def Face(*args) -> "TopoDS_Face":
        """
        * Computes a ruled surface between two edges.
        	:param Edge1:
        	:type Edge1: TopoDS_Edge
        	:param Edge2:
        	:type Edge2: TopoDS_Edge
        	:rtype: TopoDS_Face
        """
        return _BRepFill.brepfill_Face(*args)

    Face = staticmethod(Face)

    def InsertACR(*args) -> "TopoDS_Wire":
        """
        * Insert ACR on a wire
        	:param wire:
        	:type wire: TopoDS_Wire
        	:param ACRcuts:
        	:type ACRcuts: TColStd_Array1OfReal
        	:param prec:
        	:type prec: float
        	:rtype: TopoDS_Wire
        """
        return _BRepFill.brepfill_InsertACR(*args)

    InsertACR = staticmethod(InsertACR)

    def Shell(*args) -> "TopoDS_Shell":
        """
        * Computes a ruled surface between two wires. The wires must have the same number of edges.
        	:param Wire1:
        	:type Wire1: TopoDS_Wire
        	:param Wire2:
        	:type Wire2: TopoDS_Wire
        	:rtype: TopoDS_Shell
        """
        return _BRepFill.brepfill_Shell(*args)

    Shell = staticmethod(Shell)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepFill.brepfill_swiginit(self, _BRepFill.new_brepfill())
    __swig_destroy__ = _BRepFill.delete_brepfill
brepfill_swigregister = _BRepFill.brepfill_swigregister
brepfill_swigregister(brepfill)

def brepfill_Axe(*args) -> "Standard_Boolean &":
    """
    * Computes <AxeProf> as Follow. <Location> is the Position of the nearest vertex V of <Profile> to <Spine>.<XDirection> is confused with the tangent to <Spine> at the projected point of V on the Spine. <Direction> is normal to <Spine>. <Spine> is a plane wire or a plane face.
    	:param Spine:
    	:type Spine: TopoDS_Shape
    	:param Profile:
    	:type Profile: TopoDS_Wire
    	:param AxeProf:
    	:type AxeProf: gp_Ax3
    	:param ProfOnSpine:
    	:type ProfOnSpine: bool
    	:param Tol:
    	:type Tol: float
    	:rtype: void
    """
    return _BRepFill.brepfill_Axe(*args)

def brepfill_ComputeACR(*args) -> "void":
    """
    * Compute ACR on a wire
    	:param wire:
    	:type wire: TopoDS_Wire
    	:param ACR:
    	:type ACR: TColStd_Array1OfReal
    	:rtype: void
    """
    return _BRepFill.brepfill_ComputeACR(*args)

def brepfill_Face(*args) -> "TopoDS_Face":
    """
    * Computes a ruled surface between two edges.
    	:param Edge1:
    	:type Edge1: TopoDS_Edge
    	:param Edge2:
    	:type Edge2: TopoDS_Edge
    	:rtype: TopoDS_Face
    """
    return _BRepFill.brepfill_Face(*args)

def brepfill_InsertACR(*args) -> "TopoDS_Wire":
    """
    * Insert ACR on a wire
    	:param wire:
    	:type wire: TopoDS_Wire
    	:param ACRcuts:
    	:type ACRcuts: TColStd_Array1OfReal
    	:param prec:
    	:type prec: float
    	:rtype: TopoDS_Wire
    """
    return _BRepFill.brepfill_InsertACR(*args)

def brepfill_Shell(*args) -> "TopoDS_Shell":
    """
    * Computes a ruled surface between two wires. The wires must have the same number of edges.
    	:param Wire1:
    	:type Wire1: TopoDS_Wire
    	:param Wire2:
    	:type Wire2: TopoDS_Wire
    	:rtype: TopoDS_Shell
    """
    return _BRepFill.brepfill_Shell(*args)

class BRepFill_AdvancedEvolved(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor
        	:rtype: None
        """
        _BRepFill.BRepFill_AdvancedEvolved_swiginit(self, _BRepFill.new_BRepFill_AdvancedEvolved(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :param theErrorCode: default value is 0
        	:type theErrorCode: unsigned int *
        	:rtype: bool
        """
        return _BRepFill.BRepFill_AdvancedEvolved_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param theSpine:
        	:type theSpine: TopoDS_Wire
        	:param theProfile:
        	:type theProfile: TopoDS_Wire
        	:param theTolerance:
        	:type theTolerance: float
        	:param theSolidReq: default value is Standard_True
        	:type theSolidReq: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_AdvancedEvolved_Perform(self, *args)


    def SetParallelMode(self, *args) -> "void":
        """
        * Sets/Unsets computation in parallel mode
        	:param theVal:
        	:type theVal: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_AdvancedEvolved_SetParallelMode(self, *args)


    def SetTemporaryDirectory(self, *args) -> "void":
        """
        * Sets directory where the debug shapes will be saved
        	:param thePath:
        	:type thePath: char *
        	:rtype: None
        """
        return _BRepFill.BRepFill_AdvancedEvolved_SetTemporaryDirectory(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * returns the resulting shape.
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_AdvancedEvolved_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_AdvancedEvolved
BRepFill_AdvancedEvolved.IsDone = new_instancemethod(_BRepFill.BRepFill_AdvancedEvolved_IsDone, None, BRepFill_AdvancedEvolved)
BRepFill_AdvancedEvolved.Perform = new_instancemethod(_BRepFill.BRepFill_AdvancedEvolved_Perform, None, BRepFill_AdvancedEvolved)
BRepFill_AdvancedEvolved.SetParallelMode = new_instancemethod(_BRepFill.BRepFill_AdvancedEvolved_SetParallelMode, None, BRepFill_AdvancedEvolved)
BRepFill_AdvancedEvolved.SetTemporaryDirectory = new_instancemethod(_BRepFill.BRepFill_AdvancedEvolved_SetTemporaryDirectory, None, BRepFill_AdvancedEvolved)
BRepFill_AdvancedEvolved.Shape = new_instancemethod(_BRepFill.BRepFill_AdvancedEvolved_Shape, None, BRepFill_AdvancedEvolved)
BRepFill_AdvancedEvolved_swigregister = _BRepFill.BRepFill_AdvancedEvolved_swigregister
BRepFill_AdvancedEvolved_swigregister(BRepFill_AdvancedEvolved)

class BRepFill_ApproxSeewing(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param ML:
        	:type ML: BRepFill_MultiLine
        	:rtype: None
        """
        _BRepFill.BRepFill_ApproxSeewing_swiginit(self, _BRepFill.new_BRepFill_ApproxSeewing(*args))

    def Curve(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """
        * returns the approximation of the 3d Curve
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _BRepFill.BRepFill_ApproxSeewing_Curve(self, *args)


    def CurveOnF1(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        * returns the approximation of the PCurve on the first face of the MultiLine
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _BRepFill.BRepFill_ApproxSeewing_CurveOnF1(self, *args)


    def CurveOnF2(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        * returns the approximation of the PCurve on the first face of the MultiLine
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _BRepFill.BRepFill_ApproxSeewing_CurveOnF2(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_ApproxSeewing_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param ML:
        	:type ML: BRepFill_MultiLine
        	:rtype: None
        """
        return _BRepFill.BRepFill_ApproxSeewing_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ApproxSeewing
BRepFill_ApproxSeewing.Curve = new_instancemethod(_BRepFill.BRepFill_ApproxSeewing_Curve, None, BRepFill_ApproxSeewing)
BRepFill_ApproxSeewing.CurveOnF1 = new_instancemethod(_BRepFill.BRepFill_ApproxSeewing_CurveOnF1, None, BRepFill_ApproxSeewing)
BRepFill_ApproxSeewing.CurveOnF2 = new_instancemethod(_BRepFill.BRepFill_ApproxSeewing_CurveOnF2, None, BRepFill_ApproxSeewing)
BRepFill_ApproxSeewing.IsDone = new_instancemethod(_BRepFill.BRepFill_ApproxSeewing_IsDone, None, BRepFill_ApproxSeewing)
BRepFill_ApproxSeewing.Perform = new_instancemethod(_BRepFill.BRepFill_ApproxSeewing_Perform, None, BRepFill_ApproxSeewing)
BRepFill_ApproxSeewing_swigregister = _BRepFill.BRepFill_ApproxSeewing_swigregister
BRepFill_ApproxSeewing_swigregister(BRepFill_ApproxSeewing)

class BRepFill_CompatibleWires(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Sections:
        	:type Sections: TopTools_SequenceOfShape
        	:rtype: None
        """
        _BRepFill.BRepFill_CompatibleWires_swiginit(self, _BRepFill.new_BRepFill_CompatibleWires(*args))

    def Generated(self, *args) -> "TopTools_DataMapOfShapeListOfShape const &":
        """:rtype: TopTools_DataMapOfShapeListOfShape"""
        return _BRepFill.BRepFill_CompatibleWires_Generated(self, *args)


    def GeneratedShapes(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the shapes created from a subshape <SubSection> of a section.
        	:param SubSection:
        	:type SubSection: TopoDS_Edge
        	:rtype: TopTools_ListOfShape
        """
        return _BRepFill.BRepFill_CompatibleWires_GeneratedShapes(self, *args)


    def Init(self, *args) -> "void":
        """
        :param Sections:
        	:type Sections: TopTools_SequenceOfShape
        	:rtype: None
        """
        return _BRepFill.BRepFill_CompatibleWires_Init(self, *args)


    def IsDegeneratedFirstSection(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_CompatibleWires_IsDegeneratedFirstSection(self, *args)


    def IsDegeneratedLastSection(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_CompatibleWires_IsDegeneratedLastSection(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_CompatibleWires_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs CompatibleWires According to the orientation and the origin of each other
        	:param WithRotation: default value is Standard_True
        	:type WithRotation: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_CompatibleWires_Perform(self, *args)


    def SetPercent(self, *args) -> "void":
        """
        :param percent: default value is 0.01
        	:type percent: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_CompatibleWires_SetPercent(self, *args)


    def Shape(self, *args) -> "TopTools_SequenceOfShape const &":
        """
        * returns the generated sequence.
        	:rtype: TopTools_SequenceOfShape
        """
        return _BRepFill.BRepFill_CompatibleWires_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_CompatibleWires
BRepFill_CompatibleWires.Generated = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_Generated, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.GeneratedShapes = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_GeneratedShapes, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.Init = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_Init, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.IsDegeneratedFirstSection = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_IsDegeneratedFirstSection, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.IsDegeneratedLastSection = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_IsDegeneratedLastSection, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.IsDone = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_IsDone, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.Perform = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_Perform, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.SetPercent = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_SetPercent, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires.Shape = new_instancemethod(_BRepFill.BRepFill_CompatibleWires_Shape, None, BRepFill_CompatibleWires)
BRepFill_CompatibleWires_swigregister = _BRepFill.BRepFill_CompatibleWires_swigregister
BRepFill_CompatibleWires_swigregister(BRepFill_CompatibleWires)

class BRepFill_ComputeCLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * The MultiLine <Line> will be approximated until tolerances will be reached. The approximation will be done from degreemin to degreemax with a cutting if the corresponding boolean is True.
        	:param Line:
        	:type Line: BRepFill_MultiLine
        	:param degreemin: default value is 3
        	:type degreemin: int
        	:param degreemax: default value is 8
        	:type degreemax: int
        	:param Tolerance3d: default value is 1.0e-5
        	:type Tolerance3d: float
        	:param Tolerance2d: default value is 1.0e-5
        	:type Tolerance2d: float
        	:param cutting: default value is Standard_False
        	:type cutting: bool
        	:param FirstC: default value is AppParCurves_TangencyPoint
        	:type FirstC: AppParCurves_Constraint
        	:param LastC: default value is AppParCurves_TangencyPoint
        	:type LastC: AppParCurves_Constraint
        	:rtype: None
        * Initializes the fields of the algorithm.
        	:param degreemin: default value is 3
        	:type degreemin: int
        	:param degreemax: default value is 8
        	:type degreemax: int
        	:param Tolerance3d: default value is 1.0e-05
        	:type Tolerance3d: float
        	:param Tolerance2d: default value is 1.0e-05
        	:type Tolerance2d: float
        	:param cutting: default value is Standard_False
        	:type cutting: bool
        	:param FirstC: default value is AppParCurves_TangencyPoint
        	:type FirstC: AppParCurves_Constraint
        	:param LastC: default value is AppParCurves_TangencyPoint
        	:type LastC: AppParCurves_Constraint
        	:rtype: None
        """
        _BRepFill.BRepFill_ComputeCLine_swiginit(self, _BRepFill.new_BRepFill_ComputeCLine(*args))

    def Error(self, *args) -> "void":
        """
        * returns the tolerances 2d and 3d of the <Index> MultiCurve.
        	:param Index:
        	:type Index: int
        	:param tol3d:
        	:type tol3d: float
        	:param tol2d:
        	:type tol2d: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_ComputeCLine_Error(self, *args)


    def IsAllApproximated(self, *args) -> "Standard_Boolean":
        """
        * returns False if at a moment of the approximation, the status NoApproximation has been sent by the user when more points were needed.
        	:rtype: bool
        """
        return _BRepFill.BRepFill_ComputeCLine_IsAllApproximated(self, *args)


    def IsToleranceReached(self, *args) -> "Standard_Boolean":
        """
        * returns False if the status NoPointsAdded has been sent.
        	:rtype: bool
        """
        return _BRepFill.BRepFill_ComputeCLine_IsToleranceReached(self, *args)


    def NbMultiCurves(self, *args) -> "Standard_Integer":
        """
        * Returns the number of MultiCurve doing the approximation of the MultiLine.
        	:rtype: int
        """
        return _BRepFill.BRepFill_ComputeCLine_NbMultiCurves(self, *args)


    def Parameters(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:param firstp:
        	:type firstp: float
        	:param lastp:
        	:type lastp: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_ComputeCLine_Parameters(self, *args)


    def Perform(self, *args) -> "void":
        """
        * runs the algorithm after having initialized the fields.
        	:param Line:
        	:type Line: BRepFill_MultiLine
        	:rtype: None
        """
        return _BRepFill.BRepFill_ComputeCLine_Perform(self, *args)


    def SetConstraints(self, *args) -> "void":
        """
        * Changes the constraints of the approximation.
        	:param FirstC:
        	:type FirstC: AppParCurves_Constraint
        	:param LastC:
        	:type LastC: AppParCurves_Constraint
        	:rtype: None
        """
        return _BRepFill.BRepFill_ComputeCLine_SetConstraints(self, *args)


    def SetDegrees(self, *args) -> "void":
        """
        * changes the degrees of the approximation.
        	:param degreemin:
        	:type degreemin: int
        	:param degreemax:
        	:type degreemax: int
        	:rtype: None
        """
        return _BRepFill.BRepFill_ComputeCLine_SetDegrees(self, *args)


    def SetInvOrder(self, *args) -> "void":
        """
        * Set inverse order of degree selection: if theInvOrdr = true, current degree is chosen by inverse order - from maxdegree to mindegree. By default inverse order is used.
        	:param theInvOrder:
        	:type theInvOrder: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_ComputeCLine_SetInvOrder(self, *args)


    def SetMaxSegments(self, *args) -> "void":
        """
        * Changes the max number of segments, which is allowed for cutting.
        	:param theMaxSegments:
        	:type theMaxSegments: int
        	:rtype: None
        """
        return _BRepFill.BRepFill_ComputeCLine_SetMaxSegments(self, *args)


    def SetTolerances(self, *args) -> "void":
        """
        * Changes the tolerances of the approximation.
        	:param Tolerance3d:
        	:type Tolerance3d: float
        	:param Tolerance2d:
        	:type Tolerance2d: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_ComputeCLine_SetTolerances(self, *args)


    def Value(self, *args) -> "AppParCurves_MultiCurve":
        """
        * returns the approximation MultiCurve of range <Index>.
        	:param Index: default value is 1
        	:type Index: int
        	:rtype: AppParCurves_MultiCurve
        """
        return _BRepFill.BRepFill_ComputeCLine_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ComputeCLine
BRepFill_ComputeCLine.Error = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_Error, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.IsAllApproximated = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_IsAllApproximated, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.IsToleranceReached = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_IsToleranceReached, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.NbMultiCurves = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_NbMultiCurves, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.Parameters = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_Parameters, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.Perform = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_Perform, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.SetConstraints = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_SetConstraints, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.SetDegrees = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_SetDegrees, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.SetInvOrder = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_SetInvOrder, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.SetMaxSegments = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_SetMaxSegments, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.SetTolerances = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_SetTolerances, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine.Value = new_instancemethod(_BRepFill.BRepFill_ComputeCLine_Value, None, BRepFill_ComputeCLine)
BRepFill_ComputeCLine_swigregister = _BRepFill.BRepFill_ComputeCLine_swigregister
BRepFill_ComputeCLine_swigregister(BRepFill_ComputeCLine)

class BRepFill_CurveConstraint(OCC.Core.GeomPlate.GeomPlate_CurveConstraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create a constraint Order is the order of the constraint. The possible values for order are -1,0,1,2. Order i means constraints Gi Npt is the number of points associated with the constraint. TolDist is the maximum error to satisfy for G0 constraints TolAng is the maximum error to satisfy for G1 constraints TolCurv is the maximum error to satisfy for G2 constraints These errors can be replaced by laws of criterion.
        	:param Boundary:
        	:type Boundary: Adaptor3d_HCurveOnSurface
        	:param Order:
        	:type Order: int
        	:param NPt: default value is 10
        	:type NPt: int
        	:param TolDist: default value is 0.0001
        	:type TolDist: float
        	:param TolAng: default value is 0.01
        	:type TolAng: float
        	:param TolCurv: default value is 0.1
        	:type TolCurv: float
        	:rtype: None
        :param Boundary:
        	:type Boundary: Adaptor3d_HCurve
        	:param Tang:
        	:type Tang: int
        	:param NPt: default value is 10
        	:type NPt: int
        	:param TolDist: default value is 0.0001
        	:type TolDist: float
        	:rtype: None
        """
        _BRepFill.BRepFill_CurveConstraint_swiginit(self, _BRepFill.new_BRepFill_CurveConstraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_CurveConstraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_CurveConstraint
BRepFill_CurveConstraint_swigregister = _BRepFill.BRepFill_CurveConstraint_swigregister
BRepFill_CurveConstraint_swigregister(BRepFill_CurveConstraint)

class BRepFill_Draft(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Shape:
        	:type Shape: TopoDS_Shape
        	:param Dir:
        	:type Dir: gp_Dir
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        """
        _BRepFill.BRepFill_Draft_swiginit(self, _BRepFill.new_BRepFill_Draft(*args))

    def Generated(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of shapes generated from the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BRepFill.BRepFill_Draft_Generated(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_Draft_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param LengthMax:
        	:type LengthMax: float
        	:rtype: None
        :param Surface:
        	:type Surface: Geom_Surface
        	:param KeepInsideSurface: default value is Standard_True
        	:type KeepInsideSurface: bool
        	:rtype: None
        :param StopShape:
        	:type StopShape: TopoDS_Shape
        	:param KeepOutSide: default value is Standard_True
        	:type KeepOutSide: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_Draft_Perform(self, *args)


    def SetDraft(self, *args) -> "void":
        """
        :param IsInternal: default value is Standard_False
        	:type IsInternal: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_Draft_SetDraft(self, *args)


    def SetOptions(self, *args) -> "void":
        """
        :param Style: default value is BRepFill_Right
        	:type Style: BRepFill_TransitionStyle
        	:param AngleMin: default value is 0.01
        	:type AngleMin: float
        	:param AngleMax: default value is 3.0
        	:type AngleMax: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_Draft_SetOptions(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """:rtype: TopoDS_Shape"""
        return _BRepFill.BRepFill_Draft_Shape(self, *args)


    def Shell(self, *args) -> "TopoDS_Shell":
        """
        * Returns the draft surface To have the complete shape you have to use the Shape() methode.
        	:rtype: TopoDS_Shell
        """
        return _BRepFill.BRepFill_Draft_Shell(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Draft
BRepFill_Draft.Generated = new_instancemethod(_BRepFill.BRepFill_Draft_Generated, None, BRepFill_Draft)
BRepFill_Draft.IsDone = new_instancemethod(_BRepFill.BRepFill_Draft_IsDone, None, BRepFill_Draft)
BRepFill_Draft.Perform = new_instancemethod(_BRepFill.BRepFill_Draft_Perform, None, BRepFill_Draft)
BRepFill_Draft.SetDraft = new_instancemethod(_BRepFill.BRepFill_Draft_SetDraft, None, BRepFill_Draft)
BRepFill_Draft.SetOptions = new_instancemethod(_BRepFill.BRepFill_Draft_SetOptions, None, BRepFill_Draft)
BRepFill_Draft.Shape = new_instancemethod(_BRepFill.BRepFill_Draft_Shape, None, BRepFill_Draft)
BRepFill_Draft.Shell = new_instancemethod(_BRepFill.BRepFill_Draft_Shell, None, BRepFill_Draft)
BRepFill_Draft_swigregister = _BRepFill.BRepFill_Draft_swigregister
BRepFill_Draft_swigregister(BRepFill_Draft)

class BRepFill_EdgeFaceAndOrder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param anEdge:
        	:type anEdge: TopoDS_Edge
        	:param aFace:
        	:type aFace: TopoDS_Face
        	:param anOrder:
        	:type anOrder: GeomAbs_Shape
        	:rtype: None
        """
        _BRepFill.BRepFill_EdgeFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_EdgeFaceAndOrder(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_EdgeFaceAndOrder
BRepFill_EdgeFaceAndOrder_swigregister = _BRepFill.BRepFill_EdgeFaceAndOrder_swigregister
BRepFill_EdgeFaceAndOrder_swigregister(BRepFill_EdgeFaceAndOrder)

class BRepFill_Evolved(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Creates an evolved shape by sweeping the <Profile> along the <Spine>. <AxeProf> is used to set the position of <Profile> along <Spine> as follows: <AxeProf> slides on the profile with direction colinear to the normal to <Spine>, and its <XDirection> mixed with the tangent to <Spine>.
        	:param Spine:
        	:type Spine: TopoDS_Wire
        	:param Profile:
        	:type Profile: TopoDS_Wire
        	:param AxeProf:
        	:type AxeProf: gp_Ax3
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param Solid: default value is Standard_False
        	:type Solid: bool
        	:rtype: None
        * Creates an evolved shape by sweeping the <Profile> along the <Spine>
        	:param Spine:
        	:type Spine: TopoDS_Face
        	:param Profile:
        	:type Profile: TopoDS_Wire
        	:param AxeProf:
        	:type AxeProf: gp_Ax3
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param Solid: default value is Standard_False
        	:type Solid: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_Evolved_swiginit(self, _BRepFill.new_BRepFill_Evolved(*args))

    def Bottom(self, *args) -> "TopoDS_Shape const":
        """
        * Return the face Bottom if <Solid> is True in the constructor.
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_Evolved_Bottom(self, *args)


    def GeneratedShapes(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the shapes created from a subshape <SpineShape> of the spine and a subshape <ProfShape> on the profile.
        	:param SpineShape:
        	:type SpineShape: TopoDS_Shape
        	:param ProfShape:
        	:type ProfShape: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BRepFill.BRepFill_Evolved_GeneratedShapes(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_Evolved_IsDone(self, *args)


    def JoinType(self, *args) -> "GeomAbs_JoinType":
        """:rtype: GeomAbs_JoinType"""
        return _BRepFill.BRepFill_Evolved_JoinType(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs an evolved shape by sweeping the <Profile> along the <Spine>
        	:param Spine:
        	:type Spine: TopoDS_Wire
        	:param Profile:
        	:type Profile: TopoDS_Wire
        	:param AxeProf:
        	:type AxeProf: gp_Ax3
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param Solid: default value is Standard_False
        	:type Solid: bool
        	:rtype: None
        * Performs an evolved shape by sweeping the <Profile> along the <Spine>
        	:param Spine:
        	:type Spine: TopoDS_Face
        	:param Profile:
        	:type Profile: TopoDS_Wire
        	:param AxeProf:
        	:type AxeProf: gp_Ax3
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param Solid: default value is Standard_False
        	:type Solid: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_Evolved_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * returns the generated shape.
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_Evolved_Shape(self, *args)


    def Top(self, *args) -> "TopoDS_Shape const":
        """
        * Return the face Top if <Solid> is True in the constructor.
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_Evolved_Top(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Evolved
BRepFill_Evolved.Bottom = new_instancemethod(_BRepFill.BRepFill_Evolved_Bottom, None, BRepFill_Evolved)
BRepFill_Evolved.GeneratedShapes = new_instancemethod(_BRepFill.BRepFill_Evolved_GeneratedShapes, None, BRepFill_Evolved)
BRepFill_Evolved.IsDone = new_instancemethod(_BRepFill.BRepFill_Evolved_IsDone, None, BRepFill_Evolved)
BRepFill_Evolved.JoinType = new_instancemethod(_BRepFill.BRepFill_Evolved_JoinType, None, BRepFill_Evolved)
BRepFill_Evolved.Perform = new_instancemethod(_BRepFill.BRepFill_Evolved_Perform, None, BRepFill_Evolved)
BRepFill_Evolved.Shape = new_instancemethod(_BRepFill.BRepFill_Evolved_Shape, None, BRepFill_Evolved)
BRepFill_Evolved.Top = new_instancemethod(_BRepFill.BRepFill_Evolved_Top, None, BRepFill_Evolved)
BRepFill_Evolved_swigregister = _BRepFill.BRepFill_Evolved_swigregister
BRepFill_Evolved_swigregister(BRepFill_Evolved)

class BRepFill_FaceAndOrder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param aFace:
        	:type aFace: TopoDS_Face
        	:param anOrder:
        	:type anOrder: GeomAbs_Shape
        	:rtype: None
        """
        _BRepFill.BRepFill_FaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_FaceAndOrder(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_FaceAndOrder
BRepFill_FaceAndOrder_swigregister = _BRepFill.BRepFill_FaceAndOrder_swigregister
BRepFill_FaceAndOrder_swigregister(BRepFill_FaceAndOrder)

class BRepFill_Filling(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Standard_Integer":
        """
        * Adds a new constraint which also defines an edge of the wire of the face Order: Order of the constraint: GeomAbs_C0 : the surface has to pass by 3D representation of the edge GeomAbs_G1 : the surface has to pass by 3D representation of the edge and to respect tangency with the first face of the edge GeomAbs_G2 : the surface has to pass by 3D representation of the edge and to respect tangency and curvature with the first face of the edge.
        	:param anEdge:
        	:type anEdge: TopoDS_Edge
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:param IsBound: default value is Standard_True
        	:type IsBound: bool
        	:rtype: int
        * Adds a new constraint which also defines an edge of the wire of the face Order: Order of the constraint: GeomAbs_C0 : the surface has to pass by 3D representation of the edge GeomAbs_G1 : the surface has to pass by 3D representation of the edge and to respect tangency with the given face GeomAbs_G2 : the surface has to pass by 3D representation of the edge and to respect tangency and curvature with the given face.
        	:param anEdge:
        	:type anEdge: TopoDS_Edge
        	:param Support:
        	:type Support: TopoDS_Face
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:param IsBound: default value is Standard_True
        	:type IsBound: bool
        	:rtype: int
        * Adds a free constraint on a face. The corresponding edge has to be automatically recomputed. It is always a bound.
        	:param Support:
        	:type Support: TopoDS_Face
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:rtype: int
        * Adds a punctual constraint
        	:param Point:
        	:type Point: gp_Pnt
        	:rtype: int
        * Adds a punctual constraint.
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Support:
        	:type Support: TopoDS_Face
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:rtype: int
        """
        return _BRepFill.BRepFill_Filling_Add(self, *args)


    def __init__(self, *args):
        """
        * Constructor
        	:param Degree: default value is 3
        	:type Degree: int
        	:param NbPtsOnCur: default value is 15
        	:type NbPtsOnCur: int
        	:param NbIter: default value is 2
        	:type NbIter: int
        	:param Anisotropie: default value is Standard_False
        	:type Anisotropie: bool
        	:param Tol2d: default value is 0.00001
        	:type Tol2d: float
        	:param Tol3d: default value is 0.0001
        	:type Tol3d: float
        	:param TolAng: default value is 0.01
        	:type TolAng: float
        	:param TolCurv: default value is 0.1
        	:type TolCurv: float
        	:param MaxDeg: default value is 8
        	:type MaxDeg: int
        	:param MaxSegments: default value is 9
        	:type MaxSegments: int
        	:rtype: None
        """
        _BRepFill.BRepFill_Filling_swiginit(self, _BRepFill.new_BRepFill_Filling(*args))

    def Build(self, *args) -> "void":
        """
        * Builds the resulting faces
        	:rtype: None
        """
        return _BRepFill.BRepFill_Filling_Build(self, *args)


    def Face(self, *args) -> "TopoDS_Face":
        """:rtype: TopoDS_Face"""
        return _BRepFill.BRepFill_Filling_Face(self, *args)


    def G0Error(self, *args) -> "Standard_Real":
        """
        :rtype: float
        :param Index:
        	:type Index: int
        	:rtype: float
        """
        return _BRepFill.BRepFill_Filling_G0Error(self, *args)


    def G1Error(self, *args) -> "Standard_Real":
        """
        :rtype: float
        :param Index:
        	:type Index: int
        	:rtype: float
        """
        return _BRepFill.BRepFill_Filling_G1Error(self, *args)


    def G2Error(self, *args) -> "Standard_Real":
        """
        :rtype: float
        :param Index:
        	:type Index: int
        	:rtype: float
        """
        return _BRepFill.BRepFill_Filling_G2Error(self, *args)


    def Generated(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of shapes generated from the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BRepFill.BRepFill_Filling_Generated(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_Filling_IsDone(self, *args)


    def LoadInitSurface(self, *args) -> "void":
        """
        * Loads the initial Surface The initial surface must have orthogonal local coordinates, i.e. partial derivatives dS/du and dS/dv must be orthogonal at each point of surface. If this condition breaks, distortions of resulting surface are possible.
        	:param aFace:
        	:type aFace: TopoDS_Face
        	:rtype: None
        """
        return _BRepFill.BRepFill_Filling_LoadInitSurface(self, *args)


    def SetApproxParam(self, *args) -> "void":
        """
        * Sets the parameters used for approximation of the surface
        	:param MaxDeg: default value is 8
        	:type MaxDeg: int
        	:param MaxSegments: default value is 9
        	:type MaxSegments: int
        	:rtype: None
        """
        return _BRepFill.BRepFill_Filling_SetApproxParam(self, *args)


    def SetConstrParam(self, *args) -> "void":
        """
        * Sets the values of Tolerances used to control the constraint. Tol2d: Tol3d: it is the maximum distance allowed between the support surface and the constraints TolAng: it is the maximum angle allowed between the normal of the surface and the constraints TolCurv: it is the maximum difference of curvature allowed between the surface and the constraint
        	:param Tol2d: default value is 0.00001
        	:type Tol2d: float
        	:param Tol3d: default value is 0.0001
        	:type Tol3d: float
        	:param TolAng: default value is 0.01
        	:type TolAng: float
        	:param TolCurv: default value is 0.1
        	:type TolCurv: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_Filling_SetConstrParam(self, *args)


    def SetResolParam(self, *args) -> "void":
        """
        * Sets the parameters used for resolution. The default values of these parameters have been chosen for a good ratio quality/performance. Degree: it is the order of energy criterion to minimize for computing the deformation of the surface. The default value is 3 The recommanded value is i+2 where i is the maximum order of the constraints. NbPtsOnCur: it is the average number of points for discretisation of the edges. NbIter: it is the maximum number of iterations of the process. For each iteration the number of discretisation points is increased. Anisotropie:
        	:param Degree: default value is 3
        	:type Degree: int
        	:param NbPtsOnCur: default value is 15
        	:type NbPtsOnCur: int
        	:param NbIter: default value is 2
        	:type NbIter: int
        	:param Anisotropie: default value is Standard_False
        	:type Anisotropie: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_Filling_SetResolParam(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Filling
BRepFill_Filling.Add = new_instancemethod(_BRepFill.BRepFill_Filling_Add, None, BRepFill_Filling)
BRepFill_Filling.Build = new_instancemethod(_BRepFill.BRepFill_Filling_Build, None, BRepFill_Filling)
BRepFill_Filling.Face = new_instancemethod(_BRepFill.BRepFill_Filling_Face, None, BRepFill_Filling)
BRepFill_Filling.G0Error = new_instancemethod(_BRepFill.BRepFill_Filling_G0Error, None, BRepFill_Filling)
BRepFill_Filling.G1Error = new_instancemethod(_BRepFill.BRepFill_Filling_G1Error, None, BRepFill_Filling)
BRepFill_Filling.G2Error = new_instancemethod(_BRepFill.BRepFill_Filling_G2Error, None, BRepFill_Filling)
BRepFill_Filling.Generated = new_instancemethod(_BRepFill.BRepFill_Filling_Generated, None, BRepFill_Filling)
BRepFill_Filling.IsDone = new_instancemethod(_BRepFill.BRepFill_Filling_IsDone, None, BRepFill_Filling)
BRepFill_Filling.LoadInitSurface = new_instancemethod(_BRepFill.BRepFill_Filling_LoadInitSurface, None, BRepFill_Filling)
BRepFill_Filling.SetApproxParam = new_instancemethod(_BRepFill.BRepFill_Filling_SetApproxParam, None, BRepFill_Filling)
BRepFill_Filling.SetConstrParam = new_instancemethod(_BRepFill.BRepFill_Filling_SetConstrParam, None, BRepFill_Filling)
BRepFill_Filling.SetResolParam = new_instancemethod(_BRepFill.BRepFill_Filling_SetResolParam, None, BRepFill_Filling)
BRepFill_Filling_swigregister = _BRepFill.BRepFill_Filling_swigregister
BRepFill_Filling_swigregister(BRepFill_Filling)

class BRepFill_Generator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddWire(self, *args) -> "void":
        """
        :param Wire:
        	:type Wire: TopoDS_Wire
        	:rtype: None
        """
        return _BRepFill.BRepFill_Generator_AddWire(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _BRepFill.BRepFill_Generator_swiginit(self, _BRepFill.new_BRepFill_Generator(*args))

    def Generated(self, *args) -> "TopTools_DataMapOfShapeListOfShape const &":
        """
        * Returns all the shapes created
        	:rtype: TopTools_DataMapOfShapeListOfShape
        """
        return _BRepFill.BRepFill_Generator_Generated(self, *args)


    def GeneratedShapes(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the shapes created from a subshape <SSection> of a section.
        	:param SSection:
        	:type SSection: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BRepFill.BRepFill_Generator_GeneratedShapes(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Compute the shell.
        	:rtype: None
        """
        return _BRepFill.BRepFill_Generator_Perform(self, *args)


    def Shell(self, *args) -> "TopoDS_Shell const":
        """:rtype: TopoDS_Shell"""
        return _BRepFill.BRepFill_Generator_Shell(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Generator
BRepFill_Generator.AddWire = new_instancemethod(_BRepFill.BRepFill_Generator_AddWire, None, BRepFill_Generator)
BRepFill_Generator.Generated = new_instancemethod(_BRepFill.BRepFill_Generator_Generated, None, BRepFill_Generator)
BRepFill_Generator.GeneratedShapes = new_instancemethod(_BRepFill.BRepFill_Generator_GeneratedShapes, None, BRepFill_Generator)
BRepFill_Generator.Perform = new_instancemethod(_BRepFill.BRepFill_Generator_Perform, None, BRepFill_Generator)
BRepFill_Generator.Shell = new_instancemethod(_BRepFill.BRepFill_Generator_Shell, None, BRepFill_Generator)
BRepFill_Generator_swigregister = _BRepFill.BRepFill_Generator_swigregister
BRepFill_Generator_swigregister(BRepFill_Generator)

class BRepFill_LocationLaw(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Abscissa(self, *args) -> "Standard_Real":
        """
        * Return the curvilinear abscissa corresponding to a point of the path, defined by <Index> of Edge and a parameter on the edge.
        	:param Index:
        	:type Index: int
        	:param Param:
        	:type Param: float
        	:rtype: float
        """
        return _BRepFill.BRepFill_LocationLaw_Abscissa(self, *args)


    def CurvilinearBounds(self, *args) -> "void":
        """
        * Return the Curvilinear Bounds of the <Index> Law
        	:param Index:
        	:type Index: int
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_LocationLaw_CurvilinearBounds(self, *args)


    def D0(self, *args) -> "void":
        """
        * Apply the Law to a shape, for a given Curnilinear abscissa
        	:param Abscissa:
        	:type Abscissa: float
        	:param Section:
        	:type Section: TopoDS_Shape
        	:rtype: None
        """
        return _BRepFill.BRepFill_LocationLaw_D0(self, *args)


    def DeleteTransform(self, *args) -> "void":
        """:rtype: None"""
        return _BRepFill.BRepFill_LocationLaw_DeleteTransform(self, *args)


    def Edge(self, *args) -> "TopoDS_Edge const":
        """
        * Return the Edge of rank <Index> in the path <Index> have to be in [1, NbLaw()]
        	:param Index:
        	:type Index: int
        	:rtype: TopoDS_Edge
        """
        return _BRepFill.BRepFill_LocationLaw_Edge(self, *args)


    def GetStatus(self, *args) -> "GeomFill_PipeError":
        """
        * Return a error status, if the status is not PipeOk then it exist a parameter tlike the law is not valuable for t.
        	:rtype: GeomFill_PipeError
        """
        return _BRepFill.BRepFill_LocationLaw_GetStatus(self, *args)


    def Holes(self, *args) -> "void":
        """
        :param Interval:
        	:type Interval: TColStd_Array1OfInteger
        	:rtype: None
        """
        return _BRepFill.BRepFill_LocationLaw_Holes(self, *args)


    def IsClosed(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_LocationLaw_IsClosed(self, *args)


    def IsG1(self, *args) -> "Standard_Integer":
        """
        * Compute the Law's continuity beetween 2 edges of the path The result can be : -1 : Case Not connex 0 : It is connex (G0) 1 : It is tangent (G1)
        	:param Index:
        	:type Index: int
        	:param SpatialTolerance: default value is 1.0e-7
        	:type SpatialTolerance: float
        	:param AngularTolerance: default value is 1.0e-4
        	:type AngularTolerance: float
        	:rtype: int
        """
        return _BRepFill.BRepFill_LocationLaw_IsG1(self, *args)


    def law(self, *args) -> "opencascade::handle< GeomFill_LocationLaw > const &":
        """
        * Return the elementary Law of rank <Index> <Index> have to be in [1, NbLaw()]
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<GeomFill_LocationLaw>
        """
        return _BRepFill.BRepFill_LocationLaw_law(self, *args)


    def NbHoles(self, *args) -> "Standard_Integer":
        """
        :param Tol: default value is 1.0e-7
        	:type Tol: float
        	:rtype: int
        """
        return _BRepFill.BRepFill_LocationLaw_NbHoles(self, *args)


    def NbLaw(self, *args) -> "Standard_Integer":
        """
        * Return the number of elementary Law
        	:rtype: int
        """
        return _BRepFill.BRepFill_LocationLaw_NbLaw(self, *args)


    def Parameter(self, *args) -> "void":
        """
        * Find the index Law and the parmaeter, for a given Curnilinear abscissa
        	:param Abscissa:
        	:type Abscissa: float
        	:param Index:
        	:type Index: int
        	:param Param:
        	:type Param: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_LocationLaw_Parameter(self, *args)


    def PerformVertex(self, *args) -> "void":
        """
        * Compute <OutputVertex> like a transformation of <InputVertex> the transformation is given by evaluation of the location law in the vertex of rank <Index>. <Location> is used to manage discontinuities : - -1 : The law before the vertex is used. - 1 : The law after the vertex is used. - 0 : Average of the both laws is used.
        	:param Index:
        	:type Index: int
        	:param InputVertex:
        	:type InputVertex: TopoDS_Vertex
        	:param TolMin:
        	:type TolMin: float
        	:param OutputVertex:
        	:type OutputVertex: TopoDS_Vertex
        	:param Location: default value is 0
        	:type Location: int
        	:rtype: None
        """
        return _BRepFill.BRepFill_LocationLaw_PerformVertex(self, *args)


    def TransformInCompatibleLaw(self, *args) -> "void":
        """
        * Apply a linear transformation on each law, to reduce the dicontinuities of law at one rotation.
        	:param AngularTolerance:
        	:type AngularTolerance: float
        	:rtype: void
        """
        return _BRepFill.BRepFill_LocationLaw_TransformInCompatibleLaw(self, *args)


    def TransformInG0Law(self, *args) -> "void":
        """
        * Apply a linear transformation on each law, to have continuity of the global law beetween the edges.
        	:rtype: void
        """
        return _BRepFill.BRepFill_LocationLaw_TransformInG0Law(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex":
        """
        * Return the vertex of rank <Index> in the path <Index> have to be in [0, NbLaw()]
        	:param Index:
        	:type Index: int
        	:rtype: TopoDS_Vertex
        """
        return _BRepFill.BRepFill_LocationLaw_Vertex(self, *args)


    def Wire(self, *args) -> "TopoDS_Wire const":
        """
        * return the path
        	:rtype: TopoDS_Wire
        """
        return _BRepFill.BRepFill_LocationLaw_Wire(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_LocationLaw_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        _BRepFill.BRepFill_LocationLaw_swiginit(self, _BRepFill.new_BRepFill_LocationLaw())
    __swig_destroy__ = _BRepFill.delete_BRepFill_LocationLaw
BRepFill_LocationLaw.Abscissa = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Abscissa, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.CurvilinearBounds = new_instancemethod(_BRepFill.BRepFill_LocationLaw_CurvilinearBounds, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.D0 = new_instancemethod(_BRepFill.BRepFill_LocationLaw_D0, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.DeleteTransform = new_instancemethod(_BRepFill.BRepFill_LocationLaw_DeleteTransform, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.Edge = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Edge, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.GetStatus = new_instancemethod(_BRepFill.BRepFill_LocationLaw_GetStatus, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.Holes = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Holes, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.IsClosed = new_instancemethod(_BRepFill.BRepFill_LocationLaw_IsClosed, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.IsG1 = new_instancemethod(_BRepFill.BRepFill_LocationLaw_IsG1, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.law = new_instancemethod(_BRepFill.BRepFill_LocationLaw_law, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.NbHoles = new_instancemethod(_BRepFill.BRepFill_LocationLaw_NbHoles, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.NbLaw = new_instancemethod(_BRepFill.BRepFill_LocationLaw_NbLaw, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.Parameter = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Parameter, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.PerformVertex = new_instancemethod(_BRepFill.BRepFill_LocationLaw_PerformVertex, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.TransformInCompatibleLaw = new_instancemethod(_BRepFill.BRepFill_LocationLaw_TransformInCompatibleLaw, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.TransformInG0Law = new_instancemethod(_BRepFill.BRepFill_LocationLaw_TransformInG0Law, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.Vertex = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Vertex, None, BRepFill_LocationLaw)
BRepFill_LocationLaw.Wire = new_instancemethod(_BRepFill.BRepFill_LocationLaw_Wire, None, BRepFill_LocationLaw)
BRepFill_LocationLaw_swigregister = _BRepFill.BRepFill_LocationLaw_swigregister
BRepFill_LocationLaw_swigregister(BRepFill_LocationLaw)

class BRepFill_MultiLine(OCC.Core.AppCont.AppCont_Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Face1:
        	:type Face1: TopoDS_Face
        	:param Face2:
        	:type Face2: TopoDS_Face
        	:param Edge1:
        	:type Edge1: TopoDS_Edge
        	:param Edge2:
        	:type Edge2: TopoDS_Edge
        	:param Inv1:
        	:type Inv1: bool
        	:param Inv2:
        	:type Inv2: bool
        	:param Bissec:
        	:type Bissec: Geom2d_Curve
        	:rtype: None
        """
        _BRepFill.BRepFill_MultiLine_swiginit(self, _BRepFill.new_BRepFill_MultiLine(*args))

    def Continuity(self, *args) -> "GeomAbs_Shape":
        """
        * Returns the continuity betwwen the two faces seShape from GeomAbsparated by myBis.
        	:rtype: GeomAbs_Shape
        """
        return _BRepFill.BRepFill_MultiLine_Continuity(self, *args)


    def Curves(self, *args) -> "void":
        """
        * raises if IsParticularCase is <False>.
        	:param Curve:
        	:type Curve: Geom_Curve
        	:param PCurve1:
        	:type PCurve1: Geom2d_Curve
        	:param PCurve2:
        	:type PCurve2: Geom2d_Curve
        	:rtype: None
        """
        return _BRepFill.BRepFill_MultiLine_Curves(self, *args)


    def D1(self, *args) -> "Standard_Boolean":
        """
        * Returns the derivative at parameter <theU>.
        	:param theU:
        	:type theU: float
        	:param theVec2d:
        	:type theVec2d: NCollection_Array1<gp_Vec2d>
        	:param theVec:
        	:type theVec: NCollection_Array1<gp_Vec>
        	:rtype: bool
        """
        return _BRepFill.BRepFill_MultiLine_D1(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        * returns the first parameter of the Bissectrice.
        	:rtype: float
        """
        return _BRepFill.BRepFill_MultiLine_FirstParameter(self, *args)


    def IsParticularCase(self, *args) -> "Standard_Boolean":
        """
        * Search if the Projection of the Bissectrice on the faces needs an approximation or not. Returns true if the approximation is not needed.
        	:rtype: bool
        """
        return _BRepFill.BRepFill_MultiLine_IsParticularCase(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        * returns the last parameter of the Bissectrice.
        	:rtype: float
        """
        return _BRepFill.BRepFill_MultiLine_LastParameter(self, *args)


    def Value(self, *args) -> "Standard_Boolean":
        """
        * Returns the current point on the 3d curve
        	:param U:
        	:type U: float
        	:rtype: gp_Pnt
        * Returns the point at parameter <theU>.
        	:param theU:
        	:type theU: float
        	:param thePnt2d:
        	:type thePnt2d: NCollection_Array1<gp_Pnt2d>
        	:param thePnt:
        	:type thePnt: NCollection_Array1<gp_Pnt>
        	:rtype: bool
        """
        return _BRepFill.BRepFill_MultiLine_Value(self, *args)


    def Value3dOnF1OnF2(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param P3d:
        	:type P3d: gp_Pnt
        	:param PF1:
        	:type PF1: gp_Pnt2d
        	:param PF2:
        	:type PF2: gp_Pnt2d
        	:rtype: None
        """
        return _BRepFill.BRepFill_MultiLine_Value3dOnF1OnF2(self, *args)


    def ValueOnF1(self, *args) -> "gp_Pnt2d":
        """
        * returns the current point on the PCurve of the first face
        	:param U:
        	:type U: float
        	:rtype: gp_Pnt2d
        """
        return _BRepFill.BRepFill_MultiLine_ValueOnF1(self, *args)


    def ValueOnF2(self, *args) -> "gp_Pnt2d":
        """
        * returns the current point on the PCurve of the first face
        	:param U:
        	:type U: float
        	:rtype: gp_Pnt2d
        """
        return _BRepFill.BRepFill_MultiLine_ValueOnF2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_MultiLine
BRepFill_MultiLine.Continuity = new_instancemethod(_BRepFill.BRepFill_MultiLine_Continuity, None, BRepFill_MultiLine)
BRepFill_MultiLine.Curves = new_instancemethod(_BRepFill.BRepFill_MultiLine_Curves, None, BRepFill_MultiLine)
BRepFill_MultiLine.D1 = new_instancemethod(_BRepFill.BRepFill_MultiLine_D1, None, BRepFill_MultiLine)
BRepFill_MultiLine.FirstParameter = new_instancemethod(_BRepFill.BRepFill_MultiLine_FirstParameter, None, BRepFill_MultiLine)
BRepFill_MultiLine.IsParticularCase = new_instancemethod(_BRepFill.BRepFill_MultiLine_IsParticularCase, None, BRepFill_MultiLine)
BRepFill_MultiLine.LastParameter = new_instancemethod(_BRepFill.BRepFill_MultiLine_LastParameter, None, BRepFill_MultiLine)
BRepFill_MultiLine.Value = new_instancemethod(_BRepFill.BRepFill_MultiLine_Value, None, BRepFill_MultiLine)
BRepFill_MultiLine.Value3dOnF1OnF2 = new_instancemethod(_BRepFill.BRepFill_MultiLine_Value3dOnF1OnF2, None, BRepFill_MultiLine)
BRepFill_MultiLine.ValueOnF1 = new_instancemethod(_BRepFill.BRepFill_MultiLine_ValueOnF1, None, BRepFill_MultiLine)
BRepFill_MultiLine.ValueOnF2 = new_instancemethod(_BRepFill.BRepFill_MultiLine_ValueOnF2, None, BRepFill_MultiLine)
BRepFill_MultiLine_swigregister = _BRepFill.BRepFill_MultiLine_swigregister
BRepFill_MultiLine_swigregister(BRepFill_MultiLine)

class BRepFill_OffsetAncestors(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Ancestor(self, *args) -> "TopoDS_Shape const":
        """
        * may return a Null Shape if S1 is not a subShape of <Paral>; if Perform is not done.
        	:param S1:
        	:type S1: TopoDS_Edge
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_OffsetAncestors_Ancestor(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Paral:
        	:type Paral: BRepFill_OffsetWire
        	:rtype: None
        """
        _BRepFill.BRepFill_OffsetAncestors_swiginit(self, _BRepFill.new_BRepFill_OffsetAncestors(*args))

    def HasAncestor(self, *args) -> "Standard_Boolean":
        """
        :param S1:
        	:type S1: TopoDS_Edge
        	:rtype: bool
        """
        return _BRepFill.BRepFill_OffsetAncestors_HasAncestor(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_OffsetAncestors_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param Paral:
        	:type Paral: BRepFill_OffsetWire
        	:rtype: None
        """
        return _BRepFill.BRepFill_OffsetAncestors_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_OffsetAncestors
BRepFill_OffsetAncestors.Ancestor = new_instancemethod(_BRepFill.BRepFill_OffsetAncestors_Ancestor, None, BRepFill_OffsetAncestors)
BRepFill_OffsetAncestors.HasAncestor = new_instancemethod(_BRepFill.BRepFill_OffsetAncestors_HasAncestor, None, BRepFill_OffsetAncestors)
BRepFill_OffsetAncestors.IsDone = new_instancemethod(_BRepFill.BRepFill_OffsetAncestors_IsDone, None, BRepFill_OffsetAncestors)
BRepFill_OffsetAncestors.Perform = new_instancemethod(_BRepFill.BRepFill_OffsetAncestors_Perform, None, BRepFill_OffsetAncestors)
BRepFill_OffsetAncestors_swigregister = _BRepFill.BRepFill_OffsetAncestors_swigregister
BRepFill_OffsetAncestors_swigregister(BRepFill_OffsetAncestors)

class BRepFill_OffsetWire(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Spine:
        	:type Spine: TopoDS_Face
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param IsOpenResult: default value is Standard_False
        	:type IsOpenResult: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_OffsetWire_swiginit(self, _BRepFill.new_BRepFill_OffsetWire(*args))

    def GeneratedShapes(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the shapes created from a subshape <SpineShape> of the spine. Returns the last computed Offset.
        	:param SpineShape:
        	:type SpineShape: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BRepFill.BRepFill_OffsetWire_GeneratedShapes(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initialize the evaluation of Offseting.
        	:param Spine:
        	:type Spine: TopoDS_Face
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param IsOpenResult: default value is Standard_False
        	:type IsOpenResult: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_OffsetWire_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_OffsetWire_IsDone(self, *args)


    def JoinType(self, *args) -> "GeomAbs_JoinType":
        """:rtype: GeomAbs_JoinType"""
        return _BRepFill.BRepFill_OffsetWire_JoinType(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs an OffsetWire at an altitude <Alt> from the face ( According to the orientation of the face)
        	:param Offset:
        	:type Offset: float
        	:param Alt: default value is 0.0
        	:type Alt: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_OffsetWire_Perform(self, *args)


    def PerformWithBiLo(self, *args) -> "void":
        """
        * Performs an OffsetWire
        	:param WSP:
        	:type WSP: TopoDS_Face
        	:param Offset:
        	:type Offset: float
        	:param Locus:
        	:type Locus: BRepMAT2d_BisectingLocus
        	:param Link:
        	:type Link: BRepMAT2d_LinkTopoBilo
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param Alt: default value is 0.0
        	:type Alt: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_OffsetWire_PerformWithBiLo(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * returns the generated shape.
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_OffsetWire_Shape(self, *args)


    def Spine(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _BRepFill.BRepFill_OffsetWire_Spine(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_OffsetWire
BRepFill_OffsetWire.GeneratedShapes = new_instancemethod(_BRepFill.BRepFill_OffsetWire_GeneratedShapes, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.Init = new_instancemethod(_BRepFill.BRepFill_OffsetWire_Init, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.IsDone = new_instancemethod(_BRepFill.BRepFill_OffsetWire_IsDone, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.JoinType = new_instancemethod(_BRepFill.BRepFill_OffsetWire_JoinType, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.Perform = new_instancemethod(_BRepFill.BRepFill_OffsetWire_Perform, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.PerformWithBiLo = new_instancemethod(_BRepFill.BRepFill_OffsetWire_PerformWithBiLo, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.Shape = new_instancemethod(_BRepFill.BRepFill_OffsetWire_Shape, None, BRepFill_OffsetWire)
BRepFill_OffsetWire.Spine = new_instancemethod(_BRepFill.BRepFill_OffsetWire_Spine, None, BRepFill_OffsetWire)
BRepFill_OffsetWire_swigregister = _BRepFill.BRepFill_OffsetWire_swigregister
BRepFill_OffsetWire_swigregister(BRepFill_OffsetWire)

class BRepFill_Pipe(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Spine:
        	:type Spine: TopoDS_Wire
        	:param Profile:
        	:type Profile: TopoDS_Shape
        	:param aMode: default value is GeomFill_IsCorrectedFrenet
        	:type aMode: GeomFill_Trihedron
        	:param ForceApproxC1: default value is Standard_False
        	:type ForceApproxC1: bool
        	:param GeneratePartCase: default value is Standard_False
        	:type GeneratePartCase: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_Pipe_swiginit(self, _BRepFill.new_BRepFill_Pipe(*args))

    def Edge(self, *args) -> "TopoDS_Edge":
        """
        * Returns the edge created from an edge of the spine and a vertex of the profile. if the edge or the vertex are not in the spine or the profile.
        	:param ESpine:
        	:type ESpine: TopoDS_Edge
        	:param VProfile:
        	:type VProfile: TopoDS_Vertex
        	:rtype: TopoDS_Edge
        """
        return _BRepFill.BRepFill_Pipe_Edge(self, *args)


    def ErrorOnSurface(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _BRepFill.BRepFill_Pipe_ErrorOnSurface(self, *args)


    def Face(self, *args) -> "TopoDS_Face":
        """
        * Returns the face created from an edge of the spine and an edge of the profile. if the edges are not in the spine or the profile
        	:param ESpine:
        	:type ESpine: TopoDS_Edge
        	:param EProfile:
        	:type EProfile: TopoDS_Edge
        	:rtype: TopoDS_Face
        """
        return _BRepFill.BRepFill_Pipe_Face(self, *args)


    def FirstShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BRepFill.BRepFill_Pipe_FirstShape(self, *args)


    def Generated(self, *args) -> "void":
        """
        * Returns the list of shapes generated from the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:param L:
        	:type L: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepFill.BRepFill_Pipe_Generated(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BRepFill.BRepFill_Pipe_LastShape(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param Spine:
        	:type Spine: TopoDS_Wire
        	:param Profile:
        	:type Profile: TopoDS_Shape
        	:param GeneratePartCase: default value is Standard_False
        	:type GeneratePartCase: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_Pipe_Perform(self, *args)


    def PipeLine(self, *args) -> "TopoDS_Wire":
        """
        * Create a Wire by sweeping the Point along the <spine> if the <Spine> is undefined
        	:param Point:
        	:type Point: gp_Pnt
        	:rtype: TopoDS_Wire
        """
        return _BRepFill.BRepFill_Pipe_PipeLine(self, *args)


    def Profile(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BRepFill.BRepFill_Pipe_Profile(self, *args)


    def Section(self, *args) -> "TopoDS_Shape":
        """
        * Returns the shape created from the profile at the position of the vertex VSpine. if the vertex is not in the Spine
        	:param VSpine:
        	:type VSpine: TopoDS_Vertex
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_Pipe_Section(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BRepFill.BRepFill_Pipe_Shape(self, *args)


    def Spine(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BRepFill.BRepFill_Pipe_Spine(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Pipe
BRepFill_Pipe.Edge = new_instancemethod(_BRepFill.BRepFill_Pipe_Edge, None, BRepFill_Pipe)
BRepFill_Pipe.ErrorOnSurface = new_instancemethod(_BRepFill.BRepFill_Pipe_ErrorOnSurface, None, BRepFill_Pipe)
BRepFill_Pipe.Face = new_instancemethod(_BRepFill.BRepFill_Pipe_Face, None, BRepFill_Pipe)
BRepFill_Pipe.FirstShape = new_instancemethod(_BRepFill.BRepFill_Pipe_FirstShape, None, BRepFill_Pipe)
BRepFill_Pipe.Generated = new_instancemethod(_BRepFill.BRepFill_Pipe_Generated, None, BRepFill_Pipe)
BRepFill_Pipe.LastShape = new_instancemethod(_BRepFill.BRepFill_Pipe_LastShape, None, BRepFill_Pipe)
BRepFill_Pipe.Perform = new_instancemethod(_BRepFill.BRepFill_Pipe_Perform, None, BRepFill_Pipe)
BRepFill_Pipe.PipeLine = new_instancemethod(_BRepFill.BRepFill_Pipe_PipeLine, None, BRepFill_Pipe)
BRepFill_Pipe.Profile = new_instancemethod(_BRepFill.BRepFill_Pipe_Profile, None, BRepFill_Pipe)
BRepFill_Pipe.Section = new_instancemethod(_BRepFill.BRepFill_Pipe_Section, None, BRepFill_Pipe)
BRepFill_Pipe.Shape = new_instancemethod(_BRepFill.BRepFill_Pipe_Shape, None, BRepFill_Pipe)
BRepFill_Pipe.Spine = new_instancemethod(_BRepFill.BRepFill_Pipe_Spine, None, BRepFill_Pipe)
BRepFill_Pipe_swigregister = _BRepFill.BRepFill_Pipe_swigregister
BRepFill_Pipe_swigregister(BRepFill_Pipe)

class BRepFill_PipeShell(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Set an section. The corespondance with the spine, will be automaticaly performed.
        	:param Profile:
        	:type Profile: TopoDS_Shape
        	:param WithContact: default value is Standard_False
        	:type WithContact: bool
        	:param WithCorrection: default value is Standard_False
        	:type WithCorrection: bool
        	:rtype: None
        * Set an section. The corespondance with the spine, is given by <Location>
        	:param Profile:
        	:type Profile: TopoDS_Shape
        	:param Location:
        	:type Location: TopoDS_Vertex
        	:param WithContact: default value is Standard_False
        	:type WithContact: bool
        	:param WithCorrection: default value is Standard_False
        	:type WithCorrection: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_Add(self, *args)


    def __init__(self, *args):
        """
        * Set an sweep's mode If no mode are setted, the mode use in MakePipe is used
        	:param Spine:
        	:type Spine: TopoDS_Wire
        	:rtype: None
        """
        _BRepFill.BRepFill_PipeShell_swiginit(self, _BRepFill.new_BRepFill_PipeShell(*args))

    def Build(self, *args) -> "Standard_Boolean":
        """
        * Builds the resulting shape (redefined from MakeShape).
        	:rtype: bool
        """
        return _BRepFill.BRepFill_PipeShell_Build(self, *args)


    def DeleteProfile(self, *args) -> "void":
        """
        * Delete an section.
        	:param Profile:
        	:type Profile: TopoDS_Shape
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_DeleteProfile(self, *args)


    def ErrorOnSurface(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _BRepFill.BRepFill_PipeShell_ErrorOnSurface(self, *args)


    def FirstShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the TopoDS Shape of the bottom of the sweep.
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_PipeShell_FirstShape(self, *args)


    def Generated(self, *args) -> "void":
        """
        * Returns the list of shapes generated from the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:param L:
        	:type L: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_Generated(self, *args)


    def GetStatus(self, *args) -> "GeomFill_PipeError":
        """
        * Get a status, when Simulate or Build failed.
        	:rtype: GeomFill_PipeError
        """
        return _BRepFill.BRepFill_PipeShell_GetStatus(self, *args)


    def IsReady(self, *args) -> "Standard_Boolean":
        """
        * Say if <self> is ready to build the shape return False if <self> do not have section definition
        	:rtype: bool
        """
        return _BRepFill.BRepFill_PipeShell_IsReady(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the TopoDS Shape of the top of the sweep.
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_PipeShell_LastShape(self, *args)


    def MakeSolid(self, *args) -> "Standard_Boolean":
        """
        * Transform the sweeping Shell in Solid. If the section are not closed returns False
        	:rtype: bool
        """
        return _BRepFill.BRepFill_PipeShell_MakeSolid(self, *args)


    def Profiles(self, *args) -> "void":
        """
        * Returns the list of original profiles
        	:param theProfiles:
        	:type theProfiles: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_Profiles(self, *args)


    def Set(self, *args) -> "void":
        """
        * Set an Frenet or an CorrectedFrenet trihedron to perform the sweeping
        	:param Frenet: default value is Standard_False
        	:type Frenet: bool
        	:rtype: None
        * Set an fixed trihedron to perform the sweeping all sections will be parallel.
        	:param Axe:
        	:type Axe: gp_Ax2
        	:rtype: None
        * Set an fixed BiNormal direction to perform the sweeping
        	:param BiNormal:
        	:type BiNormal: gp_Dir
        	:rtype: None
        * Set support to the spine to define the BiNormal at the spine, like the normal the surfaces. Warning: To be effective, Each edge of the <spine> must have an representaion on one face of<SpineSupport>
        	:param SpineSupport:
        	:type SpineSupport: TopoDS_Shape
        	:rtype: bool
        * Set an auxiliary spine to define the Normal For each Point of the Spine P, an Point Q is evalued on <AuxiliarySpine> If <CurvilinearEquivalence> Q split <AuxiliarySpine> with the same length ratio than P split <Spline>. Else the plan define by P and the tangent to the <Spine> intersect <AuxiliarySpine> in Q. If <KeepContact> equals BRepFill_NoContact: The Normal is defined by the vector PQ. If <KeepContact> equals BRepFill_Contact: The Normal is defined to achieve that the sweeped section is in contact to the auxiliarySpine. The width of section is constant all along the path. In other words, the auxiliary spine lies on the swept surface, but not necessarily is a boundary of this surface. However, the auxiliary spine has to be close enough to the main spine to provide intersection with any section all along the path. If <KeepContact> equals BRepFill_ContactOnBorder: The auxiliary spine becomes a boundary of the swept surface and the width of section varies along the path.
        	:param AuxiliarySpine:
        	:type AuxiliarySpine: TopoDS_Wire
        	:param CurvilinearEquivalence: default value is Standard_True
        	:type CurvilinearEquivalence: bool
        	:param KeepContact: default value is BRepFill_NoContact
        	:type KeepContact: BRepFill_TypeOfContact
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_Set(self, *args)


    def SetDiscrete(self, *args) -> "void":
        """
        * Set a Discrete trihedron to perform the sweeping
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_SetDiscrete(self, *args)


    def SetForceApproxC1(self, *args) -> "void":
        """
        * Set the flag that indicates attempt to approximate a C1-continuous surface if a swept surface proved to be C0. Give section to sweep. Possibilities are : - Give one or sevral profile - Give one profile and an homotetic law. - Automatic compute of correspondance beetween profile, and section on the sweeped shape - correspondance beetween profile, and section on the sweeped shape defined by a vertex of the spine
        	:param ForceApproxC1:
        	:type ForceApproxC1: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_SetForceApproxC1(self, *args)


    def SetLaw(self, *args) -> "void":
        """
        * Set an section and an homotetic law. The homotetie's centers is given by point on the <Spine>.
        	:param Profile:
        	:type Profile: TopoDS_Shape
        	:param L:
        	:type L: Law_Function
        	:param WithContact: default value is Standard_False
        	:type WithContact: bool
        	:param WithCorrection: default value is Standard_False
        	:type WithCorrection: bool
        	:rtype: None
        * Set an section and an homotetic law. The homotetie center is given by point on the <Spine>
        	:param Profile:
        	:type Profile: TopoDS_Shape
        	:param L:
        	:type L: Law_Function
        	:param Location:
        	:type Location: TopoDS_Vertex
        	:param WithContact: default value is Standard_False
        	:type WithContact: bool
        	:param WithCorrection: default value is Standard_False
        	:type WithCorrection: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_SetLaw(self, *args)


    def SetMaxDegree(self, *args) -> "void":
        """
        * Define the maximum V degree of resulting surface
        	:param NewMaxDegree:
        	:type NewMaxDegree: int
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_SetMaxDegree(self, *args)


    def SetMaxSegments(self, *args) -> "void":
        """
        * Define the maximum number of spans in V-direction on resulting surface
        	:param NewMaxSegments:
        	:type NewMaxSegments: int
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_SetMaxSegments(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        :param Tol3d: default value is 1.0e-4
        	:type Tol3d: float
        	:param BoundTol: default value is 1.0e-4
        	:type BoundTol: float
        	:param TolAngular: default value is 1.0e-2
        	:type TolAngular: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_SetTolerance(self, *args)


    def SetTransition(self, *args) -> "void":
        """
        * Set the Transition Mode to manage discontinuities on the sweep.
        	:param Mode: default value is BRepFill_Modified
        	:type Mode: BRepFill_TransitionStyle
        	:param Angmin: default value is 1.0e-2
        	:type Angmin: float
        	:param Angmax: default value is 6.0
        	:type Angmax: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_SetTransition(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the result Shape.
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_PipeShell_Shape(self, *args)


    def Simulate(self, *args) -> "void":
        """
        * Perform simulation of the sweep : Somes Section are returned.
        	:param NumberOfSection:
        	:type NumberOfSection: int
        	:param Sections:
        	:type Sections: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepFill.BRepFill_PipeShell_Simulate(self, *args)


    def Spine(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the spine
        	:rtype: TopoDS_Wire
        """
        return _BRepFill.BRepFill_PipeShell_Spine(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_PipeShell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_PipeShell
BRepFill_PipeShell.Add = new_instancemethod(_BRepFill.BRepFill_PipeShell_Add, None, BRepFill_PipeShell)
BRepFill_PipeShell.Build = new_instancemethod(_BRepFill.BRepFill_PipeShell_Build, None, BRepFill_PipeShell)
BRepFill_PipeShell.DeleteProfile = new_instancemethod(_BRepFill.BRepFill_PipeShell_DeleteProfile, None, BRepFill_PipeShell)
BRepFill_PipeShell.ErrorOnSurface = new_instancemethod(_BRepFill.BRepFill_PipeShell_ErrorOnSurface, None, BRepFill_PipeShell)
BRepFill_PipeShell.FirstShape = new_instancemethod(_BRepFill.BRepFill_PipeShell_FirstShape, None, BRepFill_PipeShell)
BRepFill_PipeShell.Generated = new_instancemethod(_BRepFill.BRepFill_PipeShell_Generated, None, BRepFill_PipeShell)
BRepFill_PipeShell.GetStatus = new_instancemethod(_BRepFill.BRepFill_PipeShell_GetStatus, None, BRepFill_PipeShell)
BRepFill_PipeShell.IsReady = new_instancemethod(_BRepFill.BRepFill_PipeShell_IsReady, None, BRepFill_PipeShell)
BRepFill_PipeShell.LastShape = new_instancemethod(_BRepFill.BRepFill_PipeShell_LastShape, None, BRepFill_PipeShell)
BRepFill_PipeShell.MakeSolid = new_instancemethod(_BRepFill.BRepFill_PipeShell_MakeSolid, None, BRepFill_PipeShell)
BRepFill_PipeShell.Profiles = new_instancemethod(_BRepFill.BRepFill_PipeShell_Profiles, None, BRepFill_PipeShell)
BRepFill_PipeShell.Set = new_instancemethod(_BRepFill.BRepFill_PipeShell_Set, None, BRepFill_PipeShell)
BRepFill_PipeShell.SetDiscrete = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetDiscrete, None, BRepFill_PipeShell)
BRepFill_PipeShell.SetForceApproxC1 = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetForceApproxC1, None, BRepFill_PipeShell)
BRepFill_PipeShell.SetLaw = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetLaw, None, BRepFill_PipeShell)
BRepFill_PipeShell.SetMaxDegree = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetMaxDegree, None, BRepFill_PipeShell)
BRepFill_PipeShell.SetMaxSegments = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetMaxSegments, None, BRepFill_PipeShell)
BRepFill_PipeShell.SetTolerance = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetTolerance, None, BRepFill_PipeShell)
BRepFill_PipeShell.SetTransition = new_instancemethod(_BRepFill.BRepFill_PipeShell_SetTransition, None, BRepFill_PipeShell)
BRepFill_PipeShell.Shape = new_instancemethod(_BRepFill.BRepFill_PipeShell_Shape, None, BRepFill_PipeShell)
BRepFill_PipeShell.Simulate = new_instancemethod(_BRepFill.BRepFill_PipeShell_Simulate, None, BRepFill_PipeShell)
BRepFill_PipeShell.Spine = new_instancemethod(_BRepFill.BRepFill_PipeShell_Spine, None, BRepFill_PipeShell)
BRepFill_PipeShell_swigregister = _BRepFill.BRepFill_PipeShell_swigregister
BRepFill_PipeShell_swigregister(BRepFill_PipeShell)

class BRepFill_Section(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Profile:
        	:type Profile: TopoDS_Shape
        	:param V:
        	:type V: TopoDS_Vertex
        	:param WithContact:
        	:type WithContact: bool
        	:param WithCorrection:
        	:type WithCorrection: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_Section_swiginit(self, _BRepFill.new_BRepFill_Section(*args))

    def IsLaw(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_Section_IsLaw(self, *args)


    def IsPunctual(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_Section_IsPunctual(self, *args)


    def ModifiedShape(self, *args) -> "TopoDS_Shape":
        """
        :param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_Section_ModifiedShape(self, *args)


    def OriginalShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BRepFill.BRepFill_Section_OriginalShape(self, *args)


    def Set(self, *args) -> "void":
        """
        :param IsLaw:
        	:type IsLaw: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_Section_Set(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex const":
        """:rtype: TopoDS_Vertex"""
        return _BRepFill.BRepFill_Section_Vertex(self, *args)


    def Wire(self, *args) -> "TopoDS_Wire const":
        """:rtype: TopoDS_Wire"""
        return _BRepFill.BRepFill_Section_Wire(self, *args)


    def WithContact(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_Section_WithContact(self, *args)


    def WithCorrection(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_Section_WithCorrection(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Section
BRepFill_Section.IsLaw = new_instancemethod(_BRepFill.BRepFill_Section_IsLaw, None, BRepFill_Section)
BRepFill_Section.IsPunctual = new_instancemethod(_BRepFill.BRepFill_Section_IsPunctual, None, BRepFill_Section)
BRepFill_Section.ModifiedShape = new_instancemethod(_BRepFill.BRepFill_Section_ModifiedShape, None, BRepFill_Section)
BRepFill_Section.OriginalShape = new_instancemethod(_BRepFill.BRepFill_Section_OriginalShape, None, BRepFill_Section)
BRepFill_Section.Set = new_instancemethod(_BRepFill.BRepFill_Section_Set, None, BRepFill_Section)
BRepFill_Section.Vertex = new_instancemethod(_BRepFill.BRepFill_Section_Vertex, None, BRepFill_Section)
BRepFill_Section.Wire = new_instancemethod(_BRepFill.BRepFill_Section_Wire, None, BRepFill_Section)
BRepFill_Section.WithContact = new_instancemethod(_BRepFill.BRepFill_Section_WithContact, None, BRepFill_Section)
BRepFill_Section.WithCorrection = new_instancemethod(_BRepFill.BRepFill_Section_WithCorrection, None, BRepFill_Section)
BRepFill_Section_swigregister = _BRepFill.BRepFill_Section_swigregister
BRepFill_Section_swigregister(BRepFill_Section)

class BRepFill_SectionLaw(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ConcatenedLaw(self, *args) -> "opencascade::handle< GeomFill_SectionLaw >":
        """:rtype: opencascade::handle<GeomFill_SectionLaw>"""
        return _BRepFill.BRepFill_SectionLaw_ConcatenedLaw(self, *args)


    def Continuity(self, *args) -> "GeomAbs_Shape":
        """
        :param Index:
        	:type Index: int
        	:param TolAngular:
        	:type TolAngular: float
        	:rtype: GeomAbs_Shape
        """
        return _BRepFill.BRepFill_SectionLaw_Continuity(self, *args)


    def CurrentEdge(self, *args) -> "TopoDS_Edge":
        """:rtype: TopoDS_Edge"""
        return _BRepFill.BRepFill_SectionLaw_CurrentEdge(self, *args)


    def D0(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: void
        """
        return _BRepFill.BRepFill_SectionLaw_D0(self, *args)


    def IndexOfEdge(self, *args) -> "Standard_Integer":
        """
        :param anEdge:
        	:type anEdge: TopoDS_Shape
        	:rtype: int
        """
        return _BRepFill.BRepFill_SectionLaw_IndexOfEdge(self, *args)


    def Init(self, *args) -> "void":
        """
        :param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        """
        return _BRepFill.BRepFill_SectionLaw_Init(self, *args)


    def IsConstant(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_SectionLaw_IsConstant(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_SectionLaw_IsDone(self, *args)


    def IsUClosed(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_SectionLaw_IsUClosed(self, *args)


    def IsVClosed(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_SectionLaw_IsVClosed(self, *args)


    def IsVertex(self, *args) -> "Standard_Boolean":
        """
        * Say if the input shape is a vertex.
        	:rtype: bool
        """
        return _BRepFill.BRepFill_SectionLaw_IsVertex(self, *args)


    def law(self, *args) -> "opencascade::handle< GeomFill_SectionLaw > const &":
        """
        :param Index:
        	:type Index: int
        	:rtype: opencascade::handle<GeomFill_SectionLaw>
        """
        return _BRepFill.BRepFill_SectionLaw_law(self, *args)


    def NbLaw(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _BRepFill.BRepFill_SectionLaw_NbLaw(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex":
        """
        :param Index:
        	:type Index: int
        	:param Param:
        	:type Param: float
        	:rtype: TopoDS_Vertex
        """
        return _BRepFill.BRepFill_SectionLaw_Vertex(self, *args)


    def VertexTol(self, *args) -> "Standard_Real":
        """
        :param Index:
        	:type Index: int
        	:param Param:
        	:type Param: float
        	:rtype: float
        """
        return _BRepFill.BRepFill_SectionLaw_VertexTol(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_SectionLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_SectionLaw
BRepFill_SectionLaw.ConcatenedLaw = new_instancemethod(_BRepFill.BRepFill_SectionLaw_ConcatenedLaw, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.Continuity = new_instancemethod(_BRepFill.BRepFill_SectionLaw_Continuity, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.CurrentEdge = new_instancemethod(_BRepFill.BRepFill_SectionLaw_CurrentEdge, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.D0 = new_instancemethod(_BRepFill.BRepFill_SectionLaw_D0, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.IndexOfEdge = new_instancemethod(_BRepFill.BRepFill_SectionLaw_IndexOfEdge, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.Init = new_instancemethod(_BRepFill.BRepFill_SectionLaw_Init, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.IsConstant = new_instancemethod(_BRepFill.BRepFill_SectionLaw_IsConstant, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.IsDone = new_instancemethod(_BRepFill.BRepFill_SectionLaw_IsDone, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.IsUClosed = new_instancemethod(_BRepFill.BRepFill_SectionLaw_IsUClosed, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.IsVClosed = new_instancemethod(_BRepFill.BRepFill_SectionLaw_IsVClosed, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.IsVertex = new_instancemethod(_BRepFill.BRepFill_SectionLaw_IsVertex, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.law = new_instancemethod(_BRepFill.BRepFill_SectionLaw_law, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.NbLaw = new_instancemethod(_BRepFill.BRepFill_SectionLaw_NbLaw, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.Vertex = new_instancemethod(_BRepFill.BRepFill_SectionLaw_Vertex, None, BRepFill_SectionLaw)
BRepFill_SectionLaw.VertexTol = new_instancemethod(_BRepFill.BRepFill_SectionLaw_VertexTol, None, BRepFill_SectionLaw)
BRepFill_SectionLaw_swigregister = _BRepFill.BRepFill_SectionLaw_swigregister
BRepFill_SectionLaw_swigregister(BRepFill_SectionLaw)

class BRepFill_SectionPlacement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AbscissaOnPath(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _BRepFill.BRepFill_SectionPlacement_AbscissaOnPath(self, *args)


    def __init__(self, *args):
        """
        * Automatic placement
        	:param Law:
        	:type Law: BRepFill_LocationLaw
        	:param Section:
        	:type Section: TopoDS_Shape
        	:param WithContact: default value is Standard_False
        	:type WithContact: bool
        	:param WithCorrection: default value is Standard_False
        	:type WithCorrection: bool
        	:rtype: None
        * Placement on vertex
        	:param Law:
        	:type Law: BRepFill_LocationLaw
        	:param Section:
        	:type Section: TopoDS_Shape
        	:param Vertex:
        	:type Vertex: TopoDS_Shape
        	:param WithContact: default value is Standard_False
        	:type WithContact: bool
        	:param WithCorrection: default value is Standard_False
        	:type WithCorrection: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_SectionPlacement_swiginit(self, _BRepFill.new_BRepFill_SectionPlacement(*args))

    def Transformation(self, *args) -> "gp_Trsf const":
        """:rtype: gp_Trsf"""
        return _BRepFill.BRepFill_SectionPlacement_Transformation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_SectionPlacement
BRepFill_SectionPlacement.AbscissaOnPath = new_instancemethod(_BRepFill.BRepFill_SectionPlacement_AbscissaOnPath, None, BRepFill_SectionPlacement)
BRepFill_SectionPlacement.Transformation = new_instancemethod(_BRepFill.BRepFill_SectionPlacement_Transformation, None, BRepFill_SectionPlacement)
BRepFill_SectionPlacement_swigregister = _BRepFill.BRepFill_SectionPlacement_swigregister
BRepFill_SectionPlacement_swigregister(BRepFill_SectionPlacement)

class BRepFill_Sweep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Section:
        	:type Section: BRepFill_SectionLaw
        	:param Location:
        	:type Location: BRepFill_LocationLaw
        	:param WithKPart:
        	:type WithKPart: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_Sweep_swiginit(self, _BRepFill.new_BRepFill_Sweep(*args))

    def Build(self, *args) -> "void":
        """
        * Build the Sweep Surface Transition define Transition strategy Approx define Approximation Strategy - GeomFill_Section : The composed Function Location X Section is directly approximed. - GeomFill_Location : The location law is approximed, and the SweepSurface is bulid algebric composition of approximed location law and section law This option is Ok, if Section.Surface() methode is effective. Continuity : The continuity in v waiting on the surface Degmax : The maximum degree in v requiered on the surface Segmax : The maximum number of span in v requiered on the surface.
        	:param ReversedEdges:
        	:type ReversedEdges: TopTools_MapOfShape
        	:param Tapes:
        	:type Tapes: BRepFill_DataMapOfShapeHArray2OfShape
        	:param Rails:
        	:type Rails: BRepFill_DataMapOfShapeHArray2OfShape
        	:param Transition: default value is BRepFill_Modified
        	:type Transition: BRepFill_TransitionStyle
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Approx: default value is GeomFill_Location
        	:type Approx: GeomFill_ApproxStyle
        	:param Degmax: default value is 11
        	:type Degmax: int
        	:param Segmax: default value is 30
        	:type Segmax: int
        	:rtype: None
        """
        return _BRepFill.BRepFill_Sweep_Build(self, *args)


    def ErrorOnSurface(self, *args) -> "Standard_Real":
        """
        * Get the Approximation error.
        	:rtype: float
        """
        return _BRepFill.BRepFill_Sweep_ErrorOnSurface(self, *args)


    def InterFaces(self, *args) -> "opencascade::handle< TopTools_HArray2OfShape >":
        """:rtype: opencascade::handle<TopTools_HArray2OfShape>"""
        return _BRepFill.BRepFill_Sweep_InterFaces(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Say if the Shape is Build.
        	:rtype: bool
        """
        return _BRepFill.BRepFill_Sweep_IsDone(self, *args)


    def Sections(self, *args) -> "opencascade::handle< TopTools_HArray2OfShape >":
        """:rtype: opencascade::handle<TopTools_HArray2OfShape>"""
        return _BRepFill.BRepFill_Sweep_Sections(self, *args)


    def SetAngularControl(self, *args) -> "void":
        """
        * Tolerance To controle Corner management. //! If the discontinuity is lesser than <AngleMin> in radian The Transition Performed will be alway 'Modified'
        	:param AngleMin: default value is 0.01
        	:type AngleMin: float
        	:param AngleMax: default value is 6.0
        	:type AngleMax: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_Sweep_SetAngularControl(self, *args)


    def SetBounds(self, *args) -> "void":
        """
        :param FirstShape:
        	:type FirstShape: TopoDS_Wire
        	:param LastShape:
        	:type LastShape: TopoDS_Wire
        	:rtype: None
        """
        return _BRepFill.BRepFill_Sweep_SetBounds(self, *args)


    def SetForceApproxC1(self, *args) -> "void":
        """
        * Set the flag that indicates attempt to approximate a C1-continuous surface if a swept surface proved to be C0.
        	:param ForceApproxC1:
        	:type ForceApproxC1: bool
        	:rtype: None
        """
        return _BRepFill.BRepFill_Sweep_SetForceApproxC1(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * Set Approximation Tolerance Tol3d : Tolerance to surface approximation Tol2d : Tolerance used to perform curve approximation Normaly the 2d curve are approximated with a tolerance given by the resolution on support surfaces, but if this tolerance is too large Tol2d is used. TolAngular : Tolerance (in radian) to control the angle beetween tangents on the section law and tangent of iso-v on approximed surface
        	:param Tol3d:
        	:type Tol3d: float
        	:param BoundTol: default value is 1.0
        	:type BoundTol: float
        	:param Tol2d: default value is 1.0e-5
        	:type Tol2d: float
        	:param TolAngular: default value is 1.0e-2
        	:type TolAngular: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_Sweep_SetTolerance(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * returns the Sweeping Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_Sweep_Shape(self, *args)


    def SubShape(self, *args) -> "opencascade::handle< TopTools_HArray2OfShape >":
        """:rtype: opencascade::handle<TopTools_HArray2OfShape>"""
        return _BRepFill.BRepFill_Sweep_SubShape(self, *args)


    def Tape(self, *args) -> "TopoDS_Shape":
        """
        * returns the Tape corresponding to Index-th edge of section
        	:param Index:
        	:type Index: int
        	:rtype: TopoDS_Shape
        """
        return _BRepFill.BRepFill_Sweep_Tape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Sweep
BRepFill_Sweep.Build = new_instancemethod(_BRepFill.BRepFill_Sweep_Build, None, BRepFill_Sweep)
BRepFill_Sweep.ErrorOnSurface = new_instancemethod(_BRepFill.BRepFill_Sweep_ErrorOnSurface, None, BRepFill_Sweep)
BRepFill_Sweep.InterFaces = new_instancemethod(_BRepFill.BRepFill_Sweep_InterFaces, None, BRepFill_Sweep)
BRepFill_Sweep.IsDone = new_instancemethod(_BRepFill.BRepFill_Sweep_IsDone, None, BRepFill_Sweep)
BRepFill_Sweep.Sections = new_instancemethod(_BRepFill.BRepFill_Sweep_Sections, None, BRepFill_Sweep)
BRepFill_Sweep.SetAngularControl = new_instancemethod(_BRepFill.BRepFill_Sweep_SetAngularControl, None, BRepFill_Sweep)
BRepFill_Sweep.SetBounds = new_instancemethod(_BRepFill.BRepFill_Sweep_SetBounds, None, BRepFill_Sweep)
BRepFill_Sweep.SetForceApproxC1 = new_instancemethod(_BRepFill.BRepFill_Sweep_SetForceApproxC1, None, BRepFill_Sweep)
BRepFill_Sweep.SetTolerance = new_instancemethod(_BRepFill.BRepFill_Sweep_SetTolerance, None, BRepFill_Sweep)
BRepFill_Sweep.Shape = new_instancemethod(_BRepFill.BRepFill_Sweep_Shape, None, BRepFill_Sweep)
BRepFill_Sweep.SubShape = new_instancemethod(_BRepFill.BRepFill_Sweep_SubShape, None, BRepFill_Sweep)
BRepFill_Sweep.Tape = new_instancemethod(_BRepFill.BRepFill_Sweep_Tape, None, BRepFill_Sweep)
BRepFill_Sweep_swigregister = _BRepFill.BRepFill_Sweep_swigregister
BRepFill_Sweep_swigregister(BRepFill_Sweep)

class BRepFill_TrimEdgeTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddOrConfuse(self, *args) -> "void":
        """
        :param Start:
        	:type Start: bool
        	:param Edge1:
        	:type Edge1: TopoDS_Edge
        	:param Edge2:
        	:type Edge2: TopoDS_Edge
        	:param Params:
        	:type Params: TColgp_SequenceOfPnt
        	:rtype: None
        """
        return _BRepFill.BRepFill_TrimEdgeTool_AddOrConfuse(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Bisec:
        	:type Bisec: Bisector_Bisec
        	:param S1:
        	:type S1: Geom2d_Geometry
        	:param S2:
        	:type S2: Geom2d_Geometry
        	:param Offset:
        	:type Offset: float
        	:rtype: None
        """
        _BRepFill.BRepFill_TrimEdgeTool_swiginit(self, _BRepFill.new_BRepFill_TrimEdgeTool(*args))

    def IntersectWith(self, *args) -> "void":
        """
        :param Edge1:
        	:type Edge1: TopoDS_Edge
        	:param Edge2:
        	:type Edge2: TopoDS_Edge
        	:param InitShape1:
        	:type InitShape1: TopoDS_Shape
        	:param InitShape2:
        	:type InitShape2: TopoDS_Shape
        	:param End1:
        	:type End1: TopoDS_Vertex
        	:param End2:
        	:type End2: TopoDS_Vertex
        	:param theJoinType:
        	:type theJoinType: GeomAbs_JoinType
        	:param IsOpenResult:
        	:type IsOpenResult: bool
        	:param Params:
        	:type Params: TColgp_SequenceOfPnt
        	:rtype: None
        """
        return _BRepFill.BRepFill_TrimEdgeTool_IntersectWith(self, *args)


    def IsInside(self, *args) -> "Standard_Boolean":
        """
        :param P:
        	:type P: gp_Pnt2d
        	:rtype: bool
        """
        return _BRepFill.BRepFill_TrimEdgeTool_IsInside(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_TrimEdgeTool
BRepFill_TrimEdgeTool.AddOrConfuse = new_instancemethod(_BRepFill.BRepFill_TrimEdgeTool_AddOrConfuse, None, BRepFill_TrimEdgeTool)
BRepFill_TrimEdgeTool.IntersectWith = new_instancemethod(_BRepFill.BRepFill_TrimEdgeTool_IntersectWith, None, BRepFill_TrimEdgeTool)
BRepFill_TrimEdgeTool.IsInside = new_instancemethod(_BRepFill.BRepFill_TrimEdgeTool_IsInside, None, BRepFill_TrimEdgeTool)
BRepFill_TrimEdgeTool_swigregister = _BRepFill.BRepFill_TrimEdgeTool_swigregister
BRepFill_TrimEdgeTool_swigregister(BRepFill_TrimEdgeTool)

class BRepFill_TrimShellCorner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddBounds(self, *args) -> "void":
        """
        :param Bounds:
        	:type Bounds: TopTools_HArray2OfShape
        	:rtype: None
        """
        return _BRepFill.BRepFill_TrimShellCorner_AddBounds(self, *args)


    def AddUEdges(self, *args) -> "void":
        """
        :param theUEdges:
        	:type theUEdges: TopTools_HArray2OfShape
        	:rtype: None
        """
        return _BRepFill.BRepFill_TrimShellCorner_AddUEdges(self, *args)


    def AddVEdges(self, *args) -> "void":
        """
        :param theVEdges:
        	:type theVEdges: TopTools_HArray2OfShape
        	:param theIndex:
        	:type theIndex: int
        	:rtype: None
        """
        return _BRepFill.BRepFill_TrimShellCorner_AddVEdges(self, *args)


    def __init__(self, *args):
        """
        * Constructor: takes faces to intersect, type of transition (it can be RightCorner or RoundCorner) and axis of bisector plane
        	:param theFaces:
        	:type theFaces: TopTools_HArray2OfShape
        	:param theTransition:
        	:type theTransition: BRepFill_TransitionStyle
        	:param theAxeOfBisPlane:
        	:type theAxeOfBisPlane: gp_Ax2
        	:rtype: None
        """
        _BRepFill.BRepFill_TrimShellCorner_swiginit(self, _BRepFill.new_BRepFill_TrimShellCorner(*args))

    def HasSection(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_TrimShellCorner_HasSection(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepFill.BRepFill_TrimShellCorner_IsDone(self, *args)


    def Modified(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param theModified:
        	:type theModified: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepFill.BRepFill_TrimShellCorner_Modified(self, *args)


    def Perform(self, *args) -> "void":
        """:rtype: None"""
        return _BRepFill.BRepFill_TrimShellCorner_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_TrimShellCorner
BRepFill_TrimShellCorner.AddBounds = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_AddBounds, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.AddUEdges = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_AddUEdges, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.AddVEdges = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_AddVEdges, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.HasSection = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_HasSection, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.IsDone = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_IsDone, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.Modified = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_Modified, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner.Perform = new_instancemethod(_BRepFill.BRepFill_TrimShellCorner_Perform, None, BRepFill_TrimShellCorner)
BRepFill_TrimShellCorner_swigregister = _BRepFill.BRepFill_TrimShellCorner_swigregister
BRepFill_TrimShellCorner_swigregister(BRepFill_TrimShellCorner)

class BRepFill_TrimSurfaceTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Bis:
        	:type Bis: Geom2d_Curve
        	:param Face1:
        	:type Face1: TopoDS_Face
        	:param Face2:
        	:type Face2: TopoDS_Face
        	:param Edge1:
        	:type Edge1: TopoDS_Edge
        	:param Edge2:
        	:type Edge2: TopoDS_Edge
        	:param Inv1:
        	:type Inv1: bool
        	:param Inv2:
        	:type Inv2: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_TrimSurfaceTool_swiginit(self, _BRepFill.new_BRepFill_TrimSurfaceTool(*args))

    def IntersectWith(self, *args) -> "void":
        """
        * Intersect <Bis> with the projection of the edges <EdgeOnFi> and returns the intersecting parameters on Bis and on the edges P.X() : Parameter on Bis P.Y() : Parameter on EdgeOnF1 P.Z() : Parameter on EdgeOnF2 raises if <Edge> is not a edge of Face1 or Face2.
        	:param EdgeOnF1:
        	:type EdgeOnF1: TopoDS_Edge
        	:param EdgeOnF2:
        	:type EdgeOnF2: TopoDS_Edge
        	:param Points:
        	:type Points: TColgp_SequenceOfPnt
        	:rtype: None
        """
        return _BRepFill.BRepFill_TrimSurfaceTool_IntersectWith(self, *args)


    def IsOnFace(self, *args) -> "Standard_Boolean":
        """
        * returns True if the Line (P, DZ) intersect the Faces
        	:param Point:
        	:type Point: gp_Pnt2d
        	:rtype: bool
        """
        return _BRepFill.BRepFill_TrimSurfaceTool_IsOnFace(self, *args)


    def ProjOn(self, *args) -> "Standard_Real":
        """
        * returns the parameter of the point <Point> on the Edge <Edge>, assuming that the point is on the edge.
        	:param Point:
        	:type Point: gp_Pnt2d
        	:param Edge:
        	:type Edge: TopoDS_Edge
        	:rtype: float
        """
        return _BRepFill.BRepFill_TrimSurfaceTool_ProjOn(self, *args)


    def Project(self, *args) -> "void":
        """
        :param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Curve:
        	:type Curve: Geom_Curve
        	:param PCurve1:
        	:type PCurve1: Geom2d_Curve
        	:param PCurve2:
        	:type PCurve2: Geom2d_Curve
        	:param myCont:
        	:type myCont: GeomAbs_Shape
        	:rtype: None
        """
        return _BRepFill.BRepFill_TrimSurfaceTool_Project(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_TrimSurfaceTool
BRepFill_TrimSurfaceTool.IntersectWith = new_instancemethod(_BRepFill.BRepFill_TrimSurfaceTool_IntersectWith, None, BRepFill_TrimSurfaceTool)
BRepFill_TrimSurfaceTool.IsOnFace = new_instancemethod(_BRepFill.BRepFill_TrimSurfaceTool_IsOnFace, None, BRepFill_TrimSurfaceTool)
BRepFill_TrimSurfaceTool.ProjOn = new_instancemethod(_BRepFill.BRepFill_TrimSurfaceTool_ProjOn, None, BRepFill_TrimSurfaceTool)
BRepFill_TrimSurfaceTool.Project = new_instancemethod(_BRepFill.BRepFill_TrimSurfaceTool_Project, None, BRepFill_TrimSurfaceTool)
BRepFill_TrimSurfaceTool_swigregister = _BRepFill.BRepFill_TrimSurfaceTool_swigregister
BRepFill_TrimSurfaceTool_swigregister(BRepFill_TrimSurfaceTool)

class BRepFill_ACRLaw(BRepFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Path:
        	:type Path: TopoDS_Wire
        	:param Law:
        	:type Law: GeomFill_LocationGuide
        	:rtype: None
        """
        _BRepFill.BRepFill_ACRLaw_swiginit(self, _BRepFill.new_BRepFill_ACRLaw(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_ACRLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ACRLaw
BRepFill_ACRLaw_swigregister = _BRepFill.BRepFill_ACRLaw_swigregister
BRepFill_ACRLaw_swigregister(BRepFill_ACRLaw)

class BRepFill_Edge3DLaw(BRepFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Path:
        	:type Path: TopoDS_Wire
        	:param Law:
        	:type Law: GeomFill_LocationLaw
        	:rtype: None
        """
        _BRepFill.BRepFill_Edge3DLaw_swiginit(self, _BRepFill.new_BRepFill_Edge3DLaw(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_Edge3DLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Edge3DLaw
BRepFill_Edge3DLaw_swigregister = _BRepFill.BRepFill_Edge3DLaw_swigregister
BRepFill_Edge3DLaw_swigregister(BRepFill_Edge3DLaw)

class BRepFill_EdgeOnSurfLaw(BRepFill_LocationLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Path:
        	:type Path: TopoDS_Wire
        	:param Surf:
        	:type Surf: TopoDS_Shape
        	:rtype: None
        """
        _BRepFill.BRepFill_EdgeOnSurfLaw_swiginit(self, _BRepFill.new_BRepFill_EdgeOnSurfLaw(*args))

    def HasResult(self, *args) -> "Standard_Boolean":
        """
        * returns <False> if one Edge of <Path> do not have representation on <Surf>. In this case it is impossible to use this object.
        	:rtype: bool
        """
        return _BRepFill.BRepFill_EdgeOnSurfLaw_HasResult(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_EdgeOnSurfLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_EdgeOnSurfLaw
BRepFill_EdgeOnSurfLaw.HasResult = new_instancemethod(_BRepFill.BRepFill_EdgeOnSurfLaw_HasResult, None, BRepFill_EdgeOnSurfLaw)
BRepFill_EdgeOnSurfLaw_swigregister = _BRepFill.BRepFill_EdgeOnSurfLaw_swigregister
BRepFill_EdgeOnSurfLaw_swigregister(BRepFill_EdgeOnSurfLaw)

class BRepFill_NSections(BRepFill_SectionLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Construct
        	:param S:
        	:type S: TopTools_SequenceOfShape
        	:param Build: default value is Standard_True
        	:type Build: bool
        	:rtype: None
        * Construct
        	:param S:
        	:type S: TopTools_SequenceOfShape
        	:param Trsfs:
        	:type Trsfs: GeomFill_SequenceOfTrsf
        	:param P:
        	:type P: TColStd_SequenceOfReal
        	:param VF:
        	:type VF: float
        	:param VL:
        	:type VL: float
        	:param Build: default value is Standard_True
        	:type Build: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_NSections_swiginit(self, _BRepFill.new_BRepFill_NSections(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_NSections_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_NSections
BRepFill_NSections_swigregister = _BRepFill.BRepFill_NSections_swigregister
BRepFill_NSections_swigregister(BRepFill_NSections)

class BRepFill_ShapeLaw(BRepFill_SectionLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Construct an constant Law
        	:param V:
        	:type V: TopoDS_Vertex
        	:param Build: default value is Standard_True
        	:type Build: bool
        	:rtype: None
        * Construct an constant Law
        	:param W:
        	:type W: TopoDS_Wire
        	:param Build: default value is Standard_True
        	:type Build: bool
        	:rtype: None
        * Construct an evolutive Law
        	:param W:
        	:type W: TopoDS_Wire
        	:param L:
        	:type L: Law_Function
        	:param Build: default value is Standard_True
        	:type Build: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_ShapeLaw_swiginit(self, _BRepFill.new_BRepFill_ShapeLaw(*args))

    def Edge(self, *args) -> "TopoDS_Edge const":
        """
        :param Index:
        	:type Index: int
        	:rtype: TopoDS_Edge
        """
        return _BRepFill.BRepFill_ShapeLaw_Edge(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_ShapeLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ShapeLaw
BRepFill_ShapeLaw.Edge = new_instancemethod(_BRepFill.BRepFill_ShapeLaw_Edge, None, BRepFill_ShapeLaw)
BRepFill_ShapeLaw_swigregister = _BRepFill.BRepFill_ShapeLaw_swigregister
BRepFill_ShapeLaw_swigregister(BRepFill_ShapeLaw)

class BRepFill_DraftLaw(BRepFill_Edge3DLaw):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Path:
        	:type Path: TopoDS_Wire
        	:param Law:
        	:type Law: GeomFill_LocationDraft
        	:rtype: None
        """
        _BRepFill.BRepFill_DraftLaw_swiginit(self, _BRepFill.new_BRepFill_DraftLaw(*args))

    def CleanLaw(self, *args) -> "void":
        """
        * To clean the little discontinuities.
        	:param TolAngular:
        	:type TolAngular: float
        	:rtype: None
        """
        return _BRepFill.BRepFill_DraftLaw_CleanLaw(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_DraftLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_DraftLaw
BRepFill_DraftLaw.CleanLaw = new_instancemethod(_BRepFill.BRepFill_DraftLaw_CleanLaw, None, BRepFill_DraftLaw)
BRepFill_DraftLaw_swigregister = _BRepFill.BRepFill_DraftLaw_swigregister
BRepFill_DraftLaw_swigregister(BRepFill_DraftLaw)



