# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepPrim module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepprim.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepPrim.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepPrim')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepPrim')
    _BRepPrim = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepPrim', [dirname(__file__)])
        except ImportError:
            import _BRepPrim
            return _BRepPrim
        try:
            _mod = imp.load_module('_BRepPrim', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepPrim = swig_import_helper()
    del swig_import_helper
else:
    import _BRepPrim
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepPrim.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepPrim.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepPrim.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepPrim.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepPrim.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepPrim.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepPrim.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepPrim.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepPrim.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepPrim.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepPrim.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepPrim.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepPrim.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepPrim.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepPrim.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepPrim.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepPrim.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepPrim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepPrim.process_exception(error, method_name, class_name)
process_exception = _BRepPrim.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.BRep
import OCC.Core.GeomAbs
import OCC.Core.Geom
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.Geom2d
BRepPrim_XMin = _BRepPrim.BRepPrim_XMin
BRepPrim_XMax = _BRepPrim.BRepPrim_XMax
BRepPrim_YMin = _BRepPrim.BRepPrim_YMin
BRepPrim_YMax = _BRepPrim.BRepPrim_YMax
BRepPrim_ZMin = _BRepPrim.BRepPrim_ZMin
BRepPrim_ZMax = _BRepPrim.BRepPrim_ZMax
class BRepPrim_Builder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddEdgeVertex(self, *args) -> "void":
        """
        * Adds the Vertex <V> in the Edge <E>. <P> is the parameter of the vertex on the edge. If direct is False the Vertex is reversed.
        	:param E:
        	:type E: TopoDS_Edge
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P:
        	:type P: float
        	:param direct:
        	:type direct: bool
        	:rtype: None
        * Adds the Vertex <V> in the Edge <E>. <P1,P2> are the parameters of the vertex on the closed edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P1:
        	:type P1: float
        	:param P2:
        	:type P2: float
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_AddEdgeVertex(self, *args)


    def AddFaceWire(self, *args) -> "void":
        """
        * Adds the Wire <W> in the Face <F>.
        	:param F:
        	:type F: TopoDS_Face
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_AddFaceWire(self, *args)


    def AddShellFace(self, *args) -> "void":
        """
        * Adds the Face <F> in the Shell <Sh>.
        	:param Sh:
        	:type Sh: TopoDS_Shell
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_AddShellFace(self, *args)


    def AddWireEdge(self, *args) -> "void":
        """
        * Adds the Edge <E> in the Wire <W>, if direct is False the Edge is reversed.
        	:param W:
        	:type W: TopoDS_Wire
        	:param E:
        	:type E: TopoDS_Edge
        	:param direct:
        	:type direct: bool
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_AddWireEdge(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty, useless Builder. Necesseray for compilation.
        	:rtype: None
        * Creates from a Builder.
        	:param B:
        	:type B: BRep_Builder
        	:rtype: None
        """
        _BRepPrim.BRepPrim_Builder_swiginit(self, _BRepPrim.new_BRepPrim_Builder(*args))

    def Builder(self, *args) -> "BRep_Builder const &":
        """:rtype: BRep_Builder"""
        return _BRepPrim.BRepPrim_Builder_Builder(self, *args)


    def CompleteEdge(self, *args) -> "void":
        """
        * This is called once an edge is completed. It gives the opportunity to perform any post treatment.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_CompleteEdge(self, *args)


    def CompleteFace(self, *args) -> "void":
        """
        * This is called once a face is completed. It gives the opportunity to perform any post treatment.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_CompleteFace(self, *args)


    def CompleteShell(self, *args) -> "void":
        """
        * This is called once a shell is completed. It gives the opportunity to perform any post treatment.
        	:param S:
        	:type S: TopoDS_Shell
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_CompleteShell(self, *args)


    def CompleteWire(self, *args) -> "void":
        """
        * This is called once a wire is completed. It gives the opportunity to perform any post treatment.
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_CompleteWire(self, *args)


    def MakeDegeneratedEdge(self, *args) -> "void":
        """
        * Returns in <E> a degenerated edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_MakeDegeneratedEdge(self, *args)


    def MakeEdge(self, *args) -> "void":
        """
        * Returns in <E> an Edge built with the line equation <L>.
        	:param E:
        	:type E: TopoDS_Edge
        	:param L:
        	:type L: gp_Lin
        	:rtype: None
        * Returns in <E> an Edge built with the circle equation <C>.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: gp_Circ
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_MakeEdge(self, *args)


    def MakeFace(self, *args) -> "void":
        """
        * Returns in <F> a Face built with the plane equation <P>. Used by all primitives.
        	:param F:
        	:type F: TopoDS_Face
        	:param P:
        	:type P: gp_Pln
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_MakeFace(self, *args)


    def MakeShell(self, *args) -> "void":
        """
        * Make a empty Shell.
        	:param S:
        	:type S: TopoDS_Shell
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_MakeShell(self, *args)


    def MakeVertex(self, *args) -> "void":
        """
        * Returns in <V> a Vertex built with the point <P>.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_MakeVertex(self, *args)


    def MakeWire(self, *args) -> "void":
        """
        * Returns in <W> an empty Wire.
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_MakeWire(self, *args)


    def ReverseFace(self, *args) -> "void":
        """
        * Reverses the Face <F>.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_ReverseFace(self, *args)


    def SetPCurve(self, *args) -> "void":
        """
        * Sets the line <L> to be the curve representing the edge <E> in the parametric space of the surface of <F>.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param L:
        	:type L: gp_Lin2d
        	:rtype: None
        * Sets the lines <L1,L2> to be the curves representing the edge <E> in the parametric space of the closed surface of <F>.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param L1:
        	:type L1: gp_Lin2d
        	:param L2:
        	:type L2: gp_Lin2d
        	:rtype: None
        * Sets the circle <C> to be the curve representing the edge <E> in the parametric space of the surface of <F>.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param C:
        	:type C: gp_Circ2d
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_SetPCurve(self, *args)


    def SetParameters(self, *args) -> "void":
        """
        * <P1,P2> are the parameters of the vertex on the edge. The edge is a closed curve.
        	:param E:
        	:type E: TopoDS_Edge
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P1:
        	:type P1: float
        	:param P2:
        	:type P2: float
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_Builder_SetParameters(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepPrim.delete_BRepPrim_Builder
BRepPrim_Builder.AddEdgeVertex = new_instancemethod(_BRepPrim.BRepPrim_Builder_AddEdgeVertex, None, BRepPrim_Builder)
BRepPrim_Builder.AddFaceWire = new_instancemethod(_BRepPrim.BRepPrim_Builder_AddFaceWire, None, BRepPrim_Builder)
BRepPrim_Builder.AddShellFace = new_instancemethod(_BRepPrim.BRepPrim_Builder_AddShellFace, None, BRepPrim_Builder)
BRepPrim_Builder.AddWireEdge = new_instancemethod(_BRepPrim.BRepPrim_Builder_AddWireEdge, None, BRepPrim_Builder)
BRepPrim_Builder.Builder = new_instancemethod(_BRepPrim.BRepPrim_Builder_Builder, None, BRepPrim_Builder)
BRepPrim_Builder.CompleteEdge = new_instancemethod(_BRepPrim.BRepPrim_Builder_CompleteEdge, None, BRepPrim_Builder)
BRepPrim_Builder.CompleteFace = new_instancemethod(_BRepPrim.BRepPrim_Builder_CompleteFace, None, BRepPrim_Builder)
BRepPrim_Builder.CompleteShell = new_instancemethod(_BRepPrim.BRepPrim_Builder_CompleteShell, None, BRepPrim_Builder)
BRepPrim_Builder.CompleteWire = new_instancemethod(_BRepPrim.BRepPrim_Builder_CompleteWire, None, BRepPrim_Builder)
BRepPrim_Builder.MakeDegeneratedEdge = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeDegeneratedEdge, None, BRepPrim_Builder)
BRepPrim_Builder.MakeEdge = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeEdge, None, BRepPrim_Builder)
BRepPrim_Builder.MakeFace = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeFace, None, BRepPrim_Builder)
BRepPrim_Builder.MakeShell = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeShell, None, BRepPrim_Builder)
BRepPrim_Builder.MakeVertex = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeVertex, None, BRepPrim_Builder)
BRepPrim_Builder.MakeWire = new_instancemethod(_BRepPrim.BRepPrim_Builder_MakeWire, None, BRepPrim_Builder)
BRepPrim_Builder.ReverseFace = new_instancemethod(_BRepPrim.BRepPrim_Builder_ReverseFace, None, BRepPrim_Builder)
BRepPrim_Builder.SetPCurve = new_instancemethod(_BRepPrim.BRepPrim_Builder_SetPCurve, None, BRepPrim_Builder)
BRepPrim_Builder.SetParameters = new_instancemethod(_BRepPrim.BRepPrim_Builder_SetParameters, None, BRepPrim_Builder)
BRepPrim_Builder_swigregister = _BRepPrim.BRepPrim_Builder_swigregister
BRepPrim_Builder_swigregister(BRepPrim_Builder)

class BRepPrim_FaceBuilder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param B:
        	:type B: BRep_Builder
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None
        :param B:
        	:type B: BRep_Builder
        	:param S:
        	:type S: Geom_Surface
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None
        """
        _BRepPrim.BRepPrim_FaceBuilder_swiginit(self, _BRepPrim.new_BRepPrim_FaceBuilder(*args))

    def Edge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the edge of index <I> 1 - Edge VMin 2 - Edge UMax 3 - Edge VMax 4 - Edge UMin
        	:param I:
        	:type I: int
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_FaceBuilder_Edge(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _BRepPrim.BRepPrim_FaceBuilder_Face(self, *args)


    def Init(self, *args) -> "void":
        """
        :param B:
        	:type B: BRep_Builder
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None
        :param B:
        	:type B: BRep_Builder
        	:param S:
        	:type S: Geom_Surface
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_FaceBuilder_Init(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the vertex of index <I> 1 - Vertex UMin,VMin 2 - Vertex UMax,VMin 3 - Vertex UMax,VMax 4 - Vertex UMin,VMax
        	:param I:
        	:type I: int
        	:rtype: TopoDS_Vertex
        """
        return _BRepPrim.BRepPrim_FaceBuilder_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepPrim.delete_BRepPrim_FaceBuilder
BRepPrim_FaceBuilder.Edge = new_instancemethod(_BRepPrim.BRepPrim_FaceBuilder_Edge, None, BRepPrim_FaceBuilder)
BRepPrim_FaceBuilder.Face = new_instancemethod(_BRepPrim.BRepPrim_FaceBuilder_Face, None, BRepPrim_FaceBuilder)
BRepPrim_FaceBuilder.Init = new_instancemethod(_BRepPrim.BRepPrim_FaceBuilder_Init, None, BRepPrim_FaceBuilder)
BRepPrim_FaceBuilder.Vertex = new_instancemethod(_BRepPrim.BRepPrim_FaceBuilder_Vertex, None, BRepPrim_FaceBuilder)
BRepPrim_FaceBuilder_swigregister = _BRepPrim.BRepPrim_FaceBuilder_swigregister
BRepPrim_FaceBuilder_swigregister(BRepPrim_FaceBuilder)

class BRepPrim_GWedge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Axes(self, *args) -> "gp_Ax2":
        """
        * Returns the coordinates system from <self>.
        	:rtype: gp_Ax2
        """
        return _BRepPrim.BRepPrim_GWedge_Axes(self, *args)


    def __init__(self, *args):
        """
        * Creates a GWedge algorithm. <Axes> is the axis system for the primitive. //! XMin, YMin, ZMin are set to 0 XMax, YMax, ZMax are set to dx, dy, dz Z2Min = ZMin Z2Max = ZMax X2Min = XMin X2Max = XMax The result is a box dx,dy,dz should be positive
        	:param B:
        	:type B: BRepPrim_Builder
        	:param Axes:
        	:type Axes: gp_Ax2
        	:param dx:
        	:type dx: float
        	:param dy:
        	:type dy: float
        	:param dz:
        	:type dz: float
        	:rtype: None
        * Creates a GWedge primitive. <Axes> is the axis system for the primitive. //! XMin, YMin, ZMin are set to 0 XMax, YMax, ZMax are set to dx, dy, dz Z2Min = ZMin Z2Max = ZMax X2Min = ltx X2Max = ltx The result is a STEP right angular wedge dx,dy,dz should be positive ltx should not be negative
        	:param B:
        	:type B: BRepPrim_Builder
        	:param Axes:
        	:type Axes: gp_Ax2
        	:param dx:
        	:type dx: float
        	:param dy:
        	:type dy: float
        	:param dz:
        	:type dz: float
        	:param ltx:
        	:type ltx: float
        	:rtype: None
        * Create a GWedge primitive. <Axes> is the axis system for the primitive. //! all the fields are set to the corresponding value XYZMax - XYZMin should be positive ZX2Max - ZX2Min should not be negative
        	:param B:
        	:type B: BRepPrim_Builder
        	:param Axes:
        	:type Axes: gp_Ax2
        	:param xmin:
        	:type xmin: float
        	:param ymin:
        	:type ymin: float
        	:param zmin:
        	:type zmin: float
        	:param z2min:
        	:type z2min: float
        	:param x2min:
        	:type x2min: float
        	:param xmax:
        	:type xmax: float
        	:param ymax:
        	:type ymax: float
        	:param zmax:
        	:type zmax: float
        	:param z2max:
        	:type z2max: float
        	:param x2max:
        	:type x2max: float
        	:rtype: None
        """
        _BRepPrim.BRepPrim_GWedge_swiginit(self, _BRepPrim.new_BRepPrim_GWedge(*args))

    def Close(self, *args) -> "void":
        """
        * Closes <self> in <d1> direction. A face and its edges or vertices are said existant.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_GWedge_Close(self, *args)


    def Edge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the Edge of <self> located in <d1><d2> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:param d2:
        	:type d2: BRepPrim_Direction
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_GWedge_Edge(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """
        * Returns the Face of <self> located in <d1> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:rtype: TopoDS_Face
        """
        return _BRepPrim.BRepPrim_GWedge_Face(self, *args)


    def GetX2Max(self, *args) -> "Standard_Real":
        """
        * Returns X2Max value from <self>.
        	:rtype: float
        """
        return _BRepPrim.BRepPrim_GWedge_GetX2Max(self, *args)


    def GetX2Min(self, *args) -> "Standard_Real":
        """
        * Returns X2Min value from <self>.
        	:rtype: float
        """
        return _BRepPrim.BRepPrim_GWedge_GetX2Min(self, *args)


    def GetXMax(self, *args) -> "Standard_Real":
        """
        * Returns XMax value from <self>.
        	:rtype: float
        """
        return _BRepPrim.BRepPrim_GWedge_GetXMax(self, *args)


    def GetXMin(self, *args) -> "Standard_Real":
        """
        * Returns Xmin value from <self>.
        	:rtype: float
        """
        return _BRepPrim.BRepPrim_GWedge_GetXMin(self, *args)


    def GetYMax(self, *args) -> "Standard_Real":
        """
        * Returns YMax value from <self>.
        	:rtype: float
        """
        return _BRepPrim.BRepPrim_GWedge_GetYMax(self, *args)


    def GetYMin(self, *args) -> "Standard_Real":
        """
        * Returns YMin value from <self>.
        	:rtype: float
        """
        return _BRepPrim.BRepPrim_GWedge_GetYMin(self, *args)


    def GetZ2Max(self, *args) -> "Standard_Real":
        """
        * Returns Z2Max value from <self>.
        	:rtype: float
        """
        return _BRepPrim.BRepPrim_GWedge_GetZ2Max(self, *args)


    def GetZ2Min(self, *args) -> "Standard_Real":
        """
        * Returns Z2Min value from <self>.
        	:rtype: float
        """
        return _BRepPrim.BRepPrim_GWedge_GetZ2Min(self, *args)


    def GetZMax(self, *args) -> "Standard_Real":
        """
        * Returns ZMax value from <self>.
        	:rtype: float
        """
        return _BRepPrim.BRepPrim_GWedge_GetZMax(self, *args)


    def GetZMin(self, *args) -> "Standard_Real":
        """
        * Returns ZMin value from <self>.
        	:rtype: float
        """
        return _BRepPrim.BRepPrim_GWedge_GetZMin(self, *args)


    def HasEdge(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> has an Edge in <d1><d2> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:param d2:
        	:type d2: BRepPrim_Direction
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_GWedge_HasEdge(self, *args)


    def HasFace(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> has a Face in <d1> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_GWedge_HasFace(self, *args)


    def HasVertex(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> has a Vertex in <d1><d2><d3> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:param d2:
        	:type d2: BRepPrim_Direction
        	:param d3:
        	:type d3: BRepPrim_Direction
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_GWedge_HasVertex(self, *args)


    def HasWire(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> has a Wire in <d1> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_GWedge_HasWire(self, *args)


    def IsInfinite(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> is open in <d1> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_GWedge_IsInfinite(self, *args)


    def Line(self, *args) -> "gp_Lin":
        """
        * Returns the line of the Edge of <self> located in <d1><d2> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:param d2:
        	:type d2: BRepPrim_Direction
        	:rtype: gp_Lin
        """
        return _BRepPrim.BRepPrim_GWedge_Line(self, *args)


    def Open(self, *args) -> "void":
        """
        * Opens <self> in <d1> direction. A face and its edges or vertices are said nonexistant.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_GWedge_Open(self, *args)


    def Plane(self, *args) -> "gp_Pln":
        """
        * Returns the plane of the Face of <self> located in <d1> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:rtype: gp_Pln
        """
        return _BRepPrim.BRepPrim_GWedge_Plane(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """
        * Returns the point of the Vertex of <self> located in <d1><d2><d3> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:param d2:
        	:type d2: BRepPrim_Direction
        	:param d3:
        	:type d3: BRepPrim_Direction
        	:rtype: gp_Pnt
        """
        return _BRepPrim.BRepPrim_GWedge_Point(self, *args)


    def Shell(self, *args) -> "TopoDS_Shell const":
        """
        * Returns the Shell containing the Faces of <self>.
        	:rtype: TopoDS_Shell
        """
        return _BRepPrim.BRepPrim_GWedge_Shell(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the Vertex of <self> located in <d1><d2><d3> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:param d2:
        	:type d2: BRepPrim_Direction
        	:param d3:
        	:type d3: BRepPrim_Direction
        	:rtype: TopoDS_Vertex
        """
        return _BRepPrim.BRepPrim_GWedge_Vertex(self, *args)


    def Wire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the Wire of <self> located in <d1> direction.
        	:param d1:
        	:type d1: BRepPrim_Direction
        	:rtype: TopoDS_Wire
        """
        return _BRepPrim.BRepPrim_GWedge_Wire(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepPrim.delete_BRepPrim_GWedge
BRepPrim_GWedge.Axes = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Axes, None, BRepPrim_GWedge)
BRepPrim_GWedge.Close = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Close, None, BRepPrim_GWedge)
BRepPrim_GWedge.Edge = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Edge, None, BRepPrim_GWedge)
BRepPrim_GWedge.Face = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Face, None, BRepPrim_GWedge)
BRepPrim_GWedge.GetX2Max = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetX2Max, None, BRepPrim_GWedge)
BRepPrim_GWedge.GetX2Min = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetX2Min, None, BRepPrim_GWedge)
BRepPrim_GWedge.GetXMax = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetXMax, None, BRepPrim_GWedge)
BRepPrim_GWedge.GetXMin = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetXMin, None, BRepPrim_GWedge)
BRepPrim_GWedge.GetYMax = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetYMax, None, BRepPrim_GWedge)
BRepPrim_GWedge.GetYMin = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetYMin, None, BRepPrim_GWedge)
BRepPrim_GWedge.GetZ2Max = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetZ2Max, None, BRepPrim_GWedge)
BRepPrim_GWedge.GetZ2Min = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetZ2Min, None, BRepPrim_GWedge)
BRepPrim_GWedge.GetZMax = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetZMax, None, BRepPrim_GWedge)
BRepPrim_GWedge.GetZMin = new_instancemethod(_BRepPrim.BRepPrim_GWedge_GetZMin, None, BRepPrim_GWedge)
BRepPrim_GWedge.HasEdge = new_instancemethod(_BRepPrim.BRepPrim_GWedge_HasEdge, None, BRepPrim_GWedge)
BRepPrim_GWedge.HasFace = new_instancemethod(_BRepPrim.BRepPrim_GWedge_HasFace, None, BRepPrim_GWedge)
BRepPrim_GWedge.HasVertex = new_instancemethod(_BRepPrim.BRepPrim_GWedge_HasVertex, None, BRepPrim_GWedge)
BRepPrim_GWedge.HasWire = new_instancemethod(_BRepPrim.BRepPrim_GWedge_HasWire, None, BRepPrim_GWedge)
BRepPrim_GWedge.IsInfinite = new_instancemethod(_BRepPrim.BRepPrim_GWedge_IsInfinite, None, BRepPrim_GWedge)
BRepPrim_GWedge.Line = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Line, None, BRepPrim_GWedge)
BRepPrim_GWedge.Open = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Open, None, BRepPrim_GWedge)
BRepPrim_GWedge.Plane = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Plane, None, BRepPrim_GWedge)
BRepPrim_GWedge.Point = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Point, None, BRepPrim_GWedge)
BRepPrim_GWedge.Shell = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Shell, None, BRepPrim_GWedge)
BRepPrim_GWedge.Vertex = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Vertex, None, BRepPrim_GWedge)
BRepPrim_GWedge.Wire = new_instancemethod(_BRepPrim.BRepPrim_GWedge_Wire, None, BRepPrim_GWedge)
BRepPrim_GWedge_swigregister = _BRepPrim.BRepPrim_GWedge_swigregister
BRepPrim_GWedge_swigregister(BRepPrim_GWedge)

class BRepPrim_OneAxis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Angle(self, *args) -> "void":
        """
        :rtype: float
        :param A:
        	:type A: float
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_OneAxis_Angle(self, *args)


    def Axes(self, *args) -> "void":
        """
        * Returns the Ax2 from <self>.
        	:rtype: gp_Ax2
        :param A:
        	:type A: gp_Ax2
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_OneAxis_Axes(self, *args)


    def AxisBottomVertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the Vertex at the Bottom altitude on the axis.
        	:rtype: TopoDS_Vertex
        """
        return _BRepPrim.BRepPrim_OneAxis_AxisBottomVertex(self, *args)


    def AxisEdge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the Edge built along the Axis and oriented on +Z of the Axis.
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_OneAxis_AxisEdge(self, *args)


    def AxisEndWire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the Wire in the end face with the AxisEdge.
        	:rtype: TopoDS_Wire
        """
        return _BRepPrim.BRepPrim_OneAxis_AxisEndWire(self, *args)


    def AxisStartWire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the wire in the start face with the AxisEdge.
        	:rtype: TopoDS_Wire
        """
        return _BRepPrim.BRepPrim_OneAxis_AxisStartWire(self, *args)


    def AxisTopVertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the Vertex at the Top altitude on the axis.
        	:rtype: TopoDS_Vertex
        """
        return _BRepPrim.BRepPrim_OneAxis_AxisTopVertex(self, *args)


    def BottomEdge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the edge at VMin. If MeridianClosed() the TopEdge and the BottomEdge are the same edge.
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_OneAxis_BottomEdge(self, *args)


    def BottomEndVertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the vertex (angle,VMax)
        	:rtype: TopoDS_Vertex
        """
        return _BRepPrim.BRepPrim_OneAxis_BottomEndVertex(self, *args)


    def BottomFace(self, *args) -> "TopoDS_Face const":
        """
        * Returns the Bottom planar Face. It is Oriented toward the -Z axis (outside).
        	:rtype: TopoDS_Face
        """
        return _BRepPrim.BRepPrim_OneAxis_BottomFace(self, *args)


    def BottomStartVertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the vertex (0,VMin)
        	:rtype: TopoDS_Vertex
        """
        return _BRepPrim.BRepPrim_OneAxis_BottomStartVertex(self, *args)


    def BottomWire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the wire in the bottom face.
        	:rtype: TopoDS_Wire
        """
        return _BRepPrim.BRepPrim_OneAxis_BottomWire(self, *args)


    def EndBottomEdge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the linear Edge between end Face and bottom Face.
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_OneAxis_EndBottomEdge(self, *args)


    def EndEdge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the Edge at angle Angle. If !HasSides() the StartEdge and the EndEdge are the same edge.
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_OneAxis_EndEdge(self, *args)


    def EndFace(self, *args) -> "TopoDS_Face const":
        """
        * Returns the Face ending the slice, it is oriented toward the exterior of the primitive.
        	:rtype: TopoDS_Face
        """
        return _BRepPrim.BRepPrim_OneAxis_EndFace(self, *args)


    def EndTopEdge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the linear Edge between end Face and top Face.
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_OneAxis_EndTopEdge(self, *args)


    def EndWire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the Wire in the end face.
        	:rtype: TopoDS_Wire
        """
        return _BRepPrim.BRepPrim_OneAxis_EndWire(self, *args)


    def HasBottom(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a bottom face. //! That is neither : VMinInfinite() MeridianClosed() MeridianOnAxis(VMin)
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_OneAxis_HasBottom(self, *args)


    def HasSides(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there are Start and End faces. //! That is : 2*PI - Angle > Precision::Angular()
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_OneAxis_HasSides(self, *args)


    def HasTop(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a top face. //! That is neither : VMaxInfinite() MeridianClosed() MeridianOnAxis(VMax)
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_OneAxis_HasTop(self, *args)


    def LateralEndWire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the wire with in lateral face with the end edge.
        	:rtype: TopoDS_Wire
        """
        return _BRepPrim.BRepPrim_OneAxis_LateralEndWire(self, *args)


    def LateralFace(self, *args) -> "TopoDS_Face const":
        """
        * Returns the lateral Face. It is oriented toward the outside of the primitive.
        	:rtype: TopoDS_Face
        """
        return _BRepPrim.BRepPrim_OneAxis_LateralFace(self, *args)


    def LateralStartWire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the wire in the lateral face with the start edge.
        	:rtype: TopoDS_Wire
        """
        return _BRepPrim.BRepPrim_OneAxis_LateralStartWire(self, *args)


    def LateralWire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the wire in the lateral face.
        	:rtype: TopoDS_Wire
        """
        return _BRepPrim.BRepPrim_OneAxis_LateralWire(self, *args)


    def MakeEmptyLateralFace(self, *args) -> "TopoDS_Face":
        """
        * Returns a face with no edges. The surface is the lateral surface with normals pointing outward. The U parameter is the angle with the origin on the X axis. The V parameter is the parameter of the meridian.
        	:rtype: TopoDS_Face
        """
        return _BRepPrim.BRepPrim_OneAxis_MakeEmptyLateralFace(self, *args)


    def MakeEmptyMeridianEdge(self, *args) -> "TopoDS_Edge":
        """
        * Returns an edge with a 3D curve made from the meridian in the XZ plane rotated by <Ang> around the Z-axis. Ang may be 0 or myAngle.
        	:param Ang:
        	:type Ang: float
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_OneAxis_MakeEmptyMeridianEdge(self, *args)


    def MeridianClosed(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the meridian is closed. Default implementation  is MeridianValue(VMin).IsEqual(MeridianValue(VMax), Precision::Confusion())
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_OneAxis_MeridianClosed(self, *args)


    def MeridianOnAxis(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the point of parameter <V> on the meridian is on the Axis. Default implementation is Abs(MeridianValue(V).X()) < Precision::Confusion()
        	:param V:
        	:type V: float
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_OneAxis_MeridianOnAxis(self, *args)


    def MeridianValue(self, *args) -> "gp_Pnt2d":
        """
        * Returns the meridian point at parameter <V> in the plane XZ.
        	:param V:
        	:type V: float
        	:rtype: gp_Pnt2d
        """
        return _BRepPrim.BRepPrim_OneAxis_MeridianValue(self, *args)


    def SetMeridianOffset(self, *args) -> "void":
        """
        * The MeridianOffset is added to the parameters on the meridian curve and to the V values of the pcurves. This is used for the sphere for example, to give a range on the meridian edge which is not VMin, VMax.
        	:param MeridianOffset: default value is 0
        	:type MeridianOffset: float
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_OneAxis_SetMeridianOffset(self, *args)


    def SetMeridianPCurve(self, *args) -> "void":
        """
        * Sets the parametric curve of the edge <E> in the face <F> to be the 2d representation of the meridian.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: void
        """
        return _BRepPrim.BRepPrim_OneAxis_SetMeridianPCurve(self, *args)


    def Shell(self, *args) -> "TopoDS_Shell const":
        """
        * Returns the Shell containing all the Faces of the primitive.
        	:rtype: TopoDS_Shell
        """
        return _BRepPrim.BRepPrim_OneAxis_Shell(self, *args)


    def StartBottomEdge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the linear Edge between start Face and bottom Face.
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_OneAxis_StartBottomEdge(self, *args)


    def StartEdge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the Edge at angle 0.
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_OneAxis_StartEdge(self, *args)


    def StartFace(self, *args) -> "TopoDS_Face const":
        """
        * Returns the Face starting the slice, it is oriented toward the exterior of the primitive.
        	:rtype: TopoDS_Face
        """
        return _BRepPrim.BRepPrim_OneAxis_StartFace(self, *args)


    def StartTopEdge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the linear Edge between start Face and top Face.
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_OneAxis_StartTopEdge(self, *args)


    def StartWire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the wire in the start face.
        	:rtype: TopoDS_Wire
        """
        return _BRepPrim.BRepPrim_OneAxis_StartWire(self, *args)


    def TopEdge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the edge at VMax. If MeridianClosed() the TopEdge and the BottomEdge are the same edge.
        	:rtype: TopoDS_Edge
        """
        return _BRepPrim.BRepPrim_OneAxis_TopEdge(self, *args)


    def TopEndVertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the vertex (angle,VMax)
        	:rtype: TopoDS_Vertex
        """
        return _BRepPrim.BRepPrim_OneAxis_TopEndVertex(self, *args)


    def TopFace(self, *args) -> "TopoDS_Face const":
        """
        * Returns the top planar Face. It is Oriented toward the +Z axis (outside).
        	:rtype: TopoDS_Face
        """
        return _BRepPrim.BRepPrim_OneAxis_TopFace(self, *args)


    def TopStartVertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the vertex (0,VMax)
        	:rtype: TopoDS_Vertex
        """
        return _BRepPrim.BRepPrim_OneAxis_TopStartVertex(self, *args)


    def TopWire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the wire in the top face.
        	:rtype: TopoDS_Wire
        """
        return _BRepPrim.BRepPrim_OneAxis_TopWire(self, *args)


    def VMax(self, *args) -> "void":
        """
        :rtype: float
        :param V:
        	:type V: float
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_OneAxis_VMax(self, *args)


    def VMaxInfinite(self, *args) -> "Standard_Boolean":
        """
        * Returns True if VMax is infinite. Default Precision::IsPositiveInfinite(VMax);
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_OneAxis_VMaxInfinite(self, *args)


    def VMin(self, *args) -> "void":
        """
        :rtype: float
        :param V:
        	:type V: float
        	:rtype: None
        """
        return _BRepPrim.BRepPrim_OneAxis_VMin(self, *args)


    def VMinInfinite(self, *args) -> "Standard_Boolean":
        """
        * Returns True if VMin is infinite. Default Precision::IsNegativeInfinite(VMax);
        	:rtype: bool
        """
        return _BRepPrim.BRepPrim_OneAxis_VMinInfinite(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepPrim.delete_BRepPrim_OneAxis
BRepPrim_OneAxis.Angle = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_Angle, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.Axes = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_Axes, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.AxisBottomVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_AxisBottomVertex, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.AxisEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_AxisEdge, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.AxisEndWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_AxisEndWire, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.AxisStartWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_AxisStartWire, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.AxisTopVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_AxisTopVertex, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.BottomEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_BottomEdge, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.BottomEndVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_BottomEndVertex, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.BottomFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_BottomFace, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.BottomStartVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_BottomStartVertex, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.BottomWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_BottomWire, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.EndBottomEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_EndBottomEdge, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.EndEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_EndEdge, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.EndFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_EndFace, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.EndTopEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_EndTopEdge, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.EndWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_EndWire, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.HasBottom = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_HasBottom, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.HasSides = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_HasSides, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.HasTop = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_HasTop, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.LateralEndWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_LateralEndWire, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.LateralFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_LateralFace, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.LateralStartWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_LateralStartWire, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.LateralWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_LateralWire, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.MakeEmptyLateralFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_MakeEmptyLateralFace, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.MakeEmptyMeridianEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_MakeEmptyMeridianEdge, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.MeridianClosed = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_MeridianClosed, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.MeridianOnAxis = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_MeridianOnAxis, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.MeridianValue = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_MeridianValue, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.SetMeridianOffset = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_SetMeridianOffset, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.SetMeridianPCurve = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_SetMeridianPCurve, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.Shell = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_Shell, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.StartBottomEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_StartBottomEdge, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.StartEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_StartEdge, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.StartFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_StartFace, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.StartTopEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_StartTopEdge, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.StartWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_StartWire, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.TopEdge = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_TopEdge, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.TopEndVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_TopEndVertex, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.TopFace = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_TopFace, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.TopStartVertex = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_TopStartVertex, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.TopWire = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_TopWire, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.VMax = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_VMax, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.VMaxInfinite = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_VMaxInfinite, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.VMin = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_VMin, None, BRepPrim_OneAxis)
BRepPrim_OneAxis.VMinInfinite = new_instancemethod(_BRepPrim.BRepPrim_OneAxis_VMinInfinite, None, BRepPrim_OneAxis)
BRepPrim_OneAxis_swigregister = _BRepPrim.BRepPrim_OneAxis_swigregister
BRepPrim_OneAxis_swigregister(BRepPrim_OneAxis)

class BRepPrim_Revolution(BRepPrim_OneAxis):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create a revolution body <M> is the meridian nd must be in the XZ plane of <A>. <PM> is the meridian in the XZ plane.
        	:param A:
        	:type A: gp_Ax2
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:param M:
        	:type M: Geom_Curve
        	:param PM:
        	:type PM: Geom2d_Curve
        	:rtype: None
        """
        _BRepPrim.BRepPrim_Revolution_swiginit(self, _BRepPrim.new_BRepPrim_Revolution(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepPrim.delete_BRepPrim_Revolution
BRepPrim_Revolution_swigregister = _BRepPrim.BRepPrim_Revolution_swigregister
BRepPrim_Revolution_swigregister(BRepPrim_Revolution)

class BRepPrim_Wedge(BRepPrim_GWedge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a Wedge algorithm. <Axes> is the axis system for the primitive. //! XMin, YMin, ZMin are set to 0 XMax, YMax, ZMax are set to dx, dy, dz Z2Min = ZMin Z2Max = ZMax X2Min = XMin X2Max = XMax The result is a box dx,dy,dz should be positive
        	:param Axes:
        	:type Axes: gp_Ax2
        	:param dx:
        	:type dx: float
        	:param dy:
        	:type dy: float
        	:param dz:
        	:type dz: float
        	:rtype: None
        * Creates a Wedge primitive. <Axes> is the axis system for the primitive. //! XMin, YMin, ZMin are set to 0 XMax, YMax, ZMax are set to dx, dy, dz Z2Min = ZMin Z2Max = ZMax X2Min = ltx X2Max = ltx The result is a STEP right angular wedge dx,dy,dz should be positive ltx should not be negative
        	:param Axes:
        	:type Axes: gp_Ax2
        	:param dx:
        	:type dx: float
        	:param dy:
        	:type dy: float
        	:param dz:
        	:type dz: float
        	:param ltx:
        	:type ltx: float
        	:rtype: None
        * Create a Wedge primitive. <Axes> is the axis system for the primitive. //! all the fields are set to the corresponding value XYZMax - XYZMin should be positive ZX2Max - ZX2Min should not be negative
        	:param Axes:
        	:type Axes: gp_Ax2
        	:param xmin:
        	:type xmin: float
        	:param ymin:
        	:type ymin: float
        	:param zmin:
        	:type zmin: float
        	:param z2min:
        	:type z2min: float
        	:param x2min:
        	:type x2min: float
        	:param xmax:
        	:type xmax: float
        	:param ymax:
        	:type ymax: float
        	:param zmax:
        	:type zmax: float
        	:param z2max:
        	:type z2max: float
        	:param x2max:
        	:type x2max: float
        	:rtype: None
        """
        _BRepPrim.BRepPrim_Wedge_swiginit(self, _BRepPrim.new_BRepPrim_Wedge(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepPrim.delete_BRepPrim_Wedge
BRepPrim_Wedge_swigregister = _BRepPrim.BRepPrim_Wedge_swigregister
BRepPrim_Wedge_swigregister(BRepPrim_Wedge)

class BRepPrim_Cone(BRepPrim_Revolution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * the STEP definition Angle = semi-angle of the cone Position : the coordinate system Height : height of the cone. Radius : radius of truncated face at z = 0 //! The apex is on z < 0 //! Errors : Height < Resolution Angle < Resolution / Height Angle > PI/2 - Resolution / Height
        	:param Angle:
        	:type Angle: float
        	:param Position:
        	:type Position: gp_Ax2
        	:param Height:
        	:type Height: float
        	:param Radius: default value is 0
        	:type Radius: float
        	:rtype: None
        * infinite cone at origin on Z negative
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        * infinite cone at Apex on Z negative
        	:param Angle:
        	:type Angle: float
        	:param Apex:
        	:type Apex: gp_Pnt
        	:rtype: None
        * infinite cone with Axes
        	:param Angle:
        	:type Angle: float
        	:param Axes:
        	:type Axes: gp_Ax2
        	:rtype: None
        * create a Cone at origin on Z axis, of height H, radius R1 at Z = 0, R2 at Z = H, X is the origin of angles. If R1 or R2 is 0 there is an apex. Otherwise, it is a truncated cone. //! Error : R1 and R2 < Resolution R1 or R2 negative Abs(R1-R2) < Resolution H < Resolution H negative
        	:param R1:
        	:type R1: float
        	:param R2:
        	:type R2: float
        	:param H:
        	:type H: float
        	:rtype: None
        * same as above but at a given point
        	:param Center:
        	:type Center: gp_Pnt
        	:param R1:
        	:type R1: float
        	:param R2:
        	:type R2: float
        	:param H:
        	:type H: float
        	:rtype: None
        * same as above with given axes system.
        	:param Axes:
        	:type Axes: gp_Ax2
        	:param R1:
        	:type R1: float
        	:param R2:
        	:type R2: float
        	:param H:
        	:type H: float
        	:rtype: None
        """
        _BRepPrim.BRepPrim_Cone_swiginit(self, _BRepPrim.new_BRepPrim_Cone(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepPrim.delete_BRepPrim_Cone
BRepPrim_Cone_swigregister = _BRepPrim.BRepPrim_Cone_swigregister
BRepPrim_Cone_swigregister(BRepPrim_Cone)

class BRepPrim_Cylinder(BRepPrim_Revolution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * the STEP definition Position : center of a Face and Axis Radius : radius of cylinder Height : distance between faces on positive side //! Errors : Height < Resolution Radius < Resolution
        	:param Position:
        	:type Position: gp_Ax2
        	:param Radius:
        	:type Radius: float
        	:param Height:
        	:type Height: float
        	:rtype: None
        * infinite Cylinder at origin on Z negative
        	:param Radius:
        	:type Radius: float
        	:rtype: None
        * infinite Cylinder at Center on Z negative
        	:param Center:
        	:type Center: gp_Pnt
        	:param Radius:
        	:type Radius: float
        	:rtype: None
        * infinite Cylinder at Axes on Z negative
        	:param Axes:
        	:type Axes: gp_Ax2
        	:param Radius:
        	:type Radius: float
        	:rtype: None
        * create a Cylinder at origin on Z axis, of height H and radius R Error : Radius < Resolution H < Resolution H negative
        	:param R:
        	:type R: float
        	:param H:
        	:type H: float
        	:rtype: None
        * same as above but at a given point
        	:param Center:
        	:type Center: gp_Pnt
        	:param R:
        	:type R: float
        	:param H:
        	:type H: float
        	:rtype: None
        """
        _BRepPrim.BRepPrim_Cylinder_swiginit(self, _BRepPrim.new_BRepPrim_Cylinder(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepPrim.delete_BRepPrim_Cylinder
BRepPrim_Cylinder_swigregister = _BRepPrim.BRepPrim_Cylinder_swigregister
BRepPrim_Cylinder_swigregister(BRepPrim_Cylinder)

class BRepPrim_Sphere(BRepPrim_Revolution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a Sphere at origin with Radius. The axes of the sphere are the reference axes. An error is raised if the radius is < Resolution.
        	:param Radius:
        	:type Radius: float
        	:rtype: None
        * Creates a Sphere with Center and Radius. Axes are the referrence axes. This is the STEP constructor.
        	:param Center:
        	:type Center: gp_Pnt
        	:param Radius:
        	:type Radius: float
        	:rtype: None
        * Creates a sphere with given axes system.
        	:param Axes:
        	:type Axes: gp_Ax2
        	:param Radius:
        	:type Radius: float
        	:rtype: None
        """
        _BRepPrim.BRepPrim_Sphere_swiginit(self, _BRepPrim.new_BRepPrim_Sphere(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepPrim.delete_BRepPrim_Sphere
BRepPrim_Sphere_swigregister = _BRepPrim.BRepPrim_Sphere_swigregister
BRepPrim_Sphere_swigregister(BRepPrim_Sphere)

class BRepPrim_Torus(BRepPrim_Revolution):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * the STEP definition Position : center and axes Major, Minor : Radii //! Errors : Major < Resolution Minor < Resolution
        	:param Position:
        	:type Position: gp_Ax2
        	:param Major:
        	:type Major: float
        	:param Minor:
        	:type Minor: float
        	:rtype: None
        * Torus centered at origin
        	:param Major:
        	:type Major: float
        	:param Minor:
        	:type Minor: float
        	:rtype: None
        * Torus at Center
        	:param Center:
        	:type Center: gp_Pnt
        	:param Major:
        	:type Major: float
        	:param Minor:
        	:type Minor: float
        	:rtype: None
        """
        _BRepPrim.BRepPrim_Torus_swiginit(self, _BRepPrim.new_BRepPrim_Torus(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepPrim.delete_BRepPrim_Torus
BRepPrim_Torus_swigregister = _BRepPrim.BRepPrim_Torus_swigregister
BRepPrim_Torus_swigregister(BRepPrim_Torus)



