# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepSweep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepsweep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepSweep.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepSweep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepSweep')
    _BRepSweep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepSweep', [dirname(__file__)])
        except ImportError:
            import _BRepSweep
            return _BRepSweep
        try:
            _mod = imp.load_module('_BRepSweep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepSweep = swig_import_helper()
    del swig_import_helper
else:
    import _BRepSweep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepSweep.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepSweep.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepSweep.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepSweep.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepSweep.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepSweep.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepSweep.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepSweep.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepSweep.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepSweep.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepSweep.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepSweep.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepSweep.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepSweep.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepSweep.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepSweep.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepSweep.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepSweep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepSweep.process_exception(error, method_name, class_name)
process_exception = _BRepSweep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.BRep
import OCC.Core.GeomAbs
import OCC.Core.Geom
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.Geom2d
import OCC.Core.Sweep
class BRepSweep_Builder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Adds the Shape 1 in the Shape 2, set to <Orient> orientation.
        	:param aShape1:
        	:type aShape1: TopoDS_Shape
        	:param aShape2:
        	:type aShape2: TopoDS_Shape
        	:param Orient:
        	:type Orient: TopAbs_Orientation
        	:rtype: None
        * Adds the Shape 1 in the Shape 2.
        	:param aShape1:
        	:type aShape1: TopoDS_Shape
        	:param aShape2:
        	:type aShape2: TopoDS_Shape
        	:rtype: None
        """
        return _BRepSweep.BRepSweep_Builder_Add(self, *args)


    def __init__(self, *args):
        """
        * Creates a Builder.
        	:param aBuilder:
        	:type aBuilder: BRep_Builder
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Builder_swiginit(self, _BRepSweep.new_BRepSweep_Builder(*args))

    def Builder(self, *args) -> "BRep_Builder const &":
        """:rtype: BRep_Builder"""
        return _BRepSweep.BRepSweep_Builder_Builder(self, *args)


    def MakeCompSolid(self, *args) -> "void":
        """
        * Returns an empty CompSolid.
        	:param aCompSolid:
        	:type aCompSolid: TopoDS_Shape
        	:rtype: None
        """
        return _BRepSweep.BRepSweep_Builder_MakeCompSolid(self, *args)


    def MakeCompound(self, *args) -> "void":
        """
        * Returns an empty Compound.
        	:param aCompound:
        	:type aCompound: TopoDS_Shape
        	:rtype: None
        """
        return _BRepSweep.BRepSweep_Builder_MakeCompound(self, *args)


    def MakeShell(self, *args) -> "void":
        """
        * Returns an empty Shell.
        	:param aShell:
        	:type aShell: TopoDS_Shape
        	:rtype: None
        """
        return _BRepSweep.BRepSweep_Builder_MakeShell(self, *args)


    def MakeSolid(self, *args) -> "void":
        """
        * Returns an empty Solid.
        	:param aSolid:
        	:type aSolid: TopoDS_Shape
        	:rtype: None
        """
        return _BRepSweep.BRepSweep_Builder_MakeSolid(self, *args)


    def MakeWire(self, *args) -> "void":
        """
        * Returns an empty Wire.
        	:param aWire:
        	:type aWire: TopoDS_Shape
        	:rtype: None
        """
        return _BRepSweep.BRepSweep_Builder_MakeWire(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Builder
BRepSweep_Builder.Add = new_instancemethod(_BRepSweep.BRepSweep_Builder_Add, None, BRepSweep_Builder)
BRepSweep_Builder.Builder = new_instancemethod(_BRepSweep.BRepSweep_Builder_Builder, None, BRepSweep_Builder)
BRepSweep_Builder.MakeCompSolid = new_instancemethod(_BRepSweep.BRepSweep_Builder_MakeCompSolid, None, BRepSweep_Builder)
BRepSweep_Builder.MakeCompound = new_instancemethod(_BRepSweep.BRepSweep_Builder_MakeCompound, None, BRepSweep_Builder)
BRepSweep_Builder.MakeShell = new_instancemethod(_BRepSweep.BRepSweep_Builder_MakeShell, None, BRepSweep_Builder)
BRepSweep_Builder.MakeSolid = new_instancemethod(_BRepSweep.BRepSweep_Builder_MakeSolid, None, BRepSweep_Builder)
BRepSweep_Builder.MakeWire = new_instancemethod(_BRepSweep.BRepSweep_Builder_MakeWire, None, BRepSweep_Builder)
BRepSweep_Builder_swigregister = _BRepSweep.BRepSweep_Builder_swigregister
BRepSweep_Builder_swigregister(BRepSweep_Builder)

class BRepSweep_Iterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _BRepSweep.BRepSweep_Iterator_swiginit(self, _BRepSweep.new_BRepSweep_Iterator(*args))

    def Init(self, *args) -> "void":
        """
        * Resest the Iterator on sub-shapes of <aShape>.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: None
        """
        return _BRepSweep.BRepSweep_Iterator_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a current sub-shape.
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_Iterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Moves to the next sub-shape.
        	:rtype: None
        """
        return _BRepSweep.BRepSweep_Iterator_Next(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        * Returns the orientation of the current sub-shape.
        	:rtype: TopAbs_Orientation
        """
        return _BRepSweep.BRepSweep_Iterator_Orientation(self, *args)


    def Value(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the current sub-shape.
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_Iterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Iterator
BRepSweep_Iterator.Init = new_instancemethod(_BRepSweep.BRepSweep_Iterator_Init, None, BRepSweep_Iterator)
BRepSweep_Iterator.More = new_instancemethod(_BRepSweep.BRepSweep_Iterator_More, None, BRepSweep_Iterator)
BRepSweep_Iterator.Next = new_instancemethod(_BRepSweep.BRepSweep_Iterator_Next, None, BRepSweep_Iterator)
BRepSweep_Iterator.Orientation = new_instancemethod(_BRepSweep.BRepSweep_Iterator_Orientation, None, BRepSweep_Iterator)
BRepSweep_Iterator.Value = new_instancemethod(_BRepSweep.BRepSweep_Iterator_Value, None, BRepSweep_Iterator)
BRepSweep_Iterator_swigregister = _BRepSweep.BRepSweep_Iterator_swigregister
BRepSweep_Iterator_swigregister(BRepSweep_Iterator)

class BRepSweep_NumLinearRegularSweep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Closed(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_Closed(self, *args)


    def DirectSolid(self, *args) -> "TopAbs_Orientation":
        """
        * Returns the Orientation of the shell in the solid generated by the face aGenS with the edge aDirS. It is REVERSED if the surface is swept in the direction of the normal.
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:param aDirS:
        	:type aDirS: Sweep_NumShape
        	:rtype: TopAbs_Orientation
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_DirectSolid(self, *args)


    def FirstShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the resulting Shape indexed by the first Vertex of myDirWire and myGenShape.
        	:rtype: TopoDS_Shape
        * Returns the resulting Shape indexed by the first Vertex of myDirWire and aGenS.
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_FirstShape(self, *args)


    def GDDShapeIsToAdd(self, *args) -> "Standard_Boolean":
        """
        * Returns true if aNewSubShape (addressed by aGenS and aSubDirS) must be added in aNewShape (addressed by aGenS and aDirS).
        	:param aNewShape:
        	:type aNewShape: TopoDS_Shape
        	:param aNewSubShape:
        	:type aNewSubShape: TopoDS_Shape
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:param aDirS:
        	:type aDirS: Sweep_NumShape
        	:param aSubDirS:
        	:type aSubDirS: Sweep_NumShape
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_GDDShapeIsToAdd(self, *args)


    def GGDShapeIsToAdd(self, *args) -> "Standard_Boolean":
        """
        * Returns true if aNewSubShape (addressed by aSubGenS and aDirS) must be added in aNewShape (addressed by aGenS and aDirS).
        	:param aNewShape:
        	:type aNewShape: TopoDS_Shape
        	:param aNewSubShape:
        	:type aNewSubShape: TopoDS_Shape
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:param aSubGenS:
        	:type aSubGenS: TopoDS_Shape
        	:param aDirS:
        	:type aDirS: Sweep_NumShape
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_GGDShapeIsToAdd(self, *args)


    def GenIsUsed(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the shape, generated from theS is used in result shape
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_GenIsUsed(self, *args)


    def HasShape(self, *args) -> "Standard_Boolean":
        """
        * Returns true if aDirS and aGenS addresses a resulting Shape. In some specific cases the shape can be geometrically inexsistant, then this function returns false.
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:param aDirS:
        	:type aDirS: Sweep_NumShape
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_HasShape(self, *args)


    def IsInvariant(self, *args) -> "Standard_Boolean":
        """
        * Returns true if aGenS cannot be transformed.
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_IsInvariant(self, *args)


    def IsUsed(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the initial shape aGenS is used in result shape
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_IsUsed(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the resulting Shape indexed by the last Vertex of myDirWire and myGenShape.
        	:rtype: TopoDS_Shape
        * Returns the resulting Shape indexed by the last Vertex of myDirWire and aGenS.
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_LastShape(self, *args)


    def MakeEmptyDirectingEdge(self, *args) -> "TopoDS_Shape":
        """
        * Builds the edge addressed by [aGenV,aDirE], with its geometric part, but without subcomponents.
        	:param aGenV:
        	:type aGenV: TopoDS_Shape
        	:param aDirE:
        	:type aDirE: Sweep_NumShape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyDirectingEdge(self, *args)


    def MakeEmptyFace(self, *args) -> "TopoDS_Shape":
        """
        * Builds the face addressed by [aGenS,aDirS], with its geometric part, but without subcomponents. The couple aGenS, aDirS can be a 'generating face and a directing vertex' or 'a generating edge and a directing edge'.
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:param aDirS:
        	:type aDirS: Sweep_NumShape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyFace(self, *args)


    def MakeEmptyGeneratingEdge(self, *args) -> "TopoDS_Shape":
        """
        * Builds the edge addressed by [aGenE,aDirV], with its geometric part, but without subcomponents.
        	:param aGenE:
        	:type aGenE: TopoDS_Shape
        	:param aDirV:
        	:type aDirV: Sweep_NumShape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyGeneratingEdge(self, *args)


    def MakeEmptyVertex(self, *args) -> "TopoDS_Shape":
        """
        * Builds the vertex addressed by [aGenV,aDirV], with its geometric part, but without subcomponents.
        	:param aGenV:
        	:type aGenV: TopoDS_Shape
        	:param aDirV:
        	:type aDirV: Sweep_NumShape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyVertex(self, *args)


    def SeparatedWires(self, *args) -> "Standard_Boolean":
        """
        * In some particular cases the topology of a generated face must be composed of independant closed wires, in this case this function returns true.
        	:param aNewShape:
        	:type aNewShape: TopoDS_Shape
        	:param aNewSubShape:
        	:type aNewSubShape: TopoDS_Shape
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:param aSubGenS:
        	:type aSubGenS: TopoDS_Shape
        	:param aDirS:
        	:type aDirS: Sweep_NumShape
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SeparatedWires(self, *args)


    def SetContinuity(self, *args) -> "void":
        """
        * Called to propagate the continuity of every vertex between two edges of the generating wire aGenS on the generated edge and faces.
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:param aDirS:
        	:type aDirS: Sweep_NumShape
        	:rtype: void
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetContinuity(self, *args)


    def SetDirectingPCurve(self, *args) -> "void":
        """
        * Sets the PCurve for a new edge on a new face. The new edge and the new face were generated using aGenE, aDirE and aGenV.
        	:param aNewFace:
        	:type aNewFace: TopoDS_Shape
        	:param aNewEdge:
        	:type aNewEdge: TopoDS_Shape
        	:param aGenE:
        	:type aGenE: TopoDS_Shape
        	:param aGenV:
        	:type aGenV: TopoDS_Shape
        	:param aDirE:
        	:type aDirE: Sweep_NumShape
        	:param orien:
        	:type orien: TopAbs_Orientation
        	:rtype: void
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingPCurve(self, *args)


    def SetDirectingParameter(self, *args) -> "void":
        """
        * Sets the parameter of the new vertex on the new edge. The new edge and new vertex where generated from aGenV aDirE, and aDirV.
        	:param aNewEdge:
        	:type aNewEdge: TopoDS_Shape
        	:param aNewVertex:
        	:type aNewVertex: TopoDS_Shape
        	:param aGenV:
        	:type aGenV: TopoDS_Shape
        	:param aDirE:
        	:type aDirE: Sweep_NumShape
        	:param aDirV:
        	:type aDirV: Sweep_NumShape
        	:rtype: void
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingParameter(self, *args)


    def SetGeneratingPCurve(self, *args) -> "void":
        """
        * Sets the PCurve for a new edge on a new face. The new edge and the new face were generated using aGenE, aDirE and aDirV.
        	:param aNewFace:
        	:type aNewFace: TopoDS_Shape
        	:param aNewEdge:
        	:type aNewEdge: TopoDS_Shape
        	:param aGenE:
        	:type aGenE: TopoDS_Shape
        	:param aDirE:
        	:type aDirE: Sweep_NumShape
        	:param aDirV:
        	:type aDirV: Sweep_NumShape
        	:param orien:
        	:type orien: TopAbs_Orientation
        	:rtype: void
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingPCurve(self, *args)


    def SetGeneratingParameter(self, *args) -> "void":
        """
        * Sets the parameter of the new vertex on the new edge. The new edge and new vertex where generated from aGenE, aGenV and aDirV .
        	:param aNewEdge:
        	:type aNewEdge: TopoDS_Shape
        	:param aNewVertex:
        	:type aNewVertex: TopoDS_Shape
        	:param aGenE:
        	:type aGenE: TopoDS_Shape
        	:param aGenV:
        	:type aGenV: TopoDS_Shape
        	:param aDirV:
        	:type aDirV: Sweep_NumShape
        	:rtype: void
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingParameter(self, *args)


    def SetPCurve(self, *args) -> "void":
        """
        * Sets the PCurve for a new edge on a new face. The new edge and the new face were generated using aGenF, aGenE and aDirV.
        	:param aNewFace:
        	:type aNewFace: TopoDS_Shape
        	:param aNewEdge:
        	:type aNewEdge: TopoDS_Shape
        	:param aGenF:
        	:type aGenF: TopoDS_Shape
        	:param aGenE:
        	:type aGenE: TopoDS_Shape
        	:param aDirV:
        	:type aDirV: Sweep_NumShape
        	:param orien:
        	:type orien: TopAbs_Orientation
        	:rtype: void
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetPCurve(self, *args)


    def SetParameters(self, *args) -> "void":
        """
        * Sets the parameters of the new vertex on the new face. The new face and new vertex where generated from aGenF, aGenV and aDirV .
        	:param aNewFace:
        	:type aNewFace: TopoDS_Shape
        	:param aNewVertex:
        	:type aNewVertex: TopoDS_Shape
        	:param aGenF:
        	:type aGenF: TopoDS_Shape
        	:param aGenV:
        	:type aGenV: TopoDS_Shape
        	:param aDirV:
        	:type aDirV: Sweep_NumShape
        	:rtype: void
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetParameters(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the resulting Shape indexed by aDirS and aGenS.
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:param aDirS:
        	:type aDirS: Sweep_NumShape
        	:rtype: TopoDS_Shape
        * Returns the resulting Shape indexed by myDirWire and aGenS.
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: TopoDS_Shape
        * Returns the resulting Shape indexed by myDirWire and myGenShape.
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_Shape(self, *args)


    def SplitShell(self, *args) -> "TopoDS_Shape":
        """
        * In some particular cases the topology of a generated Shell must be composed of independant closed Shells, in this case this function returns a Compound of independant Shells.
        	:param aNewShape:
        	:type aNewShape: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SplitShell(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_NumLinearRegularSweep
BRepSweep_NumLinearRegularSweep.Closed = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_Closed, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.DirectSolid = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_DirectSolid, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.FirstShape = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_FirstShape, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.GDDShapeIsToAdd = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_GDDShapeIsToAdd, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.GGDShapeIsToAdd = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_GGDShapeIsToAdd, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.GenIsUsed = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_GenIsUsed, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.HasShape = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_HasShape, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.IsInvariant = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_IsInvariant, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.IsUsed = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_IsUsed, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.LastShape = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_LastShape, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.MakeEmptyDirectingEdge = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyDirectingEdge, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.MakeEmptyFace = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyFace, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.MakeEmptyGeneratingEdge = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyGeneratingEdge, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.MakeEmptyVertex = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyVertex, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SeparatedWires = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SeparatedWires, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetContinuity = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetContinuity, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetDirectingPCurve = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingPCurve, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetDirectingParameter = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingParameter, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetGeneratingPCurve = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingPCurve, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetGeneratingParameter = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingParameter, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetPCurve = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetPCurve, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SetParameters = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetParameters, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.Shape = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_Shape, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep.SplitShell = new_instancemethod(_BRepSweep.BRepSweep_NumLinearRegularSweep_SplitShell, None, BRepSweep_NumLinearRegularSweep)
BRepSweep_NumLinearRegularSweep_swigregister = _BRepSweep.BRepSweep_NumLinearRegularSweep_swigregister
BRepSweep_NumLinearRegularSweep_swigregister(BRepSweep_NumLinearRegularSweep)

class BRepSweep_Prism(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Builds the prism of base S and vector V. If C is true, S is copied. If Canonize is true then generated surfaces are attempted to be canonized in simple types
        	:param S:
        	:type S: TopoDS_Shape
        	:param V:
        	:type V: gp_Vec
        	:param Copy: default value is Standard_False
        	:type Copy: bool
        	:param Canonize: default value is Standard_True
        	:type Canonize: bool
        	:rtype: None
        * Builds a semi-infinite or an infinite prism of base S. If Copy is true S is copied. If Inf is true the prism is infinite, if Inf is false the prism is infinite in the direction D. If Canonize is true then generated surfaces are attempted to be canonized in simple types
        	:param S:
        	:type S: TopoDS_Shape
        	:param D:
        	:type D: gp_Dir
        	:param Inf: default value is Standard_True
        	:type Inf: bool
        	:param Copy: default value is Standard_False
        	:type Copy: bool
        	:param Canonize: default value is Standard_True
        	:type Canonize: bool
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Prism_swiginit(self, _BRepSweep.new_BRepSweep_Prism(*args))

    def FirstShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the TopoDS Shape of the bottom of the prism.
        	:rtype: TopoDS_Shape
        * Returns the TopoDS Shape of the bottom of the prism. generated with aGenS (subShape of the generating shape).
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_Prism_FirstShape(self, *args)


    def GenIsUsed(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the shape, generated from theS is used in result shape
        	:param theS:
        	:type theS: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_Prism_GenIsUsed(self, *args)


    def IsUsed(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the aGenS is used in resulting shape
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_Prism_IsUsed(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the TopoDS Shape of the top of the prism.
        	:rtype: TopoDS_Shape
        * Returns the TopoDS Shape of the top of the prism. generated with aGenS (subShape of the generating shape).
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_Prism_LastShape(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the TopoDS Shape attached to the prism.
        	:rtype: TopoDS_Shape
        * Returns the TopoDS Shape generated with aGenS (subShape of the generating shape).
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_Prism_Shape(self, *args)


    def Vec(self, *args) -> "gp_Vec":
        """
        * Returns the Vector of the Prism, if it is an infinite prism the Vec is unitar.
        	:rtype: gp_Vec
        """
        return _BRepSweep.BRepSweep_Prism_Vec(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Prism
BRepSweep_Prism.FirstShape = new_instancemethod(_BRepSweep.BRepSweep_Prism_FirstShape, None, BRepSweep_Prism)
BRepSweep_Prism.GenIsUsed = new_instancemethod(_BRepSweep.BRepSweep_Prism_GenIsUsed, None, BRepSweep_Prism)
BRepSweep_Prism.IsUsed = new_instancemethod(_BRepSweep.BRepSweep_Prism_IsUsed, None, BRepSweep_Prism)
BRepSweep_Prism.LastShape = new_instancemethod(_BRepSweep.BRepSweep_Prism_LastShape, None, BRepSweep_Prism)
BRepSweep_Prism.Shape = new_instancemethod(_BRepSweep.BRepSweep_Prism_Shape, None, BRepSweep_Prism)
BRepSweep_Prism.Vec = new_instancemethod(_BRepSweep.BRepSweep_Prism_Vec, None, BRepSweep_Prism)
BRepSweep_Prism_swigregister = _BRepSweep.BRepSweep_Prism_swigregister
BRepSweep_Prism_swigregister(BRepSweep_Prism)

class BRepSweep_Revol(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Angle(self, *args) -> "Standard_Real":
        """
        * returns the angle.
        	:rtype: float
        """
        return _BRepSweep.BRepSweep_Revol_Angle(self, *args)


    def Axe(self, *args) -> "gp_Ax1":
        """
        * returns the axis
        	:rtype: gp_Ax1
        """
        return _BRepSweep.BRepSweep_Revol_Axe(self, *args)


    def __init__(self, *args):
        """
        * Builds the Revol of meridian S axis A and angle D. If C is true S is copied.
        	:param S:
        	:type S: TopoDS_Shape
        	:param A:
        	:type A: gp_Ax1
        	:param D:
        	:type D: float
        	:param C: default value is Standard_False
        	:type C: bool
        	:rtype: None
        * Builds the Revol of meridian S axis A and angle 2*Pi. If C is true S is copied.
        	:param S:
        	:type S: TopoDS_Shape
        	:param A:
        	:type A: gp_Ax1
        	:param C: default value is Standard_False
        	:type C: bool
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Revol_swiginit(self, _BRepSweep.new_BRepSweep_Revol(*args))

    def FirstShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the first shape of the revol (coinciding with the generating shape).
        	:rtype: TopoDS_Shape
        * Returns the first shape of the revol (coinciding with the generating shape).
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_Revol_FirstShape(self, *args)


    def IsUsed(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the aGenS is used in resulting Shape
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_Revol_IsUsed(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the TopoDS Shape of the top of the prism.
        	:rtype: TopoDS_Shape
        * Returns the TopoDS Shape of the top of the prism. generated with aGenS (subShape of the generating shape).
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_Revol_LastShape(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the TopoDS Shape attached to the Revol.
        	:rtype: TopoDS_Shape
        * Returns the TopoDS Shape generated with aGenS (subShape of the generating shape).
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_Revol_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Revol
BRepSweep_Revol.Angle = new_instancemethod(_BRepSweep.BRepSweep_Revol_Angle, None, BRepSweep_Revol)
BRepSweep_Revol.Axe = new_instancemethod(_BRepSweep.BRepSweep_Revol_Axe, None, BRepSweep_Revol)
BRepSweep_Revol.FirstShape = new_instancemethod(_BRepSweep.BRepSweep_Revol_FirstShape, None, BRepSweep_Revol)
BRepSweep_Revol.IsUsed = new_instancemethod(_BRepSweep.BRepSweep_Revol_IsUsed, None, BRepSweep_Revol)
BRepSweep_Revol.LastShape = new_instancemethod(_BRepSweep.BRepSweep_Revol_LastShape, None, BRepSweep_Revol)
BRepSweep_Revol.Shape = new_instancemethod(_BRepSweep.BRepSweep_Revol_Shape, None, BRepSweep_Revol)
BRepSweep_Revol_swigregister = _BRepSweep.BRepSweep_Revol_swigregister
BRepSweep_Revol_swigregister(BRepSweep_Revol)

class BRepSweep_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initialize the tool with <aShape>. The IndexTool must prepare an indexation for all the subshapes of this shape.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Tool_swiginit(self, _BRepSweep.new_BRepSweep_Tool(*args))

    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index of <aShape>.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: int
        """
        return _BRepSweep.BRepSweep_Tool_Index(self, *args)


    def NbShapes(self, *args) -> "Standard_Integer":
        """
        * Returns the number of subshapes in the shape.
        	:rtype: int
        """
        return _BRepSweep.BRepSweep_Tool_NbShapes(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        * Returns the Orientation of <aShape>.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: TopAbs_Orientation
        """
        return _BRepSweep.BRepSweep_Tool_Orientation(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        * Set the Orientation of <aShape> with Or.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:rtype: None
        """
        return _BRepSweep.BRepSweep_Tool_SetOrientation(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the Shape at Index anIdex.
        	:param anIndex:
        	:type anIndex: int
        	:rtype: TopoDS_Shape
        """
        return _BRepSweep.BRepSweep_Tool_Shape(self, *args)


    def Type(self, *args) -> "TopAbs_ShapeEnum":
        """
        * Returns the type of <aShape>.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: TopAbs_ShapeEnum
        """
        return _BRepSweep.BRepSweep_Tool_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Tool
BRepSweep_Tool.Index = new_instancemethod(_BRepSweep.BRepSweep_Tool_Index, None, BRepSweep_Tool)
BRepSweep_Tool.NbShapes = new_instancemethod(_BRepSweep.BRepSweep_Tool_NbShapes, None, BRepSweep_Tool)
BRepSweep_Tool.Orientation = new_instancemethod(_BRepSweep.BRepSweep_Tool_Orientation, None, BRepSweep_Tool)
BRepSweep_Tool.SetOrientation = new_instancemethod(_BRepSweep.BRepSweep_Tool_SetOrientation, None, BRepSweep_Tool)
BRepSweep_Tool.Shape = new_instancemethod(_BRepSweep.BRepSweep_Tool_Shape, None, BRepSweep_Tool)
BRepSweep_Tool.Type = new_instancemethod(_BRepSweep.BRepSweep_Tool_Type, None, BRepSweep_Tool)
BRepSweep_Tool_swigregister = _BRepSweep.BRepSweep_Tool_swigregister
BRepSweep_Tool_swigregister(BRepSweep_Tool)

class BRepSweep_Trsf(BRepSweep_NumLinearRegularSweep):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Init(self, *args) -> "void":
        """
        * ends the construction of the swept primitive calling the virtual geometric functions that can't be called in the initialize.
        	:rtype: None
        """
        return _BRepSweep.BRepSweep_Trsf_Init(self, *args)


    def Process(self, *args) -> "Standard_Boolean":
        """
        * function called to analize the way of construction of the shapes generated by aGenS and aDirV.
        	:param aGenS:
        	:type aGenS: TopoDS_Shape
        	:param aDirV:
        	:type aDirV: Sweep_NumShape
        	:rtype: bool
        """
        return _BRepSweep.BRepSweep_Trsf_Process(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Trsf
BRepSweep_Trsf.Init = new_instancemethod(_BRepSweep.BRepSweep_Trsf_Init, None, BRepSweep_Trsf)
BRepSweep_Trsf.Process = new_instancemethod(_BRepSweep.BRepSweep_Trsf_Process, None, BRepSweep_Trsf)
BRepSweep_Trsf_swigregister = _BRepSweep.BRepSweep_Trsf_swigregister
BRepSweep_Trsf_swigregister(BRepSweep_Trsf)

class BRepSweep_Rotation(BRepSweep_Trsf):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Angle(self, *args) -> "Standard_Real":
        """
        * returns the angle.
        	:rtype: float
        """
        return _BRepSweep.BRepSweep_Rotation_Angle(self, *args)


    def Axe(self, *args) -> "gp_Ax1":
        """
        * returns the axis
        	:rtype: gp_Ax1
        """
        return _BRepSweep.BRepSweep_Rotation_Axe(self, *args)


    def __init__(self, *args):
        """
        * Creates a topology by rotating <S> around A with the angle D.
        	:param S:
        	:type S: TopoDS_Shape
        	:param N:
        	:type N: Sweep_NumShape
        	:param L:
        	:type L: TopLoc_Location
        	:param A:
        	:type A: gp_Ax1
        	:param D:
        	:type D: float
        	:param C:
        	:type C: bool
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Rotation_swiginit(self, _BRepSweep.new_BRepSweep_Rotation(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Rotation
BRepSweep_Rotation.Angle = new_instancemethod(_BRepSweep.BRepSweep_Rotation_Angle, None, BRepSweep_Rotation)
BRepSweep_Rotation.Axe = new_instancemethod(_BRepSweep.BRepSweep_Rotation_Axe, None, BRepSweep_Rotation)
BRepSweep_Rotation_swigregister = _BRepSweep.BRepSweep_Rotation_swigregister
BRepSweep_Rotation_swigregister(BRepSweep_Rotation)

class BRepSweep_Translation(BRepSweep_Trsf):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a topology by translating <S> with the vector <V>. If C is true S Sucomponents are copied. If Canonize is true then generated surfaces are attempted to be canonized in simple types
        	:param S:
        	:type S: TopoDS_Shape
        	:param N:
        	:type N: Sweep_NumShape
        	:param L:
        	:type L: TopLoc_Location
        	:param V:
        	:type V: gp_Vec
        	:param C:
        	:type C: bool
        	:param Canonize: default value is Standard_True
        	:type Canonize: bool
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Translation_swiginit(self, _BRepSweep.new_BRepSweep_Translation(*args))

    def Vec(self, *args) -> "gp_Vec":
        """
        * Returns the Vector of the Prism, if it is an infinite prism the Vec is unitar.
        	:rtype: gp_Vec
        """
        return _BRepSweep.BRepSweep_Translation_Vec(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Translation
BRepSweep_Translation.Vec = new_instancemethod(_BRepSweep.BRepSweep_Translation_Vec, None, BRepSweep_Translation)
BRepSweep_Translation_swigregister = _BRepSweep.BRepSweep_Translation_swigregister
BRepSweep_Translation_swigregister(BRepSweep_Translation)



