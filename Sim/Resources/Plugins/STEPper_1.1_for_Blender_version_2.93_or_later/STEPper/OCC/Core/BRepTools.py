# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepTools module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_breptools.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepTools.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepTools')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepTools')
    _BRepTools = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepTools', [dirname(__file__)])
        except ImportError:
            import _BRepTools
            return _BRepTools
        try:
            _mod = imp.load_module('_BRepTools', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepTools = swig_import_helper()
    del swig_import_helper
else:
    import _BRepTools
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepTools.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepTools.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepTools.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepTools.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepTools.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepTools.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepTools.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepTools.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepTools.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepTools.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepTools.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepTools.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepTools.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepTools.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepTools.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepTools.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepTools.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepTools.process_exception(error, method_name, class_name)
process_exception = _BRepTools.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Bnd
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp
import OCC.Core.BVH
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Geom2d
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort

def Handle_BRepTools_History_Create() -> "opencascade::handle< BRepTools_History >":
    return _BRepTools.Handle_BRepTools_History_Create()
Handle_BRepTools_History_Create = _BRepTools.Handle_BRepTools_History_Create

def Handle_BRepTools_History_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepTools_History >":
    return _BRepTools.Handle_BRepTools_History_DownCast(t)
Handle_BRepTools_History_DownCast = _BRepTools.Handle_BRepTools_History_DownCast

def Handle_BRepTools_History_IsNull(t: 'opencascade::handle< BRepTools_History > const &') -> "bool":
    return _BRepTools.Handle_BRepTools_History_IsNull(t)
Handle_BRepTools_History_IsNull = _BRepTools.Handle_BRepTools_History_IsNull

def Handle_BRepTools_Modification_Create() -> "opencascade::handle< BRepTools_Modification >":
    return _BRepTools.Handle_BRepTools_Modification_Create()
Handle_BRepTools_Modification_Create = _BRepTools.Handle_BRepTools_Modification_Create

def Handle_BRepTools_Modification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepTools_Modification >":
    return _BRepTools.Handle_BRepTools_Modification_DownCast(t)
Handle_BRepTools_Modification_DownCast = _BRepTools.Handle_BRepTools_Modification_DownCast

def Handle_BRepTools_Modification_IsNull(t: 'opencascade::handle< BRepTools_Modification > const &') -> "bool":
    return _BRepTools.Handle_BRepTools_Modification_IsNull(t)
Handle_BRepTools_Modification_IsNull = _BRepTools.Handle_BRepTools_Modification_IsNull

def Handle_BRepTools_ReShape_Create() -> "opencascade::handle< BRepTools_ReShape >":
    return _BRepTools.Handle_BRepTools_ReShape_Create()
Handle_BRepTools_ReShape_Create = _BRepTools.Handle_BRepTools_ReShape_Create

def Handle_BRepTools_ReShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepTools_ReShape >":
    return _BRepTools.Handle_BRepTools_ReShape_DownCast(t)
Handle_BRepTools_ReShape_DownCast = _BRepTools.Handle_BRepTools_ReShape_DownCast

def Handle_BRepTools_ReShape_IsNull(t: 'opencascade::handle< BRepTools_ReShape > const &') -> "bool":
    return _BRepTools.Handle_BRepTools_ReShape_IsNull(t)
Handle_BRepTools_ReShape_IsNull = _BRepTools.Handle_BRepTools_ReShape_IsNull

def Handle_BRepTools_GTrsfModification_Create() -> "opencascade::handle< BRepTools_GTrsfModification >":
    return _BRepTools.Handle_BRepTools_GTrsfModification_Create()
Handle_BRepTools_GTrsfModification_Create = _BRepTools.Handle_BRepTools_GTrsfModification_Create

def Handle_BRepTools_GTrsfModification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepTools_GTrsfModification >":
    return _BRepTools.Handle_BRepTools_GTrsfModification_DownCast(t)
Handle_BRepTools_GTrsfModification_DownCast = _BRepTools.Handle_BRepTools_GTrsfModification_DownCast

def Handle_BRepTools_GTrsfModification_IsNull(t: 'opencascade::handle< BRepTools_GTrsfModification > const &') -> "bool":
    return _BRepTools.Handle_BRepTools_GTrsfModification_IsNull(t)
Handle_BRepTools_GTrsfModification_IsNull = _BRepTools.Handle_BRepTools_GTrsfModification_IsNull

def Handle_BRepTools_NurbsConvertModification_Create() -> "opencascade::handle< BRepTools_NurbsConvertModification >":
    return _BRepTools.Handle_BRepTools_NurbsConvertModification_Create()
Handle_BRepTools_NurbsConvertModification_Create = _BRepTools.Handle_BRepTools_NurbsConvertModification_Create

def Handle_BRepTools_NurbsConvertModification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepTools_NurbsConvertModification >":
    return _BRepTools.Handle_BRepTools_NurbsConvertModification_DownCast(t)
Handle_BRepTools_NurbsConvertModification_DownCast = _BRepTools.Handle_BRepTools_NurbsConvertModification_DownCast

def Handle_BRepTools_NurbsConvertModification_IsNull(t: 'opencascade::handle< BRepTools_NurbsConvertModification > const &') -> "bool":
    return _BRepTools.Handle_BRepTools_NurbsConvertModification_IsNull(t)
Handle_BRepTools_NurbsConvertModification_IsNull = _BRepTools.Handle_BRepTools_NurbsConvertModification_IsNull

def Handle_BRepTools_TrsfModification_Create() -> "opencascade::handle< BRepTools_TrsfModification >":
    return _BRepTools.Handle_BRepTools_TrsfModification_Create()
Handle_BRepTools_TrsfModification_Create = _BRepTools.Handle_BRepTools_TrsfModification_Create

def Handle_BRepTools_TrsfModification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepTools_TrsfModification >":
    return _BRepTools.Handle_BRepTools_TrsfModification_DownCast(t)
Handle_BRepTools_TrsfModification_DownCast = _BRepTools.Handle_BRepTools_TrsfModification_DownCast

def Handle_BRepTools_TrsfModification_IsNull(t: 'opencascade::handle< BRepTools_TrsfModification > const &') -> "bool":
    return _BRepTools.Handle_BRepTools_TrsfModification_IsNull(t)
Handle_BRepTools_TrsfModification_IsNull = _BRepTools.Handle_BRepTools_TrsfModification_IsNull
class BRepTools_MapOfVertexPnt2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepTools.BRepTools_MapOfVertexPnt2d_swiginit(self, _BRepTools.new_BRepTools_MapOfVertexPnt2d(*args))
    __swig_destroy__ = _BRepTools.delete_BRepTools_MapOfVertexPnt2d
BRepTools_MapOfVertexPnt2d.begin = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_begin, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.end = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_end, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.cbegin = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_cbegin, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.cend = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_cend, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.Exchange = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_Exchange, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.Assign = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_Assign, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.Set = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_Set, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.ReSize = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_ReSize, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.Bind = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_Bind, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.Bound = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_Bound, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.IsBound = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_IsBound, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.UnBind = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_UnBind, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.Seek = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_Seek, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.Find = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_Find, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.ChangeSeek = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_ChangeSeek, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.ChangeFind = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_ChangeFind, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.__call__ = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d___call__, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.Clear = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_Clear, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d.Size = new_instancemethod(_BRepTools.BRepTools_MapOfVertexPnt2d_Size, None, BRepTools_MapOfVertexPnt2d)
BRepTools_MapOfVertexPnt2d_swigregister = _BRepTools.BRepTools_MapOfVertexPnt2d_swigregister
BRepTools_MapOfVertexPnt2d_swigregister(BRepTools_MapOfVertexPnt2d)

class breptools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddUVBounds(*args) -> "void":
        """
        * Adds to the box <B> the bounding values in the parametric space of F.
        	:param F:
        	:type F: TopoDS_Face
        	:param B:
        	:type B: Bnd_Box2d
        	:rtype: void
        * Adds to the box <B> the bounding values of the wire in the parametric space of F.
        	:param F:
        	:type F: TopoDS_Face
        	:param W:
        	:type W: TopoDS_Wire
        	:param B:
        	:type B: Bnd_Box2d
        	:rtype: void
        * Adds to the box <B> the bounding values of the edge in the parametric space of F.
        	:param F:
        	:type F: TopoDS_Face
        	:param E:
        	:type E: TopoDS_Edge
        	:param B:
        	:type B: Bnd_Box2d
        	:rtype: void
        """
        return _BRepTools.breptools_AddUVBounds(*args)

    AddUVBounds = staticmethod(AddUVBounds)

    def Clean(*args) -> "void":
        """
        * Removes all the triangulations of the faces of <S> and removes all polygons on triangulations of the edges.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: void
        """
        return _BRepTools.breptools_Clean(*args)

    Clean = staticmethod(Clean)

    def CleanGeometry(*args) -> "void":
        """
        * Removes geometry (curves and surfaces) from all edges and faces of the shape
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: void
        """
        return _BRepTools.breptools_CleanGeometry(*args)

    CleanGeometry = staticmethod(CleanGeometry)

    def Compare(*args) -> "Standard_Boolean":
        """
        * Returns True if the distance between the two vertices is lower than their tolerance.
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: bool
        * Returns True if the distance between the two edges is lower than their tolerance.
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:rtype: bool
        """
        return _BRepTools.breptools_Compare(*args)

    Compare = staticmethod(Compare)

    def DetectClosedness(*args) -> "Standard_Boolean &, Standard_Boolean &":
        """
        * Detect closedness of face in U and V directions
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theUclosed:
        	:type theUclosed: bool
        	:param theVclosed:
        	:type theVclosed: bool
        	:rtype: void
        """
        return _BRepTools.breptools_DetectClosedness(*args)

    DetectClosedness = staticmethod(DetectClosedness)

    def Dump(*args) -> "void":
        """
        * Dumps the topological structure and the geometry of <Sh> on the stream <S>.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param S:
        	:type S: Standard_OStream
        	:rtype: void
        """
        return _BRepTools.breptools_Dump(*args)

    Dump = staticmethod(Dump)

    def EvalAndUpdateTol(*args) -> "Standard_Real":
        """
        * Evals real tolerance of edge <theE>. <theC3d>, <theC2d>, <theS>, <theF>, <theL> are correspondently 3d curve of edge, 2d curve on surface <theS> and rang of edge If calculated tolerance is more then current edge tolerance, edge is updated. Method returns actual tolerance of edge
        	:param theE:
        	:type theE: TopoDS_Edge
        	:param theC3d:
        	:type theC3d: Geom_Curve
        	:param theC2d:
        	:type theC2d: Geom2d_Curve
        	:param theS:
        	:type theS: Geom_Surface
        	:param theF:
        	:type theF: float
        	:param theL:
        	:type theL: float
        	:rtype: float
        """
        return _BRepTools.breptools_EvalAndUpdateTol(*args)

    EvalAndUpdateTol = staticmethod(EvalAndUpdateTol)

    def IsReallyClosed(*args) -> "Standard_Boolean":
        """
        * Verifies that the edge <E> is found two times on the face <F> before calling BRep_Tool::IsClosed.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _BRepTools.breptools_IsReallyClosed(*args)

    IsReallyClosed = staticmethod(IsReallyClosed)

    def Map3DEdges(*args) -> "void":
        """
        * Stores in the map <M> all the 3D topology edges of <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:param M:
        	:type M: TopTools_IndexedMapOfShape
        	:rtype: void
        """
        return _BRepTools.breptools_Map3DEdges(*args)

    Map3DEdges = staticmethod(Map3DEdges)

    def OuterWire(*args) -> "TopoDS_Wire":
        """
        * Returns the outer most wire of <F>. Returns a Null wire if <F> has no wires.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: TopoDS_Wire
        """
        return _BRepTools.breptools_OuterWire(*args)

    OuterWire = staticmethod(OuterWire)

    def Read(*args) -> "Standard_Boolean":
        """
        * Reads a Shape from <S> in returns it in <Sh>. <B> is used to build the shape.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param S:
        	:type S: Standard_IStream
        	:param B:
        	:type B: BRep_Builder
        	:param PR: default value is NULL
        	:type PR: Message_ProgressIndicator
        	:rtype: void
        * Reads a Shape from <File>, returns it in <Sh>. <B> is used to build the shape.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param File:
        	:type File: char *
        	:param B:
        	:type B: BRep_Builder
        	:param PR: default value is NULL
        	:type PR: Message_ProgressIndicator
        	:rtype: bool
        """
        return _BRepTools.breptools_Read(*args)

    Read = staticmethod(Read)

    def RemoveUnusedPCurves(*args) -> "void":
        """
        * Removes all the pcurves of the edges of <S> that refer to surfaces not belonging to any face of <S>
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: void
        """
        return _BRepTools.breptools_RemoveUnusedPCurves(*args)

    RemoveUnusedPCurves = staticmethod(RemoveUnusedPCurves)

    def Triangulation(*args) -> "Standard_Boolean":
        """
        * verifies that each face from the shape <S> has got a triangulation with a deflection <= deflec and the edges a discretisation on this triangulation.
        	:param S:
        	:type S: TopoDS_Shape
        	:param deflec:
        	:type deflec: float
        	:rtype: bool
        """
        return _BRepTools.breptools_Triangulation(*args)

    Triangulation = staticmethod(Triangulation)

    def UVBounds(*args) -> "Standard_Real &, Standard_Real &, Standard_Real &, Standard_Real &":
        """
        * Returns in UMin, UMax, VMin, VMax the bounding values in the parametric space of F.
        	:param F:
        	:type F: TopoDS_Face
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: void
        * Returns in UMin, UMax, VMin, VMax the bounding values of the wire in the parametric space of F.
        	:param F:
        	:type F: TopoDS_Face
        	:param W:
        	:type W: TopoDS_Wire
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: void
        * Returns in UMin, UMax, VMin, VMax the bounding values of the edge in the parametric space of F.
        	:param F:
        	:type F: TopoDS_Face
        	:param E:
        	:type E: TopoDS_Edge
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: void
        """
        return _BRepTools.breptools_UVBounds(*args)

    UVBounds = staticmethod(UVBounds)

    def Update(*args) -> "void":
        """
        * Update a vertex (nothing is done)
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: void
        * Update an edge, compute 2d bounding boxes.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: void
        * Update a wire (nothing is done)
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: void
        * Update a Face, update UV points.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: void
        * Update a shell (nothing is done)
        	:param S:
        	:type S: TopoDS_Shell
        	:rtype: void
        * Update a solid (nothing is done)
        	:param S:
        	:type S: TopoDS_Solid
        	:rtype: void
        * Update a composite solid (nothing is done)
        	:param C:
        	:type C: TopoDS_CompSolid
        	:rtype: void
        * Update a compound (nothing is done)
        	:param C:
        	:type C: TopoDS_Compound
        	:rtype: void
        * Update a shape, call the corect update.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: void
        """
        return _BRepTools.breptools_Update(*args)

    Update = staticmethod(Update)

    def UpdateFaceUVPoints(*args) -> "void":
        """
        * For each edge of the face <F> reset the UV points to the bounding points of the parametric curve of the edge on the face.
        	:param theF:
        	:type theF: TopoDS_Face
        	:rtype: void
        """
        return _BRepTools.breptools_UpdateFaceUVPoints(*args)

    UpdateFaceUVPoints = staticmethod(UpdateFaceUVPoints)

    def Write(*args) -> "Standard_Boolean":
        """
        * Writes <Sh> on <S> in an ASCII format.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param S:
        	:type S: Standard_OStream
        	:param PR: default value is NULL
        	:type PR: Message_ProgressIndicator
        	:rtype: void
        * Writes <Sh> in <File>.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param File:
        	:type File: char *
        	:param PR: default value is NULL
        	:type PR: Message_ProgressIndicator
        	:rtype: bool
        """
        return _BRepTools.breptools_Write(*args)

    Write = staticmethod(Write)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepTools.breptools_swiginit(self, _BRepTools.new_breptools())
    __swig_destroy__ = _BRepTools.delete_breptools
breptools_swigregister = _BRepTools.breptools_swigregister
breptools_swigregister(breptools)

def breptools_AddUVBounds(*args) -> "void":
    """
    * Adds to the box <B> the bounding values in the parametric space of F.
    	:param F:
    	:type F: TopoDS_Face
    	:param B:
    	:type B: Bnd_Box2d
    	:rtype: void
    * Adds to the box <B> the bounding values of the wire in the parametric space of F.
    	:param F:
    	:type F: TopoDS_Face
    	:param W:
    	:type W: TopoDS_Wire
    	:param B:
    	:type B: Bnd_Box2d
    	:rtype: void
    * Adds to the box <B> the bounding values of the edge in the parametric space of F.
    	:param F:
    	:type F: TopoDS_Face
    	:param E:
    	:type E: TopoDS_Edge
    	:param B:
    	:type B: Bnd_Box2d
    	:rtype: void
    """
    return _BRepTools.breptools_AddUVBounds(*args)

def breptools_Clean(*args) -> "void":
    """
    * Removes all the triangulations of the faces of <S> and removes all polygons on triangulations of the edges.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: void
    """
    return _BRepTools.breptools_Clean(*args)

def breptools_CleanGeometry(*args) -> "void":
    """
    * Removes geometry (curves and surfaces) from all edges and faces of the shape
    	:param theShape:
    	:type theShape: TopoDS_Shape
    	:rtype: void
    """
    return _BRepTools.breptools_CleanGeometry(*args)

def breptools_Compare(*args) -> "Standard_Boolean":
    """
    * Returns True if the distance between the two vertices is lower than their tolerance.
    	:param V1:
    	:type V1: TopoDS_Vertex
    	:param V2:
    	:type V2: TopoDS_Vertex
    	:rtype: bool
    * Returns True if the distance between the two edges is lower than their tolerance.
    	:param E1:
    	:type E1: TopoDS_Edge
    	:param E2:
    	:type E2: TopoDS_Edge
    	:rtype: bool
    """
    return _BRepTools.breptools_Compare(*args)

def breptools_DetectClosedness(*args) -> "Standard_Boolean &, Standard_Boolean &":
    """
    * Detect closedness of face in U and V directions
    	:param theFace:
    	:type theFace: TopoDS_Face
    	:param theUclosed:
    	:type theUclosed: bool
    	:param theVclosed:
    	:type theVclosed: bool
    	:rtype: void
    """
    return _BRepTools.breptools_DetectClosedness(*args)

def breptools_Dump(*args) -> "void":
    """
    * Dumps the topological structure and the geometry of <Sh> on the stream <S>.
    	:param Sh:
    	:type Sh: TopoDS_Shape
    	:param S:
    	:type S: Standard_OStream
    	:rtype: void
    """
    return _BRepTools.breptools_Dump(*args)

def breptools_EvalAndUpdateTol(*args) -> "Standard_Real":
    """
    * Evals real tolerance of edge <theE>. <theC3d>, <theC2d>, <theS>, <theF>, <theL> are correspondently 3d curve of edge, 2d curve on surface <theS> and rang of edge If calculated tolerance is more then current edge tolerance, edge is updated. Method returns actual tolerance of edge
    	:param theE:
    	:type theE: TopoDS_Edge
    	:param theC3d:
    	:type theC3d: Geom_Curve
    	:param theC2d:
    	:type theC2d: Geom2d_Curve
    	:param theS:
    	:type theS: Geom_Surface
    	:param theF:
    	:type theF: float
    	:param theL:
    	:type theL: float
    	:rtype: float
    """
    return _BRepTools.breptools_EvalAndUpdateTol(*args)

def breptools_IsReallyClosed(*args) -> "Standard_Boolean":
    """
    * Verifies that the edge <E> is found two times on the face <F> before calling BRep_Tool::IsClosed.
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: bool
    """
    return _BRepTools.breptools_IsReallyClosed(*args)

def breptools_Map3DEdges(*args) -> "void":
    """
    * Stores in the map <M> all the 3D topology edges of <S>.
    	:param S:
    	:type S: TopoDS_Shape
    	:param M:
    	:type M: TopTools_IndexedMapOfShape
    	:rtype: void
    """
    return _BRepTools.breptools_Map3DEdges(*args)

def breptools_OuterWire(*args) -> "TopoDS_Wire":
    """
    * Returns the outer most wire of <F>. Returns a Null wire if <F> has no wires.
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: TopoDS_Wire
    """
    return _BRepTools.breptools_OuterWire(*args)

def breptools_Read(*args) -> "Standard_Boolean":
    """
    * Reads a Shape from <S> in returns it in <Sh>. <B> is used to build the shape.
    	:param Sh:
    	:type Sh: TopoDS_Shape
    	:param S:
    	:type S: Standard_IStream
    	:param B:
    	:type B: BRep_Builder
    	:param PR: default value is NULL
    	:type PR: Message_ProgressIndicator
    	:rtype: void
    * Reads a Shape from <File>, returns it in <Sh>. <B> is used to build the shape.
    	:param Sh:
    	:type Sh: TopoDS_Shape
    	:param File:
    	:type File: char *
    	:param B:
    	:type B: BRep_Builder
    	:param PR: default value is NULL
    	:type PR: Message_ProgressIndicator
    	:rtype: bool
    """
    return _BRepTools.breptools_Read(*args)

def breptools_RemoveUnusedPCurves(*args) -> "void":
    """
    * Removes all the pcurves of the edges of <S> that refer to surfaces not belonging to any face of <S>
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: void
    """
    return _BRepTools.breptools_RemoveUnusedPCurves(*args)

def breptools_Triangulation(*args) -> "Standard_Boolean":
    """
    * verifies that each face from the shape <S> has got a triangulation with a deflection <= deflec and the edges a discretisation on this triangulation.
    	:param S:
    	:type S: TopoDS_Shape
    	:param deflec:
    	:type deflec: float
    	:rtype: bool
    """
    return _BRepTools.breptools_Triangulation(*args)

def breptools_UVBounds(*args) -> "Standard_Real &, Standard_Real &, Standard_Real &, Standard_Real &":
    """
    * Returns in UMin, UMax, VMin, VMax the bounding values in the parametric space of F.
    	:param F:
    	:type F: TopoDS_Face
    	:param UMin:
    	:type UMin: float
    	:param UMax:
    	:type UMax: float
    	:param VMin:
    	:type VMin: float
    	:param VMax:
    	:type VMax: float
    	:rtype: void
    * Returns in UMin, UMax, VMin, VMax the bounding values of the wire in the parametric space of F.
    	:param F:
    	:type F: TopoDS_Face
    	:param W:
    	:type W: TopoDS_Wire
    	:param UMin:
    	:type UMin: float
    	:param UMax:
    	:type UMax: float
    	:param VMin:
    	:type VMin: float
    	:param VMax:
    	:type VMax: float
    	:rtype: void
    * Returns in UMin, UMax, VMin, VMax the bounding values of the edge in the parametric space of F.
    	:param F:
    	:type F: TopoDS_Face
    	:param E:
    	:type E: TopoDS_Edge
    	:param UMin:
    	:type UMin: float
    	:param UMax:
    	:type UMax: float
    	:param VMin:
    	:type VMin: float
    	:param VMax:
    	:type VMax: float
    	:rtype: void
    """
    return _BRepTools.breptools_UVBounds(*args)

def breptools_Update(*args) -> "void":
    """
    * Update a vertex (nothing is done)
    	:param V:
    	:type V: TopoDS_Vertex
    	:rtype: void
    * Update an edge, compute 2d bounding boxes.
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: void
    * Update a wire (nothing is done)
    	:param W:
    	:type W: TopoDS_Wire
    	:rtype: void
    * Update a Face, update UV points.
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: void
    * Update a shell (nothing is done)
    	:param S:
    	:type S: TopoDS_Shell
    	:rtype: void
    * Update a solid (nothing is done)
    	:param S:
    	:type S: TopoDS_Solid
    	:rtype: void
    * Update a composite solid (nothing is done)
    	:param C:
    	:type C: TopoDS_CompSolid
    	:rtype: void
    * Update a compound (nothing is done)
    	:param C:
    	:type C: TopoDS_Compound
    	:rtype: void
    * Update a shape, call the corect update.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: void
    """
    return _BRepTools.breptools_Update(*args)

def breptools_UpdateFaceUVPoints(*args) -> "void":
    """
    * For each edge of the face <F> reset the UV points to the bounding points of the parametric curve of the edge on the face.
    	:param theF:
    	:type theF: TopoDS_Face
    	:rtype: void
    """
    return _BRepTools.breptools_UpdateFaceUVPoints(*args)

def breptools_Write(*args) -> "Standard_Boolean":
    """
    * Writes <Sh> on <S> in an ASCII format.
    	:param Sh:
    	:type Sh: TopoDS_Shape
    	:param S:
    	:type S: Standard_OStream
    	:param PR: default value is NULL
    	:type PR: Message_ProgressIndicator
    	:rtype: void
    * Writes <Sh> in <File>.
    	:param Sh:
    	:type Sh: TopoDS_Shape
    	:param File:
    	:type File: char *
    	:param PR: default value is NULL
    	:type PR: Message_ProgressIndicator
    	:rtype: bool
    """
    return _BRepTools.breptools_Write(*args)

class BRepTools_History(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TRelationType_Removed = _BRepTools.BRepTools_History_TRelationType_Removed
    TRelationType_Generated = _BRepTools.BRepTools_History_TRelationType_Generated
    TRelationType_Modified = _BRepTools.BRepTools_History_TRelationType_Modified

    def AddGenerated(self, *args) -> "void":
        """
        * Methods to set the history. Set the second shape as generated one from the first shape.
        	:param theInitial:
        	:type theInitial: TopoDS_Shape
        	:param theGenerated:
        	:type theGenerated: TopoDS_Shape
        	:rtype: None
        """
        return _BRepTools.BRepTools_History_AddGenerated(self, *args)


    def AddModified(self, *args) -> "void":
        """
        * Set the second shape as modified one from the first shape.
        	:param theInitial:
        	:type theInitial: TopoDS_Shape
        	:param theModified:
        	:type theModified: TopoDS_Shape
        	:rtype: None
        """
        return _BRepTools.BRepTools_History_AddModified(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears the history.
        	:rtype: None
        """
        return _BRepTools.BRepTools_History_Clear(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(BRepTools_History self) -> std::string"""
        return _BRepTools.BRepTools_History_DumpToString(self)


    def Generated(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Methods to read the history. Returns all shapes generated from the shape.
        	:param theInitial:
        	:type theInitial: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BRepTools.BRepTools_History_Generated(self, *args)


    def HasGenerated(self, *args) -> "Standard_Boolean":
        """
        * Returns 'true' if there any shapes with Generated elements present
        	:rtype: bool
        """
        return _BRepTools.BRepTools_History_HasGenerated(self, *args)


    def HasModified(self, *args) -> "Standard_Boolean":
        """
        * Returns 'true' if there any Modified shapes present
        	:rtype: bool
        """
        return _BRepTools.BRepTools_History_HasModified(self, *args)


    def HasRemoved(self, *args) -> "Standard_Boolean":
        """
        * Returns 'true' if there any removed shapes present
        	:rtype: bool
        """
        return _BRepTools.BRepTools_History_HasRemoved(self, *args)


    def IsRemoved(self, *args) -> "Standard_Boolean":
        """
        * Returns 'true' if the shape is removed.
        	:param theInitial:
        	:type theInitial: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepTools.BRepTools_History_IsRemoved(self, *args)


    def IsSupportedType(*args) -> "Standard_Boolean":
        """
        * Returns 'true' if the type of the shape is supported by the history.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepTools.BRepTools_History_IsSupportedType(*args)

    IsSupportedType = staticmethod(IsSupportedType)

    def Modified(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns all shapes modified from the shape.
        	:param theInitial:
        	:type theInitial: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BRepTools.BRepTools_History_Modified(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Set the shape as removed one.
        	:param theRemoved:
        	:type theRemoved: TopoDS_Shape
        	:rtype: None
        """
        return _BRepTools.BRepTools_History_Remove(self, *args)


    def ReplaceGenerated(self, *args) -> "void":
        """
        * Set the second shape as the only generated one from the first one.
        	:param theInitial:
        	:type theInitial: TopoDS_Shape
        	:param theGenerated:
        	:type theGenerated: TopoDS_Shape
        	:rtype: None
        """
        return _BRepTools.BRepTools_History_ReplaceGenerated(self, *args)


    def ReplaceModified(self, *args) -> "void":
        """
        * Set the second shape as the only modified one from the first one.
        	:param theInitial:
        	:type theInitial: TopoDS_Shape
        	:param theModified:
        	:type theModified: TopoDS_Shape
        	:rtype: None
        """
        return _BRepTools.BRepTools_History_ReplaceModified(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepTools_History_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        """__init__(BRepTools_History self) -> BRepTools_History"""
        _BRepTools.BRepTools_History_swiginit(self, _BRepTools.new_BRepTools_History())
    __swig_destroy__ = _BRepTools.delete_BRepTools_History
BRepTools_History.AddGenerated = new_instancemethod(_BRepTools.BRepTools_History_AddGenerated, None, BRepTools_History)
BRepTools_History.AddModified = new_instancemethod(_BRepTools.BRepTools_History_AddModified, None, BRepTools_History)
BRepTools_History.Clear = new_instancemethod(_BRepTools.BRepTools_History_Clear, None, BRepTools_History)
BRepTools_History.DumpToString = new_instancemethod(_BRepTools.BRepTools_History_DumpToString, None, BRepTools_History)
BRepTools_History.Generated = new_instancemethod(_BRepTools.BRepTools_History_Generated, None, BRepTools_History)
BRepTools_History.HasGenerated = new_instancemethod(_BRepTools.BRepTools_History_HasGenerated, None, BRepTools_History)
BRepTools_History.HasModified = new_instancemethod(_BRepTools.BRepTools_History_HasModified, None, BRepTools_History)
BRepTools_History.HasRemoved = new_instancemethod(_BRepTools.BRepTools_History_HasRemoved, None, BRepTools_History)
BRepTools_History.IsRemoved = new_instancemethod(_BRepTools.BRepTools_History_IsRemoved, None, BRepTools_History)
BRepTools_History.Modified = new_instancemethod(_BRepTools.BRepTools_History_Modified, None, BRepTools_History)
BRepTools_History.Remove = new_instancemethod(_BRepTools.BRepTools_History_Remove, None, BRepTools_History)
BRepTools_History.ReplaceGenerated = new_instancemethod(_BRepTools.BRepTools_History_ReplaceGenerated, None, BRepTools_History)
BRepTools_History.ReplaceModified = new_instancemethod(_BRepTools.BRepTools_History_ReplaceModified, None, BRepTools_History)
BRepTools_History_swigregister = _BRepTools.BRepTools_History_swigregister
BRepTools_History_swigregister(BRepTools_History)

def BRepTools_History_IsSupportedType(*args) -> "Standard_Boolean":
    """
    * Returns 'true' if the type of the shape is supported by the history.
    	:param theShape:
    	:type theShape: TopoDS_Shape
    	:rtype: bool
    """
    return _BRepTools.BRepTools_History_IsSupportedType(*args)

class BRepTools_Modification(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Continuity(self, *args) -> "GeomAbs_Shape":
        """
        * Returns the continuity of <NewE> between <NewF1> and <NewF2>. <NewE> is the new edge created from <E>. <NewF1> (resp. <NewF2>) is the new face created from <F1> (resp. <F2>).
        	:param E:
        	:type E: TopoDS_Edge
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:param NewE:
        	:type NewE: TopoDS_Edge
        	:param NewF1:
        	:type NewF1: TopoDS_Face
        	:param NewF2:
        	:type NewF2: TopoDS_Face
        	:rtype: GeomAbs_Shape
        """
        return _BRepTools.BRepTools_Modification_Continuity(self, *args)


    def NewCurve(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the edge, E, has been modified. If the edge has been modified: - C is the new geometry associated with the edge, - L is its new location, and - Tol is the new tolerance. If the edge has not been modified, this function returns false, and the values of C, L and Tol are not significant.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Geom_Curve
        	:param L:
        	:type L: TopLoc_Location
        	:param Tol:
        	:type Tol: float
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Modification_NewCurve(self, *args)


    def NewCurve2d(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the edge, E, has a new curve on surface on the face, F. If a new curve exists: - C is the new geometry of the edge, - L is the new location, and - Tol is the new tolerance. NewE is the new edge created from E, and NewF is the new face created from F. If there is no new curve on the face, this function returns false, and the values of C, L and Tol are not significant.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param NewE:
        	:type NewE: TopoDS_Edge
        	:param NewF:
        	:type NewF: TopoDS_Face
        	:param C:
        	:type C: Geom2d_Curve
        	:param Tol:
        	:type Tol: float
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Modification_NewCurve2d(self, *args)


    def NewParameter(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the vertex V has a new parameter on the edge E. If a new parameter exists: - P is the parameter, and - Tol is the new tolerance. If there is no new parameter this function returns false, and the values of P and Tol are not significant.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: float
        	:param Tol:
        	:type Tol: float
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Modification_NewParameter(self, *args)


    def NewPoint(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the vertex V has been modified. If V has been modified: - P is the new geometry of the vertex, and - Tol is the new tolerance. If the vertex has not been modified this function returns false, and the values of P and Tol are not significant.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P:
        	:type P: gp_Pnt
        	:param Tol:
        	:type Tol: float
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Modification_NewPoint(self, *args)


    def NewPolygon(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the edge has been modified according to changed polygon. If the edge has been modified: - P is a new polygon
        	:param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: Poly_Polygon3D
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Modification_NewPolygon(self, *args)


    def NewPolygonOnTriangulation(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the edge has been modified according to changed polygon on triangulation. If the edge has been modified: - P is a new polygon on triangulation
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param P:
        	:type P: Poly_PolygonOnTriangulation
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Modification_NewPolygonOnTriangulation(self, *args)


    def NewSurface(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the face, F, has been modified. If the face has been modified: - S is the new geometry of the face, - L is its new location, and - Tol is the new tolerance. The flag, RevWires, is set to true when the modification reverses the normal of the surface, (i.e. the wires have to be reversed). The flag, RevFace, is set to true if the orientation of the modified face changes in the shells which contain it. If the face has not been modified this function returns false, and the values of S, L, Tol, RevWires and RevFace are not significant.
        	:param F:
        	:type F: TopoDS_Face
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param Tol:
        	:type Tol: float
        	:param RevWires:
        	:type RevWires: bool
        	:param RevFace:
        	:type RevFace: bool
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Modification_NewSurface(self, *args)


    def NewTriangulation(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the face has been modified according to changed triangulation. If the face has been modified: - T is a new triangulation on the face
        	:param F:
        	:type F: TopoDS_Face
        	:param T:
        	:type T: Poly_Triangulation
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Modification_NewTriangulation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepTools_Modification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTools.delete_BRepTools_Modification
BRepTools_Modification.Continuity = new_instancemethod(_BRepTools.BRepTools_Modification_Continuity, None, BRepTools_Modification)
BRepTools_Modification.NewCurve = new_instancemethod(_BRepTools.BRepTools_Modification_NewCurve, None, BRepTools_Modification)
BRepTools_Modification.NewCurve2d = new_instancemethod(_BRepTools.BRepTools_Modification_NewCurve2d, None, BRepTools_Modification)
BRepTools_Modification.NewParameter = new_instancemethod(_BRepTools.BRepTools_Modification_NewParameter, None, BRepTools_Modification)
BRepTools_Modification.NewPoint = new_instancemethod(_BRepTools.BRepTools_Modification_NewPoint, None, BRepTools_Modification)
BRepTools_Modification.NewPolygon = new_instancemethod(_BRepTools.BRepTools_Modification_NewPolygon, None, BRepTools_Modification)
BRepTools_Modification.NewPolygonOnTriangulation = new_instancemethod(_BRepTools.BRepTools_Modification_NewPolygonOnTriangulation, None, BRepTools_Modification)
BRepTools_Modification.NewSurface = new_instancemethod(_BRepTools.BRepTools_Modification_NewSurface, None, BRepTools_Modification)
BRepTools_Modification.NewTriangulation = new_instancemethod(_BRepTools.BRepTools_Modification_NewTriangulation, None, BRepTools_Modification)
BRepTools_Modification_swigregister = _BRepTools.BRepTools_Modification_swigregister
BRepTools_Modification_swigregister(BRepTools_Modification)

class BRepTools_Modifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty Modifier.
        	:param theMutableInput: default value is Standard_False
        	:type theMutableInput: bool
        	:rtype: None
        * Creates a modifier on the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        * Creates a modifier on the shape <S>, and performs the modifications described by <M>.
        	:param S:
        	:type S: TopoDS_Shape
        	:param M:
        	:type M: BRepTools_Modification
        	:rtype: None
        """
        _BRepTools.BRepTools_Modifier_swiginit(self, _BRepTools.new_BRepTools_Modifier(*args))

    def Init(self, *args) -> "void":
        """
        * Initializes the modifier with the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _BRepTools.BRepTools_Modifier_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns Standard_True if the modification has been computed successfully.
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Modifier_IsDone(self, *args)


    def IsMutableInput(self, *args) -> "Standard_Boolean":
        """
        * Returns the current mutable input state
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Modifier_IsMutableInput(self, *args)


    def ModifiedShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the modified shape corresponding to <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepTools.BRepTools_Modifier_ModifiedShape(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs the modifications described by <M>.
        	:param M:
        	:type M: BRepTools_Modification
        	:param aProgress: default value is NULL
        	:type aProgress: Message_ProgressIndicator
        	:rtype: None
        """
        return _BRepTools.BRepTools_Modifier_Perform(self, *args)


    def SetMutableInput(self, *args) -> "void":
        """
        * Sets the mutable input state If true then the input (original) shape can be modified during modification process
        	:param theMutableInput:
        	:type theMutableInput: bool
        	:rtype: None
        """
        return _BRepTools.BRepTools_Modifier_SetMutableInput(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTools.delete_BRepTools_Modifier
BRepTools_Modifier.Init = new_instancemethod(_BRepTools.BRepTools_Modifier_Init, None, BRepTools_Modifier)
BRepTools_Modifier.IsDone = new_instancemethod(_BRepTools.BRepTools_Modifier_IsDone, None, BRepTools_Modifier)
BRepTools_Modifier.IsMutableInput = new_instancemethod(_BRepTools.BRepTools_Modifier_IsMutableInput, None, BRepTools_Modifier)
BRepTools_Modifier.ModifiedShape = new_instancemethod(_BRepTools.BRepTools_Modifier_ModifiedShape, None, BRepTools_Modifier)
BRepTools_Modifier.Perform = new_instancemethod(_BRepTools.BRepTools_Modifier_Perform, None, BRepTools_Modifier)
BRepTools_Modifier.SetMutableInput = new_instancemethod(_BRepTools.BRepTools_Modifier_SetMutableInput, None, BRepTools_Modifier)
BRepTools_Modifier_swigregister = _BRepTools.BRepTools_Modifier_swigregister
BRepTools_Modifier_swigregister(BRepTools_Modifier)

class BRepTools_Quilt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Add the faces of <S> to the Quilt, the faces containing bounded edges are copied.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _BRepTools.BRepTools_Quilt_Add(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _BRepTools.BRepTools_Quilt_swiginit(self, _BRepTools.new_BRepTools_Quilt(*args))

    def Bind(self, *args) -> "void":
        """
        * Binds <Enew> to be the new edge instead of <Eold>. //! The faces of the added shape containing <Eold> will be copied to substitute <Eold> by <Enew>. //! The vertices of <Eold> will be bound to the vertices of <Enew> with the same orientation. //! If <Eold> and <Enew> have different orientations the curves are considered to be opposite and the pcurves of <Eold> will be copied and reversed in the new faces. //! <Eold> must belong to the next added shape, <Enew> must belong to a Shape added before.
        	:param Eold:
        	:type Eold: TopoDS_Edge
        	:param Enew:
        	:type Enew: TopoDS_Edge
        	:rtype: None
        * Binds <VNew> to be a new vertex instead of <Vold>. //! The faces of the added shape containing <Vold> will be copied to substitute <Vold> by <Vnew>.
        	:param Vold:
        	:type Vold: TopoDS_Vertex
        	:param Vnew:
        	:type Vnew: TopoDS_Vertex
        	:rtype: None
        """
        return _BRepTools.BRepTools_Quilt_Bind(self, *args)


    def Copy(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the shape substitued to <S> in the Quilt.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepTools.BRepTools_Quilt_Copy(self, *args)


    def IsCopied(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <S> has been copied (<S> is a vertex, an edge or a face)
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Quilt_IsCopied(self, *args)


    def Shells(self, *args) -> "TopoDS_Shape":
        """
        * Returns a Compound of shells made from the current set of faces. The shells will be flagged as closed or not closed.
        	:rtype: TopoDS_Shape
        """
        return _BRepTools.BRepTools_Quilt_Shells(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTools.delete_BRepTools_Quilt
BRepTools_Quilt.Add = new_instancemethod(_BRepTools.BRepTools_Quilt_Add, None, BRepTools_Quilt)
BRepTools_Quilt.Bind = new_instancemethod(_BRepTools.BRepTools_Quilt_Bind, None, BRepTools_Quilt)
BRepTools_Quilt.Copy = new_instancemethod(_BRepTools.BRepTools_Quilt_Copy, None, BRepTools_Quilt)
BRepTools_Quilt.IsCopied = new_instancemethod(_BRepTools.BRepTools_Quilt_IsCopied, None, BRepTools_Quilt)
BRepTools_Quilt.Shells = new_instancemethod(_BRepTools.BRepTools_Quilt_Shells, None, BRepTools_Quilt)
BRepTools_Quilt_swigregister = _BRepTools.BRepTools_Quilt_swigregister
BRepTools_Quilt_swigregister(BRepTools_Quilt)

class BRepTools_ReShape(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Apply(self, *args) -> "TopoDS_Shape":
        """
        * Applies the substitutions requests to a shape. //! <until> gives the level of type until which requests are taken into account. For subshapes of the type <until> no rebuild and futher exploring are done. //! NOTE: each subshape can be replaced by shape of the same type or by shape containing only shapes of that type (for example, TopoDS_Edge can be replaced by TopoDS_Edge, TopoDS_Wire or TopoDS_Compound containing TopoDS_Edges). If incompatible shape type is encountered, it is ignored and flag FAIL1 is set in Status.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param until: default value is TopAbs_SHAPE
        	:type until: TopAbs_ShapeEnum
        	:rtype: TopoDS_Shape
        """
        return _BRepTools.BRepTools_ReShape_Apply(self, *args)


    def __init__(self, *args):
        """
        * Returns an empty Reshape
        	:rtype: None
        """
        _BRepTools.BRepTools_ReShape_swiginit(self, _BRepTools.new_BRepTools_ReShape(*args))

    def Clear(self, *args) -> "void":
        """
        * Clears all substitutions requests
        	:rtype: void
        """
        return _BRepTools.BRepTools_ReShape_Clear(self, *args)


    def CopyVertex(self, *args) -> "TopoDS_Vertex":
        """
        * Returns modified copy of vertex if original one is not recorded or returns modified original vertex otherwise.
        	:param theV:
        	:type theV: TopoDS_Vertex
        	:param theTol: default value is -1.0
        	:type theTol: float
        	:rtype: TopoDS_Vertex
        * Returns modified copy of vertex if original one is not recorded or returns modified original vertex otherwise.
        	:param theV:
        	:type theV: TopoDS_Vertex
        	:param theNewPos:
        	:type theNewPos: gp_Pnt
        	:param aTol:
        	:type aTol: float
        	:rtype: TopoDS_Vertex
        """
        return _BRepTools.BRepTools_ReShape_CopyVertex(self, *args)


    def History(self, *args) -> "opencascade::handle< BRepTools_History >":
        """
        * Returns the history of the substituted shapes.
        	:rtype: opencascade::handle<BRepTools_History>
        """
        return _BRepTools.BRepTools_ReShape_History(self, *args)


    def IsNewShape(self, *args) -> "Standard_Boolean":
        """
        * Checks if shape has been recorded by reshaper as a value
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepTools.BRepTools_ReShape_IsNewShape(self, *args)


    def IsRecorded(self, *args) -> "Standard_Boolean":
        """
        * Tells if a shape is recorded for Replace/Remove
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepTools.BRepTools_ReShape_IsRecorded(self, *args)


    def GetModeConsiderLocation(self) -> "Standard_Boolean":
        """GetModeConsiderLocation(BRepTools_ReShape self) -> Standard_Boolean"""
        return _BRepTools.BRepTools_ReShape_GetModeConsiderLocation(self)


    def SetModeConsiderLocation(self, value: 'Standard_Boolean') -> "void":
        """SetModeConsiderLocation(BRepTools_ReShape self, Standard_Boolean value)"""
        return _BRepTools.BRepTools_ReShape_SetModeConsiderLocation(self, value)


    def Remove(self, *args) -> "void":
        """
        * Sets a request to Remove a Shape whatever the orientation
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: void
        """
        return _BRepTools.BRepTools_ReShape_Remove(self, *args)


    def Replace(self, *args) -> "void":
        """
        * Sets a request to Replace a Shape by a new one.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param newshape:
        	:type newshape: TopoDS_Shape
        	:rtype: None
        """
        return _BRepTools.BRepTools_ReShape_Replace(self, *args)


    def Status(self, *args) -> "Standard_Integer":
        """
        * Returns a complete substitution status for a shape 0 : not recorded, <newsh> = original <shape> < 0: to be removed, <newsh> is NULL > 0: to be replaced, <newsh> is a new item If <last> is False, returns status and new shape recorded in the map directly for the shape, if True and status > 0 then recursively searches for the last status and new shape.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param newsh:
        	:type newsh: TopoDS_Shape
        	:param last: default value is Standard_False
        	:type last: bool
        	:rtype: int
        """
        return _BRepTools.BRepTools_ReShape_Status(self, *args)


    def Value(self, *args) -> "TopoDS_Shape":
        """
        * Returns the new value for an individual shape If not recorded, returns the original shape itself If to be Removed, returns a Null Shape Else, returns the replacing item
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepTools.BRepTools_ReShape_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepTools_ReShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTools.delete_BRepTools_ReShape
BRepTools_ReShape.Apply = new_instancemethod(_BRepTools.BRepTools_ReShape_Apply, None, BRepTools_ReShape)
BRepTools_ReShape.Clear = new_instancemethod(_BRepTools.BRepTools_ReShape_Clear, None, BRepTools_ReShape)
BRepTools_ReShape.CopyVertex = new_instancemethod(_BRepTools.BRepTools_ReShape_CopyVertex, None, BRepTools_ReShape)
BRepTools_ReShape.History = new_instancemethod(_BRepTools.BRepTools_ReShape_History, None, BRepTools_ReShape)
BRepTools_ReShape.IsNewShape = new_instancemethod(_BRepTools.BRepTools_ReShape_IsNewShape, None, BRepTools_ReShape)
BRepTools_ReShape.IsRecorded = new_instancemethod(_BRepTools.BRepTools_ReShape_IsRecorded, None, BRepTools_ReShape)
BRepTools_ReShape.GetModeConsiderLocation = new_instancemethod(_BRepTools.BRepTools_ReShape_GetModeConsiderLocation, None, BRepTools_ReShape)
BRepTools_ReShape.SetModeConsiderLocation = new_instancemethod(_BRepTools.BRepTools_ReShape_SetModeConsiderLocation, None, BRepTools_ReShape)
BRepTools_ReShape.Remove = new_instancemethod(_BRepTools.BRepTools_ReShape_Remove, None, BRepTools_ReShape)
BRepTools_ReShape.Replace = new_instancemethod(_BRepTools.BRepTools_ReShape_Replace, None, BRepTools_ReShape)
BRepTools_ReShape.Status = new_instancemethod(_BRepTools.BRepTools_ReShape_Status, None, BRepTools_ReShape)
BRepTools_ReShape.Value = new_instancemethod(_BRepTools.BRepTools_ReShape_Value, None, BRepTools_ReShape)
BRepTools_ReShape_swigregister = _BRepTools.BRepTools_ReShape_swigregister
BRepTools_ReShape_swigregister(BRepTools_ReShape)

class BRepTools_ShapeSet(OCC.Core.TopTools.TopTools_ShapeSet):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Builds an empty ShapeSet. Parameter <isWithTriangles> is added for XML Persistence
        	:param isWithTriangles: default value is Standard_True
        	:type isWithTriangles: bool
        	:rtype: None
        * Builds an empty ShapeSet. Parameter <isWithTriangles> is added for XML Persistence
        	:param B:
        	:type B: BRep_Builder
        	:param isWithTriangles: default value is Standard_True
        	:type isWithTriangles: bool
        	:rtype: None
        """
        _BRepTools.BRepTools_ShapeSet_swiginit(self, _BRepTools.new_BRepTools_ShapeSet(*args))

    def DumpGeometryToString(self) -> "std::string":
        """DumpGeometryToString(BRepTools_ShapeSet self) -> std::string"""
        return _BRepTools.BRepTools_ShapeSet_DumpGeometryToString(self)


    def DumpPolygon3DToString(self) -> "std::string":
        """DumpPolygon3DToString(BRepTools_ShapeSet self) -> std::string"""
        return _BRepTools.BRepTools_ShapeSet_DumpPolygon3DToString(self)


    def DumpPolygonOnTriangulationToString(self) -> "std::string":
        """DumpPolygonOnTriangulationToString(BRepTools_ShapeSet self) -> std::string"""
        return _BRepTools.BRepTools_ShapeSet_DumpPolygonOnTriangulationToString(self)


    def DumpTriangulationToString(self) -> "std::string":
        """DumpTriangulationToString(BRepTools_ShapeSet self) -> std::string"""
        return _BRepTools.BRepTools_ShapeSet_DumpTriangulationToString(self)


    def ReadGeometryFromString(self, src: 'std::string') -> "void":
        """ReadGeometryFromString(BRepTools_ShapeSet self, std::string src)"""
        return _BRepTools.BRepTools_ShapeSet_ReadGeometryFromString(self, src)


    def ReadPolygon3DFromString(self, src: 'std::string') -> "void":
        """ReadPolygon3DFromString(BRepTools_ShapeSet self, std::string src)"""
        return _BRepTools.BRepTools_ShapeSet_ReadPolygon3DFromString(self, src)


    def ReadPolygonOnTriangulationFromString(self, src: 'std::string') -> "void":
        """ReadPolygonOnTriangulationFromString(BRepTools_ShapeSet self, std::string src)"""
        return _BRepTools.BRepTools_ShapeSet_ReadPolygonOnTriangulationFromString(self, src)


    def ReadTriangulationFromString(self, src: 'std::string') -> "void":
        """ReadTriangulationFromString(BRepTools_ShapeSet self, std::string src)"""
        return _BRepTools.BRepTools_ShapeSet_ReadTriangulationFromString(self, src)


    def WriteGeometryToString(self) -> "std::string":
        """WriteGeometryToString(BRepTools_ShapeSet self) -> std::string"""
        return _BRepTools.BRepTools_ShapeSet_WriteGeometryToString(self)


    def WritePolygon3D(self, *args) -> "void":
        """
        * Writes the 3d polygons on the stream <OS> in a format that can be read back by Read.
        	:param OS:
        	:type OS: Standard_OStream
        	:param Compact: default value is Standard_True
        	:type Compact: bool
        	:rtype: None
        """
        return _BRepTools.BRepTools_ShapeSet_WritePolygon3D(self, *args)


    def WritePolygonOnTriangulation(self, *args) -> "void":
        """
        * Writes the polygons on triangulation on the stream <OS> in a format that can be read back by Read.
        	:param OS:
        	:type OS: Standard_OStream
        	:param Compact: default value is Standard_True
        	:type Compact: bool
        	:rtype: None
        """
        return _BRepTools.BRepTools_ShapeSet_WritePolygonOnTriangulation(self, *args)


    def WriteTriangulation(self, *args) -> "void":
        """
        * Writes the triangulation on the stream <OS> in a format that can be read back by Read.
        	:param OS:
        	:type OS: Standard_OStream
        	:param Compact: default value is Standard_True
        	:type Compact: bool
        	:rtype: None
        """
        return _BRepTools.BRepTools_ShapeSet_WriteTriangulation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTools.delete_BRepTools_ShapeSet
BRepTools_ShapeSet.DumpGeometryToString = new_instancemethod(_BRepTools.BRepTools_ShapeSet_DumpGeometryToString, None, BRepTools_ShapeSet)
BRepTools_ShapeSet.DumpPolygon3DToString = new_instancemethod(_BRepTools.BRepTools_ShapeSet_DumpPolygon3DToString, None, BRepTools_ShapeSet)
BRepTools_ShapeSet.DumpPolygonOnTriangulationToString = new_instancemethod(_BRepTools.BRepTools_ShapeSet_DumpPolygonOnTriangulationToString, None, BRepTools_ShapeSet)
BRepTools_ShapeSet.DumpTriangulationToString = new_instancemethod(_BRepTools.BRepTools_ShapeSet_DumpTriangulationToString, None, BRepTools_ShapeSet)
BRepTools_ShapeSet.ReadGeometryFromString = new_instancemethod(_BRepTools.BRepTools_ShapeSet_ReadGeometryFromString, None, BRepTools_ShapeSet)
BRepTools_ShapeSet.ReadPolygon3DFromString = new_instancemethod(_BRepTools.BRepTools_ShapeSet_ReadPolygon3DFromString, None, BRepTools_ShapeSet)
BRepTools_ShapeSet.ReadPolygonOnTriangulationFromString = new_instancemethod(_BRepTools.BRepTools_ShapeSet_ReadPolygonOnTriangulationFromString, None, BRepTools_ShapeSet)
BRepTools_ShapeSet.ReadTriangulationFromString = new_instancemethod(_BRepTools.BRepTools_ShapeSet_ReadTriangulationFromString, None, BRepTools_ShapeSet)
BRepTools_ShapeSet.WriteGeometryToString = new_instancemethod(_BRepTools.BRepTools_ShapeSet_WriteGeometryToString, None, BRepTools_ShapeSet)
BRepTools_ShapeSet.WritePolygon3D = new_instancemethod(_BRepTools.BRepTools_ShapeSet_WritePolygon3D, None, BRepTools_ShapeSet)
BRepTools_ShapeSet.WritePolygonOnTriangulation = new_instancemethod(_BRepTools.BRepTools_ShapeSet_WritePolygonOnTriangulation, None, BRepTools_ShapeSet)
BRepTools_ShapeSet.WriteTriangulation = new_instancemethod(_BRepTools.BRepTools_ShapeSet_WriteTriangulation, None, BRepTools_ShapeSet)
BRepTools_ShapeSet_swigregister = _BRepTools.BRepTools_ShapeSet_swigregister
BRepTools_ShapeSet_swigregister(BRepTools_ShapeSet)

class BRepTools_Substitution(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _BRepTools.BRepTools_Substitution_swiginit(self, _BRepTools.new_BRepTools_Substitution(*args))

    def Build(self, *args) -> "void":
        """
        * Build NewShape from <S> if its subshapes has modified. //! The methods <IsCopied> and <Copy> allows you to keep the resul of <Build>
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _BRepTools.BRepTools_Substitution_Build(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Reset all the fields.
        	:rtype: None
        """
        return _BRepTools.BRepTools_Substitution_Clear(self, *args)


    def Copy(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the set of shapes substitued to <S> .
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BRepTools.BRepTools_Substitution_Copy(self, *args)


    def IsCopied(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <S> has been replaced .
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepTools.BRepTools_Substitution_IsCopied(self, *args)


    def Substitute(self, *args) -> "void":
        """
        * <Oldshape> will be replaced by <NewShapes>. //! <NewShapes> can be empty , in this case <OldShape> will disparate from its ancestors. //! if an item of <NewShapes> is oriented FORWARD. it will be oriented as <OldShape> in its ancestors. else it will be reversed.
        	:param OldShape:
        	:type OldShape: TopoDS_Shape
        	:param NewShapes:
        	:type NewShapes: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepTools.BRepTools_Substitution_Substitute(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTools.delete_BRepTools_Substitution
BRepTools_Substitution.Build = new_instancemethod(_BRepTools.BRepTools_Substitution_Build, None, BRepTools_Substitution)
BRepTools_Substitution.Clear = new_instancemethod(_BRepTools.BRepTools_Substitution_Clear, None, BRepTools_Substitution)
BRepTools_Substitution.Copy = new_instancemethod(_BRepTools.BRepTools_Substitution_Copy, None, BRepTools_Substitution)
BRepTools_Substitution.IsCopied = new_instancemethod(_BRepTools.BRepTools_Substitution_IsCopied, None, BRepTools_Substitution)
BRepTools_Substitution.Substitute = new_instancemethod(_BRepTools.BRepTools_Substitution_Substitute, None, BRepTools_Substitution)
BRepTools_Substitution_swigregister = _BRepTools.BRepTools_Substitution_swigregister
BRepTools_Substitution_swigregister(BRepTools_Substitution)

class BRepTools_WireExplorer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty explorer (which can be initialized using Init)
        	:rtype: None
        * IInitializes an exploration of the wire <W>.
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        * Initializes an exploration of the wire <W>. F is used to select the edge connected to the previous in the parametric representation of <F>.
        	:param W:
        	:type W: TopoDS_Wire
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _BRepTools.BRepTools_WireExplorer_swiginit(self, _BRepTools.new_BRepTools_WireExplorer(*args))

    def Clear(self, *args) -> "void":
        """
        * Clears the content of the explorer.
        	:rtype: None
        """
        return _BRepTools.BRepTools_WireExplorer_Clear(self, *args)


    def Current(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the current edge.
        	:rtype: TopoDS_Edge
        """
        return _BRepTools.BRepTools_WireExplorer_Current(self, *args)


    def CurrentVertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the vertex connecting the current edge to the previous one.
        	:rtype: TopoDS_Vertex
        """
        return _BRepTools.BRepTools_WireExplorer_CurrentVertex(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes an exploration of the wire <W>.
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        * Initializes an exploration of the wire <W>. F is used to select the edge connected to the previous in the parametric representation of <F>.
        	:param W:
        	:type W: TopoDS_Wire
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        * Initializes an exploration of the wire <W>. F is used to select the edge connected to the previous in the parametric representation of <F>. <UMIn>, <UMax>, <VMin>, <VMax> - the UV bounds of the face <F>.
        	:param W:
        	:type W: TopoDS_Wire
        	:param F:
        	:type F: TopoDS_Face
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None
        """
        return _BRepTools.BRepTools_WireExplorer_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a current edge.
        	:rtype: bool
        """
        return _BRepTools.BRepTools_WireExplorer_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Proceeds to the next edge.
        	:rtype: None
        """
        return _BRepTools.BRepTools_WireExplorer_Next(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        * Returns an Orientation for the current edge.
        	:rtype: TopAbs_Orientation
        """
        return _BRepTools.BRepTools_WireExplorer_Orientation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTools.delete_BRepTools_WireExplorer
BRepTools_WireExplorer.Clear = new_instancemethod(_BRepTools.BRepTools_WireExplorer_Clear, None, BRepTools_WireExplorer)
BRepTools_WireExplorer.Current = new_instancemethod(_BRepTools.BRepTools_WireExplorer_Current, None, BRepTools_WireExplorer)
BRepTools_WireExplorer.CurrentVertex = new_instancemethod(_BRepTools.BRepTools_WireExplorer_CurrentVertex, None, BRepTools_WireExplorer)
BRepTools_WireExplorer.Init = new_instancemethod(_BRepTools.BRepTools_WireExplorer_Init, None, BRepTools_WireExplorer)
BRepTools_WireExplorer.More = new_instancemethod(_BRepTools.BRepTools_WireExplorer_More, None, BRepTools_WireExplorer)
BRepTools_WireExplorer.Next = new_instancemethod(_BRepTools.BRepTools_WireExplorer_Next, None, BRepTools_WireExplorer)
BRepTools_WireExplorer.Orientation = new_instancemethod(_BRepTools.BRepTools_WireExplorer_Orientation, None, BRepTools_WireExplorer)
BRepTools_WireExplorer_swigregister = _BRepTools.BRepTools_WireExplorer_swigregister
BRepTools_WireExplorer_swigregister(BRepTools_WireExplorer)

class BRepTools_GTrsfModification(BRepTools_Modification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param T:
        	:type T: gp_GTrsf
        	:rtype: None
        """
        _BRepTools.BRepTools_GTrsfModification_swiginit(self, _BRepTools.new_BRepTools_GTrsfModification(*args))

    def GTrsf(self, *args) -> "gp_GTrsf":
        """
        * Gives an access on the GTrsf.
        	:rtype: gp_GTrsf
        """
        return _BRepTools.BRepTools_GTrsfModification_GTrsf(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepTools_GTrsfModification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTools.delete_BRepTools_GTrsfModification
BRepTools_GTrsfModification.GTrsf = new_instancemethod(_BRepTools.BRepTools_GTrsfModification_GTrsf, None, BRepTools_GTrsfModification)
BRepTools_GTrsfModification_swigregister = _BRepTools.BRepTools_GTrsfModification_swigregister
BRepTools_GTrsfModification_swigregister(BRepTools_GTrsfModification)

class BRepTools_NurbsConvertModification(BRepTools_Modification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _BRepTools.BRepTools_NurbsConvertModification_swiginit(self, _BRepTools.new_BRepTools_NurbsConvertModification(*args))

    def GetUpdatedEdges(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _BRepTools.BRepTools_NurbsConvertModification_GetUpdatedEdges(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepTools_NurbsConvertModification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTools.delete_BRepTools_NurbsConvertModification
BRepTools_NurbsConvertModification.GetUpdatedEdges = new_instancemethod(_BRepTools.BRepTools_NurbsConvertModification_GetUpdatedEdges, None, BRepTools_NurbsConvertModification)
BRepTools_NurbsConvertModification_swigregister = _BRepTools.BRepTools_NurbsConvertModification_swigregister
BRepTools_NurbsConvertModification_swigregister(BRepTools_NurbsConvertModification)

class BRepTools_TrsfModification(BRepTools_Modification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param T:
        	:type T: gp_Trsf
        	:rtype: None
        """
        _BRepTools.BRepTools_TrsfModification_swiginit(self, _BRepTools.new_BRepTools_TrsfModification(*args))

    def Trsf(self, *args) -> "gp_Trsf":
        """
        * Provides access to the gp_Trsf associated with this modification. The transformation can be changed.
        	:rtype: gp_Trsf
        """
        return _BRepTools.BRepTools_TrsfModification_Trsf(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepTools_TrsfModification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTools.delete_BRepTools_TrsfModification
BRepTools_TrsfModification.Trsf = new_instancemethod(_BRepTools.BRepTools_TrsfModification_Trsf, None, BRepTools_TrsfModification)
BRepTools_TrsfModification_swigregister = _BRepTools.BRepTools_TrsfModification_swigregister
BRepTools_TrsfModification_swigregister(BRepTools_TrsfModification)



