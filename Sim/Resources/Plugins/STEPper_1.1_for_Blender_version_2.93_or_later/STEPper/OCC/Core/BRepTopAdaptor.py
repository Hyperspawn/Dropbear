# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepTopAdaptor module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_breptopadaptor.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepTopAdaptor.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepTopAdaptor')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepTopAdaptor')
    _BRepTopAdaptor = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepTopAdaptor', [dirname(__file__)])
        except ImportError:
            import _BRepTopAdaptor
            return _BRepTopAdaptor
        try:
            _mod = imp.load_module('_BRepTopAdaptor', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepTopAdaptor = swig_import_helper()
    del swig_import_helper
else:
    import _BRepTopAdaptor
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepTopAdaptor.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepTopAdaptor.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepTopAdaptor.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepTopAdaptor.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepTopAdaptor.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepTopAdaptor.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepTopAdaptor.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepTopAdaptor.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepTopAdaptor.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepTopAdaptor.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepTopAdaptor.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepTopAdaptor.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepTopAdaptor.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepTopAdaptor.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepTopAdaptor.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepTopAdaptor.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepTopAdaptor.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepTopAdaptor.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepTopAdaptor.process_exception(error, method_name, class_name)
process_exception = _BRepTopAdaptor.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor

def Handle_BRepTopAdaptor_HVertex_Create() -> "opencascade::handle< BRepTopAdaptor_HVertex >":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_Create()
Handle_BRepTopAdaptor_HVertex_Create = _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_Create

def Handle_BRepTopAdaptor_HVertex_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepTopAdaptor_HVertex >":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_DownCast(t)
Handle_BRepTopAdaptor_HVertex_DownCast = _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_DownCast

def Handle_BRepTopAdaptor_HVertex_IsNull(t: 'opencascade::handle< BRepTopAdaptor_HVertex > const &') -> "bool":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_IsNull(t)
Handle_BRepTopAdaptor_HVertex_IsNull = _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_IsNull

def Handle_BRepTopAdaptor_TopolTool_Create() -> "opencascade::handle< BRepTopAdaptor_TopolTool >":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Create()
Handle_BRepTopAdaptor_TopolTool_Create = _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Create

def Handle_BRepTopAdaptor_TopolTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepTopAdaptor_TopolTool >":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_DownCast(t)
Handle_BRepTopAdaptor_TopolTool_DownCast = _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_DownCast

def Handle_BRepTopAdaptor_TopolTool_IsNull(t: 'opencascade::handle< BRepTopAdaptor_TopolTool > const &') -> "bool":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_IsNull(t)
Handle_BRepTopAdaptor_TopolTool_IsNull = _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_IsNull
class BRepTopAdaptor_MapOfShapeTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_swiginit(self, _BRepTopAdaptor.new_BRepTopAdaptor_MapOfShapeTool(*args))
    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_MapOfShapeTool
BRepTopAdaptor_MapOfShapeTool.begin = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_begin, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.end = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_end, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.cbegin = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_cbegin, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.cend = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_cend, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.Exchange = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Exchange, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.Assign = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Assign, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.Set = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Set, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.ReSize = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_ReSize, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.Bind = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Bind, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.Bound = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Bound, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.IsBound = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_IsBound, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.UnBind = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_UnBind, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.Seek = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Seek, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.Find = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Find, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.ChangeSeek = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_ChangeSeek, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.ChangeFind = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_ChangeFind, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.__call__ = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool___call__, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.Clear = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Clear, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool.Size = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Size, None, BRepTopAdaptor_MapOfShapeTool)
BRepTopAdaptor_MapOfShapeTool_swigregister = _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_swigregister
BRepTopAdaptor_MapOfShapeTool_swigregister(BRepTopAdaptor_MapOfShapeTool)

class BRepTopAdaptor_FClass2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param F:
        	:type F: TopoDS_Face
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _BRepTopAdaptor.BRepTopAdaptor_FClass2d_swiginit(self, _BRepTopAdaptor.new_BRepTopAdaptor_FClass2d(*args))

    def Copy(self, *args) -> "BRepTopAdaptor_FClass2d const &":
        """
        :param Other:
        	:type Other: BRepTopAdaptor_FClass2d
        	:rtype: BRepTopAdaptor_FClass2d
        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_Copy(self, *args)


    def Destroy(self, *args) -> "void":
        """:rtype: None"""
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_Destroy(self, *args)


    def Perform(self, *args) -> "TopAbs_State":
        """
        :param Puv:
        	:type Puv: gp_Pnt2d
        	:param RecadreOnPeriodic: default value is Standard_True
        	:type RecadreOnPeriodic: bool
        	:rtype: TopAbs_State
        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_Perform(self, *args)


    def PerformInfinitePoint(self, *args) -> "TopAbs_State":
        """:rtype: TopAbs_State"""
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_PerformInfinitePoint(self, *args)


    def TestOnRestriction(self, *args) -> "TopAbs_State":
        """
        * Test a point with +- an offset (Tol) and returns On if some points are OUT an some are IN (Caution: Internal use . see the code for more details)
        	:param Puv:
        	:type Puv: gp_Pnt2d
        	:param Tol:
        	:type Tol: float
        	:param RecadreOnPeriodic: default value is Standard_True
        	:type RecadreOnPeriodic: bool
        	:rtype: TopAbs_State
        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_TestOnRestriction(self, *args)


    def Set(self, *args) -> "BRepTopAdaptor_FClass2d const &":
        """
        :param Other:
        	:type Other: BRepTopAdaptor_FClass2d
        	:rtype: BRepTopAdaptor_FClass2d
        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_FClass2d
BRepTopAdaptor_FClass2d.Copy = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_FClass2d_Copy, None, BRepTopAdaptor_FClass2d)
BRepTopAdaptor_FClass2d.Destroy = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_FClass2d_Destroy, None, BRepTopAdaptor_FClass2d)
BRepTopAdaptor_FClass2d.Perform = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_FClass2d_Perform, None, BRepTopAdaptor_FClass2d)
BRepTopAdaptor_FClass2d.PerformInfinitePoint = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_FClass2d_PerformInfinitePoint, None, BRepTopAdaptor_FClass2d)
BRepTopAdaptor_FClass2d.TestOnRestriction = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_FClass2d_TestOnRestriction, None, BRepTopAdaptor_FClass2d)
BRepTopAdaptor_FClass2d.Set = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_FClass2d_Set, None, BRepTopAdaptor_FClass2d)
BRepTopAdaptor_FClass2d_swigregister = _BRepTopAdaptor.BRepTopAdaptor_FClass2d_swigregister
BRepTopAdaptor_FClass2d_swigregister(BRepTopAdaptor_FClass2d)

class BRepTopAdaptor_HVertex(OCC.Core.Adaptor3d.Adaptor3d_HVertex):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Vtx:
        	:type Vtx: TopoDS_Vertex
        	:param Curve:
        	:type Curve: BRepAdaptor_HCurve2d
        	:rtype: None
        """
        _BRepTopAdaptor.BRepTopAdaptor_HVertex_swiginit(self, _BRepTopAdaptor.new_BRepTopAdaptor_HVertex(*args))

    def ChangeVertex(self, *args) -> "TopoDS_Vertex":
        """:rtype: TopoDS_Vertex"""
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_ChangeVertex(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex const":
        """:rtype: TopoDS_Vertex"""
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_Vertex(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepTopAdaptor_HVertex_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_HVertex
BRepTopAdaptor_HVertex.ChangeVertex = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_HVertex_ChangeVertex, None, BRepTopAdaptor_HVertex)
BRepTopAdaptor_HVertex.Vertex = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_HVertex_Vertex, None, BRepTopAdaptor_HVertex)
BRepTopAdaptor_HVertex_swigregister = _BRepTopAdaptor.BRepTopAdaptor_HVertex_swigregister
BRepTopAdaptor_HVertex_swigregister(BRepTopAdaptor_HVertex)

class BRepTopAdaptor_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param F:
        	:type F: TopoDS_Face
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: None
        :param Surface:
        	:type Surface: Adaptor3d_HSurface
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: None
        """
        _BRepTopAdaptor.BRepTopAdaptor_Tool_swiginit(self, _BRepTopAdaptor.new_BRepTopAdaptor_Tool(*args))

    def Destroy(self, *args) -> "void":
        """:rtype: None"""
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_Destroy(self, *args)


    def GetSurface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface >":
        """:rtype: opencascade::handle<Adaptor3d_HSurface>"""
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_GetSurface(self, *args)


    def GetTopolTool(self, *args) -> "opencascade::handle< BRepTopAdaptor_TopolTool >":
        """:rtype: opencascade::handle<BRepTopAdaptor_TopolTool>"""
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_GetTopolTool(self, *args)


    def Init(self, *args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: None
        :param Surface:
        	:type Surface: Adaptor3d_HSurface
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: None
        """
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_Init(self, *args)


    def SetTopolTool(self, *args) -> "void":
        """
        :param TT:
        	:type TT: BRepTopAdaptor_TopolTool
        	:rtype: None
        """
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_SetTopolTool(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_Tool
BRepTopAdaptor_Tool.Destroy = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_Tool_Destroy, None, BRepTopAdaptor_Tool)
BRepTopAdaptor_Tool.GetSurface = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_Tool_GetSurface, None, BRepTopAdaptor_Tool)
BRepTopAdaptor_Tool.GetTopolTool = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_Tool_GetTopolTool, None, BRepTopAdaptor_Tool)
BRepTopAdaptor_Tool.Init = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_Tool_Init, None, BRepTopAdaptor_Tool)
BRepTopAdaptor_Tool.SetTopolTool = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_Tool_SetTopolTool, None, BRepTopAdaptor_Tool)
BRepTopAdaptor_Tool_swigregister = _BRepTopAdaptor.BRepTopAdaptor_Tool_swigregister
BRepTopAdaptor_Tool_swigregister(BRepTopAdaptor_Tool)

class BRepTopAdaptor_TopolTool(OCC.Core.Adaptor3d.Adaptor3d_TopolTool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Surface:
        	:type Surface: Adaptor3d_HSurface
        	:rtype: None
        """
        _BRepTopAdaptor.BRepTopAdaptor_TopolTool_swiginit(self, _BRepTopAdaptor.new_BRepTopAdaptor_TopolTool(*args))

    def Destroy(self, *args) -> "void":
        """:rtype: None"""
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Destroy(self, *args)


    def Initialize(self, *args) -> "void":
        """
        :rtype: void
        :param S:
        	:type S: Adaptor3d_HSurface
        	:rtype: void
        :param Curve:
        	:type Curve: Adaptor2d_HCurve2d
        	:rtype: void
        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Initialize(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        * If the function returns the orientation of the arc. If the orientation is FORWARD or REVERSED, the arc is a 'real' limit of the surface. If the orientation is INTERNAL or EXTERNAL, the arc is considered as an arc on the surface.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: TopAbs_Orientation
        * If the function returns the orientation of the arc. If the orientation is FORWARD or REVERSED, the arc is a 'real' limit of the surface. If the orientation is INTERNAL or EXTERNAL, the arc is considered as an arc on the surface.
        	:param C:
        	:type C: Adaptor3d_HVertex
        	:rtype: TopAbs_Orientation
        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Orientation(self, *args)


    def Tol3d(self, *args) -> "Standard_Real":
        """
        * returns 3d tolerance of the arc C
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: float
        * returns 3d tolerance of the vertex V
        	:param V:
        	:type V: Adaptor3d_HVertex
        	:rtype: float
        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Tol3d(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepTopAdaptor_TopolTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_TopolTool
BRepTopAdaptor_TopolTool.Destroy = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_TopolTool_Destroy, None, BRepTopAdaptor_TopolTool)
BRepTopAdaptor_TopolTool.Initialize = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_TopolTool_Initialize, None, BRepTopAdaptor_TopolTool)
BRepTopAdaptor_TopolTool.Orientation = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_TopolTool_Orientation, None, BRepTopAdaptor_TopolTool)
BRepTopAdaptor_TopolTool.Tol3d = new_instancemethod(_BRepTopAdaptor.BRepTopAdaptor_TopolTool_Tol3d, None, BRepTopAdaptor_TopolTool)
BRepTopAdaptor_TopolTool_swigregister = _BRepTopAdaptor.BRepTopAdaptor_TopolTool_swigregister
BRepTopAdaptor_TopolTool_swigregister(BRepTopAdaptor_TopolTool)



