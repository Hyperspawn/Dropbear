# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinDrivers module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_bindrivers.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BinDrivers.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinDrivers')
    _BinDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinDrivers', [dirname(__file__)])
        except ImportError:
            import _BinDrivers
            return _BinDrivers
        try:
            _mod = imp.load_module('_BinDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _BinDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinDrivers.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BinDrivers.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BinDrivers.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BinDrivers.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BinDrivers.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BinDrivers.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BinDrivers.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BinDrivers.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BinDrivers.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BinDrivers.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BinDrivers.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BinDrivers.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BinDrivers.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BinDrivers.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BinDrivers.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BinDrivers.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BinDrivers.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BinDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BinDrivers.process_exception(error, method_name, class_name)
process_exception = _BinDrivers.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.BinMDF
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TDF
import OCC.Core.BinObjMgt
import OCC.Core.Storage
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.BinLDrivers
BinDrivers_ENDATTRLIST = _BinDrivers.BinDrivers_ENDATTRLIST
BinDrivers_ENDLABEL = _BinDrivers.BinDrivers_ENDLABEL

def Handle_BinDrivers_DocumentRetrievalDriver_Create() -> "opencascade::handle< BinDrivers_DocumentRetrievalDriver >":
    return _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_Create()
Handle_BinDrivers_DocumentRetrievalDriver_Create = _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_Create

def Handle_BinDrivers_DocumentRetrievalDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinDrivers_DocumentRetrievalDriver >":
    return _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_DownCast(t)
Handle_BinDrivers_DocumentRetrievalDriver_DownCast = _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_DownCast

def Handle_BinDrivers_DocumentRetrievalDriver_IsNull(t: 'opencascade::handle< BinDrivers_DocumentRetrievalDriver > const &') -> "bool":
    return _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_IsNull(t)
Handle_BinDrivers_DocumentRetrievalDriver_IsNull = _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_IsNull

def Handle_BinDrivers_DocumentStorageDriver_Create() -> "opencascade::handle< BinDrivers_DocumentStorageDriver >":
    return _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_Create()
Handle_BinDrivers_DocumentStorageDriver_Create = _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_Create

def Handle_BinDrivers_DocumentStorageDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinDrivers_DocumentStorageDriver >":
    return _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_DownCast(t)
Handle_BinDrivers_DocumentStorageDriver_DownCast = _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_DownCast

def Handle_BinDrivers_DocumentStorageDriver_IsNull(t: 'opencascade::handle< BinDrivers_DocumentStorageDriver > const &') -> "bool":
    return _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_IsNull(t)
Handle_BinDrivers_DocumentStorageDriver_IsNull = _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_IsNull
class bindrivers(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AttributeDrivers(*args) -> "opencascade::handle< BinMDF_ADriverTable >":
        """
        * Creates the table of drivers of types supported
        	:param MsgDrv:
        	:type MsgDrv: Message_Messenger
        	:rtype: opencascade::handle<BinMDF_ADriverTable>
        """
        return _BinDrivers.bindrivers_AttributeDrivers(*args)

    AttributeDrivers = staticmethod(AttributeDrivers)

    def DefineFormat(*args) -> "void":
        """
        * Defines format 'BinOcaf' and registers its read and write drivers in the specified application
        	:param theApp:
        	:type theApp: TDocStd_Application
        	:rtype: void
        """
        return _BinDrivers.bindrivers_DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
        """
        :param theGUID:
        	:type theGUID: Standard_GUID
        	:rtype: opencascade::handle<Standard_Transient>
        """
        return _BinDrivers.bindrivers_Factory(*args)

    Factory = staticmethod(Factory)

    def StorageVersion(*args) -> "TCollection_AsciiString":
        """
        * returns '1'
        	:rtype: TCollection_AsciiString
        """
        return _BinDrivers.bindrivers_StorageVersion(*args)

    StorageVersion = staticmethod(StorageVersion)

    __repr__ = _dumps_object


    def __init__(self):
        _BinDrivers.bindrivers_swiginit(self, _BinDrivers.new_bindrivers())
    __swig_destroy__ = _BinDrivers.delete_bindrivers
bindrivers_swigregister = _BinDrivers.bindrivers_swigregister
bindrivers_swigregister(bindrivers)

def bindrivers_AttributeDrivers(*args) -> "opencascade::handle< BinMDF_ADriverTable >":
    """
    * Creates the table of drivers of types supported
    	:param MsgDrv:
    	:type MsgDrv: Message_Messenger
    	:rtype: opencascade::handle<BinMDF_ADriverTable>
    """
    return _BinDrivers.bindrivers_AttributeDrivers(*args)

def bindrivers_DefineFormat(*args) -> "void":
    """
    * Defines format 'BinOcaf' and registers its read and write drivers in the specified application
    	:param theApp:
    	:type theApp: TDocStd_Application
    	:rtype: void
    """
    return _BinDrivers.bindrivers_DefineFormat(*args)

def bindrivers_Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
    """
    :param theGUID:
    	:type theGUID: Standard_GUID
    	:rtype: opencascade::handle<Standard_Transient>
    """
    return _BinDrivers.bindrivers_Factory(*args)

def bindrivers_StorageVersion(*args) -> "TCollection_AsciiString":
    """
    * returns '1'
    	:rtype: TCollection_AsciiString
    """
    return _BinDrivers.bindrivers_StorageVersion(*args)

class BinDrivers_DocumentRetrievalDriver(OCC.Core.BinLDrivers.BinLDrivers_DocumentRetrievalDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor
        	:rtype: None
        """
        _BinDrivers.BinDrivers_DocumentRetrievalDriver_swiginit(self, _BinDrivers.new_BinDrivers_DocumentRetrievalDriver(*args))

    def CheckShapeSection(self, *args) -> "void":
        """
        :param thePos:
        	:type thePos: Storage_Position
        	:param theIS:
        	:type theIS: Standard_IStream
        	:rtype: void
        """
        return _BinDrivers.BinDrivers_DocumentRetrievalDriver_CheckShapeSection(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears the NamedShape driver
        	:rtype: void
        """
        return _BinDrivers.BinDrivers_DocumentRetrievalDriver_Clear(self, *args)


    def ReadShapeSection(self, *args) -> "void":
        """
        :param theSection:
        	:type theSection: BinLDrivers_DocumentSection
        	:param theIS:
        	:type theIS: Standard_IStream
        	:param isMess: default value is Standard_False
        	:type isMess: bool
        	:rtype: void
        """
        return _BinDrivers.BinDrivers_DocumentRetrievalDriver_ReadShapeSection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinDrivers_DocumentRetrievalDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinDrivers.delete_BinDrivers_DocumentRetrievalDriver
BinDrivers_DocumentRetrievalDriver.CheckShapeSection = new_instancemethod(_BinDrivers.BinDrivers_DocumentRetrievalDriver_CheckShapeSection, None, BinDrivers_DocumentRetrievalDriver)
BinDrivers_DocumentRetrievalDriver.Clear = new_instancemethod(_BinDrivers.BinDrivers_DocumentRetrievalDriver_Clear, None, BinDrivers_DocumentRetrievalDriver)
BinDrivers_DocumentRetrievalDriver.ReadShapeSection = new_instancemethod(_BinDrivers.BinDrivers_DocumentRetrievalDriver_ReadShapeSection, None, BinDrivers_DocumentRetrievalDriver)
BinDrivers_DocumentRetrievalDriver_swigregister = _BinDrivers.BinDrivers_DocumentRetrievalDriver_swigregister
BinDrivers_DocumentRetrievalDriver_swigregister(BinDrivers_DocumentRetrievalDriver)

class BinDrivers_DocumentStorageDriver(OCC.Core.BinLDrivers.BinLDrivers_DocumentStorageDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor
        	:rtype: None
        """
        _BinDrivers.BinDrivers_DocumentStorageDriver_swiginit(self, _BinDrivers.new_BinDrivers_DocumentStorageDriver(*args))

    def IsWithTriangles(self, *args) -> "Standard_Boolean":
        """
        * Return true if shape should be stored with triangles.
        	:rtype: bool
        """
        return _BinDrivers.BinDrivers_DocumentStorageDriver_IsWithTriangles(self, *args)


    def SetWithTriangles(self, *args) -> "void":
        """
        * Set if triangulation should be stored or not.
        	:param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:param theWithTriangulation:
        	:type theWithTriangulation: bool
        	:rtype: None
        """
        return _BinDrivers.BinDrivers_DocumentStorageDriver_SetWithTriangles(self, *args)


    def WriteShapeSection(self, *args) -> "void":
        """
        * implements the procedure of writing a shape section to file
        	:param theDocSection:
        	:type theDocSection: BinLDrivers_DocumentSection
        	:param theOS:
        	:type theOS: Standard_OStream
        	:rtype: void
        """
        return _BinDrivers.BinDrivers_DocumentStorageDriver_WriteShapeSection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinDrivers_DocumentStorageDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinDrivers.delete_BinDrivers_DocumentStorageDriver
BinDrivers_DocumentStorageDriver.IsWithTriangles = new_instancemethod(_BinDrivers.BinDrivers_DocumentStorageDriver_IsWithTriangles, None, BinDrivers_DocumentStorageDriver)
BinDrivers_DocumentStorageDriver.SetWithTriangles = new_instancemethod(_BinDrivers.BinDrivers_DocumentStorageDriver_SetWithTriangles, None, BinDrivers_DocumentStorageDriver)
BinDrivers_DocumentStorageDriver.WriteShapeSection = new_instancemethod(_BinDrivers.BinDrivers_DocumentStorageDriver_WriteShapeSection, None, BinDrivers_DocumentStorageDriver)
BinDrivers_DocumentStorageDriver_swigregister = _BinDrivers.BinDrivers_DocumentStorageDriver_swigregister
BinDrivers_DocumentStorageDriver_swigregister(BinDrivers_DocumentStorageDriver)



