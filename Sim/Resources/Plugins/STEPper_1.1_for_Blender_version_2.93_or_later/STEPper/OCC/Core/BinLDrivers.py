# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinLDrivers module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_binldrivers.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BinLDrivers.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinLDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinLDrivers')
    _BinLDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinLDrivers', [dirname(__file__)])
        except ImportError:
            import _BinLDrivers
            return _BinLDrivers
        try:
            _mod = imp.load_module('_BinLDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinLDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _BinLDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinLDrivers.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BinLDrivers.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BinLDrivers.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BinLDrivers.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BinLDrivers.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BinLDrivers.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BinLDrivers.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BinLDrivers.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BinLDrivers.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BinLDrivers.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BinLDrivers.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BinLDrivers.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BinLDrivers.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BinLDrivers.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BinLDrivers.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BinLDrivers.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BinLDrivers.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BinLDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BinLDrivers.process_exception(error, method_name, class_name)
process_exception = _BinLDrivers.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.BinMDF
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TDF
import OCC.Core.BinObjMgt
import OCC.Core.Storage
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
BinLDrivers_ENDATTRLIST = _BinLDrivers.BinLDrivers_ENDATTRLIST
BinLDrivers_ENDLABEL = _BinLDrivers.BinLDrivers_ENDLABEL

def Handle_BinLDrivers_DocumentRetrievalDriver_Create() -> "opencascade::handle< BinLDrivers_DocumentRetrievalDriver >":
    return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_Create()
Handle_BinLDrivers_DocumentRetrievalDriver_Create = _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_Create

def Handle_BinLDrivers_DocumentRetrievalDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinLDrivers_DocumentRetrievalDriver >":
    return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_DownCast(t)
Handle_BinLDrivers_DocumentRetrievalDriver_DownCast = _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_DownCast

def Handle_BinLDrivers_DocumentRetrievalDriver_IsNull(t: 'opencascade::handle< BinLDrivers_DocumentRetrievalDriver > const &') -> "bool":
    return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_IsNull(t)
Handle_BinLDrivers_DocumentRetrievalDriver_IsNull = _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_IsNull

def Handle_BinLDrivers_DocumentStorageDriver_Create() -> "opencascade::handle< BinLDrivers_DocumentStorageDriver >":
    return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_Create()
Handle_BinLDrivers_DocumentStorageDriver_Create = _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_Create

def Handle_BinLDrivers_DocumentStorageDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinLDrivers_DocumentStorageDriver >":
    return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_DownCast(t)
Handle_BinLDrivers_DocumentStorageDriver_DownCast = _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_DownCast

def Handle_BinLDrivers_DocumentStorageDriver_IsNull(t: 'opencascade::handle< BinLDrivers_DocumentStorageDriver > const &') -> "bool":
    return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_IsNull(t)
Handle_BinLDrivers_DocumentStorageDriver_IsNull = _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_IsNull
class BinLDrivers_VectorOfDocumentSection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BinLDrivers.BinLDrivers_VectorOfDocumentSection_swiginit(self, _BinLDrivers.new_BinLDrivers_VectorOfDocumentSection(*args))
    __swig_destroy__ = _BinLDrivers.delete_BinLDrivers_VectorOfDocumentSection
BinLDrivers_VectorOfDocumentSection.begin = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_begin, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.end = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_end, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.cbegin = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_cbegin, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.cend = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_cend, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.Length = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_Length, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.Size = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_Size, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.Lower = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_Lower, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.Upper = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_Upper, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.IsEmpty = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_IsEmpty, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.Assign = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_Assign, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.Set = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_Set, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.Append = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_Append, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.Appended = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_Appended, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.Value = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_Value, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.First = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_First, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.ChangeFirst = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_ChangeFirst, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.Last = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_Last, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.ChangeLast = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_ChangeLast, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.__call__ = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection___call__, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.ChangeValue = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_ChangeValue, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection.SetValue = new_instancemethod(_BinLDrivers.BinLDrivers_VectorOfDocumentSection_SetValue, None, BinLDrivers_VectorOfDocumentSection)
BinLDrivers_VectorOfDocumentSection_swigregister = _BinLDrivers.BinLDrivers_VectorOfDocumentSection_swigregister
BinLDrivers_VectorOfDocumentSection_swigregister(BinLDrivers_VectorOfDocumentSection)

class binldrivers(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AttributeDrivers(*args) -> "opencascade::handle< BinMDF_ADriverTable >":
        """
        * Creates a table of the supported drivers' types
        	:param MsgDrv:
        	:type MsgDrv: Message_Messenger
        	:rtype: opencascade::handle<BinMDF_ADriverTable>
        """
        return _BinLDrivers.binldrivers_AttributeDrivers(*args)

    AttributeDrivers = staticmethod(AttributeDrivers)

    def DefineFormat(*args) -> "void":
        """
        * Defines format 'BinLOcaf' and registers its read and write drivers in the specified application
        	:param theApp:
        	:type theApp: TDocStd_Application
        	:rtype: void
        """
        return _BinLDrivers.binldrivers_DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
        """
        :param theGUID:
        	:type theGUID: Standard_GUID
        	:rtype: opencascade::handle<Standard_Transient>
        """
        return _BinLDrivers.binldrivers_Factory(*args)

    Factory = staticmethod(Factory)

    def StorageVersion(*args) -> "TCollection_AsciiString":
        """
        * returns last storage version
        	:rtype: TCollection_AsciiString
        """
        return _BinLDrivers.binldrivers_StorageVersion(*args)

    StorageVersion = staticmethod(StorageVersion)

    __repr__ = _dumps_object


    def __init__(self):
        _BinLDrivers.binldrivers_swiginit(self, _BinLDrivers.new_binldrivers())
    __swig_destroy__ = _BinLDrivers.delete_binldrivers
binldrivers_swigregister = _BinLDrivers.binldrivers_swigregister
binldrivers_swigregister(binldrivers)

def binldrivers_AttributeDrivers(*args) -> "opencascade::handle< BinMDF_ADriverTable >":
    """
    * Creates a table of the supported drivers' types
    	:param MsgDrv:
    	:type MsgDrv: Message_Messenger
    	:rtype: opencascade::handle<BinMDF_ADriverTable>
    """
    return _BinLDrivers.binldrivers_AttributeDrivers(*args)

def binldrivers_DefineFormat(*args) -> "void":
    """
    * Defines format 'BinLOcaf' and registers its read and write drivers in the specified application
    	:param theApp:
    	:type theApp: TDocStd_Application
    	:rtype: void
    """
    return _BinLDrivers.binldrivers_DefineFormat(*args)

def binldrivers_Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
    """
    :param theGUID:
    	:type theGUID: Standard_GUID
    	:rtype: opencascade::handle<Standard_Transient>
    """
    return _BinLDrivers.binldrivers_Factory(*args)

def binldrivers_StorageVersion(*args) -> "TCollection_AsciiString":
    """
    * returns last storage version
    	:rtype: TCollection_AsciiString
    """
    return _BinLDrivers.binldrivers_StorageVersion(*args)

class BinLDrivers_DocumentRetrievalDriver(OCC.Core.PCDM.PCDM_RetrievalDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AttributeDrivers(self, *args) -> "opencascade::handle< BinMDF_ADriverTable >":
        """
        :param theMsgDriver:
        	:type theMsgDriver: Message_Messenger
        	:rtype: opencascade::handle<BinMDF_ADriverTable>
        """
        return _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)


    def __init__(self, *args):
        """
        * Constructor
        	:rtype: None
        """
        _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_swiginit(self, _BinLDrivers.new_BinLDrivers_DocumentRetrievalDriver(*args))

    def Read(self, *args) -> "void":
        """
        * retrieves the content of the file into a new Document.
        	:param theFileName:
        	:type theFileName: TCollection_ExtendedString
        	:param theNewDocument:
        	:type theNewDocument: CDM_Document
        	:param theApplication:
        	:type theApplication: CDM_Application
        	:rtype: void
        :param theIStream:
        	:type theIStream: Standard_IStream
        	:param theStorageData:
        	:type theStorageData: Storage_Data
        	:param theDoc:
        	:type theDoc: CDM_Document
        	:param theApplication:
        	:type theApplication: CDM_Application
        	:rtype: void
        """
        return _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_Read(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinLDrivers_DocumentRetrievalDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinLDrivers.delete_BinLDrivers_DocumentRetrievalDriver
BinLDrivers_DocumentRetrievalDriver.AttributeDrivers = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentRetrievalDriver_AttributeDrivers, None, BinLDrivers_DocumentRetrievalDriver)
BinLDrivers_DocumentRetrievalDriver.Read = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentRetrievalDriver_Read, None, BinLDrivers_DocumentRetrievalDriver)
BinLDrivers_DocumentRetrievalDriver_swigregister = _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_swigregister
BinLDrivers_DocumentRetrievalDriver_swigregister(BinLDrivers_DocumentRetrievalDriver)

class BinLDrivers_DocumentSection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Constructor
        	:param theName:
        	:type theName: TCollection_AsciiString
        	:param isPostRead:
        	:type isPostRead: bool
        	:rtype: None
        """
        _BinLDrivers.BinLDrivers_DocumentSection_swiginit(self, _BinLDrivers.new_BinLDrivers_DocumentSection(*args))

    def IsPostRead(self, *args) -> "Standard_Boolean":
        """
        * Query the status: if the Section should be read after OCAF; False means that the Section is read before starting to read OCAF data.
        	:rtype: bool
        """
        return _BinLDrivers.BinLDrivers_DocumentSection_IsPostRead(self, *args)


    def Length(self, *args) -> "uint64_t":
        """
        * Query the length of the section in the persistent file
        	:rtype: uint64_t
        """
        return _BinLDrivers.BinLDrivers_DocumentSection_Length(self, *args)


    def Name(self, *args) -> "TCollection_AsciiString const &":
        """
        * Query the name of the section.
        	:rtype: TCollection_AsciiString
        """
        return _BinLDrivers.BinLDrivers_DocumentSection_Name(self, *args)


    def Offset(self, *args) -> "uint64_t":
        """
        * Query the offset of the section in the persistent file
        	:rtype: uint64_t
        """
        return _BinLDrivers.BinLDrivers_DocumentSection_Offset(self, *args)


    def ReadTOC(*args) -> "void":
        """
        * Fill a DocumentSection instance from the data that are read from TOC.
        	:param theSection:
        	:type theSection: BinLDrivers_DocumentSection
        	:param theIS:
        	:type theIS: Standard_IStream
        	:param theDocFormatVersion:
        	:type theDocFormatVersion: int
        	:rtype: void
        """
        return _BinLDrivers.BinLDrivers_DocumentSection_ReadTOC(*args)

    ReadTOC = staticmethod(ReadTOC)

    def SetLength(self, *args) -> "void":
        """
        * Set the length of the section in the persistent file
        	:param theLength:
        	:type theLength: uint64_t
        	:rtype: None
        """
        return _BinLDrivers.BinLDrivers_DocumentSection_SetLength(self, *args)


    def SetOffset(self, *args) -> "void":
        """
        * Set the offset of the section in the persistent file
        	:param theOffset:
        	:type theOffset: uint64_t
        	:rtype: None
        """
        return _BinLDrivers.BinLDrivers_DocumentSection_SetOffset(self, *args)


    def Write(self, *args) -> "void":
        """
        * Save Offset and Length data into the Section entry in the Document TOC (list of sections)
        	:param theOS:
        	:type theOS: Standard_OStream
        	:param theOffset:
        	:type theOffset: uint64_t
        	:rtype: None
        """
        return _BinLDrivers.BinLDrivers_DocumentSection_Write(self, *args)


    def WriteTOCToString(self) -> "std::string":
        """WriteTOCToString(BinLDrivers_DocumentSection self) -> std::string"""
        return _BinLDrivers.BinLDrivers_DocumentSection_WriteTOCToString(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinLDrivers.delete_BinLDrivers_DocumentSection
BinLDrivers_DocumentSection.IsPostRead = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentSection_IsPostRead, None, BinLDrivers_DocumentSection)
BinLDrivers_DocumentSection.Length = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentSection_Length, None, BinLDrivers_DocumentSection)
BinLDrivers_DocumentSection.Name = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentSection_Name, None, BinLDrivers_DocumentSection)
BinLDrivers_DocumentSection.Offset = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentSection_Offset, None, BinLDrivers_DocumentSection)
BinLDrivers_DocumentSection.SetLength = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentSection_SetLength, None, BinLDrivers_DocumentSection)
BinLDrivers_DocumentSection.SetOffset = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentSection_SetOffset, None, BinLDrivers_DocumentSection)
BinLDrivers_DocumentSection.Write = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentSection_Write, None, BinLDrivers_DocumentSection)
BinLDrivers_DocumentSection.WriteTOCToString = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentSection_WriteTOCToString, None, BinLDrivers_DocumentSection)
BinLDrivers_DocumentSection_swigregister = _BinLDrivers.BinLDrivers_DocumentSection_swigregister
BinLDrivers_DocumentSection_swigregister(BinLDrivers_DocumentSection)

def BinLDrivers_DocumentSection_ReadTOC(*args) -> "void":
    """
    * Fill a DocumentSection instance from the data that are read from TOC.
    	:param theSection:
    	:type theSection: BinLDrivers_DocumentSection
    	:param theIS:
    	:type theIS: Standard_IStream
    	:param theDocFormatVersion:
    	:type theDocFormatVersion: int
    	:rtype: void
    """
    return _BinLDrivers.BinLDrivers_DocumentSection_ReadTOC(*args)

class BinLDrivers_DocumentStorageDriver(OCC.Core.PCDM.PCDM_StorageDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddSection(self, *args) -> "void":
        """
        * Create a section that should be written after the OCAF data
        	:param theName:
        	:type theName: TCollection_AsciiString
        	:param isPostRead: default value is Standard_True
        	:type isPostRead: bool
        	:rtype: None
        """
        return _BinLDrivers.BinLDrivers_DocumentStorageDriver_AddSection(self, *args)


    def AttributeDrivers(self, *args) -> "opencascade::handle< BinMDF_ADriverTable >":
        """
        :param theMsgDriver:
        	:type theMsgDriver: Message_Messenger
        	:rtype: opencascade::handle<BinMDF_ADriverTable>
        """
        return _BinLDrivers.BinLDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)


    def __init__(self, *args):
        """
        * Constructor
        	:rtype: None
        """
        _BinLDrivers.BinLDrivers_DocumentStorageDriver_swiginit(self, _BinLDrivers.new_BinLDrivers_DocumentStorageDriver(*args))

    def Write(self, *args) -> "void":
        """
        * Write <theDocument> to the binary file <theFileName>
        	:param theDocument:
        	:type theDocument: CDM_Document
        	:param theFileName:
        	:type theFileName: TCollection_ExtendedString
        	:rtype: void
        * Write <theDocument> to theOStream
        	:param theDocument:
        	:type theDocument: CDM_Document
        	:param theOStream:
        	:type theOStream: Standard_OStream
        	:rtype: void
        """
        return _BinLDrivers.BinLDrivers_DocumentStorageDriver_Write(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinLDrivers_DocumentStorageDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinLDrivers.delete_BinLDrivers_DocumentStorageDriver
BinLDrivers_DocumentStorageDriver.AddSection = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentStorageDriver_AddSection, None, BinLDrivers_DocumentStorageDriver)
BinLDrivers_DocumentStorageDriver.AttributeDrivers = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentStorageDriver_AttributeDrivers, None, BinLDrivers_DocumentStorageDriver)
BinLDrivers_DocumentStorageDriver.Write = new_instancemethod(_BinLDrivers.BinLDrivers_DocumentStorageDriver_Write, None, BinLDrivers_DocumentStorageDriver)
BinLDrivers_DocumentStorageDriver_swigregister = _BinLDrivers.BinLDrivers_DocumentStorageDriver_swigregister
BinLDrivers_DocumentStorageDriver_swigregister(BinLDrivers_DocumentStorageDriver)



