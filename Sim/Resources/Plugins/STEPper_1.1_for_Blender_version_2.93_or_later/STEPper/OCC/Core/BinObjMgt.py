# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinObjMgt module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_binobjmgt.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BinObjMgt.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinObjMgt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinObjMgt')
    _BinObjMgt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinObjMgt', [dirname(__file__)])
        except ImportError:
            import _BinObjMgt
            return _BinObjMgt
        try:
            _mod = imp.load_module('_BinObjMgt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinObjMgt = swig_import_helper()
    del swig_import_helper
else:
    import _BinObjMgt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinObjMgt.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BinObjMgt.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BinObjMgt.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BinObjMgt.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BinObjMgt.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BinObjMgt.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BinObjMgt.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BinObjMgt.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BinObjMgt.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BinObjMgt.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BinObjMgt.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BinObjMgt.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BinObjMgt.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BinObjMgt.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BinObjMgt.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BinObjMgt.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BinObjMgt.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BinObjMgt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BinObjMgt.process_exception(error, method_name, class_name)
process_exception = _BinObjMgt.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TDF
import OCC.Core.Storage
class BinObjMgt_Persistent(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _BinObjMgt.BinObjMgt_Persistent_swiginit(self, _BinObjMgt.new_BinObjMgt_Persistent(*args))

    def Destroy(self, *args) -> "void":
        """
        * Frees the allocated memory; This object can be reused after call to Init
        	:rtype: None
        """
        return _BinObjMgt.BinObjMgt_Persistent_Destroy(self, *args)


    def GetAsciiString(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theValue:
        	:type theValue: TCollection_AsciiString
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetAsciiString(self, *args)


    def GetBoolean(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theValue:
        	:type theValue: bool
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetBoolean(self, *args)


    def GetByte(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theValue:
        	:type theValue: Standard_Byte
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetByte(self, *args)


    def GetByteArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        * Get C array of unsigned chars, theLength is the number of elements; theArray must point to a space enough to place theLength elements
        	:param theArray:
        	:type theArray: BinObjMgt_PByte
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetByteArray(self, *args)


    def GetCharArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        * Get C array of char, theLength is the number of elements; theArray must point to a space enough to place theLength elements
        	:param theArray:
        	:type theArray: BinObjMgt_PChar
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetCharArray(self, *args)


    def GetCharacter(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theValue:
        	:type theValue: Standard_Character
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetCharacter(self, *args)


    def GetExtCharArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        * Get C array of ExtCharacter, theLength is the number of elements; theArray must point to a space enough to place theLength elements
        	:param theArray:
        	:type theArray: BinObjMgt_PExtChar
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetExtCharArray(self, *args)


    def GetExtCharacter(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theValue:
        	:type theValue: Standard_ExtCharacter
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetExtCharacter(self, *args)


    def GetExtendedString(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theValue:
        	:type theValue: TCollection_ExtendedString
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetExtendedString(self, *args)


    def GetGUID(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theValue:
        	:type theValue: Standard_GUID
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetGUID(self, *args)


    def GetIntArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        * Get C array of int, theLength is the number of elements; theArray must point to a space enough to place theLength elements
        	:param theArray:
        	:type theArray: BinObjMgt_PInteger
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetIntArray(self, *args)


    def GetInteger(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theValue:
        	:type theValue: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetInteger(self, *args)


    def GetLabel(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theDS:
        	:type theDS: TDF_Data
        	:param theValue:
        	:type theValue: TDF_Label
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetLabel(self, *args)


    def GetReal(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theValue:
        	:type theValue: float
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetReal(self, *args)


    def GetRealArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        * Get C array of double, theLength is the number of elements; theArray must point to a space enough to place theLength elements
        	:param theArray:
        	:type theArray: BinObjMgt_PReal
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetRealArray(self, *args)


    def GetShortReal(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theValue:
        	:type theValue: Standard_ShortReal
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetShortReal(self, *args)


    def GetShortRealArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        * Get C array of float, theLength is the number of elements; theArray must point to a space enough to place theLength elements
        	:param theArray:
        	:type theArray: BinObjMgt_PShortReal
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_GetShortRealArray(self, *args)


    def Id(self, *args) -> "Standard_Integer":
        """
        * Returns the Id of the object
        	:rtype: int
        """
        return _BinObjMgt.BinObjMgt_Persistent_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes me to reuse again
        	:rtype: None
        """
        return _BinObjMgt.BinObjMgt_Persistent_Init(self, *args)


    def IsError(self, *args) -> "Standard_Boolean":
        """
        * Indicates an error after Get methods or SetPosition
        	:rtype: bool
        """
        return _BinObjMgt.BinObjMgt_Persistent_IsError(self, *args)


    def IsOK(self, *args) -> "Standard_Boolean":
        """
        * Indicates a good state after Get methods or SetPosition
        	:rtype: bool
        """
        return _BinObjMgt.BinObjMgt_Persistent_IsOK(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        * Returns the length of data
        	:rtype: int
        """
        return _BinObjMgt.BinObjMgt_Persistent_Length(self, *args)


    def Position(self, *args) -> "Standard_Integer":
        """
        * Tells the current position for get/put
        	:rtype: int
        """
        return _BinObjMgt.BinObjMgt_Persistent_Position(self, *args)


    def PutAsciiString(self, *args) -> "BinObjMgt_Persistent &":
        """
        * Offset in output buffer is word-aligned
        	:param theValue:
        	:type theValue: TCollection_AsciiString
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutAsciiString(self, *args)


    def PutBoolean(self, *args) -> "BinObjMgt_Persistent &":
        """
        :param theValue:
        	:type theValue: bool
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutBoolean(self, *args)


    def PutByte(self, *args) -> "BinObjMgt_Persistent &":
        """
        :param theValue:
        	:type theValue: Standard_Byte
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutByte(self, *args)


    def PutByteArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        * Put C array of unsigned chars, theLength is the number of elements
        	:param theArray:
        	:type theArray: BinObjMgt_PByte
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutByteArray(self, *args)


    def PutCString(self, *args) -> "BinObjMgt_Persistent &":
        """
        * Offset in output buffer is not aligned
        	:param theValue:
        	:type theValue: char *
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutCString(self, *args)


    def PutCharArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        * Put C array of char, theLength is the number of elements
        	:param theArray:
        	:type theArray: BinObjMgt_PChar
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutCharArray(self, *args)


    def PutCharacter(self, *args) -> "BinObjMgt_Persistent &":
        """
        :param theValue:
        	:type theValue: Standard_Character
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutCharacter(self, *args)


    def PutExtCharArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        * Put C array of ExtCharacter, theLength is the number of elements
        	:param theArray:
        	:type theArray: BinObjMgt_PExtChar
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutExtCharArray(self, *args)


    def PutExtCharacter(self, *args) -> "BinObjMgt_Persistent &":
        """
        :param theValue:
        	:type theValue: Standard_ExtCharacter
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutExtCharacter(self, *args)


    def PutExtendedString(self, *args) -> "BinObjMgt_Persistent &":
        """
        * Offset in output buffer is word-aligned
        	:param theValue:
        	:type theValue: TCollection_ExtendedString
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutExtendedString(self, *args)


    def PutGUID(self, *args) -> "BinObjMgt_Persistent &":
        """
        :param theValue:
        	:type theValue: Standard_GUID
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutGUID(self, *args)


    def PutIntArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        * Put C array of int, theLength is the number of elements
        	:param theArray:
        	:type theArray: BinObjMgt_PInteger
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutIntArray(self, *args)


    def PutInteger(self, *args) -> "BinObjMgt_Persistent &":
        """
        :param theValue:
        	:type theValue: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutInteger(self, *args)


    def PutLabel(self, *args) -> "BinObjMgt_Persistent &":
        """
        :param theValue:
        	:type theValue: TDF_Label
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutLabel(self, *args)


    def PutReal(self, *args) -> "BinObjMgt_Persistent &":
        """
        :param theValue:
        	:type theValue: float
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutReal(self, *args)


    def PutRealArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        * Put C array of double, theLength is the number of elements
        	:param theArray:
        	:type theArray: BinObjMgt_PReal
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutRealArray(self, *args)


    def PutShortReal(self, *args) -> "BinObjMgt_Persistent &":
        """
        :param theValue:
        	:type theValue: Standard_ShortReal
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutShortReal(self, *args)


    def PutShortRealArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        * Put C array of float, theLength is the number of elements
        	:param theArray:
        	:type theArray: BinObjMgt_PShortReal
        	:param theLength:
        	:type theLength: int
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent_PutShortRealArray(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinObjMgt_Persistent self, std::string src)"""
        return _BinObjMgt.BinObjMgt_Persistent_ReadFromString(self, src)


    def SetId(self, *args) -> "void":
        """
        * Sets the Id of the object
        	:param theId:
        	:type theId: int
        	:rtype: None
        """
        return _BinObjMgt.BinObjMgt_Persistent_SetId(self, *args)


    def SetPosition(self, *args) -> "Standard_Boolean":
        """
        * Sets the current position for get/put. Resets an error state depending on the validity of thePos. Returns the new state (value of IsOK())
        	:param thePos:
        	:type thePos: int
        	:rtype: bool
        """
        return _BinObjMgt.BinObjMgt_Persistent_SetPosition(self, *args)


    def SetTypeId(self, *args) -> "void":
        """
        * Sets the Id of the type of the object
        	:param theId:
        	:type theId: int
        	:rtype: None
        """
        return _BinObjMgt.BinObjMgt_Persistent_SetTypeId(self, *args)


    def Truncate(self, *args) -> "void":
        """
        * Truncates the buffer by current position, i.e. updates mySize
        	:rtype: None
        """
        return _BinObjMgt.BinObjMgt_Persistent_Truncate(self, *args)


    def TypeId(self, *args) -> "Standard_Integer":
        """
        * Returns the Id of the type of the object
        	:rtype: int
        """
        return _BinObjMgt.BinObjMgt_Persistent_TypeId(self, *args)


    def WriteToString(self) -> "std::string":
        """WriteToString(BinObjMgt_Persistent self) -> std::string"""
        return _BinObjMgt.BinObjMgt_Persistent_WriteToString(self)


    def __rshift__(self, *args) -> "BinObjMgt_Persistent const &":
        """
        :param theValue:
        	:type theValue: Standard_Character
        	:rtype: BinObjMgt_Persistent
        :param theValue:
        	:type theValue: Standard_Byte
        	:rtype: BinObjMgt_Persistent
        :param theValue:
        	:type theValue: Standard_ExtCharacter
        	:rtype: BinObjMgt_Persistent
        :param theValue:
        	:type theValue: int
        	:rtype: BinObjMgt_Persistent
        :param theValue:
        	:type theValue: bool
        	:rtype: BinObjMgt_Persistent
        :param theValue:
        	:type theValue: float
        	:rtype: BinObjMgt_Persistent
        :param theValue:
        	:type theValue: Standard_ShortReal
        	:rtype: BinObjMgt_Persistent
        :param theValue:
        	:type theValue: TCollection_AsciiString
        	:rtype: BinObjMgt_Persistent
        :param theValue:
        	:type theValue: TCollection_ExtendedString
        	:rtype: BinObjMgt_Persistent
        :param theValue:
        	:type theValue: Standard_GUID
        	:rtype: BinObjMgt_Persistent
        """
        return _BinObjMgt.BinObjMgt_Persistent___rshift__(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinObjMgt.delete_BinObjMgt_Persistent
BinObjMgt_Persistent.Destroy = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_Destroy, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetAsciiString = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetAsciiString, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetBoolean = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetBoolean, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetByte = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetByte, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetByteArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetByteArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetCharArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetCharArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetCharacter = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetCharacter, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetExtCharArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetExtCharArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetExtCharacter = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetExtCharacter, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetExtendedString = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetExtendedString, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetGUID = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetGUID, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetIntArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetIntArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetInteger = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetInteger, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetLabel = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetLabel, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetReal = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetReal, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetRealArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetRealArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetShortReal = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetShortReal, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.GetShortRealArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_GetShortRealArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.Id = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_Id, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.Init = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_Init, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.IsError = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_IsError, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.IsOK = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_IsOK, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.Length = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_Length, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.Position = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_Position, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutAsciiString = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutAsciiString, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutBoolean = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutBoolean, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutByte = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutByte, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutByteArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutByteArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutCString = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutCString, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutCharArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutCharArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutCharacter = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutCharacter, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutExtCharArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutExtCharArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutExtCharacter = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutExtCharacter, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutExtendedString = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutExtendedString, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutGUID = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutGUID, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutIntArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutIntArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutInteger = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutInteger, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutLabel = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutLabel, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutReal = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutReal, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutRealArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutRealArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutShortReal = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutShortReal, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.PutShortRealArray = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_PutShortRealArray, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.ReadFromString = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_ReadFromString, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.SetId = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_SetId, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.SetPosition = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_SetPosition, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.SetTypeId = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_SetTypeId, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.Truncate = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_Truncate, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.TypeId = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_TypeId, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.WriteToString = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent_WriteToString, None, BinObjMgt_Persistent)
BinObjMgt_Persistent.__rshift__ = new_instancemethod(_BinObjMgt.BinObjMgt_Persistent___rshift__, None, BinObjMgt_Persistent)
BinObjMgt_Persistent_swigregister = _BinObjMgt.BinObjMgt_Persistent_swigregister
BinObjMgt_Persistent_swigregister(BinObjMgt_Persistent)

class BinObjMgt_RRelocationTable(OCC.Core.TColStd.TColStd_DataMapOfIntegerTransient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        :param doReleaseMemory: default value is Standard_True
        	:type doReleaseMemory: bool
        	:rtype: None
        """
        return _BinObjMgt.BinObjMgt_RRelocationTable_Clear(self, *args)


    def GetHeaderData(self, *args) -> "opencascade::handle< Storage_HeaderData > const &":
        """
        * Returns a handle to the header data of the file that is begin read
        	:rtype: opencascade::handle<Storage_HeaderData>
        """
        return _BinObjMgt.BinObjMgt_RRelocationTable_GetHeaderData(self, *args)


    def SetHeaderData(self, *args) -> "void":
        """
        * Sets the storage header data. //! @param theHeaderData header data of the file that is begin read
        	:param theHeaderData:
        	:type theHeaderData: Storage_HeaderData
        	:rtype: None
        """
        return _BinObjMgt.BinObjMgt_RRelocationTable_SetHeaderData(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        _BinObjMgt.BinObjMgt_RRelocationTable_swiginit(self, _BinObjMgt.new_BinObjMgt_RRelocationTable())
    __swig_destroy__ = _BinObjMgt.delete_BinObjMgt_RRelocationTable
BinObjMgt_RRelocationTable.Clear = new_instancemethod(_BinObjMgt.BinObjMgt_RRelocationTable_Clear, None, BinObjMgt_RRelocationTable)
BinObjMgt_RRelocationTable.GetHeaderData = new_instancemethod(_BinObjMgt.BinObjMgt_RRelocationTable_GetHeaderData, None, BinObjMgt_RRelocationTable)
BinObjMgt_RRelocationTable.SetHeaderData = new_instancemethod(_BinObjMgt.BinObjMgt_RRelocationTable_SetHeaderData, None, BinObjMgt_RRelocationTable)
BinObjMgt_RRelocationTable_swigregister = _BinObjMgt.BinObjMgt_RRelocationTable_swigregister
BinObjMgt_RRelocationTable_swigregister(BinObjMgt_RRelocationTable)



