# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinTObjDrivers module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_bintobjdrivers.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BinTObjDrivers.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinTObjDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinTObjDrivers')
    _BinTObjDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinTObjDrivers', [dirname(__file__)])
        except ImportError:
            import _BinTObjDrivers
            return _BinTObjDrivers
        try:
            _mod = imp.load_module('_BinTObjDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinTObjDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _BinTObjDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinTObjDrivers.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BinTObjDrivers.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BinTObjDrivers.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BinTObjDrivers.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BinTObjDrivers.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BinTObjDrivers.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BinTObjDrivers.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BinTObjDrivers.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BinTObjDrivers.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BinTObjDrivers.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BinTObjDrivers.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BinTObjDrivers.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BinTObjDrivers.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BinTObjDrivers.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BinTObjDrivers.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BinTObjDrivers.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BinTObjDrivers.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BinTObjDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BinTObjDrivers.process_exception(error, method_name, class_name)
process_exception = _BinTObjDrivers.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BinMDF
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.TDF
import OCC.Core.BinObjMgt
import OCC.Core.Storage
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.BinLDrivers

def Handle_BinTObjDrivers_DocumentRetrievalDriver_Create() -> "opencascade::handle< BinTObjDrivers_DocumentRetrievalDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_Create()
Handle_BinTObjDrivers_DocumentRetrievalDriver_Create = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_Create

def Handle_BinTObjDrivers_DocumentRetrievalDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinTObjDrivers_DocumentRetrievalDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_DownCast(t)
Handle_BinTObjDrivers_DocumentRetrievalDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_DownCast

def Handle_BinTObjDrivers_DocumentRetrievalDriver_IsNull(t: 'opencascade::handle< BinTObjDrivers_DocumentRetrievalDriver > const &') -> "bool":
    return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_IsNull(t)
Handle_BinTObjDrivers_DocumentRetrievalDriver_IsNull = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_IsNull

def Handle_BinTObjDrivers_DocumentStorageDriver_Create() -> "opencascade::handle< BinTObjDrivers_DocumentStorageDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_Create()
Handle_BinTObjDrivers_DocumentStorageDriver_Create = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_Create

def Handle_BinTObjDrivers_DocumentStorageDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinTObjDrivers_DocumentStorageDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_DownCast(t)
Handle_BinTObjDrivers_DocumentStorageDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_DownCast

def Handle_BinTObjDrivers_DocumentStorageDriver_IsNull(t: 'opencascade::handle< BinTObjDrivers_DocumentStorageDriver > const &') -> "bool":
    return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_IsNull(t)
Handle_BinTObjDrivers_DocumentStorageDriver_IsNull = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_IsNull

def Handle_BinTObjDrivers_IntSparseArrayDriver_Create() -> "opencascade::handle< BinTObjDrivers_IntSparseArrayDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_Create()
Handle_BinTObjDrivers_IntSparseArrayDriver_Create = _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_Create

def Handle_BinTObjDrivers_IntSparseArrayDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinTObjDrivers_IntSparseArrayDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_DownCast(t)
Handle_BinTObjDrivers_IntSparseArrayDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_DownCast

def Handle_BinTObjDrivers_IntSparseArrayDriver_IsNull(t: 'opencascade::handle< BinTObjDrivers_IntSparseArrayDriver > const &') -> "bool":
    return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_IsNull(t)
Handle_BinTObjDrivers_IntSparseArrayDriver_IsNull = _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_IsNull

def Handle_BinTObjDrivers_ModelDriver_Create() -> "opencascade::handle< BinTObjDrivers_ModelDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_Create()
Handle_BinTObjDrivers_ModelDriver_Create = _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_Create

def Handle_BinTObjDrivers_ModelDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinTObjDrivers_ModelDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_DownCast(t)
Handle_BinTObjDrivers_ModelDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_DownCast

def Handle_BinTObjDrivers_ModelDriver_IsNull(t: 'opencascade::handle< BinTObjDrivers_ModelDriver > const &') -> "bool":
    return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_IsNull(t)
Handle_BinTObjDrivers_ModelDriver_IsNull = _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_IsNull

def Handle_BinTObjDrivers_ObjectDriver_Create() -> "opencascade::handle< BinTObjDrivers_ObjectDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_Create()
Handle_BinTObjDrivers_ObjectDriver_Create = _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_Create

def Handle_BinTObjDrivers_ObjectDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinTObjDrivers_ObjectDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_DownCast(t)
Handle_BinTObjDrivers_ObjectDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_DownCast

def Handle_BinTObjDrivers_ObjectDriver_IsNull(t: 'opencascade::handle< BinTObjDrivers_ObjectDriver > const &') -> "bool":
    return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_IsNull(t)
Handle_BinTObjDrivers_ObjectDriver_IsNull = _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_IsNull

def Handle_BinTObjDrivers_ReferenceDriver_Create() -> "opencascade::handle< BinTObjDrivers_ReferenceDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_Create()
Handle_BinTObjDrivers_ReferenceDriver_Create = _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_Create

def Handle_BinTObjDrivers_ReferenceDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinTObjDrivers_ReferenceDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_DownCast(t)
Handle_BinTObjDrivers_ReferenceDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_DownCast

def Handle_BinTObjDrivers_ReferenceDriver_IsNull(t: 'opencascade::handle< BinTObjDrivers_ReferenceDriver > const &') -> "bool":
    return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_IsNull(t)
Handle_BinTObjDrivers_ReferenceDriver_IsNull = _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_IsNull

def Handle_BinTObjDrivers_XYZDriver_Create() -> "opencascade::handle< BinTObjDrivers_XYZDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_Create()
Handle_BinTObjDrivers_XYZDriver_Create = _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_Create

def Handle_BinTObjDrivers_XYZDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinTObjDrivers_XYZDriver >":
    return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_DownCast(t)
Handle_BinTObjDrivers_XYZDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_DownCast

def Handle_BinTObjDrivers_XYZDriver_IsNull(t: 'opencascade::handle< BinTObjDrivers_XYZDriver > const &') -> "bool":
    return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_IsNull(t)
Handle_BinTObjDrivers_XYZDriver_IsNull = _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_IsNull
class bintobjdrivers(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args) -> "void":
        """
        :param aDriverTable:
        	:type aDriverTable: BinMDF_ADriverTable
        	:param aMsgDrv:
        	:type aMsgDrv: Message_Messenger
        	:rtype: void
        """
        return _BinTObjDrivers.bintobjdrivers_AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def DefineFormat(*args) -> "void":
        """
        * Defines format 'TObjBin' and registers its read and write drivers in the specified application
        	:param theApp:
        	:type theApp: TDocStd_Application
        	:rtype: void
        """
        return _BinTObjDrivers.bintobjdrivers_DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
        """
        :param aGUID:
        	:type aGUID: Standard_GUID
        	:rtype: opencascade::handle<Standard_Transient>
        """
        return _BinTObjDrivers.bintobjdrivers_Factory(*args)

    Factory = staticmethod(Factory)

    __repr__ = _dumps_object


    def __init__(self):
        _BinTObjDrivers.bintobjdrivers_swiginit(self, _BinTObjDrivers.new_bintobjdrivers())
    __swig_destroy__ = _BinTObjDrivers.delete_bintobjdrivers
bintobjdrivers_swigregister = _BinTObjDrivers.bintobjdrivers_swigregister
bintobjdrivers_swigregister(bintobjdrivers)

def bintobjdrivers_AddDrivers(*args) -> "void":
    """
    :param aDriverTable:
    	:type aDriverTable: BinMDF_ADriverTable
    	:param aMsgDrv:
    	:type aMsgDrv: Message_Messenger
    	:rtype: void
    """
    return _BinTObjDrivers.bintobjdrivers_AddDrivers(*args)

def bintobjdrivers_DefineFormat(*args) -> "void":
    """
    * Defines format 'TObjBin' and registers its read and write drivers in the specified application
    	:param theApp:
    	:type theApp: TDocStd_Application
    	:rtype: void
    """
    return _BinTObjDrivers.bintobjdrivers_DefineFormat(*args)

def bintobjdrivers_Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
    """
    :param aGUID:
    	:type aGUID: Standard_GUID
    	:rtype: opencascade::handle<Standard_Transient>
    """
    return _BinTObjDrivers.bintobjdrivers_Factory(*args)

class BinTObjDrivers_DocumentRetrievalDriver(OCC.Core.BinLDrivers.BinLDrivers_DocumentRetrievalDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _BinTObjDrivers.BinTObjDrivers_DocumentRetrievalDriver_swiginit(self, _BinTObjDrivers.new_BinTObjDrivers_DocumentRetrievalDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BinTObjDrivers_DocumentRetrievalDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_DocumentRetrievalDriver
BinTObjDrivers_DocumentRetrievalDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_DocumentRetrievalDriver_swigregister
BinTObjDrivers_DocumentRetrievalDriver_swigregister(BinTObjDrivers_DocumentRetrievalDriver)

class BinTObjDrivers_DocumentStorageDriver(OCC.Core.BinLDrivers.BinLDrivers_DocumentStorageDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _BinTObjDrivers.BinTObjDrivers_DocumentStorageDriver_swiginit(self, _BinTObjDrivers.new_BinTObjDrivers_DocumentStorageDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BinTObjDrivers_DocumentStorageDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_DocumentStorageDriver
BinTObjDrivers_DocumentStorageDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_DocumentStorageDriver_swigregister
BinTObjDrivers_DocumentStorageDriver_swigregister(BinTObjDrivers_DocumentStorageDriver)

class BinTObjDrivers_IntSparseArrayDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_swiginit(self, _BinTObjDrivers.new_BinTObjDrivers_IntSparseArrayDriver(*args))

    def Paste(self, *args) -> "void":
        """
        :param theSource:
        	:type theSource: BinObjMgt_Persistent
        	:param theTarget:
        	:type theTarget: TDF_Attribute
        	:param theRelocTable:
        	:type theRelocTable: BinObjMgt_RRelocationTable
        	:rtype: bool
        :param theSource:
        	:type theSource: TDF_Attribute
        	:param theTarget:
        	:type theTarget: BinObjMgt_Persistent
        	:param theRelocTable:
        	:type theRelocTable: BinObjMgt_SRelocationTable
        	:rtype: None
        """
        return _BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinTObjDrivers_IntSparseArrayDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_IntSparseArrayDriver
BinTObjDrivers_IntSparseArrayDriver.Paste = new_instancemethod(_BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_Paste, None, BinTObjDrivers_IntSparseArrayDriver)
BinTObjDrivers_IntSparseArrayDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_swigregister
BinTObjDrivers_IntSparseArrayDriver_swigregister(BinTObjDrivers_IntSparseArrayDriver)

class BinTObjDrivers_ModelDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _BinTObjDrivers.BinTObjDrivers_ModelDriver_swiginit(self, _BinTObjDrivers.new_BinTObjDrivers_ModelDriver(*args))

    def Paste(self, *args) -> "void":
        """
        :param Source:
        	:type Source: BinObjMgt_Persistent
        	:param Target:
        	:type Target: TDF_Attribute
        	:param RelocTable:
        	:type RelocTable: BinObjMgt_RRelocationTable
        	:rtype: bool
        :param Source:
        	:type Source: TDF_Attribute
        	:param Target:
        	:type Target: BinObjMgt_Persistent
        	:param RelocTable:
        	:type RelocTable: BinObjMgt_SRelocationTable
        	:rtype: None
        """
        return _BinTObjDrivers.BinTObjDrivers_ModelDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinTObjDrivers_ModelDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_ModelDriver
BinTObjDrivers_ModelDriver.Paste = new_instancemethod(_BinTObjDrivers.BinTObjDrivers_ModelDriver_Paste, None, BinTObjDrivers_ModelDriver)
BinTObjDrivers_ModelDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_ModelDriver_swigregister
BinTObjDrivers_ModelDriver_swigregister(BinTObjDrivers_ModelDriver)

class BinTObjDrivers_ObjectDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _BinTObjDrivers.BinTObjDrivers_ObjectDriver_swiginit(self, _BinTObjDrivers.new_BinTObjDrivers_ObjectDriver(*args))

    def Paste(self, *args) -> "void":
        """
        :param Source:
        	:type Source: BinObjMgt_Persistent
        	:param Target:
        	:type Target: TDF_Attribute
        	:param RelocTable:
        	:type RelocTable: BinObjMgt_RRelocationTable
        	:rtype: bool
        :param Source:
        	:type Source: TDF_Attribute
        	:param Target:
        	:type Target: BinObjMgt_Persistent
        	:param RelocTable:
        	:type RelocTable: BinObjMgt_SRelocationTable
        	:rtype: None
        """
        return _BinTObjDrivers.BinTObjDrivers_ObjectDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinTObjDrivers_ObjectDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_ObjectDriver
BinTObjDrivers_ObjectDriver.Paste = new_instancemethod(_BinTObjDrivers.BinTObjDrivers_ObjectDriver_Paste, None, BinTObjDrivers_ObjectDriver)
BinTObjDrivers_ObjectDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_ObjectDriver_swigregister
BinTObjDrivers_ObjectDriver_swigregister(BinTObjDrivers_ObjectDriver)

class BinTObjDrivers_ReferenceDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _BinTObjDrivers.BinTObjDrivers_ReferenceDriver_swiginit(self, _BinTObjDrivers.new_BinTObjDrivers_ReferenceDriver(*args))

    def Paste(self, *args) -> "void":
        """
        :param Source:
        	:type Source: BinObjMgt_Persistent
        	:param Target:
        	:type Target: TDF_Attribute
        	:param RelocTable:
        	:type RelocTable: BinObjMgt_RRelocationTable
        	:rtype: bool
        :param Source:
        	:type Source: TDF_Attribute
        	:param Target:
        	:type Target: BinObjMgt_Persistent
        	:param RelocTable:
        	:type RelocTable: BinObjMgt_SRelocationTable
        	:rtype: None
        """
        return _BinTObjDrivers.BinTObjDrivers_ReferenceDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinTObjDrivers_ReferenceDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_ReferenceDriver
BinTObjDrivers_ReferenceDriver.Paste = new_instancemethod(_BinTObjDrivers.BinTObjDrivers_ReferenceDriver_Paste, None, BinTObjDrivers_ReferenceDriver)
BinTObjDrivers_ReferenceDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_ReferenceDriver_swigregister
BinTObjDrivers_ReferenceDriver_swigregister(BinTObjDrivers_ReferenceDriver)

class BinTObjDrivers_XYZDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _BinTObjDrivers.BinTObjDrivers_XYZDriver_swiginit(self, _BinTObjDrivers.new_BinTObjDrivers_XYZDriver(*args))

    def Paste(self, *args) -> "void":
        """
        :param theSource:
        	:type theSource: BinObjMgt_Persistent
        	:param theTarget:
        	:type theTarget: TDF_Attribute
        	:param theRelocTable:
        	:type theRelocTable: BinObjMgt_RRelocationTable
        	:rtype: bool
        :param theSource:
        	:type theSource: TDF_Attribute
        	:param theTarget:
        	:type theTarget: BinObjMgt_Persistent
        	:param theRelocTable:
        	:type theRelocTable: BinObjMgt_SRelocationTable
        	:rtype: None
        """
        return _BinTObjDrivers.BinTObjDrivers_XYZDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinTObjDrivers_XYZDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_XYZDriver
BinTObjDrivers_XYZDriver.Paste = new_instancemethod(_BinTObjDrivers.BinTObjDrivers_XYZDriver_Paste, None, BinTObjDrivers_XYZDriver)
BinTObjDrivers_XYZDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_XYZDriver_swigregister
BinTObjDrivers_XYZDriver_swigregister(BinTObjDrivers_XYZDriver)



