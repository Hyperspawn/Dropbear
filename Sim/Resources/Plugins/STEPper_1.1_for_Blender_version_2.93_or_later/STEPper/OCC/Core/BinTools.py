# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinTools module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_bintools.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BinTools.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinTools')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinTools')
    _BinTools = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinTools', [dirname(__file__)])
        except ImportError:
            import _BinTools
            return _BinTools
        try:
            _mod = imp.load_module('_BinTools', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinTools = swig_import_helper()
    del swig_import_helper
else:
    import _BinTools
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinTools.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BinTools.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BinTools.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BinTools.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BinTools.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BinTools.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BinTools.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BinTools.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BinTools.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BinTools.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BinTools.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BinTools.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BinTools.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BinTools.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BinTools.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BinTools.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BinTools.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BinTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BinTools.process_exception(error, method_name, class_name)
process_exception = _BinTools.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Geom2d
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom
class bintools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetBool(*args) -> "Standard_Boolean &":
        """
        :param IS:
        	:type IS: Standard_IStream
        	:param theValue:
        	:type theValue: bool
        	:rtype: Standard_IStream
        """
        return _BinTools.bintools_GetBool(*args)

    GetBool = staticmethod(GetBool)

    def GetExtChar(*args) -> "Standard_IStream &":
        """
        :param IS:
        	:type IS: Standard_IStream
        	:param theValue:
        	:type theValue: Standard_ExtCharacter
        	:rtype: Standard_IStream
        """
        return _BinTools.bintools_GetExtChar(*args)

    GetExtChar = staticmethod(GetExtChar)

    def GetInteger(*args) -> "Standard_Integer &":
        """
        :param IS:
        	:type IS: Standard_IStream
        	:param theValue:
        	:type theValue: int
        	:rtype: Standard_IStream
        """
        return _BinTools.bintools_GetInteger(*args)

    GetInteger = staticmethod(GetInteger)

    def GetReal(*args) -> "Standard_Real &":
        """
        :param IS:
        	:type IS: Standard_IStream
        	:param theValue:
        	:type theValue: float
        	:rtype: Standard_IStream
        """
        return _BinTools.bintools_GetReal(*args)

    GetReal = staticmethod(GetReal)

    def PutBool(*args) -> "Standard_OStream &":
        """
        :param OS:
        	:type OS: Standard_OStream
        	:param theValue:
        	:type theValue: bool
        	:rtype: Standard_OStream
        """
        return _BinTools.bintools_PutBool(*args)

    PutBool = staticmethod(PutBool)

    def PutExtChar(*args) -> "Standard_OStream &":
        """
        :param OS:
        	:type OS: Standard_OStream
        	:param theValue:
        	:type theValue: Standard_ExtCharacter
        	:rtype: Standard_OStream
        """
        return _BinTools.bintools_PutExtChar(*args)

    PutExtChar = staticmethod(PutExtChar)

    def PutInteger(*args) -> "Standard_OStream &":
        """
        :param OS:
        	:type OS: Standard_OStream
        	:param theValue:
        	:type theValue: int
        	:rtype: Standard_OStream
        """
        return _BinTools.bintools_PutInteger(*args)

    PutInteger = staticmethod(PutInteger)

    def PutReal(*args) -> "Standard_OStream &":
        """
        :param OS:
        	:type OS: Standard_OStream
        	:param theValue:
        	:type theValue: float
        	:rtype: Standard_OStream
        """
        return _BinTools.bintools_PutReal(*args)

    PutReal = staticmethod(PutReal)

    def Read(*args) -> "Standard_Boolean":
        """
        * Reads a shape from <theStream> and returns it in <theShape>.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theStream:
        	:type theStream: Standard_IStream
        	:rtype: void
        * Reads a shape from <theFile> and returns it in <theShape>.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theFile:
        	:type theFile: char *
        	:rtype: bool
        """
        return _BinTools.bintools_Read(*args)

    Read = staticmethod(Read)

    def Write(*args) -> "Standard_Boolean":
        """
        * Writes <theShape> on <theStream> in binary format.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theStream:
        	:type theStream: Standard_OStream
        	:rtype: void
        * Writes <theShape> in <theFile>.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theFile:
        	:type theFile: char *
        	:rtype: bool
        """
        return _BinTools.bintools_Write(*args)

    Write = staticmethod(Write)

    __repr__ = _dumps_object


    def __init__(self):
        _BinTools.bintools_swiginit(self, _BinTools.new_bintools())
    __swig_destroy__ = _BinTools.delete_bintools
bintools_swigregister = _BinTools.bintools_swigregister
bintools_swigregister(bintools)

def bintools_GetBool(*args) -> "Standard_Boolean &":
    """
    :param IS:
    	:type IS: Standard_IStream
    	:param theValue:
    	:type theValue: bool
    	:rtype: Standard_IStream
    """
    return _BinTools.bintools_GetBool(*args)

def bintools_GetExtChar(*args) -> "Standard_IStream &":
    """
    :param IS:
    	:type IS: Standard_IStream
    	:param theValue:
    	:type theValue: Standard_ExtCharacter
    	:rtype: Standard_IStream
    """
    return _BinTools.bintools_GetExtChar(*args)

def bintools_GetInteger(*args) -> "Standard_Integer &":
    """
    :param IS:
    	:type IS: Standard_IStream
    	:param theValue:
    	:type theValue: int
    	:rtype: Standard_IStream
    """
    return _BinTools.bintools_GetInteger(*args)

def bintools_GetReal(*args) -> "Standard_Real &":
    """
    :param IS:
    	:type IS: Standard_IStream
    	:param theValue:
    	:type theValue: float
    	:rtype: Standard_IStream
    """
    return _BinTools.bintools_GetReal(*args)

def bintools_PutBool(*args) -> "Standard_OStream &":
    """
    :param OS:
    	:type OS: Standard_OStream
    	:param theValue:
    	:type theValue: bool
    	:rtype: Standard_OStream
    """
    return _BinTools.bintools_PutBool(*args)

def bintools_PutExtChar(*args) -> "Standard_OStream &":
    """
    :param OS:
    	:type OS: Standard_OStream
    	:param theValue:
    	:type theValue: Standard_ExtCharacter
    	:rtype: Standard_OStream
    """
    return _BinTools.bintools_PutExtChar(*args)

def bintools_PutInteger(*args) -> "Standard_OStream &":
    """
    :param OS:
    	:type OS: Standard_OStream
    	:param theValue:
    	:type theValue: int
    	:rtype: Standard_OStream
    """
    return _BinTools.bintools_PutInteger(*args)

def bintools_PutReal(*args) -> "Standard_OStream &":
    """
    :param OS:
    	:type OS: Standard_OStream
    	:param theValue:
    	:type theValue: float
    	:rtype: Standard_OStream
    """
    return _BinTools.bintools_PutReal(*args)

def bintools_Read(*args) -> "Standard_Boolean":
    """
    * Reads a shape from <theStream> and returns it in <theShape>.
    	:param theShape:
    	:type theShape: TopoDS_Shape
    	:param theStream:
    	:type theStream: Standard_IStream
    	:rtype: void
    * Reads a shape from <theFile> and returns it in <theShape>.
    	:param theShape:
    	:type theShape: TopoDS_Shape
    	:param theFile:
    	:type theFile: char *
    	:rtype: bool
    """
    return _BinTools.bintools_Read(*args)

def bintools_Write(*args) -> "Standard_Boolean":
    """
    * Writes <theShape> on <theStream> in binary format.
    	:param theShape:
    	:type theShape: TopoDS_Shape
    	:param theStream:
    	:type theStream: Standard_OStream
    	:rtype: void
    * Writes <theShape> in <theFile>.
    	:param theShape:
    	:type theShape: TopoDS_Shape
    	:param theFile:
    	:type theFile: char *
    	:rtype: bool
    """
    return _BinTools.bintools_Write(*args)

class BinTools_Curve2dSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Standard_Integer":
        """
        * Incorporate a new Curve in the set and returns its index.
        	:param C:
        	:type C: Geom2d_Curve
        	:rtype: int
        """
        return _BinTools.BinTools_Curve2dSet_Add(self, *args)


    def __init__(self, *args):
        """
        * Returns an empty set of Curves.
        	:rtype: None
        """
        _BinTools.BinTools_Curve2dSet_swiginit(self, _BinTools.new_BinTools_Curve2dSet(*args))

    def Clear(self, *args) -> "void":
        """
        * Clears the content of the set.
        	:rtype: None
        """
        return _BinTools.BinTools_Curve2dSet_Clear(self, *args)


    def Curve2d(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        * Returns the Curve of index <I>.
        	:param I:
        	:type I: int
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _BinTools.BinTools_Curve2dSet_Curve2d(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index of <L>.
        	:param C:
        	:type C: Geom2d_Curve
        	:rtype: int
        """
        return _BinTools.BinTools_Curve2dSet_Index(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinTools_Curve2dSet self, std::string src)"""
        return _BinTools.BinTools_Curve2dSet_ReadFromString(self, src)


    def ReadCurve2d(*args) -> "Standard_IStream &":
        """
        * Reads the curve from the stream. The curve is assumed to have been written with the Write method.
        	:param IS:
        	:type IS: Standard_IStream
        	:param C:
        	:type C: Geom2d_Curve
        	:rtype: Standard_IStream
        """
        return _BinTools.BinTools_Curve2dSet_ReadCurve2d(*args)

    ReadCurve2d = staticmethod(ReadCurve2d)

    def WriteToString(self) -> "std::string":
        """WriteToString(BinTools_Curve2dSet self) -> std::string"""
        return _BinTools.BinTools_Curve2dSet_WriteToString(self)


    def WriteCurve2d(*args) -> "void":
        """
        * Dumps the curve on the binary stream, that can be read back.
        	:param C:
        	:type C: Geom2d_Curve
        	:param OS:
        	:type OS: Standard_OStream
        	:rtype: void
        """
        return _BinTools.BinTools_Curve2dSet_WriteCurve2d(*args)

    WriteCurve2d = staticmethod(WriteCurve2d)

    __repr__ = _dumps_object

    __swig_destroy__ = _BinTools.delete_BinTools_Curve2dSet
BinTools_Curve2dSet.Add = new_instancemethod(_BinTools.BinTools_Curve2dSet_Add, None, BinTools_Curve2dSet)
BinTools_Curve2dSet.Clear = new_instancemethod(_BinTools.BinTools_Curve2dSet_Clear, None, BinTools_Curve2dSet)
BinTools_Curve2dSet.Curve2d = new_instancemethod(_BinTools.BinTools_Curve2dSet_Curve2d, None, BinTools_Curve2dSet)
BinTools_Curve2dSet.Index = new_instancemethod(_BinTools.BinTools_Curve2dSet_Index, None, BinTools_Curve2dSet)
BinTools_Curve2dSet.ReadFromString = new_instancemethod(_BinTools.BinTools_Curve2dSet_ReadFromString, None, BinTools_Curve2dSet)
BinTools_Curve2dSet.WriteToString = new_instancemethod(_BinTools.BinTools_Curve2dSet_WriteToString, None, BinTools_Curve2dSet)
BinTools_Curve2dSet_swigregister = _BinTools.BinTools_Curve2dSet_swigregister
BinTools_Curve2dSet_swigregister(BinTools_Curve2dSet)

def BinTools_Curve2dSet_ReadCurve2d(*args) -> "Standard_IStream &":
    """
    * Reads the curve from the stream. The curve is assumed to have been written with the Write method.
    	:param IS:
    	:type IS: Standard_IStream
    	:param C:
    	:type C: Geom2d_Curve
    	:rtype: Standard_IStream
    """
    return _BinTools.BinTools_Curve2dSet_ReadCurve2d(*args)

def BinTools_Curve2dSet_WriteCurve2d(*args) -> "void":
    """
    * Dumps the curve on the binary stream, that can be read back.
    	:param C:
    	:type C: Geom2d_Curve
    	:param OS:
    	:type OS: Standard_OStream
    	:rtype: void
    """
    return _BinTools.BinTools_Curve2dSet_WriteCurve2d(*args)

class BinTools_CurveSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Standard_Integer":
        """
        * Incorporate a new Curve in the set and returns its index.
        	:param C:
        	:type C: Geom_Curve
        	:rtype: int
        """
        return _BinTools.BinTools_CurveSet_Add(self, *args)


    def __init__(self, *args):
        """
        * Returns an empty set of Curves.
        	:rtype: None
        """
        _BinTools.BinTools_CurveSet_swiginit(self, _BinTools.new_BinTools_CurveSet(*args))

    def Clear(self, *args) -> "void":
        """
        * Clears the content of the set.
        	:rtype: None
        """
        return _BinTools.BinTools_CurveSet_Clear(self, *args)


    def Curve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        * Returns the Curve of index <I>.
        	:param I:
        	:type I: int
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _BinTools.BinTools_CurveSet_Curve(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index of <L>.
        	:param C:
        	:type C: Geom_Curve
        	:rtype: int
        """
        return _BinTools.BinTools_CurveSet_Index(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinTools_CurveSet self, std::string src)"""
        return _BinTools.BinTools_CurveSet_ReadFromString(self, src)


    def ReadCurve(*args) -> "Standard_IStream &":
        """
        * Reads the curve from the stream. The curve is assumed to have been written with the Write method
        	:param IS:
        	:type IS: Standard_IStream
        	:param C:
        	:type C: Geom_Curve
        	:rtype: Standard_IStream
        """
        return _BinTools.BinTools_CurveSet_ReadCurve(*args)

    ReadCurve = staticmethod(ReadCurve)

    def WriteToString(self) -> "std::string":
        """WriteToString(BinTools_CurveSet self) -> std::string"""
        return _BinTools.BinTools_CurveSet_WriteToString(self)


    def WriteCurve(*args) -> "void":
        """
        * Dumps the curve on the stream in binary format that can be read back.
        	:param C:
        	:type C: Geom_Curve
        	:param OS:
        	:type OS: Standard_OStream
        	:rtype: void
        """
        return _BinTools.BinTools_CurveSet_WriteCurve(*args)

    WriteCurve = staticmethod(WriteCurve)

    __repr__ = _dumps_object

    __swig_destroy__ = _BinTools.delete_BinTools_CurveSet
BinTools_CurveSet.Add = new_instancemethod(_BinTools.BinTools_CurveSet_Add, None, BinTools_CurveSet)
BinTools_CurveSet.Clear = new_instancemethod(_BinTools.BinTools_CurveSet_Clear, None, BinTools_CurveSet)
BinTools_CurveSet.Curve = new_instancemethod(_BinTools.BinTools_CurveSet_Curve, None, BinTools_CurveSet)
BinTools_CurveSet.Index = new_instancemethod(_BinTools.BinTools_CurveSet_Index, None, BinTools_CurveSet)
BinTools_CurveSet.ReadFromString = new_instancemethod(_BinTools.BinTools_CurveSet_ReadFromString, None, BinTools_CurveSet)
BinTools_CurveSet.WriteToString = new_instancemethod(_BinTools.BinTools_CurveSet_WriteToString, None, BinTools_CurveSet)
BinTools_CurveSet_swigregister = _BinTools.BinTools_CurveSet_swigregister
BinTools_CurveSet_swigregister(BinTools_CurveSet)

def BinTools_CurveSet_ReadCurve(*args) -> "Standard_IStream &":
    """
    * Reads the curve from the stream. The curve is assumed to have been written with the Write method
    	:param IS:
    	:type IS: Standard_IStream
    	:param C:
    	:type C: Geom_Curve
    	:rtype: Standard_IStream
    """
    return _BinTools.BinTools_CurveSet_ReadCurve(*args)

def BinTools_CurveSet_WriteCurve(*args) -> "void":
    """
    * Dumps the curve on the stream in binary format that can be read back.
    	:param C:
    	:type C: Geom_Curve
    	:param OS:
    	:type OS: Standard_OStream
    	:rtype: void
    """
    return _BinTools.BinTools_CurveSet_WriteCurve(*args)

class BinTools_LocationSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Standard_Integer":
        """
        * Incorporate a new Location in the set and returns its index.
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: int
        """
        return _BinTools.BinTools_LocationSet_Add(self, *args)


    def __init__(self, *args):
        """
        * Returns an empty set of locations.
        	:rtype: None
        """
        _BinTools.BinTools_LocationSet_swiginit(self, _BinTools.new_BinTools_LocationSet(*args))

    def Clear(self, *args) -> "void":
        """
        * Clears the content of the set.
        	:rtype: None
        """
        return _BinTools.BinTools_LocationSet_Clear(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index of <L>.
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: int
        """
        return _BinTools.BinTools_LocationSet_Index(self, *args)


    def Location(self, *args) -> "TopLoc_Location const &":
        """
        * Returns the location of index <I>.
        	:param I:
        	:type I: int
        	:rtype: TopLoc_Location
        """
        return _BinTools.BinTools_LocationSet_Location(self, *args)


    def NbLocations(self, *args) -> "Standard_Integer":
        """
        * Returns number of locations.
        	:rtype: int
        """
        return _BinTools.BinTools_LocationSet_NbLocations(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinTools_LocationSet self, std::string src)"""
        return _BinTools.BinTools_LocationSet_ReadFromString(self, src)


    def WriteToString(self) -> "std::string":
        """WriteToString(BinTools_LocationSet self) -> std::string"""
        return _BinTools.BinTools_LocationSet_WriteToString(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTools.delete_BinTools_LocationSet
BinTools_LocationSet.Add = new_instancemethod(_BinTools.BinTools_LocationSet_Add, None, BinTools_LocationSet)
BinTools_LocationSet.Clear = new_instancemethod(_BinTools.BinTools_LocationSet_Clear, None, BinTools_LocationSet)
BinTools_LocationSet.Index = new_instancemethod(_BinTools.BinTools_LocationSet_Index, None, BinTools_LocationSet)
BinTools_LocationSet.Location = new_instancemethod(_BinTools.BinTools_LocationSet_Location, None, BinTools_LocationSet)
BinTools_LocationSet.NbLocations = new_instancemethod(_BinTools.BinTools_LocationSet_NbLocations, None, BinTools_LocationSet)
BinTools_LocationSet.ReadFromString = new_instancemethod(_BinTools.BinTools_LocationSet_ReadFromString, None, BinTools_LocationSet)
BinTools_LocationSet.WriteToString = new_instancemethod(_BinTools.BinTools_LocationSet_WriteToString, None, BinTools_LocationSet)
BinTools_LocationSet_swigregister = _BinTools.BinTools_LocationSet_swigregister
BinTools_LocationSet_swigregister(BinTools_LocationSet)

class BinTools_ShapeSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Standard_Integer":
        """
        * Stores <S> and its sub-shape. Returns the index of <S>. The method AddGeometry is called on each sub-shape.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: int
        """
        return _BinTools.BinTools_ShapeSet_Add(self, *args)


    def AddGeometry(self, *args) -> "void":
        """
        * Stores the goemetry of <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: void
        """
        return _BinTools.BinTools_ShapeSet_AddGeometry(self, *args)


    def AddShapes(self, *args) -> "void":
        """
        * Inserts the shape <S2> in the shape <S1>.
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: void
        """
        return _BinTools.BinTools_ShapeSet_AddShapes(self, *args)


    def __init__(self, *args):
        """
        * Builds an empty ShapeSet. Parameter <isWithTriangles> is added for XML Persistence
        	:param isWithTriangles: default value is Standard_False
        	:type isWithTriangles: bool
        	:rtype: None
        """
        _BinTools.BinTools_ShapeSet_swiginit(self, _BinTools.new_BinTools_ShapeSet(*args))

    def ChangeLocations(self, *args) -> "BinTools_LocationSet &":
        """:rtype: BinTools_LocationSet"""
        return _BinTools.BinTools_ShapeSet_ChangeLocations(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears the content of the set.
        	:rtype: void
        """
        return _BinTools.BinTools_ShapeSet_Clear(self, *args)


    def FormatNb(self, *args) -> "Standard_Integer":
        """
        * two formats available for the moment: First: does not write CurveOnSurface UV Points into the file on reading calls Check() method. Second: stores CurveOnSurface UV Points. On reading format is recognized from Version string.
        	:rtype: int
        """
        return _BinTools.BinTools_ShapeSet_FormatNb(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index of <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: int
        """
        return _BinTools.BinTools_ShapeSet_Index(self, *args)


    def IsWithTriangles(self, *args) -> "Standard_Boolean":
        """
        * Return true if shape should be stored with triangles.
        	:rtype: bool
        """
        return _BinTools.BinTools_ShapeSet_IsWithTriangles(self, *args)


    def Locations(self, *args) -> "BinTools_LocationSet const &":
        """:rtype: BinTools_LocationSet"""
        return _BinTools.BinTools_ShapeSet_Locations(self, *args)


    def NbShapes(self, *args) -> "Standard_Integer":
        """
        * Returns number of shapes read from file.
        	:rtype: int
        """
        return _BinTools.BinTools_ShapeSet_NbShapes(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinTools_ShapeSet self, std::string src)"""
        return _BinTools.BinTools_ShapeSet_ReadFromString(self, src)


    def Read(self, *args) -> "void":
        """
        * Reads from <IS> a shape and returns it in S. <NbShapes> is the number of tshapes in the set.
        	:param S:
        	:type S: TopoDS_Shape
        	:param IS:
        	:type IS: Standard_IStream
        	:param NbShapes:
        	:type NbShapes: int
        	:rtype: void
        """
        return _BinTools.BinTools_ShapeSet_Read(self, *args)


    def ReadGeometryFromString(self, src: 'std::string') -> "void":
        """ReadGeometryFromString(BinTools_ShapeSet self, std::string src)"""
        return _BinTools.BinTools_ShapeSet_ReadGeometryFromString(self, src)


    def ReadGeometry(self, *args) -> "void":
        """
        * Reads the geometry of a shape of type <T> from the stream <IS> and returns it in <S>.
        	:param T:
        	:type T: TopAbs_ShapeEnum
        	:param IS:
        	:type IS: Standard_IStream
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: void
        """
        return _BinTools.BinTools_ShapeSet_ReadGeometry(self, *args)


    def ReadPolygon3DFromString(self, src: 'std::string') -> "void":
        """ReadPolygon3DFromString(BinTools_ShapeSet self, std::string src)"""
        return _BinTools.BinTools_ShapeSet_ReadPolygon3DFromString(self, src)


    def ReadPolygonOnTriangulationFromString(self, src: 'std::string') -> "void":
        """ReadPolygonOnTriangulationFromString(BinTools_ShapeSet self, std::string src)"""
        return _BinTools.BinTools_ShapeSet_ReadPolygonOnTriangulationFromString(self, src)


    def ReadTriangulationFromString(self, src: 'std::string') -> "void":
        """ReadTriangulationFromString(BinTools_ShapeSet self, std::string src)"""
        return _BinTools.BinTools_ShapeSet_ReadTriangulationFromString(self, src)


    def SetFormatNb(self, *args) -> "void":
        """
        :param theFormatNb:
        	:type theFormatNb: int
        	:rtype: None
        """
        return _BinTools.BinTools_ShapeSet_SetFormatNb(self, *args)


    def SetWithTriangles(self, *args) -> "void":
        """
        * Define if shape will be stored with triangles. Ignored (always written) if face defines only triangulation (no surface).
        	:param isWithTriangles:
        	:type isWithTriangles: bool
        	:rtype: None
        """
        return _BinTools.BinTools_ShapeSet_SetWithTriangles(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the sub-shape of index <I>.
        	:param I:
        	:type I: int
        	:rtype: TopoDS_Shape
        """
        return _BinTools.BinTools_ShapeSet_Shape(self, *args)


    def WriteToString(self) -> "std::string":
        """WriteToString(BinTools_ShapeSet self) -> std::string"""
        return _BinTools.BinTools_ShapeSet_WriteToString(self)


    def Write(self, *args) -> "void":
        """
        * Writes on <OS> the shape <S>. Writes the orientation, the index of the TShape and the index of the Location.
        	:param S:
        	:type S: TopoDS_Shape
        	:param OS:
        	:type OS: Standard_OStream
        	:rtype: void
        """
        return _BinTools.BinTools_ShapeSet_Write(self, *args)


    def WriteGeometryToString(self) -> "std::string":
        """WriteGeometryToString(BinTools_ShapeSet self) -> std::string"""
        return _BinTools.BinTools_ShapeSet_WriteGeometryToString(self)


    def WriteGeometry(self, *args) -> "void":
        """
        * Writes the geometry of <S> on the stream <OS> in a binary format that can be read back by Read.
        	:param S:
        	:type S: TopoDS_Shape
        	:param OS:
        	:type OS: Standard_OStream
        	:rtype: void
        """
        return _BinTools.BinTools_ShapeSet_WriteGeometry(self, *args)


    def WritePolygon3DToString(self) -> "std::string":
        """WritePolygon3DToString(BinTools_ShapeSet self) -> std::string"""
        return _BinTools.BinTools_ShapeSet_WritePolygon3DToString(self)


    def WritePolygonOnTriangulationToString(self) -> "std::string":
        """WritePolygonOnTriangulationToString(BinTools_ShapeSet self) -> std::string"""
        return _BinTools.BinTools_ShapeSet_WritePolygonOnTriangulationToString(self)


    def WriteTriangulationToString(self) -> "std::string":
        """WriteTriangulationToString(BinTools_ShapeSet self) -> std::string"""
        return _BinTools.BinTools_ShapeSet_WriteTriangulationToString(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTools.delete_BinTools_ShapeSet
BinTools_ShapeSet.Add = new_instancemethod(_BinTools.BinTools_ShapeSet_Add, None, BinTools_ShapeSet)
BinTools_ShapeSet.AddGeometry = new_instancemethod(_BinTools.BinTools_ShapeSet_AddGeometry, None, BinTools_ShapeSet)
BinTools_ShapeSet.AddShapes = new_instancemethod(_BinTools.BinTools_ShapeSet_AddShapes, None, BinTools_ShapeSet)
BinTools_ShapeSet.ChangeLocations = new_instancemethod(_BinTools.BinTools_ShapeSet_ChangeLocations, None, BinTools_ShapeSet)
BinTools_ShapeSet.Clear = new_instancemethod(_BinTools.BinTools_ShapeSet_Clear, None, BinTools_ShapeSet)
BinTools_ShapeSet.FormatNb = new_instancemethod(_BinTools.BinTools_ShapeSet_FormatNb, None, BinTools_ShapeSet)
BinTools_ShapeSet.Index = new_instancemethod(_BinTools.BinTools_ShapeSet_Index, None, BinTools_ShapeSet)
BinTools_ShapeSet.IsWithTriangles = new_instancemethod(_BinTools.BinTools_ShapeSet_IsWithTriangles, None, BinTools_ShapeSet)
BinTools_ShapeSet.Locations = new_instancemethod(_BinTools.BinTools_ShapeSet_Locations, None, BinTools_ShapeSet)
BinTools_ShapeSet.NbShapes = new_instancemethod(_BinTools.BinTools_ShapeSet_NbShapes, None, BinTools_ShapeSet)
BinTools_ShapeSet.ReadFromString = new_instancemethod(_BinTools.BinTools_ShapeSet_ReadFromString, None, BinTools_ShapeSet)
BinTools_ShapeSet.Read = new_instancemethod(_BinTools.BinTools_ShapeSet_Read, None, BinTools_ShapeSet)
BinTools_ShapeSet.ReadGeometryFromString = new_instancemethod(_BinTools.BinTools_ShapeSet_ReadGeometryFromString, None, BinTools_ShapeSet)
BinTools_ShapeSet.ReadGeometry = new_instancemethod(_BinTools.BinTools_ShapeSet_ReadGeometry, None, BinTools_ShapeSet)
BinTools_ShapeSet.ReadPolygon3DFromString = new_instancemethod(_BinTools.BinTools_ShapeSet_ReadPolygon3DFromString, None, BinTools_ShapeSet)
BinTools_ShapeSet.ReadPolygonOnTriangulationFromString = new_instancemethod(_BinTools.BinTools_ShapeSet_ReadPolygonOnTriangulationFromString, None, BinTools_ShapeSet)
BinTools_ShapeSet.ReadTriangulationFromString = new_instancemethod(_BinTools.BinTools_ShapeSet_ReadTriangulationFromString, None, BinTools_ShapeSet)
BinTools_ShapeSet.SetFormatNb = new_instancemethod(_BinTools.BinTools_ShapeSet_SetFormatNb, None, BinTools_ShapeSet)
BinTools_ShapeSet.SetWithTriangles = new_instancemethod(_BinTools.BinTools_ShapeSet_SetWithTriangles, None, BinTools_ShapeSet)
BinTools_ShapeSet.Shape = new_instancemethod(_BinTools.BinTools_ShapeSet_Shape, None, BinTools_ShapeSet)
BinTools_ShapeSet.WriteToString = new_instancemethod(_BinTools.BinTools_ShapeSet_WriteToString, None, BinTools_ShapeSet)
BinTools_ShapeSet.Write = new_instancemethod(_BinTools.BinTools_ShapeSet_Write, None, BinTools_ShapeSet)
BinTools_ShapeSet.WriteGeometryToString = new_instancemethod(_BinTools.BinTools_ShapeSet_WriteGeometryToString, None, BinTools_ShapeSet)
BinTools_ShapeSet.WriteGeometry = new_instancemethod(_BinTools.BinTools_ShapeSet_WriteGeometry, None, BinTools_ShapeSet)
BinTools_ShapeSet.WritePolygon3DToString = new_instancemethod(_BinTools.BinTools_ShapeSet_WritePolygon3DToString, None, BinTools_ShapeSet)
BinTools_ShapeSet.WritePolygonOnTriangulationToString = new_instancemethod(_BinTools.BinTools_ShapeSet_WritePolygonOnTriangulationToString, None, BinTools_ShapeSet)
BinTools_ShapeSet.WriteTriangulationToString = new_instancemethod(_BinTools.BinTools_ShapeSet_WriteTriangulationToString, None, BinTools_ShapeSet)
BinTools_ShapeSet_swigregister = _BinTools.BinTools_ShapeSet_swigregister
BinTools_ShapeSet_swigregister(BinTools_ShapeSet)

class BinTools_SurfaceSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Standard_Integer":
        """
        * Incorporate a new Surface in the set and returns its index.
        	:param S:
        	:type S: Geom_Surface
        	:rtype: int
        """
        return _BinTools.BinTools_SurfaceSet_Add(self, *args)


    def __init__(self, *args):
        """
        * Returns an empty set of Surfaces.
        	:rtype: None
        """
        _BinTools.BinTools_SurfaceSet_swiginit(self, _BinTools.new_BinTools_SurfaceSet(*args))

    def Clear(self, *args) -> "void":
        """
        * Clears the content of the set.
        	:rtype: None
        """
        return _BinTools.BinTools_SurfaceSet_Clear(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index of <L>.
        	:param S:
        	:type S: Geom_Surface
        	:rtype: int
        """
        return _BinTools.BinTools_SurfaceSet_Index(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinTools_SurfaceSet self, std::string src)"""
        return _BinTools.BinTools_SurfaceSet_ReadFromString(self, src)


    def ReadSurface(*args) -> "Standard_IStream &":
        """
        * Reads the surface from the stream. The surface is assumed to have been written with the Write method.
        	:param IS:
        	:type IS: Standard_IStream
        	:param S:
        	:type S: Geom_Surface
        	:rtype: Standard_IStream
        """
        return _BinTools.BinTools_SurfaceSet_ReadSurface(*args)

    ReadSurface = staticmethod(ReadSurface)

    def Surface(self, *args) -> "opencascade::handle< Geom_Surface >":
        """
        * Returns the Surface of index <I>.
        	:param I:
        	:type I: int
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _BinTools.BinTools_SurfaceSet_Surface(self, *args)


    def WriteToString(self) -> "std::string":
        """WriteToString(BinTools_SurfaceSet self) -> std::string"""
        return _BinTools.BinTools_SurfaceSet_WriteToString(self)


    def WriteSurface(*args) -> "void":
        """
        * Dumps the surface on the stream in binary format that can be read back.
        	:param S:
        	:type S: Geom_Surface
        	:param OS:
        	:type OS: Standard_OStream
        	:rtype: void
        """
        return _BinTools.BinTools_SurfaceSet_WriteSurface(*args)

    WriteSurface = staticmethod(WriteSurface)

    __repr__ = _dumps_object

    __swig_destroy__ = _BinTools.delete_BinTools_SurfaceSet
BinTools_SurfaceSet.Add = new_instancemethod(_BinTools.BinTools_SurfaceSet_Add, None, BinTools_SurfaceSet)
BinTools_SurfaceSet.Clear = new_instancemethod(_BinTools.BinTools_SurfaceSet_Clear, None, BinTools_SurfaceSet)
BinTools_SurfaceSet.Index = new_instancemethod(_BinTools.BinTools_SurfaceSet_Index, None, BinTools_SurfaceSet)
BinTools_SurfaceSet.ReadFromString = new_instancemethod(_BinTools.BinTools_SurfaceSet_ReadFromString, None, BinTools_SurfaceSet)
BinTools_SurfaceSet.Surface = new_instancemethod(_BinTools.BinTools_SurfaceSet_Surface, None, BinTools_SurfaceSet)
BinTools_SurfaceSet.WriteToString = new_instancemethod(_BinTools.BinTools_SurfaceSet_WriteToString, None, BinTools_SurfaceSet)
BinTools_SurfaceSet_swigregister = _BinTools.BinTools_SurfaceSet_swigregister
BinTools_SurfaceSet_swigregister(BinTools_SurfaceSet)

def BinTools_SurfaceSet_ReadSurface(*args) -> "Standard_IStream &":
    """
    * Reads the surface from the stream. The surface is assumed to have been written with the Write method.
    	:param IS:
    	:type IS: Standard_IStream
    	:param S:
    	:type S: Geom_Surface
    	:rtype: Standard_IStream
    """
    return _BinTools.BinTools_SurfaceSet_ReadSurface(*args)

def BinTools_SurfaceSet_WriteSurface(*args) -> "void":
    """
    * Dumps the surface on the stream in binary format that can be read back.
    	:param S:
    	:type S: Geom_Surface
    	:param OS:
    	:type OS: Standard_OStream
    	:rtype: void
    """
    return _BinTools.BinTools_SurfaceSet_WriteSurface(*args)



