# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
CDM module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_cdm.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _CDM.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CDM')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CDM')
    _CDM = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CDM', [dirname(__file__)])
        except ImportError:
            import _CDM
            return _CDM
        try:
            _mod = imp.load_module('_CDM', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CDM = swig_import_helper()
    del swig_import_helper
else:
    import _CDM
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CDM.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_CDM.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_CDM.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_CDM.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_CDM.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_CDM.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_CDM.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_CDM.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_CDM.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_CDM.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_CDM.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_CDM.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_CDM.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_CDM.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_CDM.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_CDM.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_CDM.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _CDM.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _CDM.process_exception(error, method_name, class_name)
process_exception = _CDM.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.Resource
CDM_CCS_OK = _CDM.CDM_CCS_OK
CDM_CCS_NotOpen = _CDM.CDM_CCS_NotOpen
CDM_CCS_UnstoredReferenced = _CDM.CDM_CCS_UnstoredReferenced
CDM_CCS_ModifiedReferenced = _CDM.CDM_CCS_ModifiedReferenced
CDM_CCS_ReferenceRejection = _CDM.CDM_CCS_ReferenceRejection

def Handle_CDM_Application_Create() -> "opencascade::handle< CDM_Application >":
    return _CDM.Handle_CDM_Application_Create()
Handle_CDM_Application_Create = _CDM.Handle_CDM_Application_Create

def Handle_CDM_Application_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< CDM_Application >":
    return _CDM.Handle_CDM_Application_DownCast(t)
Handle_CDM_Application_DownCast = _CDM.Handle_CDM_Application_DownCast

def Handle_CDM_Application_IsNull(t: 'opencascade::handle< CDM_Application > const &') -> "bool":
    return _CDM.Handle_CDM_Application_IsNull(t)
Handle_CDM_Application_IsNull = _CDM.Handle_CDM_Application_IsNull

def Handle_CDM_Document_Create() -> "opencascade::handle< CDM_Document >":
    return _CDM.Handle_CDM_Document_Create()
Handle_CDM_Document_Create = _CDM.Handle_CDM_Document_Create

def Handle_CDM_Document_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< CDM_Document >":
    return _CDM.Handle_CDM_Document_DownCast(t)
Handle_CDM_Document_DownCast = _CDM.Handle_CDM_Document_DownCast

def Handle_CDM_Document_IsNull(t: 'opencascade::handle< CDM_Document > const &') -> "bool":
    return _CDM.Handle_CDM_Document_IsNull(t)
Handle_CDM_Document_IsNull = _CDM.Handle_CDM_Document_IsNull

def Handle_CDM_MetaData_Create() -> "opencascade::handle< CDM_MetaData >":
    return _CDM.Handle_CDM_MetaData_Create()
Handle_CDM_MetaData_Create = _CDM.Handle_CDM_MetaData_Create

def Handle_CDM_MetaData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< CDM_MetaData >":
    return _CDM.Handle_CDM_MetaData_DownCast(t)
Handle_CDM_MetaData_DownCast = _CDM.Handle_CDM_MetaData_DownCast

def Handle_CDM_MetaData_IsNull(t: 'opencascade::handle< CDM_MetaData > const &') -> "bool":
    return _CDM.Handle_CDM_MetaData_IsNull(t)
Handle_CDM_MetaData_IsNull = _CDM.Handle_CDM_MetaData_IsNull

def Handle_CDM_Reference_Create() -> "opencascade::handle< CDM_Reference >":
    return _CDM.Handle_CDM_Reference_Create()
Handle_CDM_Reference_Create = _CDM.Handle_CDM_Reference_Create

def Handle_CDM_Reference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< CDM_Reference >":
    return _CDM.Handle_CDM_Reference_DownCast(t)
Handle_CDM_Reference_DownCast = _CDM.Handle_CDM_Reference_DownCast

def Handle_CDM_Reference_IsNull(t: 'opencascade::handle< CDM_Reference > const &') -> "bool":
    return _CDM.Handle_CDM_Reference_IsNull(t)
Handle_CDM_Reference_IsNull = _CDM.Handle_CDM_Reference_IsNull
class CDM_ListOfReferences(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CDM.CDM_ListOfReferences_swiginit(self, _CDM.new_CDM_ListOfReferences(*args))
    __swig_destroy__ = _CDM.delete_CDM_ListOfReferences
CDM_ListOfReferences.begin = new_instancemethod(_CDM.CDM_ListOfReferences_begin, None, CDM_ListOfReferences)
CDM_ListOfReferences.end = new_instancemethod(_CDM.CDM_ListOfReferences_end, None, CDM_ListOfReferences)
CDM_ListOfReferences.cbegin = new_instancemethod(_CDM.CDM_ListOfReferences_cbegin, None, CDM_ListOfReferences)
CDM_ListOfReferences.cend = new_instancemethod(_CDM.CDM_ListOfReferences_cend, None, CDM_ListOfReferences)
CDM_ListOfReferences.Size = new_instancemethod(_CDM.CDM_ListOfReferences_Size, None, CDM_ListOfReferences)
CDM_ListOfReferences.Assign = new_instancemethod(_CDM.CDM_ListOfReferences_Assign, None, CDM_ListOfReferences)
CDM_ListOfReferences.Set = new_instancemethod(_CDM.CDM_ListOfReferences_Set, None, CDM_ListOfReferences)
CDM_ListOfReferences.Clear = new_instancemethod(_CDM.CDM_ListOfReferences_Clear, None, CDM_ListOfReferences)
CDM_ListOfReferences.First = new_instancemethod(_CDM.CDM_ListOfReferences_First, None, CDM_ListOfReferences)
CDM_ListOfReferences.Last = new_instancemethod(_CDM.CDM_ListOfReferences_Last, None, CDM_ListOfReferences)
CDM_ListOfReferences.Append = new_instancemethod(_CDM.CDM_ListOfReferences_Append, None, CDM_ListOfReferences)
CDM_ListOfReferences.Prepend = new_instancemethod(_CDM.CDM_ListOfReferences_Prepend, None, CDM_ListOfReferences)
CDM_ListOfReferences.RemoveFirst = new_instancemethod(_CDM.CDM_ListOfReferences_RemoveFirst, None, CDM_ListOfReferences)
CDM_ListOfReferences.Remove = new_instancemethod(_CDM.CDM_ListOfReferences_Remove, None, CDM_ListOfReferences)
CDM_ListOfReferences.InsertBefore = new_instancemethod(_CDM.CDM_ListOfReferences_InsertBefore, None, CDM_ListOfReferences)
CDM_ListOfReferences.InsertAfter = new_instancemethod(_CDM.CDM_ListOfReferences_InsertAfter, None, CDM_ListOfReferences)
CDM_ListOfReferences.Reverse = new_instancemethod(_CDM.CDM_ListOfReferences_Reverse, None, CDM_ListOfReferences)
CDM_ListOfReferences_swigregister = _CDM.CDM_ListOfReferences_swigregister
CDM_ListOfReferences_swigregister(CDM_ListOfReferences)

class CDM_ListIteratorOfListOfReferences(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CDM.CDM_ListIteratorOfListOfReferences_swiginit(self, _CDM.new_CDM_ListIteratorOfListOfReferences(*args))
    __swig_destroy__ = _CDM.delete_CDM_ListIteratorOfListOfReferences
CDM_ListIteratorOfListOfReferences.More = new_instancemethod(_CDM.CDM_ListIteratorOfListOfReferences_More, None, CDM_ListIteratorOfListOfReferences)
CDM_ListIteratorOfListOfReferences.Next = new_instancemethod(_CDM.CDM_ListIteratorOfListOfReferences_Next, None, CDM_ListIteratorOfListOfReferences)
CDM_ListIteratorOfListOfReferences.Value = new_instancemethod(_CDM.CDM_ListIteratorOfListOfReferences_Value, None, CDM_ListIteratorOfListOfReferences)
CDM_ListIteratorOfListOfReferences.ChangeValue = new_instancemethod(_CDM.CDM_ListIteratorOfListOfReferences_ChangeValue, None, CDM_ListIteratorOfListOfReferences)
CDM_ListIteratorOfListOfReferences_swigregister = _CDM.CDM_ListIteratorOfListOfReferences_swigregister
CDM_ListIteratorOfListOfReferences_swigregister(CDM_ListIteratorOfListOfReferences)

class CDM_ListOfDocument(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CDM.CDM_ListOfDocument_swiginit(self, _CDM.new_CDM_ListOfDocument(*args))
    __swig_destroy__ = _CDM.delete_CDM_ListOfDocument
CDM_ListOfDocument.begin = new_instancemethod(_CDM.CDM_ListOfDocument_begin, None, CDM_ListOfDocument)
CDM_ListOfDocument.end = new_instancemethod(_CDM.CDM_ListOfDocument_end, None, CDM_ListOfDocument)
CDM_ListOfDocument.cbegin = new_instancemethod(_CDM.CDM_ListOfDocument_cbegin, None, CDM_ListOfDocument)
CDM_ListOfDocument.cend = new_instancemethod(_CDM.CDM_ListOfDocument_cend, None, CDM_ListOfDocument)
CDM_ListOfDocument.Size = new_instancemethod(_CDM.CDM_ListOfDocument_Size, None, CDM_ListOfDocument)
CDM_ListOfDocument.Assign = new_instancemethod(_CDM.CDM_ListOfDocument_Assign, None, CDM_ListOfDocument)
CDM_ListOfDocument.Set = new_instancemethod(_CDM.CDM_ListOfDocument_Set, None, CDM_ListOfDocument)
CDM_ListOfDocument.Clear = new_instancemethod(_CDM.CDM_ListOfDocument_Clear, None, CDM_ListOfDocument)
CDM_ListOfDocument.First = new_instancemethod(_CDM.CDM_ListOfDocument_First, None, CDM_ListOfDocument)
CDM_ListOfDocument.Last = new_instancemethod(_CDM.CDM_ListOfDocument_Last, None, CDM_ListOfDocument)
CDM_ListOfDocument.Append = new_instancemethod(_CDM.CDM_ListOfDocument_Append, None, CDM_ListOfDocument)
CDM_ListOfDocument.Prepend = new_instancemethod(_CDM.CDM_ListOfDocument_Prepend, None, CDM_ListOfDocument)
CDM_ListOfDocument.RemoveFirst = new_instancemethod(_CDM.CDM_ListOfDocument_RemoveFirst, None, CDM_ListOfDocument)
CDM_ListOfDocument.Remove = new_instancemethod(_CDM.CDM_ListOfDocument_Remove, None, CDM_ListOfDocument)
CDM_ListOfDocument.InsertBefore = new_instancemethod(_CDM.CDM_ListOfDocument_InsertBefore, None, CDM_ListOfDocument)
CDM_ListOfDocument.InsertAfter = new_instancemethod(_CDM.CDM_ListOfDocument_InsertAfter, None, CDM_ListOfDocument)
CDM_ListOfDocument.Reverse = new_instancemethod(_CDM.CDM_ListOfDocument_Reverse, None, CDM_ListOfDocument)
CDM_ListOfDocument_swigregister = _CDM.CDM_ListOfDocument_swigregister
CDM_ListOfDocument_swigregister(CDM_ListOfDocument)

class CDM_ListIteratorOfListOfDocument(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CDM.CDM_ListIteratorOfListOfDocument_swiginit(self, _CDM.new_CDM_ListIteratorOfListOfDocument(*args))
    __swig_destroy__ = _CDM.delete_CDM_ListIteratorOfListOfDocument
CDM_ListIteratorOfListOfDocument.More = new_instancemethod(_CDM.CDM_ListIteratorOfListOfDocument_More, None, CDM_ListIteratorOfListOfDocument)
CDM_ListIteratorOfListOfDocument.Next = new_instancemethod(_CDM.CDM_ListIteratorOfListOfDocument_Next, None, CDM_ListIteratorOfListOfDocument)
CDM_ListIteratorOfListOfDocument.Value = new_instancemethod(_CDM.CDM_ListIteratorOfListOfDocument_Value, None, CDM_ListIteratorOfListOfDocument)
CDM_ListIteratorOfListOfDocument.ChangeValue = new_instancemethod(_CDM.CDM_ListIteratorOfListOfDocument_ChangeValue, None, CDM_ListIteratorOfListOfDocument)
CDM_ListIteratorOfListOfDocument_swigregister = _CDM.CDM_ListIteratorOfListOfDocument_swigregister
CDM_ListIteratorOfListOfDocument_swigregister(CDM_ListIteratorOfListOfDocument)

class CDM_PresentationDirectory(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CDM.CDM_PresentationDirectory_swiginit(self, _CDM.new_CDM_PresentationDirectory(*args))
    __swig_destroy__ = _CDM.delete_CDM_PresentationDirectory
CDM_PresentationDirectory.begin = new_instancemethod(_CDM.CDM_PresentationDirectory_begin, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.end = new_instancemethod(_CDM.CDM_PresentationDirectory_end, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.cbegin = new_instancemethod(_CDM.CDM_PresentationDirectory_cbegin, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.cend = new_instancemethod(_CDM.CDM_PresentationDirectory_cend, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.Exchange = new_instancemethod(_CDM.CDM_PresentationDirectory_Exchange, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.Assign = new_instancemethod(_CDM.CDM_PresentationDirectory_Assign, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.Set = new_instancemethod(_CDM.CDM_PresentationDirectory_Set, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.ReSize = new_instancemethod(_CDM.CDM_PresentationDirectory_ReSize, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.Bind = new_instancemethod(_CDM.CDM_PresentationDirectory_Bind, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.Bound = new_instancemethod(_CDM.CDM_PresentationDirectory_Bound, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.IsBound = new_instancemethod(_CDM.CDM_PresentationDirectory_IsBound, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.UnBind = new_instancemethod(_CDM.CDM_PresentationDirectory_UnBind, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.Seek = new_instancemethod(_CDM.CDM_PresentationDirectory_Seek, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.Find = new_instancemethod(_CDM.CDM_PresentationDirectory_Find, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.ChangeSeek = new_instancemethod(_CDM.CDM_PresentationDirectory_ChangeSeek, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.ChangeFind = new_instancemethod(_CDM.CDM_PresentationDirectory_ChangeFind, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.__call__ = new_instancemethod(_CDM.CDM_PresentationDirectory___call__, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.Clear = new_instancemethod(_CDM.CDM_PresentationDirectory_Clear, None, CDM_PresentationDirectory)
CDM_PresentationDirectory.Size = new_instancemethod(_CDM.CDM_PresentationDirectory_Size, None, CDM_PresentationDirectory)
CDM_PresentationDirectory_swigregister = _CDM.CDM_PresentationDirectory_swigregister
CDM_PresentationDirectory_swigregister(CDM_PresentationDirectory)

class CDM_MetaDataLookUpTable(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CDM.CDM_MetaDataLookUpTable_swiginit(self, _CDM.new_CDM_MetaDataLookUpTable(*args))
    __swig_destroy__ = _CDM.delete_CDM_MetaDataLookUpTable
CDM_MetaDataLookUpTable.begin = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_begin, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.end = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_end, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.cbegin = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_cbegin, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.cend = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_cend, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.Exchange = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_Exchange, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.Assign = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_Assign, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.Set = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_Set, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.ReSize = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_ReSize, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.Bind = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_Bind, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.Bound = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_Bound, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.IsBound = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_IsBound, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.UnBind = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_UnBind, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.Seek = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_Seek, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.Find = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_Find, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.ChangeSeek = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_ChangeSeek, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.ChangeFind = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_ChangeFind, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.__call__ = new_instancemethod(_CDM.CDM_MetaDataLookUpTable___call__, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.Clear = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_Clear, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable.Size = new_instancemethod(_CDM.CDM_MetaDataLookUpTable_Size, None, CDM_MetaDataLookUpTable)
CDM_MetaDataLookUpTable_swigregister = _CDM.CDM_MetaDataLookUpTable_swigregister
CDM_MetaDataLookUpTable_swigregister(CDM_MetaDataLookUpTable)

class CDM_MapOfDocument(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CDM.CDM_MapOfDocument_swiginit(self, _CDM.new_CDM_MapOfDocument(*args))
    __swig_destroy__ = _CDM.delete_CDM_MapOfDocument
CDM_MapOfDocument.cbegin = new_instancemethod(_CDM.CDM_MapOfDocument_cbegin, None, CDM_MapOfDocument)
CDM_MapOfDocument.cend = new_instancemethod(_CDM.CDM_MapOfDocument_cend, None, CDM_MapOfDocument)
CDM_MapOfDocument.Exchange = new_instancemethod(_CDM.CDM_MapOfDocument_Exchange, None, CDM_MapOfDocument)
CDM_MapOfDocument.Assign = new_instancemethod(_CDM.CDM_MapOfDocument_Assign, None, CDM_MapOfDocument)
CDM_MapOfDocument.Set = new_instancemethod(_CDM.CDM_MapOfDocument_Set, None, CDM_MapOfDocument)
CDM_MapOfDocument.ReSize = new_instancemethod(_CDM.CDM_MapOfDocument_ReSize, None, CDM_MapOfDocument)
CDM_MapOfDocument.Add = new_instancemethod(_CDM.CDM_MapOfDocument_Add, None, CDM_MapOfDocument)
CDM_MapOfDocument.Added = new_instancemethod(_CDM.CDM_MapOfDocument_Added, None, CDM_MapOfDocument)
CDM_MapOfDocument.Remove = new_instancemethod(_CDM.CDM_MapOfDocument_Remove, None, CDM_MapOfDocument)
CDM_MapOfDocument.Clear = new_instancemethod(_CDM.CDM_MapOfDocument_Clear, None, CDM_MapOfDocument)
CDM_MapOfDocument.Size = new_instancemethod(_CDM.CDM_MapOfDocument_Size, None, CDM_MapOfDocument)
CDM_MapOfDocument.IsEqual = new_instancemethod(_CDM.CDM_MapOfDocument_IsEqual, None, CDM_MapOfDocument)
CDM_MapOfDocument.Contains = new_instancemethod(_CDM.CDM_MapOfDocument_Contains, None, CDM_MapOfDocument)
CDM_MapOfDocument.Union = new_instancemethod(_CDM.CDM_MapOfDocument_Union, None, CDM_MapOfDocument)
CDM_MapOfDocument.Unite = new_instancemethod(_CDM.CDM_MapOfDocument_Unite, None, CDM_MapOfDocument)
CDM_MapOfDocument.HasIntersection = new_instancemethod(_CDM.CDM_MapOfDocument_HasIntersection, None, CDM_MapOfDocument)
CDM_MapOfDocument.Intersection = new_instancemethod(_CDM.CDM_MapOfDocument_Intersection, None, CDM_MapOfDocument)
CDM_MapOfDocument.Intersect = new_instancemethod(_CDM.CDM_MapOfDocument_Intersect, None, CDM_MapOfDocument)
CDM_MapOfDocument.Subtraction = new_instancemethod(_CDM.CDM_MapOfDocument_Subtraction, None, CDM_MapOfDocument)
CDM_MapOfDocument.Subtract = new_instancemethod(_CDM.CDM_MapOfDocument_Subtract, None, CDM_MapOfDocument)
CDM_MapOfDocument.Difference = new_instancemethod(_CDM.CDM_MapOfDocument_Difference, None, CDM_MapOfDocument)
CDM_MapOfDocument.Differ = new_instancemethod(_CDM.CDM_MapOfDocument_Differ, None, CDM_MapOfDocument)
CDM_MapOfDocument_swigregister = _CDM.CDM_MapOfDocument_swigregister
CDM_MapOfDocument_swigregister(CDM_MapOfDocument)

class CDM_DocumentHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashCode = staticmethod(_CDM.CDM_DocumentHasher_HashCode)
    IsEqual = staticmethod(_CDM.CDM_DocumentHasher_IsEqual)

    def __init__(self):
        _CDM.CDM_DocumentHasher_swiginit(self, _CDM.new_CDM_DocumentHasher())
    __swig_destroy__ = _CDM.delete_CDM_DocumentHasher
CDM_DocumentHasher_swigregister = _CDM.CDM_DocumentHasher_swigregister
CDM_DocumentHasher_swigregister(CDM_DocumentHasher)

def CDM_DocumentHasher_HashCode(theKey: 'opencascade::handle< CDM_Document > const &', theUpperBound: 'Standard_Integer const') -> "Standard_Integer":
    return _CDM.CDM_DocumentHasher_HashCode(theKey, theUpperBound)
CDM_DocumentHasher_HashCode = _CDM.CDM_DocumentHasher_HashCode

def CDM_DocumentHasher_IsEqual(theKey1: 'opencascade::handle< CDM_Document > const &', theKey2: 'opencascade::handle< CDM_Document > const &') -> "Standard_Boolean":
    return _CDM.CDM_DocumentHasher_IsEqual(theKey1, theKey2)
CDM_DocumentHasher_IsEqual = _CDM.CDM_DocumentHasher_IsEqual

class CDM_Application(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def BeginOfUpdate(self, *args) -> "void":
        """
        * this method is called before the update of a document. By default, writes in MessageDriver().
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:rtype: void
        """
        return _CDM.CDM_Application_BeginOfUpdate(self, *args)


    def EndOfUpdate(self, *args) -> "void":
        """
        * this method is called affter the update of a document. By default, writes in MessageDriver().
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:param theStatus:
        	:type theStatus: bool
        	:param ErrorString:
        	:type ErrorString: TCollection_ExtendedString
        	:rtype: void
        """
        return _CDM.CDM_Application_EndOfUpdate(self, *args)


    def MessageDriver(self, *args) -> "opencascade::handle< Message_Messenger >":
        """
        * Returns default messenger;
        	:rtype: opencascade::handle<Message_Messenger>
        """
        return _CDM.CDM_Application_MessageDriver(self, *args)


    def Name(self, *args) -> "TCollection_ExtendedString":
        """
        * Returns the application name.
        	:rtype: TCollection_ExtendedString
        """
        return _CDM.CDM_Application_Name(self, *args)


    def Resources(self, *args) -> "opencascade::handle< Resource_Manager >":
        """
        * The manager returned by this virtual method will be used to search for Format.Retrieval resource items.
        	:rtype: opencascade::handle<Resource_Manager>
        """
        return _CDM.CDM_Application_Resources(self, *args)


    def Version(self, *args) -> "TCollection_AsciiString":
        """
        * Returns the application version.
        	:rtype: TCollection_AsciiString
        """
        return _CDM.CDM_Application_Version(self, *args)


    def Write(self, *args) -> "void":
        """
        * writes the string in the application MessagerDriver.
        	:param aString:
        	:type aString: Standard_ExtString
        	:rtype: None
        """
        return _CDM.CDM_Application_Write(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_CDM_Application_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDM.delete_CDM_Application
CDM_Application.BeginOfUpdate = new_instancemethod(_CDM.CDM_Application_BeginOfUpdate, None, CDM_Application)
CDM_Application.EndOfUpdate = new_instancemethod(_CDM.CDM_Application_EndOfUpdate, None, CDM_Application)
CDM_Application.MessageDriver = new_instancemethod(_CDM.CDM_Application_MessageDriver, None, CDM_Application)
CDM_Application.Name = new_instancemethod(_CDM.CDM_Application_Name, None, CDM_Application)
CDM_Application.Resources = new_instancemethod(_CDM.CDM_Application_Resources, None, CDM_Application)
CDM_Application.Version = new_instancemethod(_CDM.CDM_Application_Version, None, CDM_Application)
CDM_Application.Write = new_instancemethod(_CDM.CDM_Application_Write, None, CDM_Application)
CDM_Application_swigregister = _CDM.CDM_Application_swigregister
CDM_Application_swigregister(CDM_Application)

class CDM_Document(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddComment(self, *args) -> "void":
        """
        * appends a comment into comments of this document.
        	:param aComment:
        	:type aComment: TCollection_ExtendedString
        	:rtype: None
        """
        return _CDM.CDM_Document_AddComment(self, *args)


    def Application(self, *args) -> "opencascade::handle< CDM_Application > const &":
        """:rtype: opencascade::handle<CDM_Application>"""
        return _CDM.CDM_Document_Application(self, *args)


    def CanClose(self, *args) -> "CDM_CanCloseStatus":
        """:rtype: CDM_CanCloseStatus"""
        return _CDM.CDM_Document_CanClose(self, *args)


    def CanCloseReference(self, *args) -> "Standard_Boolean":
        """
        * A referenced document may indicate through this virtual method that it does not allow the closing of aDocument which it references through the reference aReferenceIdentifier. By default returns Standard_True;;
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: bool
        """
        return _CDM.CDM_Document_CanCloseReference(self, *args)


    def ChangeStorageFormatVersion(self, *args) -> "void":
        """
        * Sets <theVersion> of the format to be used to store the document
        	:param theVersion:
        	:type theVersion: int
        	:rtype: None
        """
        return _CDM.CDM_Document_ChangeStorageFormatVersion(self, *args)


    def Close(self, *args) -> "void":
        """:rtype: None"""
        return _CDM.CDM_Document_Close(self, *args)


    def CloseReference(self, *args) -> "void":
        """
        * A referenced document may update its internal data structure when {aDocument} which it references through the reference {aReferenceIdentifier} is being closed. By default this method does nothing.
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: void
        """
        return _CDM.CDM_Document_CloseReference(self, *args)


    def Comment(self, *args) -> "Standard_ExtString":
        """
        * returns the first of associated comments. By defaut the comment is an empty string.
        	:rtype: Standard_ExtString
        """
        return _CDM.CDM_Document_Comment(self, *args)


    def Comments(self, *args) -> "void":
        """
        * returns the associated comments through <aComments>. Returns empty sequence if no comments are associated.
        	:param aComments:
        	:type aComments: TColStd_SequenceOfExtendedString
        	:rtype: None
        """
        return _CDM.CDM_Document_Comments(self, *args)


    def CopyReference(self, *args) -> "Standard_Integer":
        """
        * Copies a reference to this document. This method avoid retrieval of referenced document. The arguments are the original document and a valid reference identifier Returns the local identifier.
        	:param aFromDocument:
        	:type aFromDocument: CDM_Document
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: int
        """
        return _CDM.CDM_Document_CopyReference(self, *args)


    def CreateReference(self, *args) -> "Standard_Integer":
        """
        * Creates a reference from this document to {anOtherDocument}. Returns a reference identifier. This reference identifier is unique in the document and will not be used for the next references, even after the storing of the document. If there is already a reference between the two documents, the reference is not created, but its reference identifier is returned.
        	:param anOtherDocument:
        	:type anOtherDocument: CDM_Document
        	:rtype: int
        :param aMetaData:
        	:type aMetaData: CDM_MetaData
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:param anApplication:
        	:type anApplication: CDM_Application
        	:param aToDocumentVersion:
        	:type aToDocumentVersion: int
        	:param UseStorageConfiguration:
        	:type UseStorageConfiguration: bool
        	:rtype: None
        :param aMetaData:
        	:type aMetaData: CDM_MetaData
        	:param anApplication:
        	:type anApplication: CDM_Application
        	:param aDocumentVersion:
        	:type aDocumentVersion: int
        	:param UseStorageConfiguration:
        	:type UseStorageConfiguration: bool
        	:rtype: int
        """
        return _CDM.CDM_Document_CreateReference(self, *args)


    def DeepReferences(self, *args) -> "Standard_Boolean":
        """
        * returns True is this document references aDocument;
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:rtype: bool
        """
        return _CDM.CDM_Document_DeepReferences(self, *args)


    def Description(self, *args) -> "TCollection_ExtendedString":
        """
        * gets the `FileFormat`.Description resource.
        	:rtype: TCollection_ExtendedString
        """
        return _CDM.CDM_Document_Description(self, *args)


    def Document(self, *args) -> "opencascade::handle< CDM_Document >":
        """
        * Returns the To Document of the reference identified by aReferenceIdentifier. If the ToDocument is stored and has not yet been retrieved, this method will retrieve it.
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: opencascade::handle<CDM_Document>
        """
        return _CDM.CDM_Document_Document(self, *args)


    def Extensions(self, *args) -> "void":
        """
        * by default empties the extensions.
        	:param Extensions:
        	:type Extensions: TColStd_SequenceOfExtendedString
        	:rtype: void
        """
        return _CDM.CDM_Document_Extensions(self, *args)


    def FileExtension(self, *args) -> "TCollection_ExtendedString":
        """
        * gets the Desktop.Domain.Application.`FileFormat`.FileExtension resource.
        	:rtype: TCollection_ExtendedString
        """
        return _CDM.CDM_Document_FileExtension(self, *args)


    def FindDescription(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _CDM.CDM_Document_FindDescription(self, *args)


    def FindFileExtension(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _CDM.CDM_Document_FindFileExtension(self, *args)


    def FindFromPresentation(*args) -> "opencascade::handle< CDM_Document >":
        """
        * returns the document having the given alphanumeric presentation.
        	:param aPresentation:
        	:type aPresentation: TCollection_ExtendedString
        	:rtype: opencascade::handle<CDM_Document>
        """
        return _CDM.CDM_Document_FindFromPresentation(*args)

    FindFromPresentation = staticmethod(FindFromPresentation)

    def FindPresentation(*args) -> "Standard_Boolean":
        """
        * indicates whether a document having the given presentation does exist.
        	:param aPresentation:
        	:type aPresentation: TCollection_ExtendedString
        	:rtype: bool
        """
        return _CDM.CDM_Document_FindPresentation(*args)

    FindPresentation = staticmethod(FindPresentation)

    def Folder(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _CDM.CDM_Document_Folder(self, *args)


    def FromReferencesNumber(self, *args) -> "Standard_Integer":
        """
        * returns the number of references having this document as To Document.
        	:rtype: int
        """
        return _CDM.CDM_Document_FromReferencesNumber(self, *args)


    def GetAlternativeDocument(self, *args) -> "Standard_Boolean":
        """
        * This method can be redefined to extract another document in a different format. For example, to extract a Shape from an applicative document.
        	:param aFormat:
        	:type aFormat: TCollection_ExtendedString
        	:param anAlternativeDocument:
        	:type anAlternativeDocument: CDM_Document
        	:rtype: bool
        """
        return _CDM.CDM_Document_GetAlternativeDocument(self, *args)


    def HasRequestedFolder(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _CDM.CDM_Document_HasRequestedFolder(self, *args)


    def HasRequestedPreviousVersion(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _CDM.CDM_Document_HasRequestedPreviousVersion(self, *args)


    def IsInSession(self, *args) -> "Standard_Boolean":
        """
        * returns True if the To Document of the reference identified by aReferenceIdentifier is in session, False if it corresponds to a not yet retrieved document.
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: bool
        """
        return _CDM.CDM_Document_IsInSession(self, *args)


    def IsModified(self, *args) -> "Standard_Boolean":
        """
        * returns true if the version is greater than the storage version
        	:rtype: bool
        """
        return _CDM.CDM_Document_IsModified(self, *args)


    def IsOpened(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool
        * returns true if the document corresponding to the given reference has been retrieved and opened. Otherwise returns false. This method does not retrieve the referenced document
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: bool
        """
        return _CDM.CDM_Document_IsOpened(self, *args)


    def IsReadOnly(self, *args) -> "Standard_Boolean":
        """
        * indicates that this document cannot be modified.
        	:rtype: bool
        * indicates that the referenced document cannot be modified,
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: bool
        """
        return _CDM.CDM_Document_IsReadOnly(self, *args)


    def IsStored(self, *args) -> "Standard_Boolean":
        """
        * returns True if the To Document of the reference identified by aReferenceIdentifier has already been stored, False otherwise.
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: bool
        :rtype: bool
        """
        return _CDM.CDM_Document_IsStored(self, *args)


    def IsUpToDate(self, *args) -> "Standard_Boolean":
        """
        * returns true if the modification counter found in the given reference is equal to the actual modification counter of the To Document. This method is able to deal with a reference to a not retrieved document.
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: bool
        """
        return _CDM.CDM_Document_IsUpToDate(self, *args)


    def LoadResources(self, *args) -> "void":
        """
        * read (or rereads) the following resource.
        	:rtype: None
        """
        return _CDM.CDM_Document_LoadResources(self, *args)


    def MetaData(self, *args) -> "opencascade::handle< CDM_MetaData >":
        """:rtype: opencascade::handle<CDM_MetaData>"""
        return _CDM.CDM_Document_MetaData(self, *args)


    def Modifications(self, *args) -> "Standard_Integer":
        """
        * returns the current modification counter.
        	:rtype: int
        """
        return _CDM.CDM_Document_Modifications(self, *args)


    def Modify(self, *args) -> "void":
        """
        * Indicates that this document has been modified. This method increments the modification counter.
        	:rtype: None
        """
        return _CDM.CDM_Document_Modify(self, *args)


    def Name(self, *args) -> "TCollection_ExtendedString":
        """
        * returns the name of the metadata of the To Document of the reference identified by aReferenceIdentifier.
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: TCollection_ExtendedString
        """
        return _CDM.CDM_Document_Name(self, *args)


    def Open(self, *args) -> "void":
        """
        :param anApplication:
        	:type anApplication: CDM_Application
        	:rtype: None
        """
        return _CDM.CDM_Document_Open(self, *args)


    def Presentation(self, *args) -> "Standard_ExtString":
        """
        * Returns an alphanumeric string identifying this document in a unique manner in the current process. The presentation may change when the document is stored. Tries to get the 'FileFormat`.Presentation resource This item is used to give a default presentation to the document.
        	:rtype: Standard_ExtString
        """
        return _CDM.CDM_Document_Presentation(self, *args)


    def PrintToString(self) -> "std::string":
        """PrintToString(CDM_Document self) -> std::string"""
        return _CDM.CDM_Document_PrintToString(self)


    def Reference(self, *args) -> "opencascade::handle< CDM_Reference >":
        """
        :param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: opencascade::handle<CDM_Reference>
        """
        return _CDM.CDM_Document_Reference(self, *args)


    def ReferenceCounter(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _CDM.CDM_Document_ReferenceCounter(self, *args)


    def RemoveAllReferences(self, *args) -> "void":
        """
        * Removes all references having this document for From Document.
        	:rtype: None
        """
        return _CDM.CDM_Document_RemoveAllReferences(self, *args)


    def RemoveReference(self, *args) -> "void":
        """
        * Removes the reference between the From Document and the To Document identified by a reference identifier.
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: None
        """
        return _CDM.CDM_Document_RemoveReference(self, *args)


    def RequestedComment(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _CDM.CDM_Document_RequestedComment(self, *args)


    def RequestedFolder(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _CDM.CDM_Document_RequestedFolder(self, *args)


    def RequestedName(self, *args) -> "TCollection_ExtendedString":
        """
        * determines under which the document is going to be store. By default the name of the document wil be -- used. If the document has no name its presentation will be used.
        	:rtype: TCollection_ExtendedString
        """
        return _CDM.CDM_Document_RequestedName(self, *args)


    def RequestedPreviousVersion(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _CDM.CDM_Document_RequestedPreviousVersion(self, *args)


    def SetComment(self, *args) -> "void":
        """
        * associates a comment with this document.
        	:param aComment:
        	:type aComment: TCollection_ExtendedString
        	:rtype: None
        """
        return _CDM.CDM_Document_SetComment(self, *args)


    def SetComments(self, *args) -> "void":
        """
        * associates a comments with this document.
        	:param aComments:
        	:type aComments: TColStd_SequenceOfExtendedString
        	:rtype: None
        """
        return _CDM.CDM_Document_SetComments(self, *args)


    def SetIsReadOnly(self, *args) -> "void":
        """:rtype: None"""
        return _CDM.CDM_Document_SetIsReadOnly(self, *args)


    def SetIsUpToDate(self, *args) -> "void":
        """
        * Resets the modification counter in the given reference to the actual modification counter of its To Document. This method should be called after the application has updated this document.
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:rtype: None
        """
        return _CDM.CDM_Document_SetIsUpToDate(self, *args)


    def SetMetaData(self, *args) -> "void":
        """
        * associates database information to a document which has been stored. The name of the document is now the name which has beenused to store the data.
        	:param aMetaData:
        	:type aMetaData: CDM_MetaData
        	:rtype: None
        """
        return _CDM.CDM_Document_SetMetaData(self, *args)


    def SetModifications(self, *args) -> "void":
        """
        :param Modifications:
        	:type Modifications: int
        	:rtype: None
        """
        return _CDM.CDM_Document_SetModifications(self, *args)


    def SetReferenceCounter(self, *args) -> "void":
        """
        :param aReferenceCounter:
        	:type aReferenceCounter: int
        	:rtype: None
        """
        return _CDM.CDM_Document_SetReferenceCounter(self, *args)


    def SetRequestedComment(self, *args) -> "void":
        """
        * defines the Comment with which the object should be stored.
        	:param aComment:
        	:type aComment: TCollection_ExtendedString
        	:rtype: None
        """
        return _CDM.CDM_Document_SetRequestedComment(self, *args)


    def SetRequestedFolder(self, *args) -> "void":
        """
        * defines the folder in which the object should be stored.
        	:param aFolder:
        	:type aFolder: TCollection_ExtendedString
        	:rtype: None
        """
        return _CDM.CDM_Document_SetRequestedFolder(self, *args)


    def SetRequestedName(self, *args) -> "void":
        """
        * defines the name under which the object should be stored.
        	:param aName:
        	:type aName: TCollection_ExtendedString
        	:rtype: None
        """
        return _CDM.CDM_Document_SetRequestedName(self, *args)


    def SetRequestedPreviousVersion(self, *args) -> "void":
        """
        :param aPreviousVersion:
        	:type aPreviousVersion: TCollection_ExtendedString
        	:rtype: None
        """
        return _CDM.CDM_Document_SetRequestedPreviousVersion(self, *args)


    def ShallowReferences(self, *args) -> "Standard_Boolean":
        """
        * returns True is this document references aDocument;
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:rtype: bool
        """
        return _CDM.CDM_Document_ShallowReferences(self, *args)


    def StorageFormat(self, *args) -> "TCollection_ExtendedString":
        """
        * The Storage Format is the key which is used to determine in the application resources the storage driver plugin, the file extension and other data used to store the document.
        	:rtype: TCollection_ExtendedString
        """
        return _CDM.CDM_Document_StorageFormat(self, *args)


    def StorageFormatVersion(self, *args) -> "Standard_Integer":
        """
        * Returns version of the format to be used to store the document
        	:rtype: int
        """
        return _CDM.CDM_Document_StorageFormatVersion(self, *args)


    def StorageVersion(self, *args) -> "Standard_Integer":
        """
        * returns the value of the modification counter at the time of storage. By default returns 0.
        	:rtype: int
        """
        return _CDM.CDM_Document_StorageVersion(self, *args)


    def ToReferencesNumber(self, *args) -> "Standard_Integer":
        """
        * returns the number of references having this document as From Document.
        	:rtype: int
        """
        return _CDM.CDM_Document_ToReferencesNumber(self, *args)


    def UnModify(self, *args) -> "void":
        """:rtype: None"""
        return _CDM.CDM_Document_UnModify(self, *args)


    def UnsetIsReadOnly(self, *args) -> "void":
        """:rtype: None"""
        return _CDM.CDM_Document_UnsetIsReadOnly(self, *args)


    def UnsetIsStored(self, *args) -> "void":
        """:rtype: None"""
        return _CDM.CDM_Document_UnsetIsStored(self, *args)


    def UnsetRequestedPreviousVersion(self, *args) -> "void":
        """:rtype: None"""
        return _CDM.CDM_Document_UnsetRequestedPreviousVersion(self, *args)


    def Update(self, *args) -> "void":
        """
        * The Update method will be called once for each reference, but it should not perform any computation, to avoid multiple computation of a same document.
        	:param aToDocument:
        	:type aToDocument: CDM_Document
        	:param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:param aModifContext:
        	:type aModifContext: Standard_Address
        	:rtype: void
        * This method Update will be called to signal the end of the modified references list. The document should be recomputed and UpdateFromDocuments should be called. Update should returns True in case of success, false otherwise. In case of Failure, additional information can be given in ErrorString.
        	:param ErrorString:
        	:type ErrorString: TCollection_ExtendedString
        	:rtype: bool
        * the following method should be used instead: //! Update(me:mutable; ErrorString: out ExtendedString from TCollection) returns Boolean from Standard
        	:rtype: void
        """
        return _CDM.CDM_Document_Update(self, *args)


    def UpdateFromDocuments(self, *args) -> "void":
        """
        * call virtual method Update on all referencing documents. This method keeps the list of the -- documents to process.It may be the starting of an update -- cycle. If not, the reentrant calls made by Update method (without argument) will append the referencing documents to the list and call the Update method (with arguments). Only the first call to UpdateFromDocuments generate call to Update().
        	:param aModifContext:
        	:type aModifContext: Standard_Address
        	:rtype: None
        """
        return _CDM.CDM_Document_UpdateFromDocuments(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_CDM_Document_DownCast(t)


    __repr__ = _dumps_object

CDM_Document.AddComment = new_instancemethod(_CDM.CDM_Document_AddComment, None, CDM_Document)
CDM_Document.Application = new_instancemethod(_CDM.CDM_Document_Application, None, CDM_Document)
CDM_Document.CanClose = new_instancemethod(_CDM.CDM_Document_CanClose, None, CDM_Document)
CDM_Document.CanCloseReference = new_instancemethod(_CDM.CDM_Document_CanCloseReference, None, CDM_Document)
CDM_Document.ChangeStorageFormatVersion = new_instancemethod(_CDM.CDM_Document_ChangeStorageFormatVersion, None, CDM_Document)
CDM_Document.Close = new_instancemethod(_CDM.CDM_Document_Close, None, CDM_Document)
CDM_Document.CloseReference = new_instancemethod(_CDM.CDM_Document_CloseReference, None, CDM_Document)
CDM_Document.Comment = new_instancemethod(_CDM.CDM_Document_Comment, None, CDM_Document)
CDM_Document.Comments = new_instancemethod(_CDM.CDM_Document_Comments, None, CDM_Document)
CDM_Document.CopyReference = new_instancemethod(_CDM.CDM_Document_CopyReference, None, CDM_Document)
CDM_Document.CreateReference = new_instancemethod(_CDM.CDM_Document_CreateReference, None, CDM_Document)
CDM_Document.DeepReferences = new_instancemethod(_CDM.CDM_Document_DeepReferences, None, CDM_Document)
CDM_Document.Description = new_instancemethod(_CDM.CDM_Document_Description, None, CDM_Document)
CDM_Document.Document = new_instancemethod(_CDM.CDM_Document_Document, None, CDM_Document)
CDM_Document.Extensions = new_instancemethod(_CDM.CDM_Document_Extensions, None, CDM_Document)
CDM_Document.FileExtension = new_instancemethod(_CDM.CDM_Document_FileExtension, None, CDM_Document)
CDM_Document.FindDescription = new_instancemethod(_CDM.CDM_Document_FindDescription, None, CDM_Document)
CDM_Document.FindFileExtension = new_instancemethod(_CDM.CDM_Document_FindFileExtension, None, CDM_Document)
CDM_Document.Folder = new_instancemethod(_CDM.CDM_Document_Folder, None, CDM_Document)
CDM_Document.FromReferencesNumber = new_instancemethod(_CDM.CDM_Document_FromReferencesNumber, None, CDM_Document)
CDM_Document.GetAlternativeDocument = new_instancemethod(_CDM.CDM_Document_GetAlternativeDocument, None, CDM_Document)
CDM_Document.HasRequestedFolder = new_instancemethod(_CDM.CDM_Document_HasRequestedFolder, None, CDM_Document)
CDM_Document.HasRequestedPreviousVersion = new_instancemethod(_CDM.CDM_Document_HasRequestedPreviousVersion, None, CDM_Document)
CDM_Document.IsInSession = new_instancemethod(_CDM.CDM_Document_IsInSession, None, CDM_Document)
CDM_Document.IsModified = new_instancemethod(_CDM.CDM_Document_IsModified, None, CDM_Document)
CDM_Document.IsOpened = new_instancemethod(_CDM.CDM_Document_IsOpened, None, CDM_Document)
CDM_Document.IsReadOnly = new_instancemethod(_CDM.CDM_Document_IsReadOnly, None, CDM_Document)
CDM_Document.IsStored = new_instancemethod(_CDM.CDM_Document_IsStored, None, CDM_Document)
CDM_Document.IsUpToDate = new_instancemethod(_CDM.CDM_Document_IsUpToDate, None, CDM_Document)
CDM_Document.LoadResources = new_instancemethod(_CDM.CDM_Document_LoadResources, None, CDM_Document)
CDM_Document.MetaData = new_instancemethod(_CDM.CDM_Document_MetaData, None, CDM_Document)
CDM_Document.Modifications = new_instancemethod(_CDM.CDM_Document_Modifications, None, CDM_Document)
CDM_Document.Modify = new_instancemethod(_CDM.CDM_Document_Modify, None, CDM_Document)
CDM_Document.Name = new_instancemethod(_CDM.CDM_Document_Name, None, CDM_Document)
CDM_Document.Open = new_instancemethod(_CDM.CDM_Document_Open, None, CDM_Document)
CDM_Document.Presentation = new_instancemethod(_CDM.CDM_Document_Presentation, None, CDM_Document)
CDM_Document.PrintToString = new_instancemethod(_CDM.CDM_Document_PrintToString, None, CDM_Document)
CDM_Document.Reference = new_instancemethod(_CDM.CDM_Document_Reference, None, CDM_Document)
CDM_Document.ReferenceCounter = new_instancemethod(_CDM.CDM_Document_ReferenceCounter, None, CDM_Document)
CDM_Document.RemoveAllReferences = new_instancemethod(_CDM.CDM_Document_RemoveAllReferences, None, CDM_Document)
CDM_Document.RemoveReference = new_instancemethod(_CDM.CDM_Document_RemoveReference, None, CDM_Document)
CDM_Document.RequestedComment = new_instancemethod(_CDM.CDM_Document_RequestedComment, None, CDM_Document)
CDM_Document.RequestedFolder = new_instancemethod(_CDM.CDM_Document_RequestedFolder, None, CDM_Document)
CDM_Document.RequestedName = new_instancemethod(_CDM.CDM_Document_RequestedName, None, CDM_Document)
CDM_Document.RequestedPreviousVersion = new_instancemethod(_CDM.CDM_Document_RequestedPreviousVersion, None, CDM_Document)
CDM_Document.SetComment = new_instancemethod(_CDM.CDM_Document_SetComment, None, CDM_Document)
CDM_Document.SetComments = new_instancemethod(_CDM.CDM_Document_SetComments, None, CDM_Document)
CDM_Document.SetIsReadOnly = new_instancemethod(_CDM.CDM_Document_SetIsReadOnly, None, CDM_Document)
CDM_Document.SetIsUpToDate = new_instancemethod(_CDM.CDM_Document_SetIsUpToDate, None, CDM_Document)
CDM_Document.SetMetaData = new_instancemethod(_CDM.CDM_Document_SetMetaData, None, CDM_Document)
CDM_Document.SetModifications = new_instancemethod(_CDM.CDM_Document_SetModifications, None, CDM_Document)
CDM_Document.SetReferenceCounter = new_instancemethod(_CDM.CDM_Document_SetReferenceCounter, None, CDM_Document)
CDM_Document.SetRequestedComment = new_instancemethod(_CDM.CDM_Document_SetRequestedComment, None, CDM_Document)
CDM_Document.SetRequestedFolder = new_instancemethod(_CDM.CDM_Document_SetRequestedFolder, None, CDM_Document)
CDM_Document.SetRequestedName = new_instancemethod(_CDM.CDM_Document_SetRequestedName, None, CDM_Document)
CDM_Document.SetRequestedPreviousVersion = new_instancemethod(_CDM.CDM_Document_SetRequestedPreviousVersion, None, CDM_Document)
CDM_Document.ShallowReferences = new_instancemethod(_CDM.CDM_Document_ShallowReferences, None, CDM_Document)
CDM_Document.StorageFormat = new_instancemethod(_CDM.CDM_Document_StorageFormat, None, CDM_Document)
CDM_Document.StorageFormatVersion = new_instancemethod(_CDM.CDM_Document_StorageFormatVersion, None, CDM_Document)
CDM_Document.StorageVersion = new_instancemethod(_CDM.CDM_Document_StorageVersion, None, CDM_Document)
CDM_Document.ToReferencesNumber = new_instancemethod(_CDM.CDM_Document_ToReferencesNumber, None, CDM_Document)
CDM_Document.UnModify = new_instancemethod(_CDM.CDM_Document_UnModify, None, CDM_Document)
CDM_Document.UnsetIsReadOnly = new_instancemethod(_CDM.CDM_Document_UnsetIsReadOnly, None, CDM_Document)
CDM_Document.UnsetIsStored = new_instancemethod(_CDM.CDM_Document_UnsetIsStored, None, CDM_Document)
CDM_Document.UnsetRequestedPreviousVersion = new_instancemethod(_CDM.CDM_Document_UnsetRequestedPreviousVersion, None, CDM_Document)
CDM_Document.Update = new_instancemethod(_CDM.CDM_Document_Update, None, CDM_Document)
CDM_Document.UpdateFromDocuments = new_instancemethod(_CDM.CDM_Document_UpdateFromDocuments, None, CDM_Document)
CDM_Document_swigregister = _CDM.CDM_Document_swigregister
CDM_Document_swigregister(CDM_Document)

def CDM_Document_FindFromPresentation(*args) -> "opencascade::handle< CDM_Document >":
    """
    * returns the document having the given alphanumeric presentation.
    	:param aPresentation:
    	:type aPresentation: TCollection_ExtendedString
    	:rtype: opencascade::handle<CDM_Document>
    """
    return _CDM.CDM_Document_FindFromPresentation(*args)

def CDM_Document_FindPresentation(*args) -> "Standard_Boolean":
    """
    * indicates whether a document having the given presentation does exist.
    	:param aPresentation:
    	:type aPresentation: TCollection_ExtendedString
    	:rtype: bool
    """
    return _CDM.CDM_Document_FindPresentation(*args)

class CDM_MetaData(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Document(self, *args) -> "opencascade::handle< CDM_Document >":
        """:rtype: opencascade::handle<CDM_Document>"""
        return _CDM.CDM_MetaData_Document(self, *args)


    def FileName(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _CDM.CDM_MetaData_FileName(self, *args)


    def Folder(self, *args) -> "TCollection_ExtendedString":
        """
        * returns the folder in which the meta-data has to be created or has to be found.
        	:rtype: TCollection_ExtendedString
        """
        return _CDM.CDM_MetaData_Folder(self, *args)


    def HasVersion(self, *args) -> "Standard_Boolean":
        """
        * indicates that the version has to be taken into account when searching the corresponding meta-data.
        	:rtype: bool
        """
        return _CDM.CDM_MetaData_HasVersion(self, *args)


    def IsReadOnly(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _CDM.CDM_MetaData_IsReadOnly(self, *args)


    def IsRetrieved(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _CDM.CDM_MetaData_IsRetrieved(self, *args)


    def LookUp(*args) -> "opencascade::handle< CDM_MetaData >":
        """
        :param aFolder:
        	:type aFolder: TCollection_ExtendedString
        	:param aName:
        	:type aName: TCollection_ExtendedString
        	:param aPath:
        	:type aPath: TCollection_ExtendedString
        	:param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:param ReadOnly:
        	:type ReadOnly: bool
        	:rtype: opencascade::handle<CDM_MetaData>
        :param aFolder:
        	:type aFolder: TCollection_ExtendedString
        	:param aName:
        	:type aName: TCollection_ExtendedString
        	:param aPath:
        	:type aPath: TCollection_ExtendedString
        	:param aVersion:
        	:type aVersion: TCollection_ExtendedString
        	:param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:param ReadOnly:
        	:type ReadOnly: bool
        	:rtype: opencascade::handle<CDM_MetaData>
        """
        return _CDM.CDM_MetaData_LookUp(*args)

    LookUp = staticmethod(LookUp)

    def Name(self, *args) -> "TCollection_ExtendedString":
        """
        * returns the name under which the meta-data has to be created or has to be found.
        	:rtype: TCollection_ExtendedString
        """
        return _CDM.CDM_MetaData_Name(self, *args)


    def Path(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _CDM.CDM_MetaData_Path(self, *args)


    def PrintToString(self) -> "std::string":
        """PrintToString(CDM_MetaData self) -> std::string"""
        return _CDM.CDM_MetaData_PrintToString(self)


    def SetIsReadOnly(self, *args) -> "void":
        """:rtype: None"""
        return _CDM.CDM_MetaData_SetIsReadOnly(self, *args)


    def UnsetDocument(self, *args) -> "void":
        """:rtype: None"""
        return _CDM.CDM_MetaData_UnsetDocument(self, *args)


    def UnsetIsReadOnly(self, *args) -> "void":
        """:rtype: None"""
        return _CDM.CDM_MetaData_UnsetIsReadOnly(self, *args)


    def Version(self, *args) -> "TCollection_ExtendedString":
        """
        * returns the version under which the meta-data has to be found. Warning: raises NoSuchObject from Standard if no Version has been defined
        	:rtype: TCollection_ExtendedString
        """
        return _CDM.CDM_MetaData_Version(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_CDM_MetaData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDM.delete_CDM_MetaData
CDM_MetaData.Document = new_instancemethod(_CDM.CDM_MetaData_Document, None, CDM_MetaData)
CDM_MetaData.FileName = new_instancemethod(_CDM.CDM_MetaData_FileName, None, CDM_MetaData)
CDM_MetaData.Folder = new_instancemethod(_CDM.CDM_MetaData_Folder, None, CDM_MetaData)
CDM_MetaData.HasVersion = new_instancemethod(_CDM.CDM_MetaData_HasVersion, None, CDM_MetaData)
CDM_MetaData.IsReadOnly = new_instancemethod(_CDM.CDM_MetaData_IsReadOnly, None, CDM_MetaData)
CDM_MetaData.IsRetrieved = new_instancemethod(_CDM.CDM_MetaData_IsRetrieved, None, CDM_MetaData)
CDM_MetaData.Name = new_instancemethod(_CDM.CDM_MetaData_Name, None, CDM_MetaData)
CDM_MetaData.Path = new_instancemethod(_CDM.CDM_MetaData_Path, None, CDM_MetaData)
CDM_MetaData.PrintToString = new_instancemethod(_CDM.CDM_MetaData_PrintToString, None, CDM_MetaData)
CDM_MetaData.SetIsReadOnly = new_instancemethod(_CDM.CDM_MetaData_SetIsReadOnly, None, CDM_MetaData)
CDM_MetaData.UnsetDocument = new_instancemethod(_CDM.CDM_MetaData_UnsetDocument, None, CDM_MetaData)
CDM_MetaData.UnsetIsReadOnly = new_instancemethod(_CDM.CDM_MetaData_UnsetIsReadOnly, None, CDM_MetaData)
CDM_MetaData.Version = new_instancemethod(_CDM.CDM_MetaData_Version, None, CDM_MetaData)
CDM_MetaData_swigregister = _CDM.CDM_MetaData_swigregister
CDM_MetaData_swigregister(CDM_MetaData)

def CDM_MetaData_LookUp(*args) -> "opencascade::handle< CDM_MetaData >":
    """
    :param aFolder:
    	:type aFolder: TCollection_ExtendedString
    	:param aName:
    	:type aName: TCollection_ExtendedString
    	:param aPath:
    	:type aPath: TCollection_ExtendedString
    	:param aFileName:
    	:type aFileName: TCollection_ExtendedString
    	:param ReadOnly:
    	:type ReadOnly: bool
    	:rtype: opencascade::handle<CDM_MetaData>
    :param aFolder:
    	:type aFolder: TCollection_ExtendedString
    	:param aName:
    	:type aName: TCollection_ExtendedString
    	:param aPath:
    	:type aPath: TCollection_ExtendedString
    	:param aVersion:
    	:type aVersion: TCollection_ExtendedString
    	:param aFileName:
    	:type aFileName: TCollection_ExtendedString
    	:param ReadOnly:
    	:type ReadOnly: bool
    	:rtype: opencascade::handle<CDM_MetaData>
    """
    return _CDM.CDM_MetaData_LookUp(*args)

class CDM_Reference(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DocumentVersion(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _CDM.CDM_Reference_DocumentVersion(self, *args)


    def FromDocument(self, *args) -> "opencascade::handle< CDM_Document >":
        """:rtype: opencascade::handle<CDM_Document>"""
        return _CDM.CDM_Reference_FromDocument(self, *args)


    def IsReadOnly(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _CDM.CDM_Reference_IsReadOnly(self, *args)


    def ReferenceIdentifier(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _CDM.CDM_Reference_ReferenceIdentifier(self, *args)


    def ToDocument(self, *args) -> "opencascade::handle< CDM_Document >":
        """:rtype: opencascade::handle<CDM_Document>"""
        return _CDM.CDM_Reference_ToDocument(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_CDM_Reference_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDM.delete_CDM_Reference
CDM_Reference.DocumentVersion = new_instancemethod(_CDM.CDM_Reference_DocumentVersion, None, CDM_Reference)
CDM_Reference.FromDocument = new_instancemethod(_CDM.CDM_Reference_FromDocument, None, CDM_Reference)
CDM_Reference.IsReadOnly = new_instancemethod(_CDM.CDM_Reference_IsReadOnly, None, CDM_Reference)
CDM_Reference.ReferenceIdentifier = new_instancemethod(_CDM.CDM_Reference_ReferenceIdentifier, None, CDM_Reference)
CDM_Reference.ToDocument = new_instancemethod(_CDM.CDM_Reference_ToDocument, None, CDM_Reference)
CDM_Reference_swigregister = _CDM.CDM_Reference_swigregister
CDM_Reference_swigregister(CDM_Reference)

class CDM_ReferenceIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param aDocument:
        	:type aDocument: CDM_Document
        	:rtype: None
        """
        _CDM.CDM_ReferenceIterator_swiginit(self, _CDM.new_CDM_ReferenceIterator(*args))

    def Document(self, *args) -> "opencascade::handle< CDM_Document >":
        """:rtype: opencascade::handle<CDM_Document>"""
        return _CDM.CDM_ReferenceIterator_Document(self, *args)


    def DocumentVersion(self, *args) -> "Standard_Integer":
        """
        * returns the Document Version in the reference.
        	:rtype: int
        """
        return _CDM.CDM_ReferenceIterator_DocumentVersion(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _CDM.CDM_ReferenceIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _CDM.CDM_ReferenceIterator_Next(self, *args)


    def ReferenceIdentifier(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _CDM.CDM_ReferenceIterator_ReferenceIdentifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDM.delete_CDM_ReferenceIterator
CDM_ReferenceIterator.Document = new_instancemethod(_CDM.CDM_ReferenceIterator_Document, None, CDM_ReferenceIterator)
CDM_ReferenceIterator.DocumentVersion = new_instancemethod(_CDM.CDM_ReferenceIterator_DocumentVersion, None, CDM_ReferenceIterator)
CDM_ReferenceIterator.More = new_instancemethod(_CDM.CDM_ReferenceIterator_More, None, CDM_ReferenceIterator)
CDM_ReferenceIterator.Next = new_instancemethod(_CDM.CDM_ReferenceIterator_Next, None, CDM_ReferenceIterator)
CDM_ReferenceIterator.ReferenceIdentifier = new_instancemethod(_CDM.CDM_ReferenceIterator_ReferenceIdentifier, None, CDM_ReferenceIterator)
CDM_ReferenceIterator_swigregister = _CDM.CDM_ReferenceIterator_swigregister
CDM_ReferenceIterator_swigregister(CDM_ReferenceIterator)



