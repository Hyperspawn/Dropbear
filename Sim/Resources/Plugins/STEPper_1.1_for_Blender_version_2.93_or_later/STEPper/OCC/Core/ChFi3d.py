# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ChFi3d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_chfi3d.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ChFi3d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ChFi3d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ChFi3d')
    _ChFi3d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ChFi3d', [dirname(__file__)])
        except ImportError:
            import _ChFi3d
            return _ChFi3d
        try:
            _mod = imp.load_module('_ChFi3d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ChFi3d = swig_import_helper()
    del swig_import_helper
else:
    import _ChFi3d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ChFi3d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ChFi3d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ChFi3d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ChFi3d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ChFi3d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ChFi3d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ChFi3d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ChFi3d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ChFi3d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ChFi3d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ChFi3d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ChFi3d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ChFi3d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ChFi3d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ChFi3d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ChFi3d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ChFi3d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ChFi3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ChFi3d.process_exception(error, method_name, class_name)
process_exception = _ChFi3d.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.TopoDS
import OCC.Core.TopLoc
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.TopOpeBRepBuild
import OCC.Core.TopOpeBRepDS
import OCC.Core.TopOpeBRepTool
import OCC.Core.TopTools
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
import OCC.Core.IntCurvesFace
import OCC.Core.TopExp
import OCC.Core.Extrema
import OCC.Core.ChFiDS
import OCC.Core.Law
import OCC.Core.BRepBlend
import OCC.Core.BlendFunc
import OCC.Core.Convert
import OCC.Core.Blend
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.AppParCurves
import OCC.Core.AppBlend
import OCC.Core.GeomFill
import OCC.Core.TColGeom
ChFi3d_Rational = _ChFi3d.ChFi3d_Rational
ChFi3d_QuasiAngular = _ChFi3d.ChFi3d_QuasiAngular
ChFi3d_Polynomial = _ChFi3d.ChFi3d_Polynomial
class chfi3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConcaveSide(*args) -> "Standard_Integer":
        """
        * Returns Reversed in Or1 and(or) Or2 if the concave edge defined by the interior of faces F1 and F2, in the neighbourhood of their boundary E is of the edge opposite to the normal of their surface support. The orientation of faces is not taken into consideration in the calculation. The function returns 0 if the calculation fails (tangence), if not, it returns the number of choice of the fillet or chamfer corresponding to the orientations calculated and to the tangent to the guide line read in E.
        	:param S1:
        	:type S1: BRepAdaptor_Surface
        	:param S2:
        	:type S2: BRepAdaptor_Surface
        	:param E:
        	:type E: TopoDS_Edge
        	:param Or1:
        	:type Or1: TopAbs_Orientation
        	:param Or2:
        	:type Or2: TopAbs_Orientation
        	:rtype: int
        """
        return _ChFi3d.chfi3d_ConcaveSide(*args)

    ConcaveSide = staticmethod(ConcaveSide)

    def NextSide(*args) -> "void":
        """
        * Same as ConcaveSide, but the orientations are logically deduced from the result of the call of ConcaveSide on the first pair of faces of the fillet or chamnfer.
        	:param Or1:
        	:type Or1: TopAbs_Orientation
        	:param Or2:
        	:type Or2: TopAbs_Orientation
        	:param OrSave1:
        	:type OrSave1: TopAbs_Orientation
        	:param OrSave2:
        	:type OrSave2: TopAbs_Orientation
        	:param ChoixSauv:
        	:type ChoixSauv: int
        	:rtype: int
        * Same as the other NextSide, but the calculation is done on an edge only.
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:param OrSave:
        	:type OrSave: TopAbs_Orientation
        	:param OrFace:
        	:type OrFace: TopAbs_Orientation
        	:rtype: void
        """
        return _ChFi3d.chfi3d_NextSide(*args)

    NextSide = staticmethod(NextSide)

    def SameSide(*args) -> "Standard_Boolean":
        """
        * Enables to determine while processing an angle, if two fillets or chamfers constituting a face have identic or opposed concave edges.
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:param OrSave1:
        	:type OrSave1: TopAbs_Orientation
        	:param OrSave2:
        	:type OrSave2: TopAbs_Orientation
        	:param OrFace1:
        	:type OrFace1: TopAbs_Orientation
        	:param OrFace2:
        	:type OrFace2: TopAbs_Orientation
        	:rtype: bool
        """
        return _ChFi3d.chfi3d_SameSide(*args)

    SameSide = staticmethod(SameSide)

    __repr__ = _dumps_object


    def __init__(self):
        _ChFi3d.chfi3d_swiginit(self, _ChFi3d.new_chfi3d())
    __swig_destroy__ = _ChFi3d.delete_chfi3d
chfi3d_swigregister = _ChFi3d.chfi3d_swigregister
chfi3d_swigregister(chfi3d)

def chfi3d_ConcaveSide(*args) -> "Standard_Integer":
    """
    * Returns Reversed in Or1 and(or) Or2 if the concave edge defined by the interior of faces F1 and F2, in the neighbourhood of their boundary E is of the edge opposite to the normal of their surface support. The orientation of faces is not taken into consideration in the calculation. The function returns 0 if the calculation fails (tangence), if not, it returns the number of choice of the fillet or chamfer corresponding to the orientations calculated and to the tangent to the guide line read in E.
    	:param S1:
    	:type S1: BRepAdaptor_Surface
    	:param S2:
    	:type S2: BRepAdaptor_Surface
    	:param E:
    	:type E: TopoDS_Edge
    	:param Or1:
    	:type Or1: TopAbs_Orientation
    	:param Or2:
    	:type Or2: TopAbs_Orientation
    	:rtype: int
    """
    return _ChFi3d.chfi3d_ConcaveSide(*args)

def chfi3d_NextSide(*args) -> "void":
    """
    * Same as ConcaveSide, but the orientations are logically deduced from the result of the call of ConcaveSide on the first pair of faces of the fillet or chamnfer.
    	:param Or1:
    	:type Or1: TopAbs_Orientation
    	:param Or2:
    	:type Or2: TopAbs_Orientation
    	:param OrSave1:
    	:type OrSave1: TopAbs_Orientation
    	:param OrSave2:
    	:type OrSave2: TopAbs_Orientation
    	:param ChoixSauv:
    	:type ChoixSauv: int
    	:rtype: int
    * Same as the other NextSide, but the calculation is done on an edge only.
    	:param Or:
    	:type Or: TopAbs_Orientation
    	:param OrSave:
    	:type OrSave: TopAbs_Orientation
    	:param OrFace:
    	:type OrFace: TopAbs_Orientation
    	:rtype: void
    """
    return _ChFi3d.chfi3d_NextSide(*args)

def chfi3d_SameSide(*args) -> "Standard_Boolean":
    """
    * Enables to determine while processing an angle, if two fillets or chamfers constituting a face have identic or opposed concave edges.
    	:param Or:
    	:type Or: TopAbs_Orientation
    	:param OrSave1:
    	:type OrSave1: TopAbs_Orientation
    	:param OrSave2:
    	:type OrSave2: TopAbs_Orientation
    	:param OrFace1:
    	:type OrFace1: TopAbs_Orientation
    	:param OrFace2:
    	:type OrFace2: TopAbs_Orientation
    	:rtype: bool
    """
    return _ChFi3d.chfi3d_SameSide(*args)

class ChFi3d_Builder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Abscissa(self, *args) -> "Standard_Real":
        """
        * returns the abscissa of the vertex V on the contour of index IC.
        	:param IC:
        	:type IC: int
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: float
        """
        return _ChFi3d.ChFi3d_Builder_Abscissa(self, *args)


    def BadShape(self, *args) -> "TopoDS_Shape":
        """
        * if (HasResult()) returns partial result if (!HasResult())
        	:rtype: TopoDS_Shape
        """
        return _ChFi3d.ChFi3d_Builder_BadShape(self, *args)


    def Builder(self, *args) -> "opencascade::handle< TopOpeBRepBuild_HBuilder >":
        """
        * Returns the Builder of topologic operations.
        	:rtype: opencascade::handle<TopOpeBRepBuild_HBuilder>
        """
        return _ChFi3d.ChFi3d_Builder_Builder(self, *args)


    def Closed(self, *args) -> "Standard_Boolean":
        """
        * returns true if the contour of index IC is closed
        	:param IC:
        	:type IC: int
        	:rtype: bool
        """
        return _ChFi3d.ChFi3d_Builder_Closed(self, *args)


    def ClosedAndTangent(self, *args) -> "Standard_Boolean":
        """
        * returns true if the contour of index IC is closed an tangent.
        	:param IC:
        	:type IC: int
        	:rtype: bool
        """
        return _ChFi3d.ChFi3d_Builder_ClosedAndTangent(self, *args)


    def Compute(self, *args) -> "void":
        """
        * general calculation of geometry on all edges, topologic reconstruction.
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_Builder_Compute(self, *args)


    def ComputedSurface(self, *args) -> "opencascade::handle< Geom_Surface >":
        """
        * Returns the IS'th surface calculated on the contour IC.
        	:param IC:
        	:type IC: int
        	:param IS:
        	:type IS: int
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _ChFi3d.ChFi3d_Builder_ComputedSurface(self, *args)


    def Contains(self, *args) -> "Standard_Integer":
        """
        * gives the number of the contour containing E or 0 if E does not belong to any contour.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: int
        * gives the number of the contour containing E or 0 if E does not belong to any contour. Sets in IndexInSpine the index of E in the contour if it's found
        	:param E:
        	:type E: TopoDS_Edge
        	:param IndexInSpine:
        	:type IndexInSpine: int
        	:rtype: int
        """
        return _ChFi3d.ChFi3d_Builder_Contains(self, *args)


    def FaultyContour(self, *args) -> "Standard_Integer":
        """
        * Returns the number of I'th contour on which the calculation has failed.
        	:param I:
        	:type I: int
        	:rtype: int
        """
        return _ChFi3d.ChFi3d_Builder_FaultyContour(self, *args)


    def FaultyVertex(self, *args) -> "TopoDS_Vertex":
        """
        * Returns the IV'th vertex on which the calculation has failed.
        	:param IV:
        	:type IV: int
        	:rtype: TopoDS_Vertex
        """
        return _ChFi3d.ChFi3d_Builder_FaultyVertex(self, *args)


    def FirstVertex(self, *args) -> "TopoDS_Vertex":
        """
        * returns the First vertex V of the contour of index IC.
        	:param IC:
        	:type IC: int
        	:rtype: TopoDS_Vertex
        """
        return _ChFi3d.ChFi3d_Builder_FirstVertex(self, *args)


    def Generated(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Advanced function for the history
        	:param EouV:
        	:type EouV: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _ChFi3d.ChFi3d_Builder_Generated(self, *args)


    def HasResult(self, *args) -> "Standard_Boolean":
        """
        * returns True if a partial result has been calculated
        	:rtype: bool
        """
        return _ChFi3d.ChFi3d_Builder_HasResult(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * returns True if the computation is success
        	:rtype: bool
        """
        return _ChFi3d.ChFi3d_Builder_IsDone(self, *args)


    def LastVertex(self, *args) -> "TopoDS_Vertex":
        """
        * returns the Last vertex V of the contour of index IC.
        	:param IC:
        	:type IC: int
        	:rtype: TopoDS_Vertex
        """
        return _ChFi3d.ChFi3d_Builder_LastVertex(self, *args)


    def Length(self, *args) -> "Standard_Real":
        """
        * returns the length of the contour of index IC.
        	:param IC:
        	:type IC: int
        	:rtype: float
        """
        return _ChFi3d.ChFi3d_Builder_Length(self, *args)


    def NbComputedSurfaces(self, *args) -> "Standard_Integer":
        """
        * Returns the number of surfaces calculated on the contour IC.
        	:param IC:
        	:type IC: int
        	:rtype: int
        """
        return _ChFi3d.ChFi3d_Builder_NbComputedSurfaces(self, *args)


    def NbElements(self, *args) -> "Standard_Integer":
        """
        * gives the number of disjoint contours on which the fillets are calculated
        	:rtype: int
        """
        return _ChFi3d.ChFi3d_Builder_NbElements(self, *args)


    def NbFaultyContours(self, *args) -> "Standard_Integer":
        """
        * Returns the number of contours on which the calculation has failed.
        	:rtype: int
        """
        return _ChFi3d.ChFi3d_Builder_NbFaultyContours(self, *args)


    def NbFaultyVertices(self, *args) -> "Standard_Integer":
        """
        * Returns the number of vertices on which the calculation has failed.
        	:rtype: int
        """
        return _ChFi3d.ChFi3d_Builder_NbFaultyVertices(self, *args)


    def PerformTwoCornerbyInter(self, *args) -> "Standard_Boolean":
        """
        :param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _ChFi3d.ChFi3d_Builder_PerformTwoCornerbyInter(self, *args)


    def RelativeAbscissa(self, *args) -> "Standard_Real":
        """
        * returns the relative abscissa([0.,1.]) of the vertex V on the contour of index IC.
        	:param IC:
        	:type IC: int
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: float
        """
        return _ChFi3d.ChFi3d_Builder_RelativeAbscissa(self, *args)


    def Remove(self, *args) -> "void":
        """
        * extracts from the list the contour containing edge E.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_Builder_Remove(self, *args)


    def Reset(self, *args) -> "void":
        """
        * Reset all results of compute and returns the algorythm in the state of the last acquisition to enable modification of contours or areas.
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_Builder_Reset(self, *args)


    def SetContinuity(self, *args) -> "void":
        """
        :param InternalContinuity:
        	:type InternalContinuity: GeomAbs_Shape
        	:param AngularTolerance:
        	:type AngularTolerance: float
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_Builder_SetContinuity(self, *args)


    def SetParams(self, *args) -> "void":
        """
        :param Tang:
        	:type Tang: float
        	:param Tesp:
        	:type Tesp: float
        	:param T2d:
        	:type T2d: float
        	:param TApp3d:
        	:type TApp3d: float
        	:param TolApp2d:
        	:type TolApp2d: float
        	:param Fleche:
        	:type Fleche: float
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_Builder_SetParams(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * if (Isdone()) makes the result. if (!Isdone())
        	:rtype: TopoDS_Shape
        """
        return _ChFi3d.ChFi3d_Builder_Shape(self, *args)


    def SplitKPart(self, *args) -> "Standard_Boolean":
        """
        * Method, implemented in the inheritants, calculates the elements of construction of the surface (fillet or chamfer).
        	:param Data:
        	:type Data: ChFiDS_SurfData
        	:param SetData:
        	:type SetData: ChFiDS_SequenceOfSurfData
        	:param Spine:
        	:type Spine: ChFiDS_Spine
        	:param Iedge:
        	:type Iedge: int
        	:param S1:
        	:type S1: Adaptor3d_HSurface
        	:param I1:
        	:type I1: Adaptor3d_TopolTool
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param I2:
        	:type I2: Adaptor3d_TopolTool
        	:param Intf:
        	:type Intf: bool
        	:param Intl:
        	:type Intl: bool
        	:rtype: bool
        """
        return _ChFi3d.ChFi3d_Builder_SplitKPart(self, *args)


    def StripeStatus(self, *args) -> "ChFiDS_ErrorStatus":
        """
        * for the stripe IC ,indication on the cause of failure WalkingFailure,TwistedSurface,Error, Ok
        	:param IC:
        	:type IC: int
        	:rtype: ChFiDS_ErrorStatus
        """
        return _ChFi3d.ChFi3d_Builder_StripeStatus(self, *args)


    def Value(self, *args) -> "opencascade::handle< ChFiDS_Spine >":
        """
        * gives the n'th set of edges (contour) if I >NbElements()
        	:param I:
        	:type I: int
        	:rtype: opencascade::handle<ChFiDS_Spine>
        """
        return _ChFi3d.ChFi3d_Builder_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi3d.delete_ChFi3d_Builder
ChFi3d_Builder.Abscissa = new_instancemethod(_ChFi3d.ChFi3d_Builder_Abscissa, None, ChFi3d_Builder)
ChFi3d_Builder.BadShape = new_instancemethod(_ChFi3d.ChFi3d_Builder_BadShape, None, ChFi3d_Builder)
ChFi3d_Builder.Builder = new_instancemethod(_ChFi3d.ChFi3d_Builder_Builder, None, ChFi3d_Builder)
ChFi3d_Builder.Closed = new_instancemethod(_ChFi3d.ChFi3d_Builder_Closed, None, ChFi3d_Builder)
ChFi3d_Builder.ClosedAndTangent = new_instancemethod(_ChFi3d.ChFi3d_Builder_ClosedAndTangent, None, ChFi3d_Builder)
ChFi3d_Builder.Compute = new_instancemethod(_ChFi3d.ChFi3d_Builder_Compute, None, ChFi3d_Builder)
ChFi3d_Builder.ComputedSurface = new_instancemethod(_ChFi3d.ChFi3d_Builder_ComputedSurface, None, ChFi3d_Builder)
ChFi3d_Builder.Contains = new_instancemethod(_ChFi3d.ChFi3d_Builder_Contains, None, ChFi3d_Builder)
ChFi3d_Builder.FaultyContour = new_instancemethod(_ChFi3d.ChFi3d_Builder_FaultyContour, None, ChFi3d_Builder)
ChFi3d_Builder.FaultyVertex = new_instancemethod(_ChFi3d.ChFi3d_Builder_FaultyVertex, None, ChFi3d_Builder)
ChFi3d_Builder.FirstVertex = new_instancemethod(_ChFi3d.ChFi3d_Builder_FirstVertex, None, ChFi3d_Builder)
ChFi3d_Builder.Generated = new_instancemethod(_ChFi3d.ChFi3d_Builder_Generated, None, ChFi3d_Builder)
ChFi3d_Builder.HasResult = new_instancemethod(_ChFi3d.ChFi3d_Builder_HasResult, None, ChFi3d_Builder)
ChFi3d_Builder.IsDone = new_instancemethod(_ChFi3d.ChFi3d_Builder_IsDone, None, ChFi3d_Builder)
ChFi3d_Builder.LastVertex = new_instancemethod(_ChFi3d.ChFi3d_Builder_LastVertex, None, ChFi3d_Builder)
ChFi3d_Builder.Length = new_instancemethod(_ChFi3d.ChFi3d_Builder_Length, None, ChFi3d_Builder)
ChFi3d_Builder.NbComputedSurfaces = new_instancemethod(_ChFi3d.ChFi3d_Builder_NbComputedSurfaces, None, ChFi3d_Builder)
ChFi3d_Builder.NbElements = new_instancemethod(_ChFi3d.ChFi3d_Builder_NbElements, None, ChFi3d_Builder)
ChFi3d_Builder.NbFaultyContours = new_instancemethod(_ChFi3d.ChFi3d_Builder_NbFaultyContours, None, ChFi3d_Builder)
ChFi3d_Builder.NbFaultyVertices = new_instancemethod(_ChFi3d.ChFi3d_Builder_NbFaultyVertices, None, ChFi3d_Builder)
ChFi3d_Builder.PerformTwoCornerbyInter = new_instancemethod(_ChFi3d.ChFi3d_Builder_PerformTwoCornerbyInter, None, ChFi3d_Builder)
ChFi3d_Builder.RelativeAbscissa = new_instancemethod(_ChFi3d.ChFi3d_Builder_RelativeAbscissa, None, ChFi3d_Builder)
ChFi3d_Builder.Remove = new_instancemethod(_ChFi3d.ChFi3d_Builder_Remove, None, ChFi3d_Builder)
ChFi3d_Builder.Reset = new_instancemethod(_ChFi3d.ChFi3d_Builder_Reset, None, ChFi3d_Builder)
ChFi3d_Builder.SetContinuity = new_instancemethod(_ChFi3d.ChFi3d_Builder_SetContinuity, None, ChFi3d_Builder)
ChFi3d_Builder.SetParams = new_instancemethod(_ChFi3d.ChFi3d_Builder_SetParams, None, ChFi3d_Builder)
ChFi3d_Builder.Shape = new_instancemethod(_ChFi3d.ChFi3d_Builder_Shape, None, ChFi3d_Builder)
ChFi3d_Builder.SplitKPart = new_instancemethod(_ChFi3d.ChFi3d_Builder_SplitKPart, None, ChFi3d_Builder)
ChFi3d_Builder.StripeStatus = new_instancemethod(_ChFi3d.ChFi3d_Builder_StripeStatus, None, ChFi3d_Builder)
ChFi3d_Builder.Value = new_instancemethod(_ChFi3d.ChFi3d_Builder_Value, None, ChFi3d_Builder)
ChFi3d_Builder_swigregister = _ChFi3d.ChFi3d_Builder_swigregister
ChFi3d_Builder_swigregister(ChFi3d_Builder)

class ChFi3d_SearchSing(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C1:
        	:type C1: Geom_Curve
        	:param C2:
        	:type C2: Geom_Curve
        	:rtype: None
        """
        _ChFi3d.ChFi3d_SearchSing_swiginit(self, _ChFi3d.new_ChFi3d_SearchSing(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi3d.delete_ChFi3d_SearchSing
ChFi3d_SearchSing_swigregister = _ChFi3d.ChFi3d_SearchSing_swigregister
ChFi3d_SearchSing_swigregister(ChFi3d_SearchSing)

class ChFi3d_ChBuilder(ChFi3d_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * initializes a contour with the edge <E> as first (the next are found by propagation ). The two distances (parameters of the chamfer) must be set after. if the edge <E> has more than 2 adjacent faces
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        * initializes a new contour with the edge <E> as first (the next are found by propagation ), and the distance <Dis> if the edge <E> has more than 2 adjacent faces
        	:param Dis:
        	:type Dis: float
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        * initializes a new contour with the edge <E> as first (the next are found by propagation ), and the distance <Dis1> and <Dis2> if the edge <E> has more than 2 adjacent faces
        	:param Dis1:
        	:type Dis1: float
        	:param Dis2:
        	:type Dis2: float
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_ChBuilder_Add(self, *args)


    def AddDA(self, *args) -> "void":
        """
        * initializes a new contour with the edge <E> as first (the next are found by propagation ), and the distance <Dis1> and <Angle> if the edge <E> has more than 2 adjacent faces
        	:param Dis:
        	:type Dis: float
        	:param Angle:
        	:type Angle: float
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_ChBuilder_AddDA(self, *args)


    def __init__(self, *args):
        """
        * initializes the Builder with the Shape <S> for the computation of chamfers
        	:param S:
        	:type S: TopoDS_Shape
        	:param Ta: default value is 1.0e-2
        	:type Ta: float
        	:rtype: None
        """
        _ChFi3d.ChFi3d_ChBuilder_swiginit(self, _ChFi3d.new_ChFi3d_ChBuilder(*args))

    def Dists(self, *args) -> "void":
        """
        * gives the distances <Dis1> and <Dis2> of the fillet contour of index <IC> in the DS
        	:param IC:
        	:type IC: int
        	:param Dis1:
        	:type Dis1: float
        	:param Dis2:
        	:type Dis2: float
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_ChBuilder_Dists(self, *args)


    def GetDist(self, *args) -> "void":
        """
        * gives the distances <Dis> of the fillet contour of index <IC> in the DS
        	:param IC:
        	:type IC: int
        	:param Dis:
        	:type Dis: float
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_ChBuilder_GetDist(self, *args)


    def GetDistAngle(self, *args) -> "void":
        """
        * gives the distances <Dis> and <Angle> of the fillet contour of index <IC> in the DS
        	:param IC:
        	:type IC: int
        	:param Dis:
        	:type Dis: float
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_ChBuilder_GetDistAngle(self, *args)


    def IsChamfer(self, *args) -> "ChFiDS_ChamfMethod":
        """
        * renvoi la methode des chanfreins utilisee
        	:param IC:
        	:type IC: int
        	:rtype: ChFiDS_ChamfMethod
        """
        return _ChFi3d.ChFi3d_ChBuilder_IsChamfer(self, *args)


    def Mode(self, *args) -> "ChFiDS_ChamfMode":
        """
        * returns the mode of chamfer used
        	:rtype: ChFiDS_ChamfMode
        """
        return _ChFi3d.ChFi3d_ChBuilder_Mode(self, *args)


    def NbSurf(self, *args) -> "Standard_Integer":
        """
        :param IC:
        	:type IC: int
        	:rtype: int
        """
        return _ChFi3d.ChFi3d_ChBuilder_NbSurf(self, *args)


    def PerformSurf(self, *args) -> "void":
        """
        * Methode, implemented in inheritants, calculates the elements of construction of the surface (fillet or chamfer).
        	:param Data:
        	:type Data: ChFiDS_SequenceOfSurfData
        	:param Guide:
        	:type Guide: ChFiDS_HElSpine
        	:param Spine:
        	:type Spine: ChFiDS_Spine
        	:param Choix:
        	:type Choix: int
        	:param S1:
        	:type S1: BRepAdaptor_HSurface
        	:param I1:
        	:type I1: Adaptor3d_TopolTool
        	:param S2:
        	:type S2: BRepAdaptor_HSurface
        	:param I2:
        	:type I2: Adaptor3d_TopolTool
        	:param MaxStep:
        	:type MaxStep: float
        	:param Fleche:
        	:type Fleche: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Inside:
        	:type Inside: bool
        	:param Appro:
        	:type Appro: bool
        	:param Forward:
        	:type Forward: bool
        	:param RecOnS1:
        	:type RecOnS1: bool
        	:param RecOnS2:
        	:type RecOnS2: bool
        	:param Soldep:
        	:type Soldep: math_Vector
        	:param Intf:
        	:type Intf: int
        	:param Intl:
        	:type Intl: int
        	:rtype: bool
        * Method, implemented in the inheritants, calculates the elements of construction of the surface (fillet or chamfer) contact edge/face.
        	:param Data:
        	:type Data: ChFiDS_SequenceOfSurfData
        	:param Guide:
        	:type Guide: ChFiDS_HElSpine
        	:param Spine:
        	:type Spine: ChFiDS_Spine
        	:param Choix:
        	:type Choix: int
        	:param S1:
        	:type S1: BRepAdaptor_HSurface
        	:param I1:
        	:type I1: Adaptor3d_TopolTool
        	:param PC1:
        	:type PC1: BRepAdaptor_HCurve2d
        	:param Sref1:
        	:type Sref1: BRepAdaptor_HSurface
        	:param PCref1:
        	:type PCref1: BRepAdaptor_HCurve2d
        	:param Decroch1:
        	:type Decroch1: bool
        	:param S2:
        	:type S2: BRepAdaptor_HSurface
        	:param I2:
        	:type I2: Adaptor3d_TopolTool
        	:param Or2:
        	:type Or2: TopAbs_Orientation
        	:param MaxStep:
        	:type MaxStep: float
        	:param Fleche:
        	:type Fleche: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Inside:
        	:type Inside: bool
        	:param Appro:
        	:type Appro: bool
        	:param Forward:
        	:type Forward: bool
        	:param RecP:
        	:type RecP: bool
        	:param RecS:
        	:type RecS: bool
        	:param RecRst:
        	:type RecRst: bool
        	:param Soldep:
        	:type Soldep: math_Vector
        	:rtype: void
        * Method, implemented in inheritants, calculates the elements of construction of the surface (fillet or chamfer) contact edge/face.
        	:param Data:
        	:type Data: ChFiDS_SequenceOfSurfData
        	:param Guide:
        	:type Guide: ChFiDS_HElSpine
        	:param Spine:
        	:type Spine: ChFiDS_Spine
        	:param Choix:
        	:type Choix: int
        	:param S1:
        	:type S1: BRepAdaptor_HSurface
        	:param I1:
        	:type I1: Adaptor3d_TopolTool
        	:param Or1:
        	:type Or1: TopAbs_Orientation
        	:param S2:
        	:type S2: BRepAdaptor_HSurface
        	:param I2:
        	:type I2: Adaptor3d_TopolTool
        	:param PC2:
        	:type PC2: BRepAdaptor_HCurve2d
        	:param Sref2:
        	:type Sref2: BRepAdaptor_HSurface
        	:param PCref2:
        	:type PCref2: BRepAdaptor_HCurve2d
        	:param Decroch2:
        	:type Decroch2: bool
        	:param MaxStep:
        	:type MaxStep: float
        	:param Fleche:
        	:type Fleche: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Inside:
        	:type Inside: bool
        	:param Appro:
        	:type Appro: bool
        	:param Forward:
        	:type Forward: bool
        	:param RecP:
        	:type RecP: bool
        	:param RecS:
        	:type RecS: bool
        	:param RecRst:
        	:type RecRst: bool
        	:param Soldep:
        	:type Soldep: math_Vector
        	:rtype: void
        * Method, implemented in inheritants, calculates the elements of construction of the surface (fillet or chamfer) contact edge/edge.
        	:param Data:
        	:type Data: ChFiDS_SequenceOfSurfData
        	:param Guide:
        	:type Guide: ChFiDS_HElSpine
        	:param Spine:
        	:type Spine: ChFiDS_Spine
        	:param Choix:
        	:type Choix: int
        	:param S1:
        	:type S1: BRepAdaptor_HSurface
        	:param I1:
        	:type I1: Adaptor3d_TopolTool
        	:param PC1:
        	:type PC1: BRepAdaptor_HCurve2d
        	:param Sref1:
        	:type Sref1: BRepAdaptor_HSurface
        	:param PCref1:
        	:type PCref1: BRepAdaptor_HCurve2d
        	:param Decroch1:
        	:type Decroch1: bool
        	:param Or1:
        	:type Or1: TopAbs_Orientation
        	:param S2:
        	:type S2: BRepAdaptor_HSurface
        	:param I2:
        	:type I2: Adaptor3d_TopolTool
        	:param PC2:
        	:type PC2: BRepAdaptor_HCurve2d
        	:param Sref2:
        	:type Sref2: BRepAdaptor_HSurface
        	:param PCref2:
        	:type PCref2: BRepAdaptor_HCurve2d
        	:param Decroch2:
        	:type Decroch2: bool
        	:param Or2:
        	:type Or2: TopAbs_Orientation
        	:param MaxStep:
        	:type MaxStep: float
        	:param Fleche:
        	:type Fleche: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Inside:
        	:type Inside: bool
        	:param Appro:
        	:type Appro: bool
        	:param Forward:
        	:type Forward: bool
        	:param RecP1:
        	:type RecP1: bool
        	:param RecRst1:
        	:type RecRst1: bool
        	:param RecP2:
        	:type RecP2: bool
        	:param RecRst2:
        	:type RecRst2: bool
        	:param Soldep:
        	:type Soldep: math_Vector
        	:rtype: void
        """
        return _ChFi3d.ChFi3d_ChBuilder_PerformSurf(self, *args)


    def ResetContour(self, *args) -> "void":
        """
        * Reset tous rayons du contour IC.
        	:param IC:
        	:type IC: int
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_ChBuilder_ResetContour(self, *args)


    def Sect(self, *args) -> "opencascade::handle< ChFiDS_SecHArray1 >":
        """
        :param IC:
        	:type IC: int
        	:param IS:
        	:type IS: int
        	:rtype: opencascade::handle<ChFiDS_SecHArray1>
        """
        return _ChFi3d.ChFi3d_ChBuilder_Sect(self, *args)


    def SetDist(self, *args) -> "void":
        """
        * set the distance <Dis> of the fillet contour of index <IC> in the DS with <Dis> on <F>. if the face <F> is not one of common faces of an edge of the contour <IC>
        	:param Dis:
        	:type Dis: float
        	:param IC:
        	:type IC: int
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_ChBuilder_SetDist(self, *args)


    def SetDistAngle(self, *args) -> "void":
        """
        * set the distance <Dis> and <Angle> of the fillet contour of index <IC> in the DS with <Dis> on <F>. if the face <F> is not one of common faces of an edge of the contour <IC>
        	:param Dis:
        	:type Dis: float
        	:param Angle:
        	:type Angle: float
        	:param IC:
        	:type IC: int
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_ChBuilder_SetDistAngle(self, *args)


    def SetDists(self, *args) -> "void":
        """
        * set the distances <Dis1> and <Dis2> of the fillet contour of index <IC> in the DS with <Dis1> on <F>. if the face <F> is not one of common faces of an edge of the contour <IC>
        	:param Dis1:
        	:type Dis1: float
        	:param Dis2:
        	:type Dis2: float
        	:param IC:
        	:type IC: int
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_ChBuilder_SetDists(self, *args)


    def SetMode(self, *args) -> "void":
        """
        * set the mode of shamfer
        	:param theMode:
        	:type theMode: ChFiDS_ChamfMode
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_ChBuilder_SetMode(self, *args)


    def SimulSurf(self, *args) -> "void":
        """
        :param Data:
        	:type Data: ChFiDS_SurfData
        	:param Guide:
        	:type Guide: ChFiDS_HElSpine
        	:param Spine:
        	:type Spine: ChFiDS_Spine
        	:param Choix:
        	:type Choix: int
        	:param S1:
        	:type S1: BRepAdaptor_HSurface
        	:param I1:
        	:type I1: Adaptor3d_TopolTool
        	:param PC1:
        	:type PC1: BRepAdaptor_HCurve2d
        	:param Sref1:
        	:type Sref1: BRepAdaptor_HSurface
        	:param PCref1:
        	:type PCref1: BRepAdaptor_HCurve2d
        	:param Decroch1:
        	:type Decroch1: bool
        	:param S2:
        	:type S2: BRepAdaptor_HSurface
        	:param I2:
        	:type I2: Adaptor3d_TopolTool
        	:param Or2:
        	:type Or2: TopAbs_Orientation
        	:param Fleche:
        	:type Fleche: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Inside:
        	:type Inside: bool
        	:param Appro:
        	:type Appro: bool
        	:param Forward:
        	:type Forward: bool
        	:param RecP:
        	:type RecP: bool
        	:param RecS:
        	:type RecS: bool
        	:param RecRst:
        	:type RecRst: bool
        	:param Soldep:
        	:type Soldep: math_Vector
        	:rtype: void
        :param Data:
        	:type Data: ChFiDS_SurfData
        	:param Guide:
        	:type Guide: ChFiDS_HElSpine
        	:param Spine:
        	:type Spine: ChFiDS_Spine
        	:param Choix:
        	:type Choix: int
        	:param S1:
        	:type S1: BRepAdaptor_HSurface
        	:param I1:
        	:type I1: Adaptor3d_TopolTool
        	:param Or1:
        	:type Or1: TopAbs_Orientation
        	:param S2:
        	:type S2: BRepAdaptor_HSurface
        	:param I2:
        	:type I2: Adaptor3d_TopolTool
        	:param PC2:
        	:type PC2: BRepAdaptor_HCurve2d
        	:param Sref2:
        	:type Sref2: BRepAdaptor_HSurface
        	:param PCref2:
        	:type PCref2: BRepAdaptor_HCurve2d
        	:param Decroch2:
        	:type Decroch2: bool
        	:param Fleche:
        	:type Fleche: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Inside:
        	:type Inside: bool
        	:param Appro:
        	:type Appro: bool
        	:param Forward:
        	:type Forward: bool
        	:param RecP:
        	:type RecP: bool
        	:param RecS:
        	:type RecS: bool
        	:param RecRst:
        	:type RecRst: bool
        	:param Soldep:
        	:type Soldep: math_Vector
        	:rtype: void
        :param Data:
        	:type Data: ChFiDS_SurfData
        	:param Guide:
        	:type Guide: ChFiDS_HElSpine
        	:param Spine:
        	:type Spine: ChFiDS_Spine
        	:param Choix:
        	:type Choix: int
        	:param S1:
        	:type S1: BRepAdaptor_HSurface
        	:param I1:
        	:type I1: Adaptor3d_TopolTool
        	:param PC1:
        	:type PC1: BRepAdaptor_HCurve2d
        	:param Sref1:
        	:type Sref1: BRepAdaptor_HSurface
        	:param PCref1:
        	:type PCref1: BRepAdaptor_HCurve2d
        	:param Decroch1:
        	:type Decroch1: bool
        	:param Or1:
        	:type Or1: TopAbs_Orientation
        	:param S2:
        	:type S2: BRepAdaptor_HSurface
        	:param I2:
        	:type I2: Adaptor3d_TopolTool
        	:param PC2:
        	:type PC2: BRepAdaptor_HCurve2d
        	:param Sref2:
        	:type Sref2: BRepAdaptor_HSurface
        	:param PCref2:
        	:type PCref2: BRepAdaptor_HCurve2d
        	:param Decroch2:
        	:type Decroch2: bool
        	:param Or2:
        	:type Or2: TopAbs_Orientation
        	:param Fleche:
        	:type Fleche: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Inside:
        	:type Inside: bool
        	:param Appro:
        	:type Appro: bool
        	:param Forward:
        	:type Forward: bool
        	:param RecP1:
        	:type RecP1: bool
        	:param RecRst1:
        	:type RecRst1: bool
        	:param RecP2:
        	:type RecP2: bool
        	:param RecRst2:
        	:type RecRst2: bool
        	:param Soldep:
        	:type Soldep: math_Vector
        	:rtype: void
        """
        return _ChFi3d.ChFi3d_ChBuilder_SimulSurf(self, *args)


    def Simulate(self, *args) -> "void":
        """
        :param IC:
        	:type IC: int
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_ChBuilder_Simulate(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi3d.delete_ChFi3d_ChBuilder
ChFi3d_ChBuilder.Add = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_Add, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.AddDA = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_AddDA, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.Dists = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_Dists, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.GetDist = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_GetDist, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.GetDistAngle = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_GetDistAngle, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.IsChamfer = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_IsChamfer, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.Mode = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_Mode, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.NbSurf = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_NbSurf, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.PerformSurf = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_PerformSurf, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.ResetContour = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_ResetContour, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.Sect = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_Sect, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.SetDist = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_SetDist, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.SetDistAngle = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_SetDistAngle, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.SetDists = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_SetDists, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.SetMode = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_SetMode, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.SimulSurf = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_SimulSurf, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder.Simulate = new_instancemethod(_ChFi3d.ChFi3d_ChBuilder_Simulate, None, ChFi3d_ChBuilder)
ChFi3d_ChBuilder_swigregister = _ChFi3d.ChFi3d_ChBuilder_swigregister
ChFi3d_ChBuilder_swigregister(ChFi3d_ChBuilder)

class ChFi3d_FilBuilder(ChFi3d_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * initialisation of a contour with the first edge (the following are found by propagation). Attention, you need to start with SetRadius.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        * initialisation of the constant vector the corresponding 1st edge.
        	:param Radius:
        	:type Radius: float
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_FilBuilder_Add(self, *args)


    def __init__(self, *args):
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param FShape: default value is ChFi3d_Rational
        	:type FShape: ChFi3d_FilletShape
        	:param Ta: default value is 1.0e-2
        	:type Ta: float
        	:rtype: None
        """
        _ChFi3d.ChFi3d_FilBuilder_swiginit(self, _ChFi3d.new_ChFi3d_FilBuilder(*args))

    def GetBounds(self, *args) -> "Standard_Boolean":
        """
        * Returns in First and Last les extremities of the part of variable vector framing E, returns False if E is flagged as edge constant.
        	:param IC:
        	:type IC: int
        	:param E:
        	:type E: TopoDS_Edge
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: bool
        """
        return _ChFi3d.ChFi3d_FilBuilder_GetBounds(self, *args)


    def GetFilletShape(self, *args) -> "ChFi3d_FilletShape":
        """
        * Returns the type of fillet surface.
        	:rtype: ChFi3d_FilletShape
        """
        return _ChFi3d.ChFi3d_FilBuilder_GetFilletShape(self, *args)


    def GetLaw(self, *args) -> "opencascade::handle< Law_Function >":
        """
        * Returns the rule of elementary evolution of the part to variable vector framing E, returns a rule zero if E is flagged as edge constant.
        	:param IC:
        	:type IC: int
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: opencascade::handle<Law_Function>
        """
        return _ChFi3d.ChFi3d_FilBuilder_GetLaw(self, *args)


    def IsConstant(self, *args) -> "Standard_Boolean":
        """
        * Returns true the contour is flaged as edge constant.
        	:param IC:
        	:type IC: int
        	:rtype: bool
        * Returns true E is flagged as edge constant.
        	:param IC:
        	:type IC: int
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _ChFi3d.ChFi3d_FilBuilder_IsConstant(self, *args)


    def NbSurf(self, *args) -> "Standard_Integer":
        """
        :param IC:
        	:type IC: int
        	:rtype: int
        """
        return _ChFi3d.ChFi3d_FilBuilder_NbSurf(self, *args)


    def Radius(self, *args) -> "Standard_Real":
        """
        * Returns the vector if the contour is flagged as edge constant.
        	:param IC:
        	:type IC: int
        	:rtype: float
        * Returns the vector if E is flagged as edge constant.
        	:param IC:
        	:type IC: int
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: float
        """
        return _ChFi3d.ChFi3d_FilBuilder_Radius(self, *args)


    def ResetContour(self, *args) -> "void":
        """
        * Reset all vectors of contour IC.
        	:param IC:
        	:type IC: int
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_FilBuilder_ResetContour(self, *args)


    def Sect(self, *args) -> "opencascade::handle< ChFiDS_SecHArray1 >":
        """
        :param IC:
        	:type IC: int
        	:param IS:
        	:type IS: int
        	:rtype: opencascade::handle<ChFiDS_SecHArray1>
        """
        return _ChFi3d.ChFi3d_FilBuilder_Sect(self, *args)


    def SetFilletShape(self, *args) -> "void":
        """
        * Sets the type of fillet surface.
        	:param FShape:
        	:type FShape: ChFi3d_FilletShape
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_FilBuilder_SetFilletShape(self, *args)


    def SetLaw(self, *args) -> "void":
        """
        * Sets the rule of elementary evolution of the part to variable vector framing E.
        	:param IC:
        	:type IC: int
        	:param E:
        	:type E: TopoDS_Edge
        	:param L:
        	:type L: Law_Function
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_FilBuilder_SetLaw(self, *args)


    def SetRadius(self, *args) -> "void":
        """
        * Set the radius of the contour of index IC.
        	:param C:
        	:type C: Law_Function
        	:param IC:
        	:type IC: int
        	:param IinC:
        	:type IinC: int
        	:rtype: None
        * Set a constant on edge E of the contour of index IC. Since then E is flagged as constant.
        	:param Radius:
        	:type Radius: float
        	:param IC:
        	:type IC: int
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        * Set a vector on vertex V of the contour of index IC.
        	:param Radius:
        	:type Radius: float
        	:param IC:
        	:type IC: int
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        * Set a vertex on the point of parametre U in the edge IinC of the contour of index IC
        	:param UandR:
        	:type UandR: gp_XY
        	:param IC:
        	:type IC: int
        	:param IinC:
        	:type IinC: int
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_FilBuilder_SetRadius(self, *args)


    def Simulate(self, *args) -> "void":
        """
        :param IC:
        	:type IC: int
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_FilBuilder_Simulate(self, *args)


    def UnSet(self, *args) -> "void":
        """
        * Extracts the flag constant and the vector of edge E.
        	:param IC:
        	:type IC: int
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        * Extracts the vector of the vertex V.
        	:param IC:
        	:type IC: int
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        """
        return _ChFi3d.ChFi3d_FilBuilder_UnSet(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi3d.delete_ChFi3d_FilBuilder
ChFi3d_FilBuilder.Add = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_Add, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.GetBounds = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_GetBounds, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.GetFilletShape = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_GetFilletShape, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.GetLaw = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_GetLaw, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.IsConstant = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_IsConstant, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.NbSurf = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_NbSurf, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.Radius = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_Radius, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.ResetContour = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_ResetContour, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.Sect = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_Sect, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.SetFilletShape = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_SetFilletShape, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.SetLaw = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_SetLaw, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.SetRadius = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_SetRadius, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.Simulate = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_Simulate, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder.UnSet = new_instancemethod(_ChFi3d.ChFi3d_FilBuilder_UnSet, None, ChFi3d_FilBuilder)
ChFi3d_FilBuilder_swigregister = _ChFi3d.ChFi3d_FilBuilder_swigregister
ChFi3d_FilBuilder_swigregister(ChFi3d_FilBuilder)



