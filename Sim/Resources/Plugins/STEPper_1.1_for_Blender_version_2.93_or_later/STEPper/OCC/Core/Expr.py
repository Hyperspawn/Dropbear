# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Expr module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_expr.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Expr.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Expr')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Expr')
    _Expr = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Expr', [dirname(__file__)])
        except ImportError:
            import _Expr
            return _Expr
        try:
            _mod = imp.load_module('_Expr', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Expr = swig_import_helper()
    del swig_import_helper
else:
    import _Expr
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Expr.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Expr.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Expr.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Expr.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Expr.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Expr.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Expr.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Expr.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Expr.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Expr.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Expr.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Expr.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Expr.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Expr.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Expr.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Expr.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Expr.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Expr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Expr.process_exception(error, method_name, class_name)
process_exception = _Expr.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection

def Handle_Expr_GeneralExpression_Create() -> "opencascade::handle< Expr_GeneralExpression >":
    return _Expr.Handle_Expr_GeneralExpression_Create()
Handle_Expr_GeneralExpression_Create = _Expr.Handle_Expr_GeneralExpression_Create

def Handle_Expr_GeneralExpression_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_GeneralExpression >":
    return _Expr.Handle_Expr_GeneralExpression_DownCast(t)
Handle_Expr_GeneralExpression_DownCast = _Expr.Handle_Expr_GeneralExpression_DownCast

def Handle_Expr_GeneralExpression_IsNull(t: 'opencascade::handle< Expr_GeneralExpression > const &') -> "bool":
    return _Expr.Handle_Expr_GeneralExpression_IsNull(t)
Handle_Expr_GeneralExpression_IsNull = _Expr.Handle_Expr_GeneralExpression_IsNull

def Handle_Expr_GeneralFunction_Create() -> "opencascade::handle< Expr_GeneralFunction >":
    return _Expr.Handle_Expr_GeneralFunction_Create()
Handle_Expr_GeneralFunction_Create = _Expr.Handle_Expr_GeneralFunction_Create

def Handle_Expr_GeneralFunction_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_GeneralFunction >":
    return _Expr.Handle_Expr_GeneralFunction_DownCast(t)
Handle_Expr_GeneralFunction_DownCast = _Expr.Handle_Expr_GeneralFunction_DownCast

def Handle_Expr_GeneralFunction_IsNull(t: 'opencascade::handle< Expr_GeneralFunction > const &') -> "bool":
    return _Expr.Handle_Expr_GeneralFunction_IsNull(t)
Handle_Expr_GeneralFunction_IsNull = _Expr.Handle_Expr_GeneralFunction_IsNull

def Handle_Expr_GeneralRelation_Create() -> "opencascade::handle< Expr_GeneralRelation >":
    return _Expr.Handle_Expr_GeneralRelation_Create()
Handle_Expr_GeneralRelation_Create = _Expr.Handle_Expr_GeneralRelation_Create

def Handle_Expr_GeneralRelation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_GeneralRelation >":
    return _Expr.Handle_Expr_GeneralRelation_DownCast(t)
Handle_Expr_GeneralRelation_DownCast = _Expr.Handle_Expr_GeneralRelation_DownCast

def Handle_Expr_GeneralRelation_IsNull(t: 'opencascade::handle< Expr_GeneralRelation > const &') -> "bool":
    return _Expr.Handle_Expr_GeneralRelation_IsNull(t)
Handle_Expr_GeneralRelation_IsNull = _Expr.Handle_Expr_GeneralRelation_IsNull

def Handle_Expr_BinaryExpression_Create() -> "opencascade::handle< Expr_BinaryExpression >":
    return _Expr.Handle_Expr_BinaryExpression_Create()
Handle_Expr_BinaryExpression_Create = _Expr.Handle_Expr_BinaryExpression_Create

def Handle_Expr_BinaryExpression_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_BinaryExpression >":
    return _Expr.Handle_Expr_BinaryExpression_DownCast(t)
Handle_Expr_BinaryExpression_DownCast = _Expr.Handle_Expr_BinaryExpression_DownCast

def Handle_Expr_BinaryExpression_IsNull(t: 'opencascade::handle< Expr_BinaryExpression > const &') -> "bool":
    return _Expr.Handle_Expr_BinaryExpression_IsNull(t)
Handle_Expr_BinaryExpression_IsNull = _Expr.Handle_Expr_BinaryExpression_IsNull

def Handle_Expr_FunctionDerivative_Create() -> "opencascade::handle< Expr_FunctionDerivative >":
    return _Expr.Handle_Expr_FunctionDerivative_Create()
Handle_Expr_FunctionDerivative_Create = _Expr.Handle_Expr_FunctionDerivative_Create

def Handle_Expr_FunctionDerivative_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_FunctionDerivative >":
    return _Expr.Handle_Expr_FunctionDerivative_DownCast(t)
Handle_Expr_FunctionDerivative_DownCast = _Expr.Handle_Expr_FunctionDerivative_DownCast

def Handle_Expr_FunctionDerivative_IsNull(t: 'opencascade::handle< Expr_FunctionDerivative > const &') -> "bool":
    return _Expr.Handle_Expr_FunctionDerivative_IsNull(t)
Handle_Expr_FunctionDerivative_IsNull = _Expr.Handle_Expr_FunctionDerivative_IsNull

def Handle_Expr_NamedExpression_Create() -> "opencascade::handle< Expr_NamedExpression >":
    return _Expr.Handle_Expr_NamedExpression_Create()
Handle_Expr_NamedExpression_Create = _Expr.Handle_Expr_NamedExpression_Create

def Handle_Expr_NamedExpression_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_NamedExpression >":
    return _Expr.Handle_Expr_NamedExpression_DownCast(t)
Handle_Expr_NamedExpression_DownCast = _Expr.Handle_Expr_NamedExpression_DownCast

def Handle_Expr_NamedExpression_IsNull(t: 'opencascade::handle< Expr_NamedExpression > const &') -> "bool":
    return _Expr.Handle_Expr_NamedExpression_IsNull(t)
Handle_Expr_NamedExpression_IsNull = _Expr.Handle_Expr_NamedExpression_IsNull

def Handle_Expr_NamedFunction_Create() -> "opencascade::handle< Expr_NamedFunction >":
    return _Expr.Handle_Expr_NamedFunction_Create()
Handle_Expr_NamedFunction_Create = _Expr.Handle_Expr_NamedFunction_Create

def Handle_Expr_NamedFunction_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_NamedFunction >":
    return _Expr.Handle_Expr_NamedFunction_DownCast(t)
Handle_Expr_NamedFunction_DownCast = _Expr.Handle_Expr_NamedFunction_DownCast

def Handle_Expr_NamedFunction_IsNull(t: 'opencascade::handle< Expr_NamedFunction > const &') -> "bool":
    return _Expr.Handle_Expr_NamedFunction_IsNull(t)
Handle_Expr_NamedFunction_IsNull = _Expr.Handle_Expr_NamedFunction_IsNull

def Handle_Expr_NumericValue_Create() -> "opencascade::handle< Expr_NumericValue >":
    return _Expr.Handle_Expr_NumericValue_Create()
Handle_Expr_NumericValue_Create = _Expr.Handle_Expr_NumericValue_Create

def Handle_Expr_NumericValue_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_NumericValue >":
    return _Expr.Handle_Expr_NumericValue_DownCast(t)
Handle_Expr_NumericValue_DownCast = _Expr.Handle_Expr_NumericValue_DownCast

def Handle_Expr_NumericValue_IsNull(t: 'opencascade::handle< Expr_NumericValue > const &') -> "bool":
    return _Expr.Handle_Expr_NumericValue_IsNull(t)
Handle_Expr_NumericValue_IsNull = _Expr.Handle_Expr_NumericValue_IsNull

def Handle_Expr_PolyExpression_Create() -> "opencascade::handle< Expr_PolyExpression >":
    return _Expr.Handle_Expr_PolyExpression_Create()
Handle_Expr_PolyExpression_Create = _Expr.Handle_Expr_PolyExpression_Create

def Handle_Expr_PolyExpression_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_PolyExpression >":
    return _Expr.Handle_Expr_PolyExpression_DownCast(t)
Handle_Expr_PolyExpression_DownCast = _Expr.Handle_Expr_PolyExpression_DownCast

def Handle_Expr_PolyExpression_IsNull(t: 'opencascade::handle< Expr_PolyExpression > const &') -> "bool":
    return _Expr.Handle_Expr_PolyExpression_IsNull(t)
Handle_Expr_PolyExpression_IsNull = _Expr.Handle_Expr_PolyExpression_IsNull

def Handle_Expr_SingleRelation_Create() -> "opencascade::handle< Expr_SingleRelation >":
    return _Expr.Handle_Expr_SingleRelation_Create()
Handle_Expr_SingleRelation_Create = _Expr.Handle_Expr_SingleRelation_Create

def Handle_Expr_SingleRelation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_SingleRelation >":
    return _Expr.Handle_Expr_SingleRelation_DownCast(t)
Handle_Expr_SingleRelation_DownCast = _Expr.Handle_Expr_SingleRelation_DownCast

def Handle_Expr_SingleRelation_IsNull(t: 'opencascade::handle< Expr_SingleRelation > const &') -> "bool":
    return _Expr.Handle_Expr_SingleRelation_IsNull(t)
Handle_Expr_SingleRelation_IsNull = _Expr.Handle_Expr_SingleRelation_IsNull

def Handle_Expr_SystemRelation_Create() -> "opencascade::handle< Expr_SystemRelation >":
    return _Expr.Handle_Expr_SystemRelation_Create()
Handle_Expr_SystemRelation_Create = _Expr.Handle_Expr_SystemRelation_Create

def Handle_Expr_SystemRelation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_SystemRelation >":
    return _Expr.Handle_Expr_SystemRelation_DownCast(t)
Handle_Expr_SystemRelation_DownCast = _Expr.Handle_Expr_SystemRelation_DownCast

def Handle_Expr_SystemRelation_IsNull(t: 'opencascade::handle< Expr_SystemRelation > const &') -> "bool":
    return _Expr.Handle_Expr_SystemRelation_IsNull(t)
Handle_Expr_SystemRelation_IsNull = _Expr.Handle_Expr_SystemRelation_IsNull

def Handle_Expr_UnaryExpression_Create() -> "opencascade::handle< Expr_UnaryExpression >":
    return _Expr.Handle_Expr_UnaryExpression_Create()
Handle_Expr_UnaryExpression_Create = _Expr.Handle_Expr_UnaryExpression_Create

def Handle_Expr_UnaryExpression_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_UnaryExpression >":
    return _Expr.Handle_Expr_UnaryExpression_DownCast(t)
Handle_Expr_UnaryExpression_DownCast = _Expr.Handle_Expr_UnaryExpression_DownCast

def Handle_Expr_UnaryExpression_IsNull(t: 'opencascade::handle< Expr_UnaryExpression > const &') -> "bool":
    return _Expr.Handle_Expr_UnaryExpression_IsNull(t)
Handle_Expr_UnaryExpression_IsNull = _Expr.Handle_Expr_UnaryExpression_IsNull

def Handle_Expr_Absolute_Create() -> "opencascade::handle< Expr_Absolute >":
    return _Expr.Handle_Expr_Absolute_Create()
Handle_Expr_Absolute_Create = _Expr.Handle_Expr_Absolute_Create

def Handle_Expr_Absolute_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Absolute >":
    return _Expr.Handle_Expr_Absolute_DownCast(t)
Handle_Expr_Absolute_DownCast = _Expr.Handle_Expr_Absolute_DownCast

def Handle_Expr_Absolute_IsNull(t: 'opencascade::handle< Expr_Absolute > const &') -> "bool":
    return _Expr.Handle_Expr_Absolute_IsNull(t)
Handle_Expr_Absolute_IsNull = _Expr.Handle_Expr_Absolute_IsNull

def Handle_Expr_ArcCosine_Create() -> "opencascade::handle< Expr_ArcCosine >":
    return _Expr.Handle_Expr_ArcCosine_Create()
Handle_Expr_ArcCosine_Create = _Expr.Handle_Expr_ArcCosine_Create

def Handle_Expr_ArcCosine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArcCosine >":
    return _Expr.Handle_Expr_ArcCosine_DownCast(t)
Handle_Expr_ArcCosine_DownCast = _Expr.Handle_Expr_ArcCosine_DownCast

def Handle_Expr_ArcCosine_IsNull(t: 'opencascade::handle< Expr_ArcCosine > const &') -> "bool":
    return _Expr.Handle_Expr_ArcCosine_IsNull(t)
Handle_Expr_ArcCosine_IsNull = _Expr.Handle_Expr_ArcCosine_IsNull

def Handle_Expr_ArcSine_Create() -> "opencascade::handle< Expr_ArcSine >":
    return _Expr.Handle_Expr_ArcSine_Create()
Handle_Expr_ArcSine_Create = _Expr.Handle_Expr_ArcSine_Create

def Handle_Expr_ArcSine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArcSine >":
    return _Expr.Handle_Expr_ArcSine_DownCast(t)
Handle_Expr_ArcSine_DownCast = _Expr.Handle_Expr_ArcSine_DownCast

def Handle_Expr_ArcSine_IsNull(t: 'opencascade::handle< Expr_ArcSine > const &') -> "bool":
    return _Expr.Handle_Expr_ArcSine_IsNull(t)
Handle_Expr_ArcSine_IsNull = _Expr.Handle_Expr_ArcSine_IsNull

def Handle_Expr_ArcTangent_Create() -> "opencascade::handle< Expr_ArcTangent >":
    return _Expr.Handle_Expr_ArcTangent_Create()
Handle_Expr_ArcTangent_Create = _Expr.Handle_Expr_ArcTangent_Create

def Handle_Expr_ArcTangent_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArcTangent >":
    return _Expr.Handle_Expr_ArcTangent_DownCast(t)
Handle_Expr_ArcTangent_DownCast = _Expr.Handle_Expr_ArcTangent_DownCast

def Handle_Expr_ArcTangent_IsNull(t: 'opencascade::handle< Expr_ArcTangent > const &') -> "bool":
    return _Expr.Handle_Expr_ArcTangent_IsNull(t)
Handle_Expr_ArcTangent_IsNull = _Expr.Handle_Expr_ArcTangent_IsNull

def Handle_Expr_ArgCosh_Create() -> "opencascade::handle< Expr_ArgCosh >":
    return _Expr.Handle_Expr_ArgCosh_Create()
Handle_Expr_ArgCosh_Create = _Expr.Handle_Expr_ArgCosh_Create

def Handle_Expr_ArgCosh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArgCosh >":
    return _Expr.Handle_Expr_ArgCosh_DownCast(t)
Handle_Expr_ArgCosh_DownCast = _Expr.Handle_Expr_ArgCosh_DownCast

def Handle_Expr_ArgCosh_IsNull(t: 'opencascade::handle< Expr_ArgCosh > const &') -> "bool":
    return _Expr.Handle_Expr_ArgCosh_IsNull(t)
Handle_Expr_ArgCosh_IsNull = _Expr.Handle_Expr_ArgCosh_IsNull

def Handle_Expr_ArgSinh_Create() -> "opencascade::handle< Expr_ArgSinh >":
    return _Expr.Handle_Expr_ArgSinh_Create()
Handle_Expr_ArgSinh_Create = _Expr.Handle_Expr_ArgSinh_Create

def Handle_Expr_ArgSinh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArgSinh >":
    return _Expr.Handle_Expr_ArgSinh_DownCast(t)
Handle_Expr_ArgSinh_DownCast = _Expr.Handle_Expr_ArgSinh_DownCast

def Handle_Expr_ArgSinh_IsNull(t: 'opencascade::handle< Expr_ArgSinh > const &') -> "bool":
    return _Expr.Handle_Expr_ArgSinh_IsNull(t)
Handle_Expr_ArgSinh_IsNull = _Expr.Handle_Expr_ArgSinh_IsNull

def Handle_Expr_ArgTanh_Create() -> "opencascade::handle< Expr_ArgTanh >":
    return _Expr.Handle_Expr_ArgTanh_Create()
Handle_Expr_ArgTanh_Create = _Expr.Handle_Expr_ArgTanh_Create

def Handle_Expr_ArgTanh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArgTanh >":
    return _Expr.Handle_Expr_ArgTanh_DownCast(t)
Handle_Expr_ArgTanh_DownCast = _Expr.Handle_Expr_ArgTanh_DownCast

def Handle_Expr_ArgTanh_IsNull(t: 'opencascade::handle< Expr_ArgTanh > const &') -> "bool":
    return _Expr.Handle_Expr_ArgTanh_IsNull(t)
Handle_Expr_ArgTanh_IsNull = _Expr.Handle_Expr_ArgTanh_IsNull

def Handle_Expr_BinaryFunction_Create() -> "opencascade::handle< Expr_BinaryFunction >":
    return _Expr.Handle_Expr_BinaryFunction_Create()
Handle_Expr_BinaryFunction_Create = _Expr.Handle_Expr_BinaryFunction_Create

def Handle_Expr_BinaryFunction_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_BinaryFunction >":
    return _Expr.Handle_Expr_BinaryFunction_DownCast(t)
Handle_Expr_BinaryFunction_DownCast = _Expr.Handle_Expr_BinaryFunction_DownCast

def Handle_Expr_BinaryFunction_IsNull(t: 'opencascade::handle< Expr_BinaryFunction > const &') -> "bool":
    return _Expr.Handle_Expr_BinaryFunction_IsNull(t)
Handle_Expr_BinaryFunction_IsNull = _Expr.Handle_Expr_BinaryFunction_IsNull

def Handle_Expr_Cosh_Create() -> "opencascade::handle< Expr_Cosh >":
    return _Expr.Handle_Expr_Cosh_Create()
Handle_Expr_Cosh_Create = _Expr.Handle_Expr_Cosh_Create

def Handle_Expr_Cosh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Cosh >":
    return _Expr.Handle_Expr_Cosh_DownCast(t)
Handle_Expr_Cosh_DownCast = _Expr.Handle_Expr_Cosh_DownCast

def Handle_Expr_Cosh_IsNull(t: 'opencascade::handle< Expr_Cosh > const &') -> "bool":
    return _Expr.Handle_Expr_Cosh_IsNull(t)
Handle_Expr_Cosh_IsNull = _Expr.Handle_Expr_Cosh_IsNull

def Handle_Expr_Cosine_Create() -> "opencascade::handle< Expr_Cosine >":
    return _Expr.Handle_Expr_Cosine_Create()
Handle_Expr_Cosine_Create = _Expr.Handle_Expr_Cosine_Create

def Handle_Expr_Cosine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Cosine >":
    return _Expr.Handle_Expr_Cosine_DownCast(t)
Handle_Expr_Cosine_DownCast = _Expr.Handle_Expr_Cosine_DownCast

def Handle_Expr_Cosine_IsNull(t: 'opencascade::handle< Expr_Cosine > const &') -> "bool":
    return _Expr.Handle_Expr_Cosine_IsNull(t)
Handle_Expr_Cosine_IsNull = _Expr.Handle_Expr_Cosine_IsNull

def Handle_Expr_Difference_Create() -> "opencascade::handle< Expr_Difference >":
    return _Expr.Handle_Expr_Difference_Create()
Handle_Expr_Difference_Create = _Expr.Handle_Expr_Difference_Create

def Handle_Expr_Difference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Difference >":
    return _Expr.Handle_Expr_Difference_DownCast(t)
Handle_Expr_Difference_DownCast = _Expr.Handle_Expr_Difference_DownCast

def Handle_Expr_Difference_IsNull(t: 'opencascade::handle< Expr_Difference > const &') -> "bool":
    return _Expr.Handle_Expr_Difference_IsNull(t)
Handle_Expr_Difference_IsNull = _Expr.Handle_Expr_Difference_IsNull

def Handle_Expr_Different_Create() -> "opencascade::handle< Expr_Different >":
    return _Expr.Handle_Expr_Different_Create()
Handle_Expr_Different_Create = _Expr.Handle_Expr_Different_Create

def Handle_Expr_Different_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Different >":
    return _Expr.Handle_Expr_Different_DownCast(t)
Handle_Expr_Different_DownCast = _Expr.Handle_Expr_Different_DownCast

def Handle_Expr_Different_IsNull(t: 'opencascade::handle< Expr_Different > const &') -> "bool":
    return _Expr.Handle_Expr_Different_IsNull(t)
Handle_Expr_Different_IsNull = _Expr.Handle_Expr_Different_IsNull

def Handle_Expr_Division_Create() -> "opencascade::handle< Expr_Division >":
    return _Expr.Handle_Expr_Division_Create()
Handle_Expr_Division_Create = _Expr.Handle_Expr_Division_Create

def Handle_Expr_Division_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Division >":
    return _Expr.Handle_Expr_Division_DownCast(t)
Handle_Expr_Division_DownCast = _Expr.Handle_Expr_Division_DownCast

def Handle_Expr_Division_IsNull(t: 'opencascade::handle< Expr_Division > const &') -> "bool":
    return _Expr.Handle_Expr_Division_IsNull(t)
Handle_Expr_Division_IsNull = _Expr.Handle_Expr_Division_IsNull

def Handle_Expr_Equal_Create() -> "opencascade::handle< Expr_Equal >":
    return _Expr.Handle_Expr_Equal_Create()
Handle_Expr_Equal_Create = _Expr.Handle_Expr_Equal_Create

def Handle_Expr_Equal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Equal >":
    return _Expr.Handle_Expr_Equal_DownCast(t)
Handle_Expr_Equal_DownCast = _Expr.Handle_Expr_Equal_DownCast

def Handle_Expr_Equal_IsNull(t: 'opencascade::handle< Expr_Equal > const &') -> "bool":
    return _Expr.Handle_Expr_Equal_IsNull(t)
Handle_Expr_Equal_IsNull = _Expr.Handle_Expr_Equal_IsNull

def Handle_Expr_Exponential_Create() -> "opencascade::handle< Expr_Exponential >":
    return _Expr.Handle_Expr_Exponential_Create()
Handle_Expr_Exponential_Create = _Expr.Handle_Expr_Exponential_Create

def Handle_Expr_Exponential_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Exponential >":
    return _Expr.Handle_Expr_Exponential_DownCast(t)
Handle_Expr_Exponential_DownCast = _Expr.Handle_Expr_Exponential_DownCast

def Handle_Expr_Exponential_IsNull(t: 'opencascade::handle< Expr_Exponential > const &') -> "bool":
    return _Expr.Handle_Expr_Exponential_IsNull(t)
Handle_Expr_Exponential_IsNull = _Expr.Handle_Expr_Exponential_IsNull

def Handle_Expr_Exponentiate_Create() -> "opencascade::handle< Expr_Exponentiate >":
    return _Expr.Handle_Expr_Exponentiate_Create()
Handle_Expr_Exponentiate_Create = _Expr.Handle_Expr_Exponentiate_Create

def Handle_Expr_Exponentiate_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Exponentiate >":
    return _Expr.Handle_Expr_Exponentiate_DownCast(t)
Handle_Expr_Exponentiate_DownCast = _Expr.Handle_Expr_Exponentiate_DownCast

def Handle_Expr_Exponentiate_IsNull(t: 'opencascade::handle< Expr_Exponentiate > const &') -> "bool":
    return _Expr.Handle_Expr_Exponentiate_IsNull(t)
Handle_Expr_Exponentiate_IsNull = _Expr.Handle_Expr_Exponentiate_IsNull

def Handle_Expr_GreaterThan_Create() -> "opencascade::handle< Expr_GreaterThan >":
    return _Expr.Handle_Expr_GreaterThan_Create()
Handle_Expr_GreaterThan_Create = _Expr.Handle_Expr_GreaterThan_Create

def Handle_Expr_GreaterThan_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_GreaterThan >":
    return _Expr.Handle_Expr_GreaterThan_DownCast(t)
Handle_Expr_GreaterThan_DownCast = _Expr.Handle_Expr_GreaterThan_DownCast

def Handle_Expr_GreaterThan_IsNull(t: 'opencascade::handle< Expr_GreaterThan > const &') -> "bool":
    return _Expr.Handle_Expr_GreaterThan_IsNull(t)
Handle_Expr_GreaterThan_IsNull = _Expr.Handle_Expr_GreaterThan_IsNull

def Handle_Expr_GreaterThanOrEqual_Create() -> "opencascade::handle< Expr_GreaterThanOrEqual >":
    return _Expr.Handle_Expr_GreaterThanOrEqual_Create()
Handle_Expr_GreaterThanOrEqual_Create = _Expr.Handle_Expr_GreaterThanOrEqual_Create

def Handle_Expr_GreaterThanOrEqual_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_GreaterThanOrEqual >":
    return _Expr.Handle_Expr_GreaterThanOrEqual_DownCast(t)
Handle_Expr_GreaterThanOrEqual_DownCast = _Expr.Handle_Expr_GreaterThanOrEqual_DownCast

def Handle_Expr_GreaterThanOrEqual_IsNull(t: 'opencascade::handle< Expr_GreaterThanOrEqual > const &') -> "bool":
    return _Expr.Handle_Expr_GreaterThanOrEqual_IsNull(t)
Handle_Expr_GreaterThanOrEqual_IsNull = _Expr.Handle_Expr_GreaterThanOrEqual_IsNull

def Handle_Expr_LessThan_Create() -> "opencascade::handle< Expr_LessThan >":
    return _Expr.Handle_Expr_LessThan_Create()
Handle_Expr_LessThan_Create = _Expr.Handle_Expr_LessThan_Create

def Handle_Expr_LessThan_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_LessThan >":
    return _Expr.Handle_Expr_LessThan_DownCast(t)
Handle_Expr_LessThan_DownCast = _Expr.Handle_Expr_LessThan_DownCast

def Handle_Expr_LessThan_IsNull(t: 'opencascade::handle< Expr_LessThan > const &') -> "bool":
    return _Expr.Handle_Expr_LessThan_IsNull(t)
Handle_Expr_LessThan_IsNull = _Expr.Handle_Expr_LessThan_IsNull

def Handle_Expr_LessThanOrEqual_Create() -> "opencascade::handle< Expr_LessThanOrEqual >":
    return _Expr.Handle_Expr_LessThanOrEqual_Create()
Handle_Expr_LessThanOrEqual_Create = _Expr.Handle_Expr_LessThanOrEqual_Create

def Handle_Expr_LessThanOrEqual_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_LessThanOrEqual >":
    return _Expr.Handle_Expr_LessThanOrEqual_DownCast(t)
Handle_Expr_LessThanOrEqual_DownCast = _Expr.Handle_Expr_LessThanOrEqual_DownCast

def Handle_Expr_LessThanOrEqual_IsNull(t: 'opencascade::handle< Expr_LessThanOrEqual > const &') -> "bool":
    return _Expr.Handle_Expr_LessThanOrEqual_IsNull(t)
Handle_Expr_LessThanOrEqual_IsNull = _Expr.Handle_Expr_LessThanOrEqual_IsNull

def Handle_Expr_LogOf10_Create() -> "opencascade::handle< Expr_LogOf10 >":
    return _Expr.Handle_Expr_LogOf10_Create()
Handle_Expr_LogOf10_Create = _Expr.Handle_Expr_LogOf10_Create

def Handle_Expr_LogOf10_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_LogOf10 >":
    return _Expr.Handle_Expr_LogOf10_DownCast(t)
Handle_Expr_LogOf10_DownCast = _Expr.Handle_Expr_LogOf10_DownCast

def Handle_Expr_LogOf10_IsNull(t: 'opencascade::handle< Expr_LogOf10 > const &') -> "bool":
    return _Expr.Handle_Expr_LogOf10_IsNull(t)
Handle_Expr_LogOf10_IsNull = _Expr.Handle_Expr_LogOf10_IsNull

def Handle_Expr_LogOfe_Create() -> "opencascade::handle< Expr_LogOfe >":
    return _Expr.Handle_Expr_LogOfe_Create()
Handle_Expr_LogOfe_Create = _Expr.Handle_Expr_LogOfe_Create

def Handle_Expr_LogOfe_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_LogOfe >":
    return _Expr.Handle_Expr_LogOfe_DownCast(t)
Handle_Expr_LogOfe_DownCast = _Expr.Handle_Expr_LogOfe_DownCast

def Handle_Expr_LogOfe_IsNull(t: 'opencascade::handle< Expr_LogOfe > const &') -> "bool":
    return _Expr.Handle_Expr_LogOfe_IsNull(t)
Handle_Expr_LogOfe_IsNull = _Expr.Handle_Expr_LogOfe_IsNull

def Handle_Expr_NamedConstant_Create() -> "opencascade::handle< Expr_NamedConstant >":
    return _Expr.Handle_Expr_NamedConstant_Create()
Handle_Expr_NamedConstant_Create = _Expr.Handle_Expr_NamedConstant_Create

def Handle_Expr_NamedConstant_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_NamedConstant >":
    return _Expr.Handle_Expr_NamedConstant_DownCast(t)
Handle_Expr_NamedConstant_DownCast = _Expr.Handle_Expr_NamedConstant_DownCast

def Handle_Expr_NamedConstant_IsNull(t: 'opencascade::handle< Expr_NamedConstant > const &') -> "bool":
    return _Expr.Handle_Expr_NamedConstant_IsNull(t)
Handle_Expr_NamedConstant_IsNull = _Expr.Handle_Expr_NamedConstant_IsNull

def Handle_Expr_NamedUnknown_Create() -> "opencascade::handle< Expr_NamedUnknown >":
    return _Expr.Handle_Expr_NamedUnknown_Create()
Handle_Expr_NamedUnknown_Create = _Expr.Handle_Expr_NamedUnknown_Create

def Handle_Expr_NamedUnknown_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_NamedUnknown >":
    return _Expr.Handle_Expr_NamedUnknown_DownCast(t)
Handle_Expr_NamedUnknown_DownCast = _Expr.Handle_Expr_NamedUnknown_DownCast

def Handle_Expr_NamedUnknown_IsNull(t: 'opencascade::handle< Expr_NamedUnknown > const &') -> "bool":
    return _Expr.Handle_Expr_NamedUnknown_IsNull(t)
Handle_Expr_NamedUnknown_IsNull = _Expr.Handle_Expr_NamedUnknown_IsNull

def Handle_Expr_PolyFunction_Create() -> "opencascade::handle< Expr_PolyFunction >":
    return _Expr.Handle_Expr_PolyFunction_Create()
Handle_Expr_PolyFunction_Create = _Expr.Handle_Expr_PolyFunction_Create

def Handle_Expr_PolyFunction_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_PolyFunction >":
    return _Expr.Handle_Expr_PolyFunction_DownCast(t)
Handle_Expr_PolyFunction_DownCast = _Expr.Handle_Expr_PolyFunction_DownCast

def Handle_Expr_PolyFunction_IsNull(t: 'opencascade::handle< Expr_PolyFunction > const &') -> "bool":
    return _Expr.Handle_Expr_PolyFunction_IsNull(t)
Handle_Expr_PolyFunction_IsNull = _Expr.Handle_Expr_PolyFunction_IsNull

def Handle_Expr_Product_Create() -> "opencascade::handle< Expr_Product >":
    return _Expr.Handle_Expr_Product_Create()
Handle_Expr_Product_Create = _Expr.Handle_Expr_Product_Create

def Handle_Expr_Product_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Product >":
    return _Expr.Handle_Expr_Product_DownCast(t)
Handle_Expr_Product_DownCast = _Expr.Handle_Expr_Product_DownCast

def Handle_Expr_Product_IsNull(t: 'opencascade::handle< Expr_Product > const &') -> "bool":
    return _Expr.Handle_Expr_Product_IsNull(t)
Handle_Expr_Product_IsNull = _Expr.Handle_Expr_Product_IsNull

def Handle_Expr_Sine_Create() -> "opencascade::handle< Expr_Sine >":
    return _Expr.Handle_Expr_Sine_Create()
Handle_Expr_Sine_Create = _Expr.Handle_Expr_Sine_Create

def Handle_Expr_Sine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Sine >":
    return _Expr.Handle_Expr_Sine_DownCast(t)
Handle_Expr_Sine_DownCast = _Expr.Handle_Expr_Sine_DownCast

def Handle_Expr_Sine_IsNull(t: 'opencascade::handle< Expr_Sine > const &') -> "bool":
    return _Expr.Handle_Expr_Sine_IsNull(t)
Handle_Expr_Sine_IsNull = _Expr.Handle_Expr_Sine_IsNull

def Handle_Expr_Sinh_Create() -> "opencascade::handle< Expr_Sinh >":
    return _Expr.Handle_Expr_Sinh_Create()
Handle_Expr_Sinh_Create = _Expr.Handle_Expr_Sinh_Create

def Handle_Expr_Sinh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Sinh >":
    return _Expr.Handle_Expr_Sinh_DownCast(t)
Handle_Expr_Sinh_DownCast = _Expr.Handle_Expr_Sinh_DownCast

def Handle_Expr_Sinh_IsNull(t: 'opencascade::handle< Expr_Sinh > const &') -> "bool":
    return _Expr.Handle_Expr_Sinh_IsNull(t)
Handle_Expr_Sinh_IsNull = _Expr.Handle_Expr_Sinh_IsNull

def Handle_Expr_Square_Create() -> "opencascade::handle< Expr_Square >":
    return _Expr.Handle_Expr_Square_Create()
Handle_Expr_Square_Create = _Expr.Handle_Expr_Square_Create

def Handle_Expr_Square_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Square >":
    return _Expr.Handle_Expr_Square_DownCast(t)
Handle_Expr_Square_DownCast = _Expr.Handle_Expr_Square_DownCast

def Handle_Expr_Square_IsNull(t: 'opencascade::handle< Expr_Square > const &') -> "bool":
    return _Expr.Handle_Expr_Square_IsNull(t)
Handle_Expr_Square_IsNull = _Expr.Handle_Expr_Square_IsNull

def Handle_Expr_SquareRoot_Create() -> "opencascade::handle< Expr_SquareRoot >":
    return _Expr.Handle_Expr_SquareRoot_Create()
Handle_Expr_SquareRoot_Create = _Expr.Handle_Expr_SquareRoot_Create

def Handle_Expr_SquareRoot_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_SquareRoot >":
    return _Expr.Handle_Expr_SquareRoot_DownCast(t)
Handle_Expr_SquareRoot_DownCast = _Expr.Handle_Expr_SquareRoot_DownCast

def Handle_Expr_SquareRoot_IsNull(t: 'opencascade::handle< Expr_SquareRoot > const &') -> "bool":
    return _Expr.Handle_Expr_SquareRoot_IsNull(t)
Handle_Expr_SquareRoot_IsNull = _Expr.Handle_Expr_SquareRoot_IsNull

def Handle_Expr_Sum_Create() -> "opencascade::handle< Expr_Sum >":
    return _Expr.Handle_Expr_Sum_Create()
Handle_Expr_Sum_Create = _Expr.Handle_Expr_Sum_Create

def Handle_Expr_Sum_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Sum >":
    return _Expr.Handle_Expr_Sum_DownCast(t)
Handle_Expr_Sum_DownCast = _Expr.Handle_Expr_Sum_DownCast

def Handle_Expr_Sum_IsNull(t: 'opencascade::handle< Expr_Sum > const &') -> "bool":
    return _Expr.Handle_Expr_Sum_IsNull(t)
Handle_Expr_Sum_IsNull = _Expr.Handle_Expr_Sum_IsNull

def Handle_Expr_Tangent_Create() -> "opencascade::handle< Expr_Tangent >":
    return _Expr.Handle_Expr_Tangent_Create()
Handle_Expr_Tangent_Create = _Expr.Handle_Expr_Tangent_Create

def Handle_Expr_Tangent_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Tangent >":
    return _Expr.Handle_Expr_Tangent_DownCast(t)
Handle_Expr_Tangent_DownCast = _Expr.Handle_Expr_Tangent_DownCast

def Handle_Expr_Tangent_IsNull(t: 'opencascade::handle< Expr_Tangent > const &') -> "bool":
    return _Expr.Handle_Expr_Tangent_IsNull(t)
Handle_Expr_Tangent_IsNull = _Expr.Handle_Expr_Tangent_IsNull

def Handle_Expr_Tanh_Create() -> "opencascade::handle< Expr_Tanh >":
    return _Expr.Handle_Expr_Tanh_Create()
Handle_Expr_Tanh_Create = _Expr.Handle_Expr_Tanh_Create

def Handle_Expr_Tanh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Tanh >":
    return _Expr.Handle_Expr_Tanh_DownCast(t)
Handle_Expr_Tanh_DownCast = _Expr.Handle_Expr_Tanh_DownCast

def Handle_Expr_Tanh_IsNull(t: 'opencascade::handle< Expr_Tanh > const &') -> "bool":
    return _Expr.Handle_Expr_Tanh_IsNull(t)
Handle_Expr_Tanh_IsNull = _Expr.Handle_Expr_Tanh_IsNull

def Handle_Expr_UnaryFunction_Create() -> "opencascade::handle< Expr_UnaryFunction >":
    return _Expr.Handle_Expr_UnaryFunction_Create()
Handle_Expr_UnaryFunction_Create = _Expr.Handle_Expr_UnaryFunction_Create

def Handle_Expr_UnaryFunction_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_UnaryFunction >":
    return _Expr.Handle_Expr_UnaryFunction_DownCast(t)
Handle_Expr_UnaryFunction_DownCast = _Expr.Handle_Expr_UnaryFunction_DownCast

def Handle_Expr_UnaryFunction_IsNull(t: 'opencascade::handle< Expr_UnaryFunction > const &') -> "bool":
    return _Expr.Handle_Expr_UnaryFunction_IsNull(t)
Handle_Expr_UnaryFunction_IsNull = _Expr.Handle_Expr_UnaryFunction_IsNull

def Handle_Expr_UnaryMinus_Create() -> "opencascade::handle< Expr_UnaryMinus >":
    return _Expr.Handle_Expr_UnaryMinus_Create()
Handle_Expr_UnaryMinus_Create = _Expr.Handle_Expr_UnaryMinus_Create

def Handle_Expr_UnaryMinus_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_UnaryMinus >":
    return _Expr.Handle_Expr_UnaryMinus_DownCast(t)
Handle_Expr_UnaryMinus_DownCast = _Expr.Handle_Expr_UnaryMinus_DownCast

def Handle_Expr_UnaryMinus_IsNull(t: 'opencascade::handle< Expr_UnaryMinus > const &') -> "bool":
    return _Expr.Handle_Expr_UnaryMinus_IsNull(t)
Handle_Expr_UnaryMinus_IsNull = _Expr.Handle_Expr_UnaryMinus_IsNull
class Expr_Array1OfNamedUnknown(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Expr_Array1OfNamedUnknown_swiginit(self, _Expr.new_Expr_Array1OfNamedUnknown(*args))
    __swig_destroy__ = _Expr.delete_Expr_Array1OfNamedUnknown

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Expr_Array1OfNamedUnknown.begin = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_begin, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.end = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_end, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.cbegin = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_cbegin, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.cend = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_cend, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Init = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Init, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Size = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Size, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Length = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Length, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.IsEmpty = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_IsEmpty, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Lower = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Lower, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Upper = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Upper, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.IsDeletable = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_IsDeletable, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.IsAllocated = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_IsAllocated, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Assign = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Assign, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Move = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Move, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Set = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Set, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.First = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_First, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.ChangeFirst = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_ChangeFirst, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Last = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Last, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.ChangeLast = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_ChangeLast, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Value = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Value, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.ChangeValue = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_ChangeValue, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.__call__ = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown___call__, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.SetValue = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_SetValue, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown.Resize = new_instancemethod(_Expr.Expr_Array1OfNamedUnknown_Resize, None, Expr_Array1OfNamedUnknown)
Expr_Array1OfNamedUnknown_swigregister = _Expr.Expr_Array1OfNamedUnknown_swigregister
Expr_Array1OfNamedUnknown_swigregister(Expr_Array1OfNamedUnknown)

class Expr_MapOfNamedUnknown(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Expr_MapOfNamedUnknown_swiginit(self, _Expr.new_Expr_MapOfNamedUnknown(*args))
    __swig_destroy__ = _Expr.delete_Expr_MapOfNamedUnknown
Expr_MapOfNamedUnknown.cbegin = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_cbegin, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.cend = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_cend, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Exchange = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Exchange, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Assign = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Assign, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Set = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Set, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.ReSize = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_ReSize, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Add = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Add, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Contains = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Contains, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Substitute = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Substitute, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Swap = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Swap, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.RemoveLast = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_RemoveLast, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.RemoveFromIndex = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_RemoveFromIndex, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.RemoveKey = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_RemoveKey, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.FindKey = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_FindKey, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.__call__ = new_instancemethod(_Expr.Expr_MapOfNamedUnknown___call__, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.FindIndex = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_FindIndex, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Clear = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Clear, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown.Size = new_instancemethod(_Expr.Expr_MapOfNamedUnknown_Size, None, Expr_MapOfNamedUnknown)
Expr_MapOfNamedUnknown_swigregister = _Expr.Expr_MapOfNamedUnknown_swigregister
Expr_MapOfNamedUnknown_swigregister(Expr_MapOfNamedUnknown)

class Expr_Array1OfGeneralExpression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Expr_Array1OfGeneralExpression_swiginit(self, _Expr.new_Expr_Array1OfGeneralExpression(*args))
    __swig_destroy__ = _Expr.delete_Expr_Array1OfGeneralExpression

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Expr_Array1OfGeneralExpression.begin = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_begin, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.end = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_end, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.cbegin = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_cbegin, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.cend = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_cend, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Init = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Init, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Size = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Size, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Length = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Length, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.IsEmpty = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_IsEmpty, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Lower = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Lower, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Upper = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Upper, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.IsDeletable = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_IsDeletable, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.IsAllocated = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_IsAllocated, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Assign = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Assign, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Move = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Move, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Set = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Set, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.First = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_First, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.ChangeFirst = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_ChangeFirst, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Last = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Last, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.ChangeLast = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_ChangeLast, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Value = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Value, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.ChangeValue = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_ChangeValue, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.__call__ = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression___call__, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.SetValue = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_SetValue, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression.Resize = new_instancemethod(_Expr.Expr_Array1OfGeneralExpression_Resize, None, Expr_Array1OfGeneralExpression)
Expr_Array1OfGeneralExpression_swigregister = _Expr.Expr_Array1OfGeneralExpression_swigregister
Expr_Array1OfGeneralExpression_swigregister(Expr_Array1OfGeneralExpression)

class Expr_Array1OfSingleRelation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Expr_Array1OfSingleRelation_swiginit(self, _Expr.new_Expr_Array1OfSingleRelation(*args))
    __swig_destroy__ = _Expr.delete_Expr_Array1OfSingleRelation

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Expr_Array1OfSingleRelation.begin = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_begin, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.end = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_end, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.cbegin = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_cbegin, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.cend = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_cend, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Init = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Init, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Size = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Size, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Length = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Length, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.IsEmpty = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_IsEmpty, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Lower = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Lower, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Upper = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Upper, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.IsDeletable = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_IsDeletable, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.IsAllocated = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_IsAllocated, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Assign = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Assign, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Move = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Move, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Set = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Set, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.First = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_First, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.ChangeFirst = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_ChangeFirst, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Last = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Last, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.ChangeLast = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_ChangeLast, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Value = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Value, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.ChangeValue = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_ChangeValue, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.__call__ = new_instancemethod(_Expr.Expr_Array1OfSingleRelation___call__, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.SetValue = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_SetValue, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation.Resize = new_instancemethod(_Expr.Expr_Array1OfSingleRelation_Resize, None, Expr_Array1OfSingleRelation)
Expr_Array1OfSingleRelation_swigregister = _Expr.Expr_Array1OfSingleRelation_swigregister
Expr_Array1OfSingleRelation_swigregister(Expr_Array1OfSingleRelation)

class Expr_SequenceOfGeneralRelation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Expr_SequenceOfGeneralRelation_swiginit(self, _Expr.new_Expr_SequenceOfGeneralRelation(*args))
    delNode = staticmethod(_Expr.Expr_SequenceOfGeneralRelation_delNode)
    __swig_destroy__ = _Expr.delete_Expr_SequenceOfGeneralRelation
Expr_SequenceOfGeneralRelation.begin = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_begin, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.end = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_end, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.cbegin = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_cbegin, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.cend = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_cend, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Size = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Size, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Length = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Length, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Lower = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Lower, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Upper = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Upper, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.IsEmpty = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_IsEmpty, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Reverse = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Reverse, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Exchange = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Exchange, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Clear = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Clear, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Assign = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Assign, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Set = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Set, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Remove = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Remove, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Append = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Append, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Prepend = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Prepend, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.InsertBefore = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_InsertBefore, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.InsertAfter = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_InsertAfter, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Split = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Split, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.First = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_First, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.ChangeFirst = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_ChangeFirst, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Last = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Last, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.ChangeLast = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_ChangeLast, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.Value = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_Value, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.ChangeValue = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_ChangeValue, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.__call__ = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation___call__, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation.SetValue = new_instancemethod(_Expr.Expr_SequenceOfGeneralRelation_SetValue, None, Expr_SequenceOfGeneralRelation)
Expr_SequenceOfGeneralRelation_swigregister = _Expr.Expr_SequenceOfGeneralRelation_swigregister
Expr_SequenceOfGeneralRelation_swigregister(Expr_SequenceOfGeneralRelation)

def Expr_SequenceOfGeneralRelation_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Expr.Expr_SequenceOfGeneralRelation_delNode(theNode, theAl)
Expr_SequenceOfGeneralRelation_delNode = _Expr.Expr_SequenceOfGeneralRelation_delNode

class Expr_SequenceOfGeneralExpression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Expr.Expr_SequenceOfGeneralExpression_swiginit(self, _Expr.new_Expr_SequenceOfGeneralExpression(*args))
    delNode = staticmethod(_Expr.Expr_SequenceOfGeneralExpression_delNode)
    __swig_destroy__ = _Expr.delete_Expr_SequenceOfGeneralExpression
Expr_SequenceOfGeneralExpression.begin = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_begin, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.end = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_end, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.cbegin = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_cbegin, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.cend = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_cend, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Size = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Size, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Length = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Length, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Lower = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Lower, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Upper = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Upper, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.IsEmpty = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_IsEmpty, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Reverse = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Reverse, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Exchange = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Exchange, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Clear = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Clear, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Assign = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Assign, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Set = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Set, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Remove = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Remove, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Append = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Append, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Prepend = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Prepend, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.InsertBefore = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_InsertBefore, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.InsertAfter = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_InsertAfter, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Split = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Split, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.First = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_First, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.ChangeFirst = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_ChangeFirst, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Last = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Last, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.ChangeLast = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_ChangeLast, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.Value = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_Value, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.ChangeValue = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_ChangeValue, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.__call__ = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression___call__, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression.SetValue = new_instancemethod(_Expr.Expr_SequenceOfGeneralExpression_SetValue, None, Expr_SequenceOfGeneralExpression)
Expr_SequenceOfGeneralExpression_swigregister = _Expr.Expr_SequenceOfGeneralExpression_swigregister
Expr_SequenceOfGeneralExpression_swigregister(Expr_SequenceOfGeneralExpression)

def Expr_SequenceOfGeneralExpression_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Expr.Expr_SequenceOfGeneralExpression_delNode(theNode, theAl)
Expr_SequenceOfGeneralExpression_delNode = _Expr.Expr_SequenceOfGeneralExpression_delNode

class expr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CopyShare(*args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        :param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.expr_CopyShare(*args)

    CopyShare = staticmethod(CopyShare)

    def NbOfFreeVariables(*args) -> "Standard_Integer":
        """
        :param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: int
        :param exp:
        	:type exp: Expr_GeneralRelation
        	:rtype: int
        """
        return _Expr.expr_NbOfFreeVariables(*args)

    NbOfFreeVariables = staticmethod(NbOfFreeVariables)

    def Sign(*args) -> "Standard_Real":
        """
        :param val:
        	:type val: float
        	:rtype: float
        """
        return _Expr.expr_Sign(*args)

    Sign = staticmethod(Sign)

    __repr__ = _dumps_object


    def __init__(self):
        _Expr.expr_swiginit(self, _Expr.new_expr())
    __swig_destroy__ = _Expr.delete_expr
expr_swigregister = _Expr.expr_swigregister
expr_swigregister(expr)

def expr_CopyShare(*args) -> "opencascade::handle< Expr_GeneralExpression >":
    """
    :param exp:
    	:type exp: Expr_GeneralExpression
    	:rtype: opencascade::handle<Expr_GeneralExpression>
    """
    return _Expr.expr_CopyShare(*args)

def expr_NbOfFreeVariables(*args) -> "Standard_Integer":
    """
    :param exp:
    	:type exp: Expr_GeneralExpression
    	:rtype: int
    :param exp:
    	:type exp: Expr_GeneralRelation
    	:rtype: int
    """
    return _Expr.expr_NbOfFreeVariables(*args)

def expr_Sign(*args) -> "Standard_Real":
    """
    :param val:
    	:type val: float
    	:rtype: float
    """
    return _Expr.expr_Sign(*args)

class Expr_GeneralExpression(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Contains(self, *args) -> "Standard_Boolean":
        """
        * Tests if <exp> is contained in <self>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: bool
        """
        return _Expr.Expr_GeneralExpression_Contains(self, *args)


    def ContainsUnknowns(self, *args) -> "Standard_Boolean":
        """
        * Tests if <self> contains NamedUnknowns.
        	:rtype: bool
        """
        return _Expr.Expr_GeneralExpression_ContainsUnknowns(self, *args)


    def Copy(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        * Returns a copy of <self> having the same unknowns and functions.
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_GeneralExpression_Copy(self, *args)


    def Derivative(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        * Returns the derivative on <X> unknown of <self>
        	:param X:
        	:type X: Expr_NamedUnknown
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_GeneralExpression_Derivative(self, *args)


    def Evaluate(self, *args) -> "Standard_Real":
        """
        * Returns the value of <self> (as a Real) by replacement of <vars> by <vals>. Raises NotEvaluable if <self> contains NamedUnknown not in <vars> or NumericError if result cannot be computed.
        	:param vars:
        	:type vars: Expr_Array1OfNamedUnknown
        	:param vals:
        	:type vals: TColStd_Array1OfReal
        	:rtype: float
        """
        return _Expr.Expr_GeneralExpression_Evaluate(self, *args)


    def EvaluateNumeric(self, *args) -> "Standard_Real":
        """
        * Returns the value of <self> (as a Real) by replacement of <vars> by <vals>. Raises NotEvaluable if <self> contains NamedUnknown not in <vars> or NumericError if result cannot be computed.
        	:rtype: float
        """
        return _Expr.Expr_GeneralExpression_EvaluateNumeric(self, *args)


    def IsIdentical(self, *args) -> "Standard_Boolean":
        """
        * Tests if <self> and <Other> define the same expression. Warning: This method does not include any simplification before testing. It could also be very slow; to be used carefully.
        	:param Other:
        	:type Other: Expr_GeneralExpression
        	:rtype: bool
        """
        return _Expr.Expr_GeneralExpression_IsIdentical(self, *args)


    def IsLinear(self, *args) -> "Standard_Boolean":
        """
        * Tests if <self> is linear on every NamedUnknown it contains.
        	:rtype: bool
        """
        return _Expr.Expr_GeneralExpression_IsLinear(self, *args)


    def IsShareable(self, *args) -> "Standard_Boolean":
        """
        * Tests if <self> can be shared by one or more expressions or must be copied. This method returns False as a default value. To be redefined ( especially for NamedUnknown).
        	:rtype: bool
        """
        return _Expr.Expr_GeneralExpression_IsShareable(self, *args)


    def NDerivative(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        * Returns the <N>-th derivative on <X> unknown of <self>. Raise OutOfRange if N <= 0
        	:param X:
        	:type X: Expr_NamedUnknown
        	:param N:
        	:type N: int
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_GeneralExpression_NDerivative(self, *args)


    def NbSubExpressions(self, *args) -> "Standard_Integer":
        """
        * Returns the number of sub-expressions contained in <self> ( >= 0)
        	:rtype: int
        """
        return _Expr.Expr_GeneralExpression_NbSubExpressions(self, *args)


    def Replace(self, *args) -> "void":
        """
        * Replaces all occurences of <var> with copies of <with> in <self>. Copies of <with> are made with the Copy() method. Raises InvalidOperand if <with> contains <self>.
        	:param var:
        	:type var: Expr_NamedUnknown
        	:param with:
        	:type with: Expr_GeneralExpression
        	:rtype: void
        """
        return _Expr.Expr_GeneralExpression_Replace(self, *args)


    def ShallowSimplified(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        * Returns a GeneralExpression after a simplification of the arguments of <self>.
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_GeneralExpression_ShallowSimplified(self, *args)


    def Simplified(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        * Returns a GeneralExpression after replacement of NamedUnknowns by an associated expression and after values computation.
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_GeneralExpression_Simplified(self, *args)


    def String(self, *args) -> "TCollection_AsciiString":
        """
        * returns a string representing <self> in a readable way.
        	:rtype: TCollection_AsciiString
        """
        return _Expr.Expr_GeneralExpression_String(self, *args)


    def SubExpression(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """
        * Returns the <I>-th sub-expression of <self> raises OutOfRange if <I> > NbSubExpressions(me)
        	:param I:
        	:type I: int
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_GeneralExpression_SubExpression(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_GeneralExpression_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_GeneralExpression
Expr_GeneralExpression.Contains = new_instancemethod(_Expr.Expr_GeneralExpression_Contains, None, Expr_GeneralExpression)
Expr_GeneralExpression.ContainsUnknowns = new_instancemethod(_Expr.Expr_GeneralExpression_ContainsUnknowns, None, Expr_GeneralExpression)
Expr_GeneralExpression.Copy = new_instancemethod(_Expr.Expr_GeneralExpression_Copy, None, Expr_GeneralExpression)
Expr_GeneralExpression.Derivative = new_instancemethod(_Expr.Expr_GeneralExpression_Derivative, None, Expr_GeneralExpression)
Expr_GeneralExpression.Evaluate = new_instancemethod(_Expr.Expr_GeneralExpression_Evaluate, None, Expr_GeneralExpression)
Expr_GeneralExpression.EvaluateNumeric = new_instancemethod(_Expr.Expr_GeneralExpression_EvaluateNumeric, None, Expr_GeneralExpression)
Expr_GeneralExpression.IsIdentical = new_instancemethod(_Expr.Expr_GeneralExpression_IsIdentical, None, Expr_GeneralExpression)
Expr_GeneralExpression.IsLinear = new_instancemethod(_Expr.Expr_GeneralExpression_IsLinear, None, Expr_GeneralExpression)
Expr_GeneralExpression.IsShareable = new_instancemethod(_Expr.Expr_GeneralExpression_IsShareable, None, Expr_GeneralExpression)
Expr_GeneralExpression.NDerivative = new_instancemethod(_Expr.Expr_GeneralExpression_NDerivative, None, Expr_GeneralExpression)
Expr_GeneralExpression.NbSubExpressions = new_instancemethod(_Expr.Expr_GeneralExpression_NbSubExpressions, None, Expr_GeneralExpression)
Expr_GeneralExpression.Replace = new_instancemethod(_Expr.Expr_GeneralExpression_Replace, None, Expr_GeneralExpression)
Expr_GeneralExpression.ShallowSimplified = new_instancemethod(_Expr.Expr_GeneralExpression_ShallowSimplified, None, Expr_GeneralExpression)
Expr_GeneralExpression.Simplified = new_instancemethod(_Expr.Expr_GeneralExpression_Simplified, None, Expr_GeneralExpression)
Expr_GeneralExpression.String = new_instancemethod(_Expr.Expr_GeneralExpression_String, None, Expr_GeneralExpression)
Expr_GeneralExpression.SubExpression = new_instancemethod(_Expr.Expr_GeneralExpression_SubExpression, None, Expr_GeneralExpression)
Expr_GeneralExpression_swigregister = _Expr.Expr_GeneralExpression_swigregister
Expr_GeneralExpression_swigregister(Expr_GeneralExpression)

class Expr_GeneralFunction(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Copy(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        * Returns a copy of <self> with the same form.
        	:rtype: opencascade::handle<Expr_GeneralFunction>
        """
        return _Expr.Expr_GeneralFunction_Copy(self, *args)


    def Derivative(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        * Returns Derivative of <self> for variable <var>.
        	:param var:
        	:type var: Expr_NamedUnknown
        	:rtype: opencascade::handle<Expr_GeneralFunction>
        * Returns Derivative of <self> for variable <var> with degree <deg>.
        	:param var:
        	:type var: Expr_NamedUnknown
        	:param deg:
        	:type deg: int
        	:rtype: opencascade::handle<Expr_GeneralFunction>
        """
        return _Expr.Expr_GeneralFunction_Derivative(self, *args)


    def Evaluate(self, *args) -> "Standard_Real":
        """
        * Computes the value of <self> with the given variables. Raises NotEvaluable if <vars> does not match all variables of <self>.
        	:param vars:
        	:type vars: Expr_Array1OfNamedUnknown
        	:param vals:
        	:type vals: TColStd_Array1OfReal
        	:rtype: float
        """
        return _Expr.Expr_GeneralFunction_Evaluate(self, *args)


    def GetStringName(self, *args) -> "TCollection_AsciiString":
        """:rtype: TCollection_AsciiString"""
        return _Expr.Expr_GeneralFunction_GetStringName(self, *args)


    def IsIdentical(self, *args) -> "Standard_Boolean":
        """
        * Tests if <self> and <func> are similar functions (same name and same used expression).
        	:param func:
        	:type func: Expr_GeneralFunction
        	:rtype: bool
        """
        return _Expr.Expr_GeneralFunction_IsIdentical(self, *args)


    def IsLinearOnVariable(self, *args) -> "Standard_Boolean":
        """
        * Tests if <self> is linear on variable on range <index>
        	:param index:
        	:type index: int
        	:rtype: bool
        """
        return _Expr.Expr_GeneralFunction_IsLinearOnVariable(self, *args)


    def NbOfVariables(self, *args) -> "Standard_Integer":
        """
        * Returns the number of variables of <self>.
        	:rtype: int
        """
        return _Expr.Expr_GeneralFunction_NbOfVariables(self, *args)


    def Variable(self, *args) -> "opencascade::handle< Expr_NamedUnknown >":
        """
        * Returns the variable denoted by <index> in <self>. Raises OutOfRange if index > NbOfVariables.
        	:param index:
        	:type index: int
        	:rtype: opencascade::handle<Expr_NamedUnknown>
        """
        return _Expr.Expr_GeneralFunction_Variable(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_GeneralFunction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_GeneralFunction
Expr_GeneralFunction.Copy = new_instancemethod(_Expr.Expr_GeneralFunction_Copy, None, Expr_GeneralFunction)
Expr_GeneralFunction.Derivative = new_instancemethod(_Expr.Expr_GeneralFunction_Derivative, None, Expr_GeneralFunction)
Expr_GeneralFunction.Evaluate = new_instancemethod(_Expr.Expr_GeneralFunction_Evaluate, None, Expr_GeneralFunction)
Expr_GeneralFunction.GetStringName = new_instancemethod(_Expr.Expr_GeneralFunction_GetStringName, None, Expr_GeneralFunction)
Expr_GeneralFunction.IsIdentical = new_instancemethod(_Expr.Expr_GeneralFunction_IsIdentical, None, Expr_GeneralFunction)
Expr_GeneralFunction.IsLinearOnVariable = new_instancemethod(_Expr.Expr_GeneralFunction_IsLinearOnVariable, None, Expr_GeneralFunction)
Expr_GeneralFunction.NbOfVariables = new_instancemethod(_Expr.Expr_GeneralFunction_NbOfVariables, None, Expr_GeneralFunction)
Expr_GeneralFunction.Variable = new_instancemethod(_Expr.Expr_GeneralFunction_Variable, None, Expr_GeneralFunction)
Expr_GeneralFunction_swigregister = _Expr.Expr_GeneralFunction_swigregister
Expr_GeneralFunction_swigregister(Expr_GeneralFunction)

class Expr_GeneralRelation(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Contains(self, *args) -> "Standard_Boolean":
        """
        * Tests if <exp> contains <var>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: bool
        """
        return _Expr.Expr_GeneralRelation_Contains(self, *args)


    def Copy(self, *args) -> "opencascade::handle< Expr_GeneralRelation >":
        """
        * Returns a copy of <self> having the same unknowns and functions.
        	:rtype: opencascade::handle<Expr_GeneralRelation>
        """
        return _Expr.Expr_GeneralRelation_Copy(self, *args)


    def IsLinear(self, *args) -> "Standard_Boolean":
        """
        * Tests if <self> is linear between its NamedUnknowns.
        	:rtype: bool
        """
        return _Expr.Expr_GeneralRelation_IsLinear(self, *args)


    def IsSatisfied(self, *args) -> "Standard_Boolean":
        """
        * Returns the current status of the relation
        	:rtype: bool
        """
        return _Expr.Expr_GeneralRelation_IsSatisfied(self, *args)


    def NbOfSingleRelations(self, *args) -> "Standard_Integer":
        """
        * Returns the number of SingleRelations contained in <self>.
        	:rtype: int
        """
        return _Expr.Expr_GeneralRelation_NbOfSingleRelations(self, *args)


    def NbOfSubRelations(self, *args) -> "Standard_Integer":
        """
        * Returns the number of relations contained in <self>.
        	:rtype: int
        """
        return _Expr.Expr_GeneralRelation_NbOfSubRelations(self, *args)


    def Replace(self, *args) -> "void":
        """
        * Replaces all occurences of <var> with <with> in <self>.
        	:param var:
        	:type var: Expr_NamedUnknown
        	:param with:
        	:type with: Expr_GeneralExpression
        	:rtype: void
        """
        return _Expr.Expr_GeneralRelation_Replace(self, *args)


    def Simplified(self, *args) -> "opencascade::handle< Expr_GeneralRelation >":
        """
        * Returns a GeneralRelation after replacement of NamedUnknowns by an associated expression, and after values computation.
        	:rtype: opencascade::handle<Expr_GeneralRelation>
        """
        return _Expr.Expr_GeneralRelation_Simplified(self, *args)


    def Simplify(self, *args) -> "void":
        """
        * Replaces NamedUnknowns by associated expressions, and computes values in <self>.
        	:rtype: void
        """
        return _Expr.Expr_GeneralRelation_Simplify(self, *args)


    def String(self, *args) -> "TCollection_AsciiString":
        """
        * returns a string representing <self> in a readable way.
        	:rtype: TCollection_AsciiString
        """
        return _Expr.Expr_GeneralRelation_String(self, *args)


    def SubRelation(self, *args) -> "opencascade::handle< Expr_GeneralRelation >":
        """
        * Returns the relation denoted by <index> in <self>. An exception is raised if <index> is out of range.
        	:param index:
        	:type index: int
        	:rtype: opencascade::handle<Expr_GeneralRelation>
        """
        return _Expr.Expr_GeneralRelation_SubRelation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_GeneralRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_GeneralRelation
Expr_GeneralRelation.Contains = new_instancemethod(_Expr.Expr_GeneralRelation_Contains, None, Expr_GeneralRelation)
Expr_GeneralRelation.Copy = new_instancemethod(_Expr.Expr_GeneralRelation_Copy, None, Expr_GeneralRelation)
Expr_GeneralRelation.IsLinear = new_instancemethod(_Expr.Expr_GeneralRelation_IsLinear, None, Expr_GeneralRelation)
Expr_GeneralRelation.IsSatisfied = new_instancemethod(_Expr.Expr_GeneralRelation_IsSatisfied, None, Expr_GeneralRelation)
Expr_GeneralRelation.NbOfSingleRelations = new_instancemethod(_Expr.Expr_GeneralRelation_NbOfSingleRelations, None, Expr_GeneralRelation)
Expr_GeneralRelation.NbOfSubRelations = new_instancemethod(_Expr.Expr_GeneralRelation_NbOfSubRelations, None, Expr_GeneralRelation)
Expr_GeneralRelation.Replace = new_instancemethod(_Expr.Expr_GeneralRelation_Replace, None, Expr_GeneralRelation)
Expr_GeneralRelation.Simplified = new_instancemethod(_Expr.Expr_GeneralRelation_Simplified, None, Expr_GeneralRelation)
Expr_GeneralRelation.Simplify = new_instancemethod(_Expr.Expr_GeneralRelation_Simplify, None, Expr_GeneralRelation)
Expr_GeneralRelation.String = new_instancemethod(_Expr.Expr_GeneralRelation_String, None, Expr_GeneralRelation)
Expr_GeneralRelation.SubRelation = new_instancemethod(_Expr.Expr_GeneralRelation_SubRelation, None, Expr_GeneralRelation)
Expr_GeneralRelation_swigregister = _Expr.Expr_GeneralRelation_swigregister
Expr_GeneralRelation_swigregister(Expr_GeneralRelation)

class Expr_RUIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an iterator on every NamedUnknown contained in <rel>.
        	:param rel:
        	:type rel: Expr_GeneralRelation
        	:rtype: None
        """
        _Expr.Expr_RUIterator_swiginit(self, _Expr.new_Expr_RUIterator(*args))

    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns False if on other unknown remains.
        	:rtype: bool
        """
        return _Expr.Expr_RUIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _Expr.Expr_RUIterator_Next(self, *args)


    def Value(self, *args) -> "opencascade::handle< Expr_NamedUnknown >":
        """
        * Returns current NamedUnknown. Raises exception if no more unknowns remain.
        	:rtype: opencascade::handle<Expr_NamedUnknown>
        """
        return _Expr.Expr_RUIterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_RUIterator
Expr_RUIterator.More = new_instancemethod(_Expr.Expr_RUIterator_More, None, Expr_RUIterator)
Expr_RUIterator.Next = new_instancemethod(_Expr.Expr_RUIterator_Next, None, Expr_RUIterator)
Expr_RUIterator.Value = new_instancemethod(_Expr.Expr_RUIterator_Value, None, Expr_RUIterator)
Expr_RUIterator_swigregister = _Expr.Expr_RUIterator_swigregister
Expr_RUIterator_swigregister(Expr_RUIterator)

class Expr_RelationIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param rel:
        	:type rel: Expr_GeneralRelation
        	:rtype: None
        """
        _Expr.Expr_RelationIterator_swiginit(self, _Expr.new_Expr_RelationIterator(*args))

    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns False if no other relation remains.
        	:rtype: bool
        """
        return _Expr.Expr_RelationIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _Expr.Expr_RelationIterator_Next(self, *args)


    def Value(self, *args) -> "opencascade::handle< Expr_SingleRelation >":
        """
        * Returns current basic relation. Exception is raised if no more relation remains.
        	:rtype: opencascade::handle<Expr_SingleRelation>
        """
        return _Expr.Expr_RelationIterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_RelationIterator
Expr_RelationIterator.More = new_instancemethod(_Expr.Expr_RelationIterator_More, None, Expr_RelationIterator)
Expr_RelationIterator.Next = new_instancemethod(_Expr.Expr_RelationIterator_Next, None, Expr_RelationIterator)
Expr_RelationIterator.Value = new_instancemethod(_Expr.Expr_RelationIterator_Value, None, Expr_RelationIterator)
Expr_RelationIterator_swigregister = _Expr.Expr_RelationIterator_swigregister
Expr_RelationIterator_swigregister(Expr_RelationIterator)

class Expr_UnknownIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_UnknownIterator_swiginit(self, _Expr.new_Expr_UnknownIterator(*args))

    def More(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Expr.Expr_UnknownIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _Expr.Expr_UnknownIterator_Next(self, *args)


    def Value(self, *args) -> "opencascade::handle< Expr_NamedUnknown >":
        """:rtype: opencascade::handle<Expr_NamedUnknown>"""
        return _Expr.Expr_UnknownIterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_UnknownIterator
Expr_UnknownIterator.More = new_instancemethod(_Expr.Expr_UnknownIterator_More, None, Expr_UnknownIterator)
Expr_UnknownIterator.Next = new_instancemethod(_Expr.Expr_UnknownIterator_Next, None, Expr_UnknownIterator)
Expr_UnknownIterator.Value = new_instancemethod(_Expr.Expr_UnknownIterator_Value, None, Expr_UnknownIterator)
Expr_UnknownIterator_swigregister = _Expr.Expr_UnknownIterator_swigregister
Expr_UnknownIterator_swigregister(Expr_UnknownIterator)

class Expr_BinaryExpression(Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FirstOperand(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """:rtype: opencascade::handle<Expr_GeneralExpression>"""
        return _Expr.Expr_BinaryExpression_FirstOperand(self, *args)


    def SecondOperand(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """:rtype: opencascade::handle<Expr_GeneralExpression>"""
        return _Expr.Expr_BinaryExpression_SecondOperand(self, *args)


    def SetFirstOperand(self, *args) -> "void":
        """
        * Sets first operand of <self> Raises InvalidOperand if exp = me
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        return _Expr.Expr_BinaryExpression_SetFirstOperand(self, *args)


    def SetSecondOperand(self, *args) -> "void":
        """
        * Sets second operand of <self> Raises InvalidOperand if <exp> contains <self>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        return _Expr.Expr_BinaryExpression_SetSecondOperand(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_BinaryExpression_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_BinaryExpression
Expr_BinaryExpression.FirstOperand = new_instancemethod(_Expr.Expr_BinaryExpression_FirstOperand, None, Expr_BinaryExpression)
Expr_BinaryExpression.SecondOperand = new_instancemethod(_Expr.Expr_BinaryExpression_SecondOperand, None, Expr_BinaryExpression)
Expr_BinaryExpression.SetFirstOperand = new_instancemethod(_Expr.Expr_BinaryExpression_SetFirstOperand, None, Expr_BinaryExpression)
Expr_BinaryExpression.SetSecondOperand = new_instancemethod(_Expr.Expr_BinaryExpression_SetSecondOperand, None, Expr_BinaryExpression)
Expr_BinaryExpression_swigregister = _Expr.Expr_BinaryExpression_swigregister
Expr_BinaryExpression_swigregister(Expr_BinaryExpression)

class Expr_FunctionDerivative(Expr_GeneralFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Degree(self, *args) -> "Standard_Integer":
        """
        * Returns the degree of derivation of <self>.
        	:rtype: int
        """
        return _Expr.Expr_FunctionDerivative_Degree(self, *args)


    def DerivVariable(self, *args) -> "opencascade::handle< Expr_NamedUnknown >":
        """
        * Returns the derivation variable of <self>.
        	:rtype: opencascade::handle<Expr_NamedUnknown>
        """
        return _Expr.Expr_FunctionDerivative_DerivVariable(self, *args)


    def Derivative(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        * Returns Derivative of <self> for variable <var>.
        	:param var:
        	:type var: Expr_NamedUnknown
        	:rtype: opencascade::handle<Expr_GeneralFunction>
        * Returns Derivative of <self> for variable <var> with degree <deg>.
        	:param var:
        	:type var: Expr_NamedUnknown
        	:param deg:
        	:type deg: int
        	:rtype: opencascade::handle<Expr_GeneralFunction>
        """
        return _Expr.Expr_FunctionDerivative_Derivative(self, *args)


    def __init__(self, *args):
        """
        * Creates a FunctionDerivative of degree <deg> relative to the <withX> variable. Raises OutOfRange if <deg> lower or equal to zero.
        	:param func:
        	:type func: Expr_GeneralFunction
        	:param withX:
        	:type withX: Expr_NamedUnknown
        	:param deg:
        	:type deg: int
        	:rtype: None
        """
        _Expr.Expr_FunctionDerivative_swiginit(self, _Expr.new_Expr_FunctionDerivative(*args))

    def Expression(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """:rtype: opencascade::handle<Expr_GeneralExpression>"""
        return _Expr.Expr_FunctionDerivative_Expression(self, *args)


    def Function(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        * Returns the function of which <self> is the derivative.
        	:rtype: opencascade::handle<Expr_GeneralFunction>
        """
        return _Expr.Expr_FunctionDerivative_Function(self, *args)


    def UpdateExpression(self, *args) -> "void":
        """:rtype: None"""
        return _Expr.Expr_FunctionDerivative_UpdateExpression(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_FunctionDerivative_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_FunctionDerivative
Expr_FunctionDerivative.Degree = new_instancemethod(_Expr.Expr_FunctionDerivative_Degree, None, Expr_FunctionDerivative)
Expr_FunctionDerivative.DerivVariable = new_instancemethod(_Expr.Expr_FunctionDerivative_DerivVariable, None, Expr_FunctionDerivative)
Expr_FunctionDerivative.Derivative = new_instancemethod(_Expr.Expr_FunctionDerivative_Derivative, None, Expr_FunctionDerivative)
Expr_FunctionDerivative.Expression = new_instancemethod(_Expr.Expr_FunctionDerivative_Expression, None, Expr_FunctionDerivative)
Expr_FunctionDerivative.Function = new_instancemethod(_Expr.Expr_FunctionDerivative_Function, None, Expr_FunctionDerivative)
Expr_FunctionDerivative.UpdateExpression = new_instancemethod(_Expr.Expr_FunctionDerivative_UpdateExpression, None, Expr_FunctionDerivative)
Expr_FunctionDerivative_swigregister = _Expr.Expr_FunctionDerivative_swigregister
Expr_FunctionDerivative_swigregister(Expr_FunctionDerivative)

class Expr_NamedExpression(Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetName(self, *args) -> "TCollection_AsciiString const &":
        """:rtype: TCollection_AsciiString"""
        return _Expr.Expr_NamedExpression_GetName(self, *args)


    def SetName(self, *args) -> "void":
        """
        :param name:
        	:type name: TCollection_AsciiString
        	:rtype: None
        """
        return _Expr.Expr_NamedExpression_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_NamedExpression_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_NamedExpression
Expr_NamedExpression.GetName = new_instancemethod(_Expr.Expr_NamedExpression_GetName, None, Expr_NamedExpression)
Expr_NamedExpression.SetName = new_instancemethod(_Expr.Expr_NamedExpression_SetName, None, Expr_NamedExpression)
Expr_NamedExpression_swigregister = _Expr.Expr_NamedExpression_swigregister
Expr_NamedExpression_swigregister(Expr_NamedExpression)

class Expr_NamedFunction(Expr_GeneralFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Derivative(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        * Returns Derivative of <self> for variable <var>.
        	:param var:
        	:type var: Expr_NamedUnknown
        	:rtype: opencascade::handle<Expr_GeneralFunction>
        * Returns Derivative of <self> for variable <var> with degree <deg>.
        	:param var:
        	:type var: Expr_NamedUnknown
        	:param deg:
        	:type deg: int
        	:rtype: opencascade::handle<Expr_GeneralFunction>
        """
        return _Expr.Expr_NamedFunction_Derivative(self, *args)


    def __init__(self, *args):
        """
        * Creates a function of given variables <vars> with name <name> defined by the expression <exp>.
        	:param name:
        	:type name: TCollection_AsciiString
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:param vars:
        	:type vars: Expr_Array1OfNamedUnknown
        	:rtype: None
        """
        _Expr.Expr_NamedFunction_swiginit(self, _Expr.new_Expr_NamedFunction(*args))

    def Expression(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        * Returns equivalent expression of <self>.
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_NamedFunction_Expression(self, *args)


    def GetName(self, *args) -> "TCollection_AsciiString":
        """
        * Returns the name assigned to <self>
        	:rtype: TCollection_AsciiString
        """
        return _Expr.Expr_NamedFunction_GetName(self, *args)


    def SetExpression(self, *args) -> "void":
        """
        * Modifies expression of <self>. Warning: Beware of derivatives. See FunctionDerivative
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        return _Expr.Expr_NamedFunction_SetExpression(self, *args)


    def SetName(self, *args) -> "void":
        """
        * Sets the name <newname> to <self>.
        	:param newname:
        	:type newname: TCollection_AsciiString
        	:rtype: None
        """
        return _Expr.Expr_NamedFunction_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_NamedFunction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_NamedFunction
Expr_NamedFunction.Derivative = new_instancemethod(_Expr.Expr_NamedFunction_Derivative, None, Expr_NamedFunction)
Expr_NamedFunction.Expression = new_instancemethod(_Expr.Expr_NamedFunction_Expression, None, Expr_NamedFunction)
Expr_NamedFunction.GetName = new_instancemethod(_Expr.Expr_NamedFunction_GetName, None, Expr_NamedFunction)
Expr_NamedFunction.SetExpression = new_instancemethod(_Expr.Expr_NamedFunction_SetExpression, None, Expr_NamedFunction)
Expr_NamedFunction.SetName = new_instancemethod(_Expr.Expr_NamedFunction_SetName, None, Expr_NamedFunction)
Expr_NamedFunction_swigregister = _Expr.Expr_NamedFunction_swigregister
Expr_NamedFunction_swigregister(Expr_NamedFunction)

class Expr_NumericValue(Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param val:
        	:type val: float
        	:rtype: None
        """
        _Expr.Expr_NumericValue_swiginit(self, _Expr.new_Expr_NumericValue(*args))

    def GetValue(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _Expr.Expr_NumericValue_GetValue(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param val:
        	:type val: float
        	:rtype: None
        """
        return _Expr.Expr_NumericValue_SetValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_NumericValue_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_NumericValue
Expr_NumericValue.GetValue = new_instancemethod(_Expr.Expr_NumericValue_GetValue, None, Expr_NumericValue)
Expr_NumericValue.SetValue = new_instancemethod(_Expr.Expr_NumericValue_SetValue, None, Expr_NumericValue)
Expr_NumericValue_swigregister = _Expr.Expr_NumericValue_swigregister
Expr_NumericValue_swigregister(Expr_NumericValue)

class Expr_PolyExpression(Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NbOperands(self, *args) -> "Standard_Integer":
        """
        * returns the number of operands contained in <self>
        	:rtype: int
        """
        return _Expr.Expr_PolyExpression_NbOperands(self, *args)


    def Operand(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """
        * Returns the <index>-th operand used in <self>. An exception is raised if index is out of range
        	:param index:
        	:type index: int
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_PolyExpression_Operand(self, *args)


    def SetOperand(self, *args) -> "void":
        """
        * Sets the <index>-th operand used in <self>. An exception is raised if <index> is out of range Raises InvalidOperand if <exp> contains <self>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:param index:
        	:type index: int
        	:rtype: None
        """
        return _Expr.Expr_PolyExpression_SetOperand(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_PolyExpression_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_PolyExpression
Expr_PolyExpression.NbOperands = new_instancemethod(_Expr.Expr_PolyExpression_NbOperands, None, Expr_PolyExpression)
Expr_PolyExpression.Operand = new_instancemethod(_Expr.Expr_PolyExpression_Operand, None, Expr_PolyExpression)
Expr_PolyExpression.SetOperand = new_instancemethod(_Expr.Expr_PolyExpression_SetOperand, None, Expr_PolyExpression)
Expr_PolyExpression_swigregister = _Expr.Expr_PolyExpression_swigregister
Expr_PolyExpression_swigregister(Expr_PolyExpression)

class Expr_SingleRelation(Expr_GeneralRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FirstMember(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        * Returns the first member of the relation
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_SingleRelation_FirstMember(self, *args)


    def SecondMember(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        * Returns the second member of the relation
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_SingleRelation_SecondMember(self, *args)


    def SetFirstMember(self, *args) -> "void":
        """
        * Defines the first member of the relation
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        return _Expr.Expr_SingleRelation_SetFirstMember(self, *args)


    def SetSecondMember(self, *args) -> "void":
        """
        * Defines the second member of the relation
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        return _Expr.Expr_SingleRelation_SetSecondMember(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_SingleRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_SingleRelation
Expr_SingleRelation.FirstMember = new_instancemethod(_Expr.Expr_SingleRelation_FirstMember, None, Expr_SingleRelation)
Expr_SingleRelation.SecondMember = new_instancemethod(_Expr.Expr_SingleRelation_SecondMember, None, Expr_SingleRelation)
Expr_SingleRelation.SetFirstMember = new_instancemethod(_Expr.Expr_SingleRelation_SetFirstMember, None, Expr_SingleRelation)
Expr_SingleRelation.SetSecondMember = new_instancemethod(_Expr.Expr_SingleRelation_SetSecondMember, None, Expr_SingleRelation)
Expr_SingleRelation_swigregister = _Expr.Expr_SingleRelation_swigregister
Expr_SingleRelation_swigregister(Expr_SingleRelation)

class Expr_SystemRelation(Expr_GeneralRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Appends <relation> in the list of components of <self>.
        	:param relation:
        	:type relation: Expr_GeneralRelation
        	:rtype: None
        """
        return _Expr.Expr_SystemRelation_Add(self, *args)


    def __init__(self, *args):
        """
        * Creates a system with one relation
        	:param relation:
        	:type relation: Expr_GeneralRelation
        	:rtype: None
        """
        _Expr.Expr_SystemRelation_swiginit(self, _Expr.new_Expr_SystemRelation(*args))

    def Remove(self, *args) -> "void":
        """
        :param relation:
        	:type relation: Expr_GeneralRelation
        	:rtype: None
        """
        return _Expr.Expr_SystemRelation_Remove(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_SystemRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_SystemRelation
Expr_SystemRelation.Add = new_instancemethod(_Expr.Expr_SystemRelation_Add, None, Expr_SystemRelation)
Expr_SystemRelation.Remove = new_instancemethod(_Expr.Expr_SystemRelation_Remove, None, Expr_SystemRelation)
Expr_SystemRelation_swigregister = _Expr.Expr_SystemRelation_swigregister
Expr_SystemRelation_swigregister(Expr_SystemRelation)

class Expr_UnaryExpression(Expr_GeneralExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Operand(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """
        * Returns the operand used
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_UnaryExpression_Operand(self, *args)


    def SetOperand(self, *args) -> "void":
        """
        * Sets the operand used Raises InvalidOperand if <exp> contains <self>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        return _Expr.Expr_UnaryExpression_SetOperand(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_UnaryExpression_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_UnaryExpression
Expr_UnaryExpression.Operand = new_instancemethod(_Expr.Expr_UnaryExpression_Operand, None, Expr_UnaryExpression)
Expr_UnaryExpression.SetOperand = new_instancemethod(_Expr.Expr_UnaryExpression_SetOperand, None, Expr_UnaryExpression)
Expr_UnaryExpression_swigregister = _Expr.Expr_UnaryExpression_swigregister
Expr_UnaryExpression_swigregister(Expr_UnaryExpression)

class Expr_Absolute(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Abs of <exp>
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Absolute_swiginit(self, _Expr.new_Expr_Absolute(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Absolute_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Absolute
Expr_Absolute_swigregister = _Expr.Expr_Absolute_swigregister
Expr_Absolute_swigregister(Expr_Absolute)

class Expr_ArcCosine(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Arccos of <exp>
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_ArcCosine_swiginit(self, _Expr.new_Expr_ArcCosine(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArcCosine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArcCosine
Expr_ArcCosine_swigregister = _Expr.Expr_ArcCosine_swigregister
Expr_ArcCosine_swigregister(Expr_ArcCosine)

class Expr_ArcSine(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Arcsin of <exp>
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_ArcSine_swiginit(self, _Expr.new_Expr_ArcSine(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArcSine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArcSine
Expr_ArcSine_swigregister = _Expr.Expr_ArcSine_swigregister
Expr_ArcSine_swigregister(Expr_ArcSine)

class Expr_ArcTangent(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Arctan of <exp>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_ArcTangent_swiginit(self, _Expr.new_Expr_ArcTangent(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArcTangent_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArcTangent
Expr_ArcTangent_swigregister = _Expr.Expr_ArcTangent_swigregister
Expr_ArcTangent_swigregister(Expr_ArcTangent)

class Expr_ArgCosh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the ArgCosh of <exp>
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_ArgCosh_swiginit(self, _Expr.new_Expr_ArgCosh(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArgCosh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArgCosh
Expr_ArgCosh_swigregister = _Expr.Expr_ArgCosh_swigregister
Expr_ArgCosh_swigregister(Expr_ArgCosh)

class Expr_ArgSinh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the ArgSinh of <exp>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_ArgSinh_swiginit(self, _Expr.new_Expr_ArgSinh(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArgSinh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArgSinh
Expr_ArgSinh_swigregister = _Expr.Expr_ArgSinh_swigregister
Expr_ArgSinh_swigregister(Expr_ArgSinh)

class Expr_ArgTanh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Argtanh of <exp>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_ArgTanh_swiginit(self, _Expr.new_Expr_ArgTanh(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArgTanh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArgTanh
Expr_ArgTanh_swigregister = _Expr.Expr_ArgTanh_swigregister
Expr_ArgTanh_swigregister(Expr_ArgTanh)

class Expr_BinaryFunction(Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates <self> as <func> (<exp1>,<exp2>). Raises exception if <func> is not binary.
        	:param func:
        	:type func: Expr_GeneralFunction
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_BinaryFunction_swiginit(self, _Expr.new_Expr_BinaryFunction(*args))

    def Function(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        * Returns the function defining <self>.
        	:rtype: opencascade::handle<Expr_GeneralFunction>
        """
        return _Expr.Expr_BinaryFunction_Function(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_BinaryFunction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_BinaryFunction
Expr_BinaryFunction.Function = new_instancemethod(_Expr.Expr_BinaryFunction_Function, None, Expr_BinaryFunction)
Expr_BinaryFunction_swigregister = _Expr.Expr_BinaryFunction_swigregister
Expr_BinaryFunction_swigregister(Expr_BinaryFunction)

class Expr_Cosh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the Cosh of <exp>
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Cosh_swiginit(self, _Expr.new_Expr_Cosh(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Cosh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Cosh
Expr_Cosh_swigregister = _Expr.Expr_Cosh_swigregister
Expr_Cosh_swigregister(Expr_Cosh)

class Expr_Cosine(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the cosine of Exp
        	:param Exp:
        	:type Exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Cosine_swiginit(self, _Expr.new_Expr_Cosine(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Cosine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Cosine
Expr_Cosine_swigregister = _Expr.Expr_Cosine_swigregister
Expr_Cosine_swigregister(Expr_Cosine)

class Expr_Difference(Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the difference <exp1> - <exp2>.
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Difference_swiginit(self, _Expr.new_Expr_Difference(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Difference_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Difference
Expr_Difference_swigregister = _Expr.Expr_Difference_swigregister
Expr_Difference_swigregister(Expr_Difference)

class Expr_Different(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> # <exp2>.
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Different_swiginit(self, _Expr.new_Expr_Different(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Different_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Different
Expr_Different_swigregister = _Expr.Expr_Different_swigregister
Expr_Different_swigregister(Expr_Different)

class Expr_Division(Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the division <exp1>/<exp2>
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Division_swiginit(self, _Expr.new_Expr_Division(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Division_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Division
Expr_Division_swigregister = _Expr.Expr_Division_swigregister
Expr_Division_swigregister(Expr_Division)

class Expr_Equal(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> = <exp2>.
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Equal_swiginit(self, _Expr.new_Expr_Equal(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Equal_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Equal
Expr_Equal_swigregister = _Expr.Expr_Equal_swigregister
Expr_Equal_swigregister(Expr_Equal)

class Expr_Exponential(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the exponential of <exp>
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Exponential_swiginit(self, _Expr.new_Expr_Exponential(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Exponential_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Exponential
Expr_Exponential_swigregister = _Expr.Expr_Exponential_swigregister
Expr_Exponential_swigregister(Expr_Exponential)

class Expr_Exponentiate(Expr_BinaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the exponential <exp1> ^ <exp2>
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Exponentiate_swiginit(self, _Expr.new_Expr_Exponentiate(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Exponentiate_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Exponentiate
Expr_Exponentiate_swigregister = _Expr.Expr_Exponentiate_swigregister
Expr_Exponentiate_swigregister(Expr_Exponentiate)

class Expr_GreaterThan(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> > <exp2>.
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_GreaterThan_swiginit(self, _Expr.new_Expr_GreaterThan(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_GreaterThan_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_GreaterThan
Expr_GreaterThan_swigregister = _Expr.Expr_GreaterThan_swigregister
Expr_GreaterThan_swigregister(Expr_GreaterThan)

class Expr_GreaterThanOrEqual(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> >= <exp2>.
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_GreaterThanOrEqual_swiginit(self, _Expr.new_Expr_GreaterThanOrEqual(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_GreaterThanOrEqual_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_GreaterThanOrEqual
Expr_GreaterThanOrEqual_swigregister = _Expr.Expr_GreaterThanOrEqual_swigregister
Expr_GreaterThanOrEqual_swigregister(Expr_GreaterThanOrEqual)

class Expr_LessThan(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> < <exp2>.
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_LessThan_swiginit(self, _Expr.new_Expr_LessThan(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_LessThan_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_LessThan
Expr_LessThan_swigregister = _Expr.Expr_LessThan_swigregister
Expr_LessThan_swigregister(Expr_LessThan)

class Expr_LessThanOrEqual(Expr_SingleRelation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the relation <exp1> <= <exp2>.
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_LessThanOrEqual_swiginit(self, _Expr.new_Expr_LessThanOrEqual(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_LessThanOrEqual_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_LessThanOrEqual
Expr_LessThanOrEqual_swigregister = _Expr.Expr_LessThanOrEqual_swigregister
Expr_LessThanOrEqual_swigregister(Expr_LessThanOrEqual)

class Expr_LogOf10(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the base 10 logarithm of <exp>
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_LogOf10_swiginit(self, _Expr.new_Expr_LogOf10(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_LogOf10_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_LogOf10
Expr_LogOf10_swigregister = _Expr.Expr_LogOf10_swigregister
Expr_LogOf10_swigregister(Expr_LogOf10)

class Expr_LogOfe(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the natural logarithm of <exp>
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_LogOfe_swiginit(self, _Expr.new_Expr_LogOfe(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_LogOfe_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_LogOfe
Expr_LogOfe_swigregister = _Expr.Expr_LogOfe_swigregister
Expr_LogOfe_swigregister(Expr_LogOfe)

class Expr_NamedConstant(Expr_NamedExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a constant value of name <name> and value <value>.
        	:param name:
        	:type name: TCollection_AsciiString
        	:param value:
        	:type value: float
        	:rtype: None
        """
        _Expr.Expr_NamedConstant_swiginit(self, _Expr.new_Expr_NamedConstant(*args))

    def GetValue(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _Expr.Expr_NamedConstant_GetValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_NamedConstant_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_NamedConstant
Expr_NamedConstant.GetValue = new_instancemethod(_Expr.Expr_NamedConstant_GetValue, None, Expr_NamedConstant)
Expr_NamedConstant_swigregister = _Expr.Expr_NamedConstant_swigregister
Expr_NamedConstant_swigregister(Expr_NamedConstant)

class Expr_NamedUnknown(Expr_NamedExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Assign(self, *args) -> "void":
        """
        * Assigns <self> to <exp> expression. Raises exception if <exp> refers to <self>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        return _Expr.Expr_NamedUnknown_Assign(self, *args)


    def AssignedExpression(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """
        * If exists, returns the assigned expression. An exception is raised if the expression does not exist.
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _Expr.Expr_NamedUnknown_AssignedExpression(self, *args)


    def Deassign(self, *args) -> "void":
        """
        * Supresses the assigned expression
        	:rtype: None
        """
        return _Expr.Expr_NamedUnknown_Deassign(self, *args)


    def __init__(self, *args):
        """
        :param name:
        	:type name: TCollection_AsciiString
        	:rtype: None
        """
        _Expr.Expr_NamedUnknown_swiginit(self, _Expr.new_Expr_NamedUnknown(*args))

    def IsAssigned(self, *args) -> "Standard_Boolean":
        """
        * Tests if an expression is assigned to <self>.
        	:rtype: bool
        """
        return _Expr.Expr_NamedUnknown_IsAssigned(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_NamedUnknown_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_NamedUnknown
Expr_NamedUnknown.Assign = new_instancemethod(_Expr.Expr_NamedUnknown_Assign, None, Expr_NamedUnknown)
Expr_NamedUnknown.AssignedExpression = new_instancemethod(_Expr.Expr_NamedUnknown_AssignedExpression, None, Expr_NamedUnknown)
Expr_NamedUnknown.Deassign = new_instancemethod(_Expr.Expr_NamedUnknown_Deassign, None, Expr_NamedUnknown)
Expr_NamedUnknown.IsAssigned = new_instancemethod(_Expr.Expr_NamedUnknown_IsAssigned, None, Expr_NamedUnknown)
Expr_NamedUnknown_swigregister = _Expr.Expr_NamedUnknown_swigregister
Expr_NamedUnknown_swigregister(Expr_NamedUnknown)

class Expr_PolyFunction(Expr_PolyExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates <self> as <func>(<exps_1>,<exps_2>,...,<exps_n>)
        	:param func:
        	:type func: Expr_GeneralFunction
        	:param exps:
        	:type exps: Expr_Array1OfGeneralExpression
        	:rtype: None
        """
        _Expr.Expr_PolyFunction_swiginit(self, _Expr.new_Expr_PolyFunction(*args))

    def Function(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        * Returns the function defining <self>.
        	:rtype: opencascade::handle<Expr_GeneralFunction>
        """
        return _Expr.Expr_PolyFunction_Function(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_PolyFunction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_PolyFunction
Expr_PolyFunction.Function = new_instancemethod(_Expr.Expr_PolyFunction_Function, None, Expr_PolyFunction)
Expr_PolyFunction_swigregister = _Expr.Expr_PolyFunction_swigregister
Expr_PolyFunction_swigregister(Expr_PolyFunction)

class Expr_Product(Expr_PolyExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the product of all members of sequence <exps>
        	:param exps:
        	:type exps: Expr_SequenceOfGeneralExpression
        	:rtype: None
        * Creates the product of <exp1> and <exp2>.
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Product_swiginit(self, _Expr.new_Expr_Product(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Product_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Product
Expr_Product_swigregister = _Expr.Expr_Product_swigregister
Expr_Product_swigregister(Expr_Product)

class Expr_Sine(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the sine of <exp>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Sine_swiginit(self, _Expr.new_Expr_Sine(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Sine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Sine
Expr_Sine_swigregister = _Expr.Expr_Sine_swigregister
Expr_Sine_swigregister(Expr_Sine)

class Expr_Sinh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the sinh of <exp>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Sinh_swiginit(self, _Expr.new_Expr_Sinh(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Sinh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Sinh
Expr_Sinh_swigregister = _Expr.Expr_Sinh_swigregister
Expr_Sinh_swigregister(Expr_Sinh)

class Expr_Square(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the square of <exp>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Square_swiginit(self, _Expr.new_Expr_Square(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Square_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Square
Expr_Square_swigregister = _Expr.Expr_Square_swigregister
Expr_Square_swigregister(Expr_Square)

class Expr_SquareRoot(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the square root of <exp>
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_SquareRoot_swiginit(self, _Expr.new_Expr_SquareRoot(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_SquareRoot_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_SquareRoot
Expr_SquareRoot_swigregister = _Expr.Expr_SquareRoot_swigregister
Expr_SquareRoot_swigregister(Expr_SquareRoot)

class Expr_Sum(Expr_PolyExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the sum of all the members of sequence <exps>.
        	:param exps:
        	:type exps: Expr_SequenceOfGeneralExpression
        	:rtype: None
        * Creates the sum of <exp1> and <exp2>.
        	:param exp1:
        	:type exp1: Expr_GeneralExpression
        	:param exp2:
        	:type exp2: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Sum_swiginit(self, _Expr.new_Expr_Sum(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Sum_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Sum
Expr_Sum_swigregister = _Expr.Expr_Sum_swigregister
Expr_Sum_swigregister(Expr_Sum)

class Expr_Tangent(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the tangent of <exp>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Tangent_swiginit(self, _Expr.new_Expr_Tangent(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Tangent_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Tangent
Expr_Tangent_swigregister = _Expr.Expr_Tangent_swigregister
Expr_Tangent_swigregister(Expr_Tangent)

class Expr_Tanh(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the hyperbolic tangent of <exp>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_Tanh_swiginit(self, _Expr.new_Expr_Tanh(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Tanh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Tanh
Expr_Tanh_swigregister = _Expr.Expr_Tanh_swigregister
Expr_Tanh_swigregister(Expr_Tanh)

class Expr_UnaryFunction(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates me as <func>(<exp>). Raises exception if <func> is not unary.
        	:param func:
        	:type func: Expr_GeneralFunction
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_UnaryFunction_swiginit(self, _Expr.new_Expr_UnaryFunction(*args))

    def Function(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        * Returns the function defining <self>.
        	:rtype: opencascade::handle<Expr_GeneralFunction>
        """
        return _Expr.Expr_UnaryFunction_Function(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_UnaryFunction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_UnaryFunction
Expr_UnaryFunction.Function = new_instancemethod(_Expr.Expr_UnaryFunction_Function, None, Expr_UnaryFunction)
Expr_UnaryFunction_swigregister = _Expr.Expr_UnaryFunction_swigregister
Expr_UnaryFunction_swigregister(Expr_UnaryFunction)

class Expr_UnaryMinus(Expr_UnaryExpression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create the unary minus of <exp>.
        	:param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        _Expr.Expr_UnaryMinus_swiginit(self, _Expr.new_Expr_UnaryMinus(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Expr_UnaryMinus_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_UnaryMinus
Expr_UnaryMinus_swigregister = _Expr.Expr_UnaryMinus_swigregister
Expr_UnaryMinus_swigregister(Expr_UnaryMinus)



