# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ExprIntrp module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_exprintrp.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ExprIntrp.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ExprIntrp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ExprIntrp')
    _ExprIntrp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ExprIntrp', [dirname(__file__)])
        except ImportError:
            import _ExprIntrp
            return _ExprIntrp
        try:
            _mod = imp.load_module('_ExprIntrp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ExprIntrp = swig_import_helper()
    del swig_import_helper
else:
    import _ExprIntrp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ExprIntrp.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ExprIntrp.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ExprIntrp.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ExprIntrp.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ExprIntrp.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ExprIntrp.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ExprIntrp.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ExprIntrp.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ExprIntrp.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ExprIntrp.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ExprIntrp.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ExprIntrp.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ExprIntrp.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ExprIntrp.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ExprIntrp.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ExprIntrp.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ExprIntrp.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ExprIntrp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ExprIntrp.process_exception(error, method_name, class_name)
process_exception = _ExprIntrp.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Expr
import OCC.Core.TColStd
import OCC.Core.TCollection

def Handle_ExprIntrp_Generator_Create() -> "opencascade::handle< ExprIntrp_Generator >":
    return _ExprIntrp.Handle_ExprIntrp_Generator_Create()
Handle_ExprIntrp_Generator_Create = _ExprIntrp.Handle_ExprIntrp_Generator_Create

def Handle_ExprIntrp_Generator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ExprIntrp_Generator >":
    return _ExprIntrp.Handle_ExprIntrp_Generator_DownCast(t)
Handle_ExprIntrp_Generator_DownCast = _ExprIntrp.Handle_ExprIntrp_Generator_DownCast

def Handle_ExprIntrp_Generator_IsNull(t: 'opencascade::handle< ExprIntrp_Generator > const &') -> "bool":
    return _ExprIntrp.Handle_ExprIntrp_Generator_IsNull(t)
Handle_ExprIntrp_Generator_IsNull = _ExprIntrp.Handle_ExprIntrp_Generator_IsNull

def Handle_ExprIntrp_GenExp_Create() -> "opencascade::handle< ExprIntrp_GenExp >":
    return _ExprIntrp.Handle_ExprIntrp_GenExp_Create()
Handle_ExprIntrp_GenExp_Create = _ExprIntrp.Handle_ExprIntrp_GenExp_Create

def Handle_ExprIntrp_GenExp_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ExprIntrp_GenExp >":
    return _ExprIntrp.Handle_ExprIntrp_GenExp_DownCast(t)
Handle_ExprIntrp_GenExp_DownCast = _ExprIntrp.Handle_ExprIntrp_GenExp_DownCast

def Handle_ExprIntrp_GenExp_IsNull(t: 'opencascade::handle< ExprIntrp_GenExp > const &') -> "bool":
    return _ExprIntrp.Handle_ExprIntrp_GenExp_IsNull(t)
Handle_ExprIntrp_GenExp_IsNull = _ExprIntrp.Handle_ExprIntrp_GenExp_IsNull

def Handle_ExprIntrp_GenFct_Create() -> "opencascade::handle< ExprIntrp_GenFct >":
    return _ExprIntrp.Handle_ExprIntrp_GenFct_Create()
Handle_ExprIntrp_GenFct_Create = _ExprIntrp.Handle_ExprIntrp_GenFct_Create

def Handle_ExprIntrp_GenFct_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ExprIntrp_GenFct >":
    return _ExprIntrp.Handle_ExprIntrp_GenFct_DownCast(t)
Handle_ExprIntrp_GenFct_DownCast = _ExprIntrp.Handle_ExprIntrp_GenFct_DownCast

def Handle_ExprIntrp_GenFct_IsNull(t: 'opencascade::handle< ExprIntrp_GenFct > const &') -> "bool":
    return _ExprIntrp.Handle_ExprIntrp_GenFct_IsNull(t)
Handle_ExprIntrp_GenFct_IsNull = _ExprIntrp.Handle_ExprIntrp_GenFct_IsNull

def Handle_ExprIntrp_GenRel_Create() -> "opencascade::handle< ExprIntrp_GenRel >":
    return _ExprIntrp.Handle_ExprIntrp_GenRel_Create()
Handle_ExprIntrp_GenRel_Create = _ExprIntrp.Handle_ExprIntrp_GenRel_Create

def Handle_ExprIntrp_GenRel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ExprIntrp_GenRel >":
    return _ExprIntrp.Handle_ExprIntrp_GenRel_DownCast(t)
Handle_ExprIntrp_GenRel_DownCast = _ExprIntrp.Handle_ExprIntrp_GenRel_DownCast

def Handle_ExprIntrp_GenRel_IsNull(t: 'opencascade::handle< ExprIntrp_GenRel > const &') -> "bool":
    return _ExprIntrp.Handle_ExprIntrp_GenRel_IsNull(t)
Handle_ExprIntrp_GenRel_IsNull = _ExprIntrp.Handle_ExprIntrp_GenRel_IsNull
class ExprIntrp_StackOfGeneralRelation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_StackOfGeneralRelation_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralRelation(*args))
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralRelation
ExprIntrp_StackOfGeneralRelation.begin = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_begin, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.end = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_end, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.cbegin = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_cbegin, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.cend = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_cend, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Size = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Size, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Assign, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Set = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Set, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Clear, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.First = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_First, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Last = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Last, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Append = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Append, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Prepend, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.RemoveFirst = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_RemoveFirst, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Remove, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_InsertBefore, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_InsertAfter, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Reverse = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Reverse, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralRelation_swigregister
ExprIntrp_StackOfGeneralRelation_swigregister(ExprIntrp_StackOfGeneralRelation)

class ExprIntrp_ListIteratorOfStackOfGeneralRelation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_swiginit(self, _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralRelation(*args))
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralRelation
ExprIntrp_ListIteratorOfStackOfGeneralRelation.More = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_More, None, ExprIntrp_ListIteratorOfStackOfGeneralRelation)
ExprIntrp_ListIteratorOfStackOfGeneralRelation.Next = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Next, None, ExprIntrp_ListIteratorOfStackOfGeneralRelation)
ExprIntrp_ListIteratorOfStackOfGeneralRelation.Value = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Value, None, ExprIntrp_ListIteratorOfStackOfGeneralRelation)
ExprIntrp_ListIteratorOfStackOfGeneralRelation.ChangeValue = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_ChangeValue, None, ExprIntrp_ListIteratorOfStackOfGeneralRelation)
ExprIntrp_ListIteratorOfStackOfGeneralRelation_swigregister = _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_swigregister
ExprIntrp_ListIteratorOfStackOfGeneralRelation_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralRelation)

class ExprIntrp_SequenceOfNamedFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceOfNamedFunction(*args))
    delNode = staticmethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_delNode)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_SequenceOfNamedFunction
ExprIntrp_SequenceOfNamedFunction.begin = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_begin, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.end = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_end, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.cbegin = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_cbegin, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.cend = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_cend, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Size = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Size, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Length = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Length, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Lower = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Lower, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Upper = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Upper, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.IsEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_IsEmpty, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Reverse = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Reverse, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Exchange = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Exchange, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Clear, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Assign, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Set = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Set, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Remove, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Append = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Append, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Prepend, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertBefore, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertAfter, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Split = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Split, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.First = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_First, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.ChangeFirst = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeFirst, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Last = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Last, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.ChangeLast = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeLast, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Value = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Value, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.ChangeValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeValue, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.__call__ = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction___call__, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.SetValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_SetValue, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction_swigregister = _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_swigregister
ExprIntrp_SequenceOfNamedFunction_swigregister(ExprIntrp_SequenceOfNamedFunction)

def ExprIntrp_SequenceOfNamedFunction_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_delNode(theNode, theAl)
ExprIntrp_SequenceOfNamedFunction_delNode = _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_delNode

class ExprIntrp_StackOfGeneralFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_StackOfGeneralFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralFunction(*args))
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralFunction
ExprIntrp_StackOfGeneralFunction.begin = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_begin, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.end = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_end, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.cbegin = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_cbegin, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.cend = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_cend, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Size = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Size, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Assign, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Set = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Set, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Clear, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.First = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_First, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Last = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Last, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Append = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Append, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Prepend, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.RemoveFirst = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_RemoveFirst, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Remove, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_InsertBefore, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_InsertAfter, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Reverse = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Reverse, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralFunction_swigregister
ExprIntrp_StackOfGeneralFunction_swigregister(ExprIntrp_StackOfGeneralFunction)

class ExprIntrp_ListIteratorOfStackOfGeneralFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralFunction(*args))
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralFunction
ExprIntrp_ListIteratorOfStackOfGeneralFunction.More = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_More, None, ExprIntrp_ListIteratorOfStackOfGeneralFunction)
ExprIntrp_ListIteratorOfStackOfGeneralFunction.Next = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Next, None, ExprIntrp_ListIteratorOfStackOfGeneralFunction)
ExprIntrp_ListIteratorOfStackOfGeneralFunction.Value = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Value, None, ExprIntrp_ListIteratorOfStackOfGeneralFunction)
ExprIntrp_ListIteratorOfStackOfGeneralFunction.ChangeValue = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_ChangeValue, None, ExprIntrp_ListIteratorOfStackOfGeneralFunction)
ExprIntrp_ListIteratorOfStackOfGeneralFunction_swigregister = _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_swigregister
ExprIntrp_ListIteratorOfStackOfGeneralFunction_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralFunction)

class ExprIntrp_SequenceOfNamedExpression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceOfNamedExpression(*args))
    delNode = staticmethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_delNode)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_SequenceOfNamedExpression
ExprIntrp_SequenceOfNamedExpression.begin = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_begin, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.end = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_end, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.cbegin = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_cbegin, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.cend = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_cend, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Size = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Size, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Length = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Length, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Lower = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Lower, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Upper = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Upper, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.IsEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_IsEmpty, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Reverse = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Reverse, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Exchange = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Exchange, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Clear, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Assign, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Set = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Set, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Remove, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Append = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Append, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Prepend, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertBefore, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertAfter, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Split = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Split, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.First = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_First, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.ChangeFirst = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeFirst, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Last = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Last, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.ChangeLast = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeLast, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Value = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Value, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.ChangeValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeValue, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.__call__ = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression___call__, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.SetValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_SetValue, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression_swigregister = _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_swigregister
ExprIntrp_SequenceOfNamedExpression_swigregister(ExprIntrp_SequenceOfNamedExpression)

def ExprIntrp_SequenceOfNamedExpression_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_delNode(theNode, theAl)
ExprIntrp_SequenceOfNamedExpression_delNode = _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_delNode

class ExprIntrp_StackOfGeneralExpression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_StackOfGeneralExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralExpression(*args))
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralExpression
ExprIntrp_StackOfGeneralExpression.begin = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_begin, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.end = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_end, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.cbegin = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_cbegin, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.cend = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_cend, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Size = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Size, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Assign, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Set = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Set, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Clear, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.First = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_First, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Last = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Last, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Append = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Append, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Prepend, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.RemoveFirst = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_RemoveFirst, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Remove, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_InsertBefore, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_InsertAfter, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Reverse = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Reverse, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralExpression_swigregister
ExprIntrp_StackOfGeneralExpression_swigregister(ExprIntrp_StackOfGeneralExpression)

class ExprIntrp_ListIteratorOfStackOfGeneralExpression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralExpression(*args))
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralExpression
ExprIntrp_ListIteratorOfStackOfGeneralExpression.More = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_More, None, ExprIntrp_ListIteratorOfStackOfGeneralExpression)
ExprIntrp_ListIteratorOfStackOfGeneralExpression.Next = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Next, None, ExprIntrp_ListIteratorOfStackOfGeneralExpression)
ExprIntrp_ListIteratorOfStackOfGeneralExpression.Value = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Value, None, ExprIntrp_ListIteratorOfStackOfGeneralExpression)
ExprIntrp_ListIteratorOfStackOfGeneralExpression.ChangeValue = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_ChangeValue, None, ExprIntrp_ListIteratorOfStackOfGeneralExpression)
ExprIntrp_ListIteratorOfStackOfGeneralExpression_swigregister = _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_swigregister
ExprIntrp_ListIteratorOfStackOfGeneralExpression_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralExpression)

class exprintrp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    __repr__ = _dumps_object


    def __init__(self):
        _ExprIntrp.exprintrp_swiginit(self, _ExprIntrp.new_exprintrp())
    __swig_destroy__ = _ExprIntrp.delete_exprintrp
exprintrp_swigregister = _ExprIntrp.exprintrp_swigregister
exprintrp_swigregister(exprintrp)

class ExprIntrp_Analysis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _ExprIntrp.ExprIntrp_Analysis_swiginit(self, _ExprIntrp.new_ExprIntrp_Analysis(*args))

    def GetFunction(self, *args) -> "opencascade::handle< Expr_NamedFunction >":
        """
        :param name:
        	:type name: TCollection_AsciiString
        	:rtype: opencascade::handle<Expr_NamedFunction>
        """
        return _ExprIntrp.ExprIntrp_Analysis_GetFunction(self, *args)


    def GetNamed(self, *args) -> "opencascade::handle< Expr_NamedExpression >":
        """
        :param name:
        	:type name: TCollection_AsciiString
        	:rtype: opencascade::handle<Expr_NamedExpression>
        """
        return _ExprIntrp.ExprIntrp_Analysis_GetNamed(self, *args)


    def IsExpStackEmpty(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ExprIntrp.ExprIntrp_Analysis_IsExpStackEmpty(self, *args)


    def IsRelStackEmpty(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ExprIntrp.ExprIntrp_Analysis_IsRelStackEmpty(self, *args)


    def Pop(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """:rtype: opencascade::handle<Expr_GeneralExpression>"""
        return _ExprIntrp.ExprIntrp_Analysis_Pop(self, *args)


    def PopFunction(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """:rtype: opencascade::handle<Expr_GeneralFunction>"""
        return _ExprIntrp.ExprIntrp_Analysis_PopFunction(self, *args)


    def PopName(self, *args) -> "TCollection_AsciiString":
        """:rtype: TCollection_AsciiString"""
        return _ExprIntrp.ExprIntrp_Analysis_PopName(self, *args)


    def PopRelation(self, *args) -> "opencascade::handle< Expr_GeneralRelation >":
        """:rtype: opencascade::handle<Expr_GeneralRelation>"""
        return _ExprIntrp.ExprIntrp_Analysis_PopRelation(self, *args)


    def PopValue(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ExprIntrp.ExprIntrp_Analysis_PopValue(self, *args)


    def Push(self, *args) -> "void":
        """
        :param exp:
        	:type exp: Expr_GeneralExpression
        	:rtype: None
        """
        return _ExprIntrp.ExprIntrp_Analysis_Push(self, *args)


    def PushFunction(self, *args) -> "void":
        """
        :param func:
        	:type func: Expr_GeneralFunction
        	:rtype: None
        """
        return _ExprIntrp.ExprIntrp_Analysis_PushFunction(self, *args)


    def PushName(self, *args) -> "void":
        """
        :param name:
        	:type name: TCollection_AsciiString
        	:rtype: None
        """
        return _ExprIntrp.ExprIntrp_Analysis_PushName(self, *args)


    def PushRelation(self, *args) -> "void":
        """
        :param rel:
        	:type rel: Expr_GeneralRelation
        	:rtype: None
        """
        return _ExprIntrp.ExprIntrp_Analysis_PushRelation(self, *args)


    def PushValue(self, *args) -> "void":
        """
        :param degree:
        	:type degree: int
        	:rtype: None
        """
        return _ExprIntrp.ExprIntrp_Analysis_PushValue(self, *args)


    def ResetAll(self, *args) -> "void":
        """:rtype: None"""
        return _ExprIntrp.ExprIntrp_Analysis_ResetAll(self, *args)


    def SetMaster(self, *args) -> "void":
        """
        :param agen:
        	:type agen: ExprIntrp_Generator
        	:rtype: None
        """
        return _ExprIntrp.ExprIntrp_Analysis_SetMaster(self, *args)


    def Use(self, *args) -> "void":
        """
        :param func:
        	:type func: Expr_NamedFunction
        	:rtype: None
        :param named:
        	:type named: Expr_NamedExpression
        	:rtype: None
        """
        return _ExprIntrp.ExprIntrp_Analysis_Use(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_Analysis
ExprIntrp_Analysis.GetFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_GetFunction, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.GetNamed = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_GetNamed, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.IsExpStackEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_IsExpStackEmpty, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.IsRelStackEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_IsRelStackEmpty, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.Pop = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_Pop, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopFunction, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopName = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopName, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopRelation = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopRelation, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopValue = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopValue, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.Push = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_Push, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushFunction, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushName = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushName, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushRelation = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushRelation, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushValue = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushValue, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.ResetAll = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_ResetAll, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.SetMaster = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_SetMaster, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.Use = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_Use, None, ExprIntrp_Analysis)
ExprIntrp_Analysis_swigregister = _ExprIntrp.ExprIntrp_Analysis_swigregister
ExprIntrp_Analysis_swigregister(ExprIntrp_Analysis)

class ExprIntrp_Generator(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetFunction(self, *args) -> "opencascade::handle< Expr_NamedFunction >":
        """
        * Returns NamedFunction with name <name> already interpreted if it exists. Returns a null handle if not.
        	:param name:
        	:type name: TCollection_AsciiString
        	:rtype: opencascade::handle<Expr_NamedFunction>
        """
        return _ExprIntrp.ExprIntrp_Generator_GetFunction(self, *args)


    def GetFunctions(self, *args) -> "ExprIntrp_SequenceOfNamedFunction const &":
        """:rtype: ExprIntrp_SequenceOfNamedFunction"""
        return _ExprIntrp.ExprIntrp_Generator_GetFunctions(self, *args)


    def GetNamed(self, *args) -> "opencascade::handle< Expr_NamedExpression >":
        """
        :rtype: ExprIntrp_SequenceOfNamedExpression
        * Returns NamedExpression with name <name> already interpreted if it exists. Returns a null handle if not.
        	:param name:
        	:type name: TCollection_AsciiString
        	:rtype: opencascade::handle<Expr_NamedExpression>
        """
        return _ExprIntrp.ExprIntrp_Generator_GetNamed(self, *args)


    def Use(self, *args) -> "void":
        """
        :param func:
        	:type func: Expr_NamedFunction
        	:rtype: None
        :param named:
        	:type named: Expr_NamedExpression
        	:rtype: None
        """
        return _ExprIntrp.ExprIntrp_Generator_Use(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_Generator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_Generator
ExprIntrp_Generator.GetFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_GetFunction, None, ExprIntrp_Generator)
ExprIntrp_Generator.GetFunctions = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_GetFunctions, None, ExprIntrp_Generator)
ExprIntrp_Generator.GetNamed = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_GetNamed, None, ExprIntrp_Generator)
ExprIntrp_Generator.Use = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_Use, None, ExprIntrp_Generator)
ExprIntrp_Generator_swigregister = _ExprIntrp.ExprIntrp_Generator_swigregister
ExprIntrp_Generator_swigregister(ExprIntrp_Generator)

class ExprIntrp_GenExp(ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args) -> "opencascade::handle< ExprIntrp_GenExp >":
        """:rtype: opencascade::handle<ExprIntrp_GenExp>"""
        return _ExprIntrp.ExprIntrp_GenExp_Create(*args)

    Create = staticmethod(Create)

    def Expression(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        * Returns expression generated. Raises an exception if IsDone answers false.
        	:rtype: opencascade::handle<Expr_GeneralExpression>
        """
        return _ExprIntrp.ExprIntrp_GenExp_Expression(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns false if any syntax error has occurred during process.
        	:rtype: bool
        """
        return _ExprIntrp.ExprIntrp_GenExp_IsDone(self, *args)


    def Process(self, *args) -> "void":
        """
        * Processes given string.
        	:param str:
        	:type str: TCollection_AsciiString
        	:rtype: None
        """
        return _ExprIntrp.ExprIntrp_GenExp_Process(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_GenExp_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenExp
ExprIntrp_GenExp.Expression = new_instancemethod(_ExprIntrp.ExprIntrp_GenExp_Expression, None, ExprIntrp_GenExp)
ExprIntrp_GenExp.IsDone = new_instancemethod(_ExprIntrp.ExprIntrp_GenExp_IsDone, None, ExprIntrp_GenExp)
ExprIntrp_GenExp.Process = new_instancemethod(_ExprIntrp.ExprIntrp_GenExp_Process, None, ExprIntrp_GenExp)
ExprIntrp_GenExp_swigregister = _ExprIntrp.ExprIntrp_GenExp_swigregister
ExprIntrp_GenExp_swigregister(ExprIntrp_GenExp)

def ExprIntrp_GenExp_Create(*args) -> "opencascade::handle< ExprIntrp_GenExp >":
    """:rtype: opencascade::handle<ExprIntrp_GenExp>"""
    return _ExprIntrp.ExprIntrp_GenExp_Create(*args)

class ExprIntrp_GenFct(ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args) -> "opencascade::handle< ExprIntrp_GenFct >":
        """:rtype: opencascade::handle<ExprIntrp_GenFct>"""
        return _ExprIntrp.ExprIntrp_GenFct_Create(*args)

    Create = staticmethod(Create)

    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ExprIntrp.ExprIntrp_GenFct_IsDone(self, *args)


    def Process(self, *args) -> "void":
        """
        :param str:
        	:type str: TCollection_AsciiString
        	:rtype: None
        """
        return _ExprIntrp.ExprIntrp_GenFct_Process(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_GenFct_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenFct
ExprIntrp_GenFct.IsDone = new_instancemethod(_ExprIntrp.ExprIntrp_GenFct_IsDone, None, ExprIntrp_GenFct)
ExprIntrp_GenFct.Process = new_instancemethod(_ExprIntrp.ExprIntrp_GenFct_Process, None, ExprIntrp_GenFct)
ExprIntrp_GenFct_swigregister = _ExprIntrp.ExprIntrp_GenFct_swigregister
ExprIntrp_GenFct_swigregister(ExprIntrp_GenFct)

def ExprIntrp_GenFct_Create(*args) -> "opencascade::handle< ExprIntrp_GenFct >":
    """:rtype: opencascade::handle<ExprIntrp_GenFct>"""
    return _ExprIntrp.ExprIntrp_GenFct_Create(*args)

class ExprIntrp_GenRel(ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args) -> "opencascade::handle< ExprIntrp_GenRel >":
        """:rtype: opencascade::handle<ExprIntrp_GenRel>"""
        return _ExprIntrp.ExprIntrp_GenRel_Create(*args)

    Create = staticmethod(Create)

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns false if any syntax error has occurred during process.
        	:rtype: bool
        """
        return _ExprIntrp.ExprIntrp_GenRel_IsDone(self, *args)


    def Process(self, *args) -> "void":
        """
        * Processes given string.
        	:param str:
        	:type str: TCollection_AsciiString
        	:rtype: None
        """
        return _ExprIntrp.ExprIntrp_GenRel_Process(self, *args)


    def Relation(self, *args) -> "opencascade::handle< Expr_GeneralRelation >":
        """
        * Returns relation generated. Raises an exception if IsDone answers false.
        	:rtype: opencascade::handle<Expr_GeneralRelation>
        """
        return _ExprIntrp.ExprIntrp_GenRel_Relation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_GenRel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenRel
ExprIntrp_GenRel.IsDone = new_instancemethod(_ExprIntrp.ExprIntrp_GenRel_IsDone, None, ExprIntrp_GenRel)
ExprIntrp_GenRel.Process = new_instancemethod(_ExprIntrp.ExprIntrp_GenRel_Process, None, ExprIntrp_GenRel)
ExprIntrp_GenRel.Relation = new_instancemethod(_ExprIntrp.ExprIntrp_GenRel_Relation, None, ExprIntrp_GenRel)
ExprIntrp_GenRel_swigregister = _ExprIntrp.ExprIntrp_GenRel_swigregister
ExprIntrp_GenRel_swigregister(ExprIntrp_GenRel)

def ExprIntrp_GenRel_Create(*args) -> "opencascade::handle< ExprIntrp_GenRel >":
    """:rtype: opencascade::handle<ExprIntrp_GenRel>"""
    return _ExprIntrp.ExprIntrp_GenRel_Create(*args)



