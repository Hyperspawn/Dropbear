# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Extrema module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_extrema.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Extrema.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Extrema')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Extrema')
    _Extrema = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Extrema', [dirname(__file__)])
        except ImportError:
            import _Extrema
            return _Extrema
        try:
            _mod = imp.load_module('_Extrema', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Extrema = swig_import_helper()
    del swig_import_helper
else:
    import _Extrema
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Extrema.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Extrema.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Extrema.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Extrema.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Extrema.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Extrema.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Extrema.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Extrema.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Extrema.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Extrema.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Extrema.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Extrema.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Extrema.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Extrema.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Extrema.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Extrema.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Extrema.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Extrema.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Extrema.process_exception(error, method_name, class_name)
process_exception = _Extrema.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.gp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.GeomAdaptor
Extrema_ExtAlgo_Grad = _Extrema.Extrema_ExtAlgo_Grad
Extrema_ExtAlgo_Tree = _Extrema.Extrema_ExtAlgo_Tree
Extrema_ExtFlag_MIN = _Extrema.Extrema_ExtFlag_MIN
Extrema_ExtFlag_MAX = _Extrema.Extrema_ExtFlag_MAX
Extrema_ExtFlag_MINMAX = _Extrema.Extrema_ExtFlag_MINMAX
Extrema_Node = _Extrema.Extrema_Node
Extrema_UIsoEdge = _Extrema.Extrema_UIsoEdge
Extrema_VIsoEdge = _Extrema.Extrema_VIsoEdge
Extrema_Face = _Extrema.Extrema_Face

def Handle_Extrema_ExtPExtS_Create() -> "opencascade::handle< Extrema_ExtPExtS >":
    return _Extrema.Handle_Extrema_ExtPExtS_Create()
Handle_Extrema_ExtPExtS_Create = _Extrema.Handle_Extrema_ExtPExtS_Create

def Handle_Extrema_ExtPExtS_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Extrema_ExtPExtS >":
    return _Extrema.Handle_Extrema_ExtPExtS_DownCast(t)
Handle_Extrema_ExtPExtS_DownCast = _Extrema.Handle_Extrema_ExtPExtS_DownCast

def Handle_Extrema_ExtPExtS_IsNull(t: 'opencascade::handle< Extrema_ExtPExtS > const &') -> "bool":
    return _Extrema.Handle_Extrema_ExtPExtS_IsNull(t)
Handle_Extrema_ExtPExtS_IsNull = _Extrema.Handle_Extrema_ExtPExtS_IsNull

def Handle_Extrema_ExtPRevS_Create() -> "opencascade::handle< Extrema_ExtPRevS >":
    return _Extrema.Handle_Extrema_ExtPRevS_Create()
Handle_Extrema_ExtPRevS_Create = _Extrema.Handle_Extrema_ExtPRevS_Create

def Handle_Extrema_ExtPRevS_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Extrema_ExtPRevS >":
    return _Extrema.Handle_Extrema_ExtPRevS_DownCast(t)
Handle_Extrema_ExtPRevS_DownCast = _Extrema.Handle_Extrema_ExtPRevS_DownCast

def Handle_Extrema_ExtPRevS_IsNull(t: 'opencascade::handle< Extrema_ExtPRevS > const &') -> "bool":
    return _Extrema.Handle_Extrema_ExtPRevS_IsNull(t)
Handle_Extrema_ExtPRevS_IsNull = _Extrema.Handle_Extrema_ExtPRevS_IsNull

def Handle_Extrema_HArray1OfPOnSurf_Create() -> "opencascade::handle< Extrema_HArray1OfPOnSurf >":
    return _Extrema.Handle_Extrema_HArray1OfPOnSurf_Create()
Handle_Extrema_HArray1OfPOnSurf_Create = _Extrema.Handle_Extrema_HArray1OfPOnSurf_Create

def Handle_Extrema_HArray1OfPOnSurf_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Extrema_HArray1OfPOnSurf >":
    return _Extrema.Handle_Extrema_HArray1OfPOnSurf_DownCast(t)
Handle_Extrema_HArray1OfPOnSurf_DownCast = _Extrema.Handle_Extrema_HArray1OfPOnSurf_DownCast

def Handle_Extrema_HArray1OfPOnSurf_IsNull(t: 'opencascade::handle< Extrema_HArray1OfPOnSurf > const &') -> "bool":
    return _Extrema.Handle_Extrema_HArray1OfPOnSurf_IsNull(t)
Handle_Extrema_HArray1OfPOnSurf_IsNull = _Extrema.Handle_Extrema_HArray1OfPOnSurf_IsNull

def Handle_Extrema_HArray1OfPOnCurv_Create() -> "opencascade::handle< Extrema_HArray1OfPOnCurv >":
    return _Extrema.Handle_Extrema_HArray1OfPOnCurv_Create()
Handle_Extrema_HArray1OfPOnCurv_Create = _Extrema.Handle_Extrema_HArray1OfPOnCurv_Create

def Handle_Extrema_HArray1OfPOnCurv_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Extrema_HArray1OfPOnCurv >":
    return _Extrema.Handle_Extrema_HArray1OfPOnCurv_DownCast(t)
Handle_Extrema_HArray1OfPOnCurv_DownCast = _Extrema.Handle_Extrema_HArray1OfPOnCurv_DownCast

def Handle_Extrema_HArray1OfPOnCurv_IsNull(t: 'opencascade::handle< Extrema_HArray1OfPOnCurv > const &') -> "bool":
    return _Extrema.Handle_Extrema_HArray1OfPOnCurv_IsNull(t)
Handle_Extrema_HArray1OfPOnCurv_IsNull = _Extrema.Handle_Extrema_HArray1OfPOnCurv_IsNull

def Handle_Extrema_HArray1OfPOnCurv2d_Create() -> "opencascade::handle< Extrema_HArray1OfPOnCurv2d >":
    return _Extrema.Handle_Extrema_HArray1OfPOnCurv2d_Create()
Handle_Extrema_HArray1OfPOnCurv2d_Create = _Extrema.Handle_Extrema_HArray1OfPOnCurv2d_Create

def Handle_Extrema_HArray1OfPOnCurv2d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Extrema_HArray1OfPOnCurv2d >":
    return _Extrema.Handle_Extrema_HArray1OfPOnCurv2d_DownCast(t)
Handle_Extrema_HArray1OfPOnCurv2d_DownCast = _Extrema.Handle_Extrema_HArray1OfPOnCurv2d_DownCast

def Handle_Extrema_HArray1OfPOnCurv2d_IsNull(t: 'opencascade::handle< Extrema_HArray1OfPOnCurv2d > const &') -> "bool":
    return _Extrema.Handle_Extrema_HArray1OfPOnCurv2d_IsNull(t)
Handle_Extrema_HArray1OfPOnCurv2d_IsNull = _Extrema.Handle_Extrema_HArray1OfPOnCurv2d_IsNull

def Handle_Extrema_HArray2OfPOnCurv2d_Create() -> "opencascade::handle< Extrema_HArray2OfPOnCurv2d >":
    return _Extrema.Handle_Extrema_HArray2OfPOnCurv2d_Create()
Handle_Extrema_HArray2OfPOnCurv2d_Create = _Extrema.Handle_Extrema_HArray2OfPOnCurv2d_Create

def Handle_Extrema_HArray2OfPOnCurv2d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Extrema_HArray2OfPOnCurv2d >":
    return _Extrema.Handle_Extrema_HArray2OfPOnCurv2d_DownCast(t)
Handle_Extrema_HArray2OfPOnCurv2d_DownCast = _Extrema.Handle_Extrema_HArray2OfPOnCurv2d_DownCast

def Handle_Extrema_HArray2OfPOnCurv2d_IsNull(t: 'opencascade::handle< Extrema_HArray2OfPOnCurv2d > const &') -> "bool":
    return _Extrema.Handle_Extrema_HArray2OfPOnCurv2d_IsNull(t)
Handle_Extrema_HArray2OfPOnCurv2d_IsNull = _Extrema.Handle_Extrema_HArray2OfPOnCurv2d_IsNull

def Handle_Extrema_HArray2OfPOnCurv_Create() -> "opencascade::handle< Extrema_HArray2OfPOnCurv >":
    return _Extrema.Handle_Extrema_HArray2OfPOnCurv_Create()
Handle_Extrema_HArray2OfPOnCurv_Create = _Extrema.Handle_Extrema_HArray2OfPOnCurv_Create

def Handle_Extrema_HArray2OfPOnCurv_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Extrema_HArray2OfPOnCurv >":
    return _Extrema.Handle_Extrema_HArray2OfPOnCurv_DownCast(t)
Handle_Extrema_HArray2OfPOnCurv_DownCast = _Extrema.Handle_Extrema_HArray2OfPOnCurv_DownCast

def Handle_Extrema_HArray2OfPOnCurv_IsNull(t: 'opencascade::handle< Extrema_HArray2OfPOnCurv > const &') -> "bool":
    return _Extrema.Handle_Extrema_HArray2OfPOnCurv_IsNull(t)
Handle_Extrema_HArray2OfPOnCurv_IsNull = _Extrema.Handle_Extrema_HArray2OfPOnCurv_IsNull

def Handle_Extrema_HArray2OfPOnSurf_Create() -> "opencascade::handle< Extrema_HArray2OfPOnSurf >":
    return _Extrema.Handle_Extrema_HArray2OfPOnSurf_Create()
Handle_Extrema_HArray2OfPOnSurf_Create = _Extrema.Handle_Extrema_HArray2OfPOnSurf_Create

def Handle_Extrema_HArray2OfPOnSurf_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Extrema_HArray2OfPOnSurf >":
    return _Extrema.Handle_Extrema_HArray2OfPOnSurf_DownCast(t)
Handle_Extrema_HArray2OfPOnSurf_DownCast = _Extrema.Handle_Extrema_HArray2OfPOnSurf_DownCast

def Handle_Extrema_HArray2OfPOnSurf_IsNull(t: 'opencascade::handle< Extrema_HArray2OfPOnSurf > const &') -> "bool":
    return _Extrema.Handle_Extrema_HArray2OfPOnSurf_IsNull(t)
Handle_Extrema_HArray2OfPOnSurf_IsNull = _Extrema.Handle_Extrema_HArray2OfPOnSurf_IsNull

def Handle_Extrema_HArray2OfPOnSurfParams_Create() -> "opencascade::handle< Extrema_HArray2OfPOnSurfParams >":
    return _Extrema.Handle_Extrema_HArray2OfPOnSurfParams_Create()
Handle_Extrema_HArray2OfPOnSurfParams_Create = _Extrema.Handle_Extrema_HArray2OfPOnSurfParams_Create

def Handle_Extrema_HArray2OfPOnSurfParams_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Extrema_HArray2OfPOnSurfParams >":
    return _Extrema.Handle_Extrema_HArray2OfPOnSurfParams_DownCast(t)
Handle_Extrema_HArray2OfPOnSurfParams_DownCast = _Extrema.Handle_Extrema_HArray2OfPOnSurfParams_DownCast

def Handle_Extrema_HArray2OfPOnSurfParams_IsNull(t: 'opencascade::handle< Extrema_HArray2OfPOnSurfParams > const &') -> "bool":
    return _Extrema.Handle_Extrema_HArray2OfPOnSurfParams_IsNull(t)
Handle_Extrema_HArray2OfPOnSurfParams_IsNull = _Extrema.Handle_Extrema_HArray2OfPOnSurfParams_IsNull
class Extrema_SequenceOfPOnSurf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_SequenceOfPOnSurf_swiginit(self, _Extrema.new_Extrema_SequenceOfPOnSurf(*args))
    delNode = staticmethod(_Extrema.Extrema_SequenceOfPOnSurf_delNode)
    __swig_destroy__ = _Extrema.delete_Extrema_SequenceOfPOnSurf
Extrema_SequenceOfPOnSurf.begin = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_begin, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.end = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_end, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.cbegin = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_cbegin, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.cend = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_cend, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Size = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Size, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Length = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Length, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Lower = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Lower, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Upper = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Upper, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.IsEmpty = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_IsEmpty, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Reverse = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Reverse, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Exchange = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Exchange, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Clear = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Clear, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Assign = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Assign, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Set = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Set, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Remove = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Remove, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Append = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Append, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Prepend = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Prepend, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.InsertBefore = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_InsertBefore, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.InsertAfter = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_InsertAfter, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Split = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Split, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.First = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_First, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.ChangeFirst = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_ChangeFirst, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Last = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Last, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.ChangeLast = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_ChangeLast, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.Value = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_Value, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.ChangeValue = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_ChangeValue, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.__call__ = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf___call__, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf.SetValue = new_instancemethod(_Extrema.Extrema_SequenceOfPOnSurf_SetValue, None, Extrema_SequenceOfPOnSurf)
Extrema_SequenceOfPOnSurf_swigregister = _Extrema.Extrema_SequenceOfPOnSurf_swigregister
Extrema_SequenceOfPOnSurf_swigregister(Extrema_SequenceOfPOnSurf)

def Extrema_SequenceOfPOnSurf_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Extrema.Extrema_SequenceOfPOnSurf_delNode(theNode, theAl)
Extrema_SequenceOfPOnSurf_delNode = _Extrema.Extrema_SequenceOfPOnSurf_delNode

class Extrema_Array2OfPOnSurfParams(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_Array2OfPOnSurfParams_swiginit(self, _Extrema.new_Extrema_Array2OfPOnSurfParams(*args))
    __swig_destroy__ = _Extrema.delete_Extrema_Array2OfPOnSurfParams
Extrema_Array2OfPOnSurfParams.Init = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_Init, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.Size = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_Size, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.Length = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_Length, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.NbRows = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_NbRows, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.NbColumns = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_NbColumns, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.RowLength = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_RowLength, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.ColLength = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_ColLength, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.LowerRow = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_LowerRow, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.UpperRow = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_UpperRow, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.LowerCol = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_LowerCol, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.UpperCol = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_UpperCol, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.IsDeletable = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_IsDeletable, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.Assign = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_Assign, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.Move = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_Move, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.Set = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_Set, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.Value = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_Value, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.ChangeValue = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_ChangeValue, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.__call__ = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams___call__, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.SetValue = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_SetValue, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams.Resize = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurfParams_Resize, None, Extrema_Array2OfPOnSurfParams)
Extrema_Array2OfPOnSurfParams_swigregister = _Extrema.Extrema_Array2OfPOnSurfParams_swigregister
Extrema_Array2OfPOnSurfParams_swigregister(Extrema_Array2OfPOnSurfParams)

class Extrema_Array1OfPOnCurv(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_Array1OfPOnCurv_swiginit(self, _Extrema.new_Extrema_Array1OfPOnCurv(*args))
    __swig_destroy__ = _Extrema.delete_Extrema_Array1OfPOnCurv

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Extrema_Array1OfPOnCurv.begin = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_begin, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.end = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_end, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.cbegin = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_cbegin, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.cend = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_cend, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.Init = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_Init, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.Size = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_Size, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.Length = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_Length, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.IsEmpty = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_IsEmpty, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.Lower = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_Lower, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.Upper = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_Upper, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.IsDeletable = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_IsDeletable, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.IsAllocated = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_IsAllocated, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.Assign = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_Assign, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.Move = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_Move, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.Set = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_Set, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.First = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_First, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.ChangeFirst = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_ChangeFirst, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.Last = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_Last, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.ChangeLast = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_ChangeLast, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.Value = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_Value, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.ChangeValue = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_ChangeValue, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.__call__ = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv___call__, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.SetValue = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_SetValue, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv.Resize = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv_Resize, None, Extrema_Array1OfPOnCurv)
Extrema_Array1OfPOnCurv_swigregister = _Extrema.Extrema_Array1OfPOnCurv_swigregister
Extrema_Array1OfPOnCurv_swigregister(Extrema_Array1OfPOnCurv)

class Extrema_Array2OfPOnSurf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_Array2OfPOnSurf_swiginit(self, _Extrema.new_Extrema_Array2OfPOnSurf(*args))
    __swig_destroy__ = _Extrema.delete_Extrema_Array2OfPOnSurf
Extrema_Array2OfPOnSurf.Init = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_Init, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.Size = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_Size, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.Length = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_Length, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.NbRows = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_NbRows, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.NbColumns = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_NbColumns, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.RowLength = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_RowLength, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.ColLength = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_ColLength, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.LowerRow = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_LowerRow, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.UpperRow = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_UpperRow, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.LowerCol = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_LowerCol, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.UpperCol = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_UpperCol, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.IsDeletable = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_IsDeletable, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.Assign = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_Assign, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.Move = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_Move, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.Set = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_Set, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.Value = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_Value, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.ChangeValue = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_ChangeValue, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.__call__ = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf___call__, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.SetValue = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_SetValue, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf.Resize = new_instancemethod(_Extrema.Extrema_Array2OfPOnSurf_Resize, None, Extrema_Array2OfPOnSurf)
Extrema_Array2OfPOnSurf_swigregister = _Extrema.Extrema_Array2OfPOnSurf_swigregister
Extrema_Array2OfPOnSurf_swigregister(Extrema_Array2OfPOnSurf)

class Extrema_Array2OfPOnCurv2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_Array2OfPOnCurv2d_swiginit(self, _Extrema.new_Extrema_Array2OfPOnCurv2d(*args))
    __swig_destroy__ = _Extrema.delete_Extrema_Array2OfPOnCurv2d
Extrema_Array2OfPOnCurv2d.Init = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_Init, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.Size = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_Size, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.Length = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_Length, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.NbRows = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_NbRows, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.NbColumns = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_NbColumns, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.RowLength = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_RowLength, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.ColLength = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_ColLength, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.LowerRow = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_LowerRow, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.UpperRow = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_UpperRow, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.LowerCol = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_LowerCol, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.UpperCol = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_UpperCol, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.IsDeletable = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_IsDeletable, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.Assign = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_Assign, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.Move = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_Move, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.Set = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_Set, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.Value = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_Value, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.ChangeValue = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_ChangeValue, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.__call__ = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d___call__, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.SetValue = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_SetValue, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d.Resize = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv2d_Resize, None, Extrema_Array2OfPOnCurv2d)
Extrema_Array2OfPOnCurv2d_swigregister = _Extrema.Extrema_Array2OfPOnCurv2d_swigregister
Extrema_Array2OfPOnCurv2d_swigregister(Extrema_Array2OfPOnCurv2d)

class Extrema_Array1OfPOnCurv2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_Array1OfPOnCurv2d_swiginit(self, _Extrema.new_Extrema_Array1OfPOnCurv2d(*args))
    __swig_destroy__ = _Extrema.delete_Extrema_Array1OfPOnCurv2d

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Extrema_Array1OfPOnCurv2d.begin = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_begin, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.end = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_end, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.cbegin = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_cbegin, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.cend = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_cend, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.Init = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_Init, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.Size = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_Size, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.Length = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_Length, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.IsEmpty = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_IsEmpty, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.Lower = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_Lower, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.Upper = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_Upper, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.IsDeletable = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_IsDeletable, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.IsAllocated = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_IsAllocated, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.Assign = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_Assign, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.Move = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_Move, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.Set = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_Set, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.First = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_First, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.ChangeFirst = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_ChangeFirst, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.Last = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_Last, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.ChangeLast = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_ChangeLast, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.Value = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_Value, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.ChangeValue = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_ChangeValue, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.__call__ = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d___call__, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.SetValue = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_SetValue, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d.Resize = new_instancemethod(_Extrema.Extrema_Array1OfPOnCurv2d_Resize, None, Extrema_Array1OfPOnCurv2d)
Extrema_Array1OfPOnCurv2d_swigregister = _Extrema.Extrema_Array1OfPOnCurv2d_swigregister
Extrema_Array1OfPOnCurv2d_swigregister(Extrema_Array1OfPOnCurv2d)

class Extrema_SequenceOfPOnCurv(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_SequenceOfPOnCurv_swiginit(self, _Extrema.new_Extrema_SequenceOfPOnCurv(*args))
    delNode = staticmethod(_Extrema.Extrema_SequenceOfPOnCurv_delNode)
    __swig_destroy__ = _Extrema.delete_Extrema_SequenceOfPOnCurv
Extrema_SequenceOfPOnCurv.begin = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_begin, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.end = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_end, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.cbegin = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_cbegin, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.cend = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_cend, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Size = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Size, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Length = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Length, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Lower = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Lower, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Upper = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Upper, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.IsEmpty = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_IsEmpty, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Reverse = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Reverse, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Exchange = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Exchange, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Clear = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Clear, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Assign = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Assign, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Set = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Set, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Remove = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Remove, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Append = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Append, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Prepend = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Prepend, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.InsertBefore = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_InsertBefore, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.InsertAfter = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_InsertAfter, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Split = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Split, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.First = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_First, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.ChangeFirst = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_ChangeFirst, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Last = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Last, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.ChangeLast = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_ChangeLast, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.Value = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_Value, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.ChangeValue = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_ChangeValue, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.__call__ = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv___call__, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv.SetValue = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv_SetValue, None, Extrema_SequenceOfPOnCurv)
Extrema_SequenceOfPOnCurv_swigregister = _Extrema.Extrema_SequenceOfPOnCurv_swigregister
Extrema_SequenceOfPOnCurv_swigregister(Extrema_SequenceOfPOnCurv)

def Extrema_SequenceOfPOnCurv_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Extrema.Extrema_SequenceOfPOnCurv_delNode(theNode, theAl)
Extrema_SequenceOfPOnCurv_delNode = _Extrema.Extrema_SequenceOfPOnCurv_delNode

class Extrema_SequenceOfPOnCurv2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_SequenceOfPOnCurv2d_swiginit(self, _Extrema.new_Extrema_SequenceOfPOnCurv2d(*args))
    delNode = staticmethod(_Extrema.Extrema_SequenceOfPOnCurv2d_delNode)
    __swig_destroy__ = _Extrema.delete_Extrema_SequenceOfPOnCurv2d
Extrema_SequenceOfPOnCurv2d.begin = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_begin, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.end = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_end, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.cbegin = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_cbegin, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.cend = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_cend, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Size = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Size, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Length = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Length, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Lower = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Lower, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Upper = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Upper, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.IsEmpty = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_IsEmpty, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Reverse = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Reverse, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Exchange = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Exchange, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Clear = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Clear, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Assign = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Assign, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Set = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Set, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Remove = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Remove, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Append = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Append, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Prepend = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Prepend, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.InsertBefore = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_InsertBefore, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.InsertAfter = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_InsertAfter, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Split = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Split, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.First = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_First, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.ChangeFirst = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_ChangeFirst, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Last = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Last, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.ChangeLast = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_ChangeLast, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.Value = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_Value, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.ChangeValue = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_ChangeValue, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.__call__ = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d___call__, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d.SetValue = new_instancemethod(_Extrema.Extrema_SequenceOfPOnCurv2d_SetValue, None, Extrema_SequenceOfPOnCurv2d)
Extrema_SequenceOfPOnCurv2d_swigregister = _Extrema.Extrema_SequenceOfPOnCurv2d_swigregister
Extrema_SequenceOfPOnCurv2d_swigregister(Extrema_SequenceOfPOnCurv2d)

def Extrema_SequenceOfPOnCurv2d_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Extrema.Extrema_SequenceOfPOnCurv2d_delNode(theNode, theAl)
Extrema_SequenceOfPOnCurv2d_delNode = _Extrema.Extrema_SequenceOfPOnCurv2d_delNode

class Extrema_UBTreeOfSphere(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_UBTreeOfSphere_swiginit(self, _Extrema.new_Extrema_UBTreeOfSphere(*args))
    __swig_destroy__ = _Extrema.delete_Extrema_UBTreeOfSphere
Extrema_UBTreeOfSphere.Add = new_instancemethod(_Extrema.Extrema_UBTreeOfSphere_Add, None, Extrema_UBTreeOfSphere)
Extrema_UBTreeOfSphere.Select = new_instancemethod(_Extrema.Extrema_UBTreeOfSphere_Select, None, Extrema_UBTreeOfSphere)
Extrema_UBTreeOfSphere.Clear = new_instancemethod(_Extrema.Extrema_UBTreeOfSphere_Clear, None, Extrema_UBTreeOfSphere)
Extrema_UBTreeOfSphere.IsEmpty = new_instancemethod(_Extrema.Extrema_UBTreeOfSphere_IsEmpty, None, Extrema_UBTreeOfSphere)
Extrema_UBTreeOfSphere.Root = new_instancemethod(_Extrema.Extrema_UBTreeOfSphere_Root, None, Extrema_UBTreeOfSphere)
Extrema_UBTreeOfSphere.Allocator = new_instancemethod(_Extrema.Extrema_UBTreeOfSphere_Allocator, None, Extrema_UBTreeOfSphere)
Extrema_UBTreeOfSphere_swigregister = _Extrema.Extrema_UBTreeOfSphere_swigregister
Extrema_UBTreeOfSphere_swigregister(Extrema_UBTreeOfSphere)

class Extrema_UBTreeFillerOfSphere(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_UBTreeFillerOfSphere_swiginit(self, _Extrema.new_Extrema_UBTreeFillerOfSphere(*args))
    __swig_destroy__ = _Extrema.delete_Extrema_UBTreeFillerOfSphere
Extrema_UBTreeFillerOfSphere.Add = new_instancemethod(_Extrema.Extrema_UBTreeFillerOfSphere_Add, None, Extrema_UBTreeFillerOfSphere)
Extrema_UBTreeFillerOfSphere.Fill = new_instancemethod(_Extrema.Extrema_UBTreeFillerOfSphere_Fill, None, Extrema_UBTreeFillerOfSphere)
Extrema_UBTreeFillerOfSphere.Reset = new_instancemethod(_Extrema.Extrema_UBTreeFillerOfSphere_Reset, None, Extrema_UBTreeFillerOfSphere)
Extrema_UBTreeFillerOfSphere.CheckTree = new_instancemethod(_Extrema.Extrema_UBTreeFillerOfSphere_CheckTree, None, Extrema_UBTreeFillerOfSphere)
Extrema_UBTreeFillerOfSphere_swigregister = _Extrema.Extrema_UBTreeFillerOfSphere_swigregister
Extrema_UBTreeFillerOfSphere_swigregister(Extrema_UBTreeFillerOfSphere)

class Extrema_Array2OfPOnCurv(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_Array2OfPOnCurv_swiginit(self, _Extrema.new_Extrema_Array2OfPOnCurv(*args))
    __swig_destroy__ = _Extrema.delete_Extrema_Array2OfPOnCurv
Extrema_Array2OfPOnCurv.Init = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_Init, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.Size = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_Size, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.Length = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_Length, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.NbRows = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_NbRows, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.NbColumns = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_NbColumns, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.RowLength = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_RowLength, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.ColLength = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_ColLength, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.LowerRow = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_LowerRow, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.UpperRow = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_UpperRow, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.LowerCol = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_LowerCol, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.UpperCol = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_UpperCol, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.IsDeletable = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_IsDeletable, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.Assign = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_Assign, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.Move = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_Move, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.Set = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_Set, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.Value = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_Value, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.ChangeValue = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_ChangeValue, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.__call__ = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv___call__, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.SetValue = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_SetValue, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv.Resize = new_instancemethod(_Extrema.Extrema_Array2OfPOnCurv_Resize, None, Extrema_Array2OfPOnCurv)
Extrema_Array2OfPOnCurv_swigregister = _Extrema.Extrema_Array2OfPOnCurv_swigregister
Extrema_Array2OfPOnCurv_swigregister(Extrema_Array2OfPOnCurv)

class Extrema_Array1OfPOnSurf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_Array1OfPOnSurf_swiginit(self, _Extrema.new_Extrema_Array1OfPOnSurf(*args))
    __swig_destroy__ = _Extrema.delete_Extrema_Array1OfPOnSurf

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Extrema_Array1OfPOnSurf.begin = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_begin, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.end = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_end, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.cbegin = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_cbegin, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.cend = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_cend, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.Init = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_Init, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.Size = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_Size, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.Length = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_Length, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.IsEmpty = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_IsEmpty, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.Lower = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_Lower, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.Upper = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_Upper, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.IsDeletable = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_IsDeletable, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.IsAllocated = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_IsAllocated, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.Assign = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_Assign, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.Move = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_Move, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.Set = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_Set, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.First = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_First, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.ChangeFirst = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_ChangeFirst, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.Last = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_Last, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.ChangeLast = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_ChangeLast, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.Value = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_Value, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.ChangeValue = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_ChangeValue, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.__call__ = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf___call__, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.SetValue = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_SetValue, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf.Resize = new_instancemethod(_Extrema.Extrema_Array1OfPOnSurf_Resize, None, Extrema_Array1OfPOnSurf)
Extrema_Array1OfPOnSurf_swigregister = _Extrema.Extrema_Array1OfPOnSurf_swigregister
Extrema_Array1OfPOnSurf_swigregister(Extrema_Array1OfPOnSurf)

class Extrema_CCLocFOfLocECC(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurvePtr(self, *args) -> "Standard_Address":
        """
        * Returns a pointer to the curve specified in the constructor or in SetCurve() method.
        	:param theRank:
        	:type theRank: int
        	:rtype: Standard_Address
        """
        return _Extrema.Extrema_CCLocFOfLocECC_CurvePtr(self, *args)


    def __init__(self, *args):
        """
        :param thetol: default value is 1.0e-10
        	:type thetol: float
        	:rtype: None
        :param C1:
        	:type C1: Adaptor3d_Curve
        	:param C2:
        	:type C2: Adaptor3d_Curve
        	:param thetol: default value is 1.0e-10
        	:type thetol: float
        	:rtype: None
        """
        _Extrema.Extrema_CCLocFOfLocECC_swiginit(self, _Extrema.new_Extrema_CCLocFOfLocECC(*args))

    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the number of found extrema.
        	:rtype: int
        """
        return _Extrema.Extrema_CCLocFOfLocECC_NbExt(self, *args)


    def Points(self, *args) -> "void":
        """
        * Return the points of the Nth extreme distance.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnCurv
        	:param P2:
        	:type P2: Extrema_POnCurv
        	:rtype: None
        """
        return _Extrema.Extrema_CCLocFOfLocECC_Points(self, *args)


    def SearchOfTolerance(self, *args) -> "Standard_Real":
        """
        * Computes a Tol value. If 1st derivative of curve |D1|<Tol, it is considered D1=0.
        	:param C:
        	:type C: Standard_Address
        	:rtype: float
        """
        return _Extrema.Extrema_CCLocFOfLocECC_SearchOfTolerance(self, *args)


    def SetCurve(self, *args) -> "void":
        """
        :param theRank:
        	:type theRank: int
        	:param C1:
        	:type C1: Adaptor3d_Curve
        	:rtype: None
        """
        return _Extrema.Extrema_CCLocFOfLocECC_SetCurve(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        :param theTol:
        	:type theTol: float
        	:rtype: None
        """
        return _Extrema.Extrema_CCLocFOfLocECC_SetTolerance(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Return the value of the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_CCLocFOfLocECC_SquareDistance(self, *args)


    def SubIntervalInitialize(self, *args) -> "void":
        """
        * Determines of boundaries of subinterval for find of root.
        	:param theUfirst:
        	:type theUfirst: math_Vector
        	:param theUlast:
        	:type theUlast: math_Vector
        	:rtype: None
        """
        return _Extrema.Extrema_CCLocFOfLocECC_SubIntervalInitialize(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        * Returns a tolerance specified in the constructor or in SetTolerance() method.
        	:rtype: float
        """
        return _Extrema.Extrema_CCLocFOfLocECC_Tolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_CCLocFOfLocECC
Extrema_CCLocFOfLocECC.CurvePtr = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC_CurvePtr, None, Extrema_CCLocFOfLocECC)
Extrema_CCLocFOfLocECC.NbExt = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC_NbExt, None, Extrema_CCLocFOfLocECC)
Extrema_CCLocFOfLocECC.Points = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC_Points, None, Extrema_CCLocFOfLocECC)
Extrema_CCLocFOfLocECC.SearchOfTolerance = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC_SearchOfTolerance, None, Extrema_CCLocFOfLocECC)
Extrema_CCLocFOfLocECC.SetCurve = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC_SetCurve, None, Extrema_CCLocFOfLocECC)
Extrema_CCLocFOfLocECC.SetTolerance = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC_SetTolerance, None, Extrema_CCLocFOfLocECC)
Extrema_CCLocFOfLocECC.SquareDistance = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC_SquareDistance, None, Extrema_CCLocFOfLocECC)
Extrema_CCLocFOfLocECC.SubIntervalInitialize = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC_SubIntervalInitialize, None, Extrema_CCLocFOfLocECC)
Extrema_CCLocFOfLocECC.Tolerance = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC_Tolerance, None, Extrema_CCLocFOfLocECC)
Extrema_CCLocFOfLocECC_swigregister = _Extrema.Extrema_CCLocFOfLocECC_swigregister
Extrema_CCLocFOfLocECC_swigregister(Extrema_CCLocFOfLocECC)

class Extrema_CCLocFOfLocECC2d(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurvePtr(self, *args) -> "Standard_Address":
        """
        * Returns a pointer to the curve specified in the constructor or in SetCurve() method.
        	:param theRank:
        	:type theRank: int
        	:rtype: Standard_Address
        """
        return _Extrema.Extrema_CCLocFOfLocECC2d_CurvePtr(self, *args)


    def __init__(self, *args):
        """
        :param thetol: default value is 1.0e-10
        	:type thetol: float
        	:rtype: None
        :param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param thetol: default value is 1.0e-10
        	:type thetol: float
        	:rtype: None
        """
        _Extrema.Extrema_CCLocFOfLocECC2d_swiginit(self, _Extrema.new_Extrema_CCLocFOfLocECC2d(*args))

    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the number of found extrema.
        	:rtype: int
        """
        return _Extrema.Extrema_CCLocFOfLocECC2d_NbExt(self, *args)


    def Points(self, *args) -> "void":
        """
        * Return the points of the Nth extreme distance.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnCurv2d
        	:param P2:
        	:type P2: Extrema_POnCurv2d
        	:rtype: None
        """
        return _Extrema.Extrema_CCLocFOfLocECC2d_Points(self, *args)


    def SearchOfTolerance(self, *args) -> "Standard_Real":
        """
        * Computes a Tol value. If 1st derivative of curve |D1|<Tol, it is considered D1=0.
        	:param C:
        	:type C: Standard_Address
        	:rtype: float
        """
        return _Extrema.Extrema_CCLocFOfLocECC2d_SearchOfTolerance(self, *args)


    def SetCurve(self, *args) -> "void":
        """
        :param theRank:
        	:type theRank: int
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:rtype: None
        """
        return _Extrema.Extrema_CCLocFOfLocECC2d_SetCurve(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        :param theTol:
        	:type theTol: float
        	:rtype: None
        """
        return _Extrema.Extrema_CCLocFOfLocECC2d_SetTolerance(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Return the value of the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_CCLocFOfLocECC2d_SquareDistance(self, *args)


    def SubIntervalInitialize(self, *args) -> "void":
        """
        * Determines of boundaries of subinterval for find of root.
        	:param theUfirst:
        	:type theUfirst: math_Vector
        	:param theUlast:
        	:type theUlast: math_Vector
        	:rtype: None
        """
        return _Extrema.Extrema_CCLocFOfLocECC2d_SubIntervalInitialize(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        * Returns a tolerance specified in the constructor or in SetTolerance() method.
        	:rtype: float
        """
        return _Extrema.Extrema_CCLocFOfLocECC2d_Tolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_CCLocFOfLocECC2d
Extrema_CCLocFOfLocECC2d.CurvePtr = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC2d_CurvePtr, None, Extrema_CCLocFOfLocECC2d)
Extrema_CCLocFOfLocECC2d.NbExt = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC2d_NbExt, None, Extrema_CCLocFOfLocECC2d)
Extrema_CCLocFOfLocECC2d.Points = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC2d_Points, None, Extrema_CCLocFOfLocECC2d)
Extrema_CCLocFOfLocECC2d.SearchOfTolerance = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC2d_SearchOfTolerance, None, Extrema_CCLocFOfLocECC2d)
Extrema_CCLocFOfLocECC2d.SetCurve = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC2d_SetCurve, None, Extrema_CCLocFOfLocECC2d)
Extrema_CCLocFOfLocECC2d.SetTolerance = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC2d_SetTolerance, None, Extrema_CCLocFOfLocECC2d)
Extrema_CCLocFOfLocECC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC2d_SquareDistance, None, Extrema_CCLocFOfLocECC2d)
Extrema_CCLocFOfLocECC2d.SubIntervalInitialize = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC2d_SubIntervalInitialize, None, Extrema_CCLocFOfLocECC2d)
Extrema_CCLocFOfLocECC2d.Tolerance = new_instancemethod(_Extrema.Extrema_CCLocFOfLocECC2d_Tolerance, None, Extrema_CCLocFOfLocECC2d)
Extrema_CCLocFOfLocECC2d_swigregister = _Extrema.Extrema_CCLocFOfLocECC2d_swigregister
Extrema_CCLocFOfLocECC2d_swigregister(Extrema_CCLocFOfLocECC2d)

class Extrema_Curve2dTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BSpline(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: opencascade::handle<Geom2d_BSplineCurve>
        """
        return _Extrema.Extrema_Curve2dTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def Bezier(*args) -> "opencascade::handle< Geom2d_BezierCurve >":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: opencascade::handle<Geom2d_BezierCurve>
        """
        return _Extrema.Extrema_Curve2dTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def Circle(*args) -> "gp_Circ2d":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: gp_Circ2d
        """
        return _Extrema.Extrema_Curve2dTool_Circle(*args)

    Circle = staticmethod(Circle)

    def Continuity(*args) -> "GeomAbs_Shape":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: GeomAbs_Shape
        """
        return _Extrema.Extrema_Curve2dTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def D0(*args) -> "void":
        """
        * Computes the point of parameter U on the curve.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_Curve2dTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args) -> "void":
        """
        * Computes the point of parameter U on the curve with its first derivative.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:param V:
        	:type V: gp_Vec2d
        	:rtype: None
        """
        return _Extrema.Extrema_Curve2dTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args) -> "void":
        """
        * Returns the point P of parameter U, the first and second derivatives V1 and V2.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:rtype: None
        """
        return _Extrema.Extrema_Curve2dTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args) -> "void":
        """
        * Returns the point P of parameter U, the first, the second and the third derivative.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:param V3:
        	:type V3: gp_Vec2d
        	:rtype: None
        """
        return _Extrema.Extrema_Curve2dTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args) -> "gp_Vec2d":
        """
        * The returned vector gives the value of the derivative for the order of derivation N.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U:
        	:type U: float
        	:param N:
        	:type N: int
        	:rtype: gp_Vec2d
        """
        return _Extrema.Extrema_Curve2dTool_DN(*args)

    DN = staticmethod(DN)

    def DeflCurvIntervals(*args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        * Returns the parameters bounding the intervals of subdivision of curve according to Curvature deflection. Value of deflection is defined in method. //!
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: opencascade::handle<TColStd_HArray1OfReal>
        """
        return _Extrema.Extrema_Curve2dTool_DeflCurvIntervals(*args)

    DeflCurvIntervals = staticmethod(DeflCurvIntervals)

    def Degree(*args) -> "Standard_Integer":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: int
        """
        return _Extrema.Extrema_Curve2dTool_Degree(*args)

    Degree = staticmethod(Degree)

    def Ellipse(*args) -> "gp_Elips2d":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: gp_Elips2d
        """
        return _Extrema.Extrema_Curve2dTool_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def FirstParameter(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: float
        """
        return _Extrema.Extrema_Curve2dTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def GetType(*args) -> "GeomAbs_CurveType":
        """
        * Returns the type of the curve in the current interval : Line, Circle, Ellipse, Hyperbola, Parabola, BezierCurve, BSplineCurve, OtherCurve.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: GeomAbs_CurveType
        """
        return _Extrema.Extrema_Curve2dTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Hyperbola(*args) -> "gp_Hypr2d":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: gp_Hypr2d
        """
        return _Extrema.Extrema_Curve2dTool_Hyperbola(*args)

    Hyperbola = staticmethod(Hyperbola)

    def Intervals(*args) -> "void":
        """
        * Stores in <T> the parameters bounding the intervals of continuity <S>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param T:
        	:type T: TColStd_Array1OfReal
        	:param S:
        	:type S: GeomAbs_Shape
        	:rtype: None
        """
        return _Extrema.Extrema_Curve2dTool_Intervals(*args)

    Intervals = staticmethod(Intervals)

    def IsClosed(*args) -> "Standard_Boolean":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: bool
        """
        return _Extrema.Extrema_Curve2dTool_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def IsPeriodic(*args) -> "Standard_Boolean":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: bool
        """
        return _Extrema.Extrema_Curve2dTool_IsPeriodic(*args)

    IsPeriodic = staticmethod(IsPeriodic)

    def IsRational(*args) -> "Standard_Boolean":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: bool
        """
        return _Extrema.Extrema_Curve2dTool_IsRational(*args)

    IsRational = staticmethod(IsRational)

    def LastParameter(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: float
        """
        return _Extrema.Extrema_Curve2dTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def Line(*args) -> "gp_Lin2d":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: gp_Lin2d
        """
        return _Extrema.Extrema_Curve2dTool_Line(*args)

    Line = staticmethod(Line)

    def NbIntervals(*args) -> "Standard_Integer":
        """
        * If necessary, breaks the curve in intervals of continuity <S>. And returns the number of intervals.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param S:
        	:type S: GeomAbs_Shape
        	:rtype: int
        """
        return _Extrema.Extrema_Curve2dTool_NbIntervals(*args)

    NbIntervals = staticmethod(NbIntervals)

    def NbKnots(*args) -> "Standard_Integer":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: int
        """
        return _Extrema.Extrema_Curve2dTool_NbKnots(*args)

    NbKnots = staticmethod(NbKnots)

    def NbPoles(*args) -> "Standard_Integer":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: int
        """
        return _Extrema.Extrema_Curve2dTool_NbPoles(*args)

    NbPoles = staticmethod(NbPoles)

    def Parabola(*args) -> "gp_Parab2d":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: gp_Parab2d
        """
        return _Extrema.Extrema_Curve2dTool_Parabola(*args)

    Parabola = staticmethod(Parabola)

    def Period(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: float
        """
        return _Extrema.Extrema_Curve2dTool_Period(*args)

    Period = staticmethod(Period)

    def Resolution(*args) -> "Standard_Real":
        """
        * Returns the parametric resolution corresponding to the real space resolution <R3d>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param R3d:
        	:type R3d: float
        	:rtype: float
        """
        return _Extrema.Extrema_Curve2dTool_Resolution(*args)

    Resolution = staticmethod(Resolution)

    def Value(*args) -> "gp_Pnt2d":
        """
        * Computes the point of parameter U on the curve.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U:
        	:type U: float
        	:rtype: gp_Pnt2d
        """
        return _Extrema.Extrema_Curve2dTool_Value(*args)

    Value = staticmethod(Value)

    __repr__ = _dumps_object


    def __init__(self):
        _Extrema.Extrema_Curve2dTool_swiginit(self, _Extrema.new_Extrema_Curve2dTool())
    __swig_destroy__ = _Extrema.delete_Extrema_Curve2dTool
Extrema_Curve2dTool_swigregister = _Extrema.Extrema_Curve2dTool_swigregister
Extrema_Curve2dTool_swigregister(Extrema_Curve2dTool)

def Extrema_Curve2dTool_BSpline(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: opencascade::handle<Geom2d_BSplineCurve>
    """
    return _Extrema.Extrema_Curve2dTool_BSpline(*args)

def Extrema_Curve2dTool_Bezier(*args) -> "opencascade::handle< Geom2d_BezierCurve >":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: opencascade::handle<Geom2d_BezierCurve>
    """
    return _Extrema.Extrema_Curve2dTool_Bezier(*args)

def Extrema_Curve2dTool_Circle(*args) -> "gp_Circ2d":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: gp_Circ2d
    """
    return _Extrema.Extrema_Curve2dTool_Circle(*args)

def Extrema_Curve2dTool_Continuity(*args) -> "GeomAbs_Shape":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: GeomAbs_Shape
    """
    return _Extrema.Extrema_Curve2dTool_Continuity(*args)

def Extrema_Curve2dTool_D0(*args) -> "void":
    """
    * Computes the point of parameter U on the curve.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:rtype: None
    """
    return _Extrema.Extrema_Curve2dTool_D0(*args)

def Extrema_Curve2dTool_D1(*args) -> "void":
    """
    * Computes the point of parameter U on the curve with its first derivative.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:param V:
    	:type V: gp_Vec2d
    	:rtype: None
    """
    return _Extrema.Extrema_Curve2dTool_D1(*args)

def Extrema_Curve2dTool_D2(*args) -> "void":
    """
    * Returns the point P of parameter U, the first and second derivatives V1 and V2.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:param V1:
    	:type V1: gp_Vec2d
    	:param V2:
    	:type V2: gp_Vec2d
    	:rtype: None
    """
    return _Extrema.Extrema_Curve2dTool_D2(*args)

def Extrema_Curve2dTool_D3(*args) -> "void":
    """
    * Returns the point P of parameter U, the first, the second and the third derivative.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:param V1:
    	:type V1: gp_Vec2d
    	:param V2:
    	:type V2: gp_Vec2d
    	:param V3:
    	:type V3: gp_Vec2d
    	:rtype: None
    """
    return _Extrema.Extrema_Curve2dTool_D3(*args)

def Extrema_Curve2dTool_DN(*args) -> "gp_Vec2d":
    """
    * The returned vector gives the value of the derivative for the order of derivation N.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param U:
    	:type U: float
    	:param N:
    	:type N: int
    	:rtype: gp_Vec2d
    """
    return _Extrema.Extrema_Curve2dTool_DN(*args)

def Extrema_Curve2dTool_DeflCurvIntervals(*args) -> "opencascade::handle< TColStd_HArray1OfReal >":
    """
    * Returns the parameters bounding the intervals of subdivision of curve according to Curvature deflection. Value of deflection is defined in method. //!
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: opencascade::handle<TColStd_HArray1OfReal>
    """
    return _Extrema.Extrema_Curve2dTool_DeflCurvIntervals(*args)

def Extrema_Curve2dTool_Degree(*args) -> "Standard_Integer":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: int
    """
    return _Extrema.Extrema_Curve2dTool_Degree(*args)

def Extrema_Curve2dTool_Ellipse(*args) -> "gp_Elips2d":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: gp_Elips2d
    """
    return _Extrema.Extrema_Curve2dTool_Ellipse(*args)

def Extrema_Curve2dTool_FirstParameter(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: float
    """
    return _Extrema.Extrema_Curve2dTool_FirstParameter(*args)

def Extrema_Curve2dTool_GetType(*args) -> "GeomAbs_CurveType":
    """
    * Returns the type of the curve in the current interval : Line, Circle, Ellipse, Hyperbola, Parabola, BezierCurve, BSplineCurve, OtherCurve.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: GeomAbs_CurveType
    """
    return _Extrema.Extrema_Curve2dTool_GetType(*args)

def Extrema_Curve2dTool_Hyperbola(*args) -> "gp_Hypr2d":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: gp_Hypr2d
    """
    return _Extrema.Extrema_Curve2dTool_Hyperbola(*args)

def Extrema_Curve2dTool_Intervals(*args) -> "void":
    """
    * Stores in <T> the parameters bounding the intervals of continuity <S>.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param T:
    	:type T: TColStd_Array1OfReal
    	:param S:
    	:type S: GeomAbs_Shape
    	:rtype: None
    """
    return _Extrema.Extrema_Curve2dTool_Intervals(*args)

def Extrema_Curve2dTool_IsClosed(*args) -> "Standard_Boolean":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: bool
    """
    return _Extrema.Extrema_Curve2dTool_IsClosed(*args)

def Extrema_Curve2dTool_IsPeriodic(*args) -> "Standard_Boolean":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: bool
    """
    return _Extrema.Extrema_Curve2dTool_IsPeriodic(*args)

def Extrema_Curve2dTool_IsRational(*args) -> "Standard_Boolean":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: bool
    """
    return _Extrema.Extrema_Curve2dTool_IsRational(*args)

def Extrema_Curve2dTool_LastParameter(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: float
    """
    return _Extrema.Extrema_Curve2dTool_LastParameter(*args)

def Extrema_Curve2dTool_Line(*args) -> "gp_Lin2d":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: gp_Lin2d
    """
    return _Extrema.Extrema_Curve2dTool_Line(*args)

def Extrema_Curve2dTool_NbIntervals(*args) -> "Standard_Integer":
    """
    * If necessary, breaks the curve in intervals of continuity <S>. And returns the number of intervals.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param S:
    	:type S: GeomAbs_Shape
    	:rtype: int
    """
    return _Extrema.Extrema_Curve2dTool_NbIntervals(*args)

def Extrema_Curve2dTool_NbKnots(*args) -> "Standard_Integer":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: int
    """
    return _Extrema.Extrema_Curve2dTool_NbKnots(*args)

def Extrema_Curve2dTool_NbPoles(*args) -> "Standard_Integer":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: int
    """
    return _Extrema.Extrema_Curve2dTool_NbPoles(*args)

def Extrema_Curve2dTool_Parabola(*args) -> "gp_Parab2d":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: gp_Parab2d
    """
    return _Extrema.Extrema_Curve2dTool_Parabola(*args)

def Extrema_Curve2dTool_Period(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: float
    """
    return _Extrema.Extrema_Curve2dTool_Period(*args)

def Extrema_Curve2dTool_Resolution(*args) -> "Standard_Real":
    """
    * Returns the parametric resolution corresponding to the real space resolution <R3d>.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param R3d:
    	:type R3d: float
    	:rtype: float
    """
    return _Extrema.Extrema_Curve2dTool_Resolution(*args)

def Extrema_Curve2dTool_Value(*args) -> "gp_Pnt2d":
    """
    * Computes the point of parameter U on the curve.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param U:
    	:type U: float
    	:rtype: gp_Pnt2d
    """
    return _Extrema.Extrema_Curve2dTool_Value(*args)

class Extrema_CurveTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BSpline(*args) -> "opencascade::handle< Geom_BSplineCurve >":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: opencascade::handle<Geom_BSplineCurve>
        """
        return _Extrema.Extrema_CurveTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def Bezier(*args) -> "opencascade::handle< Geom_BezierCurve >":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: opencascade::handle<Geom_BezierCurve>
        """
        return _Extrema.Extrema_CurveTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def Circle(*args) -> "gp_Circ":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: gp_Circ
        """
        return _Extrema.Extrema_CurveTool_Circle(*args)

    Circle = staticmethod(Circle)

    def Continuity(*args) -> "GeomAbs_Shape":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: GeomAbs_Shape
        """
        return _Extrema.Extrema_CurveTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def D0(*args) -> "void":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_CurveTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args) -> "void":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:param V:
        	:type V: gp_Vec
        	:rtype: None
        """
        return _Extrema.Extrema_CurveTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args) -> "void":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:param V2:
        	:type V2: gp_Vec
        	:rtype: None
        """
        return _Extrema.Extrema_CurveTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args) -> "void":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:param V2:
        	:type V2: gp_Vec
        	:param V3:
        	:type V3: gp_Vec
        	:rtype: None
        """
        return _Extrema.Extrema_CurveTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args) -> "gp_Vec":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:param U:
        	:type U: float
        	:param N:
        	:type N: int
        	:rtype: gp_Vec
        """
        return _Extrema.Extrema_CurveTool_DN(*args)

    DN = staticmethod(DN)

    def DeflCurvIntervals(*args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        * Returns the parameters bounding the intervals of subdivision of curve according to Curvature deflection. Value of deflection is defined in method. //!
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: opencascade::handle<TColStd_HArray1OfReal>
        """
        return _Extrema.Extrema_CurveTool_DeflCurvIntervals(*args)

    DeflCurvIntervals = staticmethod(DeflCurvIntervals)

    def Degree(*args) -> "Standard_Integer":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: int
        """
        return _Extrema.Extrema_CurveTool_Degree(*args)

    Degree = staticmethod(Degree)

    def Ellipse(*args) -> "gp_Elips":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: gp_Elips
        """
        return _Extrema.Extrema_CurveTool_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def FirstParameter(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: float
        """
        return _Extrema.Extrema_CurveTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def GetType(*args) -> "GeomAbs_CurveType":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: GeomAbs_CurveType
        """
        return _Extrema.Extrema_CurveTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Hyperbola(*args) -> "gp_Hypr":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: gp_Hypr
        """
        return _Extrema.Extrema_CurveTool_Hyperbola(*args)

    Hyperbola = staticmethod(Hyperbola)

    def Intervals(*args) -> "void":
        """
        * Stores in <T> the parameters bounding the intervals of continuity <S>. //! The array must provide enough room to accomodate for the parameters. i.e. T.Length() > NbIntervals()
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param T:
        	:type T: TColStd_Array1OfReal
        	:param S:
        	:type S: GeomAbs_Shape
        	:rtype: None
        """
        return _Extrema.Extrema_CurveTool_Intervals(*args)

    Intervals = staticmethod(Intervals)

    def IsPeriodic(*args) -> "Standard_Boolean":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: bool
        """
        return _Extrema.Extrema_CurveTool_IsPeriodic(*args)

    IsPeriodic = staticmethod(IsPeriodic)

    def IsRational(*args) -> "Standard_Boolean":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: bool
        """
        return _Extrema.Extrema_CurveTool_IsRational(*args)

    IsRational = staticmethod(IsRational)

    def LastParameter(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: float
        """
        return _Extrema.Extrema_CurveTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def Line(*args) -> "gp_Lin":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: gp_Lin
        """
        return _Extrema.Extrema_CurveTool_Line(*args)

    Line = staticmethod(Line)

    def NbIntervals(*args) -> "Standard_Integer":
        """
        * Returns the number of intervals for continuity <S>. May be one if Continuity(me) >= <S>
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param S:
        	:type S: GeomAbs_Shape
        	:rtype: int
        """
        return _Extrema.Extrema_CurveTool_NbIntervals(*args)

    NbIntervals = staticmethod(NbIntervals)

    def NbKnots(*args) -> "Standard_Integer":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: int
        """
        return _Extrema.Extrema_CurveTool_NbKnots(*args)

    NbKnots = staticmethod(NbKnots)

    def NbPoles(*args) -> "Standard_Integer":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: int
        """
        return _Extrema.Extrema_CurveTool_NbPoles(*args)

    NbPoles = staticmethod(NbPoles)

    def Parabola(*args) -> "gp_Parab":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: gp_Parab
        """
        return _Extrema.Extrema_CurveTool_Parabola(*args)

    Parabola = staticmethod(Parabola)

    def Period(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:rtype: float
        """
        return _Extrema.Extrema_CurveTool_Period(*args)

    Period = staticmethod(Period)

    def Resolution(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:param R3d:
        	:type R3d: float
        	:rtype: float
        """
        return _Extrema.Extrema_CurveTool_Resolution(*args)

    Resolution = staticmethod(Resolution)

    def Value(*args) -> "gp_Pnt":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:param U:
        	:type U: float
        	:rtype: gp_Pnt
        """
        return _Extrema.Extrema_CurveTool_Value(*args)

    Value = staticmethod(Value)

    __repr__ = _dumps_object


    def __init__(self):
        _Extrema.Extrema_CurveTool_swiginit(self, _Extrema.new_Extrema_CurveTool())
    __swig_destroy__ = _Extrema.delete_Extrema_CurveTool
Extrema_CurveTool_swigregister = _Extrema.Extrema_CurveTool_swigregister
Extrema_CurveTool_swigregister(Extrema_CurveTool)

def Extrema_CurveTool_BSpline(*args) -> "opencascade::handle< Geom_BSplineCurve >":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: opencascade::handle<Geom_BSplineCurve>
    """
    return _Extrema.Extrema_CurveTool_BSpline(*args)

def Extrema_CurveTool_Bezier(*args) -> "opencascade::handle< Geom_BezierCurve >":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: opencascade::handle<Geom_BezierCurve>
    """
    return _Extrema.Extrema_CurveTool_Bezier(*args)

def Extrema_CurveTool_Circle(*args) -> "gp_Circ":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: gp_Circ
    """
    return _Extrema.Extrema_CurveTool_Circle(*args)

def Extrema_CurveTool_Continuity(*args) -> "GeomAbs_Shape":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: GeomAbs_Shape
    """
    return _Extrema.Extrema_CurveTool_Continuity(*args)

def Extrema_CurveTool_D0(*args) -> "void":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt
    	:rtype: None
    """
    return _Extrema.Extrema_CurveTool_D0(*args)

def Extrema_CurveTool_D1(*args) -> "void":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt
    	:param V:
    	:type V: gp_Vec
    	:rtype: None
    """
    return _Extrema.Extrema_CurveTool_D1(*args)

def Extrema_CurveTool_D2(*args) -> "void":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt
    	:param V1:
    	:type V1: gp_Vec
    	:param V2:
    	:type V2: gp_Vec
    	:rtype: None
    """
    return _Extrema.Extrema_CurveTool_D2(*args)

def Extrema_CurveTool_D3(*args) -> "void":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt
    	:param V1:
    	:type V1: gp_Vec
    	:param V2:
    	:type V2: gp_Vec
    	:param V3:
    	:type V3: gp_Vec
    	:rtype: None
    """
    return _Extrema.Extrema_CurveTool_D3(*args)

def Extrema_CurveTool_DN(*args) -> "gp_Vec":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:param U:
    	:type U: float
    	:param N:
    	:type N: int
    	:rtype: gp_Vec
    """
    return _Extrema.Extrema_CurveTool_DN(*args)

def Extrema_CurveTool_DeflCurvIntervals(*args) -> "opencascade::handle< TColStd_HArray1OfReal >":
    """
    * Returns the parameters bounding the intervals of subdivision of curve according to Curvature deflection. Value of deflection is defined in method. //!
    	:param C:
    	:type C: Adaptor3d_Curve
    	:rtype: opencascade::handle<TColStd_HArray1OfReal>
    """
    return _Extrema.Extrema_CurveTool_DeflCurvIntervals(*args)

def Extrema_CurveTool_Degree(*args) -> "Standard_Integer":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: int
    """
    return _Extrema.Extrema_CurveTool_Degree(*args)

def Extrema_CurveTool_Ellipse(*args) -> "gp_Elips":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: gp_Elips
    """
    return _Extrema.Extrema_CurveTool_Ellipse(*args)

def Extrema_CurveTool_FirstParameter(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: float
    """
    return _Extrema.Extrema_CurveTool_FirstParameter(*args)

def Extrema_CurveTool_GetType(*args) -> "GeomAbs_CurveType":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: GeomAbs_CurveType
    """
    return _Extrema.Extrema_CurveTool_GetType(*args)

def Extrema_CurveTool_Hyperbola(*args) -> "gp_Hypr":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: gp_Hypr
    """
    return _Extrema.Extrema_CurveTool_Hyperbola(*args)

def Extrema_CurveTool_Intervals(*args) -> "void":
    """
    * Stores in <T> the parameters bounding the intervals of continuity <S>. //! The array must provide enough room to accomodate for the parameters. i.e. T.Length() > NbIntervals()
    	:param C:
    	:type C: Adaptor3d_Curve
    	:param T:
    	:type T: TColStd_Array1OfReal
    	:param S:
    	:type S: GeomAbs_Shape
    	:rtype: None
    """
    return _Extrema.Extrema_CurveTool_Intervals(*args)

def Extrema_CurveTool_IsPeriodic(*args) -> "Standard_Boolean":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: bool
    """
    return _Extrema.Extrema_CurveTool_IsPeriodic(*args)

def Extrema_CurveTool_IsRational(*args) -> "Standard_Boolean":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: bool
    """
    return _Extrema.Extrema_CurveTool_IsRational(*args)

def Extrema_CurveTool_LastParameter(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: float
    """
    return _Extrema.Extrema_CurveTool_LastParameter(*args)

def Extrema_CurveTool_Line(*args) -> "gp_Lin":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: gp_Lin
    """
    return _Extrema.Extrema_CurveTool_Line(*args)

def Extrema_CurveTool_NbIntervals(*args) -> "Standard_Integer":
    """
    * Returns the number of intervals for continuity <S>. May be one if Continuity(me) >= <S>
    	:param C:
    	:type C: Adaptor3d_Curve
    	:param S:
    	:type S: GeomAbs_Shape
    	:rtype: int
    """
    return _Extrema.Extrema_CurveTool_NbIntervals(*args)

def Extrema_CurveTool_NbKnots(*args) -> "Standard_Integer":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: int
    """
    return _Extrema.Extrema_CurveTool_NbKnots(*args)

def Extrema_CurveTool_NbPoles(*args) -> "Standard_Integer":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: int
    """
    return _Extrema.Extrema_CurveTool_NbPoles(*args)

def Extrema_CurveTool_Parabola(*args) -> "gp_Parab":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: gp_Parab
    """
    return _Extrema.Extrema_CurveTool_Parabola(*args)

def Extrema_CurveTool_Period(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:rtype: float
    """
    return _Extrema.Extrema_CurveTool_Period(*args)

def Extrema_CurveTool_Resolution(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:param R3d:
    	:type R3d: float
    	:rtype: float
    """
    return _Extrema.Extrema_CurveTool_Resolution(*args)

def Extrema_CurveTool_Value(*args) -> "gp_Pnt":
    """
    :param C:
    	:type C: Adaptor3d_Curve
    	:param U:
    	:type U: float
    	:rtype: gp_Pnt
    """
    return _Extrema.Extrema_CurveTool_Value(*args)

class Extrema_ECC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Calculates all the distances as above between Uinf and Usup for C1 and between Vinf and Vsup for C2.
        	:rtype: None
        * It calculates all the distances. The function F(u,v)=distance(C1(u),C2(v)) has an extremum when gradient(f)=0. The algorithm uses Evtushenko's global optimization solver.
        	:param C1:
        	:type C1: Adaptor3d_Curve
        	:param C2:
        	:type C2: Adaptor3d_Curve
        	:rtype: None
        * Calculates all the distances as above between Uinf and Usup for C1 and between Vinf and Vsup for C2.
        	:param C1:
        	:type C1: Adaptor3d_Curve
        	:param C2:
        	:type C2: Adaptor3d_Curve
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param Vinf:
        	:type Vinf: float
        	:param Vsup:
        	:type Vsup: float
        	:rtype: None
        """
        _Extrema.Extrema_ECC_swiginit(self, _Extrema.new_Extrema_ECC(*args))

    def GetSingleSolutionFlag(self, *args) -> "Standard_Boolean":
        """
        * Get flag for single extrema computation. Works on parametric solver only.
        	:rtype: bool
        """
        return _Extrema.Extrema_ECC_GetSingleSolutionFlag(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ECC_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns state of myParallel flag.
        	:rtype: bool
        """
        return _Extrema.Extrema_ECC_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ECC_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs calculations.
        	:rtype: None
        """
        return _Extrema.Extrema_ECC_Perform(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the points of the Nth extremum distance. P1 is on the first curve, P2 on the second one.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnCurv
        	:param P2:
        	:type P2: Extrema_POnCurv
        	:rtype: None
        """
        return _Extrema.Extrema_ECC_Points(self, *args)


    def SetParams(self, *args) -> "void":
        """
        * Set params in case of empty constructor is usage.
        	:param C1:
        	:type C1: Adaptor3d_Curve
        	:param C2:
        	:type C2: Adaptor3d_Curve
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param Vinf:
        	:type Vinf: float
        	:param Vsup:
        	:type Vsup: float
        	:rtype: None
        """
        return _Extrema.Extrema_ECC_SetParams(self, *args)


    def SetSingleSolutionFlag(self, *args) -> "void":
        """
        * Set flag for single extrema computation. Works on parametric solver only.
        	:param theSingleSolutionFlag:
        	:type theSingleSolutionFlag: bool
        	:rtype: None
        """
        return _Extrema.Extrema_ECC_SetSingleSolutionFlag(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        :param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _Extrema.Extrema_ECC_SetTolerance(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth square extremum distance.
        	:param N: default value is 1
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ECC_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ECC
Extrema_ECC.GetSingleSolutionFlag = new_instancemethod(_Extrema.Extrema_ECC_GetSingleSolutionFlag, None, Extrema_ECC)
Extrema_ECC.IsDone = new_instancemethod(_Extrema.Extrema_ECC_IsDone, None, Extrema_ECC)
Extrema_ECC.IsParallel = new_instancemethod(_Extrema.Extrema_ECC_IsParallel, None, Extrema_ECC)
Extrema_ECC.NbExt = new_instancemethod(_Extrema.Extrema_ECC_NbExt, None, Extrema_ECC)
Extrema_ECC.Perform = new_instancemethod(_Extrema.Extrema_ECC_Perform, None, Extrema_ECC)
Extrema_ECC.Points = new_instancemethod(_Extrema.Extrema_ECC_Points, None, Extrema_ECC)
Extrema_ECC.SetParams = new_instancemethod(_Extrema.Extrema_ECC_SetParams, None, Extrema_ECC)
Extrema_ECC.SetSingleSolutionFlag = new_instancemethod(_Extrema.Extrema_ECC_SetSingleSolutionFlag, None, Extrema_ECC)
Extrema_ECC.SetTolerance = new_instancemethod(_Extrema.Extrema_ECC_SetTolerance, None, Extrema_ECC)
Extrema_ECC.SquareDistance = new_instancemethod(_Extrema.Extrema_ECC_SquareDistance, None, Extrema_ECC)
Extrema_ECC_swigregister = _Extrema.Extrema_ECC_swigregister
Extrema_ECC_swigregister(Extrema_ECC)

class Extrema_ECC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Calculates all the distances as above between Uinf and Usup for C1 and between Vinf and Vsup for C2.
        	:rtype: None
        * It calculates all the distances. The function F(u,v)=distance(C1(u),C2(v)) has an extremum when gradient(f)=0. The algorithm uses Evtushenko's global optimization solver.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:rtype: None
        * Calculates all the distances as above between Uinf and Usup for C1 and between Vinf and Vsup for C2.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param Vinf:
        	:type Vinf: float
        	:param Vsup:
        	:type Vsup: float
        	:rtype: None
        """
        _Extrema.Extrema_ECC2d_swiginit(self, _Extrema.new_Extrema_ECC2d(*args))

    def GetSingleSolutionFlag(self, *args) -> "Standard_Boolean":
        """
        * Get flag for single extrema computation. Works on parametric solver only.
        	:rtype: bool
        """
        return _Extrema.Extrema_ECC2d_GetSingleSolutionFlag(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ECC2d_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns state of myParallel flag.
        	:rtype: bool
        """
        return _Extrema.Extrema_ECC2d_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ECC2d_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs calculations.
        	:rtype: None
        """
        return _Extrema.Extrema_ECC2d_Perform(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the points of the Nth extremum distance. P1 is on the first curve, P2 on the second one.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnCurv2d
        	:param P2:
        	:type P2: Extrema_POnCurv2d
        	:rtype: None
        """
        return _Extrema.Extrema_ECC2d_Points(self, *args)


    def SetParams(self, *args) -> "void":
        """
        * Set params in case of empty constructor is usage.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param Vinf:
        	:type Vinf: float
        	:param Vsup:
        	:type Vsup: float
        	:rtype: None
        """
        return _Extrema.Extrema_ECC2d_SetParams(self, *args)


    def SetSingleSolutionFlag(self, *args) -> "void":
        """
        * Set flag for single extrema computation. Works on parametric solver only.
        	:param theSingleSolutionFlag:
        	:type theSingleSolutionFlag: bool
        	:rtype: None
        """
        return _Extrema.Extrema_ECC2d_SetSingleSolutionFlag(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        :param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _Extrema.Extrema_ECC2d_SetTolerance(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth square extremum distance.
        	:param N: default value is 1
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ECC2d_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ECC2d
Extrema_ECC2d.GetSingleSolutionFlag = new_instancemethod(_Extrema.Extrema_ECC2d_GetSingleSolutionFlag, None, Extrema_ECC2d)
Extrema_ECC2d.IsDone = new_instancemethod(_Extrema.Extrema_ECC2d_IsDone, None, Extrema_ECC2d)
Extrema_ECC2d.IsParallel = new_instancemethod(_Extrema.Extrema_ECC2d_IsParallel, None, Extrema_ECC2d)
Extrema_ECC2d.NbExt = new_instancemethod(_Extrema.Extrema_ECC2d_NbExt, None, Extrema_ECC2d)
Extrema_ECC2d.Perform = new_instancemethod(_Extrema.Extrema_ECC2d_Perform, None, Extrema_ECC2d)
Extrema_ECC2d.Points = new_instancemethod(_Extrema.Extrema_ECC2d_Points, None, Extrema_ECC2d)
Extrema_ECC2d.SetParams = new_instancemethod(_Extrema.Extrema_ECC2d_SetParams, None, Extrema_ECC2d)
Extrema_ECC2d.SetSingleSolutionFlag = new_instancemethod(_Extrema.Extrema_ECC2d_SetSingleSolutionFlag, None, Extrema_ECC2d)
Extrema_ECC2d.SetTolerance = new_instancemethod(_Extrema.Extrema_ECC2d_SetTolerance, None, Extrema_ECC2d)
Extrema_ECC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_ECC2d_SquareDistance, None, Extrema_ECC2d)
Extrema_ECC2d_swigregister = _Extrema.Extrema_ECC2d_swigregister
Extrema_ECC2d_swigregister(Extrema_ECC2d)

class Extrema_ELPCOfLocateExtPC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. Zeros are searched between uinf and usup. Tol is used to decide to stop the iterations according to the following condition: if n is the number of iterations, the algorithm stops when abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. Tol is used to decide to stop the iterations according to the following condition: if n is the number of iterations, the algorithm stops when abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        """
        _Extrema.Extrema_ELPCOfLocateExtPC_swiginit(self, _Extrema.new_Extrema_ELPCOfLocateExtPC(*args))

    def Initialize(self, *args) -> "void":
        """
        * initializes the fields of the algorithm.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the <N>th extremum distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the point of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the <N>th extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC_SquareDistance(self, *args)


    def TrimmedSquareDistances(self, *args) -> "void":
        """
        * if the curve is a trimmed curve, dist1 is a square distance between <P> and the point of parameter FirstParameter <P1> and dist2 is a square distance between <P> and the point of parameter LastParameter <P2>.
        	:param dist1:
        	:type dist1: float
        	:param dist2:
        	:type dist2: float
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC_TrimmedSquareDistances(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ELPCOfLocateExtPC
Extrema_ELPCOfLocateExtPC.Initialize = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC_Initialize, None, Extrema_ELPCOfLocateExtPC)
Extrema_ELPCOfLocateExtPC.IsDone = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC_IsDone, None, Extrema_ELPCOfLocateExtPC)
Extrema_ELPCOfLocateExtPC.IsMin = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC_IsMin, None, Extrema_ELPCOfLocateExtPC)
Extrema_ELPCOfLocateExtPC.NbExt = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC_NbExt, None, Extrema_ELPCOfLocateExtPC)
Extrema_ELPCOfLocateExtPC.Perform = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC_Perform, None, Extrema_ELPCOfLocateExtPC)
Extrema_ELPCOfLocateExtPC.Point = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC_Point, None, Extrema_ELPCOfLocateExtPC)
Extrema_ELPCOfLocateExtPC.SquareDistance = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC_SquareDistance, None, Extrema_ELPCOfLocateExtPC)
Extrema_ELPCOfLocateExtPC.TrimmedSquareDistances = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC_TrimmedSquareDistances, None, Extrema_ELPCOfLocateExtPC)
Extrema_ELPCOfLocateExtPC_swigregister = _Extrema.Extrema_ELPCOfLocateExtPC_swigregister
Extrema_ELPCOfLocateExtPC_swigregister(Extrema_ELPCOfLocateExtPC)

class Extrema_ELPCOfLocateExtPC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. Zeros are searched between uinf and usup. Tol is used to decide to stop the iterations according to the following condition: if n is the number of iterations, the algorithm stops when abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. Tol is used to decide to stop the iterations according to the following condition: if n is the number of iterations, the algorithm stops when abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        """
        _Extrema.Extrema_ELPCOfLocateExtPC2d_swiginit(self, _Extrema.new_Extrema_ELPCOfLocateExtPC2d(*args))

    def Initialize(self, *args) -> "void":
        """
        * initializes the fields of the algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC2d_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC2d_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the <N>th extremum distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC2d_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC2d_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC2d_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the point of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv2d
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC2d_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the <N>th extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC2d_SquareDistance(self, *args)


    def TrimmedSquareDistances(self, *args) -> "void":
        """
        * if the curve is a trimmed curve, dist1 is a square distance between <P> and the point of parameter FirstParameter <P1> and dist2 is a square distance between <P> and the point of parameter LastParameter <P2>.
        	:param dist1:
        	:type dist1: float
        	:param dist2:
        	:type dist2: float
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_ELPCOfLocateExtPC2d_TrimmedSquareDistances(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ELPCOfLocateExtPC2d
Extrema_ELPCOfLocateExtPC2d.Initialize = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC2d_Initialize, None, Extrema_ELPCOfLocateExtPC2d)
Extrema_ELPCOfLocateExtPC2d.IsDone = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC2d_IsDone, None, Extrema_ELPCOfLocateExtPC2d)
Extrema_ELPCOfLocateExtPC2d.IsMin = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC2d_IsMin, None, Extrema_ELPCOfLocateExtPC2d)
Extrema_ELPCOfLocateExtPC2d.NbExt = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC2d_NbExt, None, Extrema_ELPCOfLocateExtPC2d)
Extrema_ELPCOfLocateExtPC2d.Perform = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC2d_Perform, None, Extrema_ELPCOfLocateExtPC2d)
Extrema_ELPCOfLocateExtPC2d.Point = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC2d_Point, None, Extrema_ELPCOfLocateExtPC2d)
Extrema_ELPCOfLocateExtPC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC2d_SquareDistance, None, Extrema_ELPCOfLocateExtPC2d)
Extrema_ELPCOfLocateExtPC2d.TrimmedSquareDistances = new_instancemethod(_Extrema.Extrema_ELPCOfLocateExtPC2d_TrimmedSquareDistances, None, Extrema_ELPCOfLocateExtPC2d)
Extrema_ELPCOfLocateExtPC2d_swigregister = _Extrema.Extrema_ELPCOfLocateExtPC2d_swigregister
Extrema_ELPCOfLocateExtPC2d_swigregister(Extrema_ELPCOfLocateExtPC2d)

class Extrema_EPCOfELPCOfLocateExtPC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. NbU is used to locate the close points to find the zeros. Tol and TolU are used to decide to stop the iterations according to the following condition: if n is the number of iterations, abs(Un-Un-1) < TolU and abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbU:
        	:type NbU: int
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. NbU is used to locate the close points to find the zeros. Zeros are searched between umin and usup. Tol and TolU are used to decide to stop the iterations according to the following condition: if n is the number of iterations, abs(Un-Un-1) < TolU and abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        _Extrema.Extrema_EPCOfELPCOfLocateExtPC_swiginit(self, _Extrema.new_Extrema_EPCOfELPCOfLocateExtPC(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbU:
        	:type NbU: int
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: None
        * sets the fields of the algorithm.
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Nth extremum distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * the algorithm is done with the point P. An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the point of the Nth extremum distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_EPCOfELPCOfLocateExtPC
Extrema_EPCOfELPCOfLocateExtPC.Initialize = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC_Initialize, None, Extrema_EPCOfELPCOfLocateExtPC)
Extrema_EPCOfELPCOfLocateExtPC.IsDone = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC_IsDone, None, Extrema_EPCOfELPCOfLocateExtPC)
Extrema_EPCOfELPCOfLocateExtPC.IsMin = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC_IsMin, None, Extrema_EPCOfELPCOfLocateExtPC)
Extrema_EPCOfELPCOfLocateExtPC.NbExt = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC_NbExt, None, Extrema_EPCOfELPCOfLocateExtPC)
Extrema_EPCOfELPCOfLocateExtPC.Perform = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC_Perform, None, Extrema_EPCOfELPCOfLocateExtPC)
Extrema_EPCOfELPCOfLocateExtPC.Point = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC_Point, None, Extrema_EPCOfELPCOfLocateExtPC)
Extrema_EPCOfELPCOfLocateExtPC.SquareDistance = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC_SquareDistance, None, Extrema_EPCOfELPCOfLocateExtPC)
Extrema_EPCOfELPCOfLocateExtPC_swigregister = _Extrema.Extrema_EPCOfELPCOfLocateExtPC_swigregister
Extrema_EPCOfELPCOfLocateExtPC_swigregister(Extrema_EPCOfELPCOfLocateExtPC)

class Extrema_EPCOfELPCOfLocateExtPC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. NbU is used to locate the close points to find the zeros. Tol and TolU are used to decide to stop the iterations according to the following condition: if n is the number of iterations, abs(Un-Un-1) < TolU and abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbU:
        	:type NbU: int
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. NbU is used to locate the close points to find the zeros. Zeros are searched between umin and usup. Tol and TolU are used to decide to stop the iterations according to the following condition: if n is the number of iterations, abs(Un-Un-1) < TolU and abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        _Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_swiginit(self, _Extrema.new_Extrema_EPCOfELPCOfLocateExtPC2d(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbU:
        	:type NbU: int
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: None
        * sets the fields of the algorithm.
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Nth extremum distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * the algorithm is done with the point P. An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the point of the Nth extremum distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv2d
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_EPCOfELPCOfLocateExtPC2d
Extrema_EPCOfELPCOfLocateExtPC2d.Initialize = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_Initialize, None, Extrema_EPCOfELPCOfLocateExtPC2d)
Extrema_EPCOfELPCOfLocateExtPC2d.IsDone = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_IsDone, None, Extrema_EPCOfELPCOfLocateExtPC2d)
Extrema_EPCOfELPCOfLocateExtPC2d.IsMin = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_IsMin, None, Extrema_EPCOfELPCOfLocateExtPC2d)
Extrema_EPCOfELPCOfLocateExtPC2d.NbExt = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_NbExt, None, Extrema_EPCOfELPCOfLocateExtPC2d)
Extrema_EPCOfELPCOfLocateExtPC2d.Perform = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_Perform, None, Extrema_EPCOfELPCOfLocateExtPC2d)
Extrema_EPCOfELPCOfLocateExtPC2d.Point = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_Point, None, Extrema_EPCOfELPCOfLocateExtPC2d)
Extrema_EPCOfELPCOfLocateExtPC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_SquareDistance, None, Extrema_EPCOfELPCOfLocateExtPC2d)
Extrema_EPCOfELPCOfLocateExtPC2d_swigregister = _Extrema.Extrema_EPCOfELPCOfLocateExtPC2d_swigregister
Extrema_EPCOfELPCOfLocateExtPC2d_swigregister(Extrema_EPCOfELPCOfLocateExtPC2d)

class Extrema_EPCOfExtPC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. NbU is used to locate the close points to find the zeros. Tol and TolU are used to decide to stop the iterations according to the following condition: if n is the number of iterations, abs(Un-Un-1) < TolU and abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbU:
        	:type NbU: int
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. NbU is used to locate the close points to find the zeros. Zeros are searched between umin and usup. Tol and TolU are used to decide to stop the iterations according to the following condition: if n is the number of iterations, abs(Un-Un-1) < TolU and abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        _Extrema.Extrema_EPCOfExtPC_swiginit(self, _Extrema.new_Extrema_EPCOfExtPC(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbU:
        	:type NbU: int
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: None
        * sets the fields of the algorithm.
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        return _Extrema.Extrema_EPCOfExtPC_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_EPCOfExtPC_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Nth extremum distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_EPCOfExtPC_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_EPCOfExtPC_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * the algorithm is done with the point P. An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_EPCOfExtPC_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the point of the Nth extremum distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_EPCOfExtPC_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_EPCOfExtPC_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_EPCOfExtPC
Extrema_EPCOfExtPC.Initialize = new_instancemethod(_Extrema.Extrema_EPCOfExtPC_Initialize, None, Extrema_EPCOfExtPC)
Extrema_EPCOfExtPC.IsDone = new_instancemethod(_Extrema.Extrema_EPCOfExtPC_IsDone, None, Extrema_EPCOfExtPC)
Extrema_EPCOfExtPC.IsMin = new_instancemethod(_Extrema.Extrema_EPCOfExtPC_IsMin, None, Extrema_EPCOfExtPC)
Extrema_EPCOfExtPC.NbExt = new_instancemethod(_Extrema.Extrema_EPCOfExtPC_NbExt, None, Extrema_EPCOfExtPC)
Extrema_EPCOfExtPC.Perform = new_instancemethod(_Extrema.Extrema_EPCOfExtPC_Perform, None, Extrema_EPCOfExtPC)
Extrema_EPCOfExtPC.Point = new_instancemethod(_Extrema.Extrema_EPCOfExtPC_Point, None, Extrema_EPCOfExtPC)
Extrema_EPCOfExtPC.SquareDistance = new_instancemethod(_Extrema.Extrema_EPCOfExtPC_SquareDistance, None, Extrema_EPCOfExtPC)
Extrema_EPCOfExtPC_swigregister = _Extrema.Extrema_EPCOfExtPC_swigregister
Extrema_EPCOfExtPC_swigregister(Extrema_EPCOfExtPC)

class Extrema_EPCOfExtPC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. NbU is used to locate the close points to find the zeros. Tol and TolU are used to decide to stop the iterations according to the following condition: if n is the number of iterations, abs(Un-Un-1) < TolU and abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbU:
        	:type NbU: int
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. NbU is used to locate the close points to find the zeros. Zeros are searched between umin and usup. Tol and TolU are used to decide to stop the iterations according to the following condition: if n is the number of iterations, abs(Un-Un-1) < TolU and abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        _Extrema.Extrema_EPCOfExtPC2d_swiginit(self, _Extrema.new_Extrema_EPCOfExtPC2d(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbU:
        	:type NbU: int
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: None
        * sets the fields of the algorithm.
        	:param NbU:
        	:type NbU: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        return _Extrema.Extrema_EPCOfExtPC2d_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_EPCOfExtPC2d_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Nth extremum distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_EPCOfExtPC2d_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_EPCOfExtPC2d_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * the algorithm is done with the point P. An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_EPCOfExtPC2d_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the point of the Nth extremum distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv2d
        """
        return _Extrema.Extrema_EPCOfExtPC2d_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_EPCOfExtPC2d_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_EPCOfExtPC2d
Extrema_EPCOfExtPC2d.Initialize = new_instancemethod(_Extrema.Extrema_EPCOfExtPC2d_Initialize, None, Extrema_EPCOfExtPC2d)
Extrema_EPCOfExtPC2d.IsDone = new_instancemethod(_Extrema.Extrema_EPCOfExtPC2d_IsDone, None, Extrema_EPCOfExtPC2d)
Extrema_EPCOfExtPC2d.IsMin = new_instancemethod(_Extrema.Extrema_EPCOfExtPC2d_IsMin, None, Extrema_EPCOfExtPC2d)
Extrema_EPCOfExtPC2d.NbExt = new_instancemethod(_Extrema.Extrema_EPCOfExtPC2d_NbExt, None, Extrema_EPCOfExtPC2d)
Extrema_EPCOfExtPC2d.Perform = new_instancemethod(_Extrema.Extrema_EPCOfExtPC2d_Perform, None, Extrema_EPCOfExtPC2d)
Extrema_EPCOfExtPC2d.Point = new_instancemethod(_Extrema.Extrema_EPCOfExtPC2d_Point, None, Extrema_EPCOfExtPC2d)
Extrema_EPCOfExtPC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_EPCOfExtPC2d_SquareDistance, None, Extrema_EPCOfExtPC2d)
Extrema_EPCOfExtPC2d_swigregister = _Extrema.Extrema_EPCOfExtPC2d_swigregister
Extrema_EPCOfExtPC2d_swigregister(Extrema_EPCOfExtPC2d)

class Extrema_ExtCC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param TolC1: default value is 1.0e-10
        	:type TolC1: float
        	:param TolC2: default value is 1.0e-10
        	:type TolC2: float
        	:rtype: None
        * It calculates all the distances.
        	:param C1:
        	:type C1: Adaptor3d_Curve
        	:param C2:
        	:type C2: Adaptor3d_Curve
        	:param TolC1: default value is 1.0e-10
        	:type TolC1: float
        	:param TolC2: default value is 1.0e-10
        	:type TolC2: float
        	:rtype: None
        * It calculates all the distances.
        	:param C1:
        	:type C1: Adaptor3d_Curve
        	:param C2:
        	:type C2: Adaptor3d_Curve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param V1:
        	:type V1: float
        	:param V2:
        	:type V2: float
        	:param TolC1: default value is 1.0e-10
        	:type TolC1: float
        	:param TolC2: default value is 1.0e-10
        	:type TolC2: float
        	:rtype: None
        """
        _Extrema.Extrema_ExtCC_swiginit(self, _Extrema.new_Extrema_ExtCC(*args))

    def GetSingleSolutionFlag(self, *args) -> "Standard_Boolean":
        """
        * Get flag for single extrema computation. Works on parametric solver only.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtCC_GetSingleSolutionFlag(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtCC_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the two curves are parallel.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtCC_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtCC_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """:rtype: None"""
        return _Extrema.Extrema_ExtCC_Perform(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the points of the Nth extremum distance. P1 is on the first curve, P2 on the second one.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnCurv
        	:param P2:
        	:type P2: Extrema_POnCurv
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCC_Points(self, *args)


    def SetCurve(self, *args) -> "void":
        """
        :param theRank:
        	:type theRank: int
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: None
        :param theRank:
        	:type theRank: int
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCC_SetCurve(self, *args)


    def SetRange(self, *args) -> "void":
        """
        :param theRank:
        	:type theRank: int
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCC_SetRange(self, *args)


    def SetSingleSolutionFlag(self, *args) -> "void":
        """
        * Set flag for single extrema computation. Works on parametric solver only.
        	:param theSingleSolutionFlag:
        	:type theSingleSolutionFlag: bool
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCC_SetSingleSolutionFlag(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        :param theRank:
        	:type theRank: int
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCC_SetTolerance(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N: default value is 1
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtCC_SquareDistance(self, *args)


    def TrimmedSquareDistances(self, *args) -> "void":
        """
        * if the curve is a trimmed curve, dist11 is a square distance between the point on C1 of parameter FirstParameter and the point of parameter FirstParameter on C2.
        	:param dist11:
        	:type dist11: float
        	:param distP12:
        	:type distP12: float
        	:param distP21:
        	:type distP21: float
        	:param distP22:
        	:type distP22: float
        	:param P11:
        	:type P11: gp_Pnt
        	:param P12:
        	:type P12: gp_Pnt
        	:param P21:
        	:type P21: gp_Pnt
        	:param P22:
        	:type P22: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCC_TrimmedSquareDistances(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtCC
Extrema_ExtCC.GetSingleSolutionFlag = new_instancemethod(_Extrema.Extrema_ExtCC_GetSingleSolutionFlag, None, Extrema_ExtCC)
Extrema_ExtCC.IsDone = new_instancemethod(_Extrema.Extrema_ExtCC_IsDone, None, Extrema_ExtCC)
Extrema_ExtCC.IsParallel = new_instancemethod(_Extrema.Extrema_ExtCC_IsParallel, None, Extrema_ExtCC)
Extrema_ExtCC.NbExt = new_instancemethod(_Extrema.Extrema_ExtCC_NbExt, None, Extrema_ExtCC)
Extrema_ExtCC.Perform = new_instancemethod(_Extrema.Extrema_ExtCC_Perform, None, Extrema_ExtCC)
Extrema_ExtCC.Points = new_instancemethod(_Extrema.Extrema_ExtCC_Points, None, Extrema_ExtCC)
Extrema_ExtCC.SetCurve = new_instancemethod(_Extrema.Extrema_ExtCC_SetCurve, None, Extrema_ExtCC)
Extrema_ExtCC.SetRange = new_instancemethod(_Extrema.Extrema_ExtCC_SetRange, None, Extrema_ExtCC)
Extrema_ExtCC.SetSingleSolutionFlag = new_instancemethod(_Extrema.Extrema_ExtCC_SetSingleSolutionFlag, None, Extrema_ExtCC)
Extrema_ExtCC.SetTolerance = new_instancemethod(_Extrema.Extrema_ExtCC_SetTolerance, None, Extrema_ExtCC)
Extrema_ExtCC.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtCC_SquareDistance, None, Extrema_ExtCC)
Extrema_ExtCC.TrimmedSquareDistances = new_instancemethod(_Extrema.Extrema_ExtCC_TrimmedSquareDistances, None, Extrema_ExtCC)
Extrema_ExtCC_swigregister = _Extrema.Extrema_ExtCC_swigregister
Extrema_ExtCC_swigregister(Extrema_ExtCC)

class Extrema_ExtCC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param TolC1: default value is 1.0e-10
        	:type TolC1: float
        	:param TolC2: default value is 1.0e-10
        	:type TolC2: float
        	:rtype: None
        * It calculates all the distances.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param V1:
        	:type V1: float
        	:param V2:
        	:type V2: float
        	:param TolC1: default value is 1.0e-10
        	:type TolC1: float
        	:param TolC2: default value is 1.0e-10
        	:type TolC2: float
        	:rtype: None
        """
        _Extrema.Extrema_ExtCC2d_swiginit(self, _Extrema.new_Extrema_ExtCC2d(*args))

    def GetSingleSolutionFlag(self, *args) -> "Standard_Boolean":
        """
        * Get flag for single extrema computation. Works on parametric solver only.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtCC2d_GetSingleSolutionFlag(self, *args)


    def Initialize(self, *args) -> "void":
        """
        * initializes the fields.
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param V1:
        	:type V1: float
        	:param V2:
        	:type V2: float
        	:param TolC1: default value is 1.0e-10
        	:type TolC1: float
        	:param TolC2: default value is 1.0e-10
        	:type TolC2: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCC2d_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtCC2d_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the two curves are parallel.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtCC2d_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtCC2d_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCC2d_Perform(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the points of the Nth extremum distance. P1 is on the first curve, P2 on the second one.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnCurv2d
        	:param P2:
        	:type P2: Extrema_POnCurv2d
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCC2d_Points(self, *args)


    def SetSingleSolutionFlag(self, *args) -> "void":
        """
        * Set flag for single extrema computation. Works on parametric solver only.
        	:param theSingleSolutionFlag:
        	:type theSingleSolutionFlag: bool
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCC2d_SetSingleSolutionFlag(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N: default value is 1
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtCC2d_SquareDistance(self, *args)


    def TrimmedSquareDistances(self, *args) -> "void":
        """
        * if the curve is a trimmed curve, dist11 is a square distance between the point on C1 of parameter FirstParameter and the point of parameter FirstParameter on C2.
        	:param dist11:
        	:type dist11: float
        	:param distP12:
        	:type distP12: float
        	:param distP21:
        	:type distP21: float
        	:param distP22:
        	:type distP22: float
        	:param P11:
        	:type P11: gp_Pnt2d
        	:param P12:
        	:type P12: gp_Pnt2d
        	:param P21:
        	:type P21: gp_Pnt2d
        	:param P22:
        	:type P22: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCC2d_TrimmedSquareDistances(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtCC2d
Extrema_ExtCC2d.GetSingleSolutionFlag = new_instancemethod(_Extrema.Extrema_ExtCC2d_GetSingleSolutionFlag, None, Extrema_ExtCC2d)
Extrema_ExtCC2d.Initialize = new_instancemethod(_Extrema.Extrema_ExtCC2d_Initialize, None, Extrema_ExtCC2d)
Extrema_ExtCC2d.IsDone = new_instancemethod(_Extrema.Extrema_ExtCC2d_IsDone, None, Extrema_ExtCC2d)
Extrema_ExtCC2d.IsParallel = new_instancemethod(_Extrema.Extrema_ExtCC2d_IsParallel, None, Extrema_ExtCC2d)
Extrema_ExtCC2d.NbExt = new_instancemethod(_Extrema.Extrema_ExtCC2d_NbExt, None, Extrema_ExtCC2d)
Extrema_ExtCC2d.Perform = new_instancemethod(_Extrema.Extrema_ExtCC2d_Perform, None, Extrema_ExtCC2d)
Extrema_ExtCC2d.Points = new_instancemethod(_Extrema.Extrema_ExtCC2d_Points, None, Extrema_ExtCC2d)
Extrema_ExtCC2d.SetSingleSolutionFlag = new_instancemethod(_Extrema.Extrema_ExtCC2d_SetSingleSolutionFlag, None, Extrema_ExtCC2d)
Extrema_ExtCC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtCC2d_SquareDistance, None, Extrema_ExtCC2d)
Extrema_ExtCC2d.TrimmedSquareDistances = new_instancemethod(_Extrema.Extrema_ExtCC2d_TrimmedSquareDistances, None, Extrema_ExtCC2d)
Extrema_ExtCC2d_swigregister = _Extrema.Extrema_ExtCC2d_swigregister
Extrema_ExtCC2d_swigregister(Extrema_ExtCC2d)

class Extrema_ExtCS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances between C and S.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param TolC:
        	:type TolC: float
        	:param TolS:
        	:type TolS: float
        	:rtype: None
        * It calculates all the distances between C and S. UCinf and UCmax are the start and end parameters of the curve.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param UCinf:
        	:type UCinf: float
        	:param UCsup:
        	:type UCsup: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param Vinf:
        	:type Vinf: float
        	:param Vsup:
        	:type Vsup: float
        	:param TolC:
        	:type TolC: float
        	:param TolS:
        	:type TolS: float
        	:rtype: None
        """
        _Extrema.Extrema_ExtCS_swiginit(self, _Extrema.new_Extrema_ExtCS(*args))

    def Initialize(self, *args) -> "void":
        """
        * Initializes the fields of the algorithm.
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param Vinf:
        	:type Vinf: float
        	:param Vsup:
        	:type Vsup: float
        	:param TolC:
        	:type TolC: float
        	:param TolS:
        	:type TolS: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCS_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtCS_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the curve is on a parallel surface.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtCS_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtCS_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Computes the distances. An exception is raised if the fieds have not been initialized.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCS_Perform(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the point of the Nth resulting distance.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnCurv
        	:param P2:
        	:type P2: Extrema_POnSurf
        	:rtype: None
        """
        return _Extrema.Extrema_ExtCS_Points(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth resulting square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtCS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtCS
Extrema_ExtCS.Initialize = new_instancemethod(_Extrema.Extrema_ExtCS_Initialize, None, Extrema_ExtCS)
Extrema_ExtCS.IsDone = new_instancemethod(_Extrema.Extrema_ExtCS_IsDone, None, Extrema_ExtCS)
Extrema_ExtCS.IsParallel = new_instancemethod(_Extrema.Extrema_ExtCS_IsParallel, None, Extrema_ExtCS)
Extrema_ExtCS.NbExt = new_instancemethod(_Extrema.Extrema_ExtCS_NbExt, None, Extrema_ExtCS)
Extrema_ExtCS.Perform = new_instancemethod(_Extrema.Extrema_ExtCS_Perform, None, Extrema_ExtCS)
Extrema_ExtCS.Points = new_instancemethod(_Extrema.Extrema_ExtCS_Points, None, Extrema_ExtCS)
Extrema_ExtCS.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtCS_SquareDistance, None, Extrema_ExtCS)
Extrema_ExtCS_swigregister = _Extrema.Extrema_ExtCS_swigregister
Extrema_ExtCS_swigregister(Extrema_ExtCS)

class Extrema_ExtElC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the distance between two lines. AngTol is used to test if the lines are parallel: Angle(C1,C2) < AngTol.
        	:param C1:
        	:type C1: gp_Lin
        	:param C2:
        	:type C2: gp_Lin
        	:param AngTol:
        	:type AngTol: float
        	:rtype: None
        * Calculates the distance between a line and a circle.
        	:param C1:
        	:type C1: gp_Lin
        	:param C2:
        	:type C2: gp_Circ
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Calculates the distance between a line and an elipse.
        	:param C1:
        	:type C1: gp_Lin
        	:param C2:
        	:type C2: gp_Elips
        	:rtype: None
        * Calculates the distance between a line and a hyperbola.
        	:param C1:
        	:type C1: gp_Lin
        	:param C2:
        	:type C2: gp_Hypr
        	:rtype: None
        * Calculates the distance between a line and a parabola.
        	:param C1:
        	:type C1: gp_Lin
        	:param C2:
        	:type C2: gp_Parab
        	:rtype: None
        * Calculates the distance between two circles. The circles can be parallel or identical.
        	:param C1:
        	:type C1: gp_Circ
        	:param C2:
        	:type C2: gp_Circ
        	:rtype: None
        """
        _Extrema.Extrema_ExtElC_swiginit(self, _Extrema.new_Extrema_ExtElC(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtElC_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the two curves are parallel.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtElC_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtElC_NbExt(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the points of the Nth extremum distance. P1 is on the first curve, P2 on the second one.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnCurv
        	:param P2:
        	:type P2: Extrema_POnCurv
        	:rtype: None
        """
        return _Extrema.Extrema_ExtElC_Points(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N: default value is 1
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtElC_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtElC
Extrema_ExtElC.IsDone = new_instancemethod(_Extrema.Extrema_ExtElC_IsDone, None, Extrema_ExtElC)
Extrema_ExtElC.IsParallel = new_instancemethod(_Extrema.Extrema_ExtElC_IsParallel, None, Extrema_ExtElC)
Extrema_ExtElC.NbExt = new_instancemethod(_Extrema.Extrema_ExtElC_NbExt, None, Extrema_ExtElC)
Extrema_ExtElC.Points = new_instancemethod(_Extrema.Extrema_ExtElC_Points, None, Extrema_ExtElC)
Extrema_ExtElC.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtElC_SquareDistance, None, Extrema_ExtElC)
Extrema_ExtElC_swigregister = _Extrema.Extrema_ExtElC_swigregister
Extrema_ExtElC_swigregister(Extrema_ExtElC)

class Extrema_ExtElC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the distance between two lines. AngTol is used to test if the lines are parallel: Angle(C1,C2) < AngTol.
        	:param C1:
        	:type C1: gp_Lin2d
        	:param C2:
        	:type C2: gp_Lin2d
        	:param AngTol:
        	:type AngTol: float
        	:rtype: None
        * Calculates the distance between a line and a circle.
        	:param C1:
        	:type C1: gp_Lin2d
        	:param C2:
        	:type C2: gp_Circ2d
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Calculates the distance between a line and an elipse.
        	:param C1:
        	:type C1: gp_Lin2d
        	:param C2:
        	:type C2: gp_Elips2d
        	:rtype: None
        * Calculates the distance between a line and a hyperbola.
        	:param C1:
        	:type C1: gp_Lin2d
        	:param C2:
        	:type C2: gp_Hypr2d
        	:rtype: None
        * Calculates the distance between a line and a parabola.
        	:param C1:
        	:type C1: gp_Lin2d
        	:param C2:
        	:type C2: gp_Parab2d
        	:rtype: None
        * Calculates the distance between two circles. The circles can be parallel or identical.
        	:param C1:
        	:type C1: gp_Circ2d
        	:param C2:
        	:type C2: gp_Circ2d
        	:rtype: None
        * Calculates the distance between a circle and an elipse.
        	:param C1:
        	:type C1: gp_Circ2d
        	:param C2:
        	:type C2: gp_Elips2d
        	:rtype: None
        * Calculates the distance between a circle and a hyperbola.
        	:param C1:
        	:type C1: gp_Circ2d
        	:param C2:
        	:type C2: gp_Hypr2d
        	:rtype: None
        * Calculates the distance between a circle and a parabola.
        	:param C1:
        	:type C1: gp_Circ2d
        	:param C2:
        	:type C2: gp_Parab2d
        	:rtype: None
        """
        _Extrema.Extrema_ExtElC2d_swiginit(self, _Extrema.new_Extrema_ExtElC2d(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtElC2d_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the two curves are parallel.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtElC2d_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtElC2d_NbExt(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the points of the Nth extremum distance. P1 is on the first curve, P2 on the second one.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnCurv2d
        	:param P2:
        	:type P2: Extrema_POnCurv2d
        	:rtype: None
        """
        return _Extrema.Extrema_ExtElC2d_Points(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N: default value is 1
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtElC2d_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtElC2d
Extrema_ExtElC2d.IsDone = new_instancemethod(_Extrema.Extrema_ExtElC2d_IsDone, None, Extrema_ExtElC2d)
Extrema_ExtElC2d.IsParallel = new_instancemethod(_Extrema.Extrema_ExtElC2d_IsParallel, None, Extrema_ExtElC2d)
Extrema_ExtElC2d.NbExt = new_instancemethod(_Extrema.Extrema_ExtElC2d_NbExt, None, Extrema_ExtElC2d)
Extrema_ExtElC2d.Points = new_instancemethod(_Extrema.Extrema_ExtElC2d_Points, None, Extrema_ExtElC2d)
Extrema_ExtElC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtElC2d_SquareDistance, None, Extrema_ExtElC2d)
Extrema_ExtElC2d_swigregister = _Extrema.Extrema_ExtElC2d_swigregister
Extrema_ExtElC2d_swigregister(Extrema_ExtElC2d)

class Extrema_ExtElCS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the distances between a line and a plane. The line can be on the plane or on a parallel plane.
        	:param C:
        	:type C: gp_Lin
        	:param S:
        	:type S: gp_Pln
        	:rtype: None
        * Calculates the distances between a line and a cylinder.
        	:param C:
        	:type C: gp_Lin
        	:param S:
        	:type S: gp_Cylinder
        	:rtype: None
        * Calculates the distances between a line and a cone.
        	:param C:
        	:type C: gp_Lin
        	:param S:
        	:type S: gp_Cone
        	:rtype: None
        * Calculates the distances between a line and a sphere.
        	:param C:
        	:type C: gp_Lin
        	:param S:
        	:type S: gp_Sphere
        	:rtype: None
        * Calculates the distances between a line and a torus.
        	:param C:
        	:type C: gp_Lin
        	:param S:
        	:type S: gp_Torus
        	:rtype: None
        * Calculates the distances between a circle and a plane.
        	:param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: gp_Pln
        	:rtype: None
        * Calculates the distances between a circle and a cylinder.
        	:param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: gp_Cylinder
        	:rtype: None
        * Calculates the distances between a circle and a cone.
        	:param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: gp_Cone
        	:rtype: None
        * Calculates the distances between a circle and a sphere.
        	:param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: gp_Sphere
        	:rtype: None
        * Calculates the distances between a circle and a torus.
        	:param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: gp_Torus
        	:rtype: None
        * Calculates the distances between a hyperbola and a plane.
        	:param C:
        	:type C: gp_Hypr
        	:param S:
        	:type S: gp_Pln
        	:rtype: None
        """
        _Extrema.Extrema_ExtElCS_swiginit(self, _Extrema.new_Extrema_ExtElCS(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtElCS_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the curve is on a parallel surface.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtElCS_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtElCS_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param C:
        	:type C: gp_Lin
        	:param S:
        	:type S: gp_Pln
        	:rtype: None
        :param C:
        	:type C: gp_Lin
        	:param S:
        	:type S: gp_Cylinder
        	:rtype: None
        :param C:
        	:type C: gp_Lin
        	:param S:
        	:type S: gp_Cone
        	:rtype: None
        :param C:
        	:type C: gp_Lin
        	:param S:
        	:type S: gp_Sphere
        	:rtype: None
        :param C:
        	:type C: gp_Lin
        	:param S:
        	:type S: gp_Torus
        	:rtype: None
        :param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: gp_Pln
        	:rtype: None
        :param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: gp_Cylinder
        	:rtype: None
        :param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: gp_Cone
        	:rtype: None
        :param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: gp_Sphere
        	:rtype: None
        :param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: gp_Torus
        	:rtype: None
        :param C:
        	:type C: gp_Hypr
        	:param S:
        	:type S: gp_Pln
        	:rtype: None
        """
        return _Extrema.Extrema_ExtElCS_Perform(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the points of the Nth extremum distance. P1 is on the curve, P2 on the surface.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnCurv
        	:param P2:
        	:type P2: Extrema_POnSurf
        	:rtype: None
        """
        return _Extrema.Extrema_ExtElCS_Points(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N: default value is 1
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtElCS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtElCS
Extrema_ExtElCS.IsDone = new_instancemethod(_Extrema.Extrema_ExtElCS_IsDone, None, Extrema_ExtElCS)
Extrema_ExtElCS.IsParallel = new_instancemethod(_Extrema.Extrema_ExtElCS_IsParallel, None, Extrema_ExtElCS)
Extrema_ExtElCS.NbExt = new_instancemethod(_Extrema.Extrema_ExtElCS_NbExt, None, Extrema_ExtElCS)
Extrema_ExtElCS.Perform = new_instancemethod(_Extrema.Extrema_ExtElCS_Perform, None, Extrema_ExtElCS)
Extrema_ExtElCS.Points = new_instancemethod(_Extrema.Extrema_ExtElCS_Points, None, Extrema_ExtElCS)
Extrema_ExtElCS.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtElCS_SquareDistance, None, Extrema_ExtElCS)
Extrema_ExtElCS_swigregister = _Extrema.Extrema_ExtElCS_swigregister
Extrema_ExtElCS_swigregister(Extrema_ExtElCS)

class Extrema_ExtElSS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the distances between 2 planes. These planes can be parallel.
        	:param S1:
        	:type S1: gp_Pln
        	:param S2:
        	:type S2: gp_Pln
        	:rtype: None
        * Calculates the distances between a plane and a sphere.
        	:param S1:
        	:type S1: gp_Pln
        	:param S2:
        	:type S2: gp_Sphere
        	:rtype: None
        * Calculates the distances between 2 spheres. These spheres can be parallel.
        	:param S1:
        	:type S1: gp_Sphere
        	:param S2:
        	:type S2: gp_Sphere
        	:rtype: None
        * Calculates the distances between a sphere and a cylinder.
        	:param S1:
        	:type S1: gp_Sphere
        	:param S2:
        	:type S2: gp_Cylinder
        	:rtype: None
        * Calculates the distances between a sphere and a cone.
        	:param S1:
        	:type S1: gp_Sphere
        	:param S2:
        	:type S2: gp_Cone
        	:rtype: None
        * Calculates the distances between a sphere and a torus.
        	:param S1:
        	:type S1: gp_Sphere
        	:param S2:
        	:type S2: gp_Torus
        	:rtype: None
        """
        _Extrema.Extrema_ExtElSS_swiginit(self, _Extrema.new_Extrema_ExtElSS(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtElSS_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the two surfaces are parallel.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtElSS_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtElSS_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param S1:
        	:type S1: gp_Pln
        	:param S2:
        	:type S2: gp_Pln
        	:rtype: None
        :param S1:
        	:type S1: gp_Pln
        	:param S2:
        	:type S2: gp_Sphere
        	:rtype: None
        :param S1:
        	:type S1: gp_Sphere
        	:param S2:
        	:type S2: gp_Sphere
        	:rtype: None
        :param S1:
        	:type S1: gp_Sphere
        	:param S2:
        	:type S2: gp_Cylinder
        	:rtype: None
        :param S1:
        	:type S1: gp_Sphere
        	:param S2:
        	:type S2: gp_Cone
        	:rtype: None
        :param S1:
        	:type S1: gp_Sphere
        	:param S2:
        	:type S2: gp_Torus
        	:rtype: None
        """
        return _Extrema.Extrema_ExtElSS_Perform(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the points for the Nth resulting distance. P1 is on the first surface, P2 on the second one.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnSurf
        	:param P2:
        	:type P2: Extrema_POnSurf
        	:rtype: None
        """
        return _Extrema.Extrema_ExtElSS_Points(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N: default value is 1
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtElSS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtElSS
Extrema_ExtElSS.IsDone = new_instancemethod(_Extrema.Extrema_ExtElSS_IsDone, None, Extrema_ExtElSS)
Extrema_ExtElSS.IsParallel = new_instancemethod(_Extrema.Extrema_ExtElSS_IsParallel, None, Extrema_ExtElSS)
Extrema_ExtElSS.NbExt = new_instancemethod(_Extrema.Extrema_ExtElSS_NbExt, None, Extrema_ExtElSS)
Extrema_ExtElSS.Perform = new_instancemethod(_Extrema.Extrema_ExtElSS_Perform, None, Extrema_ExtElSS)
Extrema_ExtElSS.Points = new_instancemethod(_Extrema.Extrema_ExtElSS_Points, None, Extrema_ExtElSS)
Extrema_ExtElSS.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtElSS_SquareDistance, None, Extrema_ExtElSS)
Extrema_ExtElSS_swigregister = _Extrema.Extrema_ExtElSS_swigregister
Extrema_ExtElSS_swigregister(Extrema_ExtElSS)

class Extrema_ExtPC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. Zeros are searched between uinf and usup. Tol is used to decide to stop the iterations according to the following condition: if n is the number of iterations, the algorithm stops when abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. Tol is used to decide to stop the iterations according to the following condition: if n is the number of iterations, the algorithm stops when abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        """
        _Extrema.Extrema_ExtPC_swiginit(self, _Extrema.new_Extrema_ExtPC(*args))

    def Initialize(self, *args) -> "void":
        """
        * initializes the fields of the algorithm.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPC_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPC_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the <N>th extremum distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPC_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtPC_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPC_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the point of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_ExtPC_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the <N>th extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtPC_SquareDistance(self, *args)


    def TrimmedSquareDistances(self, *args) -> "void":
        """
        * if the curve is a trimmed curve, dist1 is a square distance between <P> and the point of parameter FirstParameter <P1> and dist2 is a square distance between <P> and the point of parameter LastParameter <P2>.
        	:param dist1:
        	:type dist1: float
        	:param dist2:
        	:type dist2: float
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPC_TrimmedSquareDistances(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtPC
Extrema_ExtPC.Initialize = new_instancemethod(_Extrema.Extrema_ExtPC_Initialize, None, Extrema_ExtPC)
Extrema_ExtPC.IsDone = new_instancemethod(_Extrema.Extrema_ExtPC_IsDone, None, Extrema_ExtPC)
Extrema_ExtPC.IsMin = new_instancemethod(_Extrema.Extrema_ExtPC_IsMin, None, Extrema_ExtPC)
Extrema_ExtPC.NbExt = new_instancemethod(_Extrema.Extrema_ExtPC_NbExt, None, Extrema_ExtPC)
Extrema_ExtPC.Perform = new_instancemethod(_Extrema.Extrema_ExtPC_Perform, None, Extrema_ExtPC)
Extrema_ExtPC.Point = new_instancemethod(_Extrema.Extrema_ExtPC_Point, None, Extrema_ExtPC)
Extrema_ExtPC.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtPC_SquareDistance, None, Extrema_ExtPC)
Extrema_ExtPC.TrimmedSquareDistances = new_instancemethod(_Extrema.Extrema_ExtPC_TrimmedSquareDistances, None, Extrema_ExtPC)
Extrema_ExtPC_swigregister = _Extrema.Extrema_ExtPC_swigregister
Extrema_ExtPC_swigregister(Extrema_ExtPC)

class Extrema_ExtPC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. Zeros are searched between uinf and usup. Tol is used to decide to stop the iterations according to the following condition: if n is the number of iterations, the algorithm stops when abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        * It calculates all the distances. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs all the zeros inside the definition range of the curve. Tol is used to decide to stop the iterations according to the following condition: if n is the number of iterations, the algorithm stops when abs(F(Un)-F(Un-1)) < Tol.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        """
        _Extrema.Extrema_ExtPC2d_swiginit(self, _Extrema.new_Extrema_ExtPC2d(*args))

    def Initialize(self, *args) -> "void":
        """
        * initializes the fields of the algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param TolF: default value is 1.0e-10
        	:type TolF: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPC2d_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPC2d_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the <N>th extremum distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPC2d_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtPC2d_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPC2d_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the point of the <N>th extremum distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv2d
        """
        return _Extrema.Extrema_ExtPC2d_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the <N>th extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtPC2d_SquareDistance(self, *args)


    def TrimmedSquareDistances(self, *args) -> "void":
        """
        * if the curve is a trimmed curve, dist1 is a square distance between <P> and the point of parameter FirstParameter <P1> and dist2 is a square distance between <P> and the point of parameter LastParameter <P2>.
        	:param dist1:
        	:type dist1: float
        	:param dist2:
        	:type dist2: float
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPC2d_TrimmedSquareDistances(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtPC2d
Extrema_ExtPC2d.Initialize = new_instancemethod(_Extrema.Extrema_ExtPC2d_Initialize, None, Extrema_ExtPC2d)
Extrema_ExtPC2d.IsDone = new_instancemethod(_Extrema.Extrema_ExtPC2d_IsDone, None, Extrema_ExtPC2d)
Extrema_ExtPC2d.IsMin = new_instancemethod(_Extrema.Extrema_ExtPC2d_IsMin, None, Extrema_ExtPC2d)
Extrema_ExtPC2d.NbExt = new_instancemethod(_Extrema.Extrema_ExtPC2d_NbExt, None, Extrema_ExtPC2d)
Extrema_ExtPC2d.Perform = new_instancemethod(_Extrema.Extrema_ExtPC2d_Perform, None, Extrema_ExtPC2d)
Extrema_ExtPC2d.Point = new_instancemethod(_Extrema.Extrema_ExtPC2d_Point, None, Extrema_ExtPC2d)
Extrema_ExtPC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtPC2d_SquareDistance, None, Extrema_ExtPC2d)
Extrema_ExtPC2d.TrimmedSquareDistances = new_instancemethod(_Extrema.Extrema_ExtPC2d_TrimmedSquareDistances, None, Extrema_ExtPC2d)
Extrema_ExtPC2d_swigregister = _Extrema.Extrema_ExtPC2d_swigregister
Extrema_ExtPC2d_swigregister(Extrema_ExtPC2d)

class Extrema_ExtPElC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the extremum distance between the point P and the segment [Uinf,Usup] of the line C.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: gp_Lin
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        * Calculates the 2 extremum distances between the point P and the segment [Uinf,Usup] of the circle C. Tol is used to determine if P is on the axis of the circle or if an extremum is on an endpoint of the segment. If P is on the axis of the circle, there are infinite solution then IsDone(me)=False. The conditions on the Uinf and Usup are: 0. <= Uinf <= 2.*PI and Usup > Uinf. If Usup > Uinf + 2.*PI, then only the solutions in the range [Uinf,Uinf+2.*PI[ are computed.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: gp_Circ
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        * Calculates the 4 extremum distances between the point P and the segment [Uinf,Usup] of the elipse C. Tol is used to determine if the point is on the axis of the elipse and if the major radius is equal to the minor radius or if an extremum is on an endpoint of the segment. If P is on the axis of the elipse, there are infinite solution then IsDone(me)=False. The conditions on the Uinf and Usup are: 0. <= Uinf <= 2.*PI and Usup > Uinf. If Usup > Uinf + 2.*PI, then only the solutions in the range [Uinf,Uinf+2.*PI[ are computed.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: gp_Elips
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        * Calculates the extremum distances between the point P and the segment [Uinf,Usup] of the hyperbola C. Tol is used to determine if two solutions u and v are identical; the condition is: dist(C(u),C(v)) < Tol.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: gp_Hypr
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        * Calculates the 4 extremum distances between the point P and the segment [Uinf,Usup] of the parabola C. Tol is used to determine if two solutions u and v are identical; the condition is: dist(C(u),C(v)) < Tol.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: gp_Parab
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        """
        _Extrema.Extrema_ExtPElC_swiginit(self, _Extrema.new_Extrema_ExtPElC(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPElC_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Nth extremum distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPElC_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtPElC_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: gp_Lin
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: gp_Circ
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: gp_Elips
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: gp_Hypr
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: gp_Parab
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPElC_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the point of the Nth extremum distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_ExtPElC_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtPElC_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtPElC
Extrema_ExtPElC.IsDone = new_instancemethod(_Extrema.Extrema_ExtPElC_IsDone, None, Extrema_ExtPElC)
Extrema_ExtPElC.IsMin = new_instancemethod(_Extrema.Extrema_ExtPElC_IsMin, None, Extrema_ExtPElC)
Extrema_ExtPElC.NbExt = new_instancemethod(_Extrema.Extrema_ExtPElC_NbExt, None, Extrema_ExtPElC)
Extrema_ExtPElC.Perform = new_instancemethod(_Extrema.Extrema_ExtPElC_Perform, None, Extrema_ExtPElC)
Extrema_ExtPElC.Point = new_instancemethod(_Extrema.Extrema_ExtPElC_Point, None, Extrema_ExtPElC)
Extrema_ExtPElC.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtPElC_SquareDistance, None, Extrema_ExtPElC)
Extrema_ExtPElC_swigregister = _Extrema.Extrema_ExtPElC_swigregister
Extrema_ExtPElC_swigregister(Extrema_ExtPElC)

class Extrema_ExtPElC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the extremum distance between the point P and the segment [Uinf,Usup] of the line L.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: gp_Lin2d
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        * Calculates the 2 extremum distances between the point P and the segment [Uinf,Usup] of the circle C. Tol is used to determine if P is on the axis of the circle or if an extremum is on an endpoint of the segment. If P is on the axis of the circle, there are infinite solution then IsDone(me)=False. The conditions on the Uinf and Usup are: 0. <= Uinf <= 2.*PI and Usup > Uinf. If Usup > Uinf + 2.*PI, then only the solutions in the range [Uinf,Uinf+2.*PI[ are computed.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: gp_Circ2d
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        * Calculates the 4 extremum distances between the point P and the segment [Uinf,Usup] of the elipse C. Tol is used to determine if the point is on the axis of the elipse and if the major radius is equal to the minor radius or if an extremum is on an endpoint of the segment. If P is on the axis of the elipse, there are infinite solution then IsDone(me)=False. The conditions on the Uinf and Usup are: 0. <= Uinf <= 2.*PI and Usup > Uinf. If Usup > Uinf + 2.*PI, then only the solutions in the range [Uinf,Uinf+2.*PI[ are computed.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: gp_Elips2d
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        * Calculates the extremum distances between the point P and the segment [Uinf,Usup] of the hyperbola C. Tol is used to determine if two solutions u and v are identical; the condition is: dist(C(u),C(v)) < Tol.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: gp_Hypr2d
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        * Calculates the 4 extremum distances between the point P and the segment [Uinf,Usup] of the parabola C. Tol is used to determine if two solutions u and v are identical; the condition is: dist(C(u),C(v)) < Tol.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: gp_Parab2d
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        """
        _Extrema.Extrema_ExtPElC2d_swiginit(self, _Extrema.new_Extrema_ExtPElC2d(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPElC2d_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Nth extremum distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPElC2d_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtPElC2d_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt2d
        	:param L:
        	:type L: gp_Lin2d
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: gp_Circ2d
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: gp_Elips2d
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: gp_Hypr2d
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: gp_Parab2d
        	:param Tol:
        	:type Tol: float
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPElC2d_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the point of the Nth extremum distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv2d
        """
        return _Extrema.Extrema_ExtPElC2d_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth extremum square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtPElC2d_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtPElC2d
Extrema_ExtPElC2d.IsDone = new_instancemethod(_Extrema.Extrema_ExtPElC2d_IsDone, None, Extrema_ExtPElC2d)
Extrema_ExtPElC2d.IsMin = new_instancemethod(_Extrema.Extrema_ExtPElC2d_IsMin, None, Extrema_ExtPElC2d)
Extrema_ExtPElC2d.NbExt = new_instancemethod(_Extrema.Extrema_ExtPElC2d_NbExt, None, Extrema_ExtPElC2d)
Extrema_ExtPElC2d.Perform = new_instancemethod(_Extrema.Extrema_ExtPElC2d_Perform, None, Extrema_ExtPElC2d)
Extrema_ExtPElC2d.Point = new_instancemethod(_Extrema.Extrema_ExtPElC2d_Point, None, Extrema_ExtPElC2d)
Extrema_ExtPElC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtPElC2d_SquareDistance, None, Extrema_ExtPElC2d)
Extrema_ExtPElC2d_swigregister = _Extrema.Extrema_ExtPElC2d_swigregister
Extrema_ExtPElC2d_swigregister(Extrema_ExtPElC2d)

class Extrema_ExtPElS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances between a point and a cylinder from gp. Tol is used to test if the point is on the axis.
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: gp_Cylinder
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * It calculates all the distances between a point and a plane from gp. Tol is used to test if the point is on the plane.
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: gp_Pln
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * It calculates all the distances between a point and a cone from gp. Tol is used to test if the point is at the apex or on the axis.
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: gp_Cone
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * It calculates all the distances between a point and a torus from gp. Tol is used to test if the point is on the axis.
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: gp_Torus
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * It calculates all the distances between a point and a sphere from gp. Tol is used to test if the point is at the center.
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: gp_Sphere
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Extrema.Extrema_ExtPElS_swiginit(self, _Extrema.new_Extrema_ExtPElS(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPElS_IsDone(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtPElS_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: gp_Cylinder
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: gp_Pln
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: gp_Cone
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: gp_Torus
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: gp_Sphere
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPElS_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the Nth resulting distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_ExtPElS_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth resulting square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtPElS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtPElS
Extrema_ExtPElS.IsDone = new_instancemethod(_Extrema.Extrema_ExtPElS_IsDone, None, Extrema_ExtPElS)
Extrema_ExtPElS.NbExt = new_instancemethod(_Extrema.Extrema_ExtPElS_NbExt, None, Extrema_ExtPElS)
Extrema_ExtPElS.Perform = new_instancemethod(_Extrema.Extrema_ExtPElS_Perform, None, Extrema_ExtPElS)
Extrema_ExtPElS.Point = new_instancemethod(_Extrema.Extrema_ExtPElS_Point, None, Extrema_ExtPElS)
Extrema_ExtPElS.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtPElS_SquareDistance, None, Extrema_ExtPElS)
Extrema_ExtPElS_swigregister = _Extrema.Extrema_ExtPElS_swigregister
Extrema_ExtPElS_swigregister(Extrema_ExtPElS)

class Extrema_ExtPExtS(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances between a point from gp and a Surface.
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: GeomAdaptor_HSurfaceOfLinearExtrusion
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        * It calculates all the distances between a point from gp and a Surface.
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: GeomAdaptor_HSurfaceOfLinearExtrusion
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        """
        _Extrema.Extrema_ExtPExtS_swiginit(self, _Extrema.new_Extrema_ExtPExtS(*args))

    def Initialize(self, *args) -> "void":
        """
        * Initializes the fields of the algorithm.
        	:param S:
        	:type S: GeomAdaptor_HSurfaceOfLinearExtrusion
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param Vinf:
        	:type Vinf: float
        	:param Vsup:
        	:type Vsup: float
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPExtS_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPExtS_IsDone(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtPExtS_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPExtS_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the Nth resulting distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_ExtPExtS_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth resulting square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtPExtS_SquareDistance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Extrema_ExtPExtS_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtPExtS
Extrema_ExtPExtS.Initialize = new_instancemethod(_Extrema.Extrema_ExtPExtS_Initialize, None, Extrema_ExtPExtS)
Extrema_ExtPExtS.IsDone = new_instancemethod(_Extrema.Extrema_ExtPExtS_IsDone, None, Extrema_ExtPExtS)
Extrema_ExtPExtS.NbExt = new_instancemethod(_Extrema.Extrema_ExtPExtS_NbExt, None, Extrema_ExtPExtS)
Extrema_ExtPExtS.Perform = new_instancemethod(_Extrema.Extrema_ExtPExtS_Perform, None, Extrema_ExtPExtS)
Extrema_ExtPExtS.Point = new_instancemethod(_Extrema.Extrema_ExtPExtS_Point, None, Extrema_ExtPExtS)
Extrema_ExtPExtS.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtPExtS_SquareDistance, None, Extrema_ExtPExtS)
Extrema_ExtPExtS_swigregister = _Extrema.Extrema_ExtPExtS_swigregister
Extrema_ExtPExtS_swigregister(Extrema_ExtPExtS)

class Extrema_ExtPRevS(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances between a point from gp and a SurfacePtr from Adaptor3d.
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: GeomAdaptor_HSurfaceOfRevolution
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        * It calculates all the distances between a point from gp and a SurfacePtr from Adaptor3d.
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: GeomAdaptor_HSurfaceOfRevolution
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        """
        _Extrema.Extrema_ExtPRevS_swiginit(self, _Extrema.new_Extrema_ExtPRevS(*args))

    def Initialize(self, *args) -> "void":
        """
        :param S:
        	:type S: GeomAdaptor_HSurfaceOfRevolution
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPRevS_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPRevS_IsDone(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtPRevS_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPRevS_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the Nth resulting distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_ExtPRevS_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth resulting square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtPRevS_SquareDistance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Extrema_ExtPRevS_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtPRevS
Extrema_ExtPRevS.Initialize = new_instancemethod(_Extrema.Extrema_ExtPRevS_Initialize, None, Extrema_ExtPRevS)
Extrema_ExtPRevS.IsDone = new_instancemethod(_Extrema.Extrema_ExtPRevS_IsDone, None, Extrema_ExtPRevS)
Extrema_ExtPRevS.NbExt = new_instancemethod(_Extrema.Extrema_ExtPRevS_NbExt, None, Extrema_ExtPRevS)
Extrema_ExtPRevS.Perform = new_instancemethod(_Extrema.Extrema_ExtPRevS_Perform, None, Extrema_ExtPRevS)
Extrema_ExtPRevS.Point = new_instancemethod(_Extrema.Extrema_ExtPRevS_Point, None, Extrema_ExtPRevS)
Extrema_ExtPRevS.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtPRevS_SquareDistance, None, Extrema_ExtPRevS)
Extrema_ExtPRevS_swigregister = _Extrema.Extrema_ExtPRevS_swigregister
Extrema_ExtPRevS_swigregister(Extrema_ExtPRevS)

class Extrema_ExtPS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. NbU and NbV are used to locate the close points to find the zeros. They must be great enough such that if there is N extrema, there will be N extrema between P and the grid. TolU et TolV are used to determine the conditions to stop the iterations; at the iteration number n: (Un - Un-1) < TolU and (Vn - Vn-1) < TolV .
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        * It calculates all the distances. NbU and NbV are used to locate the close points to find the zeros. They must be great enough such that if there is N extrema, there will be N extrema between P and the grid. TolU et TolV are used to determine the conditions to stop the iterations; at the iteration number n: (Un - Un-1) < TolU and (Vn - Vn-1) < TolV .
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param Vinf:
        	:type Vinf: float
        	:param Vsup:
        	:type Vsup: float
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        """
        _Extrema.Extrema_ExtPS_swiginit(self, _Extrema.new_Extrema_ExtPS(*args))

    def Initialize(self, *args) -> "void":
        """
        * Initializes the fields of the algorithm.
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param Uinf:
        	:type Uinf: float
        	:param Usup:
        	:type Usup: float
        	:param Vinf:
        	:type Vinf: float
        	:param Vsup:
        	:type Vsup: float
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPS_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtPS_IsDone(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtPS_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Computes the distances. An exception is raised if the fieds have not been initialized.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPS_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the Nth resulting distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_ExtPS_Point(self, *args)


    def SetAlgo(self, *args) -> "void":
        """
        :param A:
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPS_SetAlgo(self, *args)


    def SetFlag(self, *args) -> "void":
        """
        :param F:
        	:type F: Extrema_ExtFlag
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPS_SetFlag(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth resulting square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtPS_SquareDistance(self, *args)


    def TrimmedSquareDistances(self, *args) -> "void":
        """
        * if the surface is a trimmed surface, dUfVf is a square distance between <P> and the point of parameter FirstUParameter and FirstVParameter <PUfVf>. dUfVl is a square distance between <P> and the point of parameter FirstUParameter and LastVParameter <PUfVl>. dUlVf is a square distance between <P> and the point of parameter LastUParameter and FirstVParameter <PUlVf>. dUlVl is a square distance between <P> and the point of parameter LastUParameter and LastVParameter <PUlVl>.
        	:param dUfVf:
        	:type dUfVf: float
        	:param dUfVl:
        	:type dUfVl: float
        	:param dUlVf:
        	:type dUlVf: float
        	:param dUlVl:
        	:type dUlVl: float
        	:param PUfVf:
        	:type PUfVf: gp_Pnt
        	:param PUfVl:
        	:type PUfVl: gp_Pnt
        	:param PUlVf:
        	:type PUlVf: gp_Pnt
        	:param PUlVl:
        	:type PUlVl: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_ExtPS_TrimmedSquareDistances(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtPS
Extrema_ExtPS.Initialize = new_instancemethod(_Extrema.Extrema_ExtPS_Initialize, None, Extrema_ExtPS)
Extrema_ExtPS.IsDone = new_instancemethod(_Extrema.Extrema_ExtPS_IsDone, None, Extrema_ExtPS)
Extrema_ExtPS.NbExt = new_instancemethod(_Extrema.Extrema_ExtPS_NbExt, None, Extrema_ExtPS)
Extrema_ExtPS.Perform = new_instancemethod(_Extrema.Extrema_ExtPS_Perform, None, Extrema_ExtPS)
Extrema_ExtPS.Point = new_instancemethod(_Extrema.Extrema_ExtPS_Point, None, Extrema_ExtPS)
Extrema_ExtPS.SetAlgo = new_instancemethod(_Extrema.Extrema_ExtPS_SetAlgo, None, Extrema_ExtPS)
Extrema_ExtPS.SetFlag = new_instancemethod(_Extrema.Extrema_ExtPS_SetFlag, None, Extrema_ExtPS)
Extrema_ExtPS.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtPS_SquareDistance, None, Extrema_ExtPS)
Extrema_ExtPS.TrimmedSquareDistances = new_instancemethod(_Extrema.Extrema_ExtPS_TrimmedSquareDistances, None, Extrema_ExtPS)
Extrema_ExtPS_swigregister = _Extrema.Extrema_ExtPS_swigregister
Extrema_ExtPS_swigregister(Extrema_ExtPS)

class Extrema_ExtSS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances between S1 and S2.
        	:param S1:
        	:type S1: Adaptor3d_Surface
        	:param S2:
        	:type S2: Adaptor3d_Surface
        	:param TolS1:
        	:type TolS1: float
        	:param TolS2:
        	:type TolS2: float
        	:rtype: None
        * It calculates all the distances between S1 and S2.
        	:param S1:
        	:type S1: Adaptor3d_Surface
        	:param S2:
        	:type S2: Adaptor3d_Surface
        	:param Uinf1:
        	:type Uinf1: float
        	:param Usup1:
        	:type Usup1: float
        	:param Vinf1:
        	:type Vinf1: float
        	:param Vsup1:
        	:type Vsup1: float
        	:param Uinf2:
        	:type Uinf2: float
        	:param Usup2:
        	:type Usup2: float
        	:param Vinf2:
        	:type Vinf2: float
        	:param Vsup2:
        	:type Vsup2: float
        	:param TolS1:
        	:type TolS1: float
        	:param TolS2:
        	:type TolS2: float
        	:rtype: None
        """
        _Extrema.Extrema_ExtSS_swiginit(self, _Extrema.new_Extrema_ExtSS(*args))

    def Initialize(self, *args) -> "void":
        """
        * Initializes the fields of the algorithm.
        	:param S2:
        	:type S2: Adaptor3d_Surface
        	:param Uinf2:
        	:type Uinf2: float
        	:param Usup2:
        	:type Usup2: float
        	:param Vinf2:
        	:type Vinf2: float
        	:param Vsup2:
        	:type Vsup2: float
        	:param TolS1:
        	:type TolS1: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtSS_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtSS_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the curve is on a parallel surface.
        	:rtype: bool
        """
        return _Extrema.Extrema_ExtSS_IsParallel(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_ExtSS_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Computes the distances. An exception is raised if the fieds have not been initialized.
        	:param S1:
        	:type S1: Adaptor3d_Surface
        	:param Uinf1:
        	:type Uinf1: float
        	:param Usup1:
        	:type Usup1: float
        	:param Vinf1:
        	:type Vinf1: float
        	:param Vsup1:
        	:type Vsup1: float
        	:param TolS1:
        	:type TolS1: float
        	:rtype: None
        """
        return _Extrema.Extrema_ExtSS_Perform(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the point of the Nth resulting distance.
        	:param N:
        	:type N: int
        	:param P1:
        	:type P1: Extrema_POnSurf
        	:param P2:
        	:type P2: Extrema_POnSurf
        	:rtype: None
        """
        return _Extrema.Extrema_ExtSS_Points(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth resulting square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_ExtSS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_ExtSS
Extrema_ExtSS.Initialize = new_instancemethod(_Extrema.Extrema_ExtSS_Initialize, None, Extrema_ExtSS)
Extrema_ExtSS.IsDone = new_instancemethod(_Extrema.Extrema_ExtSS_IsDone, None, Extrema_ExtSS)
Extrema_ExtSS.IsParallel = new_instancemethod(_Extrema.Extrema_ExtSS_IsParallel, None, Extrema_ExtSS)
Extrema_ExtSS.NbExt = new_instancemethod(_Extrema.Extrema_ExtSS_NbExt, None, Extrema_ExtSS)
Extrema_ExtSS.Perform = new_instancemethod(_Extrema.Extrema_ExtSS_Perform, None, Extrema_ExtSS)
Extrema_ExtSS.Points = new_instancemethod(_Extrema.Extrema_ExtSS_Points, None, Extrema_ExtSS)
Extrema_ExtSS.SquareDistance = new_instancemethod(_Extrema.Extrema_ExtSS_SquareDistance, None, Extrema_ExtSS)
Extrema_ExtSS_swigregister = _Extrema.Extrema_ExtSS_swigregister
Extrema_ExtSS_swigregister(Extrema_ExtSS)

class Extrema_FuncExtCS(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param C:
        	:type C: Adaptor3d_Curve
        	:param S:
        	:type S: Adaptor3d_Surface
        	:rtype: None
        """
        _Extrema.Extrema_FuncExtCS_swiginit(self, _Extrema.new_Extrema_FuncExtCS(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the field mysurf of the function.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param S:
        	:type S: Adaptor3d_Surface
        	:rtype: None
        """
        return _Extrema.Extrema_FuncExtCS_Initialize(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the number of found extrema.
        	:rtype: int
        """
        return _Extrema.Extrema_FuncExtCS_NbExt(self, *args)


    def PointOnCurve(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the Nth extremum on C.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_FuncExtCS_PointOnCurve(self, *args)


    def PointOnSurface(self, *args) -> "Extrema_POnSurf const &":
        """
        * Return the Nth extremum on S.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_FuncExtCS_PointOnSurface(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Return the value of the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_FuncExtCS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_FuncExtCS
Extrema_FuncExtCS.Initialize = new_instancemethod(_Extrema.Extrema_FuncExtCS_Initialize, None, Extrema_FuncExtCS)
Extrema_FuncExtCS.NbExt = new_instancemethod(_Extrema.Extrema_FuncExtCS_NbExt, None, Extrema_FuncExtCS)
Extrema_FuncExtCS.PointOnCurve = new_instancemethod(_Extrema.Extrema_FuncExtCS_PointOnCurve, None, Extrema_FuncExtCS)
Extrema_FuncExtCS.PointOnSurface = new_instancemethod(_Extrema.Extrema_FuncExtCS_PointOnSurface, None, Extrema_FuncExtCS)
Extrema_FuncExtCS.SquareDistance = new_instancemethod(_Extrema.Extrema_FuncExtCS_SquareDistance, None, Extrema_FuncExtCS)
Extrema_FuncExtCS_swigregister = _Extrema.Extrema_FuncExtCS_swigregister
Extrema_FuncExtCS_swigregister(Extrema_FuncExtCS)

class Extrema_FuncExtSS(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param S1:
        	:type S1: Adaptor3d_Surface
        	:param S2:
        	:type S2: Adaptor3d_Surface
        	:rtype: None
        """
        _Extrema.Extrema_FuncExtSS_swiginit(self, _Extrema.new_Extrema_FuncExtSS(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the field mysurf of the function.
        	:param S1:
        	:type S1: Adaptor3d_Surface
        	:param S2:
        	:type S2: Adaptor3d_Surface
        	:rtype: None
        """
        return _Extrema.Extrema_FuncExtSS_Initialize(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the number of found extrema.
        	:rtype: int
        """
        return _Extrema.Extrema_FuncExtSS_NbExt(self, *args)


    def PointOnS1(self, *args) -> "Extrema_POnSurf const &":
        """
        * Return the Nth extremum on S1.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_FuncExtSS_PointOnS1(self, *args)


    def PointOnS2(self, *args) -> "Extrema_POnSurf const &":
        """
        * Renvoie le Nieme extremum sur S2.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_FuncExtSS_PointOnS2(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Return the value of the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_FuncExtSS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_FuncExtSS
Extrema_FuncExtSS.Initialize = new_instancemethod(_Extrema.Extrema_FuncExtSS_Initialize, None, Extrema_FuncExtSS)
Extrema_FuncExtSS.NbExt = new_instancemethod(_Extrema.Extrema_FuncExtSS_NbExt, None, Extrema_FuncExtSS)
Extrema_FuncExtSS.PointOnS1 = new_instancemethod(_Extrema.Extrema_FuncExtSS_PointOnS1, None, Extrema_FuncExtSS)
Extrema_FuncExtSS.PointOnS2 = new_instancemethod(_Extrema.Extrema_FuncExtSS_PointOnS2, None, Extrema_FuncExtSS)
Extrema_FuncExtSS.SquareDistance = new_instancemethod(_Extrema.Extrema_FuncExtSS_SquareDistance, None, Extrema_FuncExtSS)
Extrema_FuncExtSS_swigregister = _Extrema.Extrema_FuncExtSS_swigregister
Extrema_FuncExtSS_swigregister(Extrema_FuncExtSS)

class Extrema_FuncPSDist(OCC.Core.math.math_MultipleVarFunctionWithGradient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor.
        	:param theS:
        	:type theS: Adaptor3d_Surface
        	:param theP:
        	:type theP: gp_Pnt
        	:rtype: None
        """
        _Extrema.Extrema_FuncPSDist_swiginit(self, _Extrema.new_Extrema_FuncPSDist(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_FuncPSDist
Extrema_FuncPSDist_swigregister = _Extrema.Extrema_FuncPSDist_swigregister
Extrema_FuncPSDist_swigregister(Extrema_FuncPSDist)

class Extrema_FuncPSNorm(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: Adaptor3d_Surface
        	:rtype: None
        """
        _Extrema.Extrema_FuncPSNorm_swiginit(self, _Extrema.new_Extrema_FuncPSNorm(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the field mysurf of the function.
        	:param S:
        	:type S: Adaptor3d_Surface
        	:rtype: None
        """
        return _Extrema.Extrema_FuncPSNorm_Initialize(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the number of found extrema.
        	:rtype: int
        """
        return _Extrema.Extrema_FuncPSNorm_NbExt(self, *args)


    def Point(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the Nth extremum.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_FuncPSNorm_Point(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        * sets the field mysurf of the function.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_FuncPSNorm_SetPoint(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Return the value of the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_FuncPSNorm_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_FuncPSNorm
Extrema_FuncPSNorm.Initialize = new_instancemethod(_Extrema.Extrema_FuncPSNorm_Initialize, None, Extrema_FuncPSNorm)
Extrema_FuncPSNorm.NbExt = new_instancemethod(_Extrema.Extrema_FuncPSNorm_NbExt, None, Extrema_FuncPSNorm)
Extrema_FuncPSNorm.Point = new_instancemethod(_Extrema.Extrema_FuncPSNorm_Point, None, Extrema_FuncPSNorm)
Extrema_FuncPSNorm.SetPoint = new_instancemethod(_Extrema.Extrema_FuncPSNorm_SetPoint, None, Extrema_FuncPSNorm)
Extrema_FuncPSNorm.SquareDistance = new_instancemethod(_Extrema.Extrema_FuncPSNorm_SquareDistance, None, Extrema_FuncPSNorm)
Extrema_FuncPSNorm_swigregister = _Extrema.Extrema_FuncPSNorm_swigregister
Extrema_FuncPSNorm_swigregister(Extrema_FuncPSNorm)

class Extrema_GenExtCS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. The function F(u,v)=distance(S1(u1,v1),S2(u2,v2)) has an extremum when gradient(F)=0. The algorithm searchs all the zeros inside the definition ranges of the surfaces. NbU and NbV are used to locate the close points on the surface and NbT on the curve to find the zeros.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param NbT:
        	:type NbT: int
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param Tol1:
        	:type Tol1: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        * It calculates all the distances. The function F(u,v)=distance(P,S(u,v)) has an extremum when gradient(F)=0. The algorithm searchs all the zeros inside the definition ranges of the surface. NbT,NbU and NbV are used to locate the close points to find the zeros.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param NbT:
        	:type NbT: int
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param tmin:
        	:type tmin: float
        	:param tsup:
        	:type tsup: float
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param Tol1:
        	:type Tol1: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        """
        _Extrema.Extrema_GenExtCS_swiginit(self, _Extrema.new_Extrema_GenExtCS(*args))

    def Initialize(self, *args) -> "void":
        """
        :param S:
        	:type S: Adaptor3d_Surface
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        :param S:
        	:type S: Adaptor3d_Surface
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        """
        return _Extrema.Extrema_GenExtCS_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_GenExtCS_IsDone(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_GenExtCS_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * the algorithm is done with S An exception is raised if the fields have not been initialized.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbT:
        	:type NbT: int
        	:param Tol1:
        	:type Tol1: float
        	:rtype: None
        * the algorithm is done with C An exception is raised if the fields have not been initialized.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbT:
        	:type NbT: int
        	:param tmin:
        	:type tmin: float
        	:param tsup:
        	:type tsup: float
        	:param Tol1:
        	:type Tol1: float
        	:rtype: None
        """
        return _Extrema.Extrema_GenExtCS_Perform(self, *args)


    def PointOnCurve(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the point of the Nth resulting distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_GenExtCS_PointOnCurve(self, *args)


    def PointOnSurface(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the Nth resulting distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_GenExtCS_PointOnSurface(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth resulting square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_GenExtCS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_GenExtCS
Extrema_GenExtCS.Initialize = new_instancemethod(_Extrema.Extrema_GenExtCS_Initialize, None, Extrema_GenExtCS)
Extrema_GenExtCS.IsDone = new_instancemethod(_Extrema.Extrema_GenExtCS_IsDone, None, Extrema_GenExtCS)
Extrema_GenExtCS.NbExt = new_instancemethod(_Extrema.Extrema_GenExtCS_NbExt, None, Extrema_GenExtCS)
Extrema_GenExtCS.Perform = new_instancemethod(_Extrema.Extrema_GenExtCS_Perform, None, Extrema_GenExtCS)
Extrema_GenExtCS.PointOnCurve = new_instancemethod(_Extrema.Extrema_GenExtCS_PointOnCurve, None, Extrema_GenExtCS)
Extrema_GenExtCS.PointOnSurface = new_instancemethod(_Extrema.Extrema_GenExtCS_PointOnSurface, None, Extrema_GenExtCS)
Extrema_GenExtCS.SquareDistance = new_instancemethod(_Extrema.Extrema_GenExtCS_SquareDistance, None, Extrema_GenExtCS)
Extrema_GenExtCS_swigregister = _Extrema.Extrema_GenExtCS_swigregister
Extrema_GenExtCS_swigregister(Extrema_GenExtCS)

class Extrema_GenExtPS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. The function F(u,v)=distance(P,S(u,v)) has an extremum when gradient(F)=0. The algorithm searchs all the zeros inside the definition ranges of the surface. NbU and NbV are used to locate the close points to find the zeros. They must be great enough such that if there is N extrema, there will be N extrema between P and the grid. TolU et TolV are used to determine the conditions to stop the iterations; at the iteration number n: (Un - Un-1) < TolU and (Vn - Vn-1) < TolV .
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        * It calculates all the distances. The function F(u,v)=distance(P,S(u,v)) has an extremum when gradient(F)=0. The algorithm searchs all the zeros inside the definition ranges of the surface. NbU and NbV are used to locate the close points to find the zeros. They must be great enough such that if there is N extrema, there will be N extrema between P and the grid. TolU et TolV are used to determine the conditions to stop the iterations; at the iteration number n: (Un - Un-1) < TolU and (Vn - Vn-1) < TolV .
        	:param P:
        	:type P: gp_Pnt
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        """
        _Extrema.Extrema_GenExtPS_swiginit(self, _Extrema.new_Extrema_GenExtPS(*args))

    def Initialize(self, *args) -> "void":
        """
        :param S:
        	:type S: Adaptor3d_Surface
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        :param S:
        	:type S: Adaptor3d_Surface
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        """
        return _Extrema.Extrema_GenExtPS_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_GenExtPS_IsDone(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_GenExtPS_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * the algorithm is done with the point P. An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_GenExtPS_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the Nth resulting distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_GenExtPS_Point(self, *args)


    def SetAlgo(self, *args) -> "void":
        """
        :param A:
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        """
        return _Extrema.Extrema_GenExtPS_SetAlgo(self, *args)


    def SetFlag(self, *args) -> "void":
        """
        :param F:
        	:type F: Extrema_ExtFlag
        	:rtype: None
        """
        return _Extrema.Extrema_GenExtPS_SetFlag(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth resulting square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_GenExtPS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_GenExtPS
Extrema_GenExtPS.Initialize = new_instancemethod(_Extrema.Extrema_GenExtPS_Initialize, None, Extrema_GenExtPS)
Extrema_GenExtPS.IsDone = new_instancemethod(_Extrema.Extrema_GenExtPS_IsDone, None, Extrema_GenExtPS)
Extrema_GenExtPS.NbExt = new_instancemethod(_Extrema.Extrema_GenExtPS_NbExt, None, Extrema_GenExtPS)
Extrema_GenExtPS.Perform = new_instancemethod(_Extrema.Extrema_GenExtPS_Perform, None, Extrema_GenExtPS)
Extrema_GenExtPS.Point = new_instancemethod(_Extrema.Extrema_GenExtPS_Point, None, Extrema_GenExtPS)
Extrema_GenExtPS.SetAlgo = new_instancemethod(_Extrema.Extrema_GenExtPS_SetAlgo, None, Extrema_GenExtPS)
Extrema_GenExtPS.SetFlag = new_instancemethod(_Extrema.Extrema_GenExtPS_SetFlag, None, Extrema_GenExtPS)
Extrema_GenExtPS.SquareDistance = new_instancemethod(_Extrema.Extrema_GenExtPS_SquareDistance, None, Extrema_GenExtPS)
Extrema_GenExtPS_swigregister = _Extrema.Extrema_GenExtPS_swigregister
Extrema_GenExtPS_swigregister(Extrema_GenExtPS)

class Extrema_GenExtSS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * It calculates all the distances. The function F(u,v)=distance(S1(u1,v1),S2(u2,v2)) has an extremum when gradient(F)=0. The algorithm searchs all the zeros inside the definition ranges of the surfaces. NbU and NbV are used to locate the close points to find the zeros.
        	:param S1:
        	:type S1: Adaptor3d_Surface
        	:param S2:
        	:type S2: Adaptor3d_Surface
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param Tol1:
        	:type Tol1: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        * It calculates all the distances. The function F(u,v)=distance(P,S(u,v)) has an extremum when gradient(F)=0. The algorithm searchs all the zeros inside the definition ranges of the surface. NbU and NbV are used to locate the close points to find the zeros.
        	:param S1:
        	:type S1: Adaptor3d_Surface
        	:param S2:
        	:type S2: Adaptor3d_Surface
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param U1min:
        	:type U1min: float
        	:param U1sup:
        	:type U1sup: float
        	:param V1min:
        	:type V1min: float
        	:param V1sup:
        	:type V1sup: float
        	:param U2min:
        	:type U2min: float
        	:param U2sup:
        	:type U2sup: float
        	:param V2min:
        	:type V2min: float
        	:param V2sup:
        	:type V2sup: float
        	:param Tol1:
        	:type Tol1: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        """
        _Extrema.Extrema_GenExtSS_swiginit(self, _Extrema.new_Extrema_GenExtSS(*args))

    def Initialize(self, *args) -> "void":
        """
        :param S2:
        	:type S2: Adaptor3d_Surface
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        :param S2:
        	:type S2: Adaptor3d_Surface
        	:param NbU:
        	:type NbU: int
        	:param NbV:
        	:type NbV: int
        	:param U2min:
        	:type U2min: float
        	:param U2sup:
        	:type U2sup: float
        	:param V2min:
        	:type V2min: float
        	:param V2sup:
        	:type V2sup: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        """
        return _Extrema.Extrema_GenExtSS_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distances are found.
        	:rtype: bool
        """
        return _Extrema.Extrema_GenExtSS_IsDone(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extremum distances.
        	:rtype: int
        """
        return _Extrema.Extrema_GenExtSS_NbExt(self, *args)


    def Perform(self, *args) -> "void":
        """
        * the algorithm is done with S1 An exception is raised if the fields have not been initialized.
        	:param S1:
        	:type S1: Adaptor3d_Surface
        	:param Tol1:
        	:type Tol1: float
        	:rtype: None
        * the algorithm is done withS1 An exception is raised if the fields have not been initialized.
        	:param S1:
        	:type S1: Adaptor3d_Surface
        	:param U1min:
        	:type U1min: float
        	:param U1sup:
        	:type U1sup: float
        	:param V1min:
        	:type V1min: float
        	:param V1sup:
        	:type V1sup: float
        	:param Tol1:
        	:type Tol1: float
        	:rtype: None
        """
        return _Extrema.Extrema_GenExtSS_Perform(self, *args)


    def PointOnS1(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the Nth resulting distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_GenExtSS_PointOnS1(self, *args)


    def PointOnS2(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the Nth resulting distance.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_GenExtSS_PointOnS2(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the Nth resulting square distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_GenExtSS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_GenExtSS
Extrema_GenExtSS.Initialize = new_instancemethod(_Extrema.Extrema_GenExtSS_Initialize, None, Extrema_GenExtSS)
Extrema_GenExtSS.IsDone = new_instancemethod(_Extrema.Extrema_GenExtSS_IsDone, None, Extrema_GenExtSS)
Extrema_GenExtSS.NbExt = new_instancemethod(_Extrema.Extrema_GenExtSS_NbExt, None, Extrema_GenExtSS)
Extrema_GenExtSS.Perform = new_instancemethod(_Extrema.Extrema_GenExtSS_Perform, None, Extrema_GenExtSS)
Extrema_GenExtSS.PointOnS1 = new_instancemethod(_Extrema.Extrema_GenExtSS_PointOnS1, None, Extrema_GenExtSS)
Extrema_GenExtSS.PointOnS2 = new_instancemethod(_Extrema.Extrema_GenExtSS_PointOnS2, None, Extrema_GenExtSS)
Extrema_GenExtSS.SquareDistance = new_instancemethod(_Extrema.Extrema_GenExtSS_SquareDistance, None, Extrema_GenExtSS)
Extrema_GenExtSS_swigregister = _Extrema.Extrema_GenExtSS_swigregister
Extrema_GenExtSS_swigregister(Extrema_GenExtSS)

class Extrema_GenLocateExtCS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the distance with two close points. The close points are defined by the parameter values T for C and (U,V) for S. The function F(t,u,v)=distance(C(t),S(u,v)) has an extremun when gradient(F)=0. The algorithm searchs a zero near the close points.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param T:
        	:type T: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Tol1:
        	:type Tol1: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        """
        _Extrema.Extrema_GenLocateExtCS_swiginit(self, _Extrema.new_Extrema_GenLocateExtCS(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Extrema.Extrema_GenLocateExtCS_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:param S:
        	:type S: Adaptor3d_Surface
        	:param T:
        	:type T: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Tol1:
        	:type Tol1: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        """
        return _Extrema.Extrema_GenLocateExtCS_Perform(self, *args)


    def PointOnCurve(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the point of the extremum distance on C.
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_GenLocateExtCS_PointOnCurve(self, *args)


    def PointOnSurface(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the extremum distance on S.
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_GenLocateExtCS_PointOnSurface(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Extrema.Extrema_GenLocateExtCS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_GenLocateExtCS
Extrema_GenLocateExtCS.IsDone = new_instancemethod(_Extrema.Extrema_GenLocateExtCS_IsDone, None, Extrema_GenLocateExtCS)
Extrema_GenLocateExtCS.Perform = new_instancemethod(_Extrema.Extrema_GenLocateExtCS_Perform, None, Extrema_GenLocateExtCS)
Extrema_GenLocateExtCS.PointOnCurve = new_instancemethod(_Extrema.Extrema_GenLocateExtCS_PointOnCurve, None, Extrema_GenLocateExtCS)
Extrema_GenLocateExtCS.PointOnSurface = new_instancemethod(_Extrema.Extrema_GenLocateExtCS_PointOnSurface, None, Extrema_GenLocateExtCS)
Extrema_GenLocateExtCS.SquareDistance = new_instancemethod(_Extrema.Extrema_GenLocateExtCS_SquareDistance, None, Extrema_GenLocateExtCS)
Extrema_GenLocateExtCS_swigregister = _Extrema.Extrema_GenLocateExtCS_swigregister
Extrema_GenLocateExtCS_swigregister(Extrema_GenLocateExtCS)

class Extrema_GenLocateExtPS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor.
        	:param theS:
        	:type theS: Adaptor3d_Surface
        	:param theTolU: default value is Precision::Confusion()
        	:type theTolU: float
        	:param theTolV: default value is Precision::Confusion()
        	:type theTolV: float
        	:rtype: None
        """
        _Extrema.Extrema_GenLocateExtPS_swiginit(self, _Extrema.new_Extrema_GenLocateExtPS(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Extrema.Extrema_GenLocateExtPS_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Calculates the extrema between the point and the surface using a close point. The close point is defined by the parameter values theU0 and theV0. Type of the algorithm depends on the isDistanceCriteria flag. If flag value is false - normal projection criteria will be used. If flag value is true - distance criteria will be used.
        	:param theP:
        	:type theP: gp_Pnt
        	:param theU0:
        	:type theU0: float
        	:param theV0:
        	:type theV0: float
        	:param isDistanceCriteria: default value is Standard_False
        	:type isDistanceCriteria: bool
        	:rtype: None
        """
        return _Extrema.Extrema_GenLocateExtPS_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the extremum distance.
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_GenLocateExtPS_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Extrema.Extrema_GenLocateExtPS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_GenLocateExtPS
Extrema_GenLocateExtPS.IsDone = new_instancemethod(_Extrema.Extrema_GenLocateExtPS_IsDone, None, Extrema_GenLocateExtPS)
Extrema_GenLocateExtPS.Perform = new_instancemethod(_Extrema.Extrema_GenLocateExtPS_Perform, None, Extrema_GenLocateExtPS)
Extrema_GenLocateExtPS.Point = new_instancemethod(_Extrema.Extrema_GenLocateExtPS_Point, None, Extrema_GenLocateExtPS)
Extrema_GenLocateExtPS.SquareDistance = new_instancemethod(_Extrema.Extrema_GenLocateExtPS_SquareDistance, None, Extrema_GenLocateExtPS)
Extrema_GenLocateExtPS_swigregister = _Extrema.Extrema_GenLocateExtPS_swigregister
Extrema_GenLocateExtPS_swigregister(Extrema_GenLocateExtPS)

class Extrema_GenLocateExtSS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the distance with two close points. The close points are defined by the parameter values (U1,V1) for S1 and (U2,V2) for S2. The function F(u1,v1,u2,v2)=distance(S1(u1,v1),S2(u2,v2)) has an extremun when gradient(F)=0. The algorithm searchs a zero near the close points.
        	:param S1:
        	:type S1: Adaptor3d_Surface
        	:param S2:
        	:type S2: Adaptor3d_Surface
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:param Tol1:
        	:type Tol1: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        """
        _Extrema.Extrema_GenLocateExtSS_swiginit(self, _Extrema.new_Extrema_GenLocateExtSS(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Extrema.Extrema_GenLocateExtSS_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param S1:
        	:type S1: Adaptor3d_Surface
        	:param S2:
        	:type S2: Adaptor3d_Surface
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:param Tol1:
        	:type Tol1: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        """
        return _Extrema.Extrema_GenLocateExtSS_Perform(self, *args)


    def PointOnS1(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the extremum distance on S1.
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_GenLocateExtSS_PointOnS1(self, *args)


    def PointOnS2(self, *args) -> "Extrema_POnSurf const &":
        """
        * Returns the point of the extremum distance on S2.
        	:rtype: Extrema_POnSurf
        """
        return _Extrema.Extrema_GenLocateExtSS_PointOnS2(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Extrema.Extrema_GenLocateExtSS_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_GenLocateExtSS
Extrema_GenLocateExtSS.IsDone = new_instancemethod(_Extrema.Extrema_GenLocateExtSS_IsDone, None, Extrema_GenLocateExtSS)
Extrema_GenLocateExtSS.Perform = new_instancemethod(_Extrema.Extrema_GenLocateExtSS_Perform, None, Extrema_GenLocateExtSS)
Extrema_GenLocateExtSS.PointOnS1 = new_instancemethod(_Extrema.Extrema_GenLocateExtSS_PointOnS1, None, Extrema_GenLocateExtSS)
Extrema_GenLocateExtSS.PointOnS2 = new_instancemethod(_Extrema.Extrema_GenLocateExtSS_PointOnS2, None, Extrema_GenLocateExtSS)
Extrema_GenLocateExtSS.SquareDistance = new_instancemethod(_Extrema.Extrema_GenLocateExtSS_SquareDistance, None, Extrema_GenLocateExtSS)
Extrema_GenLocateExtSS_swigregister = _Extrema.Extrema_GenLocateExtSS_swigregister
Extrema_GenLocateExtSS_swigregister(Extrema_GenLocateExtSS)

class Extrema_GlobOptFuncCCC0(OCC.Core.math.math_MultipleVarFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C1:
        	:type C1: Adaptor3d_Curve
        	:param C2:
        	:type C2: Adaptor3d_Curve
        	:rtype: None
        :param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:rtype: None
        """
        _Extrema.Extrema_GlobOptFuncCCC0_swiginit(self, _Extrema.new_Extrema_GlobOptFuncCCC0(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_GlobOptFuncCCC0
Extrema_GlobOptFuncCCC0_swigregister = _Extrema.Extrema_GlobOptFuncCCC0_swigregister
Extrema_GlobOptFuncCCC0_swigregister(Extrema_GlobOptFuncCCC0)

class Extrema_GlobOptFuncCCC1(OCC.Core.math.math_MultipleVarFunctionWithGradient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C1:
        	:type C1: Adaptor3d_Curve
        	:param C2:
        	:type C2: Adaptor3d_Curve
        	:rtype: None
        :param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:rtype: None
        """
        _Extrema.Extrema_GlobOptFuncCCC1_swiginit(self, _Extrema.new_Extrema_GlobOptFuncCCC1(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_GlobOptFuncCCC1
Extrema_GlobOptFuncCCC1_swigregister = _Extrema.Extrema_GlobOptFuncCCC1_swigregister
Extrema_GlobOptFuncCCC1_swigregister(Extrema_GlobOptFuncCCC1)

class Extrema_GlobOptFuncCCC2(OCC.Core.math.math_MultipleVarFunctionWithHessian):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C1:
        	:type C1: Adaptor3d_Curve
        	:param C2:
        	:type C2: Adaptor3d_Curve
        	:rtype: None
        :param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:rtype: None
        """
        _Extrema.Extrema_GlobOptFuncCCC2_swiginit(self, _Extrema.new_Extrema_GlobOptFuncCCC2(*args))

    def Values(self, *args) -> "Standard_Boolean":
        """
        :param X:
        	:type X: math_Vector
        	:param F:
        	:type F: float
        	:param G:
        	:type G: math_Vector
        	:rtype: bool
        :param X:
        	:type X: math_Vector
        	:param F:
        	:type F: float
        	:param G:
        	:type G: math_Vector
        	:param H:
        	:type H: math_Matrix
        	:rtype: bool
        """
        return _Extrema.Extrema_GlobOptFuncCCC2_Values(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_GlobOptFuncCCC2
Extrema_GlobOptFuncCCC2.Values = new_instancemethod(_Extrema.Extrema_GlobOptFuncCCC2_Values, None, Extrema_GlobOptFuncCCC2)
Extrema_GlobOptFuncCCC2_swigregister = _Extrema.Extrema_GlobOptFuncCCC2_swigregister
Extrema_GlobOptFuncCCC2_swigregister(Extrema_GlobOptFuncCCC2)

class Extrema_GlobOptFuncCS(OCC.Core.math.math_MultipleVarFunctionWithHessian):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Curve and surface should exist during all the lifetime of Extrema_GlobOptFuncCS.
        	:param C:
        	:type C: Adaptor3d_Curve *
        	:param S:
        	:type S: Adaptor3d_Surface *
        	:rtype: None
        """
        _Extrema.Extrema_GlobOptFuncCS_swiginit(self, _Extrema.new_Extrema_GlobOptFuncCS(*args))

    def Values(self, *args) -> "Standard_Boolean":
        """
        :param theX:
        	:type theX: math_Vector
        	:param theF:
        	:type theF: float
        	:param theG:
        	:type theG: math_Vector
        	:rtype: bool
        :param theX:
        	:type theX: math_Vector
        	:param theF:
        	:type theF: float
        	:param theG:
        	:type theG: math_Vector
        	:param theH:
        	:type theH: math_Matrix
        	:rtype: bool
        """
        return _Extrema.Extrema_GlobOptFuncCS_Values(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_GlobOptFuncCS
Extrema_GlobOptFuncCS.Values = new_instancemethod(_Extrema.Extrema_GlobOptFuncCS_Values, None, Extrema_GlobOptFuncCS)
Extrema_GlobOptFuncCS_swigregister = _Extrema.Extrema_GlobOptFuncCS_swigregister
Extrema_GlobOptFuncCS_swigregister(Extrema_GlobOptFuncCS)

class Extrema_LocECC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Calculates the distance with a close point. The close point is defined by a parameter value on each curve. The function F(u,v)=distance(C1(u),C2(v)) has an extremun when gradient(f)=0. The algorithm searchs the zero near the close point.
        	:param C1:
        	:type C1: Adaptor3d_Curve
        	:param C2:
        	:type C2: Adaptor3d_Curve
        	:param U0:
        	:type U0: float
        	:param V0:
        	:type V0: float
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        """
        _Extrema.Extrema_LocECC_swiginit(self, _Extrema.new_Extrema_LocECC(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocECC_IsDone(self, *args)


    def Point(self, *args) -> "void":
        """
        * Returns the points of the extremum distance. P1 is on the first curve, P2 on the second one.
        	:param P1:
        	:type P1: Extrema_POnCurv
        	:param P2:
        	:type P2: Extrema_POnCurv
        	:rtype: None
        """
        return _Extrema.Extrema_LocECC_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Extrema.Extrema_LocECC_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_LocECC
Extrema_LocECC.IsDone = new_instancemethod(_Extrema.Extrema_LocECC_IsDone, None, Extrema_LocECC)
Extrema_LocECC.Point = new_instancemethod(_Extrema.Extrema_LocECC_Point, None, Extrema_LocECC)
Extrema_LocECC.SquareDistance = new_instancemethod(_Extrema.Extrema_LocECC_SquareDistance, None, Extrema_LocECC)
Extrema_LocECC_swigregister = _Extrema.Extrema_LocECC_swigregister
Extrema_LocECC_swigregister(Extrema_LocECC)

class Extrema_LocECC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Calculates the distance with a close point. The close point is defined by a parameter value on each curve. The function F(u,v)=distance(C1(u),C2(v)) has an extremun when gradient(f)=0. The algorithm searchs the zero near the close point.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param U0:
        	:type U0: float
        	:param V0:
        	:type V0: float
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        """
        _Extrema.Extrema_LocECC2d_swiginit(self, _Extrema.new_Extrema_LocECC2d(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocECC2d_IsDone(self, *args)


    def Point(self, *args) -> "void":
        """
        * Returns the points of the extremum distance. P1 is on the first curve, P2 on the second one.
        	:param P1:
        	:type P1: Extrema_POnCurv2d
        	:param P2:
        	:type P2: Extrema_POnCurv2d
        	:rtype: None
        """
        return _Extrema.Extrema_LocECC2d_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Extrema.Extrema_LocECC2d_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_LocECC2d
Extrema_LocECC2d.IsDone = new_instancemethod(_Extrema.Extrema_LocECC2d_IsDone, None, Extrema_LocECC2d)
Extrema_LocECC2d.Point = new_instancemethod(_Extrema.Extrema_LocECC2d_Point, None, Extrema_LocECC2d)
Extrema_LocECC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_LocECC2d_SquareDistance, None, Extrema_LocECC2d)
Extrema_LocECC2d_swigregister = _Extrema.Extrema_LocECC2d_swigregister
Extrema_LocECC2d_swigregister(Extrema_LocECC2d)

class Extrema_LocEPCOfLocateExtPC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the distance with a close point. The close point is defined by the parameter value U0. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs a zero near the close point. TolU is used to decide to stop the iterations. At the nth iteration, the criteria is: abs(Un - Un-1) < TolU.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param U0:
        	:type U0: float
        	:param TolU:
        	:type TolU: float
        	:rtype: None
        * Calculates the distance with a close point. The close point is defined by the parameter value U0. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs a zero near the close point. Zeros are searched between Umin et Usup. TolU is used to decide to stop the iterations. At the nth iteration, the criteria is: abs(Un - Un-1) < TolU.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param U0:
        	:type U0: float
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:rtype: None
        """
        _Extrema.Extrema_LocEPCOfLocateExtPC_swiginit(self, _Extrema.new_Extrema_LocEPCOfLocateExtPC(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:rtype: None
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the extremum distance is a minimum.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC_IsMin(self, *args)


    def Perform(self, *args) -> "void":
        """
        * the algorithm is done with the point P. An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt
        	:param U0:
        	:type U0: float
        	:rtype: None
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the point of the extremum distance.
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_LocEPCOfLocateExtPC
Extrema_LocEPCOfLocateExtPC.Initialize = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC_Initialize, None, Extrema_LocEPCOfLocateExtPC)
Extrema_LocEPCOfLocateExtPC.IsDone = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC_IsDone, None, Extrema_LocEPCOfLocateExtPC)
Extrema_LocEPCOfLocateExtPC.IsMin = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC_IsMin, None, Extrema_LocEPCOfLocateExtPC)
Extrema_LocEPCOfLocateExtPC.Perform = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC_Perform, None, Extrema_LocEPCOfLocateExtPC)
Extrema_LocEPCOfLocateExtPC.Point = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC_Point, None, Extrema_LocEPCOfLocateExtPC)
Extrema_LocEPCOfLocateExtPC.SquareDistance = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC_SquareDistance, None, Extrema_LocEPCOfLocateExtPC)
Extrema_LocEPCOfLocateExtPC_swigregister = _Extrema.Extrema_LocEPCOfLocateExtPC_swigregister
Extrema_LocEPCOfLocateExtPC_swigregister(Extrema_LocEPCOfLocateExtPC)

class Extrema_LocEPCOfLocateExtPC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the distance with a close point. The close point is defined by the parameter value U0. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs a zero near the close point. TolU is used to decide to stop the iterations. At the nth iteration, the criteria is: abs(Un - Un-1) < TolU.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U0:
        	:type U0: float
        	:param TolU:
        	:type TolU: float
        	:rtype: None
        * Calculates the distance with a close point. The close point is defined by the parameter value U0. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs a zero near the close point. Zeros are searched between Umin et Usup. TolU is used to decide to stop the iterations. At the nth iteration, the criteria is: abs(Un - Un-1) < TolU.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U0:
        	:type U0: float
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:rtype: None
        """
        _Extrema.Extrema_LocEPCOfLocateExtPC2d_swiginit(self, _Extrema.new_Extrema_LocEPCOfLocateExtPC2d(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:rtype: None
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC2d_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC2d_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the extremum distance is a minimum.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC2d_IsMin(self, *args)


    def Perform(self, *args) -> "void":
        """
        * the algorithm is done with the point P. An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt2d
        	:param U0:
        	:type U0: float
        	:rtype: None
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC2d_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the point of the extremum distance.
        	:rtype: Extrema_POnCurv2d
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC2d_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Extrema.Extrema_LocEPCOfLocateExtPC2d_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_LocEPCOfLocateExtPC2d
Extrema_LocEPCOfLocateExtPC2d.Initialize = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC2d_Initialize, None, Extrema_LocEPCOfLocateExtPC2d)
Extrema_LocEPCOfLocateExtPC2d.IsDone = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC2d_IsDone, None, Extrema_LocEPCOfLocateExtPC2d)
Extrema_LocEPCOfLocateExtPC2d.IsMin = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC2d_IsMin, None, Extrema_LocEPCOfLocateExtPC2d)
Extrema_LocEPCOfLocateExtPC2d.Perform = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC2d_Perform, None, Extrema_LocEPCOfLocateExtPC2d)
Extrema_LocEPCOfLocateExtPC2d.Point = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC2d_Point, None, Extrema_LocEPCOfLocateExtPC2d)
Extrema_LocEPCOfLocateExtPC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_LocEPCOfLocateExtPC2d_SquareDistance, None, Extrema_LocEPCOfLocateExtPC2d)
Extrema_LocEPCOfLocateExtPC2d_swigregister = _Extrema.Extrema_LocEPCOfLocateExtPC2d_swigregister
Extrema_LocEPCOfLocateExtPC2d_swigregister(Extrema_LocEPCOfLocateExtPC2d)

class Extrema_LocateExtCC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Calculates the distance with a close point. The close point is defined by a parameter value on each curve. The function F(u,v)=distance(C1(u),C2(v)) has an extremun when gradient(f)=0. The algorithm searchs the zero near the close point.
        	:param C1:
        	:type C1: Adaptor3d_Curve
        	:param C2:
        	:type C2: Adaptor3d_Curve
        	:param U0:
        	:type U0: float
        	:param V0:
        	:type V0: float
        	:rtype: None
        """
        _Extrema.Extrema_LocateExtCC_swiginit(self, _Extrema.new_Extrema_LocateExtCC(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocateExtCC_IsDone(self, *args)


    def Point(self, *args) -> "void":
        """
        * Returns the points of the extremum distance. P1 is on the first curve, P2 on the second one.
        	:param P1:
        	:type P1: Extrema_POnCurv
        	:param P2:
        	:type P2: Extrema_POnCurv
        	:rtype: None
        """
        return _Extrema.Extrema_LocateExtCC_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Extrema.Extrema_LocateExtCC_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_LocateExtCC
Extrema_LocateExtCC.IsDone = new_instancemethod(_Extrema.Extrema_LocateExtCC_IsDone, None, Extrema_LocateExtCC)
Extrema_LocateExtCC.Point = new_instancemethod(_Extrema.Extrema_LocateExtCC_Point, None, Extrema_LocateExtCC)
Extrema_LocateExtCC.SquareDistance = new_instancemethod(_Extrema.Extrema_LocateExtCC_SquareDistance, None, Extrema_LocateExtCC)
Extrema_LocateExtCC_swigregister = _Extrema.Extrema_LocateExtCC_swigregister
Extrema_LocateExtCC_swigregister(Extrema_LocateExtCC)

class Extrema_LocateExtCC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Calculates the distance with a close point. The close point is defined by a parameter value on each curve. The function F(u,v)=distance(C1(u),C2(v)) has an extremun when gradient(f)=0. The algorithm searchs the zero near the close point.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param U0:
        	:type U0: float
        	:param V0:
        	:type V0: float
        	:rtype: None
        """
        _Extrema.Extrema_LocateExtCC2d_swiginit(self, _Extrema.new_Extrema_LocateExtCC2d(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocateExtCC2d_IsDone(self, *args)


    def Point(self, *args) -> "void":
        """
        * Returns the points of the extremum distance. P1 is on the first curve, P2 on the second one.
        	:param P1:
        	:type P1: Extrema_POnCurv2d
        	:param P2:
        	:type P2: Extrema_POnCurv2d
        	:rtype: None
        """
        return _Extrema.Extrema_LocateExtCC2d_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Extrema.Extrema_LocateExtCC2d_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_LocateExtCC2d
Extrema_LocateExtCC2d.IsDone = new_instancemethod(_Extrema.Extrema_LocateExtCC2d_IsDone, None, Extrema_LocateExtCC2d)
Extrema_LocateExtCC2d.Point = new_instancemethod(_Extrema.Extrema_LocateExtCC2d_Point, None, Extrema_LocateExtCC2d)
Extrema_LocateExtCC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_LocateExtCC2d_SquareDistance, None, Extrema_LocateExtCC2d)
Extrema_LocateExtCC2d_swigregister = _Extrema.Extrema_LocateExtCC2d_swigregister
Extrema_LocateExtCC2d_swigregister(Extrema_LocateExtCC2d)

class Extrema_LocateExtPC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the distance with a close point. The close point is defined by the parameter value U0. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs a zero near the close point. TolF is used to decide to stop the iterations. At the nth iteration, the criteria is: abs(Un - Un-1) < TolF.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param U0:
        	:type U0: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * Calculates the distance with a close point. The close point is defined by the parameter value U0. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs a zero near the close point. Zeros are searched between Umin et Usup. TolF is used to decide to stop the iterations. At the nth iteration, the criteria is: abs(Un - Un-1) < TolF.
        	:param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param U0:
        	:type U0: float
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        _Extrema.Extrema_LocateExtPC_swiginit(self, _Extrema.new_Extrema_LocateExtPC(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        return _Extrema.Extrema_LocateExtPC_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocateExtPC_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the extremum distance is a minimum.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocateExtPC_IsMin(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param U0:
        	:type U0: float
        	:rtype: None
        """
        return _Extrema.Extrema_LocateExtPC_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the point of the extremum distance.
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_LocateExtPC_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Extrema.Extrema_LocateExtPC_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_LocateExtPC
Extrema_LocateExtPC.Initialize = new_instancemethod(_Extrema.Extrema_LocateExtPC_Initialize, None, Extrema_LocateExtPC)
Extrema_LocateExtPC.IsDone = new_instancemethod(_Extrema.Extrema_LocateExtPC_IsDone, None, Extrema_LocateExtPC)
Extrema_LocateExtPC.IsMin = new_instancemethod(_Extrema.Extrema_LocateExtPC_IsMin, None, Extrema_LocateExtPC)
Extrema_LocateExtPC.Perform = new_instancemethod(_Extrema.Extrema_LocateExtPC_Perform, None, Extrema_LocateExtPC)
Extrema_LocateExtPC.Point = new_instancemethod(_Extrema.Extrema_LocateExtPC_Point, None, Extrema_LocateExtPC)
Extrema_LocateExtPC.SquareDistance = new_instancemethod(_Extrema.Extrema_LocateExtPC_SquareDistance, None, Extrema_LocateExtPC)
Extrema_LocateExtPC_swigregister = _Extrema.Extrema_LocateExtPC_swigregister
Extrema_LocateExtPC_swigregister(Extrema_LocateExtPC)

class Extrema_LocateExtPC2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the distance with a close point. The close point is defined by the parameter value U0. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs a zero near the close point. TolF is used to decide to stop the iterations. At the nth iteration, the criteria is: abs(Un - Un-1) < TolF.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U0:
        	:type U0: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        * Calculates the distance with a close point. The close point is defined by the parameter value U0. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs a zero near the close point. Zeros are searched between Umin et Usup. TolF is used to decide to stop the iterations. At the nth iteration, the criteria is: abs(Un - Un-1) < TolF.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U0:
        	:type U0: float
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        _Extrema.Extrema_LocateExtPC2d_swiginit(self, _Extrema.new_Extrema_LocateExtPC2d(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolF:
        	:type TolF: float
        	:rtype: None
        """
        return _Extrema.Extrema_LocateExtPC2d_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocateExtPC2d_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the extremum distance is a minimum.
        	:rtype: bool
        """
        return _Extrema.Extrema_LocateExtPC2d_IsMin(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt2d
        	:param U0:
        	:type U0: float
        	:rtype: None
        """
        return _Extrema.Extrema_LocateExtPC2d_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the point of the extremum distance.
        	:rtype: Extrema_POnCurv2d
        """
        return _Extrema.Extrema_LocateExtPC2d_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Extrema.Extrema_LocateExtPC2d_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_LocateExtPC2d
Extrema_LocateExtPC2d.Initialize = new_instancemethod(_Extrema.Extrema_LocateExtPC2d_Initialize, None, Extrema_LocateExtPC2d)
Extrema_LocateExtPC2d.IsDone = new_instancemethod(_Extrema.Extrema_LocateExtPC2d_IsDone, None, Extrema_LocateExtPC2d)
Extrema_LocateExtPC2d.IsMin = new_instancemethod(_Extrema.Extrema_LocateExtPC2d_IsMin, None, Extrema_LocateExtPC2d)
Extrema_LocateExtPC2d.Perform = new_instancemethod(_Extrema.Extrema_LocateExtPC2d_Perform, None, Extrema_LocateExtPC2d)
Extrema_LocateExtPC2d.Point = new_instancemethod(_Extrema.Extrema_LocateExtPC2d_Point, None, Extrema_LocateExtPC2d)
Extrema_LocateExtPC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_LocateExtPC2d_SquareDistance, None, Extrema_LocateExtPC2d)
Extrema_LocateExtPC2d_swigregister = _Extrema.Extrema_LocateExtPC2d_swigregister
Extrema_LocateExtPC2d_swigregister(Extrema_LocateExtPC2d)

class Extrema_PCFOfEPCOfELPCOfLocateExtPC(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: None
        """
        _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_swiginit(self, _Extrema.new_Extrema_PCFOfEPCOfELPCOfLocateExtPC(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the field mycurve of the function.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_Initialize(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Shows if the Nth distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the nunber of found extrema.
        	:rtype: int
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_NbExt(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the Nth extremum.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_Point(self, *args)


    def SearchOfTolerance(self, *args) -> "Standard_Real":
        """
        * Computes a Tol value. If 1st derivative of curve |D1|<Tol, it is considered D1=0.
        	:rtype: float
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_SearchOfTolerance(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        * sets the field P of the function.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_SetPoint(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_SquareDistance(self, *args)


    def SubIntervalInitialize(self, *args) -> "void":
        """
        * Determines boundaries of subinterval for find of root.
        	:param theUfirst:
        	:type theUfirst: float
        	:param theUlast:
        	:type theUlast: float
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_SubIntervalInitialize(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_PCFOfEPCOfELPCOfLocateExtPC
Extrema_PCFOfEPCOfELPCOfLocateExtPC.Initialize = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_Initialize, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC)
Extrema_PCFOfEPCOfELPCOfLocateExtPC.IsMin = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_IsMin, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC)
Extrema_PCFOfEPCOfELPCOfLocateExtPC.NbExt = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_NbExt, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC)
Extrema_PCFOfEPCOfELPCOfLocateExtPC.Point = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_Point, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC)
Extrema_PCFOfEPCOfELPCOfLocateExtPC.SearchOfTolerance = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_SearchOfTolerance, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC)
Extrema_PCFOfEPCOfELPCOfLocateExtPC.SetPoint = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_SetPoint, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC)
Extrema_PCFOfEPCOfELPCOfLocateExtPC.SquareDistance = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_SquareDistance, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC)
Extrema_PCFOfEPCOfELPCOfLocateExtPC.SubIntervalInitialize = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_SubIntervalInitialize, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC)
Extrema_PCFOfEPCOfELPCOfLocateExtPC_swigregister = _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC_swigregister
Extrema_PCFOfEPCOfELPCOfLocateExtPC_swigregister(Extrema_PCFOfEPCOfELPCOfLocateExtPC)

class Extrema_PCFOfEPCOfELPCOfLocateExtPC2d(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: None
        """
        _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_swiginit(self, _Extrema.new_Extrema_PCFOfEPCOfELPCOfLocateExtPC2d(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the field mycurve of the function.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_Initialize(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Shows if the Nth distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the nunber of found extrema.
        	:rtype: int
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_NbExt(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the Nth extremum.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv2d
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_Point(self, *args)


    def SearchOfTolerance(self, *args) -> "Standard_Real":
        """
        * Computes a Tol value. If 1st derivative of curve |D1|<Tol, it is considered D1=0.
        	:rtype: float
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_SearchOfTolerance(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        * sets the field P of the function.
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_SetPoint(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_SquareDistance(self, *args)


    def SubIntervalInitialize(self, *args) -> "void":
        """
        * Determines boundaries of subinterval for find of root.
        	:param theUfirst:
        	:type theUfirst: float
        	:param theUlast:
        	:type theUlast: float
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_SubIntervalInitialize(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_PCFOfEPCOfELPCOfLocateExtPC2d
Extrema_PCFOfEPCOfELPCOfLocateExtPC2d.Initialize = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_Initialize, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC2d)
Extrema_PCFOfEPCOfELPCOfLocateExtPC2d.IsMin = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_IsMin, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC2d)
Extrema_PCFOfEPCOfELPCOfLocateExtPC2d.NbExt = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_NbExt, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC2d)
Extrema_PCFOfEPCOfELPCOfLocateExtPC2d.Point = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_Point, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC2d)
Extrema_PCFOfEPCOfELPCOfLocateExtPC2d.SearchOfTolerance = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_SearchOfTolerance, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC2d)
Extrema_PCFOfEPCOfELPCOfLocateExtPC2d.SetPoint = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_SetPoint, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC2d)
Extrema_PCFOfEPCOfELPCOfLocateExtPC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_SquareDistance, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC2d)
Extrema_PCFOfEPCOfELPCOfLocateExtPC2d.SubIntervalInitialize = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_SubIntervalInitialize, None, Extrema_PCFOfEPCOfELPCOfLocateExtPC2d)
Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_swigregister = _Extrema.Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_swigregister
Extrema_PCFOfEPCOfELPCOfLocateExtPC2d_swigregister(Extrema_PCFOfEPCOfELPCOfLocateExtPC2d)

class Extrema_PCFOfEPCOfExtPC(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: None
        """
        _Extrema.Extrema_PCFOfEPCOfExtPC_swiginit(self, _Extrema.new_Extrema_PCFOfEPCOfExtPC(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the field mycurve of the function.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC_Initialize(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Shows if the Nth distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the nunber of found extrema.
        	:rtype: int
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC_NbExt(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the Nth extremum.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC_Point(self, *args)


    def SearchOfTolerance(self, *args) -> "Standard_Real":
        """
        * Computes a Tol value. If 1st derivative of curve |D1|<Tol, it is considered D1=0.
        	:rtype: float
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC_SearchOfTolerance(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        * sets the field P of the function.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC_SetPoint(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC_SquareDistance(self, *args)


    def SubIntervalInitialize(self, *args) -> "void":
        """
        * Determines boundaries of subinterval for find of root.
        	:param theUfirst:
        	:type theUfirst: float
        	:param theUlast:
        	:type theUlast: float
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC_SubIntervalInitialize(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_PCFOfEPCOfExtPC
Extrema_PCFOfEPCOfExtPC.Initialize = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC_Initialize, None, Extrema_PCFOfEPCOfExtPC)
Extrema_PCFOfEPCOfExtPC.IsMin = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC_IsMin, None, Extrema_PCFOfEPCOfExtPC)
Extrema_PCFOfEPCOfExtPC.NbExt = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC_NbExt, None, Extrema_PCFOfEPCOfExtPC)
Extrema_PCFOfEPCOfExtPC.Point = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC_Point, None, Extrema_PCFOfEPCOfExtPC)
Extrema_PCFOfEPCOfExtPC.SearchOfTolerance = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC_SearchOfTolerance, None, Extrema_PCFOfEPCOfExtPC)
Extrema_PCFOfEPCOfExtPC.SetPoint = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC_SetPoint, None, Extrema_PCFOfEPCOfExtPC)
Extrema_PCFOfEPCOfExtPC.SquareDistance = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC_SquareDistance, None, Extrema_PCFOfEPCOfExtPC)
Extrema_PCFOfEPCOfExtPC.SubIntervalInitialize = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC_SubIntervalInitialize, None, Extrema_PCFOfEPCOfExtPC)
Extrema_PCFOfEPCOfExtPC_swigregister = _Extrema.Extrema_PCFOfEPCOfExtPC_swigregister
Extrema_PCFOfEPCOfExtPC_swigregister(Extrema_PCFOfEPCOfExtPC)

class Extrema_PCFOfEPCOfExtPC2d(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: None
        """
        _Extrema.Extrema_PCFOfEPCOfExtPC2d_swiginit(self, _Extrema.new_Extrema_PCFOfEPCOfExtPC2d(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the field mycurve of the function.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC2d_Initialize(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Shows if the Nth distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC2d_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the nunber of found extrema.
        	:rtype: int
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC2d_NbExt(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the Nth extremum.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv2d
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC2d_Point(self, *args)


    def SearchOfTolerance(self, *args) -> "Standard_Real":
        """
        * Computes a Tol value. If 1st derivative of curve |D1|<Tol, it is considered D1=0.
        	:rtype: float
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC2d_SearchOfTolerance(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        * sets the field P of the function.
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC2d_SetPoint(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC2d_SquareDistance(self, *args)


    def SubIntervalInitialize(self, *args) -> "void":
        """
        * Determines boundaries of subinterval for find of root.
        	:param theUfirst:
        	:type theUfirst: float
        	:param theUlast:
        	:type theUlast: float
        	:rtype: None
        """
        return _Extrema.Extrema_PCFOfEPCOfExtPC2d_SubIntervalInitialize(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_PCFOfEPCOfExtPC2d
Extrema_PCFOfEPCOfExtPC2d.Initialize = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC2d_Initialize, None, Extrema_PCFOfEPCOfExtPC2d)
Extrema_PCFOfEPCOfExtPC2d.IsMin = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC2d_IsMin, None, Extrema_PCFOfEPCOfExtPC2d)
Extrema_PCFOfEPCOfExtPC2d.NbExt = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC2d_NbExt, None, Extrema_PCFOfEPCOfExtPC2d)
Extrema_PCFOfEPCOfExtPC2d.Point = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC2d_Point, None, Extrema_PCFOfEPCOfExtPC2d)
Extrema_PCFOfEPCOfExtPC2d.SearchOfTolerance = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC2d_SearchOfTolerance, None, Extrema_PCFOfEPCOfExtPC2d)
Extrema_PCFOfEPCOfExtPC2d.SetPoint = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC2d_SetPoint, None, Extrema_PCFOfEPCOfExtPC2d)
Extrema_PCFOfEPCOfExtPC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC2d_SquareDistance, None, Extrema_PCFOfEPCOfExtPC2d)
Extrema_PCFOfEPCOfExtPC2d.SubIntervalInitialize = new_instancemethod(_Extrema.Extrema_PCFOfEPCOfExtPC2d_SubIntervalInitialize, None, Extrema_PCFOfEPCOfExtPC2d)
Extrema_PCFOfEPCOfExtPC2d_swigregister = _Extrema.Extrema_PCFOfEPCOfExtPC2d_swigregister
Extrema_PCFOfEPCOfExtPC2d_swigregister(Extrema_PCFOfEPCOfExtPC2d)

class Extrema_PCLocFOfLocEPCOfLocateExtPC(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: None
        """
        _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_swiginit(self, _Extrema.new_Extrema_PCLocFOfLocEPCOfLocateExtPC(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the field mycurve of the function.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: None
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_Initialize(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Shows if the Nth distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the nunber of found extrema.
        	:rtype: int
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_NbExt(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv const &":
        """
        * Returns the Nth extremum.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_Point(self, *args)


    def SearchOfTolerance(self, *args) -> "Standard_Real":
        """
        * Computes a Tol value. If 1st derivative of curve |D1|<Tol, it is considered D1=0.
        	:rtype: float
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_SearchOfTolerance(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        * sets the field P of the function.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_SetPoint(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_SquareDistance(self, *args)


    def SubIntervalInitialize(self, *args) -> "void":
        """
        * Determines boundaries of subinterval for find of root.
        	:param theUfirst:
        	:type theUfirst: float
        	:param theUlast:
        	:type theUlast: float
        	:rtype: None
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_SubIntervalInitialize(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_PCLocFOfLocEPCOfLocateExtPC
Extrema_PCLocFOfLocEPCOfLocateExtPC.Initialize = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_Initialize, None, Extrema_PCLocFOfLocEPCOfLocateExtPC)
Extrema_PCLocFOfLocEPCOfLocateExtPC.IsMin = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_IsMin, None, Extrema_PCLocFOfLocEPCOfLocateExtPC)
Extrema_PCLocFOfLocEPCOfLocateExtPC.NbExt = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_NbExt, None, Extrema_PCLocFOfLocEPCOfLocateExtPC)
Extrema_PCLocFOfLocEPCOfLocateExtPC.Point = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_Point, None, Extrema_PCLocFOfLocEPCOfLocateExtPC)
Extrema_PCLocFOfLocEPCOfLocateExtPC.SearchOfTolerance = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_SearchOfTolerance, None, Extrema_PCLocFOfLocEPCOfLocateExtPC)
Extrema_PCLocFOfLocEPCOfLocateExtPC.SetPoint = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_SetPoint, None, Extrema_PCLocFOfLocEPCOfLocateExtPC)
Extrema_PCLocFOfLocEPCOfLocateExtPC.SquareDistance = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_SquareDistance, None, Extrema_PCLocFOfLocEPCOfLocateExtPC)
Extrema_PCLocFOfLocEPCOfLocateExtPC.SubIntervalInitialize = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_SubIntervalInitialize, None, Extrema_PCLocFOfLocEPCOfLocateExtPC)
Extrema_PCLocFOfLocEPCOfLocateExtPC_swigregister = _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC_swigregister
Extrema_PCLocFOfLocEPCOfLocateExtPC_swigregister(Extrema_PCLocFOfLocEPCOfLocateExtPC)

class Extrema_PCLocFOfLocEPCOfLocateExtPC2d(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: None
        """
        _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_swiginit(self, _Extrema.new_Extrema_PCLocFOfLocEPCOfLocateExtPC2d(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the field mycurve of the function.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: None
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_Initialize(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Shows if the Nth distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the nunber of found extrema.
        	:rtype: int
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_NbExt(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the Nth extremum.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv2d
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_Point(self, *args)


    def SearchOfTolerance(self, *args) -> "Standard_Real":
        """
        * Computes a Tol value. If 1st derivative of curve |D1|<Tol, it is considered D1=0.
        	:rtype: float
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_SearchOfTolerance(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        * sets the field P of the function.
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_SetPoint(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_SquareDistance(self, *args)


    def SubIntervalInitialize(self, *args) -> "void":
        """
        * Determines boundaries of subinterval for find of root.
        	:param theUfirst:
        	:type theUfirst: float
        	:param theUlast:
        	:type theUlast: float
        	:rtype: None
        """
        return _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_SubIntervalInitialize(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_PCLocFOfLocEPCOfLocateExtPC2d
Extrema_PCLocFOfLocEPCOfLocateExtPC2d.Initialize = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_Initialize, None, Extrema_PCLocFOfLocEPCOfLocateExtPC2d)
Extrema_PCLocFOfLocEPCOfLocateExtPC2d.IsMin = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_IsMin, None, Extrema_PCLocFOfLocEPCOfLocateExtPC2d)
Extrema_PCLocFOfLocEPCOfLocateExtPC2d.NbExt = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_NbExt, None, Extrema_PCLocFOfLocEPCOfLocateExtPC2d)
Extrema_PCLocFOfLocEPCOfLocateExtPC2d.Point = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_Point, None, Extrema_PCLocFOfLocEPCOfLocateExtPC2d)
Extrema_PCLocFOfLocEPCOfLocateExtPC2d.SearchOfTolerance = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_SearchOfTolerance, None, Extrema_PCLocFOfLocEPCOfLocateExtPC2d)
Extrema_PCLocFOfLocEPCOfLocateExtPC2d.SetPoint = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_SetPoint, None, Extrema_PCLocFOfLocEPCOfLocateExtPC2d)
Extrema_PCLocFOfLocEPCOfLocateExtPC2d.SquareDistance = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_SquareDistance, None, Extrema_PCLocFOfLocEPCOfLocateExtPC2d)
Extrema_PCLocFOfLocEPCOfLocateExtPC2d.SubIntervalInitialize = new_instancemethod(_Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_SubIntervalInitialize, None, Extrema_PCLocFOfLocEPCOfLocateExtPC2d)
Extrema_PCLocFOfLocEPCOfLocateExtPC2d_swigregister = _Extrema.Extrema_PCLocFOfLocEPCOfLocateExtPC2d_swigregister
Extrema_PCLocFOfLocEPCOfLocateExtPC2d_swigregister(Extrema_PCLocFOfLocEPCOfLocateExtPC2d)

class Extrema_POnCurv(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creation of an indefinite point on curve.
        	:rtype: None
        * Creation of a point on curve with a parameter value on the curve and a Pnt from gp.
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        _Extrema.Extrema_POnCurv_swiginit(self, _Extrema.new_Extrema_POnCurv(*args))

    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on the curve.
        	:rtype: float
        """
        return _Extrema.Extrema_POnCurv_Parameter(self, *args)


    def SetValues(self, *args) -> "void":
        """
        * sets the point and parameter values.
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_POnCurv_SetValues(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """
        * Returns the point.
        	:rtype: gp_Pnt
        """
        return _Extrema.Extrema_POnCurv_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_POnCurv
Extrema_POnCurv.Parameter = new_instancemethod(_Extrema.Extrema_POnCurv_Parameter, None, Extrema_POnCurv)
Extrema_POnCurv.SetValues = new_instancemethod(_Extrema.Extrema_POnCurv_SetValues, None, Extrema_POnCurv)
Extrema_POnCurv.Value = new_instancemethod(_Extrema.Extrema_POnCurv_Value, None, Extrema_POnCurv)
Extrema_POnCurv_swigregister = _Extrema.Extrema_POnCurv_swigregister
Extrema_POnCurv_swigregister(Extrema_POnCurv)

class Extrema_POnCurv2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creation of an indefinite point on curve.
        	:rtype: None
        * Creation of a point on curve with a parameter value on the curve and a Pnt from gp.
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        _Extrema.Extrema_POnCurv2d_swiginit(self, _Extrema.new_Extrema_POnCurv2d(*args))

    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on the curve.
        	:rtype: float
        """
        return _Extrema.Extrema_POnCurv2d_Parameter(self, *args)


    def SetValues(self, *args) -> "void":
        """
        * sets the point and parameter values.
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Extrema.Extrema_POnCurv2d_SetValues(self, *args)


    def Value(self, *args) -> "gp_Pnt2d const":
        """
        * Returns the point.
        	:rtype: gp_Pnt2d
        """
        return _Extrema.Extrema_POnCurv2d_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_POnCurv2d
Extrema_POnCurv2d.Parameter = new_instancemethod(_Extrema.Extrema_POnCurv2d_Parameter, None, Extrema_POnCurv2d)
Extrema_POnCurv2d.SetValues = new_instancemethod(_Extrema.Extrema_POnCurv2d_SetValues, None, Extrema_POnCurv2d)
Extrema_POnCurv2d.Value = new_instancemethod(_Extrema.Extrema_POnCurv2d_Value, None, Extrema_POnCurv2d)
Extrema_POnCurv2d_swigregister = _Extrema.Extrema_POnCurv2d_swigregister
Extrema_POnCurv2d_swigregister(Extrema_POnCurv2d)

class Extrema_POnSurf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creation of an indefinite point on surface.
        	:rtype: None
        * Creation of a point on surface with parameter values on the surface and a Pnt from gp.
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        _Extrema.Extrema_POnSurf_swiginit(self, _Extrema.new_Extrema_POnSurf(*args))

    def Parameter(self, *args) -> "void":
        """
        * Returns the parameter values on the surface.
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _Extrema.Extrema_POnSurf_Parameter(self, *args)


    def SetParameters(self, *args) -> "void":
        """
        * Sets the params of current POnSurf instance. (e.g. to the point to be projected).
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param thePnt:
        	:type thePnt: gp_Pnt
        	:rtype: None
        """
        return _Extrema.Extrema_POnSurf_SetParameters(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """
        * Returns the 3d point.
        	:rtype: gp_Pnt
        """
        return _Extrema.Extrema_POnSurf_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_POnSurf
Extrema_POnSurf.Parameter = new_instancemethod(_Extrema.Extrema_POnSurf_Parameter, None, Extrema_POnSurf)
Extrema_POnSurf.SetParameters = new_instancemethod(_Extrema.Extrema_POnSurf_SetParameters, None, Extrema_POnSurf)
Extrema_POnSurf.Value = new_instancemethod(_Extrema.Extrema_POnSurf_Value, None, Extrema_POnSurf)
Extrema_POnSurf_swigregister = _Extrema.Extrema_POnSurf_swigregister
Extrema_POnSurf_swigregister(Extrema_POnSurf)

class Extrema_POnSurfParams(Extrema_POnSurf):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * empty constructor
        	:rtype: None
        * Creation of a point on surface with parameter values on the surface and a Pnt from gp.
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param thePnt:
        	:type thePnt: gp_Pnt
        	:rtype: None
        """
        _Extrema.Extrema_POnSurfParams_swiginit(self, _Extrema.new_Extrema_POnSurfParams(*args))

    def GetElementType(self, *args) -> "Extrema_ElementType":
        """
        * Query the element type on which this point is situated.
        	:rtype: Extrema_ElementType
        """
        return _Extrema.Extrema_POnSurfParams_GetElementType(self, *args)


    def GetIndices(self, *args) -> "void":
        """
        * Query the U and V indices of an element that contains this point.
        	:param theIndexU:
        	:type theIndexU: int
        	:param theIndexV:
        	:type theIndexV: int
        	:rtype: None
        """
        return _Extrema.Extrema_POnSurfParams_GetIndices(self, *args)


    def GetSqrDistance(self, *args) -> "Standard_Real":
        """
        * Query the square distance from this point to another one.
        	:rtype: float
        """
        return _Extrema.Extrema_POnSurfParams_GetSqrDistance(self, *args)


    def SetElementType(self, *args) -> "void":
        """
        * Sets the element type on which this point is situated.
        	:param theElementType:
        	:type theElementType: Extrema_ElementType
        	:rtype: None
        """
        return _Extrema.Extrema_POnSurfParams_SetElementType(self, *args)


    def SetIndices(self, *args) -> "void":
        """
        * Sets the U and V indices of an element that contains this point.
        	:param theIndexU:
        	:type theIndexU: int
        	:param theIndexV:
        	:type theIndexV: int
        	:rtype: None
        """
        return _Extrema.Extrema_POnSurfParams_SetIndices(self, *args)


    def SetSqrDistance(self, *args) -> "void":
        """
        * Sets the square distance from this point to another one (e.g. to the point to be projected).
        	:param theSqrDistance:
        	:type theSqrDistance: float
        	:rtype: None
        """
        return _Extrema.Extrema_POnSurfParams_SetSqrDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Extrema.delete_Extrema_POnSurfParams
Extrema_POnSurfParams.GetElementType = new_instancemethod(_Extrema.Extrema_POnSurfParams_GetElementType, None, Extrema_POnSurfParams)
Extrema_POnSurfParams.GetIndices = new_instancemethod(_Extrema.Extrema_POnSurfParams_GetIndices, None, Extrema_POnSurfParams)
Extrema_POnSurfParams.GetSqrDistance = new_instancemethod(_Extrema.Extrema_POnSurfParams_GetSqrDistance, None, Extrema_POnSurfParams)
Extrema_POnSurfParams.SetElementType = new_instancemethod(_Extrema.Extrema_POnSurfParams_SetElementType, None, Extrema_POnSurfParams)
Extrema_POnSurfParams.SetIndices = new_instancemethod(_Extrema.Extrema_POnSurfParams_SetIndices, None, Extrema_POnSurfParams)
Extrema_POnSurfParams.SetSqrDistance = new_instancemethod(_Extrema.Extrema_POnSurfParams_SetSqrDistance, None, Extrema_POnSurfParams)
Extrema_POnSurfParams_swigregister = _Extrema.Extrema_POnSurfParams_swigregister
Extrema_POnSurfParams_swigregister(Extrema_POnSurfParams)

class Extrema_HArray1OfPOnSurf(Extrema_Array1OfPOnSurf, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_HArray1OfPOnSurf_swiginit(self, _Extrema.new_Extrema_HArray1OfPOnSurf(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Extrema_HArray1OfPOnSurf_DownCast(t)

    __swig_destroy__ = _Extrema.delete_Extrema_HArray1OfPOnSurf
Extrema_HArray1OfPOnSurf.Array1 = new_instancemethod(_Extrema.Extrema_HArray1OfPOnSurf_Array1, None, Extrema_HArray1OfPOnSurf)
Extrema_HArray1OfPOnSurf.ChangeArray1 = new_instancemethod(_Extrema.Extrema_HArray1OfPOnSurf_ChangeArray1, None, Extrema_HArray1OfPOnSurf)
Extrema_HArray1OfPOnSurf_swigregister = _Extrema.Extrema_HArray1OfPOnSurf_swigregister
Extrema_HArray1OfPOnSurf_swigregister(Extrema_HArray1OfPOnSurf)

class Extrema_HArray1OfPOnCurv(Extrema_Array1OfPOnCurv, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_HArray1OfPOnCurv_swiginit(self, _Extrema.new_Extrema_HArray1OfPOnCurv(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Extrema_HArray1OfPOnCurv_DownCast(t)

    __swig_destroy__ = _Extrema.delete_Extrema_HArray1OfPOnCurv
Extrema_HArray1OfPOnCurv.Array1 = new_instancemethod(_Extrema.Extrema_HArray1OfPOnCurv_Array1, None, Extrema_HArray1OfPOnCurv)
Extrema_HArray1OfPOnCurv.ChangeArray1 = new_instancemethod(_Extrema.Extrema_HArray1OfPOnCurv_ChangeArray1, None, Extrema_HArray1OfPOnCurv)
Extrema_HArray1OfPOnCurv_swigregister = _Extrema.Extrema_HArray1OfPOnCurv_swigregister
Extrema_HArray1OfPOnCurv_swigregister(Extrema_HArray1OfPOnCurv)

class Extrema_HArray1OfPOnCurv2d(Extrema_Array1OfPOnCurv2d, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_HArray1OfPOnCurv2d_swiginit(self, _Extrema.new_Extrema_HArray1OfPOnCurv2d(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Extrema_HArray1OfPOnCurv2d_DownCast(t)

    __swig_destroy__ = _Extrema.delete_Extrema_HArray1OfPOnCurv2d
Extrema_HArray1OfPOnCurv2d.Array1 = new_instancemethod(_Extrema.Extrema_HArray1OfPOnCurv2d_Array1, None, Extrema_HArray1OfPOnCurv2d)
Extrema_HArray1OfPOnCurv2d.ChangeArray1 = new_instancemethod(_Extrema.Extrema_HArray1OfPOnCurv2d_ChangeArray1, None, Extrema_HArray1OfPOnCurv2d)
Extrema_HArray1OfPOnCurv2d_swigregister = _Extrema.Extrema_HArray1OfPOnCurv2d_swigregister
Extrema_HArray1OfPOnCurv2d_swigregister(Extrema_HArray1OfPOnCurv2d)

class Extrema_HArray2OfPOnCurv2d(Extrema_Array2OfPOnCurv2d, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_HArray2OfPOnCurv2d_swiginit(self, _Extrema.new_Extrema_HArray2OfPOnCurv2d(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Extrema_HArray2OfPOnCurv2d_DownCast(t)

    __swig_destroy__ = _Extrema.delete_Extrema_HArray2OfPOnCurv2d
Extrema_HArray2OfPOnCurv2d.Array2 = new_instancemethod(_Extrema.Extrema_HArray2OfPOnCurv2d_Array2, None, Extrema_HArray2OfPOnCurv2d)
Extrema_HArray2OfPOnCurv2d.ChangeArray2 = new_instancemethod(_Extrema.Extrema_HArray2OfPOnCurv2d_ChangeArray2, None, Extrema_HArray2OfPOnCurv2d)
Extrema_HArray2OfPOnCurv2d_swigregister = _Extrema.Extrema_HArray2OfPOnCurv2d_swigregister
Extrema_HArray2OfPOnCurv2d_swigregister(Extrema_HArray2OfPOnCurv2d)

class Extrema_HArray2OfPOnCurv(Extrema_Array2OfPOnCurv, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_HArray2OfPOnCurv_swiginit(self, _Extrema.new_Extrema_HArray2OfPOnCurv(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Extrema_HArray2OfPOnCurv_DownCast(t)

    __swig_destroy__ = _Extrema.delete_Extrema_HArray2OfPOnCurv
Extrema_HArray2OfPOnCurv.Array2 = new_instancemethod(_Extrema.Extrema_HArray2OfPOnCurv_Array2, None, Extrema_HArray2OfPOnCurv)
Extrema_HArray2OfPOnCurv.ChangeArray2 = new_instancemethod(_Extrema.Extrema_HArray2OfPOnCurv_ChangeArray2, None, Extrema_HArray2OfPOnCurv)
Extrema_HArray2OfPOnCurv_swigregister = _Extrema.Extrema_HArray2OfPOnCurv_swigregister
Extrema_HArray2OfPOnCurv_swigregister(Extrema_HArray2OfPOnCurv)

class Extrema_HArray2OfPOnSurf(Extrema_Array2OfPOnSurf, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_HArray2OfPOnSurf_swiginit(self, _Extrema.new_Extrema_HArray2OfPOnSurf(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Extrema_HArray2OfPOnSurf_DownCast(t)

    __swig_destroy__ = _Extrema.delete_Extrema_HArray2OfPOnSurf
Extrema_HArray2OfPOnSurf.Array2 = new_instancemethod(_Extrema.Extrema_HArray2OfPOnSurf_Array2, None, Extrema_HArray2OfPOnSurf)
Extrema_HArray2OfPOnSurf.ChangeArray2 = new_instancemethod(_Extrema.Extrema_HArray2OfPOnSurf_ChangeArray2, None, Extrema_HArray2OfPOnSurf)
Extrema_HArray2OfPOnSurf_swigregister = _Extrema.Extrema_HArray2OfPOnSurf_swigregister
Extrema_HArray2OfPOnSurf_swigregister(Extrema_HArray2OfPOnSurf)

class Extrema_HArray2OfPOnSurfParams(Extrema_Array2OfPOnSurfParams, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Extrema.Extrema_HArray2OfPOnSurfParams_swiginit(self, _Extrema.new_Extrema_HArray2OfPOnSurfParams(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Extrema_HArray2OfPOnSurfParams_DownCast(t)

    __swig_destroy__ = _Extrema.delete_Extrema_HArray2OfPOnSurfParams
Extrema_HArray2OfPOnSurfParams.Array2 = new_instancemethod(_Extrema.Extrema_HArray2OfPOnSurfParams_Array2, None, Extrema_HArray2OfPOnSurfParams)
Extrema_HArray2OfPOnSurfParams.ChangeArray2 = new_instancemethod(_Extrema.Extrema_HArray2OfPOnSurfParams_ChangeArray2, None, Extrema_HArray2OfPOnSurfParams)
Extrema_HArray2OfPOnSurfParams_swigregister = _Extrema.Extrema_HArray2OfPOnSurfParams_swigregister
Extrema_HArray2OfPOnSurfParams_swigregister(Extrema_HArray2OfPOnSurfParams)



