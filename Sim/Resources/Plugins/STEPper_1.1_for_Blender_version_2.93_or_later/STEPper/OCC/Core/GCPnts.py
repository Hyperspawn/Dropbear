# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GCPnts module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_gcpnts.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GCPnts.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GCPnts')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GCPnts')
    _GCPnts = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GCPnts', [dirname(__file__)])
        except ImportError:
            import _GCPnts
            return _GCPnts
        try:
            _mod = imp.load_module('_GCPnts', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GCPnts = swig_import_helper()
    del swig_import_helper
else:
    import _GCPnts
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GCPnts.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GCPnts.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GCPnts.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GCPnts.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GCPnts.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GCPnts.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GCPnts.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GCPnts.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GCPnts.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GCPnts.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GCPnts.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GCPnts.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GCPnts.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GCPnts.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GCPnts.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GCPnts.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GCPnts.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GCPnts.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GCPnts.process_exception(error, method_name, class_name)
process_exception = _GCPnts.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
GCPnts_Linear = _GCPnts.GCPnts_Linear
GCPnts_Circular = _GCPnts.GCPnts_Circular
GCPnts_Curved = _GCPnts.GCPnts_Curved
GCPnts_DefComposite = _GCPnts.GCPnts_DefComposite
GCPnts_LengthParametrized = _GCPnts.GCPnts_LengthParametrized
GCPnts_Parametrized = _GCPnts.GCPnts_Parametrized
GCPnts_AbsComposite = _GCPnts.GCPnts_AbsComposite
class GCPnts_AbscissaPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0> with the given tolerance.
        	:param Tol:
        	:type Tol: float
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0> with the given tolerance.
        	:param Tol:
        	:type Tol: float
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Ui> is the starting value used in the iterative process which find the solution, it must be close to the final solution
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Ui:
        	:type Ui: float
        	:rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Ui> is the starting value used in the iterative process which find the solution, it must be closed to the final solution
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Ui:
        	:type Ui: float
        	:rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Ui> is the starting value used in the iterative process which find the solution, it must be close to the final solution
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Ui:
        	:type Ui: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Ui> is the starting value used in the iterative process which find the solution, it must be close to the final solution
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Ui:
        	:type Ui: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _GCPnts.GCPnts_AbscissaPoint_swiginit(self, _GCPnts.new_GCPnts_AbscissaPoint(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the computation was successful, False otherwise. IsDone is a protection against: - non-convergence of the algorithm - querying the results before computation.
        	:rtype: bool
        """
        return _GCPnts.GCPnts_AbscissaPoint_IsDone(self, *args)


    def Length(*args) -> "Standard_Real":
        """
        * Computes the length of the Curve <C>.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: float
        * Computes the length of the Curve <C>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: float
        * Computes the length of the Curve <C> with the given tolerance.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Tol:
        	:type Tol: float
        	:rtype: float
        * Computes the length of the Curve <C> with the given tolerance.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Tol:
        	:type Tol: float
        	:rtype: float
        * Computes the length of the Curve <C>.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: float
        * Computes the length of the Curve <C>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: float
        * Computes the length of the Curve <C> with the given tolerance.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Tol:
        	:type Tol: float
        	:rtype: float
        * Computes the length of the Curve <C> with the given tolerance. Constructs an empty algorithm. This function is used only for initializing a framework to compute the length of a curve (or a series of curves). Warning The function IsDone will return the value false after the use of this function.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Tol:
        	:type Tol: float
        	:rtype: float
        """
        return _GCPnts.GCPnts_AbscissaPoint_Length(*args)

    Length = staticmethod(Length)

    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on the curve of the point solution of this algorithm. Exceptions StdFail_NotDone if the computation was not successful, or was not done.
        	:rtype: float
        """
        return _GCPnts.GCPnts_AbscissaPoint_Parameter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GCPnts.delete_GCPnts_AbscissaPoint
GCPnts_AbscissaPoint.IsDone = new_instancemethod(_GCPnts.GCPnts_AbscissaPoint_IsDone, None, GCPnts_AbscissaPoint)
GCPnts_AbscissaPoint.Parameter = new_instancemethod(_GCPnts.GCPnts_AbscissaPoint_Parameter, None, GCPnts_AbscissaPoint)
GCPnts_AbscissaPoint_swigregister = _GCPnts.GCPnts_AbscissaPoint_swigregister
GCPnts_AbscissaPoint_swigregister(GCPnts_AbscissaPoint)

def GCPnts_AbscissaPoint_Length(*args) -> "Standard_Real":
    """
    * Computes the length of the Curve <C>.
    	:param C:
    	:type C: Adaptor3d_Curve
    	:rtype: float
    * Computes the length of the Curve <C>.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: float
    * Computes the length of the Curve <C> with the given tolerance.
    	:param C:
    	:type C: Adaptor3d_Curve
    	:param Tol:
    	:type Tol: float
    	:rtype: float
    * Computes the length of the Curve <C> with the given tolerance.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param Tol:
    	:type Tol: float
    	:rtype: float
    * Computes the length of the Curve <C>.
    	:param C:
    	:type C: Adaptor3d_Curve
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:rtype: float
    * Computes the length of the Curve <C>.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:rtype: float
    * Computes the length of the Curve <C> with the given tolerance.
    	:param C:
    	:type C: Adaptor3d_Curve
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:param Tol:
    	:type Tol: float
    	:rtype: float
    * Computes the length of the Curve <C> with the given tolerance. Constructs an empty algorithm. This function is used only for initializing a framework to compute the length of a curve (or a series of curves). Warning The function IsDone will return the value false after the use of this function.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:param Tol:
    	:type Tol: float
    	:rtype: float
    """
    return _GCPnts.GCPnts_AbscissaPoint_Length(*args)

class GCPnts_DistFunction2dMV(OCC.Core.math.math_MultipleVarFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theCurvLinDist:
        	:type theCurvLinDist: GCPnts_DistFunction2d
        	:rtype: None
        """
        _GCPnts.GCPnts_DistFunction2dMV_swiginit(self, _GCPnts.new_GCPnts_DistFunction2dMV(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GCPnts.delete_GCPnts_DistFunction2dMV
GCPnts_DistFunction2dMV_swigregister = _GCPnts.GCPnts_DistFunction2dMV_swigregister
GCPnts_DistFunction2dMV_swigregister(GCPnts_DistFunction2dMV)

class GCPnts_DistFunctionMV(OCC.Core.math.math_MultipleVarFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theCurvLinDist:
        	:type theCurvLinDist: GCPnts_DistFunction
        	:rtype: None
        """
        _GCPnts.GCPnts_DistFunctionMV_swiginit(self, _GCPnts.new_GCPnts_DistFunctionMV(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GCPnts.delete_GCPnts_DistFunctionMV
GCPnts_DistFunctionMV_swigregister = _GCPnts.GCPnts_DistFunctionMV_swigregister
GCPnts_DistFunctionMV_swigregister(GCPnts_DistFunctionMV)

class GCPnts_QuasiUniformAbscissa(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty algorithm. To define the problem to be solved, use the function Initialize.
        	:rtype: None
        * Computes a uniform abscissa distribution of points - on the curve C where Abscissa is the curvilinear distance between two consecutive points of the distribution.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbPoints:
        	:type NbPoints: int
        	:rtype: None
        * Computes a uniform abscissa distribution of points on the part of curve C limited by the two parameter values U1 and U2, where Abscissa is the curvilinear distance between two consecutive points of the distribution. The first point of the distribution is either the origin of curve C or the point of parameter U1. The following points are computed such that the curvilinear distance between two consecutive points is equal to Abscissa. The last point of the distribution is either the end point of curve C or the point of parameter U2. However the curvilinear distance between this last point and the point just preceding it in the distribution is, of course, generally not equal to Abscissa. Use the function IsDone to verify that the computation was successful, the function NbPoints to obtain the number of points of the computed distribution, and the function Parameter to read the parameter of each point. Warning The roles of U1 and U2 are inverted if U1 > U2 . Warning C is an adapted curve, that is, an object which is an interface between: - the services provided by either a 2D curve from the package Geom2d (in the case of an Adaptor2d_Curve2d curve) or a 3D curve from the package Geom (in the case of an Adaptor3d_Curve curve), - and those required on the curve by the computation algorithm.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbPoints:
        	:type NbPoints: int
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None
        * Computes a uniform abscissa distribution of points on the Curve2d <C>. <NbPoints> defines the nomber of desired points.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbPoints:
        	:type NbPoints: int
        	:rtype: None
        * Computes a Uniform abscissa distribution of points on a part of the Curve2d <C>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbPoints:
        	:type NbPoints: int
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None
        """
        _GCPnts.GCPnts_QuasiUniformAbscissa_swiginit(self, _GCPnts.new_GCPnts_QuasiUniformAbscissa(*args))

    def Initialize(self, *args) -> "void":
        """
        * Initialize the algoritms with <C>, <NbPoints> and
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbPoints:
        	:type NbPoints: int
        	:rtype: None
        * Initialize the algoritms with <C>, <Abscissa>, <U1>, <U2>.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbPoints:
        	:type NbPoints: int
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None
        * Initialize the algoritms with <C>, <NbPoints> and
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbPoints:
        	:type NbPoints: int
        	:rtype: None
        * Initialize the algoritms with <C>, <Abscissa>, <U1>, <U2>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbPoints:
        	:type NbPoints: int
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None
        """
        return _GCPnts.GCPnts_QuasiUniformAbscissa_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the computation was successful. IsDone is a protection against: - non-convergence of the algorithm - querying the results before computation.
        	:rtype: bool
        """
        return _GCPnts.GCPnts_QuasiUniformAbscissa_IsDone(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points of the distribution computed by this algorithm. This value is either: - the one imposed on the algorithm at the time of construction (or initialization), or - the one computed by the algorithm when the curvilinear distance between two consecutive points of the distribution is imposed on the algorithm at the time of construction (or initialization). Exceptions StdFail_NotDone if this algorithm has not been initialized, or if the computation was not successful.
        	:rtype: int
        """
        return _GCPnts.GCPnts_QuasiUniformAbscissa_NbPoints(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter of the point of index Index in the distribution computed by this algorithm. Warning Index must be greater than or equal to 1, and less than or equal to the number of points of the distribution. However, pay particular attention as this condition is not checked by this function. Exceptions StdFail_NotDone if this algorithm has not been initialized, or if the computation was not successful.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GCPnts.GCPnts_QuasiUniformAbscissa_Parameter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GCPnts.delete_GCPnts_QuasiUniformAbscissa
GCPnts_QuasiUniformAbscissa.Initialize = new_instancemethod(_GCPnts.GCPnts_QuasiUniformAbscissa_Initialize, None, GCPnts_QuasiUniformAbscissa)
GCPnts_QuasiUniformAbscissa.IsDone = new_instancemethod(_GCPnts.GCPnts_QuasiUniformAbscissa_IsDone, None, GCPnts_QuasiUniformAbscissa)
GCPnts_QuasiUniformAbscissa.NbPoints = new_instancemethod(_GCPnts.GCPnts_QuasiUniformAbscissa_NbPoints, None, GCPnts_QuasiUniformAbscissa)
GCPnts_QuasiUniformAbscissa.Parameter = new_instancemethod(_GCPnts.GCPnts_QuasiUniformAbscissa_Parameter, None, GCPnts_QuasiUniformAbscissa)
GCPnts_QuasiUniformAbscissa_swigregister = _GCPnts.GCPnts_QuasiUniformAbscissa_swigregister
GCPnts_QuasiUniformAbscissa_swigregister(GCPnts_QuasiUniformAbscissa)

class GCPnts_QuasiUniformDeflection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Deflection(self, *args) -> "Standard_Real":
        """
        * Returns the deflection between the curve and the polygon resulting from the points of the distribution computed by this algorithm. This is the value given to the algorithm at the time of construction (or initialization). Exceptions StdFail_NotDone if this algorithm has not been initialized, or if the computation was not successful.
        	:rtype: float
        """
        return _GCPnts.GCPnts_QuasiUniformDeflection_Deflection(self, *args)


    def __init__(self, *args):
        """
        * Constructs an empty algorithm. To define the problem to be solved, use the function Initialize.
        	:rtype: None
        * Computes a QuasiUniform Deflection distribution of points on the Curve <C>.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:rtype: None
        * Computes a QuasiUniform Deflection distribution of points on the Curve <C>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:rtype: None
        * Computes a QuasiUniform Deflection distribution of points on a part of the Curve <C>.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:rtype: None
        * Computes a QuasiUniform Deflection distribution of points on a part of the Curve <C>. This and the above algorithms compute a distribution of points: - on the curve C, or - on the part of curve C limited by the two parameter values U1 and U2, where the deflection resulting from the distributed points is not greater than Deflection. The first point of the distribution is either the origin of curve C or the point of parameter U1. The last point of the distribution is either the end point of curve C or the point of parameter U2. Intermediate points of the distribution are built such that the deflection is not greater than Deflection. Using the following evaluation of the deflection: if Pi and Pj are two consecutive points of the distribution, respectively of parameter ui and uj on the curve, the deflection is the distance between: - the mid-point of Pi and Pj (the center of the chord joining these two points) - and the point of mid-parameter of these two points (the point of parameter [(ui+uj) / 2 ] on curve C). Continuity, defaulted to GeomAbs_C1, gives the degree of continuity of the curve C. (Note that C is an Adaptor3d_Curve or an Adaptor2d_Curve2d object, and does not know the degree of continuity of the underlying curve). Use the function IsDone to verify that the computation was successful, the function NbPoints to obtain the number of points of the computed distribution, and the function Parameter to read the parameter of each point. Warning - The roles of U1 and U2 are inverted if U1 > U2. - Derivative functions on the curve are called according to Continuity. An error may occur if Continuity is greater than the real degree of continuity of the curve. Warning C is an adapted curve, i.e. an object which is an interface between: - the services provided by either a 2D curve from the package Geom2d (in the case of an Adaptor2d_Curve2d curve) or a 3D curve from the package Geom (in the case of an Adaptor3d_Curve curve), - and those required on the curve by the computation algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:rtype: None
        """
        _GCPnts.GCPnts_QuasiUniformDeflection_swiginit(self, _GCPnts.new_GCPnts_QuasiUniformDeflection(*args))

    def Initialize(self, *args) -> "void":
        """
        * Initialize the algoritms with <C>, <Deflection>
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:rtype: None
        * Initialize the algoritms with <C>, <Deflection>
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:rtype: None
        * Initialize the algoritms with <C>, <Deflection>, <U1>,<U2>
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:rtype: None
        * Initialize the algoritms with <C>, <Deflection>, -- <U1>,<U2> This and the above algorithms initialize (or reinitialize) this algorithm and compute a distribution of points: - on the curve C, or - on the part of curve C limited by the two parameter values U1 and U2, where the deflection resulting from the distributed points is not greater than Deflection. The first point of the distribution is either the origin of curve C or the point of parameter U1. The last point of the distribution is either the end point of curve C or the point of parameter U2. Intermediate points of the distribution are built in such a way that the deflection is not greater than Deflection. Using the following evaluation of the deflection: if Pi and Pj are two consecutive points of the distribution, respectively of parameter ui and uj on the curve, the deflection is the distance between: - the mid-point of Pi and Pj (the center of the chord joining these two points) - and the point of mid-parameter of these two points (the point of parameter [(ui+uj) / 2 ] on curve C). Continuity, defaulted to GeomAbs_C1, gives the degree of continuity of the curve C. (Note that C is an Adaptor3d_Curve or an Adaptor2d_Curve2d object, and does not know the degree of continuity of the underlying curve). Use the function IsDone to verify that the computation was successful, the function NbPoints to obtain the number of points of the computed distribution, and the function Parameter to read the parameter of each point. Warning - The roles of U1 and U2 are inverted if U1 > U2. - Derivative functions on the curve are called according to Continuity. An error may occur if Continuity is greater than the real degree of continuity of the curve. Warning C is an adapted curve, i.e. an object which is an interface between: - the services provided by either a 2D curve from the package Geom2d (in the case of an Adaptor2d_Curve2d curve) or a 3D curve from the package Geom (in the case of an Adaptor3d_Curve curve), and those required on the curve by the computation algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:rtype: None
        """
        return _GCPnts.GCPnts_QuasiUniformDeflection_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the computation was successful. IsDone is a protection against: - non-convergence of the algorithm - querying the results before computation.
        	:rtype: bool
        """
        return _GCPnts.GCPnts_QuasiUniformDeflection_IsDone(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points of the distribution computed by this algorithm. Exceptions StdFail_NotDone if this algorithm has not been initialized, or if the computation was not successful.
        	:rtype: int
        """
        return _GCPnts.GCPnts_QuasiUniformDeflection_NbPoints(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter of the point of index Index in the distribution computed by this algorithm. Warning Index must be greater than or equal to 1, and less than or equal to the number of points of the distribution. However, pay particular attention as this condition is not checked by this function. Exceptions StdFail_NotDone if this algorithm has not been initialized, or if the computation was not successful.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GCPnts.GCPnts_QuasiUniformDeflection_Parameter(self, *args)


    def Value(self, *args) -> "gp_Pnt":
        """
        * Returns the point of index Index in the distribution computed by this algorithm. Warning Index must be greater than or equal to 1, and less than or equal to the number of points of the distribution. However, pay particular attention as this condition is not checked by this function. Exceptions StdFail_NotDone if this algorithm has not been initialized, or if the computation was not successful.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Pnt
        """
        return _GCPnts.GCPnts_QuasiUniformDeflection_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GCPnts.delete_GCPnts_QuasiUniformDeflection
GCPnts_QuasiUniformDeflection.Deflection = new_instancemethod(_GCPnts.GCPnts_QuasiUniformDeflection_Deflection, None, GCPnts_QuasiUniformDeflection)
GCPnts_QuasiUniformDeflection.Initialize = new_instancemethod(_GCPnts.GCPnts_QuasiUniformDeflection_Initialize, None, GCPnts_QuasiUniformDeflection)
GCPnts_QuasiUniformDeflection.IsDone = new_instancemethod(_GCPnts.GCPnts_QuasiUniformDeflection_IsDone, None, GCPnts_QuasiUniformDeflection)
GCPnts_QuasiUniformDeflection.NbPoints = new_instancemethod(_GCPnts.GCPnts_QuasiUniformDeflection_NbPoints, None, GCPnts_QuasiUniformDeflection)
GCPnts_QuasiUniformDeflection.Parameter = new_instancemethod(_GCPnts.GCPnts_QuasiUniformDeflection_Parameter, None, GCPnts_QuasiUniformDeflection)
GCPnts_QuasiUniformDeflection.Value = new_instancemethod(_GCPnts.GCPnts_QuasiUniformDeflection_Value, None, GCPnts_QuasiUniformDeflection)
GCPnts_QuasiUniformDeflection_swigregister = _GCPnts.GCPnts_QuasiUniformDeflection_swigregister
GCPnts_QuasiUniformDeflection_swigregister(GCPnts_QuasiUniformDeflection)

class GCPnts_TangentialDeflection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddPoint(self, *args) -> "Standard_Integer":
        """
        * Add point to already calculated points (or replace existing) Returns index of new added point or founded with parametric tolerance (replaced if theIsReplace is true)
        	:param thePnt:
        	:type thePnt: gp_Pnt
        	:param theParam:
        	:type theParam: float
        	:param theIsReplace: default value is Standard_True
        	:type theIsReplace: bool
        	:rtype: int
        """
        return _GCPnts.GCPnts_TangentialDeflection_AddPoint(self, *args)


    def ArcAngularStep(*args) -> "Standard_Real":
        """
        * Computes angular step for the arc using the given parameters.
        	:param theRadius:
        	:type theRadius: float
        	:param theLinearDeflection:
        	:type theLinearDeflection: float
        	:param theAngularDeflection:
        	:type theAngularDeflection: float
        	:param theMinLength:
        	:type theMinLength: float
        	:rtype: float
        """
        return _GCPnts.GCPnts_TangentialDeflection_ArcAngularStep(*args)

    ArcAngularStep = staticmethod(ArcAngularStep)

    def __init__(self, *args):
        """
        :rtype: None
        :param C:
        	:type C: Adaptor3d_Curve
        	:param AngularDeflection:
        	:type AngularDeflection: float
        	:param CurvatureDeflection:
        	:type CurvatureDeflection: float
        	:param MinimumOfPoints: default value is 2
        	:type MinimumOfPoints: int
        	:param UTol: default value is 1.0e-9
        	:type UTol: float
        	:param theMinLen: default value is 1.0e-7
        	:type theMinLen: float
        	:rtype: None
        :param C:
        	:type C: Adaptor3d_Curve
        	:param FirstParameter:
        	:type FirstParameter: float
        	:param LastParameter:
        	:type LastParameter: float
        	:param AngularDeflection:
        	:type AngularDeflection: float
        	:param CurvatureDeflection:
        	:type CurvatureDeflection: float
        	:param MinimumOfPoints: default value is 2
        	:type MinimumOfPoints: int
        	:param UTol: default value is 1.0e-9
        	:type UTol: float
        	:param theMinLen: default value is 1.0e-7
        	:type theMinLen: float
        	:rtype: None
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param AngularDeflection:
        	:type AngularDeflection: float
        	:param CurvatureDeflection:
        	:type CurvatureDeflection: float
        	:param MinimumOfPoints: default value is 2
        	:type MinimumOfPoints: int
        	:param UTol: default value is 1.0e-9
        	:type UTol: float
        	:param theMinLen: default value is 1.0e-7
        	:type theMinLen: float
        	:rtype: None
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param FirstParameter:
        	:type FirstParameter: float
        	:param LastParameter:
        	:type LastParameter: float
        	:param AngularDeflection:
        	:type AngularDeflection: float
        	:param CurvatureDeflection:
        	:type CurvatureDeflection: float
        	:param MinimumOfPoints: default value is 2
        	:type MinimumOfPoints: int
        	:param UTol: default value is 1.0e-9
        	:type UTol: float
        	:param theMinLen: default value is 1.0e-7
        	:type theMinLen: float
        	:rtype: None
        """
        _GCPnts.GCPnts_TangentialDeflection_swiginit(self, _GCPnts.new_GCPnts_TangentialDeflection(*args))

    def Initialize(self, *args) -> "void":
        """
        :param C:
        	:type C: Adaptor3d_Curve
        	:param AngularDeflection:
        	:type AngularDeflection: float
        	:param CurvatureDeflection:
        	:type CurvatureDeflection: float
        	:param MinimumOfPoints: default value is 2
        	:type MinimumOfPoints: int
        	:param UTol: default value is 1.0e-9
        	:type UTol: float
        	:param theMinLen: default value is 1.0e-7
        	:type theMinLen: float
        	:rtype: None
        :param C:
        	:type C: Adaptor3d_Curve
        	:param FirstParameter:
        	:type FirstParameter: float
        	:param LastParameter:
        	:type LastParameter: float
        	:param AngularDeflection:
        	:type AngularDeflection: float
        	:param CurvatureDeflection:
        	:type CurvatureDeflection: float
        	:param MinimumOfPoints: default value is 2
        	:type MinimumOfPoints: int
        	:param UTol: default value is 1.0e-9
        	:type UTol: float
        	:param theMinLen: default value is 1.0e-7
        	:type theMinLen: float
        	:rtype: None
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param AngularDeflection:
        	:type AngularDeflection: float
        	:param CurvatureDeflection:
        	:type CurvatureDeflection: float
        	:param MinimumOfPoints: default value is 2
        	:type MinimumOfPoints: int
        	:param UTol: default value is 1.0e-9
        	:type UTol: float
        	:param theMinLen: default value is 1.0e-7
        	:type theMinLen: float
        	:rtype: None
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param FirstParameter:
        	:type FirstParameter: float
        	:param LastParameter:
        	:type LastParameter: float
        	:param AngularDeflection:
        	:type AngularDeflection: float
        	:param CurvatureDeflection:
        	:type CurvatureDeflection: float
        	:param MinimumOfPoints: default value is 2
        	:type MinimumOfPoints: int
        	:param UTol: default value is 1.0e-9
        	:type UTol: float
        	:param theMinLen: default value is 1.0e-7
        	:type theMinLen: float
        	:rtype: None
        """
        return _GCPnts.GCPnts_TangentialDeflection_Initialize(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _GCPnts.GCPnts_TangentialDeflection_NbPoints(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        :param I:
        	:type I: int
        	:rtype: float
        """
        return _GCPnts.GCPnts_TangentialDeflection_Parameter(self, *args)


    def Value(self, *args) -> "gp_Pnt":
        """
        :param I:
        	:type I: int
        	:rtype: gp_Pnt
        """
        return _GCPnts.GCPnts_TangentialDeflection_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GCPnts.delete_GCPnts_TangentialDeflection
GCPnts_TangentialDeflection.AddPoint = new_instancemethod(_GCPnts.GCPnts_TangentialDeflection_AddPoint, None, GCPnts_TangentialDeflection)
GCPnts_TangentialDeflection.Initialize = new_instancemethod(_GCPnts.GCPnts_TangentialDeflection_Initialize, None, GCPnts_TangentialDeflection)
GCPnts_TangentialDeflection.NbPoints = new_instancemethod(_GCPnts.GCPnts_TangentialDeflection_NbPoints, None, GCPnts_TangentialDeflection)
GCPnts_TangentialDeflection.Parameter = new_instancemethod(_GCPnts.GCPnts_TangentialDeflection_Parameter, None, GCPnts_TangentialDeflection)
GCPnts_TangentialDeflection.Value = new_instancemethod(_GCPnts.GCPnts_TangentialDeflection_Value, None, GCPnts_TangentialDeflection)
GCPnts_TangentialDeflection_swigregister = _GCPnts.GCPnts_TangentialDeflection_swigregister
GCPnts_TangentialDeflection_swigregister(GCPnts_TangentialDeflection)

def GCPnts_TangentialDeflection_ArcAngularStep(*args) -> "Standard_Real":
    """
    * Computes angular step for the arc using the given parameters.
    	:param theRadius:
    	:type theRadius: float
    	:param theLinearDeflection:
    	:type theLinearDeflection: float
    	:param theAngularDeflection:
    	:type theAngularDeflection: float
    	:param theMinLength:
    	:type theMinLength: float
    	:rtype: float
    """
    return _GCPnts.GCPnts_TangentialDeflection_ArcAngularStep(*args)

class GCPnts_UniformAbscissa(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Abscissa(self, *args) -> "Standard_Real":
        """
        * returne the current abscissa ie the distance between two consecutive points
        	:rtype: float
        """
        return _GCPnts.GCPnts_UniformAbscissa_Abscissa(self, *args)


    def __init__(self, *args):
        """
        * creation of a indefinite UniformAbscissa
        	:rtype: None
        * Computes a uniform abscissa distribution of points on the Curve <C>. Parameter Toler is equal Precision::Confusion by default. It Is used for more precise calculation of curve length
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Computes a Uniform abscissa distribution of points on a part of the Curve <C>. Parameter Toler is equal Precision::Confusion by default. It Is used for more precise calculation of curve length
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Computes a uniform abscissa distribution of points on the Curve <C>. <NbPoints> defines the nomber of desired points. Parameter Toler is equal Precision::Confusion by default. It Is used for more precise calculation of curve length
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbPoints:
        	:type NbPoints: int
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Computes a Uniform abscissa distribution of points on a part of the Curve <C>. Parameter Toler is equal Precision::Confusion by default. It Is used for more precise calculation of curve length
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbPoints:
        	:type NbPoints: int
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Computes a uniform abscissa distribution of points on the Curve2d <C>. Parameter Toler is equal Precision::Confusion by default. It Is used for more precise calculation of curve length
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Computes a Uniform abscissa distribution of points on a part of the Curve2d <C>. Parameter Toler is equal Precision::Confusion by default. It Is used for more precise calculation of curve length
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Computes a uniform abscissa distribution of points on the Curve2d <C>. <NbPoints> defines the nomber of desired points. Parameter Toler is equal Precision::Confusion by default. It Is used for more precise calculation of curve length
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbPoints:
        	:type NbPoints: int
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Computes a Uniform abscissa distribution of points on a part of the Curve2d <C>. Parameter Toler is equal Precision::Confusion by default. It Is used for more precise calculation of curve length
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbPoints:
        	:type NbPoints: int
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        """
        _GCPnts.GCPnts_UniformAbscissa_swiginit(self, _GCPnts.new_GCPnts_UniformAbscissa(*args))

    def Initialize(self, *args) -> "void":
        """
        * Initialize the algoritms with <C>, <Abscissa>, <Toler>
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Initialize the algoritms with <C>, <Abscissa>, <U1>, <U2>, <Toler>
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Initialize the algoritms with <C>, <NbPoints>, <Toler> and
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbPoints:
        	:type NbPoints: int
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Initialize the algoritms with <C>, <Abscissa>, <U1>, <U2>, <Toler>.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param NbPoints:
        	:type NbPoints: int
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Initialize the algoritms with <C>, <Abscissa>, <Toler>
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Initialize the algoritms with <C>, <Abscissa>, <U1>, <U2>, <Toler>
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Initialize the algoritms with <C>, <NbPoints>, <Toler> and
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbPoints:
        	:type NbPoints: int
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        * Initialize the algoritms with <C>, <Abscissa>, <U1>, <U2>, <Toler>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param NbPoints:
        	:type NbPoints: int
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Toler: default value is -1
        	:type Toler: float
        	:rtype: None
        """
        return _GCPnts.GCPnts_UniformAbscissa_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _GCPnts.GCPnts_UniformAbscissa_IsDone(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _GCPnts.GCPnts_UniformAbscissa_NbPoints(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * returns the computed Parameter of index <Index>.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GCPnts.GCPnts_UniformAbscissa_Parameter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GCPnts.delete_GCPnts_UniformAbscissa
GCPnts_UniformAbscissa.Abscissa = new_instancemethod(_GCPnts.GCPnts_UniformAbscissa_Abscissa, None, GCPnts_UniformAbscissa)
GCPnts_UniformAbscissa.Initialize = new_instancemethod(_GCPnts.GCPnts_UniformAbscissa_Initialize, None, GCPnts_UniformAbscissa)
GCPnts_UniformAbscissa.IsDone = new_instancemethod(_GCPnts.GCPnts_UniformAbscissa_IsDone, None, GCPnts_UniformAbscissa)
GCPnts_UniformAbscissa.NbPoints = new_instancemethod(_GCPnts.GCPnts_UniformAbscissa_NbPoints, None, GCPnts_UniformAbscissa)
GCPnts_UniformAbscissa.Parameter = new_instancemethod(_GCPnts.GCPnts_UniformAbscissa_Parameter, None, GCPnts_UniformAbscissa)
GCPnts_UniformAbscissa_swigregister = _GCPnts.GCPnts_UniformAbscissa_swigregister
GCPnts_UniformAbscissa_swigregister(GCPnts_UniformAbscissa)

class GCPnts_UniformDeflection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Deflection(self, *args) -> "Standard_Real":
        """
        * Returns the deflection between the curve and the polygon resulting from the points of the distribution computed by this algorithm. This value is the one given to the algorithm at the time of construction (or initialization). Exceptions StdFail_NotDone if this algorithm has not been initialized, or if the computation was not successful.
        	:rtype: float
        """
        return _GCPnts.GCPnts_UniformDeflection_Deflection(self, *args)


    def __init__(self, *args):
        """
        * Constructs an empty algorithm. To define the problem to be solved, use the function Initialize.
        	:rtype: None
        * Computes a uniform Deflection distribution of points on the Curve <C>. if <WithControl> is True,the algorithm controls the estimate deflection
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param WithControl: default value is Standard_True
        	:type WithControl: bool
        	:rtype: None
        * Computes a uniform Deflection distribution of points on the Curve <C>. if <WithControl> is True,the algorithm controls the estimate deflection
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param WithControl: default value is Standard_True
        	:type WithControl: bool
        	:rtype: None
        * Computes a Uniform Deflection distribution of points on a part of the Curve <C>. if <WithControl> is True,the algorithm controls the estimate deflection
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param WithControl: default value is Standard_True
        	:type WithControl: bool
        	:rtype: None
        * Computes a Uniform Deflection distribution of points on a part of the Curve <C>. if <WithControl> is True,the algorithm controls the estimate deflection
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param WithControl: default value is Standard_True
        	:type WithControl: bool
        	:rtype: None
        """
        _GCPnts.GCPnts_UniformDeflection_swiginit(self, _GCPnts.new_GCPnts_UniformDeflection(*args))

    def Initialize(self, *args) -> "void":
        """
        * Initialize the algoritms with <C>, <Deflection>
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param WithControl: default value is Standard_True
        	:type WithControl: bool
        	:rtype: None
        * Initialize the algoritms with <C>, <Deflection>
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param WithControl: default value is Standard_True
        	:type WithControl: bool
        	:rtype: None
        * Initialize the algoritms with <C>, <Deflection>, <U1>,<U2>
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param WithControl: default value is Standard_True
        	:type WithControl: bool
        	:rtype: None
        * Initialize the algoritms with <C>, <Deflection>, <U1>,<U2> This and the above methods initialize (or reinitialize) this algorithm and compute a distribution of points: - on the curve C, or - on the part of curve C limited by the two parameter values U1 and U2, where the maximum distance between C and the polygon that results from the points of the distribution is not greater than Deflection. The first point of the distribution is either the origin of curve C or the point of parameter U1. The last point of the distribution is either the end point of curve C or the point of parameter U2. Intermediate points of the distribution are built using interpolations of segments of the curve limited at the 2nd degree. The construction ensures, in a first step, that the chordal deviation for this interpolation of the curve is less than or equal to Deflection. However, it does not ensure that the chordal deviation for the curve itself is less than or equal to Deflection. To do this a check is necessary, which may generate (second step) additional intermediate points. This check is time consuming, and can be avoided by setting WithControl to false. Note that by default WithControl is true and check is performed. Use the function IsDone to verify that the computation was successful, the function NbPoints to obtain the number of points of the computed distribution, and the function Parameter to read the parameter of each point. Warning - C is necessary, 'C2' continuous. This property is not checked at construction time. - The roles of U1 and U2 are inverted if U1 > U2. Warning C is an adapted curve, i.e. an object which is an interface between: - the services provided by either a 2D curve from the package Geom2d (in the case of an Adaptor2d_Curve2d curve) or a 3D curve from the package Geom (in the case of an Adaptor3d_Curve curve), - and those required on the curve by the computation algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param WithControl: default value is Standard_True
        	:type WithControl: bool
        	:rtype: None
        """
        return _GCPnts.GCPnts_UniformDeflection_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the computation was successful. IsDone is a protection against: - non-convergence of the algorithm - querying the results before computation.
        	:rtype: bool
        """
        return _GCPnts.GCPnts_UniformDeflection_IsDone(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points of the distribution computed by this algorithm. Exceptions StdFail_NotDone if this algorithm has not been initialized, or if the computation was not successful.
        	:rtype: int
        """
        return _GCPnts.GCPnts_UniformDeflection_NbPoints(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter of the point of index Index in the distribution computed by this algorithm. Warning Index must be greater than or equal to 1, and less than or equal to the number of points of the distribution. However, pay particular attention as this condition is not checked by this function. Exceptions StdFail_NotDone if this algorithm has not been initialized, or if the computation was not successful.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GCPnts.GCPnts_UniformDeflection_Parameter(self, *args)


    def Value(self, *args) -> "gp_Pnt":
        """
        * Returns the point of index Index in the distribution computed by this algorithm. Warning Index must be greater than or equal to 1, and less than or equal to the number of points of the distribution. However, pay particular attention as this condition is not checked by this function. Exceptions StdFAil_NotDone if this algorithm has not been initialized, or if the computation was not successful.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Pnt
        """
        return _GCPnts.GCPnts_UniformDeflection_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GCPnts.delete_GCPnts_UniformDeflection
GCPnts_UniformDeflection.Deflection = new_instancemethod(_GCPnts.GCPnts_UniformDeflection_Deflection, None, GCPnts_UniformDeflection)
GCPnts_UniformDeflection.Initialize = new_instancemethod(_GCPnts.GCPnts_UniformDeflection_Initialize, None, GCPnts_UniformDeflection)
GCPnts_UniformDeflection.IsDone = new_instancemethod(_GCPnts.GCPnts_UniformDeflection_IsDone, None, GCPnts_UniformDeflection)
GCPnts_UniformDeflection.NbPoints = new_instancemethod(_GCPnts.GCPnts_UniformDeflection_NbPoints, None, GCPnts_UniformDeflection)
GCPnts_UniformDeflection.Parameter = new_instancemethod(_GCPnts.GCPnts_UniformDeflection_Parameter, None, GCPnts_UniformDeflection)
GCPnts_UniformDeflection.Value = new_instancemethod(_GCPnts.GCPnts_UniformDeflection_Value, None, GCPnts_UniformDeflection)
GCPnts_UniformDeflection_swigregister = _GCPnts.GCPnts_UniformDeflection_swigregister
GCPnts_UniformDeflection_swigregister(GCPnts_UniformDeflection)



