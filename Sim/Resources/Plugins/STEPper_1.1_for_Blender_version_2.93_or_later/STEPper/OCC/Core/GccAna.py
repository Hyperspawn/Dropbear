# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GccAna module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_gccana.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GccAna.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GccAna')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GccAna')
    _GccAna = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GccAna', [dirname(__file__)])
        except ImportError:
            import _GccAna
            return _GccAna
        try:
            _mod = imp.load_module('_GccAna', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GccAna = swig_import_helper()
    del swig_import_helper
else:
    import _GccAna
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GccAna.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GccAna.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GccAna.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GccAna.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GccAna.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GccAna.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GccAna.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GccAna.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GccAna.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GccAna.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GccAna.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GccAna.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GccAna.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GccAna.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GccAna.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GccAna.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GccAna.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GccAna.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GccAna.process_exception(error, method_name, class_name)
process_exception = _GccAna.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.GccEnt
import OCC.Core.GccInt
class GccAna_Circ2d2TanOn(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CenterOn3(self, *args) -> "void":
        """
        * Returns the informations about the center (on the curv) of the result number Index and the third argument. ParArg is the intrinsic parameter of the point PntArg on the third argument. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.
        	:param Index:
        	:type Index: int
        	:param ParArg:
        	:type ParArg: float
        	:param PntArg:
        	:type PntArg: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2d2TanOn_CenterOn3(self, *args)


    def __init__(self, *args):
        """
        * This method implements the algorithms used to create 2d circles TANgent to two 2d circles and having the center ON a 2d line.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedCirc
        	:param OnLine:
        	:type OnLine: gp_Lin2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to a 2d circle and a 2d line having the center ON a 2d line.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedLin
        	:param OnLine:
        	:type OnLine: gp_Lin2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to two 2d lines having the center ON a 2d line.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedLin
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedLin
        	:param OnLine:
        	:type OnLine: gp_Lin2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to a 2d circle and a point having the center ON a 2d line.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param OnLine:
        	:type OnLine: gp_Lin2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to a 2d line and a point having the center ON a 2d line.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedLin
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param OnLine:
        	:type OnLine: gp_Lin2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to two points having the center ON a 2d line.
        	:param Point1:
        	:type Point1: gp_Pnt2d
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param OnLine:
        	:type OnLine: gp_Lin2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to two 2d circles and having the center ON a 2d circle.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedCirc
        	:param OnCirc:
        	:type OnCirc: gp_Circ2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to a circle and a line having the center ON a 2d circle.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedLin
        	:param OnCirc:
        	:type OnCirc: gp_Circ2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to a circle and a point having the center ON a 2d circle.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param OnCirc:
        	:type OnCirc: gp_Circ2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to two 2d lines having the center ON a 2d circle.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedLin
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedLin
        	:param OnCirc:
        	:type OnCirc: gp_Circ2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to a line and a point having the center ON a 2d circle.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedLin
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param OnCirc:
        	:type OnCirc: gp_Circ2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to two points having the center ON a 2d circle.
        	:param Point1:
        	:type Point1: gp_Pnt2d
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param OnCirc:
        	:type OnCirc: gp_Circ2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        """
        _GccAna.GccAna_Circ2d2TanOn_swiginit(self, _GccAna.new_GccAna_Circ2d2TanOn(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the construction algorithm does not fail (even if it finds no solution). Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2d2TanOn_IsDone(self, *args)


    def IsTheSame1(self, *args) -> "Standard_Boolean":
        """
        * True if the solution and the first argument are the same (2 circles). If R1 is the radius of the first argument and Rsol the radius of the solution and dist the distance between the two centers, we concider the two circles are identical if R1+dist-Rsol is less than Tolerance. False in the other cases. Raises OutOfRange if Index is greater than the number of solutions and NotDone if IsDone returns false.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2d2TanOn_IsTheSame1(self, *args)


    def IsTheSame2(self, *args) -> "Standard_Boolean":
        """
        * True if the solution and the second argument are the same (2 circles). If R2 is the radius of the second argument and Rsol the radius of the solution and dist the distance between the two centers, we concider the two circles are identical if R2+dist-Rsol is less than Tolerance. False in the other cases. Raises OutOfRange if Index is greater than the number of solutions and NotDone if IsDone returns false.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2d2TanOn_IsTheSame2(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * Returns the number of circles, representing solutions computed by this algorithm. Exceptions StdFail_NotDone if the construction fails.
        	:rtype: int
        """
        return _GccAna.GccAna_Circ2d2TanOn_NbSolutions(self, *args)


    def Tangency1(self, *args) -> "void":
        """
        * Returns the informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution ParArg is the intrinsic parameter of the point PntSol on the first argument. Raises OutOfRange if Index is greater than the number of solutions and NotDone if IsDone returns false.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2d2TanOn_Tangency1(self, *args)


    def Tangency2(self, *args) -> "void":
        """
        * Returns the informations about the tangency point between the result number Index and the second argument. ParSol is the intrinsic parameter of the point PntSol on the solution. ParArg is the intrinsic parameter of the point PntSol on the second argument. Raises OutOfRange if Index is greater than the number of solutions and NotDone if IsDone returns false.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2d2TanOn_Tangency2(self, *args)


    def ThisSolution(self, *args) -> "gp_Circ2d":
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Be careful: the Index is only a way to get all the solutions, but is not associated to those outside the context of the algorithm-object. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Circ2d
        """
        return _GccAna.GccAna_Circ2d2TanOn_ThisSolution(self, *args)


    def WhichQualifier(self, *args) -> "void":
        """
        * Returns the qualifiers Qualif1 and Qualif2 of the tangency arguments for the solution of index Index computed by this algorithm. The returned qualifiers are: - those specified at the start of construction when the solutions are defined as enclosed, enclosing or outside with respect to the arguments, or - those computed during construction (i.e. enclosed, enclosing or outside) when the solutions are defined as unqualified with respect to the arguments, or - GccEnt_noqualifier if the tangency argument is a point. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.
        	:param Index:
        	:type Index: int
        	:param Qualif1:
        	:type Qualif1: GccEnt_Position
        	:param Qualif2:
        	:type Qualif2: GccEnt_Position
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2d2TanOn_WhichQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Circ2d2TanOn
GccAna_Circ2d2TanOn.CenterOn3 = new_instancemethod(_GccAna.GccAna_Circ2d2TanOn_CenterOn3, None, GccAna_Circ2d2TanOn)
GccAna_Circ2d2TanOn.IsDone = new_instancemethod(_GccAna.GccAna_Circ2d2TanOn_IsDone, None, GccAna_Circ2d2TanOn)
GccAna_Circ2d2TanOn.IsTheSame1 = new_instancemethod(_GccAna.GccAna_Circ2d2TanOn_IsTheSame1, None, GccAna_Circ2d2TanOn)
GccAna_Circ2d2TanOn.IsTheSame2 = new_instancemethod(_GccAna.GccAna_Circ2d2TanOn_IsTheSame2, None, GccAna_Circ2d2TanOn)
GccAna_Circ2d2TanOn.NbSolutions = new_instancemethod(_GccAna.GccAna_Circ2d2TanOn_NbSolutions, None, GccAna_Circ2d2TanOn)
GccAna_Circ2d2TanOn.Tangency1 = new_instancemethod(_GccAna.GccAna_Circ2d2TanOn_Tangency1, None, GccAna_Circ2d2TanOn)
GccAna_Circ2d2TanOn.Tangency2 = new_instancemethod(_GccAna.GccAna_Circ2d2TanOn_Tangency2, None, GccAna_Circ2d2TanOn)
GccAna_Circ2d2TanOn.ThisSolution = new_instancemethod(_GccAna.GccAna_Circ2d2TanOn_ThisSolution, None, GccAna_Circ2d2TanOn)
GccAna_Circ2d2TanOn.WhichQualifier = new_instancemethod(_GccAna.GccAna_Circ2d2TanOn_WhichQualifier, None, GccAna_Circ2d2TanOn)
GccAna_Circ2d2TanOn_swigregister = _GccAna.GccAna_Circ2d2TanOn_swigregister
GccAna_Circ2d2TanOn_swigregister(GccAna_Circ2d2TanOn)

class GccAna_Circ2d2TanRad(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * This method implements the algorithms used to create 2d circles TANgent to two 2d circle with a radius of Radius. It raises NegativeValue if Radius is lower than zero.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedCirc
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to a 2d circle and a 2d line with a radius of Radius. It raises NegativeValue if Radius is lower than zero.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedLin
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to a 2d circle and a point with a radius of Radius. It raises NegativeValue if Radius is lower than zero.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to a 2d line and a point with a radius of Radius. It raises NegativeValue if Radius is lower than zero.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedLin
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles TANgent to two 2d lines with a radius of Radius. It raises NegativeValue if Radius is lower than zero.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedLin
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedLin
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles passing through two points with a radius of Radius. It raises NegativeValue if Radius is lower than zero.
        	:param Point1:
        	:type Point1: gp_Pnt2d
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        """
        _GccAna.GccAna_Circ2d2TanRad_swiginit(self, _GccAna.new_GccAna_Circ2d2TanRad(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * This method returns True if the algorithm succeeded. Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2d2TanRad_IsDone(self, *args)


    def IsTheSame1(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the solution number Index is equal to the first argument. Raises OutOfRange if Index is greater than the number of solutions. It raises NotDone if the construction algorithm did not succeed.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2d2TanRad_IsTheSame1(self, *args)


    def IsTheSame2(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the solution number Index is equal to the second argument. Raises OutOfRange if Index is greater than the number of solutions. It raises NotDone if the construction algorithm did not succeed.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2d2TanRad_IsTheSame2(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * This method returns the number of circles, representing solutions computed by this algorithm. Exceptions StdFail_NotDone if the construction fails. of solutions.
        	:rtype: int
        """
        return _GccAna.GccAna_Circ2d2TanRad_NbSolutions(self, *args)


    def Tangency1(self, *args) -> "void":
        """
        * Returns information about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution. ParArg is the intrinsic parameter of the point PntSol on the first argument. Raises OutOfRange if Index is greater than the number of solutions. It raises NotDone if the construction algorithm did not succeed
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2d2TanRad_Tangency1(self, *args)


    def Tangency2(self, *args) -> "void":
        """
        * Returns information about the tangency point between the result number Index and the second argument. ParSol is the intrinsic parameter of the point PntSol on the solution. ParArg is the intrinsic parameter of the point PntArg on the second argument. Raises OutOfRange if Index is greater than the number of solutions. It raises NotDone if the construction algorithm did not succeed.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2d2TanRad_Tangency2(self, *args)


    def ThisSolution(self, *args) -> "gp_Circ2d":
        """
        * Returns the solution number Index. Be careful: the Index is only a way to get all the solutions, but is not associated to those outside the context of the algorithm-object. Raises OutOfRange exception if Index is greater than the number of solutions. It raises NotDone if the construction algorithm did not succeed.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Circ2d
        """
        return _GccAna.GccAna_Circ2d2TanRad_ThisSolution(self, *args)


    def WhichQualifier(self, *args) -> "void":
        """
        * Returns the information about the qualifiers of the tangency arguments concerning the solution number Index. It returns the real qualifiers (the qualifiers given to the constructor method in case of enclosed, enclosing and outside and the qualifiers computedin case of unqualified).
        	:param Index:
        	:type Index: int
        	:param Qualif1:
        	:type Qualif1: GccEnt_Position
        	:param Qualif2:
        	:type Qualif2: GccEnt_Position
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2d2TanRad_WhichQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Circ2d2TanRad
GccAna_Circ2d2TanRad.IsDone = new_instancemethod(_GccAna.GccAna_Circ2d2TanRad_IsDone, None, GccAna_Circ2d2TanRad)
GccAna_Circ2d2TanRad.IsTheSame1 = new_instancemethod(_GccAna.GccAna_Circ2d2TanRad_IsTheSame1, None, GccAna_Circ2d2TanRad)
GccAna_Circ2d2TanRad.IsTheSame2 = new_instancemethod(_GccAna.GccAna_Circ2d2TanRad_IsTheSame2, None, GccAna_Circ2d2TanRad)
GccAna_Circ2d2TanRad.NbSolutions = new_instancemethod(_GccAna.GccAna_Circ2d2TanRad_NbSolutions, None, GccAna_Circ2d2TanRad)
GccAna_Circ2d2TanRad.Tangency1 = new_instancemethod(_GccAna.GccAna_Circ2d2TanRad_Tangency1, None, GccAna_Circ2d2TanRad)
GccAna_Circ2d2TanRad.Tangency2 = new_instancemethod(_GccAna.GccAna_Circ2d2TanRad_Tangency2, None, GccAna_Circ2d2TanRad)
GccAna_Circ2d2TanRad.ThisSolution = new_instancemethod(_GccAna.GccAna_Circ2d2TanRad_ThisSolution, None, GccAna_Circ2d2TanRad)
GccAna_Circ2d2TanRad.WhichQualifier = new_instancemethod(_GccAna.GccAna_Circ2d2TanRad_WhichQualifier, None, GccAna_Circ2d2TanRad)
GccAna_Circ2d2TanRad_swigregister = _GccAna.GccAna_Circ2d2TanRad_swigregister
GccAna_Circ2d2TanRad_swigregister(GccAna_Circ2d2TanRad)

class GccAna_Circ2d3Tan(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * This method implements the algorithms used to create 2d circles tangent to 3 circles. ConstructionError is raised if there is a problem during the computation.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedCirc
        	:param Qualified3:
        	:type Qualified3: GccEnt_QualifiedCirc
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles tangent to 2 circles and 1 line. ConstructionError is raised if there is a problem during the computation.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedCirc
        	:param Qualified3:
        	:type Qualified3: GccEnt_QualifiedLin
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles tangent to 1 circle and 2 lines. ConstructionError is raised if there is a problem during the computation.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedLin
        	:param Qualified3:
        	:type Qualified3: GccEnt_QualifiedLin
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles tangent to 3 lines. ConstructionError is raised if there is a problem during the computation.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedLin
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedLin
        	:param Qualified3:
        	:type Qualified3: GccEnt_QualifiedLin
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles tangent to 2 circles and 1 Point. ConstructionError is raised if there is a problem during the computation.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedCirc
        	:param Point3:
        	:type Point3: gp_Pnt2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles tangent to a circle and a line and 1 Point. ConstructionError is raised if there is a problem during the computation.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedLin
        	:param Point3:
        	:type Point3: gp_Pnt2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles tangent to 2 lines and 1 Point. ConstructionError is raised if there is a problem during the computation.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedLin
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedLin
        	:param Point3:
        	:type Point3: gp_Pnt2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles tangent to a circle and passing thrue 2 Points. ConstructionError is raised if there is a problem during the computation.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param Point3:
        	:type Point3: gp_Pnt2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles tangent to a line and passing thrue 2 Points. ConstructionError is raised if there is a problem during the computation.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedLin
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param Point3:
        	:type Point3: gp_Pnt2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles passing thrue 3 Points. ConstructionError is raised if there is a problem during the computation.
        	:param Point1:
        	:type Point1: gp_Pnt2d
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param Point3:
        	:type Point3: gp_Pnt2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        """
        _GccAna.GccAna_Circ2d3Tan_swiginit(self, _GccAna.new_GccAna_Circ2d3Tan(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * This method returns True if the construction algorithm succeeded. Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2d3Tan_IsDone(self, *args)


    def IsTheSame1(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the solution number Index is equal to the first argument. Raises OutOfRange if Index is greater than the number of solutions. It raises NotDone if the algorithm failed.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2d3Tan_IsTheSame1(self, *args)


    def IsTheSame2(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the solution number Index is equal to the second argument. Raises OutOfRange Index is greater than the number of solutions. It raises NotDone if the algorithm failed.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2d3Tan_IsTheSame2(self, *args)


    def IsTheSame3(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the solution number Index is equal to the third argument. Raises OutOfRange if Index is greater than the number of solutions. It raises NotDone if the algorithm failed.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2d3Tan_IsTheSame3(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * This method returns the number of solutions. Raises NotDone if the construction algorithm didn't succeed.
        	:rtype: int
        """
        return _GccAna.GccAna_Circ2d3Tan_NbSolutions(self, *args)


    def Tangency1(self, *args) -> "void":
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntArg on the argument curv. Raises OutOfRange if Index is greater than the number of solutions. It raises NotDone if the algorithm failed.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2d3Tan_Tangency1(self, *args)


    def Tangency2(self, *args) -> "void":
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point Pntsol on the argument curv. Raises OutOfRange if Index is greater than the number of solutions. It raises NotDone if the algorithm failed.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2d3Tan_Tangency2(self, *args)


    def Tangency3(self, *args) -> "void":
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point Pntsol on the argument curv. Raises OutOfRange if Index is greater than the number of solutions. It raises NotDone if the algorithm failed.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2d3Tan_Tangency3(self, *args)


    def ThisSolution(self, *args) -> "gp_Circ2d":
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Be careful: the Index is only a way to get all the solutions, but is not associated to those outside the context of the algorithm-object. Raises OutOfRange if Index is greater than the number of solutions. It raises NotDone if the algorithm failed.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Circ2d
        """
        return _GccAna.GccAna_Circ2d3Tan_ThisSolution(self, *args)


    def WhichQualifier(self, *args) -> "void":
        """
        * Returns the informations about the qualifiers of the tangency arguments concerning the solution number Index. It returns the real qualifiers (the qualifiers given to the constructor method in case of enclosed, enclosing and outside and the qualifiers computedin case of unqualified).
        	:param Index:
        	:type Index: int
        	:param Qualif1:
        	:type Qualif1: GccEnt_Position
        	:param Qualif2:
        	:type Qualif2: GccEnt_Position
        	:param Qualif3:
        	:type Qualif3: GccEnt_Position
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2d3Tan_WhichQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Circ2d3Tan
GccAna_Circ2d3Tan.IsDone = new_instancemethod(_GccAna.GccAna_Circ2d3Tan_IsDone, None, GccAna_Circ2d3Tan)
GccAna_Circ2d3Tan.IsTheSame1 = new_instancemethod(_GccAna.GccAna_Circ2d3Tan_IsTheSame1, None, GccAna_Circ2d3Tan)
GccAna_Circ2d3Tan.IsTheSame2 = new_instancemethod(_GccAna.GccAna_Circ2d3Tan_IsTheSame2, None, GccAna_Circ2d3Tan)
GccAna_Circ2d3Tan.IsTheSame3 = new_instancemethod(_GccAna.GccAna_Circ2d3Tan_IsTheSame3, None, GccAna_Circ2d3Tan)
GccAna_Circ2d3Tan.NbSolutions = new_instancemethod(_GccAna.GccAna_Circ2d3Tan_NbSolutions, None, GccAna_Circ2d3Tan)
GccAna_Circ2d3Tan.Tangency1 = new_instancemethod(_GccAna.GccAna_Circ2d3Tan_Tangency1, None, GccAna_Circ2d3Tan)
GccAna_Circ2d3Tan.Tangency2 = new_instancemethod(_GccAna.GccAna_Circ2d3Tan_Tangency2, None, GccAna_Circ2d3Tan)
GccAna_Circ2d3Tan.Tangency3 = new_instancemethod(_GccAna.GccAna_Circ2d3Tan_Tangency3, None, GccAna_Circ2d3Tan)
GccAna_Circ2d3Tan.ThisSolution = new_instancemethod(_GccAna.GccAna_Circ2d3Tan_ThisSolution, None, GccAna_Circ2d3Tan)
GccAna_Circ2d3Tan.WhichQualifier = new_instancemethod(_GccAna.GccAna_Circ2d3Tan_WhichQualifier, None, GccAna_Circ2d3Tan)
GccAna_Circ2d3Tan_swigregister = _GccAna.GccAna_Circ2d3Tan_swigregister
GccAna_Circ2d3Tan_swigregister(GccAna_Circ2d3Tan)

class GccAna_Circ2dBisec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs bisecting curves between the two circles Circ1 and Circ2.
        	:param Circ1:
        	:type Circ1: gp_Circ2d
        	:param Circ2:
        	:type Circ2: gp_Circ2d
        	:rtype: None
        """
        _GccAna.GccAna_Circ2dBisec_swiginit(self, _GccAna.new_GccAna_Circ2dBisec(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * This method returns True if the construction algorithm succeeded.
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2dBisec_IsDone(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * This method returns the number of solutions. Raises NotDone if the construction algorithm didn't succeed.
        	:rtype: int
        """
        return _GccAna.GccAna_Circ2dBisec_NbSolutions(self, *args)


    def ThisSolution(self, *args) -> "opencascade::handle< GccInt_Bisec >":
        """
        * Returns the solution number Index Raises OutOfRange exception if Index is greater than the number of solutions. It raises NotDone if the construction algorithm didn't succeed.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<GccInt_Bisec>
        """
        return _GccAna.GccAna_Circ2dBisec_ThisSolution(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Circ2dBisec
GccAna_Circ2dBisec.IsDone = new_instancemethod(_GccAna.GccAna_Circ2dBisec_IsDone, None, GccAna_Circ2dBisec)
GccAna_Circ2dBisec.NbSolutions = new_instancemethod(_GccAna.GccAna_Circ2dBisec_NbSolutions, None, GccAna_Circ2dBisec)
GccAna_Circ2dBisec.ThisSolution = new_instancemethod(_GccAna.GccAna_Circ2dBisec_ThisSolution, None, GccAna_Circ2dBisec)
GccAna_Circ2dBisec_swigregister = _GccAna.GccAna_Circ2dBisec_swigregister
GccAna_Circ2dBisec_swigregister(GccAna_Circ2dBisec)

class GccAna_Circ2dTanCen(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * This method implements the algorithms used to create 2d circles tangent to a circle and centered on a point.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Pcenter:
        	:type Pcenter: gp_Pnt2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This method implements the algorithms used to create 2d circles tangent to a line and centered on a point.
        	:param Linetan:
        	:type Linetan: gp_Lin2d
        	:param Pcenter:
        	:type Pcenter: gp_Pnt2d
        	:rtype: None
        * This method implements the algorithms used to create 2d circles passing thrue a point and centered on a point. Tolerance is a tolerance criterion used by the algorithm to find a solution when, mathematically, the problem posed does not have a solution, but where there is numeric uncertainty attached to the arguments. In these algorithms Tolerance is only used in very specific cases where the center of the solution is very close to the circle to which it is tangential, and where the solution is therefore a very small circle. Exceptions GccEnt_BadQualifier if a qualifier is inconsistent with the argument it qualifies (for example, enclosing for a line).
        	:param Point1:
        	:type Point1: gp_Pnt2d
        	:param Pcenter:
        	:type Pcenter: gp_Pnt2d
        	:rtype: None
        """
        _GccAna.GccAna_Circ2dTanCen_swiginit(self, _GccAna.new_GccAna_Circ2dTanCen(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * This method returns True if the construction algorithm succeeded. Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2dTanCen_IsDone(self, *args)


    def IsTheSame1(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the solution number Index is equal to the first argument. It raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions or less than zero.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2dTanCen_IsTheSame1(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * Returns the number of circles, representing solutions computed by this algorithm and raises NotDone exception if the algorithm didn't succeed.
        	:rtype: int
        """
        return _GccAna.GccAna_Circ2dTanCen_NbSolutions(self, *args)


    def Tangency1(self, *args) -> "void":
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntArg on the argument curv. It raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions or less than zero.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2dTanCen_Tangency1(self, *args)


    def ThisSolution(self, *args) -> "gp_Circ2d":
        """
        * Returns the circle, representing the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Be carefull: the Index is only a way to get all the solutions, but is not associated to theses outside the context of the algorithm-object. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions or less than zer
        	:param Index:
        	:type Index: int
        	:rtype: gp_Circ2d
        """
        return _GccAna.GccAna_Circ2dTanCen_ThisSolution(self, *args)


    def WhichQualifier(self, *args) -> "void":
        """
        * Returns the qualifier Qualif1 of the tangency argument for the solution of index Index computed by this algorithm. The returned qualifier is: - that specified at the start of construction when the solutions are defined as enclosed, enclosing or It returns the real qualifiers (the qualifiers given to the constructor method in case of enclosed, enclosing and outside and the qualifiers computedin case of unqualified).
        	:param Index:
        	:type Index: int
        	:param Qualif1:
        	:type Qualif1: GccEnt_Position
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2dTanCen_WhichQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Circ2dTanCen
GccAna_Circ2dTanCen.IsDone = new_instancemethod(_GccAna.GccAna_Circ2dTanCen_IsDone, None, GccAna_Circ2dTanCen)
GccAna_Circ2dTanCen.IsTheSame1 = new_instancemethod(_GccAna.GccAna_Circ2dTanCen_IsTheSame1, None, GccAna_Circ2dTanCen)
GccAna_Circ2dTanCen.NbSolutions = new_instancemethod(_GccAna.GccAna_Circ2dTanCen_NbSolutions, None, GccAna_Circ2dTanCen)
GccAna_Circ2dTanCen.Tangency1 = new_instancemethod(_GccAna.GccAna_Circ2dTanCen_Tangency1, None, GccAna_Circ2dTanCen)
GccAna_Circ2dTanCen.ThisSolution = new_instancemethod(_GccAna.GccAna_Circ2dTanCen_ThisSolution, None, GccAna_Circ2dTanCen)
GccAna_Circ2dTanCen.WhichQualifier = new_instancemethod(_GccAna.GccAna_Circ2dTanCen_WhichQualifier, None, GccAna_Circ2dTanCen)
GccAna_Circ2dTanCen_swigregister = _GccAna.GccAna_Circ2dTanCen_swigregister
GccAna_Circ2dTanCen_swigregister(GccAna_Circ2dTanCen)

class GccAna_Circ2dTanOnRad(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CenterOn3(self, *args) -> "void":
        """
        * Returns informations about the center (on the curv) of the result. ParArg is the intrinsic parameter of the point on the argument curv. PntSol is the center point of the solution curv. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2dTanOnRad_CenterOn3(self, *args)


    def __init__(self, *args):
        """
        * This methods implements the algorithms used to create 2d Circles tangent to a circle and centered on a 2d Line with a given radius. Tolerance is used to find solution in every limit cases. For example Tolerance is used in the case of EnclosedCirc when Radius-R1+dist is greater Tolerance (dist is the distance between the line and the location of the circ, R1 is the radius of the circ) because there is no solution. raises NegativeValue in case of NegativeRadius.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param OnLine:
        	:type OnLine: gp_Lin2d
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This methods implements the algorithms used to create 2d Circles tangent to a 2d Line and centered on a 2d Line with a given radius. Tolerance is used to find solution in every limit cases. raises NegativeValue in case of NegativeRadius.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedLin
        	:param OnLine:
        	:type OnLine: gp_Lin2d
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This methods implements the algorithms used to create 2d Circles passing through a 2d Point and centered on a 2d Line with a given radius. Tolerance is used to find solution in every limit cases.
        	:param Point1:
        	:type Point1: gp_Pnt2d
        	:param OnLine:
        	:type OnLine: gp_Lin2d
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This methods implements the algorithms used to create 2d Circles tangent to a circle and centered on a 2d Circle with a given radius. Tolerance is used to find solution in every limit cases. raises NegativeValue in case of NegativeRadius.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param OnCirc:
        	:type OnCirc: gp_Circ2d
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This methods implements the algorithms used to create 2d Circles tangent to a 2d Line and centered on a 2d Line with a given radius. Tolerance is used to find solution in every limit cases. raises NegativeValue in case of NegativeRadius.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedLin
        	:param OnCirc:
        	:type OnCirc: gp_Circ2d
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This methods implements the algorithms used to create 2d Circles passing through a 2d Point and centered on a 2d Line with a given radius. Tolerance is used to find solution in every limit cases. raises NegativeValue in case of NegativeRadius.
        	:param Point1:
        	:type Point1: gp_Pnt2d
        	:param OnCirc:
        	:type OnCirc: gp_Circ2d
        	:param Radius:
        	:type Radius: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        """
        _GccAna.GccAna_Circ2dTanOnRad_swiginit(self, _GccAna.new_GccAna_Circ2dTanOnRad(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the construction algorithm does not fail (even if it finds no solution). Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2dTanOnRad_IsDone(self, *args)


    def IsTheSame1(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the solution number Index is equal to the first argument and False in the other cases. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _GccAna.GccAna_Circ2dTanOnRad_IsTheSame1(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * This method returns the number of circles, representing solutions. Raises NotDone if the construction algorithm didn't succeed.
        	:rtype: int
        """
        return _GccAna.GccAna_Circ2dTanOnRad_NbSolutions(self, *args)


    def Tangency1(self, *args) -> "void":
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point on the solution curv. ParArg is the intrinsic parameter of the point on the argument curv. PntSol is the tangency point on the solution curv. PntArg is the tangency point on the argument curv. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2dTanOnRad_Tangency1(self, *args)


    def ThisSolution(self, *args) -> "gp_Circ2d":
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Be careful: the Index is only a way to get all the solutions, but is not associated to theses outside the context of the algorithm-object. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions
        	:param Index:
        	:type Index: int
        	:rtype: gp_Circ2d
        """
        return _GccAna.GccAna_Circ2dTanOnRad_ThisSolution(self, *args)


    def WhichQualifier(self, *args) -> "void":
        """
        * Returns the qualifier Qualif1 of the tangency argument for the solution of index Index computed by this algorithm. The returned qualifier is: - that specified at the start of construction when the solutions are defined as enclosed, enclosing or outside with respect to the argument, or - that computed during construction (i.e. enclosed, enclosing or outside) when the solutions are defined as unqualified with respect to the argument, or - GccEnt_noqualifier if the tangency argument is a point. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.
        	:param Index:
        	:type Index: int
        	:param Qualif1:
        	:type Qualif1: GccEnt_Position
        	:rtype: None
        """
        return _GccAna.GccAna_Circ2dTanOnRad_WhichQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Circ2dTanOnRad
GccAna_Circ2dTanOnRad.CenterOn3 = new_instancemethod(_GccAna.GccAna_Circ2dTanOnRad_CenterOn3, None, GccAna_Circ2dTanOnRad)
GccAna_Circ2dTanOnRad.IsDone = new_instancemethod(_GccAna.GccAna_Circ2dTanOnRad_IsDone, None, GccAna_Circ2dTanOnRad)
GccAna_Circ2dTanOnRad.IsTheSame1 = new_instancemethod(_GccAna.GccAna_Circ2dTanOnRad_IsTheSame1, None, GccAna_Circ2dTanOnRad)
GccAna_Circ2dTanOnRad.NbSolutions = new_instancemethod(_GccAna.GccAna_Circ2dTanOnRad_NbSolutions, None, GccAna_Circ2dTanOnRad)
GccAna_Circ2dTanOnRad.Tangency1 = new_instancemethod(_GccAna.GccAna_Circ2dTanOnRad_Tangency1, None, GccAna_Circ2dTanOnRad)
GccAna_Circ2dTanOnRad.ThisSolution = new_instancemethod(_GccAna.GccAna_Circ2dTanOnRad_ThisSolution, None, GccAna_Circ2dTanOnRad)
GccAna_Circ2dTanOnRad.WhichQualifier = new_instancemethod(_GccAna.GccAna_Circ2dTanOnRad_WhichQualifier, None, GccAna_Circ2dTanOnRad)
GccAna_Circ2dTanOnRad_swigregister = _GccAna.GccAna_Circ2dTanOnRad_swigregister
GccAna_Circ2dTanOnRad_swigregister(GccAna_Circ2dTanOnRad)

class GccAna_CircLin2dBisec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs bisecting curves between the circle Circle and the line Line.
        	:param Circle:
        	:type Circle: gp_Circ2d
        	:param Line:
        	:type Line: gp_Lin2d
        	:rtype: None
        """
        _GccAna.GccAna_CircLin2dBisec_swiginit(self, _GccAna.new_GccAna_CircLin2dBisec(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true (this construction algorithm never fails).
        	:rtype: bool
        """
        return _GccAna.GccAna_CircLin2dBisec_IsDone(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * Returns the number of curves, representing solutions computed by this algorithm.
        	:rtype: int
        """
        return _GccAna.GccAna_CircLin2dBisec_NbSolutions(self, *args)


    def ThisSolution(self, *args) -> "opencascade::handle< GccInt_Bisec >":
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<GccInt_Bisec>
        """
        return _GccAna.GccAna_CircLin2dBisec_ThisSolution(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_CircLin2dBisec
GccAna_CircLin2dBisec.IsDone = new_instancemethod(_GccAna.GccAna_CircLin2dBisec_IsDone, None, GccAna_CircLin2dBisec)
GccAna_CircLin2dBisec.NbSolutions = new_instancemethod(_GccAna.GccAna_CircLin2dBisec_NbSolutions, None, GccAna_CircLin2dBisec)
GccAna_CircLin2dBisec.ThisSolution = new_instancemethod(_GccAna.GccAna_CircLin2dBisec_ThisSolution, None, GccAna_CircLin2dBisec)
GccAna_CircLin2dBisec_swigregister = _GccAna.GccAna_CircLin2dBisec_swigregister
GccAna_CircLin2dBisec_swigregister(GccAna_CircLin2dBisec)

class GccAna_CircPnt2dBisec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs bisecting curves between the circle Circle1 and the point Point2.
        	:param Circle1:
        	:type Circle1: gp_Circ2d
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:rtype: None
        * Constructs bisecting curves between the circle Circle1 and the point Point2. Tolerance is used.
        	:param Circle1:
        	:type Circle1: gp_Circ2d
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        """
        _GccAna.GccAna_CircPnt2dBisec_swiginit(self, _GccAna.new_GccAna_CircPnt2dBisec(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true (this construction algorithm never fails).
        	:rtype: bool
        """
        return _GccAna.GccAna_CircPnt2dBisec_IsDone(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * Returns the number of curves, representing solutions computed by this algorithm.
        	:rtype: int
        """
        return _GccAna.GccAna_CircPnt2dBisec_NbSolutions(self, *args)


    def ThisSolution(self, *args) -> "opencascade::handle< GccInt_Bisec >":
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<GccInt_Bisec>
        """
        return _GccAna.GccAna_CircPnt2dBisec_ThisSolution(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_CircPnt2dBisec
GccAna_CircPnt2dBisec.IsDone = new_instancemethod(_GccAna.GccAna_CircPnt2dBisec_IsDone, None, GccAna_CircPnt2dBisec)
GccAna_CircPnt2dBisec.NbSolutions = new_instancemethod(_GccAna.GccAna_CircPnt2dBisec_NbSolutions, None, GccAna_CircPnt2dBisec)
GccAna_CircPnt2dBisec.ThisSolution = new_instancemethod(_GccAna.GccAna_CircPnt2dBisec_ThisSolution, None, GccAna_CircPnt2dBisec)
GccAna_CircPnt2dBisec_swigregister = _GccAna.GccAna_CircPnt2dBisec_swigregister
GccAna_CircPnt2dBisec_swigregister(GccAna_CircPnt2dBisec)

class GccAna_Lin2d2Tan(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * This methods implements the algorithms used to create 2d lines passing thrue 2 points. Tolerance is used because we can't create a line when the distance between the two points is too small.
        	:param ThePoint1:
        	:type ThePoint1: gp_Pnt2d
        	:param ThePoint2:
        	:type ThePoint2: gp_Pnt2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This methods implements the algorithms used to create 2d lines tangent to one circle and passing thrue a point. Exception BadQualifier is raised in the case of EnclosedCirc Tolerance is used because there is no solution when the point is inside the solution according to the tolerance.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param ThePoint:
        	:type ThePoint: gp_Pnt2d
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * This methods implements the algorithms used to create 2d lines tangent to 2 circles. Exception BadQualifier is raised in the case of EnclosedCirc
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Qualified2:
        	:type Qualified2: GccEnt_QualifiedCirc
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        """
        _GccAna.GccAna_Lin2d2Tan_swiginit(self, _GccAna.new_GccAna_Lin2d2Tan(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * This method returns true when there is a solution and false in the other cases.
        	:rtype: bool
        """
        return _GccAna.GccAna_Lin2d2Tan_IsDone(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * This method returns the number of solutions. Raises NotDone if the construction algorithm didn't succeed.
        	:rtype: int
        """
        return _GccAna.GccAna_Lin2d2Tan_NbSolutions(self, *args)


    def Tangency1(self, *args) -> "void":
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point PntSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv. Raises OutOfRange is raised if Index is greater than the number of solutions. It raises NotDone if the algorithm failed.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2d2Tan_Tangency1(self, *args)


    def Tangency2(self, *args) -> "void":
        """
        * Returns informations about the tangency point between the result number Index and the second argument. ParSol is the intrinsic parameter of the point ParSol on the solution curv. ParArg is the intrinsic parameter of the point PntSol on the argument curv. Raises OutOfRange is raised if Index is greater than the number of solutions. It raises NotDone if the algorithm failed.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2d2Tan_Tangency2(self, *args)


    def ThisSolution(self, *args) -> "gp_Lin2d":
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Be carefull: the Index is only a way to get all the solutions, but is not associated to theses outside the context of the algorithm-object. Raises OutOfRange is raised if Index is greater than the number of solutions. It raises NotDone if the algorithm failed.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Lin2d
        """
        return _GccAna.GccAna_Lin2d2Tan_ThisSolution(self, *args)


    def WhichQualifier(self, *args) -> "void":
        """
        * Returns the qualifiers Qualif1 and Qualif2 of the tangency arguments for the solution of index Index computed by this algorithm. The returned qualifiers are: - those specified at the start of construction when the solutions are defined as enclosing or outside with respect to the arguments, or - those computed during construction (i.e. enclosing or outside) when the solutions are defined as unqualified with respect to the arguments, or - GccEnt_noqualifier if the tangency argument is a point. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.
        	:param Index:
        	:type Index: int
        	:param Qualif1:
        	:type Qualif1: GccEnt_Position
        	:param Qualif2:
        	:type Qualif2: GccEnt_Position
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2d2Tan_WhichQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Lin2d2Tan
GccAna_Lin2d2Tan.IsDone = new_instancemethod(_GccAna.GccAna_Lin2d2Tan_IsDone, None, GccAna_Lin2d2Tan)
GccAna_Lin2d2Tan.NbSolutions = new_instancemethod(_GccAna.GccAna_Lin2d2Tan_NbSolutions, None, GccAna_Lin2d2Tan)
GccAna_Lin2d2Tan.Tangency1 = new_instancemethod(_GccAna.GccAna_Lin2d2Tan_Tangency1, None, GccAna_Lin2d2Tan)
GccAna_Lin2d2Tan.Tangency2 = new_instancemethod(_GccAna.GccAna_Lin2d2Tan_Tangency2, None, GccAna_Lin2d2Tan)
GccAna_Lin2d2Tan.ThisSolution = new_instancemethod(_GccAna.GccAna_Lin2d2Tan_ThisSolution, None, GccAna_Lin2d2Tan)
GccAna_Lin2d2Tan.WhichQualifier = new_instancemethod(_GccAna.GccAna_Lin2d2Tan_WhichQualifier, None, GccAna_Lin2d2Tan)
GccAna_Lin2d2Tan_swigregister = _GccAna.GccAna_Lin2d2Tan_swigregister
GccAna_Lin2d2Tan_swigregister(GccAna_Lin2d2Tan)

class GccAna_Lin2dBisec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs bisecting lines between the two lines Lin1 and Lin2.
        	:param Lin1:
        	:type Lin1: gp_Lin2d
        	:param Lin2:
        	:type Lin2: gp_Lin2d
        	:rtype: None
        """
        _GccAna.GccAna_Lin2dBisec_swiginit(self, _GccAna.new_GccAna_Lin2dBisec(*args))

    def Intersection1(self, *args) -> "void":
        """
        * Returns informations about the intersection point between the result number Index and the first argument. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2dBisec_Intersection1(self, *args)


    def Intersection2(self, *args) -> "void":
        """
        * Returns informations about the intersection point between the result number Index and the second argument. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2dBisec_Intersection2(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True when the algorithm succeded.
        	:rtype: bool
        """
        return _GccAna.GccAna_Lin2dBisec_IsDone(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * Returns the number of solutions and raise NotDone if the constructor wasn't called before.
        	:rtype: int
        """
        return _GccAna.GccAna_Lin2dBisec_NbSolutions(self, *args)


    def ThisSolution(self, *args) -> "gp_Lin2d":
        """
        * Returns the solution number Index . The first solution is the inside one and the second is the outside one. For the first solution the direction is D1+D2 (D1 is the direction of the first argument and D2 the direction of the second argument). For the second solution the direction is D1-D2. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Lin2d
        """
        return _GccAna.GccAna_Lin2dBisec_ThisSolution(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Lin2dBisec
GccAna_Lin2dBisec.Intersection1 = new_instancemethod(_GccAna.GccAna_Lin2dBisec_Intersection1, None, GccAna_Lin2dBisec)
GccAna_Lin2dBisec.Intersection2 = new_instancemethod(_GccAna.GccAna_Lin2dBisec_Intersection2, None, GccAna_Lin2dBisec)
GccAna_Lin2dBisec.IsDone = new_instancemethod(_GccAna.GccAna_Lin2dBisec_IsDone, None, GccAna_Lin2dBisec)
GccAna_Lin2dBisec.NbSolutions = new_instancemethod(_GccAna.GccAna_Lin2dBisec_NbSolutions, None, GccAna_Lin2dBisec)
GccAna_Lin2dBisec.ThisSolution = new_instancemethod(_GccAna.GccAna_Lin2dBisec_ThisSolution, None, GccAna_Lin2dBisec)
GccAna_Lin2dBisec_swigregister = _GccAna.GccAna_Lin2dBisec_swigregister
GccAna_Lin2dBisec_swigregister(GccAna_Lin2dBisec)

class GccAna_Lin2dTanObl(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * This class implements the algorithms used to create 2d line passing through a point and making an angle with a line.
        	:param ThePoint:
        	:type ThePoint: gp_Pnt2d
        	:param TheLine:
        	:type TheLine: gp_Lin2d
        	:param TheAngle:
        	:type TheAngle: float
        	:rtype: None
        * This class implements the algorithms used to create 2d line tangent to a circle and making an angle with a line. Exceptions GccEnt_BadQualifier if a qualifier is inconsistent with the argument it qualifies (for example, enclosed for a circle).
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param TheLine:
        	:type TheLine: gp_Lin2d
        	:param TheAngle:
        	:type TheAngle: float
        	:rtype: None
        """
        _GccAna.GccAna_Lin2dTanObl_swiginit(self, _GccAna.new_GccAna_Lin2dTanObl(*args))

    def Intersection2(self, *args) -> "void":
        """
        * Returns informations about the intersection between the result number Index and the third argument. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2dTanObl_Intersection2(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the algorithm succeeded. Note: IsDone protects against a failure arising from a more internal intersection algorithm, which has reached its numeric limits.
        	:rtype: bool
        """
        return _GccAna.GccAna_Lin2dTanObl_IsDone(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * Returns the number of of lines, representing solutions computed by this algorithm. Raises NotDone if the construction algorithm didn't succeed.
        	:rtype: int
        """
        return _GccAna.GccAna_Lin2dTanObl_NbSolutions(self, *args)


    def Tangency1(self, *args) -> "void":
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point ParSol on the solution curv. ParArg is the intrinsic parameter of the point ParArg on the argument curv. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2dTanObl_Tangency1(self, *args)


    def ThisSolution(self, *args) -> "gp_Lin2d":
        """
        * Returns the solution number Index. Be careful: the Index is only a way to get all the solutions, but is not associated to theses outside the context of the algorithm-object. raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Lin2d
        """
        return _GccAna.GccAna_Lin2dTanObl_ThisSolution(self, *args)


    def WhichQualifier(self, *args) -> "void":
        """
        * Returns the qualifier Qualif1 of the tangency argument for the solution of index Index computed by this algorithm. The returned qualifier is: - that specified at the start of construction when the solutions are defined as enclosing or outside with respect to the argument, or - that computed during construction (i.e. enclosing or outside) when the solutions are defined as unqualified with respect to the argument, or - GccEnt_noqualifier if the tangency argument is a point. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.
        	:param Index:
        	:type Index: int
        	:param Qualif1:
        	:type Qualif1: GccEnt_Position
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2dTanObl_WhichQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Lin2dTanObl
GccAna_Lin2dTanObl.Intersection2 = new_instancemethod(_GccAna.GccAna_Lin2dTanObl_Intersection2, None, GccAna_Lin2dTanObl)
GccAna_Lin2dTanObl.IsDone = new_instancemethod(_GccAna.GccAna_Lin2dTanObl_IsDone, None, GccAna_Lin2dTanObl)
GccAna_Lin2dTanObl.NbSolutions = new_instancemethod(_GccAna.GccAna_Lin2dTanObl_NbSolutions, None, GccAna_Lin2dTanObl)
GccAna_Lin2dTanObl.Tangency1 = new_instancemethod(_GccAna.GccAna_Lin2dTanObl_Tangency1, None, GccAna_Lin2dTanObl)
GccAna_Lin2dTanObl.ThisSolution = new_instancemethod(_GccAna.GccAna_Lin2dTanObl_ThisSolution, None, GccAna_Lin2dTanObl)
GccAna_Lin2dTanObl.WhichQualifier = new_instancemethod(_GccAna.GccAna_Lin2dTanObl_WhichQualifier, None, GccAna_Lin2dTanObl)
GccAna_Lin2dTanObl_swigregister = _GccAna.GccAna_Lin2dTanObl_swigregister
GccAna_Lin2dTanObl_swigregister(GccAna_Lin2dTanObl)

class GccAna_Lin2dTanPar(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * This method implements the algorithms used to create a 2d line passing through a point and parallel to another line.
        	:param ThePoint:
        	:type ThePoint: gp_Pnt2d
        	:param Lin1:
        	:type Lin1: gp_Lin2d
        	:rtype: None
        * This method implements the algorithms used to create a 2d line tangent to a circle and parallel to another line. It raises BadQualifier in case of EnclosedCirc. Exceptions GccEnt_BadQualifier if a qualifier is inconsistent with the argument it qualifies (for example, enclosed for a circle).
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param Lin1:
        	:type Lin1: gp_Lin2d
        	:rtype: None
        """
        _GccAna.GccAna_Lin2dTanPar_swiginit(self, _GccAna.new_GccAna_Lin2dTanPar(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the algorithm succeeded.
        	:rtype: bool
        """
        return _GccAna.GccAna_Lin2dTanPar_IsDone(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * Returns the number of solutions. Raises NotDone if the construction algorithm didn't succeed.
        	:rtype: int
        """
        return _GccAna.GccAna_Lin2dTanPar_NbSolutions(self, *args)


    def Tangency1(self, *args) -> "void":
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point on the solution curv. ParArg is the intrinsic parameter of the point on the argument curv. ParArg is equal 0 when the solution is passing thrue a point. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param Pnt:
        	:type Pnt: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2dTanPar_Tangency1(self, *args)


    def ThisSolution(self, *args) -> "gp_Lin2d":
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Be careful: the Index is only a way to get all the solutions, but is not associated to those outside the context of the algorithm-object. raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Lin2d
        """
        return _GccAna.GccAna_Lin2dTanPar_ThisSolution(self, *args)


    def WhichQualifier(self, *args) -> "void":
        """
        * Returns the informations about the qualifiers of the tangency arguments concerning the solution number Index. It returns the real qualifiers (the qualifiers given to the constructor method in case of enclosed, enclosing and outside and the qualifiers computed in case of unqualified). Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:param Qualif1:
        	:type Qualif1: GccEnt_Position
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2dTanPar_WhichQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Lin2dTanPar
GccAna_Lin2dTanPar.IsDone = new_instancemethod(_GccAna.GccAna_Lin2dTanPar_IsDone, None, GccAna_Lin2dTanPar)
GccAna_Lin2dTanPar.NbSolutions = new_instancemethod(_GccAna.GccAna_Lin2dTanPar_NbSolutions, None, GccAna_Lin2dTanPar)
GccAna_Lin2dTanPar.Tangency1 = new_instancemethod(_GccAna.GccAna_Lin2dTanPar_Tangency1, None, GccAna_Lin2dTanPar)
GccAna_Lin2dTanPar.ThisSolution = new_instancemethod(_GccAna.GccAna_Lin2dTanPar_ThisSolution, None, GccAna_Lin2dTanPar)
GccAna_Lin2dTanPar.WhichQualifier = new_instancemethod(_GccAna.GccAna_Lin2dTanPar_WhichQualifier, None, GccAna_Lin2dTanPar)
GccAna_Lin2dTanPar_swigregister = _GccAna.GccAna_Lin2dTanPar_swigregister
GccAna_Lin2dTanPar_swigregister(GccAna_Lin2dTanPar)

class GccAna_Lin2dTanPer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * This method implements the algorithms used to create 2d lines passing through a point and perpendicular to a line.
        	:param ThePnt:
        	:type ThePnt: gp_Pnt2d
        	:param TheLin:
        	:type TheLin: gp_Lin2d
        	:rtype: None
        * This method implements the algorithms used to create 2d lines passing through a point and perpendicular to a circle.
        	:param ThePnt:
        	:type ThePnt: gp_Pnt2d
        	:param TheCircle:
        	:type TheCircle: gp_Circ2d
        	:rtype: None
        * This method implements the algorithms used to create 2d lines tangent to a circle and perpendicular to a line.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param TheLin:
        	:type TheLin: gp_Lin2d
        	:rtype: None
        * This method implements the algorithms used to create 2d lines tangent to a circle and perpendicular to a circle.
        	:param Qualified1:
        	:type Qualified1: GccEnt_QualifiedCirc
        	:param TheCircle:
        	:type TheCircle: gp_Circ2d
        	:rtype: None
        """
        _GccAna.GccAna_Lin2dTanPer_swiginit(self, _GccAna.new_GccAna_Lin2dTanPer(*args))

    def Intersection2(self, *args) -> "void":
        """
        * Returns informations about the intersection between the solution number Index and the second argument. It returns the first intersection in a case of Lin2dTanPer which is perpendicular to a circle . ParSol is the intrinsic parameter of the point on the solution curv. ParArg is the intrinsic parameter of the point on the argument curv. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param PntSol:
        	:type PntSol: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2dTanPer_Intersection2(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the algorithm succeeded.
        	:rtype: bool
        """
        return _GccAna.GccAna_Lin2dTanPer_IsDone(self, *args)


    def NbSolutions(self, *args) -> "Standard_Integer":
        """
        * Returns the number of solutions. Raises NotDone if the construction algorithm didn't succeed.
        	:rtype: int
        """
        return _GccAna.GccAna_Lin2dTanPer_NbSolutions(self, *args)


    def Tangency1(self, *args) -> "void":
        """
        * Returns informations about the tangency point between the result number Index and the first argument. ParSol is the intrinsic parameter of the point on the solution curv. ParArg is the intrinsic parameter of the point on the argument curv. If the first argument is a point ParArg is equal zero. raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:param ParSol:
        	:type ParSol: float
        	:param ParArg:
        	:type ParArg: float
        	:param Pnt:
        	:type Pnt: gp_Pnt2d
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2dTanPer_Tangency1(self, *args)


    def ThisSolution(self, *args) -> "gp_Lin2d":
        """
        * Returns the solution number Index and raises OutOfRange exception if Index is greater than the number of solutions. Be careful: the Index is only a way to get all the solutions, but is not associated to those outside the context of the algorithm-object. Raises NotDone if the construction algorithm didn't succeed. It raises OutOfRange if Index is greater than the number of solutions.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Lin2d
        """
        return _GccAna.GccAna_Lin2dTanPer_ThisSolution(self, *args)


    def WhichQualifier(self, *args) -> "void":
        """
        * Returns the qualifier Qualif1 of the tangency argument for the solution of index Index computed by this algorithm. The returned qualifier is: - that specified at the start of construction when the solutions are defined as enclosing or outside with respect to the argument, or - that computed during construction (i.e. enclosing or outside) when the solutions are defined as unqualified with respect to the argument, or - GccEnt_noqualifier if the tangency argument is a point. Exceptions Standard_OutOfRange if Index is less than zero or greater than the number of solutions computed by this algorithm. StdFail_NotDone if the construction fails.
        	:param Index:
        	:type Index: int
        	:param Qualif1:
        	:type Qualif1: GccEnt_Position
        	:rtype: None
        """
        return _GccAna.GccAna_Lin2dTanPer_WhichQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Lin2dTanPer
GccAna_Lin2dTanPer.Intersection2 = new_instancemethod(_GccAna.GccAna_Lin2dTanPer_Intersection2, None, GccAna_Lin2dTanPer)
GccAna_Lin2dTanPer.IsDone = new_instancemethod(_GccAna.GccAna_Lin2dTanPer_IsDone, None, GccAna_Lin2dTanPer)
GccAna_Lin2dTanPer.NbSolutions = new_instancemethod(_GccAna.GccAna_Lin2dTanPer_NbSolutions, None, GccAna_Lin2dTanPer)
GccAna_Lin2dTanPer.Tangency1 = new_instancemethod(_GccAna.GccAna_Lin2dTanPer_Tangency1, None, GccAna_Lin2dTanPer)
GccAna_Lin2dTanPer.ThisSolution = new_instancemethod(_GccAna.GccAna_Lin2dTanPer_ThisSolution, None, GccAna_Lin2dTanPer)
GccAna_Lin2dTanPer.WhichQualifier = new_instancemethod(_GccAna.GccAna_Lin2dTanPer_WhichQualifier, None, GccAna_Lin2dTanPer)
GccAna_Lin2dTanPer_swigregister = _GccAna.GccAna_Lin2dTanPer_swigregister
GccAna_Lin2dTanPer_swigregister(GccAna_Lin2dTanPer)

class GccAna_LinPnt2dBisec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a bisecting curve between the line Line1 and the point Point2.
        	:param Line1:
        	:type Line1: gp_Lin2d
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:rtype: None
        """
        _GccAna.GccAna_LinPnt2dBisec_swiginit(self, _GccAna.new_GccAna_LinPnt2dBisec(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the algorithm succeeded.
        	:rtype: bool
        """
        return _GccAna.GccAna_LinPnt2dBisec_IsDone(self, *args)


    def ThisSolution(self, *args) -> "opencascade::handle< GccInt_Bisec >":
        """
        * Returns the number of solutions. It raises NotDone if the construction algorithm didn't succeed.
        	:rtype: opencascade::handle<GccInt_Bisec>
        """
        return _GccAna.GccAna_LinPnt2dBisec_ThisSolution(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_LinPnt2dBisec
GccAna_LinPnt2dBisec.IsDone = new_instancemethod(_GccAna.GccAna_LinPnt2dBisec_IsDone, None, GccAna_LinPnt2dBisec)
GccAna_LinPnt2dBisec.ThisSolution = new_instancemethod(_GccAna.GccAna_LinPnt2dBisec_ThisSolution, None, GccAna_LinPnt2dBisec)
GccAna_LinPnt2dBisec_swigregister = _GccAna.GccAna_LinPnt2dBisec_swigregister
GccAna_LinPnt2dBisec_swigregister(GccAna_LinPnt2dBisec)

class GccAna_Pnt2dBisec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a bisecting line between the points Point1 and Point2.
        	:param Point1:
        	:type Point1: gp_Pnt2d
        	:param Point2:
        	:type Point2: gp_Pnt2d
        	:rtype: None
        """
        _GccAna.GccAna_Pnt2dBisec_swiginit(self, _GccAna.new_GccAna_Pnt2dBisec(*args))

    def HasSolution(self, *args) -> "Standard_Boolean":
        """
        * Returns true if this algorithm has a solution, i.e. if the two points are not coincident.
        	:rtype: bool
        """
        return _GccAna.GccAna_Pnt2dBisec_HasSolution(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true (this construction algorithm never fails).
        	:rtype: bool
        """
        return _GccAna.GccAna_Pnt2dBisec_IsDone(self, *args)


    def ThisSolution(self, *args) -> "gp_Lin2d":
        """
        * Returns a line, representing the solution computed by this algorithm.
        	:rtype: gp_Lin2d
        """
        return _GccAna.GccAna_Pnt2dBisec_ThisSolution(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccAna.delete_GccAna_Pnt2dBisec
GccAna_Pnt2dBisec.HasSolution = new_instancemethod(_GccAna.GccAna_Pnt2dBisec_HasSolution, None, GccAna_Pnt2dBisec)
GccAna_Pnt2dBisec.IsDone = new_instancemethod(_GccAna.GccAna_Pnt2dBisec_IsDone, None, GccAna_Pnt2dBisec)
GccAna_Pnt2dBisec.ThisSolution = new_instancemethod(_GccAna.GccAna_Pnt2dBisec_ThisSolution, None, GccAna_Pnt2dBisec)
GccAna_Pnt2dBisec_swigregister = _GccAna.GccAna_Pnt2dBisec_swigregister
GccAna_Pnt2dBisec_swigregister(GccAna_Pnt2dBisec)



