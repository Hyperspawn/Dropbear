# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GccInt module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_gccint.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GccInt.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GccInt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GccInt')
    _GccInt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GccInt', [dirname(__file__)])
        except ImportError:
            import _GccInt
            return _GccInt
        try:
            _mod = imp.load_module('_GccInt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GccInt = swig_import_helper()
    del swig_import_helper
else:
    import _GccInt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GccInt.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GccInt.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GccInt.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GccInt.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GccInt.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GccInt.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GccInt.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GccInt.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GccInt.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GccInt.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GccInt.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GccInt.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GccInt.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GccInt.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GccInt.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GccInt.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GccInt.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GccInt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GccInt.process_exception(error, method_name, class_name)
process_exception = _GccInt.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
GccInt_Lin = _GccInt.GccInt_Lin
GccInt_Cir = _GccInt.GccInt_Cir
GccInt_Ell = _GccInt.GccInt_Ell
GccInt_Par = _GccInt.GccInt_Par
GccInt_Hpr = _GccInt.GccInt_Hpr
GccInt_Pnt = _GccInt.GccInt_Pnt

def Handle_GccInt_Bisec_Create() -> "opencascade::handle< GccInt_Bisec >":
    return _GccInt.Handle_GccInt_Bisec_Create()
Handle_GccInt_Bisec_Create = _GccInt.Handle_GccInt_Bisec_Create

def Handle_GccInt_Bisec_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_Bisec >":
    return _GccInt.Handle_GccInt_Bisec_DownCast(t)
Handle_GccInt_Bisec_DownCast = _GccInt.Handle_GccInt_Bisec_DownCast

def Handle_GccInt_Bisec_IsNull(t: 'opencascade::handle< GccInt_Bisec > const &') -> "bool":
    return _GccInt.Handle_GccInt_Bisec_IsNull(t)
Handle_GccInt_Bisec_IsNull = _GccInt.Handle_GccInt_Bisec_IsNull

def Handle_GccInt_BCirc_Create() -> "opencascade::handle< GccInt_BCirc >":
    return _GccInt.Handle_GccInt_BCirc_Create()
Handle_GccInt_BCirc_Create = _GccInt.Handle_GccInt_BCirc_Create

def Handle_GccInt_BCirc_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BCirc >":
    return _GccInt.Handle_GccInt_BCirc_DownCast(t)
Handle_GccInt_BCirc_DownCast = _GccInt.Handle_GccInt_BCirc_DownCast

def Handle_GccInt_BCirc_IsNull(t: 'opencascade::handle< GccInt_BCirc > const &') -> "bool":
    return _GccInt.Handle_GccInt_BCirc_IsNull(t)
Handle_GccInt_BCirc_IsNull = _GccInt.Handle_GccInt_BCirc_IsNull

def Handle_GccInt_BElips_Create() -> "opencascade::handle< GccInt_BElips >":
    return _GccInt.Handle_GccInt_BElips_Create()
Handle_GccInt_BElips_Create = _GccInt.Handle_GccInt_BElips_Create

def Handle_GccInt_BElips_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BElips >":
    return _GccInt.Handle_GccInt_BElips_DownCast(t)
Handle_GccInt_BElips_DownCast = _GccInt.Handle_GccInt_BElips_DownCast

def Handle_GccInt_BElips_IsNull(t: 'opencascade::handle< GccInt_BElips > const &') -> "bool":
    return _GccInt.Handle_GccInt_BElips_IsNull(t)
Handle_GccInt_BElips_IsNull = _GccInt.Handle_GccInt_BElips_IsNull

def Handle_GccInt_BHyper_Create() -> "opencascade::handle< GccInt_BHyper >":
    return _GccInt.Handle_GccInt_BHyper_Create()
Handle_GccInt_BHyper_Create = _GccInt.Handle_GccInt_BHyper_Create

def Handle_GccInt_BHyper_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BHyper >":
    return _GccInt.Handle_GccInt_BHyper_DownCast(t)
Handle_GccInt_BHyper_DownCast = _GccInt.Handle_GccInt_BHyper_DownCast

def Handle_GccInt_BHyper_IsNull(t: 'opencascade::handle< GccInt_BHyper > const &') -> "bool":
    return _GccInt.Handle_GccInt_BHyper_IsNull(t)
Handle_GccInt_BHyper_IsNull = _GccInt.Handle_GccInt_BHyper_IsNull

def Handle_GccInt_BLine_Create() -> "opencascade::handle< GccInt_BLine >":
    return _GccInt.Handle_GccInt_BLine_Create()
Handle_GccInt_BLine_Create = _GccInt.Handle_GccInt_BLine_Create

def Handle_GccInt_BLine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BLine >":
    return _GccInt.Handle_GccInt_BLine_DownCast(t)
Handle_GccInt_BLine_DownCast = _GccInt.Handle_GccInt_BLine_DownCast

def Handle_GccInt_BLine_IsNull(t: 'opencascade::handle< GccInt_BLine > const &') -> "bool":
    return _GccInt.Handle_GccInt_BLine_IsNull(t)
Handle_GccInt_BLine_IsNull = _GccInt.Handle_GccInt_BLine_IsNull

def Handle_GccInt_BParab_Create() -> "opencascade::handle< GccInt_BParab >":
    return _GccInt.Handle_GccInt_BParab_Create()
Handle_GccInt_BParab_Create = _GccInt.Handle_GccInt_BParab_Create

def Handle_GccInt_BParab_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BParab >":
    return _GccInt.Handle_GccInt_BParab_DownCast(t)
Handle_GccInt_BParab_DownCast = _GccInt.Handle_GccInt_BParab_DownCast

def Handle_GccInt_BParab_IsNull(t: 'opencascade::handle< GccInt_BParab > const &') -> "bool":
    return _GccInt.Handle_GccInt_BParab_IsNull(t)
Handle_GccInt_BParab_IsNull = _GccInt.Handle_GccInt_BParab_IsNull

def Handle_GccInt_BPoint_Create() -> "opencascade::handle< GccInt_BPoint >":
    return _GccInt.Handle_GccInt_BPoint_Create()
Handle_GccInt_BPoint_Create = _GccInt.Handle_GccInt_BPoint_Create

def Handle_GccInt_BPoint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BPoint >":
    return _GccInt.Handle_GccInt_BPoint_DownCast(t)
Handle_GccInt_BPoint_DownCast = _GccInt.Handle_GccInt_BPoint_DownCast

def Handle_GccInt_BPoint_IsNull(t: 'opencascade::handle< GccInt_BPoint > const &') -> "bool":
    return _GccInt.Handle_GccInt_BPoint_IsNull(t)
Handle_GccInt_BPoint_IsNull = _GccInt.Handle_GccInt_BPoint_IsNull
class GccInt_Bisec(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ArcType(self, *args) -> "GccInt_IType":
        """
        * Returns the type of bisecting object (line, circle, parabola, hyperbola, ellipse, point).
        	:rtype: GccInt_IType
        """
        return _GccInt.GccInt_Bisec_ArcType(self, *args)


    def Circle(self, *args) -> "gp_Circ2d":
        """
        * Returns the bisecting line when ArcType returns Cir. An exception DomainError is raised if ArcType is not a Cir.
        	:rtype: gp_Circ2d
        """
        return _GccInt.GccInt_Bisec_Circle(self, *args)


    def Ellipse(self, *args) -> "gp_Elips2d":
        """
        * Returns the bisecting line when ArcType returns Ell. An exception DomainError is raised if ArcType is not an Ell.
        	:rtype: gp_Elips2d
        """
        return _GccInt.GccInt_Bisec_Ellipse(self, *args)


    def Hyperbola(self, *args) -> "gp_Hypr2d":
        """
        * Returns the bisecting line when ArcType returns Hpr. An exception DomainError is raised if ArcType is not a Hpr.
        	:rtype: gp_Hypr2d
        """
        return _GccInt.GccInt_Bisec_Hyperbola(self, *args)


    def Line(self, *args) -> "gp_Lin2d":
        """
        * Returns the bisecting line when ArcType returns Lin. An exception DomainError is raised if ArcType is not a Lin.
        	:rtype: gp_Lin2d
        """
        return _GccInt.GccInt_Bisec_Line(self, *args)


    def Parabola(self, *args) -> "gp_Parab2d":
        """
        * Returns the bisecting line when ArcType returns Par. An exception DomainError is raised if ArcType is not a Par.
        	:rtype: gp_Parab2d
        """
        return _GccInt.GccInt_Bisec_Parabola(self, *args)


    def Point(self, *args) -> "gp_Pnt2d":
        """
        * Returns the bisecting line when ArcType returns Pnt. An exception DomainError is raised if ArcType is not a Pnt.
        	:rtype: gp_Pnt2d
        """
        return _GccInt.GccInt_Bisec_Point(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GccInt_Bisec_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_Bisec
GccInt_Bisec.ArcType = new_instancemethod(_GccInt.GccInt_Bisec_ArcType, None, GccInt_Bisec)
GccInt_Bisec.Circle = new_instancemethod(_GccInt.GccInt_Bisec_Circle, None, GccInt_Bisec)
GccInt_Bisec.Ellipse = new_instancemethod(_GccInt.GccInt_Bisec_Ellipse, None, GccInt_Bisec)
GccInt_Bisec.Hyperbola = new_instancemethod(_GccInt.GccInt_Bisec_Hyperbola, None, GccInt_Bisec)
GccInt_Bisec.Line = new_instancemethod(_GccInt.GccInt_Bisec_Line, None, GccInt_Bisec)
GccInt_Bisec.Parabola = new_instancemethod(_GccInt.GccInt_Bisec_Parabola, None, GccInt_Bisec)
GccInt_Bisec.Point = new_instancemethod(_GccInt.GccInt_Bisec_Point, None, GccInt_Bisec)
GccInt_Bisec_swigregister = _GccInt.GccInt_Bisec_swigregister
GccInt_Bisec_swigregister(GccInt_Bisec)

class GccInt_BCirc(GccInt_Bisec):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a bisecting curve whose geometry is the 2D circle Circ.
        	:param Circ:
        	:type Circ: gp_Circ2d
        	:rtype: None
        """
        _GccInt.GccInt_BCirc_swiginit(self, _GccInt.new_GccInt_BCirc(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BCirc_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BCirc
GccInt_BCirc_swigregister = _GccInt.GccInt_BCirc_swigregister
GccInt_BCirc_swigregister(GccInt_BCirc)

class GccInt_BElips(GccInt_Bisec):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a bisecting curve whose geometry is the 2D ellipse Ellipse.
        	:param Ellipse:
        	:type Ellipse: gp_Elips2d
        	:rtype: None
        """
        _GccInt.GccInt_BElips_swiginit(self, _GccInt.new_GccInt_BElips(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BElips_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BElips
GccInt_BElips_swigregister = _GccInt.GccInt_BElips_swigregister
GccInt_BElips_swigregister(GccInt_BElips)

class GccInt_BHyper(GccInt_Bisec):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a bisecting curve whose geometry is the 2D hyperbola Hyper.
        	:param Hyper:
        	:type Hyper: gp_Hypr2d
        	:rtype: None
        """
        _GccInt.GccInt_BHyper_swiginit(self, _GccInt.new_GccInt_BHyper(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BHyper_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BHyper
GccInt_BHyper_swigregister = _GccInt.GccInt_BHyper_swigregister
GccInt_BHyper_swigregister(GccInt_BHyper)

class GccInt_BLine(GccInt_Bisec):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a bisecting line whose geometry is the 2D line Line.
        	:param Line:
        	:type Line: gp_Lin2d
        	:rtype: None
        """
        _GccInt.GccInt_BLine_swiginit(self, _GccInt.new_GccInt_BLine(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BLine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BLine
GccInt_BLine_swigregister = _GccInt.GccInt_BLine_swigregister
GccInt_BLine_swigregister(GccInt_BLine)

class GccInt_BParab(GccInt_Bisec):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a bisecting curve whose geometry is the 2D parabola Parab.
        	:param Parab:
        	:type Parab: gp_Parab2d
        	:rtype: None
        """
        _GccInt.GccInt_BParab_swiginit(self, _GccInt.new_GccInt_BParab(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BParab_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BParab
GccInt_BParab_swigregister = _GccInt.GccInt_BParab_swigregister
GccInt_BParab_swigregister(GccInt_BParab)

class GccInt_BPoint(GccInt_Bisec):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a bisecting object whose geometry is the 2D point Point.
        	:param Point:
        	:type Point: gp_Pnt2d
        	:rtype: None
        """
        _GccInt.GccInt_BPoint_swiginit(self, _GccInt.new_GccInt_BPoint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BPoint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BPoint
GccInt_BPoint_swigregister = _GccInt.GccInt_BPoint_swigregister
GccInt_BPoint_swigregister(GccInt_BPoint)



