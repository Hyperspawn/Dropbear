# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Geom2dConvert module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geom2dconvert.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Geom2dConvert.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Geom2dConvert')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Geom2dConvert')
    _Geom2dConvert = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dConvert', [dirname(__file__)])
        except ImportError:
            import _Geom2dConvert
            return _Geom2dConvert
        try:
            _mod = imp.load_module('_Geom2dConvert', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Geom2dConvert = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dConvert
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dConvert.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Geom2dConvert.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Geom2dConvert.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Geom2dConvert.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Geom2dConvert.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Geom2dConvert.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Geom2dConvert.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Geom2dConvert.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Geom2dConvert.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Geom2dConvert.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Geom2dConvert.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Geom2dConvert.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Geom2dConvert.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Geom2dConvert.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Geom2dConvert.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Geom2dConvert.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Geom2dConvert.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Geom2dConvert.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Geom2dConvert.process_exception(error, method_name, class_name)
process_exception = _Geom2dConvert.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColGeom2d
import OCC.Core.Convert
import OCC.Core.Adaptor2d
class geom2dconvert(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def C0BSplineToArrayOfC1BSplineCurve(*args) -> "void":
        """
        * This Method reduces as far as it is possible the multiplicities of the knots of the BSpline BS.(keeping the geometry). It returns an array of BSpline C1. Tolerance is a geometrical tolerance
        	:param BS:
        	:type BS: Geom2d_BSplineCurve
        	:param tabBS:
        	:type tabBS: TColGeom2d_HArray1OfBSplineCurve
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: void
        * This Method reduces as far as it is possible the multiplicities of the knots of the BSpline BS.(keeping the geometry). It returns an array of BSpline C1. tolerance is a geometrical tolerance
        	:param BS:
        	:type BS: Geom2d_BSplineCurve
        	:param tabBS:
        	:type tabBS: TColGeom2d_HArray1OfBSplineCurve
        	:param AngularTolerance:
        	:type AngularTolerance: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: void
        """
        return _Geom2dConvert.geom2dconvert_C0BSplineToArrayOfC1BSplineCurve(*args)

    C0BSplineToArrayOfC1BSplineCurve = staticmethod(C0BSplineToArrayOfC1BSplineCurve)

    def C0BSplineToC1BSplineCurve(*args) -> "void":
        """
        * This Method reduces as far as it is possible the multiplicities of the knots of the BSpline BS.(keeping the geometry). It returns a new BSpline which could still be C0. tolerance is a geometrical tolerance
        	:param BS:
        	:type BS: Geom2d_BSplineCurve
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: void
        """
        return _Geom2dConvert.geom2dconvert_C0BSplineToC1BSplineCurve(*args)

    C0BSplineToC1BSplineCurve = staticmethod(C0BSplineToC1BSplineCurve)

    def ConcatC1(*args) -> "Standard_Boolean &":
        """
        * This Method concatenates C1 the ArrayOfCurves as far as it is possible. ArrayOfCurves[0..N-1] ArrayOfToler contains the biggest tolerance of the two points shared by two consecutives curves. Its dimension: [0..N-2] ClosedFlag indicates if the ArrayOfCurves is closed. In this case ClosedTolerance contains the biggest tolerance of the two points which are at the closure. Otherwise its value is 0.0 ClosedFlag becomes False on the output if it is impossible to build closed curve.
        	:param ArrayOfCurves:
        	:type ArrayOfCurves: TColGeom2d_Array1OfBSplineCurve
        	:param ArrayOfToler:
        	:type ArrayOfToler: TColStd_Array1OfReal
        	:param ArrayOfIndices:
        	:type ArrayOfIndices: TColStd_HArray1OfInteger
        	:param ArrayOfConcatenated:
        	:type ArrayOfConcatenated: TColGeom2d_HArray1OfBSplineCurve
        	:param ClosedFlag:
        	:type ClosedFlag: bool
        	:param ClosedTolerance:
        	:type ClosedTolerance: float
        	:rtype: void
        * This Method concatenates C1 the ArrayOfCurves as far as it is possible. ArrayOfCurves[0..N-1] ArrayOfToler contains the biggest tolerance of the two points shared by two consecutives curves. Its dimension: [0..N-2] ClosedFlag indicates if the ArrayOfCurves is closed. In this case ClosedTolerance contains the biggest tolerance of the two points which are at the closure. Otherwise its value is 0.0 ClosedFlag becomes False on the output if it is impossible to build closed curve.
        	:param ArrayOfCurves:
        	:type ArrayOfCurves: TColGeom2d_Array1OfBSplineCurve
        	:param ArrayOfToler:
        	:type ArrayOfToler: TColStd_Array1OfReal
        	:param ArrayOfIndices:
        	:type ArrayOfIndices: TColStd_HArray1OfInteger
        	:param ArrayOfConcatenated:
        	:type ArrayOfConcatenated: TColGeom2d_HArray1OfBSplineCurve
        	:param ClosedFlag:
        	:type ClosedFlag: bool
        	:param ClosedTolerance:
        	:type ClosedTolerance: float
        	:param AngularTolerance:
        	:type AngularTolerance: float
        	:rtype: void
        """
        return _Geom2dConvert.geom2dconvert_ConcatC1(*args)

    ConcatC1 = staticmethod(ConcatC1)

    def ConcatG1(*args) -> "Standard_Boolean &":
        """
        * This Method concatenates G1 the ArrayOfCurves as far as it is possible. ArrayOfCurves[0..N-1] ArrayOfToler contains the biggest tolerance of the two points shared by two consecutives curves. Its dimension: [0..N-2] ClosedFlag indicates if the ArrayOfCurves is closed. In this case ClosedTolerance contains the biggest tolerance of the two points which are at the closure. Otherwise its value is 0.0 ClosedFlag becomes False on the output if it is impossible to build closed curve.
        	:param ArrayOfCurves:
        	:type ArrayOfCurves: TColGeom2d_Array1OfBSplineCurve
        	:param ArrayOfToler:
        	:type ArrayOfToler: TColStd_Array1OfReal
        	:param ArrayOfConcatenated:
        	:type ArrayOfConcatenated: TColGeom2d_HArray1OfBSplineCurve
        	:param ClosedFlag:
        	:type ClosedFlag: bool
        	:param ClosedTolerance:
        	:type ClosedTolerance: float
        	:rtype: void
        """
        return _Geom2dConvert.geom2dconvert_ConcatG1(*args)

    ConcatG1 = staticmethod(ConcatG1)

    def CurveToBSplineCurve(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        * This function converts a non infinite curve from Geom into a B-spline curve. C must be an ellipse or a circle or a trimmed conic or a trimmed line or a Bezier curve or a trimmed Bezier curve or a BSpline curve or a trimmed BSpline curve or an Offset curve or a trimmed Offset curve. The returned B-spline is not periodic except if C is a Circle or an Ellipse. ParameterisationType applies only if the curve is a Circle or an ellipse : TgtThetaOver2, TgtThetaOver2_1, TgtThetaOver2_2, TgtThetaOver2_3, TgtThetaOver2_4, Purpose: this is the classical rational parameterisation 2 1 - t cos(theta) = ------ 2 1 + t //! 2t sin(theta) = ------ 2 1 + t //! t = tan (theta/2) //! with TgtThetaOver2 the routine will compute the number of spans using the rule num_spans = [ (ULast - UFirst) / 1.2 ] + 1 with TgtThetaOver2_N, N spans will be forced: an error will be raized if (ULast - UFirst) >= PI and N = 1, ULast - UFirst >= 2 PI and N = 2 //! QuasiAngular, here t is a rational function that approximates theta ----> tan(theta/2). Neverthless the composing with above function yields exact functions whose square sum up to 1 RationalC1 ; t is replaced by a polynomial function of u so as to grant C1 contiuity across knots. Exceptions Standard_DomainError if the curve C is infinite. Standard_ConstructionError: - if C is a complete circle or ellipse, and if Parameterisation is not equal to Convert_TgtThetaOver2 or to Convert_RationalC1, or - if C is a trimmed circle or ellipse and if Parameterisation is equal to Convert_TgtThetaOver2_1 and if U2 - U1 > 0.9999 * Pi where U1 and U2 are respectively the first and the last parameters of the trimmed curve (this method of parameterization cannot be used to convert a half-circle or a half-ellipse, for example), or - if C is a trimmed circle or ellipse and Parameterisation is equal to Convert_TgtThetaOver2_2 and U2 - U1 > 1.9999 * Pi where U1 and U2 are respectively the first and the last parameters of the trimmed curve (this method of parameterization cannot be used to convert a quasi-complete circle or ellipse).
        	:param C:
        	:type C: Geom2d_Curve
        	:param Parameterisation: default value is Convert_TgtThetaOver2
        	:type Parameterisation: Convert_ParameterisationType
        	:rtype: opencascade::handle<Geom2d_BSplineCurve>
        """
        return _Geom2dConvert.geom2dconvert_CurveToBSplineCurve(*args)

    CurveToBSplineCurve = staticmethod(CurveToBSplineCurve)

    def SplitBSplineCurve(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        * -- Convert a curve to BSpline by Approximation //! This method computes the arc of B-spline curve between the two knots FromK1 and ToK2. If C is periodic the arc has the same orientation as C if SameOrientation = Standard_True. If C is not periodic SameOrientation is not used for the computation and C is oriented from the knot fromK1 to the knot toK2. We just keep the local definition of C between the knots FromK1 and ToK2. The returned B-spline curve has its first and last knots with a multiplicity equal to degree + 1, where degree is the polynomial degree of C. The indexes of the knots FromK1 and ToK2 doesn't include the repetition of multiple knots in their definition. //! Raised if FromK1 or ToK2 are out of the bounds [FirstUKnotIndex, LastUKnotIndex] Raised if FromK1 = ToK2
        	:param C:
        	:type C: Geom2d_BSplineCurve
        	:param FromK1:
        	:type FromK1: int
        	:param ToK2:
        	:type ToK2: int
        	:param SameOrientation: default value is Standard_True
        	:type SameOrientation: bool
        	:rtype: opencascade::handle<Geom2d_BSplineCurve>
        * This function computes the segment of B-spline curve between the parametric values FromU1, ToU2. If C is periodic the arc has the same orientation as C if SameOrientation = True. If C is not periodic SameOrientation is not used for the computation and C is oriented fromU1 toU2. If U1 and U2 and two parametric values we consider that U1 = U2 if Abs (U1 - U2) <= ParametricTolerance and ParametricTolerance must be greater or equal to Resolution from package gp. //! Raised if FromU1 or ToU2 are out of the parametric bounds of the curve (The tolerance criterion is ParametricTolerance). Raised if Abs (FromU1 - ToU2) <= ParametricTolerance Raised if ParametricTolerance < Resolution from gp.
        	:param C:
        	:type C: Geom2d_BSplineCurve
        	:param FromU1:
        	:type FromU1: float
        	:param ToU2:
        	:type ToU2: float
        	:param ParametricTolerance:
        	:type ParametricTolerance: float
        	:param SameOrientation: default value is Standard_True
        	:type SameOrientation: bool
        	:rtype: opencascade::handle<Geom2d_BSplineCurve>
        """
        return _Geom2dConvert.geom2dconvert_SplitBSplineCurve(*args)

    SplitBSplineCurve = staticmethod(SplitBSplineCurve)

    __repr__ = _dumps_object


    def __init__(self):
        _Geom2dConvert.geom2dconvert_swiginit(self, _Geom2dConvert.new_geom2dconvert())
    __swig_destroy__ = _Geom2dConvert.delete_geom2dconvert
geom2dconvert_swigregister = _Geom2dConvert.geom2dconvert_swigregister
geom2dconvert_swigregister(geom2dconvert)

def geom2dconvert_C0BSplineToArrayOfC1BSplineCurve(*args) -> "void":
    """
    * This Method reduces as far as it is possible the multiplicities of the knots of the BSpline BS.(keeping the geometry). It returns an array of BSpline C1. Tolerance is a geometrical tolerance
    	:param BS:
    	:type BS: Geom2d_BSplineCurve
    	:param tabBS:
    	:type tabBS: TColGeom2d_HArray1OfBSplineCurve
    	:param Tolerance:
    	:type Tolerance: float
    	:rtype: void
    * This Method reduces as far as it is possible the multiplicities of the knots of the BSpline BS.(keeping the geometry). It returns an array of BSpline C1. tolerance is a geometrical tolerance
    	:param BS:
    	:type BS: Geom2d_BSplineCurve
    	:param tabBS:
    	:type tabBS: TColGeom2d_HArray1OfBSplineCurve
    	:param AngularTolerance:
    	:type AngularTolerance: float
    	:param Tolerance:
    	:type Tolerance: float
    	:rtype: void
    """
    return _Geom2dConvert.geom2dconvert_C0BSplineToArrayOfC1BSplineCurve(*args)

def geom2dconvert_C0BSplineToC1BSplineCurve(*args) -> "void":
    """
    * This Method reduces as far as it is possible the multiplicities of the knots of the BSpline BS.(keeping the geometry). It returns a new BSpline which could still be C0. tolerance is a geometrical tolerance
    	:param BS:
    	:type BS: Geom2d_BSplineCurve
    	:param Tolerance:
    	:type Tolerance: float
    	:rtype: void
    """
    return _Geom2dConvert.geom2dconvert_C0BSplineToC1BSplineCurve(*args)

def geom2dconvert_ConcatC1(*args) -> "Standard_Boolean &":
    """
    * This Method concatenates C1 the ArrayOfCurves as far as it is possible. ArrayOfCurves[0..N-1] ArrayOfToler contains the biggest tolerance of the two points shared by two consecutives curves. Its dimension: [0..N-2] ClosedFlag indicates if the ArrayOfCurves is closed. In this case ClosedTolerance contains the biggest tolerance of the two points which are at the closure. Otherwise its value is 0.0 ClosedFlag becomes False on the output if it is impossible to build closed curve.
    	:param ArrayOfCurves:
    	:type ArrayOfCurves: TColGeom2d_Array1OfBSplineCurve
    	:param ArrayOfToler:
    	:type ArrayOfToler: TColStd_Array1OfReal
    	:param ArrayOfIndices:
    	:type ArrayOfIndices: TColStd_HArray1OfInteger
    	:param ArrayOfConcatenated:
    	:type ArrayOfConcatenated: TColGeom2d_HArray1OfBSplineCurve
    	:param ClosedFlag:
    	:type ClosedFlag: bool
    	:param ClosedTolerance:
    	:type ClosedTolerance: float
    	:rtype: void
    * This Method concatenates C1 the ArrayOfCurves as far as it is possible. ArrayOfCurves[0..N-1] ArrayOfToler contains the biggest tolerance of the two points shared by two consecutives curves. Its dimension: [0..N-2] ClosedFlag indicates if the ArrayOfCurves is closed. In this case ClosedTolerance contains the biggest tolerance of the two points which are at the closure. Otherwise its value is 0.0 ClosedFlag becomes False on the output if it is impossible to build closed curve.
    	:param ArrayOfCurves:
    	:type ArrayOfCurves: TColGeom2d_Array1OfBSplineCurve
    	:param ArrayOfToler:
    	:type ArrayOfToler: TColStd_Array1OfReal
    	:param ArrayOfIndices:
    	:type ArrayOfIndices: TColStd_HArray1OfInteger
    	:param ArrayOfConcatenated:
    	:type ArrayOfConcatenated: TColGeom2d_HArray1OfBSplineCurve
    	:param ClosedFlag:
    	:type ClosedFlag: bool
    	:param ClosedTolerance:
    	:type ClosedTolerance: float
    	:param AngularTolerance:
    	:type AngularTolerance: float
    	:rtype: void
    """
    return _Geom2dConvert.geom2dconvert_ConcatC1(*args)

def geom2dconvert_ConcatG1(*args) -> "Standard_Boolean &":
    """
    * This Method concatenates G1 the ArrayOfCurves as far as it is possible. ArrayOfCurves[0..N-1] ArrayOfToler contains the biggest tolerance of the two points shared by two consecutives curves. Its dimension: [0..N-2] ClosedFlag indicates if the ArrayOfCurves is closed. In this case ClosedTolerance contains the biggest tolerance of the two points which are at the closure. Otherwise its value is 0.0 ClosedFlag becomes False on the output if it is impossible to build closed curve.
    	:param ArrayOfCurves:
    	:type ArrayOfCurves: TColGeom2d_Array1OfBSplineCurve
    	:param ArrayOfToler:
    	:type ArrayOfToler: TColStd_Array1OfReal
    	:param ArrayOfConcatenated:
    	:type ArrayOfConcatenated: TColGeom2d_HArray1OfBSplineCurve
    	:param ClosedFlag:
    	:type ClosedFlag: bool
    	:param ClosedTolerance:
    	:type ClosedTolerance: float
    	:rtype: void
    """
    return _Geom2dConvert.geom2dconvert_ConcatG1(*args)

def geom2dconvert_CurveToBSplineCurve(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
    """
    * This function converts a non infinite curve from Geom into a B-spline curve. C must be an ellipse or a circle or a trimmed conic or a trimmed line or a Bezier curve or a trimmed Bezier curve or a BSpline curve or a trimmed BSpline curve or an Offset curve or a trimmed Offset curve. The returned B-spline is not periodic except if C is a Circle or an Ellipse. ParameterisationType applies only if the curve is a Circle or an ellipse : TgtThetaOver2, TgtThetaOver2_1, TgtThetaOver2_2, TgtThetaOver2_3, TgtThetaOver2_4, Purpose: this is the classical rational parameterisation 2 1 - t cos(theta) = ------ 2 1 + t //! 2t sin(theta) = ------ 2 1 + t //! t = tan (theta/2) //! with TgtThetaOver2 the routine will compute the number of spans using the rule num_spans = [ (ULast - UFirst) / 1.2 ] + 1 with TgtThetaOver2_N, N spans will be forced: an error will be raized if (ULast - UFirst) >= PI and N = 1, ULast - UFirst >= 2 PI and N = 2 //! QuasiAngular, here t is a rational function that approximates theta ----> tan(theta/2). Neverthless the composing with above function yields exact functions whose square sum up to 1 RationalC1 ; t is replaced by a polynomial function of u so as to grant C1 contiuity across knots. Exceptions Standard_DomainError if the curve C is infinite. Standard_ConstructionError: - if C is a complete circle or ellipse, and if Parameterisation is not equal to Convert_TgtThetaOver2 or to Convert_RationalC1, or - if C is a trimmed circle or ellipse and if Parameterisation is equal to Convert_TgtThetaOver2_1 and if U2 - U1 > 0.9999 * Pi where U1 and U2 are respectively the first and the last parameters of the trimmed curve (this method of parameterization cannot be used to convert a half-circle or a half-ellipse, for example), or - if C is a trimmed circle or ellipse and Parameterisation is equal to Convert_TgtThetaOver2_2 and U2 - U1 > 1.9999 * Pi where U1 and U2 are respectively the first and the last parameters of the trimmed curve (this method of parameterization cannot be used to convert a quasi-complete circle or ellipse).
    	:param C:
    	:type C: Geom2d_Curve
    	:param Parameterisation: default value is Convert_TgtThetaOver2
    	:type Parameterisation: Convert_ParameterisationType
    	:rtype: opencascade::handle<Geom2d_BSplineCurve>
    """
    return _Geom2dConvert.geom2dconvert_CurveToBSplineCurve(*args)

def geom2dconvert_SplitBSplineCurve(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
    """
    * -- Convert a curve to BSpline by Approximation //! This method computes the arc of B-spline curve between the two knots FromK1 and ToK2. If C is periodic the arc has the same orientation as C if SameOrientation = Standard_True. If C is not periodic SameOrientation is not used for the computation and C is oriented from the knot fromK1 to the knot toK2. We just keep the local definition of C between the knots FromK1 and ToK2. The returned B-spline curve has its first and last knots with a multiplicity equal to degree + 1, where degree is the polynomial degree of C. The indexes of the knots FromK1 and ToK2 doesn't include the repetition of multiple knots in their definition. //! Raised if FromK1 or ToK2 are out of the bounds [FirstUKnotIndex, LastUKnotIndex] Raised if FromK1 = ToK2
    	:param C:
    	:type C: Geom2d_BSplineCurve
    	:param FromK1:
    	:type FromK1: int
    	:param ToK2:
    	:type ToK2: int
    	:param SameOrientation: default value is Standard_True
    	:type SameOrientation: bool
    	:rtype: opencascade::handle<Geom2d_BSplineCurve>
    * This function computes the segment of B-spline curve between the parametric values FromU1, ToU2. If C is periodic the arc has the same orientation as C if SameOrientation = True. If C is not periodic SameOrientation is not used for the computation and C is oriented fromU1 toU2. If U1 and U2 and two parametric values we consider that U1 = U2 if Abs (U1 - U2) <= ParametricTolerance and ParametricTolerance must be greater or equal to Resolution from package gp. //! Raised if FromU1 or ToU2 are out of the parametric bounds of the curve (The tolerance criterion is ParametricTolerance). Raised if Abs (FromU1 - ToU2) <= ParametricTolerance Raised if ParametricTolerance < Resolution from gp.
    	:param C:
    	:type C: Geom2d_BSplineCurve
    	:param FromU1:
    	:type FromU1: float
    	:param ToU2:
    	:type ToU2: float
    	:param ParametricTolerance:
    	:type ParametricTolerance: float
    	:param SameOrientation: default value is Standard_True
    	:type SameOrientation: bool
    	:rtype: opencascade::handle<Geom2d_BSplineCurve>
    """
    return _Geom2dConvert.geom2dconvert_SplitBSplineCurve(*args)

class Geom2dConvert_ApproxCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Curve(self, *args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        * Returns the 2D BSpline curve resulting from the approximation algorithm.
        	:rtype: opencascade::handle<Geom2d_BSplineCurve>
        """
        return _Geom2dConvert.Geom2dConvert_ApproxCurve_Curve(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(Geom2dConvert_ApproxCurve self) -> std::string"""
        return _Geom2dConvert.Geom2dConvert_ApproxCurve_DumpToString(self)


    def __init__(self, *args):
        """
        * Constructs an approximation framework defined by - the 2D conic Curve - the tolerance value Tol2d - the degree of continuity Order - the maximum number of segments allowed MaxSegments - the highest degree MaxDegree which the polynomial defining the BSpline is allowed to have.
        	:param Curve:
        	:type Curve: Geom2d_Curve
        	:param Tol2d:
        	:type Tol2d: float
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:param MaxSegments:
        	:type MaxSegments: int
        	:param MaxDegree:
        	:type MaxDegree: int
        	:rtype: None
        * Constructs an approximation framework defined by - the 2D conic Curve - the tolerance value Tol2d - the degree of continuity Order - the maximum number of segments allowed MaxSegments - the highest degree MaxDegree which the polynomial defining the BSpline is allowed to have.
        	:param Curve:
        	:type Curve: Adaptor2d_HCurve2d
        	:param Tol2d:
        	:type Tol2d: float
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:param MaxSegments:
        	:type MaxSegments: int
        	:param MaxDegree:
        	:type MaxDegree: int
        	:rtype: None
        """
        _Geom2dConvert.Geom2dConvert_ApproxCurve_swiginit(self, _Geom2dConvert.new_Geom2dConvert_ApproxCurve(*args))

    def HasResult(self, *args) -> "Standard_Boolean":
        """
        * returns Standard_True if the approximation did come out with a result that is not NECESSARELY within the required tolerance
        	:rtype: bool
        """
        return _Geom2dConvert.Geom2dConvert_ApproxCurve_HasResult(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * returns Standard_True if the approximation has been done with within requiered tolerance
        	:rtype: bool
        """
        return _Geom2dConvert.Geom2dConvert_ApproxCurve_IsDone(self, *args)


    def MaxError(self, *args) -> "Standard_Real":
        """
        * Returns the greatest distance between a point on the source conic and the BSpline curve resulting from the approximation. (>0 when an approximation has been done, 0 if no approximation)
        	:rtype: float
        """
        return _Geom2dConvert.Geom2dConvert_ApproxCurve_MaxError(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dConvert.delete_Geom2dConvert_ApproxCurve
Geom2dConvert_ApproxCurve.Curve = new_instancemethod(_Geom2dConvert.Geom2dConvert_ApproxCurve_Curve, None, Geom2dConvert_ApproxCurve)
Geom2dConvert_ApproxCurve.DumpToString = new_instancemethod(_Geom2dConvert.Geom2dConvert_ApproxCurve_DumpToString, None, Geom2dConvert_ApproxCurve)
Geom2dConvert_ApproxCurve.HasResult = new_instancemethod(_Geom2dConvert.Geom2dConvert_ApproxCurve_HasResult, None, Geom2dConvert_ApproxCurve)
Geom2dConvert_ApproxCurve.IsDone = new_instancemethod(_Geom2dConvert.Geom2dConvert_ApproxCurve_IsDone, None, Geom2dConvert_ApproxCurve)
Geom2dConvert_ApproxCurve.MaxError = new_instancemethod(_Geom2dConvert.Geom2dConvert_ApproxCurve_MaxError, None, Geom2dConvert_ApproxCurve)
Geom2dConvert_ApproxCurve_swigregister = _Geom2dConvert.Geom2dConvert_ApproxCurve_swigregister
Geom2dConvert_ApproxCurve_swigregister(Geom2dConvert_ApproxCurve)

class Geom2dConvert_BSplineCurveKnotSplitting(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Determines points at which the BSpline curve BasisCurve should be split in order to obtain arcs with a degree of continuity equal to ContinuityRange. These points are knot values of BasisCurve. They are identified by indices in the knots table of BasisCurve. Use the available interrogation functions to access computed values, followed by the global function SplitBSplineCurve (provided by the package Geom2dConvert) to split the curve. Exceptions Standard_RangeError if ContinuityRange is less than zero.
        	:param BasisCurve:
        	:type BasisCurve: Geom2d_BSplineCurve
        	:param ContinuityRange:
        	:type ContinuityRange: int
        	:rtype: None
        """
        _Geom2dConvert.Geom2dConvert_BSplineCurveKnotSplitting_swiginit(self, _Geom2dConvert.new_Geom2dConvert_BSplineCurveKnotSplitting(*args))

    def NbSplits(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points at which the analysed BSpline curve should be split, in order to obtain arcs with the continuity required by this framework. All these points correspond to knot values. Note that the first and last points of the curve, which bound the first and last arcs, are counted among these splitting points.
        	:rtype: int
        """
        return _Geom2dConvert.Geom2dConvert_BSplineCurveKnotSplitting_NbSplits(self, *args)


    def SplitValue(self, *args) -> "Standard_Integer":
        """
        * Returns the split knot of index Index to the split knots table computed in this framework. The returned value is an index in the knots table of the BSpline curve analysed by this algorithm. Notes: - If Index is equal to 1, the corresponding knot gives the first point of the curve. - If Index is equal to the number of split knots computed in this framework, the corresponding point is the last point of the curve. Exceptions Standard_RangeError if Index is less than 1 or greater than the number of split knots computed in this framework.
        	:param Index:
        	:type Index: int
        	:rtype: int
        """
        return _Geom2dConvert.Geom2dConvert_BSplineCurveKnotSplitting_SplitValue(self, *args)


    def Splitting(self, *args) -> "void":
        """
        * Loads the SplitValues table with the split knots values computed in this framework. Each value in the table is an index in the knots table of the BSpline curve analysed by this algorithm. The values in SplitValues are given in ascending order and comprise the indices of the knots which give the first and last points of the curve. Use two consecutive values from the table as arguments of the global function SplitBSplineCurve (provided by the package Geom2dConvert) to split the curve. Exceptions Standard_DimensionError if the array SplitValues was not created with the following bounds: - 1, and - the number of split points computed in this framework (as given by the function NbSplits).
        	:param SplitValues:
        	:type SplitValues: TColStd_Array1OfInteger
        	:rtype: None
        """
        return _Geom2dConvert.Geom2dConvert_BSplineCurveKnotSplitting_Splitting(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dConvert.delete_Geom2dConvert_BSplineCurveKnotSplitting
Geom2dConvert_BSplineCurveKnotSplitting.NbSplits = new_instancemethod(_Geom2dConvert.Geom2dConvert_BSplineCurveKnotSplitting_NbSplits, None, Geom2dConvert_BSplineCurveKnotSplitting)
Geom2dConvert_BSplineCurveKnotSplitting.SplitValue = new_instancemethod(_Geom2dConvert.Geom2dConvert_BSplineCurveKnotSplitting_SplitValue, None, Geom2dConvert_BSplineCurveKnotSplitting)
Geom2dConvert_BSplineCurveKnotSplitting.Splitting = new_instancemethod(_Geom2dConvert.Geom2dConvert_BSplineCurveKnotSplitting_Splitting, None, Geom2dConvert_BSplineCurveKnotSplitting)
Geom2dConvert_BSplineCurveKnotSplitting_swigregister = _Geom2dConvert.Geom2dConvert_BSplineCurveKnotSplitting_swigregister
Geom2dConvert_BSplineCurveKnotSplitting_swigregister(Geom2dConvert_BSplineCurveKnotSplitting)

class Geom2dConvert_BSplineCurveToBezierCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Arc(self, *args) -> "opencascade::handle< Geom2d_BezierCurve >":
        """
        * Constructs and returns the Bezier curve of index Index to the table of adjacent Bezier arcs computed by this algorithm. This Bezier curve has the same orientation as the BSpline curve analyzed in this framework. Exceptions Standard_OutOfRange if Index is less than 1 or greater than the number of adjacent Bezier arcs computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<Geom2d_BezierCurve>
        """
        return _Geom2dConvert.Geom2dConvert_BSplineCurveToBezierCurve_Arc(self, *args)


    def Arcs(self, *args) -> "void":
        """
        * Constructs all the Bezier curves whose data is computed by this algorithm and loads these curves into the Curves table. The Bezier curves have the same orientation as the BSpline curve analyzed in this framework. Exceptions Standard_DimensionError if the Curves array was not created with the following bounds: - 1 , and - the number of adjacent Bezier arcs computed by this algorithm (as given by the function NbArcs).
        	:param Curves:
        	:type Curves: TColGeom2d_Array1OfBezierCurve
        	:rtype: None
        """
        return _Geom2dConvert.Geom2dConvert_BSplineCurveToBezierCurve_Arcs(self, *args)


    def __init__(self, *args):
        """
        * Computes all the data needed to convert - the BSpline curve BasisCurve, into a series of adjacent Bezier arcs. The result consists of a series of BasisCurve arcs limited by points corresponding to knot values of the curve. Use the available interrogation functions to ascertain the number of computed Bezier arcs, and then to construct each individual Bezier curve (or all Bezier curves). Note: ParametricTolerance is not used.
        	:param BasisCurve:
        	:type BasisCurve: Geom2d_BSplineCurve
        	:rtype: None
        * Computes all the data needed to convert the portion of the BSpline curve BasisCurve limited by the two parameter values U1 and U2 for Example if there is a Knot Uk and Uk < U < Uk + ParametricTolerance/2 the last curve corresponds to the span [Uk-1, Uk] and not to [Uk, Uk+1] The result consists of a series of BasisCurve arcs limited by points corresponding to knot values of the curve. Use the available interrogation functions to ascertain the number of computed Bezier arcs, and then to construct each individual Bezier curve (or all Bezier curves). Note: ParametricTolerance is not used. Raises DomainError if U1 or U2 are out of the parametric bounds of the basis curve [FirstParameter, LastParameter]. The Tolerance criterion is ParametricTolerance. Raised if Abs (U2 - U1) <= ParametricTolerance.
        	:param BasisCurve:
        	:type BasisCurve: Geom2d_BSplineCurve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param ParametricTolerance:
        	:type ParametricTolerance: float
        	:rtype: None
        """
        _Geom2dConvert.Geom2dConvert_BSplineCurveToBezierCurve_swiginit(self, _Geom2dConvert.new_Geom2dConvert_BSplineCurveToBezierCurve(*args))

    def Knots(self, *args) -> "void":
        """
        * This methode returns the bspline's knots associated to the converted arcs Raises DimensionError if the length of Curves is not equal to NbArcs + 1
        	:param TKnots:
        	:type TKnots: TColStd_Array1OfReal
        	:rtype: None
        """
        return _Geom2dConvert.Geom2dConvert_BSplineCurveToBezierCurve_Knots(self, *args)


    def NbArcs(self, *args) -> "Standard_Integer":
        """
        * Returns the number of BezierCurve arcs. If at the creation time you have decomposed the basis curve between the parametric values UFirst, ULast the number of BezierCurve arcs depends on the number of knots included inside the interval [UFirst, ULast]. If you have decomposed the whole basis B-spline curve the number of BezierCurve arcs NbArcs is equal to the number of knots less one.
        	:rtype: int
        """
        return _Geom2dConvert.Geom2dConvert_BSplineCurveToBezierCurve_NbArcs(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dConvert.delete_Geom2dConvert_BSplineCurveToBezierCurve
Geom2dConvert_BSplineCurveToBezierCurve.Arc = new_instancemethod(_Geom2dConvert.Geom2dConvert_BSplineCurveToBezierCurve_Arc, None, Geom2dConvert_BSplineCurveToBezierCurve)
Geom2dConvert_BSplineCurveToBezierCurve.Arcs = new_instancemethod(_Geom2dConvert.Geom2dConvert_BSplineCurveToBezierCurve_Arcs, None, Geom2dConvert_BSplineCurveToBezierCurve)
Geom2dConvert_BSplineCurveToBezierCurve.Knots = new_instancemethod(_Geom2dConvert.Geom2dConvert_BSplineCurveToBezierCurve_Knots, None, Geom2dConvert_BSplineCurveToBezierCurve)
Geom2dConvert_BSplineCurveToBezierCurve.NbArcs = new_instancemethod(_Geom2dConvert.Geom2dConvert_BSplineCurveToBezierCurve_NbArcs, None, Geom2dConvert_BSplineCurveToBezierCurve)
Geom2dConvert_BSplineCurveToBezierCurve_swigregister = _Geom2dConvert.Geom2dConvert_BSplineCurveToBezierCurve_swigregister
Geom2dConvert_BSplineCurveToBezierCurve_swigregister(Geom2dConvert_BSplineCurveToBezierCurve)

class Geom2dConvert_CompCurveToBSplineCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Standard_Boolean":
        """
        * Append a curve in the BSpline Return False if the curve is not G0 with the BSplineCurve. Tolerance is used to check continuity and decrease Multiplicty at the common Knot After is usefull if BasisCurve is a closed curve .
        	:param NewCurve:
        	:type NewCurve: Geom2d_BoundedCurve
        	:param Tolerance:
        	:type Tolerance: float
        	:param After: default value is Standard_False
        	:type After: bool
        	:rtype: bool
        """
        return _Geom2dConvert.Geom2dConvert_CompCurveToBSplineCurve_Add(self, *args)


    def BSplineCurve(self, *args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """:rtype: opencascade::handle<Geom2d_BSplineCurve>"""
        return _Geom2dConvert.Geom2dConvert_CompCurveToBSplineCurve_BSplineCurve(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clear result curve
        	:rtype: None
        """
        return _Geom2dConvert.Geom2dConvert_CompCurveToBSplineCurve_Clear(self, *args)


    def __init__(self, *args):
        """
        * Initialize the algorithme - Parameterisation is used to convert
        	:param Parameterisation: default value is Convert_TgtThetaOver2
        	:type Parameterisation: Convert_ParameterisationType
        	:rtype: None
        * Initialize the algorithme with one curve - Parameterisation is used to convert
        	:param BasisCurve:
        	:type BasisCurve: Geom2d_BoundedCurve
        	:param Parameterisation: default value is Convert_TgtThetaOver2
        	:type Parameterisation: Convert_ParameterisationType
        	:rtype: None
        """
        _Geom2dConvert.Geom2dConvert_CompCurveToBSplineCurve_swiginit(self, _Geom2dConvert.new_Geom2dConvert_CompCurveToBSplineCurve(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dConvert.delete_Geom2dConvert_CompCurveToBSplineCurve
Geom2dConvert_CompCurveToBSplineCurve.Add = new_instancemethod(_Geom2dConvert.Geom2dConvert_CompCurveToBSplineCurve_Add, None, Geom2dConvert_CompCurveToBSplineCurve)
Geom2dConvert_CompCurveToBSplineCurve.BSplineCurve = new_instancemethod(_Geom2dConvert.Geom2dConvert_CompCurveToBSplineCurve_BSplineCurve, None, Geom2dConvert_CompCurveToBSplineCurve)
Geom2dConvert_CompCurveToBSplineCurve.Clear = new_instancemethod(_Geom2dConvert.Geom2dConvert_CompCurveToBSplineCurve_Clear, None, Geom2dConvert_CompCurveToBSplineCurve)
Geom2dConvert_CompCurveToBSplineCurve_swigregister = _Geom2dConvert.Geom2dConvert_CompCurveToBSplineCurve_swigregister
Geom2dConvert_CompCurveToBSplineCurve_swigregister(Geom2dConvert_CompCurveToBSplineCurve)



