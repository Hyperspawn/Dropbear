# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Geom2dInt module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geom2dint.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Geom2dInt.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Geom2dInt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Geom2dInt')
    _Geom2dInt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dInt', [dirname(__file__)])
        except ImportError:
            import _Geom2dInt
            return _Geom2dInt
        try:
            _mod = imp.load_module('_Geom2dInt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Geom2dInt = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dInt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dInt.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Geom2dInt.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Geom2dInt.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Geom2dInt.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Geom2dInt.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Geom2dInt.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Geom2dInt.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Geom2dInt.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Geom2dInt.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Geom2dInt.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Geom2dInt.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Geom2dInt.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Geom2dInt.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Geom2dInt.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Geom2dInt.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Geom2dInt.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Geom2dInt.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Geom2dInt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Geom2dInt.process_exception(error, method_name, class_name)
process_exception = _Geom2dInt.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.IntRes2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.IntCurve
import OCC.Core.Extrema
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.TopAbs
import OCC.Core.GeomAdaptor
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
class Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AnErrorOccurred(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Geom2dInt.Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_AnErrorOccurred(self, *args)


    def __init__(self, *args):
        """
        :param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Geom2dInt.Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter(*args))

    def NbRoots(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _Geom2dInt.Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_NbRoots(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param Poly1:
        	:type Poly1: Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter
        	:param Poly2:
        	:type Poly2: Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter
        	:param NumSegOn1:
        	:type NumSegOn1: int
        	:param NumSegOn2:
        	:type NumSegOn2: int
        	:param ParamOnSeg1:
        	:type ParamOnSeg1: float
        	:param ParamOnSeg2:
        	:type ParamOnSeg2: float
        	:rtype: None
        :param Uo:
        	:type Uo: float
        	:param Vo:
        	:type Vo: float
        	:param UInf:
        	:type UInf: float
        	:param VInf:
        	:type VInf: float
        	:param USup:
        	:type USup: float
        	:param VSup:
        	:type VSup: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_Perform(self, *args)


    def Roots(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_Roots(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter
Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter.AnErrorOccurred = new_instancemethod(_Geom2dInt.Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_AnErrorOccurred, None, Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter.NbRoots = new_instancemethod(_Geom2dInt.Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_NbRoots, None, Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter.Perform = new_instancemethod(_Geom2dInt.Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_Perform, None, Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter.Roots = new_instancemethod(_Geom2dInt.Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_Roots, None, Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_swigregister = _Geom2dInt.Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_swigregister
Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter_swigregister(Geom2dInt_ExactIntersectionPointOfTheIntPCurvePCurveOfGInter)

class Geom2dInt_GInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ComputeDomain(self, *args) -> "IntRes2d_Domain":
        """
        * Create a domain from a curve
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param TolDomain:
        	:type TolDomain: float
        	:rtype: IntRes2d_Domain
        """
        return _Geom2dInt.Geom2dInt_GInter_ComputeDomain(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Self Intersection of a curve
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Self Intersection of a curve with a domain.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param D:
        	:type D: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between 2 curves.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between 2 curves.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between 2 curves.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between 2 curves.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Geom2dInt.Geom2dInt_GInter_swiginit(self, _Geom2dInt.new_Geom2dInt_GInter(*args))

    def GetMinNbSamples(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _Geom2dInt.Geom2dInt_GInter_GetMinNbSamples(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Intersection between 2 curves.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between 2 curves.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between 2 curves.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between 2 curves.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between 2 curves.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between 2 curves.
        	:param C1:
        	:type C1: Adaptor2d_Curve2d
        	:param C2:
        	:type C2: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_GInter_Perform(self, *args)


    def SetMinNbSamples(self, *args) -> "void":
        """
        * Set / get minimum number of points in polygon intersection.
        	:param theMinNbSamples:
        	:type theMinNbSamples: int
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_GInter_SetMinNbSamples(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_GInter
Geom2dInt_GInter.ComputeDomain = new_instancemethod(_Geom2dInt.Geom2dInt_GInter_ComputeDomain, None, Geom2dInt_GInter)
Geom2dInt_GInter.GetMinNbSamples = new_instancemethod(_Geom2dInt.Geom2dInt_GInter_GetMinNbSamples, None, Geom2dInt_GInter)
Geom2dInt_GInter.Perform = new_instancemethod(_Geom2dInt.Geom2dInt_GInter_Perform, None, Geom2dInt_GInter)
Geom2dInt_GInter.SetMinNbSamples = new_instancemethod(_Geom2dInt.Geom2dInt_GInter_SetMinNbSamples, None, Geom2dInt_GInter)
Geom2dInt_GInter_swigregister = _Geom2dInt.Geom2dInt_GInter_swigregister
Geom2dInt_GInter_swigregister(Geom2dInt_GInter)

class Geom2dInt_Geom2dCurveTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Circle(*args) -> "gp_Circ2d":
        """
        * Returns the Circ2d from gp corresponding to the curve C. This method is called only when TheType returns GeomAbs_Circle.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: gp_Circ2d
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Circle(*args)

    Circle = staticmethod(Circle)

    def D0(*args) -> "void":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args) -> "void":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:param T:
        	:type T: gp_Vec2d
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args) -> "void":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:param T:
        	:type T: gp_Vec2d
        	:param N:
        	:type N: gp_Vec2d
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args) -> "void":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:param T:
        	:type T: gp_Vec2d
        	:param N:
        	:type N: gp_Vec2d
        	:param V:
        	:type V: gp_Vec2d
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args) -> "gp_Vec2d":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param U:
        	:type U: float
        	:param N:
        	:type N: int
        	:rtype: gp_Vec2d
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_DN(*args)

    DN = staticmethod(DN)

    def Degree(*args) -> "Standard_Integer":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: int
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Degree(*args)

    Degree = staticmethod(Degree)

    def Ellipse(*args) -> "gp_Elips2d":
        """
        * Returns the Elips2d from gp corresponding to the curve C. This method is called only when TheType returns GeomAbs_Ellipse.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: gp_Elips2d
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def EpsX(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: float
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param Eps_XYZ:
        	:type Eps_XYZ: float
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_EpsX(*args)

    EpsX = staticmethod(EpsX)

    def FirstParameter(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def GetInterval(*args) -> "Standard_Real &, Standard_Real &":
        """
        * output the bounds of interval of index <Index> used if Type == Composite.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Index:
        	:type Index: int
        	:param Tab:
        	:type Tab: TColStd_Array1OfReal
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_GetInterval(*args)

    GetInterval = staticmethod(GetInterval)

    def GetType(*args) -> "GeomAbs_CurveType":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: GeomAbs_CurveType
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Hyperbola(*args) -> "gp_Hypr2d":
        """
        * Returns the Hypr2d from gp corresponding to the curve C. This method is called only when TheType returns GeomAbs_Hyperbola.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: gp_Hypr2d
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Hyperbola(*args)

    Hyperbola = staticmethod(Hyperbola)

    def Intervals(*args) -> "void":
        """
        * compute Tab.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Tab:
        	:type Tab: TColStd_Array1OfReal
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Intervals(*args)

    Intervals = staticmethod(Intervals)

    def LastParameter(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def Line(*args) -> "gp_Lin2d":
        """
        * Returns the Lin2d from gp corresponding to the curve C. This method is called only when TheType returns GeomAbs_Line.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: gp_Lin2d
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Line(*args)

    Line = staticmethod(Line)

    def NbIntervals(*args) -> "Standard_Integer":
        """
        * output the number of interval of continuity C2 of the curve
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: int
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_NbIntervals(*args)

    NbIntervals = staticmethod(NbIntervals)

    def NbSamples(*args) -> "Standard_Integer":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: int
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param U0:
        	:type U0: float
        	:param U1:
        	:type U1: float
        	:rtype: int
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_NbSamples(*args)

    NbSamples = staticmethod(NbSamples)

    def Parabola(*args) -> "gp_Parab2d":
        """
        * Returns the Parab2d from gp corresponding to the curve C. This method is called only when TheType returns GeomAbs_Parabola.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: gp_Parab2d
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Parabola(*args)

    Parabola = staticmethod(Parabola)

    def Value(*args) -> "gp_Pnt2d":
        """
        :param C:
        	:type C: Adaptor2d_Curve2d
        	:param X:
        	:type X: float
        	:rtype: gp_Pnt2d
        """
        return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Value(*args)

    Value = staticmethod(Value)

    __repr__ = _dumps_object


    def __init__(self):
        _Geom2dInt.Geom2dInt_Geom2dCurveTool_swiginit(self, _Geom2dInt.new_Geom2dInt_Geom2dCurveTool())
    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_Geom2dCurveTool
Geom2dInt_Geom2dCurveTool_swigregister = _Geom2dInt.Geom2dInt_Geom2dCurveTool_swigregister
Geom2dInt_Geom2dCurveTool_swigregister(Geom2dInt_Geom2dCurveTool)

def Geom2dInt_Geom2dCurveTool_Circle(*args) -> "gp_Circ2d":
    """
    * Returns the Circ2d from gp corresponding to the curve C. This method is called only when TheType returns GeomAbs_Circle.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: gp_Circ2d
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Circle(*args)

def Geom2dInt_Geom2dCurveTool_D0(*args) -> "void":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:rtype: None
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_D0(*args)

def Geom2dInt_Geom2dCurveTool_D1(*args) -> "void":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:param T:
    	:type T: gp_Vec2d
    	:rtype: None
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_D1(*args)

def Geom2dInt_Geom2dCurveTool_D2(*args) -> "void":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:param T:
    	:type T: gp_Vec2d
    	:param N:
    	:type N: gp_Vec2d
    	:rtype: None
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_D2(*args)

def Geom2dInt_Geom2dCurveTool_D3(*args) -> "void":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:param T:
    	:type T: gp_Vec2d
    	:param N:
    	:type N: gp_Vec2d
    	:param V:
    	:type V: gp_Vec2d
    	:rtype: None
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_D3(*args)

def Geom2dInt_Geom2dCurveTool_DN(*args) -> "gp_Vec2d":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:param U:
    	:type U: float
    	:param N:
    	:type N: int
    	:rtype: gp_Vec2d
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_DN(*args)

def Geom2dInt_Geom2dCurveTool_Degree(*args) -> "Standard_Integer":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: int
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Degree(*args)

def Geom2dInt_Geom2dCurveTool_Ellipse(*args) -> "gp_Elips2d":
    """
    * Returns the Elips2d from gp corresponding to the curve C. This method is called only when TheType returns GeomAbs_Ellipse.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: gp_Elips2d
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Ellipse(*args)

def Geom2dInt_Geom2dCurveTool_EpsX(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: float
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:param Eps_XYZ:
    	:type Eps_XYZ: float
    	:rtype: float
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_EpsX(*args)

def Geom2dInt_Geom2dCurveTool_FirstParameter(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: float
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_FirstParameter(*args)

def Geom2dInt_Geom2dCurveTool_GetInterval(*args) -> "Standard_Real &, Standard_Real &":
    """
    * output the bounds of interval of index <Index> used if Type == Composite.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param Index:
    	:type Index: int
    	:param Tab:
    	:type Tab: TColStd_Array1OfReal
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:rtype: None
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_GetInterval(*args)

def Geom2dInt_Geom2dCurveTool_GetType(*args) -> "GeomAbs_CurveType":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: GeomAbs_CurveType
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_GetType(*args)

def Geom2dInt_Geom2dCurveTool_Hyperbola(*args) -> "gp_Hypr2d":
    """
    * Returns the Hypr2d from gp corresponding to the curve C. This method is called only when TheType returns GeomAbs_Hyperbola.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: gp_Hypr2d
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Hyperbola(*args)

def Geom2dInt_Geom2dCurveTool_Intervals(*args) -> "void":
    """
    * compute Tab.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param Tab:
    	:type Tab: TColStd_Array1OfReal
    	:rtype: None
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Intervals(*args)

def Geom2dInt_Geom2dCurveTool_LastParameter(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: float
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_LastParameter(*args)

def Geom2dInt_Geom2dCurveTool_Line(*args) -> "gp_Lin2d":
    """
    * Returns the Lin2d from gp corresponding to the curve C. This method is called only when TheType returns GeomAbs_Line.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: gp_Lin2d
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Line(*args)

def Geom2dInt_Geom2dCurveTool_NbIntervals(*args) -> "Standard_Integer":
    """
    * output the number of interval of continuity C2 of the curve
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: int
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_NbIntervals(*args)

def Geom2dInt_Geom2dCurveTool_NbSamples(*args) -> "Standard_Integer":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: int
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:param U0:
    	:type U0: float
    	:param U1:
    	:type U1: float
    	:rtype: int
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_NbSamples(*args)

def Geom2dInt_Geom2dCurveTool_Parabola(*args) -> "gp_Parab2d":
    """
    * Returns the Parab2d from gp corresponding to the curve C. This method is called only when TheType returns GeomAbs_Parabola.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: gp_Parab2d
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Parabola(*args)

def Geom2dInt_Geom2dCurveTool_Value(*args) -> "gp_Pnt2d":
    """
    :param C:
    	:type C: Adaptor2d_Curve2d
    	:param X:
    	:type X: float
    	:rtype: gp_Pnt2d
    """
    return _Geom2dInt.Geom2dInt_Geom2dCurveTool_Value(*args)

class Geom2dInt_IntConicCurveOfGInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Intersection between a line and a parametric curve.
        	:param L:
        	:type L: gp_Lin2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between a line and a parametric curve.
        	:param C:
        	:type C: gp_Circ2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between an ellipse and a parametric curve.
        	:param E:
        	:type E: gp_Elips2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between a parabola and a parametric curve.
        	:param Prb:
        	:type Prb: gp_Parab2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between the main branch of an hyperbola and a parametric curve.
        	:param H:
        	:type H: gp_Hypr2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Geom2dInt.Geom2dInt_IntConicCurveOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_IntConicCurveOfGInter(*args))

    def Perform(self, *args) -> "void":
        """
        * Intersection between a line and a parametric curve.
        	:param L:
        	:type L: gp_Lin2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between a line and a parametric curve.
        	:param C:
        	:type C: gp_Circ2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between an ellipse and a parametric curve.
        	:param E:
        	:type E: gp_Elips2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between a parabola and a parametric curve.
        	:param Prb:
        	:type Prb: gp_Parab2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between the main branch of an hyperbola and a parametric curve.
        	:param H:
        	:type H: gp_Hypr2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_IntConicCurveOfGInter_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_IntConicCurveOfGInter
Geom2dInt_IntConicCurveOfGInter.Perform = new_instancemethod(_Geom2dInt.Geom2dInt_IntConicCurveOfGInter_Perform, None, Geom2dInt_IntConicCurveOfGInter)
Geom2dInt_IntConicCurveOfGInter_swigregister = _Geom2dInt.Geom2dInt_IntConicCurveOfGInter_swigregister
Geom2dInt_IntConicCurveOfGInter_swigregister(Geom2dInt_IntConicCurveOfGInter)

class Geom2dInt_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfGInter(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor of the class.
        	:param IT:
        	:type IT: IntCurve_IConicTool
        	:param PC:
        	:type PC: Adaptor2d_Curve2d
        	:rtype: None
        """
        _Geom2dInt.Geom2dInt_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfGInter(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfGInter
Geom2dInt_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfGInter_swigregister = _Geom2dInt.Geom2dInt_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfGInter_swigregister
Geom2dInt_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfGInter_swigregister(Geom2dInt_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfGInter)

class Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: None
        """
        _Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the field mycurve of the function.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_Initialize(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Shows if the Nth distance is a minimum.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_IsMin(self, *args)


    def NbExt(self, *args) -> "Standard_Integer":
        """
        * Return the nunber of found extrema.
        	:rtype: int
        """
        return _Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_NbExt(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the Nth extremum.
        	:param N:
        	:type N: int
        	:rtype: Extrema_POnCurv2d
        """
        return _Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_Point(self, *args)


    def SearchOfTolerance(self, *args) -> "Standard_Real":
        """
        * Computes a Tol value. If 1st derivative of curve |D1|<Tol, it is considered D1=0.
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_SearchOfTolerance(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        * sets the field P of the function.
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_SetPoint(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the Nth distance.
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_SquareDistance(self, *args)


    def SubIntervalInitialize(self, *args) -> "void":
        """
        * Determines boundaries of subinterval for find of root.
        	:param theUfirst:
        	:type theUfirst: float
        	:param theUlast:
        	:type theUlast: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_SubIntervalInitialize(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter
Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter.Initialize = new_instancemethod(_Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_Initialize, None, Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter.IsMin = new_instancemethod(_Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_IsMin, None, Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter.NbExt = new_instancemethod(_Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_NbExt, None, Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter.Point = new_instancemethod(_Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_Point, None, Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter.SearchOfTolerance = new_instancemethod(_Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_SearchOfTolerance, None, Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter.SetPoint = new_instancemethod(_Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_SetPoint, None, Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter.SquareDistance = new_instancemethod(_Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_SquareDistance, None, Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter.SubIntervalInitialize = new_instancemethod(_Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_SubIntervalInitialize, None, Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_swigregister = _Geom2dInt.Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_swigregister
Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter_swigregister(Geom2dInt_PCLocFOfTheLocateExtPCOfTheProjPCurOfGInter)

class Geom2dInt_TheCurveLocatorOfTheProjPCurOfGInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    __repr__ = _dumps_object


    def __init__(self):
        _Geom2dInt.Geom2dInt_TheCurveLocatorOfTheProjPCurOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_TheCurveLocatorOfTheProjPCurOfGInter())
    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_TheCurveLocatorOfTheProjPCurOfGInter
Geom2dInt_TheCurveLocatorOfTheProjPCurOfGInter_swigregister = _Geom2dInt.Geom2dInt_TheCurveLocatorOfTheProjPCurOfGInter_swigregister
Geom2dInt_TheCurveLocatorOfTheProjPCurOfGInter_swigregister(Geom2dInt_TheCurveLocatorOfTheProjPCurOfGInter)

class Geom2dInt_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfGInter(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param curve1:
        	:type curve1: Adaptor2d_Curve2d
        	:param curve2:
        	:type curve2: Adaptor2d_Curve2d
        	:rtype: None
        """
        _Geom2dInt.Geom2dInt_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfGInter(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfGInter
Geom2dInt_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfGInter_swigregister = _Geom2dInt.Geom2dInt_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfGInter_swigregister
Geom2dInt_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfGInter_swigregister(Geom2dInt_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfGInter)

class Geom2dInt_TheIntConicCurveOfGInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Intersection between a line and a parametric curve.
        	:param L:
        	:type L: gp_Lin2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between a line and a parametric curve.
        	:param C:
        	:type C: gp_Circ2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between an ellipse and a parametric curve.
        	:param E:
        	:type E: gp_Elips2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between a parabola and a parametric curve.
        	:param Prb:
        	:type Prb: gp_Parab2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between the main branch of an hyperbola and a parametric curve.
        	:param H:
        	:type H: gp_Hypr2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Geom2dInt.Geom2dInt_TheIntConicCurveOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_TheIntConicCurveOfGInter(*args))

    def Perform(self, *args) -> "void":
        """
        * Intersection between a line and a parametric curve.
        	:param L:
        	:type L: gp_Lin2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between a line and a parametric curve.
        	:param C:
        	:type C: gp_Circ2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between an ellipse and a parametric curve.
        	:param E:
        	:type E: gp_Elips2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between a parabola and a parametric curve.
        	:param Prb:
        	:type Prb: gp_Parab2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Intersection between the main branch of an hyperbola and a parametric curve.
        	:param H:
        	:type H: gp_Hypr2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_TheIntConicCurveOfGInter_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_TheIntConicCurveOfGInter
Geom2dInt_TheIntConicCurveOfGInter.Perform = new_instancemethod(_Geom2dInt.Geom2dInt_TheIntConicCurveOfGInter_Perform, None, Geom2dInt_TheIntConicCurveOfGInter)
Geom2dInt_TheIntConicCurveOfGInter_swigregister = _Geom2dInt.Geom2dInt_TheIntConicCurveOfGInter_swigregister
Geom2dInt_TheIntConicCurveOfGInter_swigregister(Geom2dInt_TheIntConicCurveOfGInter)

class Geom2dInt_TheIntPCurvePCurveOfGInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _Geom2dInt.Geom2dInt_TheIntPCurvePCurveOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_TheIntPCurvePCurveOfGInter(*args))

    def GetMinNbSamples(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _Geom2dInt.Geom2dInt_TheIntPCurvePCurveOfGInter_GetMinNbSamples(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param Curve1:
        	:type Curve1: Adaptor2d_Curve2d
        	:param Domain1:
        	:type Domain1: IntRes2d_Domain
        	:param Curve2:
        	:type Curve2: Adaptor2d_Curve2d
        	:param Domain2:
        	:type Domain2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        :param Curve1:
        	:type Curve1: Adaptor2d_Curve2d
        	:param Domain1:
        	:type Domain1: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_TheIntPCurvePCurveOfGInter_Perform(self, *args)


    def SetMinNbSamples(self, *args) -> "void":
        """
        * Set / get minimum number of points in polygon for intersection.
        	:param theMinNbSamples:
        	:type theMinNbSamples: int
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_TheIntPCurvePCurveOfGInter_SetMinNbSamples(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_TheIntPCurvePCurveOfGInter
Geom2dInt_TheIntPCurvePCurveOfGInter.GetMinNbSamples = new_instancemethod(_Geom2dInt.Geom2dInt_TheIntPCurvePCurveOfGInter_GetMinNbSamples, None, Geom2dInt_TheIntPCurvePCurveOfGInter)
Geom2dInt_TheIntPCurvePCurveOfGInter.Perform = new_instancemethod(_Geom2dInt.Geom2dInt_TheIntPCurvePCurveOfGInter_Perform, None, Geom2dInt_TheIntPCurvePCurveOfGInter)
Geom2dInt_TheIntPCurvePCurveOfGInter.SetMinNbSamples = new_instancemethod(_Geom2dInt.Geom2dInt_TheIntPCurvePCurveOfGInter_SetMinNbSamples, None, Geom2dInt_TheIntPCurvePCurveOfGInter)
Geom2dInt_TheIntPCurvePCurveOfGInter_swigregister = _Geom2dInt.Geom2dInt_TheIntPCurvePCurveOfGInter_swigregister
Geom2dInt_TheIntPCurvePCurveOfGInter_swigregister(Geom2dInt_TheIntPCurvePCurveOfGInter)

class Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def And_Domaine_Objet1_Intersections(self, *args) -> "void":
        """
        :param TheImpTool:
        	:type TheImpTool: IntCurve_IConicTool
        	:param TheParCurve:
        	:type TheParCurve: Adaptor2d_Curve2d
        	:param TheImpCurveDomain:
        	:type TheImpCurveDomain: IntRes2d_Domain
        	:param TheParCurveDomain:
        	:type TheParCurveDomain: IntRes2d_Domain
        	:param NbResultats:
        	:type NbResultats: int
        	:param Inter2_And_Domain2:
        	:type Inter2_And_Domain2: TColStd_Array1OfReal
        	:param Inter1:
        	:type Inter1: TColStd_Array1OfReal
        	:param Resultat1:
        	:type Resultat1: TColStd_Array1OfReal
        	:param Resultat2:
        	:type Resultat2: TColStd_Array1OfReal
        	:param EpsNul:
        	:type EpsNul: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_And_Domaine_Objet1_Intersections(self, *args)


    def FindU(self, *args) -> "Standard_Real":
        """
        :param parameter:
        	:type parameter: float
        	:param point:
        	:type point: gp_Pnt2d
        	:param TheParCurev:
        	:type TheParCurev: Adaptor2d_Curve2d
        	:param TheImpTool:
        	:type TheImpTool: IntCurve_IConicTool
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_FindU(self, *args)


    def FindV(self, *args) -> "Standard_Real":
        """
        :param parameter:
        	:type parameter: float
        	:param point:
        	:type point: gp_Pnt2d
        	:param TheImpTool:
        	:type TheImpTool: IntCurve_IConicTool
        	:param ParCurve:
        	:type ParCurve: Adaptor2d_Curve2d
        	:param TheParCurveDomain:
        	:type TheParCurveDomain: IntRes2d_Domain
        	:param V0:
        	:type V0: float
        	:param V1:
        	:type V1: float
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_FindV(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Intersection between an implicit curve and a parametrised curve. The exception ConstructionError is raised if the domain of the parametrised curve does not verify HasFirstPoint and HasLastPoint return True.
        	:param ITool:
        	:type ITool: IntCurve_IConicTool
        	:param Dom1:
        	:type Dom1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param Dom2:
        	:type Dom2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Geom2dInt.Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter(*args))

    def Perform(self, *args) -> "void":
        """
        * Intersection between an implicit curve and a parametrised curve. The exception ConstructionError is raised if the domain of the parametrised curve does not verify HasFirstPoint and HasLastPoint return True.
        	:param ITool:
        	:type ITool: IntCurve_IConicTool
        	:param Dom1:
        	:type Dom1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: Adaptor2d_Curve2d
        	:param Dom2:
        	:type Dom2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter
Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter.And_Domaine_Objet1_Intersections = new_instancemethod(_Geom2dInt.Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_And_Domaine_Objet1_Intersections, None, Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter)
Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter.FindU = new_instancemethod(_Geom2dInt.Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_FindU, None, Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter)
Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter.FindV = new_instancemethod(_Geom2dInt.Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_FindV, None, Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter)
Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter.Perform = new_instancemethod(_Geom2dInt.Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_Perform, None, Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter)
Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_swigregister = _Geom2dInt.Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_swigregister
Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter_swigregister(Geom2dInt_TheIntersectorOfTheIntConicCurveOfGInter)

class Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Calculates the distance with a close point. The close point is defined by the parameter value U0. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs a zero near the close point. TolU is used to decide to stop the iterations. At the nth iteration, the criteria is: abs(Un - Un-1) < TolU.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U0:
        	:type U0: float
        	:param TolU:
        	:type TolU: float
        	:rtype: None
        * Calculates the distance with a close point. The close point is defined by the parameter value U0. The function F(u)=distance(P,C(u)) has an extremum when g(u)=dF/du=0. The algorithm searchs a zero near the close point. Zeros are searched between Umin et Usup. TolU is used to decide to stop the iterations. At the nth iteration, the criteria is: abs(Un - Un-1) < TolU.
        	:param P:
        	:type P: gp_Pnt2d
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U0:
        	:type U0: float
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:rtype: None
        """
        _Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter(*args))

    def Initialize(self, *args) -> "void":
        """
        * sets the fields of the algorithm.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param TolU:
        	:type TolU: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance is found.
        	:rtype: bool
        """
        return _Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_IsDone(self, *args)


    def IsMin(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the extremum distance is a minimum.
        	:rtype: bool
        """
        return _Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_IsMin(self, *args)


    def Perform(self, *args) -> "void":
        """
        * the algorithm is done with the point P. An exception is raised if the fields have not been initialized.
        	:param P:
        	:type P: gp_Pnt2d
        	:param U0:
        	:type U0: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_Perform(self, *args)


    def Point(self, *args) -> "Extrema_POnCurv2d const &":
        """
        * Returns the point of the extremum distance.
        	:rtype: Extrema_POnCurv2d
        """
        return _Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_Point(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Returns the value of the extremum square distance.
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_SquareDistance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter
Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter.Initialize = new_instancemethod(_Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_Initialize, None, Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter.IsDone = new_instancemethod(_Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_IsDone, None, Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter.IsMin = new_instancemethod(_Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_IsMin, None, Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter.Perform = new_instancemethod(_Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_Perform, None, Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter.Point = new_instancemethod(_Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_Point, None, Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter.SquareDistance = new_instancemethod(_Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_SquareDistance, None, Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter)
Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_swigregister = _Geom2dInt.Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_swigregister
Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter_swigregister(Geom2dInt_TheLocateExtPCOfTheProjPCurOfGInter)

class Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter(OCC.Core.Intf.Intf_Polygon2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ApproxParamOnCurve(self, *args) -> "Standard_Real":
        """
        * Give an approximation of the parameter on the curve according to the discretization of the Curve.
        	:param Index:
        	:type Index: int
        	:param ParamOnLine:
        	:type ParamOnLine: float
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_ApproxParamOnCurve(self, *args)


    def AutoIntersectionIsPossible(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_AutoIntersectionIsPossible(self, *args)


    def CalculRegion(self, *args) -> "Standard_Integer":
        """
        :param x:
        	:type x: float
        	:param y:
        	:type y: float
        	:param x1:
        	:type x1: float
        	:param x2:
        	:type x2: float
        	:param y1:
        	:type y1: float
        	:param y2:
        	:type y2: float
        	:rtype: int
        """
        return _Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_CalculRegion(self, *args)


    def Closed(self, *args) -> "Standard_Boolean":
        """
        :param clos:
        	:type clos: bool
        	:rtype: None
        * Returns True if the polyline is closed.
        	:rtype: bool
        """
        return _Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_Closed(self, *args)


    def ComputeWithBox(self, *args) -> "void":
        """
        * The current polygon is modified if most of the points of the polygon are are outside the box <OtherBox>. In this situation, bounds are computed to build a polygon inside or near the OtherBox.
        	:param Curve:
        	:type Curve: Adaptor2d_Curve2d
        	:param OtherBox:
        	:type OtherBox: Bnd_Box2d
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_ComputeWithBox(self, *args)


    def Dump(self, *args) -> "void":
        """:rtype: None"""
        return _Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_Dump(self, *args)


    def __init__(self, *args):
        """
        * Compute a polygon on the domain of the curve.
        	:param Curve:
        	:type Curve: Adaptor2d_Curve2d
        	:param NbPnt:
        	:type NbPnt: int
        	:param Domain:
        	:type Domain: IntRes2d_Domain
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter(*args))

    def InfParameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter (On the curve) of the first point of the Polygon
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_InfParameter(self, *args)


    def SetDeflectionOverEstimation(self, *args) -> "void":
        """
        :param x:
        	:type x: float
        	:rtype: None
        """
        return _Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_SetDeflectionOverEstimation(self, *args)


    def SupParameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter (On the curve) of the last point of the Polygon
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_SupParameter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter
Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter.ApproxParamOnCurve = new_instancemethod(_Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_ApproxParamOnCurve, None, Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter.AutoIntersectionIsPossible = new_instancemethod(_Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_AutoIntersectionIsPossible, None, Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter.CalculRegion = new_instancemethod(_Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_CalculRegion, None, Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter.Closed = new_instancemethod(_Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_Closed, None, Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter.ComputeWithBox = new_instancemethod(_Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_ComputeWithBox, None, Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter.Dump = new_instancemethod(_Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_Dump, None, Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter.InfParameter = new_instancemethod(_Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_InfParameter, None, Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter.SetDeflectionOverEstimation = new_instancemethod(_Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_SetDeflectionOverEstimation, None, Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter.SupParameter = new_instancemethod(_Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_SupParameter, None, Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter)
Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_swigregister = _Geom2dInt.Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_swigregister
Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter_swigregister(Geom2dInt_ThePolygon2dOfTheIntPCurvePCurveOfGInter)

class Geom2dInt_TheProjPCurOfGInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FindParameter(*args) -> "Standard_Real":
        """
        * Returns the parameter V of the point on the parametric curve corresponding to the Point Pnt. The Correspondance between Pnt and the point P(V) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. Tol is the tolerance on the distance between a point and the parametrised curve. In that case, no bounds are given. The research of the rigth parameter has to be made on the natural parametric domain of the curve.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Pnt:
        	:type Pnt: gp_Pnt2d
        	:param Tol:
        	:type Tol: float
        	:rtype: float
        * Returns the parameter V of the point on the parametric curve corresponding to the Point Pnt. The Correspondance between Pnt and the point P(V) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. Tol is the tolerance on the distance between a point and the parametrised curve. LowParameter and HighParameter give the boundaries of the interval in wich the parameter certainly lies. These parameters are given to implement a more efficient algoritm. So, it is not necessary to check that the returned value verifies LowParameter <= Value <= HighParameter.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Pnt:
        	:type Pnt: gp_Pnt2d
        	:param LowParameter:
        	:type LowParameter: float
        	:param HighParameter:
        	:type HighParameter: float
        	:param Tol:
        	:type Tol: float
        	:rtype: float
        """
        return _Geom2dInt.Geom2dInt_TheProjPCurOfGInter_FindParameter(*args)

    FindParameter = staticmethod(FindParameter)

    __repr__ = _dumps_object


    def __init__(self):
        _Geom2dInt.Geom2dInt_TheProjPCurOfGInter_swiginit(self, _Geom2dInt.new_Geom2dInt_TheProjPCurOfGInter())
    __swig_destroy__ = _Geom2dInt.delete_Geom2dInt_TheProjPCurOfGInter
Geom2dInt_TheProjPCurOfGInter_swigregister = _Geom2dInt.Geom2dInt_TheProjPCurOfGInter_swigregister
Geom2dInt_TheProjPCurOfGInter_swigregister(Geom2dInt_TheProjPCurOfGInter)

def Geom2dInt_TheProjPCurOfGInter_FindParameter(*args) -> "Standard_Real":
    """
    * Returns the parameter V of the point on the parametric curve corresponding to the Point Pnt. The Correspondance between Pnt and the point P(V) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. Tol is the tolerance on the distance between a point and the parametrised curve. In that case, no bounds are given. The research of the rigth parameter has to be made on the natural parametric domain of the curve.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param Pnt:
    	:type Pnt: gp_Pnt2d
    	:param Tol:
    	:type Tol: float
    	:rtype: float
    * Returns the parameter V of the point on the parametric curve corresponding to the Point Pnt. The Correspondance between Pnt and the point P(V) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. Tol is the tolerance on the distance between a point and the parametrised curve. LowParameter and HighParameter give the boundaries of the interval in wich the parameter certainly lies. These parameters are given to implement a more efficient algoritm. So, it is not necessary to check that the returned value verifies LowParameter <= Value <= HighParameter.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param Pnt:
    	:type Pnt: gp_Pnt2d
    	:param LowParameter:
    	:type LowParameter: float
    	:param HighParameter:
    	:type HighParameter: float
    	:param Tol:
    	:type Tol: float
    	:rtype: float
    """
    return _Geom2dInt.Geom2dInt_TheProjPCurOfGInter_FindParameter(*args)



