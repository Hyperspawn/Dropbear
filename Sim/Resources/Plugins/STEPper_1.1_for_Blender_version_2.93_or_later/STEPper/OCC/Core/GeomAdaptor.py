# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomAdaptor module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomadaptor.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GeomAdaptor.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomAdaptor')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomAdaptor')
    _GeomAdaptor = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomAdaptor', [dirname(__file__)])
        except ImportError:
            import _GeomAdaptor
            return _GeomAdaptor
        try:
            _mod = imp.load_module('_GeomAdaptor', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomAdaptor = swig_import_helper()
    del swig_import_helper
else:
    import _GeomAdaptor
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomAdaptor.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GeomAdaptor.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GeomAdaptor.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GeomAdaptor.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GeomAdaptor.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GeomAdaptor.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GeomAdaptor.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GeomAdaptor.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GeomAdaptor.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GeomAdaptor.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GeomAdaptor.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GeomAdaptor.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GeomAdaptor.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GeomAdaptor.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GeomAdaptor.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GeomAdaptor.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GeomAdaptor.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GeomAdaptor.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GeomAdaptor.process_exception(error, method_name, class_name)
process_exception = _GeomAdaptor.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message

def Handle_GeomAdaptor_GHCurve_Create() -> "opencascade::handle< GeomAdaptor_GHCurve >":
    return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Create()
Handle_GeomAdaptor_GHCurve_Create = _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Create

def Handle_GeomAdaptor_GHCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_GHCurve >":
    return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_DownCast(t)
Handle_GeomAdaptor_GHCurve_DownCast = _GeomAdaptor.Handle_GeomAdaptor_GHCurve_DownCast

def Handle_GeomAdaptor_GHCurve_IsNull(t: 'opencascade::handle< GeomAdaptor_GHCurve > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_IsNull(t)
Handle_GeomAdaptor_GHCurve_IsNull = _GeomAdaptor.Handle_GeomAdaptor_GHCurve_IsNull

def Handle_GeomAdaptor_GHSurface_Create() -> "opencascade::handle< GeomAdaptor_GHSurface >":
    return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Create()
Handle_GeomAdaptor_GHSurface_Create = _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Create

def Handle_GeomAdaptor_GHSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_GHSurface >":
    return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_DownCast(t)
Handle_GeomAdaptor_GHSurface_DownCast = _GeomAdaptor.Handle_GeomAdaptor_GHSurface_DownCast

def Handle_GeomAdaptor_GHSurface_IsNull(t: 'opencascade::handle< GeomAdaptor_GHSurface > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsNull(t)
Handle_GeomAdaptor_GHSurface_IsNull = _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsNull

def Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Create() -> "opencascade::handle< GeomAdaptor_HSurfaceOfLinearExtrusion >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Create()
Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Create = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Create

def Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_HSurfaceOfLinearExtrusion >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast(t)
Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast

def Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsNull(t: 'opencascade::handle< GeomAdaptor_HSurfaceOfLinearExtrusion > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsNull(t)
Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsNull = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsNull

def Handle_GeomAdaptor_HSurfaceOfRevolution_Create() -> "opencascade::handle< GeomAdaptor_HSurfaceOfRevolution >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Create()
Handle_GeomAdaptor_HSurfaceOfRevolution_Create = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Create

def Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_HSurfaceOfRevolution >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast(t)
Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast

def Handle_GeomAdaptor_HSurfaceOfRevolution_IsNull(t: 'opencascade::handle< GeomAdaptor_HSurfaceOfRevolution > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsNull(t)
Handle_GeomAdaptor_HSurfaceOfRevolution_IsNull = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsNull

def Handle_GeomAdaptor_HCurve_Create() -> "opencascade::handle< GeomAdaptor_HCurve >":
    return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Create()
Handle_GeomAdaptor_HCurve_Create = _GeomAdaptor.Handle_GeomAdaptor_HCurve_Create

def Handle_GeomAdaptor_HCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_HCurve >":
    return _GeomAdaptor.Handle_GeomAdaptor_HCurve_DownCast(t)
Handle_GeomAdaptor_HCurve_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HCurve_DownCast

def Handle_GeomAdaptor_HCurve_IsNull(t: 'opencascade::handle< GeomAdaptor_HCurve > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_HCurve_IsNull(t)
Handle_GeomAdaptor_HCurve_IsNull = _GeomAdaptor.Handle_GeomAdaptor_HCurve_IsNull

def Handle_GeomAdaptor_HSurface_Create() -> "opencascade::handle< GeomAdaptor_HSurface >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Create()
Handle_GeomAdaptor_HSurface_Create = _GeomAdaptor.Handle_GeomAdaptor_HSurface_Create

def Handle_GeomAdaptor_HSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_HSurface >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurface_DownCast(t)
Handle_GeomAdaptor_HSurface_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HSurface_DownCast

def Handle_GeomAdaptor_HSurface_IsNull(t: 'opencascade::handle< GeomAdaptor_HSurface > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsNull(t)
Handle_GeomAdaptor_HSurface_IsNull = _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsNull
class geomadaptor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeCurve(*args) -> "opencascade::handle< Geom_Curve >":
        """
        * Inherited from GHCurve. Provides a curve handled by reference. Build a Geom_Curve using the informations from the Curve from Adaptor3d
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _GeomAdaptor.geomadaptor_MakeCurve(*args)

    MakeCurve = staticmethod(MakeCurve)

    def MakeSurface(*args) -> "opencascade::handle< Geom_Surface >":
        """
        * Build a Geom_Surface using the informations from the Surface from Adaptor3d @param theS - Surface adaptor to convert. @param theTrimFlag - True if perform trim surface values by adaptor and false otherwise.
        	:param theS:
        	:type theS: Adaptor3d_Surface
        	:param theTrimFlag: default value is Standard_True
        	:type theTrimFlag: bool
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _GeomAdaptor.geomadaptor_MakeSurface(*args)

    MakeSurface = staticmethod(MakeSurface)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomAdaptor.geomadaptor_swiginit(self, _GeomAdaptor.new_geomadaptor())
    __swig_destroy__ = _GeomAdaptor.delete_geomadaptor
geomadaptor_swigregister = _GeomAdaptor.geomadaptor_swigregister
geomadaptor_swigregister(geomadaptor)

def geomadaptor_MakeCurve(*args) -> "opencascade::handle< Geom_Curve >":
    """
    * Inherited from GHCurve. Provides a curve handled by reference. Build a Geom_Curve using the informations from the Curve from Adaptor3d
    	:param C:
    	:type C: Adaptor3d_Curve
    	:rtype: opencascade::handle<Geom_Curve>
    """
    return _GeomAdaptor.geomadaptor_MakeCurve(*args)

def geomadaptor_MakeSurface(*args) -> "opencascade::handle< Geom_Surface >":
    """
    * Build a Geom_Surface using the informations from the Surface from Adaptor3d @param theS - Surface adaptor to convert. @param theTrimFlag - True if perform trim surface values by adaptor and false otherwise.
    	:param theS:
    	:type theS: Adaptor3d_Surface
    	:param theTrimFlag: default value is Standard_True
    	:type theTrimFlag: bool
    	:rtype: opencascade::handle<Geom_Surface>
    """
    return _GeomAdaptor.geomadaptor_MakeSurface(*args)

class GeomAdaptor_Curve(OCC.Core.Adaptor3d.Adaptor3d_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Curve(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """
        * Provides a curve inherited from Hcurve from Adaptor. This is inherited to provide easy to use constructors.
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _GeomAdaptor.GeomAdaptor_Curve_Curve(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param C:
        	:type C: Geom_Curve
        	:rtype: None
        * ConstructionError is raised if Ufirst>Ulast
        	:param C:
        	:type C: Geom_Curve
        	:param UFirst:
        	:type UFirst: float
        	:param ULast:
        	:type ULast: float
        	:rtype: None
        """
        _GeomAdaptor.GeomAdaptor_Curve_swiginit(self, _GeomAdaptor.new_GeomAdaptor_Curve(*args))

    def Load(self, *args) -> "void":
        """
        :param C:
        	:type C: Geom_Curve
        	:rtype: None
        * ConstructionError is raised if Ufirst>Ulast
        	:param C:
        	:type C: Geom_Curve
        	:param UFirst:
        	:type UFirst: float
        	:param ULast:
        	:type ULast: float
        	:rtype: None
        """
        return _GeomAdaptor.GeomAdaptor_Curve_Load(self, *args)


    def Reset(self, *args) -> "void":
        """
        * Reset currently loaded curve (undone Load()).
        	:rtype: None
        """
        return _GeomAdaptor.GeomAdaptor_Curve_Reset(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_Curve
GeomAdaptor_Curve.Curve = new_instancemethod(_GeomAdaptor.GeomAdaptor_Curve_Curve, None, GeomAdaptor_Curve)
GeomAdaptor_Curve.Load = new_instancemethod(_GeomAdaptor.GeomAdaptor_Curve_Load, None, GeomAdaptor_Curve)
GeomAdaptor_Curve.Reset = new_instancemethod(_GeomAdaptor.GeomAdaptor_Curve_Reset, None, GeomAdaptor_Curve)
GeomAdaptor_Curve_swigregister = _GeomAdaptor.GeomAdaptor_Curve_swigregister
GeomAdaptor_Curve_swigregister(GeomAdaptor_Curve)

class GeomAdaptor_GHCurve(OCC.Core.Adaptor3d.Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeCurve(self, *args) -> "GeomAdaptor_Curve &":
        """
        * Returns the curve used to create the GenHCurve.
        	:rtype: GeomAdaptor_Curve
        """
        return _GeomAdaptor.GeomAdaptor_GHCurve_ChangeCurve(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty GenHCurve.
        	:rtype: None
        * Creates a GenHCurve from a Curve
        	:param C:
        	:type C: GeomAdaptor_Curve
        	:rtype: None
        """
        _GeomAdaptor.GeomAdaptor_GHCurve_swiginit(self, _GeomAdaptor.new_GeomAdaptor_GHCurve(*args))

    def Set(self, *args) -> "void":
        """
        * Sets the field of the GenHCurve.
        	:param C:
        	:type C: GeomAdaptor_Curve
        	:rtype: None
        """
        return _GeomAdaptor.GeomAdaptor_GHCurve_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_GHCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_GHCurve
GeomAdaptor_GHCurve.ChangeCurve = new_instancemethod(_GeomAdaptor.GeomAdaptor_GHCurve_ChangeCurve, None, GeomAdaptor_GHCurve)
GeomAdaptor_GHCurve.Set = new_instancemethod(_GeomAdaptor.GeomAdaptor_GHCurve_Set, None, GeomAdaptor_GHCurve)
GeomAdaptor_GHCurve_swigregister = _GeomAdaptor.GeomAdaptor_GHCurve_swigregister
GeomAdaptor_GHCurve_swigregister(GeomAdaptor_GHCurve)

class GeomAdaptor_GHSurface(OCC.Core.Adaptor3d.Adaptor3d_HSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeSurface(self, *args) -> "GeomAdaptor_Surface &":
        """
        * Returns the surface used to create the GenHSurface.
        	:rtype: GeomAdaptor_Surface
        """
        return _GeomAdaptor.GeomAdaptor_GHSurface_ChangeSurface(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty GenHSurface.
        	:rtype: None
        * Creates a GenHSurface from a Surface.
        	:param S:
        	:type S: GeomAdaptor_Surface
        	:rtype: None
        """
        _GeomAdaptor.GeomAdaptor_GHSurface_swiginit(self, _GeomAdaptor.new_GeomAdaptor_GHSurface(*args))

    def Set(self, *args) -> "void":
        """
        * Sets the field of the GenHSurface.
        	:param S:
        	:type S: GeomAdaptor_Surface
        	:rtype: None
        """
        return _GeomAdaptor.GeomAdaptor_GHSurface_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_GHSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_GHSurface
GeomAdaptor_GHSurface.ChangeSurface = new_instancemethod(_GeomAdaptor.GeomAdaptor_GHSurface_ChangeSurface, None, GeomAdaptor_GHSurface)
GeomAdaptor_GHSurface.Set = new_instancemethod(_GeomAdaptor.GeomAdaptor_GHSurface_Set, None, GeomAdaptor_GHSurface)
GeomAdaptor_GHSurface_swigregister = _GeomAdaptor.GeomAdaptor_GHSurface_swigregister
GeomAdaptor_GHSurface_swigregister(GeomAdaptor_GHSurface)

class GeomAdaptor_HSurfaceOfLinearExtrusion(OCC.Core.Adaptor3d.Adaptor3d_HSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeSurface(self, *args) -> "GeomAdaptor_SurfaceOfLinearExtrusion &":
        """
        * Returns the surface used to create the GenHSurface.
        	:rtype: GeomAdaptor_SurfaceOfLinearExtrusion
        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_ChangeSurface(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty GenHSurface.
        	:rtype: None
        * Creates a GenHSurface from a Surface.
        	:param S:
        	:type S: GeomAdaptor_SurfaceOfLinearExtrusion
        	:rtype: None
        """
        _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_swiginit(self, _GeomAdaptor.new_GeomAdaptor_HSurfaceOfLinearExtrusion(*args))

    def Set(self, *args) -> "void":
        """
        * Sets the field of the GenHSurface.
        	:param S:
        	:type S: GeomAdaptor_SurfaceOfLinearExtrusion
        	:rtype: None
        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HSurfaceOfLinearExtrusion
GeomAdaptor_HSurfaceOfLinearExtrusion.ChangeSurface = new_instancemethod(_GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_ChangeSurface, None, GeomAdaptor_HSurfaceOfLinearExtrusion)
GeomAdaptor_HSurfaceOfLinearExtrusion.Set = new_instancemethod(_GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_Set, None, GeomAdaptor_HSurfaceOfLinearExtrusion)
GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister = _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister
GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister(GeomAdaptor_HSurfaceOfLinearExtrusion)

class GeomAdaptor_HSurfaceOfRevolution(OCC.Core.Adaptor3d.Adaptor3d_HSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeSurface(self, *args) -> "GeomAdaptor_SurfaceOfRevolution &":
        """
        * Returns the surface used to create the GenHSurface.
        	:rtype: GeomAdaptor_SurfaceOfRevolution
        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_ChangeSurface(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty GenHSurface.
        	:rtype: None
        * Creates a GenHSurface from a Surface.
        	:param S:
        	:type S: GeomAdaptor_SurfaceOfRevolution
        	:rtype: None
        """
        _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_swiginit(self, _GeomAdaptor.new_GeomAdaptor_HSurfaceOfRevolution(*args))

    def Set(self, *args) -> "void":
        """
        * Sets the field of the GenHSurface.
        	:param S:
        	:type S: GeomAdaptor_SurfaceOfRevolution
        	:rtype: None
        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HSurfaceOfRevolution
GeomAdaptor_HSurfaceOfRevolution.ChangeSurface = new_instancemethod(_GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_ChangeSurface, None, GeomAdaptor_HSurfaceOfRevolution)
GeomAdaptor_HSurfaceOfRevolution.Set = new_instancemethod(_GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_Set, None, GeomAdaptor_HSurfaceOfRevolution)
GeomAdaptor_HSurfaceOfRevolution_swigregister = _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_swigregister
GeomAdaptor_HSurfaceOfRevolution_swigregister(GeomAdaptor_HSurfaceOfRevolution)

class GeomAdaptor_Surface(OCC.Core.Adaptor3d.Adaptor3d_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: Geom_Surface
        	:rtype: None
        * ConstructionError is raised if UFirst>ULast or VFirst>VLast
        	:param S:
        	:type S: Geom_Surface
        	:param UFirst:
        	:type UFirst: float
        	:param ULast:
        	:type ULast: float
        	:param VFirst:
        	:type VFirst: float
        	:param VLast:
        	:type VLast: float
        	:param TolU: default value is 0.0
        	:type TolU: float
        	:param TolV: default value is 0.0
        	:type TolV: float
        	:rtype: None
        """
        _GeomAdaptor.GeomAdaptor_Surface_swiginit(self, _GeomAdaptor.new_GeomAdaptor_Surface(*args))

    def Load(self, *args) -> "void":
        """
        :param S:
        	:type S: Geom_Surface
        	:rtype: None
        * ConstructionError is raised if UFirst>ULast or VFirst>VLast
        	:param S:
        	:type S: Geom_Surface
        	:param UFirst:
        	:type UFirst: float
        	:param ULast:
        	:type ULast: float
        	:param VFirst:
        	:type VFirst: float
        	:param VLast:
        	:type VLast: float
        	:param TolU: default value is 0.0
        	:type TolU: float
        	:param TolV: default value is 0.0
        	:type TolV: float
        	:rtype: None
        """
        return _GeomAdaptor.GeomAdaptor_Surface_Load(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Geom_Surface > const &":
        """:rtype: opencascade::handle<Geom_Surface>"""
        return _GeomAdaptor.GeomAdaptor_Surface_Surface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_Surface
GeomAdaptor_Surface.Load = new_instancemethod(_GeomAdaptor.GeomAdaptor_Surface_Load, None, GeomAdaptor_Surface)
GeomAdaptor_Surface.Surface = new_instancemethod(_GeomAdaptor.GeomAdaptor_Surface_Surface, None, GeomAdaptor_Surface)
GeomAdaptor_Surface_swigregister = _GeomAdaptor.GeomAdaptor_Surface_swigregister
GeomAdaptor_Surface_swigregister(GeomAdaptor_Surface)

class GeomAdaptor_HCurve(GeomAdaptor_GHCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param AS:
        	:type AS: GeomAdaptor_Curve
        	:rtype: None
        :param S:
        	:type S: Geom_Curve
        	:rtype: None
        * ConstructionError is raised if UFirst>ULast or VFirst>VLast
        	:param S:
        	:type S: Geom_Curve
        	:param UFirst:
        	:type UFirst: float
        	:param ULast:
        	:type ULast: float
        	:rtype: None
        """
        _GeomAdaptor.GeomAdaptor_HCurve_swiginit(self, _GeomAdaptor.new_GeomAdaptor_HCurve(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_HCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HCurve
GeomAdaptor_HCurve_swigregister = _GeomAdaptor.GeomAdaptor_HCurve_swigregister
GeomAdaptor_HCurve_swigregister(GeomAdaptor_HCurve)

class GeomAdaptor_HSurface(GeomAdaptor_GHSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param AS:
        	:type AS: GeomAdaptor_Surface
        	:rtype: None
        :param S:
        	:type S: Geom_Surface
        	:rtype: None
        * ConstructionError is raised if UFirst>ULast or VFirst>VLast
        	:param S:
        	:type S: Geom_Surface
        	:param UFirst:
        	:type UFirst: float
        	:param ULast:
        	:type ULast: float
        	:param VFirst:
        	:type VFirst: float
        	:param VLast:
        	:type VLast: float
        	:param TolU: default value is 0.0
        	:type TolU: float
        	:param TolV: default value is 0.0
        	:type TolV: float
        	:rtype: None
        """
        _GeomAdaptor.GeomAdaptor_HSurface_swiginit(self, _GeomAdaptor.new_GeomAdaptor_HSurface(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_HSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HSurface
GeomAdaptor_HSurface_swigregister = _GeomAdaptor.GeomAdaptor_HSurface_swigregister
GeomAdaptor_HSurface_swigregister(GeomAdaptor_HSurface)

class GeomAdaptor_SurfaceOfLinearExtrusion(GeomAdaptor_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * The Curve is loaded.
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        * Thew Curve and the Direction are loaded.
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:param V:
        	:type V: gp_Dir
        	:rtype: None
        """
        _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_swiginit(self, _GeomAdaptor.new_GeomAdaptor_SurfaceOfLinearExtrusion(*args))

    def Load(self, *args) -> "void":
        """
        * Changes the Curve
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        * Changes the Direction
        	:param V:
        	:type V: gp_Dir
        	:rtype: None
        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Load(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_SurfaceOfLinearExtrusion
GeomAdaptor_SurfaceOfLinearExtrusion.Load = new_instancemethod(_GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Load, None, GeomAdaptor_SurfaceOfLinearExtrusion)
GeomAdaptor_SurfaceOfLinearExtrusion_swigregister = _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_swigregister
GeomAdaptor_SurfaceOfLinearExtrusion_swigregister(GeomAdaptor_SurfaceOfLinearExtrusion)

class GeomAdaptor_SurfaceOfRevolution(GeomAdaptor_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Axis(self, *args) -> "gp_Ax3 const":
        """:rtype: gp_Ax3"""
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Axis(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * The Curve is loaded.
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        * The Curve and the Direction are loaded.
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:param V:
        	:type V: gp_Ax1
        	:rtype: None
        """
        _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_swiginit(self, _GeomAdaptor.new_GeomAdaptor_SurfaceOfRevolution(*args))

    def Load(self, *args) -> "void":
        """
        * Changes the Curve
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        * Changes the Direction
        	:param V:
        	:type V: gp_Ax1
        	:rtype: None
        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Load(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_SurfaceOfRevolution
GeomAdaptor_SurfaceOfRevolution.Axis = new_instancemethod(_GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Axis, None, GeomAdaptor_SurfaceOfRevolution)
GeomAdaptor_SurfaceOfRevolution.Load = new_instancemethod(_GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Load, None, GeomAdaptor_SurfaceOfRevolution)
GeomAdaptor_SurfaceOfRevolution_swigregister = _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_swigregister
GeomAdaptor_SurfaceOfRevolution_swigregister(GeomAdaptor_SurfaceOfRevolution)



