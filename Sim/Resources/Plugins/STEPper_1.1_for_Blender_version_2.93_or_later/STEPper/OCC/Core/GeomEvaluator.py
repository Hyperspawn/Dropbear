# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomEvaluator module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomevaluator.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GeomEvaluator.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomEvaluator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomEvaluator')
    _GeomEvaluator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomEvaluator', [dirname(__file__)])
        except ImportError:
            import _GeomEvaluator
            return _GeomEvaluator
        try:
            _mod = imp.load_module('_GeomEvaluator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomEvaluator = swig_import_helper()
    del swig_import_helper
else:
    import _GeomEvaluator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomEvaluator.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GeomEvaluator.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GeomEvaluator.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GeomEvaluator.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GeomEvaluator.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GeomEvaluator.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GeomEvaluator.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GeomEvaluator.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GeomEvaluator.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GeomEvaluator.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GeomEvaluator.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GeomEvaluator.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GeomEvaluator.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GeomEvaluator.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GeomEvaluator.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GeomEvaluator.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GeomEvaluator.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GeomEvaluator.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GeomEvaluator.process_exception(error, method_name, class_name)
process_exception = _GeomEvaluator.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message

def Handle_GeomEvaluator_Curve_Create() -> "opencascade::handle< GeomEvaluator_Curve >":
    return _GeomEvaluator.Handle_GeomEvaluator_Curve_Create()
Handle_GeomEvaluator_Curve_Create = _GeomEvaluator.Handle_GeomEvaluator_Curve_Create

def Handle_GeomEvaluator_Curve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_Curve >":
    return _GeomEvaluator.Handle_GeomEvaluator_Curve_DownCast(t)
Handle_GeomEvaluator_Curve_DownCast = _GeomEvaluator.Handle_GeomEvaluator_Curve_DownCast

def Handle_GeomEvaluator_Curve_IsNull(t: 'opencascade::handle< GeomEvaluator_Curve > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_Curve_IsNull(t)
Handle_GeomEvaluator_Curve_IsNull = _GeomEvaluator.Handle_GeomEvaluator_Curve_IsNull

def Handle_GeomEvaluator_Surface_Create() -> "opencascade::handle< GeomEvaluator_Surface >":
    return _GeomEvaluator.Handle_GeomEvaluator_Surface_Create()
Handle_GeomEvaluator_Surface_Create = _GeomEvaluator.Handle_GeomEvaluator_Surface_Create

def Handle_GeomEvaluator_Surface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_Surface >":
    return _GeomEvaluator.Handle_GeomEvaluator_Surface_DownCast(t)
Handle_GeomEvaluator_Surface_DownCast = _GeomEvaluator.Handle_GeomEvaluator_Surface_DownCast

def Handle_GeomEvaluator_Surface_IsNull(t: 'opencascade::handle< GeomEvaluator_Surface > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_Surface_IsNull(t)
Handle_GeomEvaluator_Surface_IsNull = _GeomEvaluator.Handle_GeomEvaluator_Surface_IsNull

def Handle_GeomEvaluator_OffsetCurve_Create() -> "opencascade::handle< GeomEvaluator_OffsetCurve >":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_Create()
Handle_GeomEvaluator_OffsetCurve_Create = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_Create

def Handle_GeomEvaluator_OffsetCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_OffsetCurve >":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_DownCast(t)
Handle_GeomEvaluator_OffsetCurve_DownCast = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_DownCast

def Handle_GeomEvaluator_OffsetCurve_IsNull(t: 'opencascade::handle< GeomEvaluator_OffsetCurve > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_IsNull(t)
Handle_GeomEvaluator_OffsetCurve_IsNull = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_IsNull

def Handle_GeomEvaluator_OffsetSurface_Create() -> "opencascade::handle< GeomEvaluator_OffsetSurface >":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_Create()
Handle_GeomEvaluator_OffsetSurface_Create = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_Create

def Handle_GeomEvaluator_OffsetSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_OffsetSurface >":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_DownCast(t)
Handle_GeomEvaluator_OffsetSurface_DownCast = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_DownCast

def Handle_GeomEvaluator_OffsetSurface_IsNull(t: 'opencascade::handle< GeomEvaluator_OffsetSurface > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_IsNull(t)
Handle_GeomEvaluator_OffsetSurface_IsNull = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_IsNull

def Handle_GeomEvaluator_SurfaceOfExtrusion_Create() -> "opencascade::handle< GeomEvaluator_SurfaceOfExtrusion >":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_Create()
Handle_GeomEvaluator_SurfaceOfExtrusion_Create = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_Create

def Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_SurfaceOfExtrusion >":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast(t)
Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast

def Handle_GeomEvaluator_SurfaceOfExtrusion_IsNull(t: 'opencascade::handle< GeomEvaluator_SurfaceOfExtrusion > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_IsNull(t)
Handle_GeomEvaluator_SurfaceOfExtrusion_IsNull = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_IsNull

def Handle_GeomEvaluator_SurfaceOfRevolution_Create() -> "opencascade::handle< GeomEvaluator_SurfaceOfRevolution >":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_Create()
Handle_GeomEvaluator_SurfaceOfRevolution_Create = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_Create

def Handle_GeomEvaluator_SurfaceOfRevolution_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_SurfaceOfRevolution >":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_DownCast(t)
Handle_GeomEvaluator_SurfaceOfRevolution_DownCast = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_DownCast

def Handle_GeomEvaluator_SurfaceOfRevolution_IsNull(t: 'opencascade::handle< GeomEvaluator_SurfaceOfRevolution > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_IsNull(t)
Handle_GeomEvaluator_SurfaceOfRevolution_IsNull = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_IsNull
class GeomEvaluator_Curve(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        * Value of 3D curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_Curve_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        * Value and first derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1:
        	:type theD1: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_Curve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        * Value, first and second derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1:
        	:type theD1: gp_Vec
        	:param theD2:
        	:type theD2: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_Curve_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        * Value, first, second and third derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1:
        	:type theD1: gp_Vec
        	:param theD2:
        	:type theD2: gp_Vec
        	:param theD3:
        	:type theD3: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_Curve_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        * Calculates N-th derivatives of curve, where N = theDerU. Raises if N < 1
        	:param theU:
        	:type theU: float
        	:param theDerU:
        	:type theDerU: int
        	:rtype: gp_Vec
        """
        return _GeomEvaluator.GeomEvaluator_Curve_DN(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_Curve
GeomEvaluator_Curve.D0 = new_instancemethod(_GeomEvaluator.GeomEvaluator_Curve_D0, None, GeomEvaluator_Curve)
GeomEvaluator_Curve.D1 = new_instancemethod(_GeomEvaluator.GeomEvaluator_Curve_D1, None, GeomEvaluator_Curve)
GeomEvaluator_Curve.D2 = new_instancemethod(_GeomEvaluator.GeomEvaluator_Curve_D2, None, GeomEvaluator_Curve)
GeomEvaluator_Curve.D3 = new_instancemethod(_GeomEvaluator.GeomEvaluator_Curve_D3, None, GeomEvaluator_Curve)
GeomEvaluator_Curve.DN = new_instancemethod(_GeomEvaluator.GeomEvaluator_Curve_DN, None, GeomEvaluator_Curve)
GeomEvaluator_Curve_swigregister = _GeomEvaluator.GeomEvaluator_Curve_swigregister
GeomEvaluator_Curve_swigregister(GeomEvaluator_Curve)

class GeomEvaluator_Surface(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        * Value of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_Surface_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        * Value and first derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_Surface_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        * Value, first and second derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:param theD2U:
        	:type theD2U: gp_Vec
        	:param theD2V:
        	:type theD2V: gp_Vec
        	:param theD2UV:
        	:type theD2UV: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_Surface_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        * Value, first, second and third derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:param theD2U:
        	:type theD2U: gp_Vec
        	:param theD2V:
        	:type theD2V: gp_Vec
        	:param theD2UV:
        	:type theD2UV: gp_Vec
        	:param theD3U:
        	:type theD3U: gp_Vec
        	:param theD3V:
        	:type theD3V: gp_Vec
        	:param theD3UUV:
        	:type theD3UUV: gp_Vec
        	:param theD3UVV:
        	:type theD3UVV: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_Surface_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        * Calculates N-th derivatives of surface, where N = theDerU + theDerV. //! Raises if N < 1 or theDerU < 0 or theDerV < 0
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theDerU:
        	:type theDerU: int
        	:param theDerV:
        	:type theDerV: int
        	:rtype: gp_Vec
        """
        return _GeomEvaluator.GeomEvaluator_Surface_DN(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_Surface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_Surface
GeomEvaluator_Surface.D0 = new_instancemethod(_GeomEvaluator.GeomEvaluator_Surface_D0, None, GeomEvaluator_Surface)
GeomEvaluator_Surface.D1 = new_instancemethod(_GeomEvaluator.GeomEvaluator_Surface_D1, None, GeomEvaluator_Surface)
GeomEvaluator_Surface.D2 = new_instancemethod(_GeomEvaluator.GeomEvaluator_Surface_D2, None, GeomEvaluator_Surface)
GeomEvaluator_Surface.D3 = new_instancemethod(_GeomEvaluator.GeomEvaluator_Surface_D3, None, GeomEvaluator_Surface)
GeomEvaluator_Surface.DN = new_instancemethod(_GeomEvaluator.GeomEvaluator_Surface_DN, None, GeomEvaluator_Surface)
GeomEvaluator_Surface_swigregister = _GeomEvaluator.GeomEvaluator_Surface_swigregister
GeomEvaluator_Surface_swigregister(GeomEvaluator_Surface)

class GeomEvaluator_OffsetCurve(GeomEvaluator_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        * Value of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        * Value and first derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1:
        	:type theD1: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        * Value, first and second derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1:
        	:type theD1: gp_Vec
        	:param theD2:
        	:type theD2: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        * Value, first, second and third derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1:
        	:type theD1: gp_Vec
        	:param theD2:
        	:type theD2: gp_Vec
        	:param theD3:
        	:type theD3: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        * Calculates N-th derivatives of curve, where N = theDeriv. Raises if N < 1
        	:param theU:
        	:type theU: float
        	:param theDeriv:
        	:type theDeriv: int
        	:rtype: gp_Vec
        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_DN(self, *args)


    def __init__(self, *args):
        """
        * Initialize evaluator by curve
        	:param theBase:
        	:type theBase: Geom_Curve
        	:param theOffset:
        	:type theOffset: float
        	:param theDirection:
        	:type theDirection: gp_Dir
        	:rtype: None
        * Initialize evaluator by curve adaptor
        	:param theBase:
        	:type theBase: GeomAdaptor_HCurve
        	:param theOffset:
        	:type theOffset: float
        	:param theDirection:
        	:type theDirection: gp_Dir
        	:rtype: None
        """
        _GeomEvaluator.GeomEvaluator_OffsetCurve_swiginit(self, _GeomEvaluator.new_GeomEvaluator_OffsetCurve(*args))

    def SetOffsetDirection(self, *args) -> "void":
        """
        :param theDirection:
        	:type theDirection: gp_Dir
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_SetOffsetDirection(self, *args)


    def SetOffsetValue(self, *args) -> "void":
        """
        * Change the offset value
        	:param theOffset:
        	:type theOffset: float
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_SetOffsetValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_OffsetCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_OffsetCurve
GeomEvaluator_OffsetCurve.D0 = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetCurve_D0, None, GeomEvaluator_OffsetCurve)
GeomEvaluator_OffsetCurve.D1 = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetCurve_D1, None, GeomEvaluator_OffsetCurve)
GeomEvaluator_OffsetCurve.D2 = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetCurve_D2, None, GeomEvaluator_OffsetCurve)
GeomEvaluator_OffsetCurve.D3 = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetCurve_D3, None, GeomEvaluator_OffsetCurve)
GeomEvaluator_OffsetCurve.DN = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetCurve_DN, None, GeomEvaluator_OffsetCurve)
GeomEvaluator_OffsetCurve.SetOffsetDirection = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetCurve_SetOffsetDirection, None, GeomEvaluator_OffsetCurve)
GeomEvaluator_OffsetCurve.SetOffsetValue = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetCurve_SetOffsetValue, None, GeomEvaluator_OffsetCurve)
GeomEvaluator_OffsetCurve_swigregister = _GeomEvaluator.GeomEvaluator_OffsetCurve_swigregister
GeomEvaluator_OffsetCurve_swigregister(GeomEvaluator_OffsetCurve)

class GeomEvaluator_OffsetSurface(GeomEvaluator_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        * Value of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        * Value and first derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        * Value, first and second derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:param theD2U:
        	:type theD2U: gp_Vec
        	:param theD2V:
        	:type theD2V: gp_Vec
        	:param theD2UV:
        	:type theD2UV: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        * Value, first, second and third derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:param theD2U:
        	:type theD2U: gp_Vec
        	:param theD2V:
        	:type theD2V: gp_Vec
        	:param theD2UV:
        	:type theD2UV: gp_Vec
        	:param theD3U:
        	:type theD3U: gp_Vec
        	:param theD3V:
        	:type theD3V: gp_Vec
        	:param theD3UUV:
        	:type theD3UUV: gp_Vec
        	:param theD3UVV:
        	:type theD3UVV: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        * Calculates N-th derivatives of surface, where N = theDerU + theDerV. //! Raises if N < 1 or theDerU < 0 or theDerV < 0
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theDerU:
        	:type theDerU: int
        	:param theDerV:
        	:type theDerV: int
        	:rtype: gp_Vec
        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_DN(self, *args)


    def __init__(self, *args):
        """
        * Initialize evaluator by surface
        	:param theBase:
        	:type theBase: Geom_Surface
        	:param theOffset:
        	:type theOffset: float
        	:param theOscSurf: default value is opencascade::handle<Geom_OsculatingSurface>()
        	:type theOscSurf: Geom_OsculatingSurface
        	:rtype: None
        * Initialize evaluator by surface adaptor
        	:param theBase:
        	:type theBase: GeomAdaptor_HSurface
        	:param theOffset:
        	:type theOffset: float
        	:param theOscSurf: default value is opencascade::handle<Geom_OsculatingSurface>()
        	:type theOscSurf: Geom_OsculatingSurface
        	:rtype: None
        """
        _GeomEvaluator.GeomEvaluator_OffsetSurface_swiginit(self, _GeomEvaluator.new_GeomEvaluator_OffsetSurface(*args))

    def SetOffsetValue(self, *args) -> "void":
        """
        * Change the offset value
        	:param theOffset:
        	:type theOffset: float
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_SetOffsetValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_OffsetSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_OffsetSurface
GeomEvaluator_OffsetSurface.D0 = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetSurface_D0, None, GeomEvaluator_OffsetSurface)
GeomEvaluator_OffsetSurface.D1 = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetSurface_D1, None, GeomEvaluator_OffsetSurface)
GeomEvaluator_OffsetSurface.D2 = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetSurface_D2, None, GeomEvaluator_OffsetSurface)
GeomEvaluator_OffsetSurface.D3 = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetSurface_D3, None, GeomEvaluator_OffsetSurface)
GeomEvaluator_OffsetSurface.DN = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetSurface_DN, None, GeomEvaluator_OffsetSurface)
GeomEvaluator_OffsetSurface.SetOffsetValue = new_instancemethod(_GeomEvaluator.GeomEvaluator_OffsetSurface_SetOffsetValue, None, GeomEvaluator_OffsetSurface)
GeomEvaluator_OffsetSurface_swigregister = _GeomEvaluator.GeomEvaluator_OffsetSurface_swigregister
GeomEvaluator_OffsetSurface_swigregister(GeomEvaluator_OffsetSurface)

class GeomEvaluator_SurfaceOfExtrusion(GeomEvaluator_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        * Value of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        * Value and first derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        * Value, first and second derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:param theD2U:
        	:type theD2U: gp_Vec
        	:param theD2V:
        	:type theD2V: gp_Vec
        	:param theD2UV:
        	:type theD2UV: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        * Value, first, second and third derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:param theD2U:
        	:type theD2U: gp_Vec
        	:param theD2V:
        	:type theD2V: gp_Vec
        	:param theD2UV:
        	:type theD2UV: gp_Vec
        	:param theD3U:
        	:type theD3U: gp_Vec
        	:param theD3V:
        	:type theD3V: gp_Vec
        	:param theD3UUV:
        	:type theD3UUV: gp_Vec
        	:param theD3UVV:
        	:type theD3UVV: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        * Calculates N-th derivatives of surface, where N = theDerU + theDerV. //! Raises if N < 1 or theDerU < 0 or theDerV < 0
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theDerU:
        	:type theDerU: int
        	:param theDerV:
        	:type theDerV: int
        	:rtype: gp_Vec
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_DN(self, *args)


    def __init__(self, *args):
        """
        * Initialize evaluator by surface
        	:param theBase:
        	:type theBase: Geom_Curve
        	:param theExtrusionDir:
        	:type theExtrusionDir: gp_Dir
        	:rtype: None
        * Initialize evaluator by surface adaptor
        	:param theBase:
        	:type theBase: Adaptor3d_HCurve
        	:param theExtrusionDir:
        	:type theExtrusionDir: gp_Dir
        	:rtype: None
        """
        _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_swiginit(self, _GeomEvaluator.new_GeomEvaluator_SurfaceOfExtrusion(*args))

    def SetDirection(self, *args) -> "void":
        """
        * /Changes the direction of extrusion
        	:param theDirection:
        	:type theDirection: gp_Dir
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_SetDirection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_SurfaceOfExtrusion
GeomEvaluator_SurfaceOfExtrusion.D0 = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D0, None, GeomEvaluator_SurfaceOfExtrusion)
GeomEvaluator_SurfaceOfExtrusion.D1 = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D1, None, GeomEvaluator_SurfaceOfExtrusion)
GeomEvaluator_SurfaceOfExtrusion.D2 = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D2, None, GeomEvaluator_SurfaceOfExtrusion)
GeomEvaluator_SurfaceOfExtrusion.D3 = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D3, None, GeomEvaluator_SurfaceOfExtrusion)
GeomEvaluator_SurfaceOfExtrusion.DN = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_DN, None, GeomEvaluator_SurfaceOfExtrusion)
GeomEvaluator_SurfaceOfExtrusion.SetDirection = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_SetDirection, None, GeomEvaluator_SurfaceOfExtrusion)
GeomEvaluator_SurfaceOfExtrusion_swigregister = _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_swigregister
GeomEvaluator_SurfaceOfExtrusion_swigregister(GeomEvaluator_SurfaceOfExtrusion)

class GeomEvaluator_SurfaceOfRevolution(GeomEvaluator_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        * Value of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        * Value and first derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        * Value, first and second derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:param theD2U:
        	:type theD2U: gp_Vec
        	:param theD2V:
        	:type theD2V: gp_Vec
        	:param theD2UV:
        	:type theD2UV: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        * Value, first, second and third derivatives of surface
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theValue:
        	:type theValue: gp_Pnt
        	:param theD1U:
        	:type theD1U: gp_Vec
        	:param theD1V:
        	:type theD1V: gp_Vec
        	:param theD2U:
        	:type theD2U: gp_Vec
        	:param theD2V:
        	:type theD2V: gp_Vec
        	:param theD2UV:
        	:type theD2UV: gp_Vec
        	:param theD3U:
        	:type theD3U: gp_Vec
        	:param theD3V:
        	:type theD3V: gp_Vec
        	:param theD3UUV:
        	:type theD3UUV: gp_Vec
        	:param theD3UVV:
        	:type theD3UVV: gp_Vec
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        * Calculates N-th derivatives of surface, where N = theDerU + theDerV. //! Raises if N < 1 or theDerU < 0 or theDerV < 0
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theDerU:
        	:type theDerU: int
        	:param theDerV:
        	:type theDerV: int
        	:rtype: gp_Vec
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_DN(self, *args)


    def __init__(self, *args):
        """
        * Initialize evaluator by revolved curve, the axis of revolution and the location
        	:param theBase:
        	:type theBase: Geom_Curve
        	:param theRevolDir:
        	:type theRevolDir: gp_Dir
        	:param theRevolLoc:
        	:type theRevolLoc: gp_Pnt
        	:rtype: None
        * Initialize evaluator by adaptor of the revolved curve, the axis of revolution and the location
        	:param theBase:
        	:type theBase: Adaptor3d_HCurve
        	:param theRevolDir:
        	:type theRevolDir: gp_Dir
        	:param theRevolLoc:
        	:type theRevolLoc: gp_Pnt
        	:rtype: None
        """
        _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_swiginit(self, _GeomEvaluator.new_GeomEvaluator_SurfaceOfRevolution(*args))

    def SetAxis(self, *args) -> "void":
        """
        * Change the axis of revolution
        	:param theAxis:
        	:type theAxis: gp_Ax1
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetAxis(self, *args)


    def SetDirection(self, *args) -> "void":
        """
        * Change direction of the axis of revolution
        	:param theDirection:
        	:type theDirection: gp_Dir
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetDirection(self, *args)


    def SetLocation(self, *args) -> "void":
        """
        * Change location of the axis of revolution
        	:param theLocation:
        	:type theLocation: gp_Pnt
        	:rtype: None
        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetLocation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_SurfaceOfRevolution_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_SurfaceOfRevolution
GeomEvaluator_SurfaceOfRevolution.D0 = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D0, None, GeomEvaluator_SurfaceOfRevolution)
GeomEvaluator_SurfaceOfRevolution.D1 = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D1, None, GeomEvaluator_SurfaceOfRevolution)
GeomEvaluator_SurfaceOfRevolution.D2 = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D2, None, GeomEvaluator_SurfaceOfRevolution)
GeomEvaluator_SurfaceOfRevolution.D3 = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D3, None, GeomEvaluator_SurfaceOfRevolution)
GeomEvaluator_SurfaceOfRevolution.DN = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_DN, None, GeomEvaluator_SurfaceOfRevolution)
GeomEvaluator_SurfaceOfRevolution.SetAxis = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetAxis, None, GeomEvaluator_SurfaceOfRevolution)
GeomEvaluator_SurfaceOfRevolution.SetDirection = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetDirection, None, GeomEvaluator_SurfaceOfRevolution)
GeomEvaluator_SurfaceOfRevolution.SetLocation = new_instancemethod(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetLocation, None, GeomEvaluator_SurfaceOfRevolution)
GeomEvaluator_SurfaceOfRevolution_swigregister = _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_swigregister
GeomEvaluator_SurfaceOfRevolution_swigregister(GeomEvaluator_SurfaceOfRevolution)



