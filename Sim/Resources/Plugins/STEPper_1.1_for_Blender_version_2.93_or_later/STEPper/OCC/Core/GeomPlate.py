# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomPlate module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomplate.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GeomPlate.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomPlate')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomPlate')
    _GeomPlate = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomPlate', [dirname(__file__)])
        except ImportError:
            import _GeomPlate
            return _GeomPlate
        try:
            _mod = imp.load_module('_GeomPlate', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomPlate = swig_import_helper()
    del swig_import_helper
else:
    import _GeomPlate
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomPlate.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GeomPlate.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GeomPlate.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GeomPlate.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GeomPlate.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GeomPlate.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GeomPlate.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GeomPlate.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GeomPlate.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GeomPlate.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GeomPlate.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GeomPlate.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GeomPlate.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GeomPlate.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GeomPlate.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GeomPlate.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GeomPlate.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GeomPlate.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GeomPlate.process_exception(error, method_name, class_name)
process_exception = _GeomPlate.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.TColGeom2d
import OCC.Core.GeomLProp
import OCC.Core.Law
import OCC.Core.AdvApp2Var
import OCC.Core.AdvApprox
import OCC.Core.PLib
import OCC.Core.Plate

def Handle_GeomPlate_CurveConstraint_Create() -> "opencascade::handle< GeomPlate_CurveConstraint >":
    return _GeomPlate.Handle_GeomPlate_CurveConstraint_Create()
Handle_GeomPlate_CurveConstraint_Create = _GeomPlate.Handle_GeomPlate_CurveConstraint_Create

def Handle_GeomPlate_CurveConstraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomPlate_CurveConstraint >":
    return _GeomPlate.Handle_GeomPlate_CurveConstraint_DownCast(t)
Handle_GeomPlate_CurveConstraint_DownCast = _GeomPlate.Handle_GeomPlate_CurveConstraint_DownCast

def Handle_GeomPlate_CurveConstraint_IsNull(t: 'opencascade::handle< GeomPlate_CurveConstraint > const &') -> "bool":
    return _GeomPlate.Handle_GeomPlate_CurveConstraint_IsNull(t)
Handle_GeomPlate_CurveConstraint_IsNull = _GeomPlate.Handle_GeomPlate_CurveConstraint_IsNull

def Handle_GeomPlate_PointConstraint_Create() -> "opencascade::handle< GeomPlate_PointConstraint >":
    return _GeomPlate.Handle_GeomPlate_PointConstraint_Create()
Handle_GeomPlate_PointConstraint_Create = _GeomPlate.Handle_GeomPlate_PointConstraint_Create

def Handle_GeomPlate_PointConstraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomPlate_PointConstraint >":
    return _GeomPlate.Handle_GeomPlate_PointConstraint_DownCast(t)
Handle_GeomPlate_PointConstraint_DownCast = _GeomPlate.Handle_GeomPlate_PointConstraint_DownCast

def Handle_GeomPlate_PointConstraint_IsNull(t: 'opencascade::handle< GeomPlate_PointConstraint > const &') -> "bool":
    return _GeomPlate.Handle_GeomPlate_PointConstraint_IsNull(t)
Handle_GeomPlate_PointConstraint_IsNull = _GeomPlate.Handle_GeomPlate_PointConstraint_IsNull

def Handle_GeomPlate_Surface_Create() -> "opencascade::handle< GeomPlate_Surface >":
    return _GeomPlate.Handle_GeomPlate_Surface_Create()
Handle_GeomPlate_Surface_Create = _GeomPlate.Handle_GeomPlate_Surface_Create

def Handle_GeomPlate_Surface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomPlate_Surface >":
    return _GeomPlate.Handle_GeomPlate_Surface_DownCast(t)
Handle_GeomPlate_Surface_DownCast = _GeomPlate.Handle_GeomPlate_Surface_DownCast

def Handle_GeomPlate_Surface_IsNull(t: 'opencascade::handle< GeomPlate_Surface > const &') -> "bool":
    return _GeomPlate.Handle_GeomPlate_Surface_IsNull(t)
Handle_GeomPlate_Surface_IsNull = _GeomPlate.Handle_GeomPlate_Surface_IsNull

def Handle_GeomPlate_HArray1OfSequenceOfReal_Create() -> "opencascade::handle< GeomPlate_HArray1OfSequenceOfReal >":
    return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_Create()
Handle_GeomPlate_HArray1OfSequenceOfReal_Create = _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_Create

def Handle_GeomPlate_HArray1OfSequenceOfReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomPlate_HArray1OfSequenceOfReal >":
    return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_DownCast(t)
Handle_GeomPlate_HArray1OfSequenceOfReal_DownCast = _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_DownCast

def Handle_GeomPlate_HArray1OfSequenceOfReal_IsNull(t: 'opencascade::handle< GeomPlate_HArray1OfSequenceOfReal > const &') -> "bool":
    return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_IsNull(t)
Handle_GeomPlate_HArray1OfSequenceOfReal_IsNull = _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_IsNull

def Handle_GeomPlate_HArray1OfHCurve_Create() -> "opencascade::handle< GeomPlate_HArray1OfHCurve >":
    return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_Create()
Handle_GeomPlate_HArray1OfHCurve_Create = _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_Create

def Handle_GeomPlate_HArray1OfHCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomPlate_HArray1OfHCurve >":
    return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_DownCast(t)
Handle_GeomPlate_HArray1OfHCurve_DownCast = _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_DownCast

def Handle_GeomPlate_HArray1OfHCurve_IsNull(t: 'opencascade::handle< GeomPlate_HArray1OfHCurve > const &') -> "bool":
    return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_IsNull(t)
Handle_GeomPlate_HArray1OfHCurve_IsNull = _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_IsNull

def Handle_GeomPlate_HSequenceOfPointConstraint_Create() -> "opencascade::handle< GeomPlate_HSequenceOfPointConstraint >":
    return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_Create()
Handle_GeomPlate_HSequenceOfPointConstraint_Create = _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_Create

def Handle_GeomPlate_HSequenceOfPointConstraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomPlate_HSequenceOfPointConstraint >":
    return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_DownCast(t)
Handle_GeomPlate_HSequenceOfPointConstraint_DownCast = _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_DownCast

def Handle_GeomPlate_HSequenceOfPointConstraint_IsNull(t: 'opencascade::handle< GeomPlate_HSequenceOfPointConstraint > const &') -> "bool":
    return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_IsNull(t)
Handle_GeomPlate_HSequenceOfPointConstraint_IsNull = _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_IsNull

def Handle_GeomPlate_HSequenceOfCurveConstraint_Create() -> "opencascade::handle< GeomPlate_HSequenceOfCurveConstraint >":
    return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_Create()
Handle_GeomPlate_HSequenceOfCurveConstraint_Create = _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_Create

def Handle_GeomPlate_HSequenceOfCurveConstraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomPlate_HSequenceOfCurveConstraint >":
    return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_DownCast(t)
Handle_GeomPlate_HSequenceOfCurveConstraint_DownCast = _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_DownCast

def Handle_GeomPlate_HSequenceOfCurveConstraint_IsNull(t: 'opencascade::handle< GeomPlate_HSequenceOfCurveConstraint > const &') -> "bool":
    return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_IsNull(t)
Handle_GeomPlate_HSequenceOfCurveConstraint_IsNull = _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_IsNull
class GeomPlate_SequenceOfAij(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomPlate.GeomPlate_SequenceOfAij_swiginit(self, _GeomPlate.new_GeomPlate_SequenceOfAij(*args))
    delNode = staticmethod(_GeomPlate.GeomPlate_SequenceOfAij_delNode)
    __swig_destroy__ = _GeomPlate.delete_GeomPlate_SequenceOfAij
GeomPlate_SequenceOfAij.begin = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_begin, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.end = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_end, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.cbegin = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_cbegin, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.cend = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_cend, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Size = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Size, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Length = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Length, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Lower = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Lower, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Upper = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Upper, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.IsEmpty = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_IsEmpty, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Reverse = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Reverse, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Exchange = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Exchange, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Clear = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Clear, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Assign = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Assign, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Set = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Set, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Remove = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Remove, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Append = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Append, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Prepend = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Prepend, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.InsertBefore = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_InsertBefore, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.InsertAfter = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_InsertAfter, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Split = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Split, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.First = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_First, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.ChangeFirst = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_ChangeFirst, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Last = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Last, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.ChangeLast = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_ChangeLast, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.Value = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_Value, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.ChangeValue = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_ChangeValue, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.__call__ = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij___call__, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij.SetValue = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfAij_SetValue, None, GeomPlate_SequenceOfAij)
GeomPlate_SequenceOfAij_swigregister = _GeomPlate.GeomPlate_SequenceOfAij_swigregister
GeomPlate_SequenceOfAij_swigregister(GeomPlate_SequenceOfAij)

def GeomPlate_SequenceOfAij_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _GeomPlate.GeomPlate_SequenceOfAij_delNode(theNode, theAl)
GeomPlate_SequenceOfAij_delNode = _GeomPlate.GeomPlate_SequenceOfAij_delNode

class GeomPlate_Array1OfHCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomPlate.GeomPlate_Array1OfHCurve_swiginit(self, _GeomPlate.new_GeomPlate_Array1OfHCurve(*args))
    __swig_destroy__ = _GeomPlate.delete_GeomPlate_Array1OfHCurve

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

GeomPlate_Array1OfHCurve.begin = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_begin, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.end = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_end, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.cbegin = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_cbegin, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.cend = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_cend, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.Init = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_Init, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.Size = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_Size, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.Length = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_Length, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.IsEmpty = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_IsEmpty, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.Lower = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_Lower, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.Upper = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_Upper, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.IsDeletable = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_IsDeletable, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.IsAllocated = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_IsAllocated, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.Assign = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_Assign, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.Move = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_Move, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.Set = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_Set, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.First = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_First, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.ChangeFirst = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_ChangeFirst, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.Last = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_Last, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.ChangeLast = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_ChangeLast, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.Value = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_Value, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.ChangeValue = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_ChangeValue, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.__call__ = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve___call__, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.SetValue = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_SetValue, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve.Resize = new_instancemethod(_GeomPlate.GeomPlate_Array1OfHCurve_Resize, None, GeomPlate_Array1OfHCurve)
GeomPlate_Array1OfHCurve_swigregister = _GeomPlate.GeomPlate_Array1OfHCurve_swigregister
GeomPlate_Array1OfHCurve_swigregister(GeomPlate_Array1OfHCurve)

class GeomPlate_Array1OfSequenceOfReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomPlate.GeomPlate_Array1OfSequenceOfReal_swiginit(self, _GeomPlate.new_GeomPlate_Array1OfSequenceOfReal(*args))
    __swig_destroy__ = _GeomPlate.delete_GeomPlate_Array1OfSequenceOfReal

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

GeomPlate_Array1OfSequenceOfReal.begin = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_begin, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.end = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_end, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.cbegin = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_cbegin, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.cend = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_cend, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.Init = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_Init, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.Size = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_Size, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.Length = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_Length, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.IsEmpty = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_IsEmpty, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.Lower = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_Lower, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.Upper = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_Upper, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.IsDeletable = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_IsDeletable, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.IsAllocated = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_IsAllocated, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.Assign = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_Assign, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.Move = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_Move, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.Set = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_Set, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.First = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_First, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.ChangeFirst = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_ChangeFirst, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.Last = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_Last, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.ChangeLast = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_ChangeLast, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.Value = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_Value, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.ChangeValue = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_ChangeValue, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.__call__ = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal___call__, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.SetValue = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_SetValue, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal.Resize = new_instancemethod(_GeomPlate.GeomPlate_Array1OfSequenceOfReal_Resize, None, GeomPlate_Array1OfSequenceOfReal)
GeomPlate_Array1OfSequenceOfReal_swigregister = _GeomPlate.GeomPlate_Array1OfSequenceOfReal_swigregister
GeomPlate_Array1OfSequenceOfReal_swigregister(GeomPlate_Array1OfSequenceOfReal)

class GeomPlate_SequenceOfPointConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomPlate.GeomPlate_SequenceOfPointConstraint_swiginit(self, _GeomPlate.new_GeomPlate_SequenceOfPointConstraint(*args))
    delNode = staticmethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_delNode)
    __swig_destroy__ = _GeomPlate.delete_GeomPlate_SequenceOfPointConstraint
GeomPlate_SequenceOfPointConstraint.begin = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_begin, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.end = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_end, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.cbegin = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_cbegin, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.cend = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_cend, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Size = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Size, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Length = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Length, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Lower = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Lower, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Upper = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Upper, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.IsEmpty = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_IsEmpty, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Reverse = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Reverse, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Exchange = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Exchange, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Clear = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Clear, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Assign = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Assign, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Set = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Set, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Remove = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Remove, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Append = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Append, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Prepend = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Prepend, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.InsertBefore = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_InsertBefore, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.InsertAfter = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_InsertAfter, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Split = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Split, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.First = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_First, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.ChangeFirst = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_ChangeFirst, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Last = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Last, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.ChangeLast = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_ChangeLast, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.Value = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_Value, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.ChangeValue = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_ChangeValue, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.__call__ = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint___call__, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint.SetValue = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfPointConstraint_SetValue, None, GeomPlate_SequenceOfPointConstraint)
GeomPlate_SequenceOfPointConstraint_swigregister = _GeomPlate.GeomPlate_SequenceOfPointConstraint_swigregister
GeomPlate_SequenceOfPointConstraint_swigregister(GeomPlate_SequenceOfPointConstraint)

def GeomPlate_SequenceOfPointConstraint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _GeomPlate.GeomPlate_SequenceOfPointConstraint_delNode(theNode, theAl)
GeomPlate_SequenceOfPointConstraint_delNode = _GeomPlate.GeomPlate_SequenceOfPointConstraint_delNode

class GeomPlate_SequenceOfCurveConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomPlate.GeomPlate_SequenceOfCurveConstraint_swiginit(self, _GeomPlate.new_GeomPlate_SequenceOfCurveConstraint(*args))
    delNode = staticmethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_delNode)
    __swig_destroy__ = _GeomPlate.delete_GeomPlate_SequenceOfCurveConstraint
GeomPlate_SequenceOfCurveConstraint.begin = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_begin, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.end = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_end, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.cbegin = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_cbegin, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.cend = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_cend, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Size = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Size, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Length = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Length, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Lower = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Lower, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Upper = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Upper, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.IsEmpty = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_IsEmpty, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Reverse = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Reverse, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Exchange = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Exchange, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Clear = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Clear, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Assign = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Assign, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Set = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Set, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Remove = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Remove, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Append = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Append, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Prepend = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Prepend, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.InsertBefore = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_InsertBefore, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.InsertAfter = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_InsertAfter, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Split = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Split, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.First = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_First, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.ChangeFirst = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_ChangeFirst, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Last = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Last, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.ChangeLast = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_ChangeLast, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.Value = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_Value, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.ChangeValue = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_ChangeValue, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.__call__ = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint___call__, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint.SetValue = new_instancemethod(_GeomPlate.GeomPlate_SequenceOfCurveConstraint_SetValue, None, GeomPlate_SequenceOfCurveConstraint)
GeomPlate_SequenceOfCurveConstraint_swigregister = _GeomPlate.GeomPlate_SequenceOfCurveConstraint_swigregister
GeomPlate_SequenceOfCurveConstraint_swigregister(GeomPlate_SequenceOfCurveConstraint)

def GeomPlate_SequenceOfCurveConstraint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _GeomPlate.GeomPlate_SequenceOfCurveConstraint_delNode(theNode, theAl)
GeomPlate_SequenceOfCurveConstraint_delNode = _GeomPlate.GeomPlate_SequenceOfCurveConstraint_delNode

class GeomPlate_Aij(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param anInd1:
        	:type anInd1: int
        	:param anInd2:
        	:type anInd2: int
        	:param aVec:
        	:type aVec: gp_Vec
        	:rtype: None
        """
        _GeomPlate.GeomPlate_Aij_swiginit(self, _GeomPlate.new_GeomPlate_Aij(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_Aij
GeomPlate_Aij_swigregister = _GeomPlate.GeomPlate_Aij_swigregister
GeomPlate_Aij_swigregister(GeomPlate_Aij)

class GeomPlate_BuildAveragePlane(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Tol is a Tolerance to make the difference between the result plane and the result line. if POption = 1 : automatical parametrisation if POption = 2 : parametrisation by eigen vectors if NOption = 1 : the average plane is the inertial plane. if NOption = 2 : the average plane is the plane of max. flux.
        	:param Pts:
        	:type Pts: TColgp_HArray1OfPnt
        	:param NbBoundPoints:
        	:type NbBoundPoints: int
        	:param Tol:
        	:type Tol: float
        	:param POption:
        	:type POption: int
        	:param NOption:
        	:type NOption: int
        	:rtype: None
        * Creates the plane from the 'best vector'
        	:param Normals:
        	:type Normals: TColgp_SequenceOfVec
        	:param Pts:
        	:type Pts: TColgp_HArray1OfPnt
        	:rtype: None
        """
        _GeomPlate.GeomPlate_BuildAveragePlane_swiginit(self, _GeomPlate.new_GeomPlate_BuildAveragePlane(*args))

    def HalfSpace(*args) -> "Standard_Boolean":
        """
        :param NewNormals:
        	:type NewNormals: TColgp_SequenceOfVec
        	:param Normals:
        	:type Normals: TColgp_SequenceOfVec
        	:param Bset:
        	:type Bset: GeomPlate_SequenceOfAij
        	:param LinTol:
        	:type LinTol: float
        	:param AngTol:
        	:type AngTol: float
        	:rtype: bool
        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_HalfSpace(*args)

    HalfSpace = staticmethod(HalfSpace)

    def IsLine(self, *args) -> "Standard_Boolean":
        """
        * return OK if is a line.
        	:rtype: bool
        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_IsLine(self, *args)


    def IsPlane(self, *args) -> "Standard_Boolean":
        """
        * return OK if is a plane.
        	:rtype: bool
        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_IsPlane(self, *args)


    def Line(self, *args) -> "opencascade::handle< Geom_Line >":
        """
        * Return a Line when 2 eigenvalues are null.
        	:rtype: opencascade::handle<Geom_Line>
        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_Line(self, *args)


    def MinMaxBox(self, *args) -> "void":
        """
        * computes the minimal box to include all normal projection points of the initial array on the plane.
        	:param Umin:
        	:type Umin: float
        	:param Umax:
        	:type Umax: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vmax:
        	:type Vmax: float
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_MinMaxBox(self, *args)


    def Plane(self, *args) -> "opencascade::handle< Geom_Plane >":
        """
        * Return the average Plane.
        	:rtype: opencascade::handle<Geom_Plane>
        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_Plane(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_BuildAveragePlane
GeomPlate_BuildAveragePlane.IsLine = new_instancemethod(_GeomPlate.GeomPlate_BuildAveragePlane_IsLine, None, GeomPlate_BuildAveragePlane)
GeomPlate_BuildAveragePlane.IsPlane = new_instancemethod(_GeomPlate.GeomPlate_BuildAveragePlane_IsPlane, None, GeomPlate_BuildAveragePlane)
GeomPlate_BuildAveragePlane.Line = new_instancemethod(_GeomPlate.GeomPlate_BuildAveragePlane_Line, None, GeomPlate_BuildAveragePlane)
GeomPlate_BuildAveragePlane.MinMaxBox = new_instancemethod(_GeomPlate.GeomPlate_BuildAveragePlane_MinMaxBox, None, GeomPlate_BuildAveragePlane)
GeomPlate_BuildAveragePlane.Plane = new_instancemethod(_GeomPlate.GeomPlate_BuildAveragePlane_Plane, None, GeomPlate_BuildAveragePlane)
GeomPlate_BuildAveragePlane_swigregister = _GeomPlate.GeomPlate_BuildAveragePlane_swigregister
GeomPlate_BuildAveragePlane_swigregister(GeomPlate_BuildAveragePlane)

def GeomPlate_BuildAveragePlane_HalfSpace(*args) -> "Standard_Boolean":
    """
    :param NewNormals:
    	:type NewNormals: TColgp_SequenceOfVec
    	:param Normals:
    	:type Normals: TColgp_SequenceOfVec
    	:param Bset:
    	:type Bset: GeomPlate_SequenceOfAij
    	:param LinTol:
    	:type LinTol: float
    	:param AngTol:
    	:type AngTol: float
    	:rtype: bool
    """
    return _GeomPlate.GeomPlate_BuildAveragePlane_HalfSpace(*args)

class GeomPlate_BuildPlateSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Adds the linear constraint cont.
        	:param Cont:
        	:type Cont: GeomPlate_CurveConstraint
        	:rtype: None
        * Adds the point constraint cont.
        	:param Cont:
        	:type Cont: GeomPlate_PointConstraint
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Add(self, *args)


    def CurveConstraint(self, *args) -> "opencascade::handle< GeomPlate_CurveConstraint >":
        """
        * returns the CurveConstraints of order order
        	:param order:
        	:type order: int
        	:rtype: opencascade::handle<GeomPlate_CurveConstraint>
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_CurveConstraint(self, *args)


    def Curves2d(self, *args) -> "opencascade::handle< TColGeom2d_HArray1OfCurve >":
        """
        * Extracts the array of curves on the plate surface which correspond to the curve constraints set in Add.
        	:rtype: opencascade::handle<TColGeom2d_HArray1OfCurve>
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Curves2d(self, *args)


    def Disc2dContour(self, *args) -> "void":
        """
        :param nbp:
        	:type nbp: int
        	:param Seq2d:
        	:type Seq2d: TColgp_SequenceOfXY
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Disc2dContour(self, *args)


    def Disc3dContour(self, *args) -> "void":
        """
        :param nbp:
        	:type nbp: int
        	:param iordre:
        	:type iordre: int
        	:param Seq3d:
        	:type Seq3d: TColgp_SequenceOfXYZ
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Disc3dContour(self, *args)


    def G0Error(self, *args) -> "Standard_Real":
        """
        * Returns the max distance betwen the result and the constraints
        	:rtype: float
        * Returns the max distance between the result and the constraint Index
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_G0Error(self, *args)


    def G1Error(self, *args) -> "Standard_Real":
        """
        * Returns the max angle betwen the result and the constraints
        	:rtype: float
        * Returns the max angle between the result and the constraint Index
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_G1Error(self, *args)


    def G2Error(self, *args) -> "Standard_Real":
        """
        * Returns the max difference of curvature betwen the result and the constraints
        	:rtype: float
        * Returns the max difference of curvature between the result and the constraint Index
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_G2Error(self, *args)


    def __init__(self, *args):
        """
        * Constructor compatible with the old version with this constructor the constraint are given in a Array of Curve on Surface The array NbPoints contains the number of points for each constraint. The Array Tang contains the order of constraint for each Constraint: The possible values for this order has to be -1 , 0 , 1 , 2 . Order i means constraint Gi. NbIter is the maximum number of iteration to optimise the number of points for resolution Degree is the degree of resolution for Plate Tol2d is the tolerance used to test if two points of different constraint are identical in the parametric space of the initial surface Tol3d is used to test if two identical points in the 2d space are identical in 3d space TolAng is used to compare the angle between normal of two identical points in the 2d space Raises ConstructionError;
        	:param NPoints:
        	:type NPoints: TColStd_HArray1OfInteger
        	:param TabCurve:
        	:type TabCurve: GeomPlate_HArray1OfHCurve
        	:param Tang:
        	:type Tang: TColStd_HArray1OfInteger
        	:param Degree:
        	:type Degree: int
        	:param NbIter: default value is 3
        	:type NbIter: int
        	:param Tol2d: default value is 0.00001
        	:type Tol2d: float
        	:param Tol3d: default value is 0.0001
        	:type Tol3d: float
        	:param TolAng: default value is 0.01
        	:type TolAng: float
        	:param TolCurv: default value is 0.1
        	:type TolCurv: float
        	:param Anisotropie: default value is Standard_False
        	:type Anisotropie: bool
        	:rtype: None
        :param Surf:
        	:type Surf: Geom_Surface
        	:param Degree: default value is 3
        	:type Degree: int
        	:param NbPtsOnCur: default value is 10
        	:type NbPtsOnCur: int
        	:param NbIter: default value is 3
        	:type NbIter: int
        	:param Tol2d: default value is 0.00001
        	:type Tol2d: float
        	:param Tol3d: default value is 0.0001
        	:type Tol3d: float
        	:param TolAng: default value is 0.01
        	:type TolAng: float
        	:param TolCurv: default value is 0.1
        	:type TolCurv: float
        	:param Anisotropie: default value is Standard_False
        	:type Anisotropie: bool
        	:rtype: None
        * Initializes the BuildPlateSurface framework for deforming plate surfaces using curve and point constraints. You use the first constructor if you have an initial surface to work with at construction time. If not, you use the second. You can add one later by using the method LoadInitSurface. If no initial surface is loaded, one will automatically be computed. The curve and point constraints will be defined by using the method Add. Before the call to the algorithm, the curve constraints will be transformed into sequences of discrete points. Each curve defined as a constraint will be given the value of NbPtsOnCur as the average number of points on it. Several arguments serve to improve performance of the algorithm. NbIter, for example, expresses the number of iterations allowed and is used to control the duration of computation. To optimize resolution, Degree will have the default value of 3. The surface generated must respect several tolerance values: - 2d tolerance given by Tol2d, with a default value of 0.00001 - 3d tolerance expressed by Tol3d, with a default value of 0.0001 - angular tolerance given by TolAng, with a default value of 0.01, defining the greatest angle allowed between the constraint and the target surface. Exceptions Standard_ConstructionError if NbIter is less than 1 or Degree is less than 3.
        	:param Degree: default value is 3
        	:type Degree: int
        	:param NbPtsOnCur: default value is 10
        	:type NbPtsOnCur: int
        	:param NbIter: default value is 3
        	:type NbIter: int
        	:param Tol2d: default value is 0.00001
        	:type Tol2d: float
        	:param Tol3d: default value is 0.0001
        	:type Tol3d: float
        	:param TolAng: default value is 0.01
        	:type TolAng: float
        	:param TolCurv: default value is 0.1
        	:type TolCurv: float
        	:param Anisotropie: default value is Standard_False
        	:type Anisotropie: bool
        	:rtype: None
        """
        _GeomPlate.GeomPlate_BuildPlateSurface_swiginit(self, _GeomPlate.new_GeomPlate_BuildPlateSurface(*args))

    def Init(self, *args) -> "void":
        """
        * Resets all constraints
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Tests whether computation of the plate has been completed.
        	:rtype: bool
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_IsDone(self, *args)


    def LoadInitSurface(self, *args) -> "void":
        """
        * Loads the initial Surface
        	:param Surf:
        	:type Surf: Geom_Surface
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_LoadInitSurface(self, *args)


    def Order(self, *args) -> "opencascade::handle< TColStd_HArray1OfInteger >":
        """
        * Returns the order of the curves in the array returned by Curves2d. Computation changes this order. Consequently, this method returns the order of the curves prior to computation.
        	:rtype: opencascade::handle<TColStd_HArray1OfInteger>
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Order(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Calls the algorithm and computes the plate surface using the loaded constraints. If no initial surface is given, the algorithm automatically computes one. Exceptions Standard_RangeError if the value of the constraint is null or if plate is not done.
        	:param aProgress: default value is opencascade::handle<Message_ProgressIndicator>()
        	:type aProgress: Message_ProgressIndicator
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Perform(self, *args)


    def PointConstraint(self, *args) -> "opencascade::handle< GeomPlate_PointConstraint >":
        """
        * returns the PointConstraint of order order
        	:param order:
        	:type order: int
        	:rtype: opencascade::handle<GeomPlate_PointConstraint>
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_PointConstraint(self, *args)


    def Sense(self, *args) -> "opencascade::handle< TColStd_HArray1OfInteger >":
        """
        * Allows you to ensure that the array of curves returned by Curves2d has the correct orientation. Returns the orientation of the curves in the the array returned by Curves2d. Computation changes the orientation of these curves. Consequently, this method returns the orientation prior to computation.
        	:rtype: opencascade::handle<TColStd_HArray1OfInteger>
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Sense(self, *args)


    def SetNbBounds(self, *args) -> "void":
        """
        :param NbBounds:
        	:type NbBounds: int
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_SetNbBounds(self, *args)


    def SurfInit(self, *args) -> "opencascade::handle< Geom_Surface >":
        """
        * Returns the initial surface
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_SurfInit(self, *args)


    def Surface(self, *args) -> "opencascade::handle< GeomPlate_Surface >":
        """
        * Returns the result of the computation. This surface can then be used by GeomPlate_MakeApprox for converting the resulting surface into a BSpline.
        	:rtype: opencascade::handle<GeomPlate_Surface>
        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Surface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_BuildPlateSurface
GeomPlate_BuildPlateSurface.Add = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_Add, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.CurveConstraint = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_CurveConstraint, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.Curves2d = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_Curves2d, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.Disc2dContour = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_Disc2dContour, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.Disc3dContour = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_Disc3dContour, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.G0Error = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_G0Error, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.G1Error = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_G1Error, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.G2Error = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_G2Error, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.Init = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_Init, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.IsDone = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_IsDone, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.LoadInitSurface = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_LoadInitSurface, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.Order = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_Order, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.Perform = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_Perform, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.PointConstraint = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_PointConstraint, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.Sense = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_Sense, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.SetNbBounds = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_SetNbBounds, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.SurfInit = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_SurfInit, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface.Surface = new_instancemethod(_GeomPlate.GeomPlate_BuildPlateSurface_Surface, None, GeomPlate_BuildPlateSurface)
GeomPlate_BuildPlateSurface_swigregister = _GeomPlate.GeomPlate_BuildPlateSurface_swigregister
GeomPlate_BuildPlateSurface_swigregister(GeomPlate_BuildPlateSurface)

class GeomPlate_CurveConstraint(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Curve2dOnSurf(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        * Returns a 2d curve associated the surface resulting of the constraints
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _GeomPlate.GeomPlate_CurveConstraint_Curve2dOnSurf(self, *args)


    def Curve3d(self, *args) -> "opencascade::handle< Adaptor3d_HCurve >":
        """:rtype: opencascade::handle<Adaptor3d_HCurve>"""
        return _GeomPlate.GeomPlate_CurveConstraint_Curve3d(self, *args)


    def D0(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_CurveConstraint_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:param V2:
        	:type V2: gp_Vec
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_CurveConstraint_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:param V2:
        	:type V2: gp_Vec
        	:param V3:
        	:type V3: gp_Vec
        	:param V4:
        	:type V4: gp_Vec
        	:param V5:
        	:type V5: gp_Vec
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_CurveConstraint_D2(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _GeomPlate.GeomPlate_CurveConstraint_FirstParameter(self, *args)


    def G0Criterion(self, *args) -> "Standard_Real":
        """
        * Returns the G0 criterion at the parametric point U on the curve. This is the greatest distance allowed between the constraint and the target surface at U.
        	:param U:
        	:type U: float
        	:rtype: float
        """
        return _GeomPlate.GeomPlate_CurveConstraint_G0Criterion(self, *args)


    def G1Criterion(self, *args) -> "Standard_Real":
        """
        * Returns the G1 criterion at the parametric point U on the curve. This is the greatest angle allowed between the constraint and the target surface at U. Raises ConstructionError if the curve is not on a surface
        	:param U:
        	:type U: float
        	:rtype: float
        """
        return _GeomPlate.GeomPlate_CurveConstraint_G1Criterion(self, *args)


    def G2Criterion(self, *args) -> "Standard_Real":
        """
        * Returns the G2 criterion at the parametric point U on the curve. This is the greatest difference in curvature allowed between the constraint and the target surface at U. Raises ConstructionError if the curve is not on a surface
        	:param U:
        	:type U: float
        	:rtype: float
        """
        return _GeomPlate.GeomPlate_CurveConstraint_G2Criterion(self, *args)


    def __init__(self, *args):
        """
        * Initializes an empty curve constraint object.
        	:rtype: None
        * Create a constraint Order is the order of the constraint. The possible values for order are -1,0,1,2. Order i means constraints Gi Npt is the number of points associated with the constraint. TolDist is the maximum error to satisfy for G0 constraints TolAng is the maximum error to satisfy for G1 constraints TolCurv is the maximum error to satisfy for G2 constraints These errors can be replaced by laws of criterion. Raises ConstructionError if Order is not -1 , 0, 1, 2
        	:param Boundary:
        	:type Boundary: Adaptor3d_HCurve
        	:param Order:
        	:type Order: int
        	:param NPt: default value is 10
        	:type NPt: int
        	:param TolDist: default value is 0.0001
        	:type TolDist: float
        	:param TolAng: default value is 0.01
        	:type TolAng: float
        	:param TolCurv: default value is 0.1
        	:type TolCurv: float
        	:rtype: None
        """
        _GeomPlate.GeomPlate_CurveConstraint_swiginit(self, _GeomPlate.new_GeomPlate_CurveConstraint(*args))

    def LPropSurf(self, *args) -> "GeomLProp_SLProps &":
        """
        :param U:
        	:type U: float
        	:rtype: GeomLProp_SLProps
        """
        return _GeomPlate.GeomPlate_CurveConstraint_LPropSurf(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _GeomPlate.GeomPlate_CurveConstraint_LastParameter(self, *args)


    def Length(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _GeomPlate.GeomPlate_CurveConstraint_Length(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points on the curve used as a constraint. The default setting is 10. This parameter affects computation time, which increases by the cube of the number of points.
        	:rtype: int
        """
        return _GeomPlate.GeomPlate_CurveConstraint_NbPoints(self, *args)


    def Order(self, *args) -> "Standard_Integer":
        """
        * Returns the order of constraint, one of G0, G1 or G2.
        	:rtype: int
        """
        return _GeomPlate.GeomPlate_CurveConstraint_Order(self, *args)


    def ProjectedCurve(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d >":
        """
        * Returns the projected curve resulting from the normal projection of the curve on the initial surface
        	:rtype: opencascade::handle<Adaptor2d_HCurve2d>
        """
        return _GeomPlate.GeomPlate_CurveConstraint_ProjectedCurve(self, *args)


    def SetCurve2dOnSurf(self, *args) -> "void":
        """
        * loads a 2d curve associated the surface resulting of the constraints
        	:param Curve2d:
        	:type Curve2d: Geom2d_Curve
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetCurve2dOnSurf(self, *args)


    def SetG0Criterion(self, *args) -> "void":
        """
        * Allows you to set the G0 criterion. This is the law defining the greatest distance allowed between the constraint and the target surface for each point of the constraint. If this criterion is not set, TolDist, the distance tolerance from the constructor, is used.
        	:param G0Crit:
        	:type G0Crit: Law_Function
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args) -> "void":
        """
        * Allows you to set the G1 criterion. This is the law defining the greatest angle allowed between the constraint and the target surface. If this criterion is not set, TolAng, the angular tolerance from the constructor, is used. Raises ConstructionError if the curve is not on a surface
        	:param G1Crit:
        	:type G1Crit: Law_Function
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args) -> "void":
        """
        :param G2Crit:
        	:type G2Crit: Law_Function
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetG2Criterion(self, *args)


    def SetNbPoints(self, *args) -> "void":
        """
        * Allows you to set the number of points on the curve constraint. The default setting is 10. This parameter affects computation time, which increases by the cube of the number of points.
        	:param NewNb:
        	:type NewNb: int
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetNbPoints(self, *args)


    def SetOrder(self, *args) -> "void":
        """
        * Allows you to set the order of continuity required for the constraints: G0, G1, and G2, controlled respectively by G0Criterion G1Criterion and G2Criterion.
        	:param Order:
        	:type Order: int
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetOrder(self, *args)


    def SetProjectedCurve(self, *args) -> "void":
        """
        * loads a 2d curve resulting from the normal projection of the curve on the initial surface
        	:param Curve2d:
        	:type Curve2d: Adaptor2d_HCurve2d
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetProjectedCurve(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomPlate_CurveConstraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_CurveConstraint
GeomPlate_CurveConstraint.Curve2dOnSurf = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_Curve2dOnSurf, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.Curve3d = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_Curve3d, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.D0 = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_D0, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.D1 = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_D1, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.D2 = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_D2, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.FirstParameter = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_FirstParameter, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.G0Criterion = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_G0Criterion, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.G1Criterion = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_G1Criterion, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.G2Criterion = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_G2Criterion, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.LPropSurf = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_LPropSurf, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.LastParameter = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_LastParameter, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.Length = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_Length, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.NbPoints = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_NbPoints, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.Order = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_Order, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.ProjectedCurve = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_ProjectedCurve, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.SetCurve2dOnSurf = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_SetCurve2dOnSurf, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.SetG0Criterion = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_SetG0Criterion, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.SetG1Criterion = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_SetG1Criterion, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.SetG2Criterion = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_SetG2Criterion, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.SetNbPoints = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_SetNbPoints, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.SetOrder = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_SetOrder, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint.SetProjectedCurve = new_instancemethod(_GeomPlate.GeomPlate_CurveConstraint_SetProjectedCurve, None, GeomPlate_CurveConstraint)
GeomPlate_CurveConstraint_swigregister = _GeomPlate.GeomPlate_CurveConstraint_swigregister
GeomPlate_CurveConstraint_swigregister(GeomPlate_CurveConstraint)

class GeomPlate_MakeApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ApproxError(self, *args) -> "Standard_Real":
        """
        * Returns the error in computation of the approximation surface. This is the distance between the entire target BSpline surface and the entire original surface generated by BuildPlateSurface and converted by GeomPlate_Surface.
        	:rtype: float
        """
        return _GeomPlate.GeomPlate_MakeApprox_ApproxError(self, *args)


    def CriterionError(self, *args) -> "Standard_Real":
        """
        * Returns the criterion error in computation of the approximation surface. This is estimated relative to the curve and point constraints only.
        	:rtype: float
        """
        return _GeomPlate.GeomPlate_MakeApprox_CriterionError(self, *args)


    def __init__(self, *args):
        """
        * Converts SurfPlate into a Geom_BSplineSurface with n Bezier pieces (n<=Nbmax) of degree <= dgmax and an approximation error < Tol3d if possible the criterion CritPlate is satisfied if possible
        	:param SurfPlate:
        	:type SurfPlate: GeomPlate_Surface
        	:param PlateCrit:
        	:type PlateCrit: AdvApp2Var_Criterion
        	:param Tol3d:
        	:type Tol3d: float
        	:param Nbmax:
        	:type Nbmax: int
        	:param dgmax:
        	:type dgmax: int
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:param EnlargeCoeff: default value is 1.1
        	:type EnlargeCoeff: float
        	:rtype: None
        * Converts SurfPlate into a Geom_BSplineSurface with n Bezier pieces (n<=Nbmax) of degree <= dgmax and an approximation error < Tol3d if possible if CritOrder = -1 , no criterion is used if CritOrder = 0 , a PlateG0Criterion is used with max value > 10*dmax if CritOrder = 1 , a PlateG1Criterion is used with max value > 10*dmax WARNING : for CritOrder = 0 or 1, only the constraints points of SurfPlate are used to evaluate the value of the criterion
        	:param SurfPlate:
        	:type SurfPlate: GeomPlate_Surface
        	:param Tol3d:
        	:type Tol3d: float
        	:param Nbmax:
        	:type Nbmax: int
        	:param dgmax:
        	:type dgmax: int
        	:param dmax:
        	:type dmax: float
        	:param CritOrder: default value is 0
        	:type CritOrder: int
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:param EnlargeCoeff: default value is 1.1
        	:type EnlargeCoeff: float
        	:rtype: None
        """
        _GeomPlate.GeomPlate_MakeApprox_swiginit(self, _GeomPlate.new_GeomPlate_MakeApprox(*args))

    def Surface(self, *args) -> "opencascade::handle< Geom_BSplineSurface >":
        """
        * Returns the BSpline surface extracted from the GeomPlate_MakeApprox object.
        	:rtype: opencascade::handle<Geom_BSplineSurface>
        """
        return _GeomPlate.GeomPlate_MakeApprox_Surface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_MakeApprox
GeomPlate_MakeApprox.ApproxError = new_instancemethod(_GeomPlate.GeomPlate_MakeApprox_ApproxError, None, GeomPlate_MakeApprox)
GeomPlate_MakeApprox.CriterionError = new_instancemethod(_GeomPlate.GeomPlate_MakeApprox_CriterionError, None, GeomPlate_MakeApprox)
GeomPlate_MakeApprox.Surface = new_instancemethod(_GeomPlate.GeomPlate_MakeApprox_Surface, None, GeomPlate_MakeApprox)
GeomPlate_MakeApprox_swigregister = _GeomPlate.GeomPlate_MakeApprox_swigregister
GeomPlate_MakeApprox_swigregister(GeomPlate_MakeApprox)

class GeomPlate_PlateG0Criterion(OCC.Core.AdvApp2Var.AdvApp2Var_Criterion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Data:
        	:type Data: TColgp_SequenceOfXY
        	:param G0Data:
        	:type G0Data: TColgp_SequenceOfXYZ
        	:param Maximum:
        	:type Maximum: float
        	:param Type: default value is AdvApp2Var_Absolute
        	:type Type: AdvApp2Var_CriterionType
        	:param Repart: default value is AdvApp2Var_Regular
        	:type Repart: AdvApp2Var_CriterionRepartition
        	:rtype: None
        """
        _GeomPlate.GeomPlate_PlateG0Criterion_swiginit(self, _GeomPlate.new_GeomPlate_PlateG0Criterion(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_PlateG0Criterion
GeomPlate_PlateG0Criterion_swigregister = _GeomPlate.GeomPlate_PlateG0Criterion_swigregister
GeomPlate_PlateG0Criterion_swigregister(GeomPlate_PlateG0Criterion)

class GeomPlate_PlateG1Criterion(OCC.Core.AdvApp2Var.AdvApp2Var_Criterion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Data:
        	:type Data: TColgp_SequenceOfXY
        	:param G1Data:
        	:type G1Data: TColgp_SequenceOfXYZ
        	:param Maximum:
        	:type Maximum: float
        	:param Type: default value is AdvApp2Var_Absolute
        	:type Type: AdvApp2Var_CriterionType
        	:param Repart: default value is AdvApp2Var_Regular
        	:type Repart: AdvApp2Var_CriterionRepartition
        	:rtype: None
        """
        _GeomPlate.GeomPlate_PlateG1Criterion_swiginit(self, _GeomPlate.new_GeomPlate_PlateG1Criterion(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_PlateG1Criterion
GeomPlate_PlateG1Criterion_swigregister = _GeomPlate.GeomPlate_PlateG1Criterion_swigregister
GeomPlate_PlateG1Criterion_swigregister(GeomPlate_PlateG1Criterion)

class GeomPlate_PointConstraint(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_PointConstraint_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:param V2:
        	:type V2: gp_Vec
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_PointConstraint_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:param V2:
        	:type V2: gp_Vec
        	:param V3:
        	:type V3: gp_Vec
        	:param V4:
        	:type V4: gp_Vec
        	:param V5:
        	:type V5: gp_Vec
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_PointConstraint_D2(self, *args)


    def G0Criterion(self, *args) -> "Standard_Real":
        """
        * Returns the G0 criterion. This is the greatest distance allowed between the constraint and the target surface.
        	:rtype: float
        """
        return _GeomPlate.GeomPlate_PointConstraint_G0Criterion(self, *args)


    def G1Criterion(self, *args) -> "Standard_Real":
        """
        * Returns the G1 criterion. This is the greatest angle allowed between the constraint and the target surface. Raises ConstructionError if the point is not on the surface.
        	:rtype: float
        """
        return _GeomPlate.GeomPlate_PointConstraint_G1Criterion(self, *args)


    def G2Criterion(self, *args) -> "Standard_Real":
        """
        * Returns the G2 criterion. This is the greatest difference in curvature allowed between the constraint and the target surface. Raises ConstructionError if the point is not on the surface
        	:rtype: float
        """
        return _GeomPlate.GeomPlate_PointConstraint_G2Criterion(self, *args)


    def __init__(self, *args):
        """
        * Constructs a point constraint object defined by Pt, a 3D point Order gives the order of constraint, one of: - -1 i.e. none, or 0 i.e.G0 when assigned to Pt - -1 i.e. none, 0 i.e. G0, 1 i.e. G1, 2 i.e. G2 when assigned to U, V and Surf. In this constructor, only TolDist is given. Distance tolerance represents the greatest distance allowed between the constraint and the target surface. Angular tolerance represents the largest angle allowed between the constraint and the target surface. Curvature tolerance represents the greatest difference in curvature allowed between the constraint and the target surface. Raises ConstructionError if Order is not 0 or -1
        	:param Pt:
        	:type Pt: gp_Pnt
        	:param Order:
        	:type Order: int
        	:param TolDist: default value is 0.0001
        	:type TolDist: float
        	:rtype: None
        * Constructs a point constraint object defined by the intersection point of U and V on the surface Surf. Order gives the order of constraint, one of: - -1 i.e. none, or 0 i.e.G0 when assigned to Pt - -1 i.e. none, 0 i.e. G0, 1 i.e. G1, 2 i.e. G2 when assigned to U, V and Surf. In this constructor the surface to be generated must respect several tolerance values only: - the distance tolerance TolDist - the angular tolerance TolAng - the curvature tolerance, TolCurv. Distance tolerance represents the greatest distance allowed between the constraint and the target surface. Angular tolerance represents the largest angle allowed between the constraint and the target surface. Curvature tolerance represents the greatest difference in curvature allowed between the constraint and the target surface.Creates a punctual constraint.
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Surf:
        	:type Surf: Geom_Surface
        	:param Order:
        	:type Order: int
        	:param TolDist: default value is 0.0001
        	:type TolDist: float
        	:param TolAng: default value is 0.01
        	:type TolAng: float
        	:param TolCurv: default value is 0.1
        	:type TolCurv: float
        	:rtype: None
        """
        _GeomPlate.GeomPlate_PointConstraint_swiginit(self, _GeomPlate.new_GeomPlate_PointConstraint(*args))

    def HasPnt2dOnSurf(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _GeomPlate.GeomPlate_PointConstraint_HasPnt2dOnSurf(self, *args)


    def LPropSurf(self, *args) -> "GeomLProp_SLProps &":
        """:rtype: GeomLProp_SLProps"""
        return _GeomPlate.GeomPlate_PointConstraint_LPropSurf(self, *args)


    def Order(self, *args) -> "Standard_Integer":
        """
        * Returns the order of constraint: G0, G1, and G2, controlled respectively by G0Criterion G1Criterion and G2Criterion.
        	:rtype: int
        """
        return _GeomPlate.GeomPlate_PointConstraint_Order(self, *args)


    def Pnt2dOnSurf(self, *args) -> "gp_Pnt2d":
        """:rtype: gp_Pnt2d"""
        return _GeomPlate.GeomPlate_PointConstraint_Pnt2dOnSurf(self, *args)


    def SetG0Criterion(self, *args) -> "void":
        """
        * Allows you to set the G0 criterion. This is the law defining the greatest distance allowed between the constraint and the target surface. If this criterion is not set, {TolDist, the distance tolerance from the constructor, is used
        	:param TolDist:
        	:type TolDist: float
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_PointConstraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args) -> "void":
        """
        * Allows you to set the G1 criterion. This is the law defining the greatest angle allowed between the constraint and the target surface. If this criterion is not set, TolAng, the angular tolerance from the constructor, is used. Raises ConstructionError if the point is not on the surface
        	:param TolAng:
        	:type TolAng: float
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_PointConstraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args) -> "void":
        """
        * Allows you to set the G2 criterion. This is the law defining the greatest difference in curvature allowed between the constraint and the target surface. If this criterion is not set, TolCurv, the curvature tolerance from the constructor, is used. Raises ConstructionError if the point is not on the surface
        	:param TolCurv:
        	:type TolCurv: float
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_PointConstraint_SetG2Criterion(self, *args)


    def SetOrder(self, *args) -> "void":
        """
        :param Order:
        	:type Order: int
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_PointConstraint_SetOrder(self, *args)


    def SetPnt2dOnSurf(self, *args) -> "void":
        """
        :param Pnt:
        	:type Pnt: gp_Pnt2d
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_PointConstraint_SetPnt2dOnSurf(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomPlate_PointConstraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_PointConstraint
GeomPlate_PointConstraint.D0 = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_D0, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.D1 = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_D1, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.D2 = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_D2, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.G0Criterion = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_G0Criterion, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.G1Criterion = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_G1Criterion, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.G2Criterion = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_G2Criterion, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.HasPnt2dOnSurf = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_HasPnt2dOnSurf, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.LPropSurf = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_LPropSurf, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.Order = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_Order, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.Pnt2dOnSurf = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_Pnt2dOnSurf, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.SetG0Criterion = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_SetG0Criterion, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.SetG1Criterion = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_SetG1Criterion, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.SetG2Criterion = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_SetG2Criterion, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.SetOrder = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_SetOrder, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint.SetPnt2dOnSurf = new_instancemethod(_GeomPlate.GeomPlate_PointConstraint_SetPnt2dOnSurf, None, GeomPlate_PointConstraint)
GeomPlate_PointConstraint_swigregister = _GeomPlate.GeomPlate_PointConstraint_swigregister
GeomPlate_PointConstraint_swigregister(GeomPlate_PointConstraint)

class GeomPlate_Surface(OCC.Core.Geom.Geom_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CallSurfinit(self, *args) -> "opencascade::handle< Geom_Surface >":
        """:rtype: opencascade::handle<Geom_Surface>"""
        return _GeomPlate.GeomPlate_Surface_CallSurfinit(self, *args)


    def Constraints(self, *args) -> "void":
        """
        :param Seq:
        	:type Seq: TColgp_SequenceOfXY
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_Surface_Constraints(self, *args)


    def __init__(self, *args):
        """
        :param Surfinit:
        	:type Surfinit: Geom_Surface
        	:param Surfinter:
        	:type Surfinter: Plate_Plate
        	:rtype: None
        """
        _GeomPlate.GeomPlate_Surface_swiginit(self, _GeomPlate.new_GeomPlate_Surface(*args))

    def RealBounds(self, *args) -> "void":
        """
        :param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param V1:
        	:type V1: float
        	:param V2:
        	:type V2: float
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_Surface_RealBounds(self, *args)


    def SetBounds(self, *args) -> "void":
        """
        :param Umin:
        	:type Umin: float
        	:param Umax:
        	:type Umax: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vmax:
        	:type Vmax: float
        	:rtype: None
        """
        return _GeomPlate.GeomPlate_Surface_SetBounds(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomPlate_Surface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_Surface
GeomPlate_Surface.CallSurfinit = new_instancemethod(_GeomPlate.GeomPlate_Surface_CallSurfinit, None, GeomPlate_Surface)
GeomPlate_Surface.Constraints = new_instancemethod(_GeomPlate.GeomPlate_Surface_Constraints, None, GeomPlate_Surface)
GeomPlate_Surface.RealBounds = new_instancemethod(_GeomPlate.GeomPlate_Surface_RealBounds, None, GeomPlate_Surface)
GeomPlate_Surface.SetBounds = new_instancemethod(_GeomPlate.GeomPlate_Surface_SetBounds, None, GeomPlate_Surface)
GeomPlate_Surface_swigregister = _GeomPlate.GeomPlate_Surface_swigregister
GeomPlate_Surface_swigregister(GeomPlate_Surface)

class GeomPlate_HArray1OfSequenceOfReal(GeomPlate_Array1OfSequenceOfReal, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomPlate.GeomPlate_HArray1OfSequenceOfReal_swiginit(self, _GeomPlate.new_GeomPlate_HArray1OfSequenceOfReal(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GeomPlate_HArray1OfSequenceOfReal_DownCast(t)

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_HArray1OfSequenceOfReal
GeomPlate_HArray1OfSequenceOfReal.Array1 = new_instancemethod(_GeomPlate.GeomPlate_HArray1OfSequenceOfReal_Array1, None, GeomPlate_HArray1OfSequenceOfReal)
GeomPlate_HArray1OfSequenceOfReal.ChangeArray1 = new_instancemethod(_GeomPlate.GeomPlate_HArray1OfSequenceOfReal_ChangeArray1, None, GeomPlate_HArray1OfSequenceOfReal)
GeomPlate_HArray1OfSequenceOfReal_swigregister = _GeomPlate.GeomPlate_HArray1OfSequenceOfReal_swigregister
GeomPlate_HArray1OfSequenceOfReal_swigregister(GeomPlate_HArray1OfSequenceOfReal)

class GeomPlate_HArray1OfHCurve(GeomPlate_Array1OfHCurve, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomPlate.GeomPlate_HArray1OfHCurve_swiginit(self, _GeomPlate.new_GeomPlate_HArray1OfHCurve(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GeomPlate_HArray1OfHCurve_DownCast(t)

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_HArray1OfHCurve
GeomPlate_HArray1OfHCurve.Array1 = new_instancemethod(_GeomPlate.GeomPlate_HArray1OfHCurve_Array1, None, GeomPlate_HArray1OfHCurve)
GeomPlate_HArray1OfHCurve.ChangeArray1 = new_instancemethod(_GeomPlate.GeomPlate_HArray1OfHCurve_ChangeArray1, None, GeomPlate_HArray1OfHCurve)
GeomPlate_HArray1OfHCurve_swigregister = _GeomPlate.GeomPlate_HArray1OfHCurve_swigregister
GeomPlate_HArray1OfHCurve_swigregister(GeomPlate_HArray1OfHCurve)

class GeomPlate_HSequenceOfPointConstraint(GeomPlate_SequenceOfPointConstraint, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomPlate.GeomPlate_HSequenceOfPointConstraint_swiginit(self, _GeomPlate.new_GeomPlate_HSequenceOfPointConstraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GeomPlate_HSequenceOfPointConstraint_DownCast(t)

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_HSequenceOfPointConstraint
GeomPlate_HSequenceOfPointConstraint.Sequence = new_instancemethod(_GeomPlate.GeomPlate_HSequenceOfPointConstraint_Sequence, None, GeomPlate_HSequenceOfPointConstraint)
GeomPlate_HSequenceOfPointConstraint.Append = new_instancemethod(_GeomPlate.GeomPlate_HSequenceOfPointConstraint_Append, None, GeomPlate_HSequenceOfPointConstraint)
GeomPlate_HSequenceOfPointConstraint.ChangeSequence = new_instancemethod(_GeomPlate.GeomPlate_HSequenceOfPointConstraint_ChangeSequence, None, GeomPlate_HSequenceOfPointConstraint)
GeomPlate_HSequenceOfPointConstraint_swigregister = _GeomPlate.GeomPlate_HSequenceOfPointConstraint_swigregister
GeomPlate_HSequenceOfPointConstraint_swigregister(GeomPlate_HSequenceOfPointConstraint)

class GeomPlate_HSequenceOfCurveConstraint(GeomPlate_SequenceOfCurveConstraint, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomPlate.GeomPlate_HSequenceOfCurveConstraint_swiginit(self, _GeomPlate.new_GeomPlate_HSequenceOfCurveConstraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_GeomPlate_HSequenceOfCurveConstraint_DownCast(t)

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_HSequenceOfCurveConstraint
GeomPlate_HSequenceOfCurveConstraint.Sequence = new_instancemethod(_GeomPlate.GeomPlate_HSequenceOfCurveConstraint_Sequence, None, GeomPlate_HSequenceOfCurveConstraint)
GeomPlate_HSequenceOfCurveConstraint.Append = new_instancemethod(_GeomPlate.GeomPlate_HSequenceOfCurveConstraint_Append, None, GeomPlate_HSequenceOfCurveConstraint)
GeomPlate_HSequenceOfCurveConstraint.ChangeSequence = new_instancemethod(_GeomPlate.GeomPlate_HSequenceOfCurveConstraint_ChangeSequence, None, GeomPlate_HSequenceOfCurveConstraint)
GeomPlate_HSequenceOfCurveConstraint_swigregister = _GeomPlate.GeomPlate_HSequenceOfCurveConstraint_swigregister
GeomPlate_HSequenceOfCurveConstraint_swigregister(GeomPlate_HSequenceOfCurveConstraint)



