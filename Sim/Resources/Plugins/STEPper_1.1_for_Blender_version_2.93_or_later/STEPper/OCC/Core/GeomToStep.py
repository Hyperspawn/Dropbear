# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomToStep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomtostep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GeomToStep.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomToStep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomToStep')
    _GeomToStep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomToStep', [dirname(__file__)])
        except ImportError:
            import _GeomToStep
            return _GeomToStep
        try:
            _mod = imp.load_module('_GeomToStep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomToStep = swig_import_helper()
    del swig_import_helper
else:
    import _GeomToStep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomToStep.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GeomToStep.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GeomToStep.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GeomToStep.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GeomToStep.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GeomToStep.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GeomToStep.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GeomToStep.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GeomToStep.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GeomToStep.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GeomToStep.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GeomToStep.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GeomToStep.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GeomToStep.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GeomToStep.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GeomToStep.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GeomToStep.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GeomToStep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GeomToStep.process_exception(error, method_name, class_name)
process_exception = _GeomToStep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom2d
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.OSD
import OCC.Core.StepRepr
import OCC.Core.StepBasic
class GeomToStep_Root(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _GeomToStep.GeomToStep_Root_IsDone(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        _GeomToStep.GeomToStep_Root_swiginit(self, _GeomToStep.new_GeomToStep_Root())
    __swig_destroy__ = _GeomToStep.delete_GeomToStep_Root
GeomToStep_Root.IsDone = new_instancemethod(_GeomToStep.GeomToStep_Root_IsDone, None, GeomToStep_Root)
GeomToStep_Root_swigregister = _GeomToStep.GeomToStep_Root_swigregister
GeomToStep_Root_swigregister(GeomToStep_Root)

class GeomToStep_MakeAxis1Placement(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param A:
        	:type A: gp_Ax1
        	:rtype: None
        :param A:
        	:type A: gp_Ax2d
        	:rtype: None
        :param A:
        	:type A: Geom_Axis1Placement
        	:rtype: None
        :param A:
        	:type A: Geom2d_AxisPlacement
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeAxis1Placement_swiginit(self, _GeomToStep.new_GeomToStep_MakeAxis1Placement(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Axis1Placement > const &":
        """:rtype: opencascade::handle<StepGeom_Axis1Placement>"""
        return _GeomToStep.GeomToStep_MakeAxis1Placement_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis1Placement
GeomToStep_MakeAxis1Placement.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeAxis1Placement_Value, None, GeomToStep_MakeAxis1Placement)
GeomToStep_MakeAxis1Placement_swigregister = _GeomToStep.GeomToStep_MakeAxis1Placement_swigregister
GeomToStep_MakeAxis1Placement_swigregister(GeomToStep_MakeAxis1Placement)

class GeomToStep_MakeAxis2Placement2d(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param A:
        	:type A: gp_Ax2
        	:rtype: None
        :param A:
        	:type A: gp_Ax22d
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeAxis2Placement2d_swiginit(self, _GeomToStep.new_GeomToStep_MakeAxis2Placement2d(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Axis2Placement2d > const &":
        """:rtype: opencascade::handle<StepGeom_Axis2Placement2d>"""
        return _GeomToStep.GeomToStep_MakeAxis2Placement2d_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis2Placement2d
GeomToStep_MakeAxis2Placement2d.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeAxis2Placement2d_Value, None, GeomToStep_MakeAxis2Placement2d)
GeomToStep_MakeAxis2Placement2d_swigregister = _GeomToStep.GeomToStep_MakeAxis2Placement2d_swigregister
GeomToStep_MakeAxis2Placement2d_swigregister(GeomToStep_MakeAxis2Placement2d)

class GeomToStep_MakeAxis2Placement3d(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param A:
        	:type A: gp_Ax2
        	:rtype: None
        :param A:
        	:type A: gp_Ax3
        	:rtype: None
        :param T:
        	:type T: gp_Trsf
        	:rtype: None
        :param A:
        	:type A: Geom_Axis2Placement
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeAxis2Placement3d_swiginit(self, _GeomToStep.new_GeomToStep_MakeAxis2Placement3d(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Axis2Placement3d > const &":
        """:rtype: opencascade::handle<StepGeom_Axis2Placement3d>"""
        return _GeomToStep.GeomToStep_MakeAxis2Placement3d_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis2Placement3d
GeomToStep_MakeAxis2Placement3d.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeAxis2Placement3d_Value, None, GeomToStep_MakeAxis2Placement3d)
GeomToStep_MakeAxis2Placement3d_swigregister = _GeomToStep.GeomToStep_MakeAxis2Placement3d_swigregister
GeomToStep_MakeAxis2Placement3d_swigregister(GeomToStep_MakeAxis2Placement3d)

class GeomToStep_MakeBSplineCurveWithKnots(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Bsplin:
        	:type Bsplin: Geom_BSplineCurve
        	:rtype: None
        :param Bsplin:
        	:type Bsplin: Geom2d_BSplineCurve
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBSplineCurveWithKnots_swiginit(self, _GeomToStep.new_GeomToStep_MakeBSplineCurveWithKnots(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_BSplineCurveWithKnots > const &":
        """:rtype: opencascade::handle<StepGeom_BSplineCurveWithKnots>"""
        return _GeomToStep.GeomToStep_MakeBSplineCurveWithKnots_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineCurveWithKnots
GeomToStep_MakeBSplineCurveWithKnots.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeBSplineCurveWithKnots_Value, None, GeomToStep_MakeBSplineCurveWithKnots)
GeomToStep_MakeBSplineCurveWithKnots_swigregister = _GeomToStep.GeomToStep_MakeBSplineCurveWithKnots_swigregister
GeomToStep_MakeBSplineCurveWithKnots_swigregister(GeomToStep_MakeBSplineCurveWithKnots)

class GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Bsplin:
        	:type Bsplin: Geom_BSplineCurve
        	:rtype: None
        :param Bsplin:
        	:type Bsplin: Geom2d_BSplineCurve
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swiginit(self, _GeomToStep.new_GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve > const &":
        """:rtype: opencascade::handle<StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve>"""
        return _GeomToStep.GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve
GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_Value, None, GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve)
GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister = _GeomToStep.GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister
GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister(GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve)

class GeomToStep_MakeBSplineSurfaceWithKnots(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Bsplin:
        	:type Bsplin: Geom_BSplineSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnots_swiginit(self, _GeomToStep.new_GeomToStep_MakeBSplineSurfaceWithKnots(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_BSplineSurfaceWithKnots > const &":
        """:rtype: opencascade::handle<StepGeom_BSplineSurfaceWithKnots>"""
        return _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnots_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineSurfaceWithKnots
GeomToStep_MakeBSplineSurfaceWithKnots.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnots_Value, None, GeomToStep_MakeBSplineSurfaceWithKnots)
GeomToStep_MakeBSplineSurfaceWithKnots_swigregister = _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnots_swigregister
GeomToStep_MakeBSplineSurfaceWithKnots_swigregister(GeomToStep_MakeBSplineSurfaceWithKnots)

class GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Bsplin:
        	:type Bsplin: Geom_BSplineSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface > const &":
        """:rtype: opencascade::handle<StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface>"""
        return _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface
GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_Value, None, GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface)
GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister = _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister
GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister(GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface)

class GeomToStep_MakeBoundedCurve(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        	:type C: Geom_BoundedCurve
        	:rtype: None
        :param C:
        	:type C: Geom2d_BoundedCurve
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBoundedCurve_swiginit(self, _GeomToStep.new_GeomToStep_MakeBoundedCurve(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_BoundedCurve > const &":
        """:rtype: opencascade::handle<StepGeom_BoundedCurve>"""
        return _GeomToStep.GeomToStep_MakeBoundedCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBoundedCurve
GeomToStep_MakeBoundedCurve.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeBoundedCurve_Value, None, GeomToStep_MakeBoundedCurve)
GeomToStep_MakeBoundedCurve_swigregister = _GeomToStep.GeomToStep_MakeBoundedCurve_swigregister
GeomToStep_MakeBoundedCurve_swigregister(GeomToStep_MakeBoundedCurve)

class GeomToStep_MakeBoundedSurface(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        	:type C: Geom_BoundedSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBoundedSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeBoundedSurface(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_BoundedSurface > const &":
        """:rtype: opencascade::handle<StepGeom_BoundedSurface>"""
        return _GeomToStep.GeomToStep_MakeBoundedSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBoundedSurface
GeomToStep_MakeBoundedSurface.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeBoundedSurface_Value, None, GeomToStep_MakeBoundedSurface)
GeomToStep_MakeBoundedSurface_swigregister = _GeomToStep.GeomToStep_MakeBoundedSurface_swigregister
GeomToStep_MakeBoundedSurface_swigregister(GeomToStep_MakeBoundedSurface)

class GeomToStep_MakeCartesianPoint(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P:
        	:type P: gp_Pnt
        	:rtype: None
        :param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        :param P:
        	:type P: Geom_CartesianPoint
        	:rtype: None
        :param P:
        	:type P: Geom2d_CartesianPoint
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeCartesianPoint_swiginit(self, _GeomToStep.new_GeomToStep_MakeCartesianPoint(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_CartesianPoint > const &":
        """:rtype: opencascade::handle<StepGeom_CartesianPoint>"""
        return _GeomToStep.GeomToStep_MakeCartesianPoint_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCartesianPoint
GeomToStep_MakeCartesianPoint.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeCartesianPoint_Value, None, GeomToStep_MakeCartesianPoint)
GeomToStep_MakeCartesianPoint_swigregister = _GeomToStep.GeomToStep_MakeCartesianPoint_swigregister
GeomToStep_MakeCartesianPoint_swigregister(GeomToStep_MakeCartesianPoint)

class GeomToStep_MakeCircle(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        	:type C: gp_Circ
        	:rtype: None
        :param C:
        	:type C: Geom_Circle
        	:rtype: None
        :param C:
        	:type C: Geom2d_Circle
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeCircle_swiginit(self, _GeomToStep.new_GeomToStep_MakeCircle(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Circle > const &":
        """:rtype: opencascade::handle<StepGeom_Circle>"""
        return _GeomToStep.GeomToStep_MakeCircle_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCircle
GeomToStep_MakeCircle.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeCircle_Value, None, GeomToStep_MakeCircle)
GeomToStep_MakeCircle_swigregister = _GeomToStep.GeomToStep_MakeCircle_swigregister
GeomToStep_MakeCircle_swigregister(GeomToStep_MakeCircle)

class GeomToStep_MakeConic(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        	:type C: Geom_Conic
        	:rtype: None
        :param C:
        	:type C: Geom2d_Conic
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeConic_swiginit(self, _GeomToStep.new_GeomToStep_MakeConic(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Conic > const &":
        """:rtype: opencascade::handle<StepGeom_Conic>"""
        return _GeomToStep.GeomToStep_MakeConic_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeConic
GeomToStep_MakeConic.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeConic_Value, None, GeomToStep_MakeConic)
GeomToStep_MakeConic_swigregister = _GeomToStep.GeomToStep_MakeConic_swigregister
GeomToStep_MakeConic_swigregister(GeomToStep_MakeConic)

class GeomToStep_MakeConicalSurface(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param CSurf:
        	:type CSurf: Geom_ConicalSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeConicalSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeConicalSurface(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_ConicalSurface > const &":
        """:rtype: opencascade::handle<StepGeom_ConicalSurface>"""
        return _GeomToStep.GeomToStep_MakeConicalSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeConicalSurface
GeomToStep_MakeConicalSurface.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeConicalSurface_Value, None, GeomToStep_MakeConicalSurface)
GeomToStep_MakeConicalSurface_swigregister = _GeomToStep.GeomToStep_MakeConicalSurface_swigregister
GeomToStep_MakeConicalSurface_swigregister(GeomToStep_MakeConicalSurface)

class GeomToStep_MakeCurve(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        	:type C: Geom_Curve
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeCurve_swiginit(self, _GeomToStep.new_GeomToStep_MakeCurve(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Curve > const &":
        """:rtype: opencascade::handle<StepGeom_Curve>"""
        return _GeomToStep.GeomToStep_MakeCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCurve
GeomToStep_MakeCurve.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeCurve_Value, None, GeomToStep_MakeCurve)
GeomToStep_MakeCurve_swigregister = _GeomToStep.GeomToStep_MakeCurve_swigregister
GeomToStep_MakeCurve_swigregister(GeomToStep_MakeCurve)

class GeomToStep_MakeCylindricalSurface(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param CSurf:
        	:type CSurf: Geom_CylindricalSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeCylindricalSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeCylindricalSurface(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_CylindricalSurface > const &":
        """:rtype: opencascade::handle<StepGeom_CylindricalSurface>"""
        return _GeomToStep.GeomToStep_MakeCylindricalSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCylindricalSurface
GeomToStep_MakeCylindricalSurface.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeCylindricalSurface_Value, None, GeomToStep_MakeCylindricalSurface)
GeomToStep_MakeCylindricalSurface_swigregister = _GeomToStep.GeomToStep_MakeCylindricalSurface_swigregister
GeomToStep_MakeCylindricalSurface_swigregister(GeomToStep_MakeCylindricalSurface)

class GeomToStep_MakeDirection(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param D:
        	:type D: gp_Dir
        	:rtype: None
        :param D:
        	:type D: gp_Dir2d
        	:rtype: None
        :param D:
        	:type D: Geom_Direction
        	:rtype: None
        :param D:
        	:type D: Geom2d_Direction
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeDirection_swiginit(self, _GeomToStep.new_GeomToStep_MakeDirection(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Direction > const &":
        """:rtype: opencascade::handle<StepGeom_Direction>"""
        return _GeomToStep.GeomToStep_MakeDirection_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeDirection
GeomToStep_MakeDirection.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeDirection_Value, None, GeomToStep_MakeDirection)
GeomToStep_MakeDirection_swigregister = _GeomToStep.GeomToStep_MakeDirection_swigregister
GeomToStep_MakeDirection_swigregister(GeomToStep_MakeDirection)

class GeomToStep_MakeElementarySurface(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: Geom_ElementarySurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeElementarySurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeElementarySurface(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_ElementarySurface > const &":
        """:rtype: opencascade::handle<StepGeom_ElementarySurface>"""
        return _GeomToStep.GeomToStep_MakeElementarySurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeElementarySurface
GeomToStep_MakeElementarySurface.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeElementarySurface_Value, None, GeomToStep_MakeElementarySurface)
GeomToStep_MakeElementarySurface_swigregister = _GeomToStep.GeomToStep_MakeElementarySurface_swigregister
GeomToStep_MakeElementarySurface_swigregister(GeomToStep_MakeElementarySurface)

class GeomToStep_MakeEllipse(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        	:type C: gp_Elips
        	:rtype: None
        :param C:
        	:type C: Geom_Ellipse
        	:rtype: None
        :param C:
        	:type C: Geom2d_Ellipse
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeEllipse_swiginit(self, _GeomToStep.new_GeomToStep_MakeEllipse(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Ellipse > const &":
        """:rtype: opencascade::handle<StepGeom_Ellipse>"""
        return _GeomToStep.GeomToStep_MakeEllipse_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeEllipse
GeomToStep_MakeEllipse.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeEllipse_Value, None, GeomToStep_MakeEllipse)
GeomToStep_MakeEllipse_swigregister = _GeomToStep.GeomToStep_MakeEllipse_swigregister
GeomToStep_MakeEllipse_swigregister(GeomToStep_MakeEllipse)

class GeomToStep_MakeHyperbola(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        	:type C: Geom2d_Hyperbola
        	:rtype: None
        :param C:
        	:type C: Geom_Hyperbola
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeHyperbola_swiginit(self, _GeomToStep.new_GeomToStep_MakeHyperbola(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Hyperbola > const &":
        """:rtype: opencascade::handle<StepGeom_Hyperbola>"""
        return _GeomToStep.GeomToStep_MakeHyperbola_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeHyperbola
GeomToStep_MakeHyperbola.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeHyperbola_Value, None, GeomToStep_MakeHyperbola)
GeomToStep_MakeHyperbola_swigregister = _GeomToStep.GeomToStep_MakeHyperbola_swigregister
GeomToStep_MakeHyperbola_swigregister(GeomToStep_MakeHyperbola)

class GeomToStep_MakeLine(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param L:
        	:type L: gp_Lin
        	:rtype: None
        :param L:
        	:type L: gp_Lin2d
        	:rtype: None
        :param C:
        	:type C: Geom_Line
        	:rtype: None
        :param C:
        	:type C: Geom2d_Line
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeLine_swiginit(self, _GeomToStep.new_GeomToStep_MakeLine(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Line > const &":
        """:rtype: opencascade::handle<StepGeom_Line>"""
        return _GeomToStep.GeomToStep_MakeLine_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeLine
GeomToStep_MakeLine.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeLine_Value, None, GeomToStep_MakeLine)
GeomToStep_MakeLine_swigregister = _GeomToStep.GeomToStep_MakeLine_swigregister
GeomToStep_MakeLine_swigregister(GeomToStep_MakeLine)

class GeomToStep_MakeParabola(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        	:type C: Geom2d_Parabola
        	:rtype: None
        :param C:
        	:type C: Geom_Parabola
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeParabola_swiginit(self, _GeomToStep.new_GeomToStep_MakeParabola(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Parabola > const &":
        """:rtype: opencascade::handle<StepGeom_Parabola>"""
        return _GeomToStep.GeomToStep_MakeParabola_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeParabola
GeomToStep_MakeParabola.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeParabola_Value, None, GeomToStep_MakeParabola)
GeomToStep_MakeParabola_swigregister = _GeomToStep.GeomToStep_MakeParabola_swigregister
GeomToStep_MakeParabola_swigregister(GeomToStep_MakeParabola)

class GeomToStep_MakePlane(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P:
        	:type P: gp_Pln
        	:rtype: None
        :param P:
        	:type P: Geom_Plane
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakePlane_swiginit(self, _GeomToStep.new_GeomToStep_MakePlane(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Plane > const &":
        """:rtype: opencascade::handle<StepGeom_Plane>"""
        return _GeomToStep.GeomToStep_MakePlane_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakePlane
GeomToStep_MakePlane.Value = new_instancemethod(_GeomToStep.GeomToStep_MakePlane_Value, None, GeomToStep_MakePlane)
GeomToStep_MakePlane_swigregister = _GeomToStep.GeomToStep_MakePlane_swigregister
GeomToStep_MakePlane_swigregister(GeomToStep_MakePlane)

class GeomToStep_MakePolyline(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P:
        	:type P: TColgp_Array1OfPnt
        	:rtype: None
        :param P:
        	:type P: TColgp_Array1OfPnt2d
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakePolyline_swiginit(self, _GeomToStep.new_GeomToStep_MakePolyline(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Polyline > const &":
        """:rtype: opencascade::handle<StepGeom_Polyline>"""
        return _GeomToStep.GeomToStep_MakePolyline_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakePolyline
GeomToStep_MakePolyline.Value = new_instancemethod(_GeomToStep.GeomToStep_MakePolyline_Value, None, GeomToStep_MakePolyline)
GeomToStep_MakePolyline_swigregister = _GeomToStep.GeomToStep_MakePolyline_swigregister
GeomToStep_MakePolyline_swigregister(GeomToStep_MakePolyline)

class GeomToStep_MakeRectangularTrimmedSurface(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param RTSurf:
        	:type RTSurf: Geom_RectangularTrimmedSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeRectangularTrimmedSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeRectangularTrimmedSurface(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_RectangularTrimmedSurface > const &":
        """:rtype: opencascade::handle<StepGeom_RectangularTrimmedSurface>"""
        return _GeomToStep.GeomToStep_MakeRectangularTrimmedSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeRectangularTrimmedSurface
GeomToStep_MakeRectangularTrimmedSurface.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeRectangularTrimmedSurface_Value, None, GeomToStep_MakeRectangularTrimmedSurface)
GeomToStep_MakeRectangularTrimmedSurface_swigregister = _GeomToStep.GeomToStep_MakeRectangularTrimmedSurface_swigregister
GeomToStep_MakeRectangularTrimmedSurface_swigregister(GeomToStep_MakeRectangularTrimmedSurface)

class GeomToStep_MakeSphericalSurface(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param CSurf:
        	:type CSurf: Geom_SphericalSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeSphericalSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeSphericalSurface(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_SphericalSurface > const &":
        """:rtype: opencascade::handle<StepGeom_SphericalSurface>"""
        return _GeomToStep.GeomToStep_MakeSphericalSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSphericalSurface
GeomToStep_MakeSphericalSurface.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeSphericalSurface_Value, None, GeomToStep_MakeSphericalSurface)
GeomToStep_MakeSphericalSurface_swigregister = _GeomToStep.GeomToStep_MakeSphericalSurface_swigregister
GeomToStep_MakeSphericalSurface_swigregister(GeomToStep_MakeSphericalSurface)

class GeomToStep_MakeSurface(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        	:type C: Geom_Surface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeSurface(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Surface > const &":
        """:rtype: opencascade::handle<StepGeom_Surface>"""
        return _GeomToStep.GeomToStep_MakeSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurface
GeomToStep_MakeSurface.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeSurface_Value, None, GeomToStep_MakeSurface)
GeomToStep_MakeSurface_swigregister = _GeomToStep.GeomToStep_MakeSurface_swigregister
GeomToStep_MakeSurface_swigregister(GeomToStep_MakeSurface)

class GeomToStep_MakeSurfaceOfLinearExtrusion(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param CSurf:
        	:type CSurf: Geom_SurfaceOfLinearExtrusion
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeSurfaceOfLinearExtrusion_swiginit(self, _GeomToStep.new_GeomToStep_MakeSurfaceOfLinearExtrusion(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_SurfaceOfLinearExtrusion > const &":
        """:rtype: opencascade::handle<StepGeom_SurfaceOfLinearExtrusion>"""
        return _GeomToStep.GeomToStep_MakeSurfaceOfLinearExtrusion_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurfaceOfLinearExtrusion
GeomToStep_MakeSurfaceOfLinearExtrusion.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeSurfaceOfLinearExtrusion_Value, None, GeomToStep_MakeSurfaceOfLinearExtrusion)
GeomToStep_MakeSurfaceOfLinearExtrusion_swigregister = _GeomToStep.GeomToStep_MakeSurfaceOfLinearExtrusion_swigregister
GeomToStep_MakeSurfaceOfLinearExtrusion_swigregister(GeomToStep_MakeSurfaceOfLinearExtrusion)

class GeomToStep_MakeSurfaceOfRevolution(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param RevSurf:
        	:type RevSurf: Geom_SurfaceOfRevolution
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeSurfaceOfRevolution_swiginit(self, _GeomToStep.new_GeomToStep_MakeSurfaceOfRevolution(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_SurfaceOfRevolution > const &":
        """:rtype: opencascade::handle<StepGeom_SurfaceOfRevolution>"""
        return _GeomToStep.GeomToStep_MakeSurfaceOfRevolution_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurfaceOfRevolution
GeomToStep_MakeSurfaceOfRevolution.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeSurfaceOfRevolution_Value, None, GeomToStep_MakeSurfaceOfRevolution)
GeomToStep_MakeSurfaceOfRevolution_swigregister = _GeomToStep.GeomToStep_MakeSurfaceOfRevolution_swigregister
GeomToStep_MakeSurfaceOfRevolution_swigregister(GeomToStep_MakeSurfaceOfRevolution)

class GeomToStep_MakeSweptSurface(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: Geom_SweptSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeSweptSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeSweptSurface(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_SweptSurface > const &":
        """:rtype: opencascade::handle<StepGeom_SweptSurface>"""
        return _GeomToStep.GeomToStep_MakeSweptSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSweptSurface
GeomToStep_MakeSweptSurface.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeSweptSurface_Value, None, GeomToStep_MakeSweptSurface)
GeomToStep_MakeSweptSurface_swigregister = _GeomToStep.GeomToStep_MakeSweptSurface_swigregister
GeomToStep_MakeSweptSurface_swigregister(GeomToStep_MakeSweptSurface)

class GeomToStep_MakeToroidalSurface(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param TorSurf:
        	:type TorSurf: Geom_ToroidalSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeToroidalSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeToroidalSurface(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_ToroidalSurface > const &":
        """:rtype: opencascade::handle<StepGeom_ToroidalSurface>"""
        return _GeomToStep.GeomToStep_MakeToroidalSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeToroidalSurface
GeomToStep_MakeToroidalSurface.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeToroidalSurface_Value, None, GeomToStep_MakeToroidalSurface)
GeomToStep_MakeToroidalSurface_swigregister = _GeomToStep.GeomToStep_MakeToroidalSurface_swigregister
GeomToStep_MakeToroidalSurface_swigregister(GeomToStep_MakeToroidalSurface)

class GeomToStep_MakeVector(GeomToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param V:
        	:type V: gp_Vec
        	:rtype: None
        :param V:
        	:type V: gp_Vec2d
        	:rtype: None
        :param V:
        	:type V: Geom_Vector
        	:rtype: None
        :param V:
        	:type V: Geom2d_Vector
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeVector_swiginit(self, _GeomToStep.new_GeomToStep_MakeVector(*args))

    def Value(self, *args) -> "opencascade::handle< StepGeom_Vector > const &":
        """:rtype: opencascade::handle<StepGeom_Vector>"""
        return _GeomToStep.GeomToStep_MakeVector_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeVector
GeomToStep_MakeVector.Value = new_instancemethod(_GeomToStep.GeomToStep_MakeVector_Value, None, GeomToStep_MakeVector)
GeomToStep_MakeVector_swigregister = _GeomToStep.GeomToStep_MakeVector_swigregister
GeomToStep_MakeVector_swigregister(GeomToStep_MakeVector)



