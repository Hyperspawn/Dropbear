# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
HLRAlgo module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_hlralgo.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _HLRAlgo.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_HLRAlgo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_HLRAlgo')
    _HLRAlgo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HLRAlgo', [dirname(__file__)])
        except ImportError:
            import _HLRAlgo
            return _HLRAlgo
        try:
            _mod = imp.load_module('_HLRAlgo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _HLRAlgo = swig_import_helper()
    del swig_import_helper
else:
    import _HLRAlgo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRAlgo.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_HLRAlgo.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_HLRAlgo.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_HLRAlgo.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_HLRAlgo.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_HLRAlgo.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_HLRAlgo.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_HLRAlgo.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_HLRAlgo.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_HLRAlgo.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_HLRAlgo.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_HLRAlgo.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_HLRAlgo.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_HLRAlgo.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_HLRAlgo.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_HLRAlgo.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_HLRAlgo.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _HLRAlgo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _HLRAlgo.process_exception(error, method_name, class_name)
process_exception = _HLRAlgo.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopAbs
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp
import OCC.Core.gp
HLRAlgo_PolyMask_EMskOutLin1 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin1
HLRAlgo_PolyMask_EMskOutLin2 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin2
HLRAlgo_PolyMask_EMskOutLin3 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin3
HLRAlgo_PolyMask_EMskGrALin1 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin1
HLRAlgo_PolyMask_EMskGrALin2 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin2
HLRAlgo_PolyMask_EMskGrALin3 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin3
HLRAlgo_PolyMask_FMskBack = _HLRAlgo.HLRAlgo_PolyMask_FMskBack
HLRAlgo_PolyMask_FMskSide = _HLRAlgo.HLRAlgo_PolyMask_FMskSide
HLRAlgo_PolyMask_FMskHiding = _HLRAlgo.HLRAlgo_PolyMask_FMskHiding
HLRAlgo_PolyMask_FMskFlat = _HLRAlgo.HLRAlgo_PolyMask_FMskFlat
HLRAlgo_PolyMask_FMskOnOutL = _HLRAlgo.HLRAlgo_PolyMask_FMskOnOutL
HLRAlgo_PolyMask_FMskOrBack = _HLRAlgo.HLRAlgo_PolyMask_FMskOrBack
HLRAlgo_PolyMask_FMskFrBack = _HLRAlgo.HLRAlgo_PolyMask_FMskFrBack

def Handle_HLRAlgo_EdgesBlock_Create() -> "opencascade::handle< HLRAlgo_EdgesBlock >":
    return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_Create()
Handle_HLRAlgo_EdgesBlock_Create = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_Create

def Handle_HLRAlgo_EdgesBlock_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_EdgesBlock >":
    return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_DownCast(t)
Handle_HLRAlgo_EdgesBlock_DownCast = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_DownCast

def Handle_HLRAlgo_EdgesBlock_IsNull(t: 'opencascade::handle< HLRAlgo_EdgesBlock > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_IsNull(t)
Handle_HLRAlgo_EdgesBlock_IsNull = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_IsNull

def Handle_HLRAlgo_PolyAlgo_Create() -> "opencascade::handle< HLRAlgo_PolyAlgo >":
    return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Create()
Handle_HLRAlgo_PolyAlgo_Create = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Create

def Handle_HLRAlgo_PolyAlgo_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_PolyAlgo >":
    return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_DownCast(t)
Handle_HLRAlgo_PolyAlgo_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_DownCast

def Handle_HLRAlgo_PolyAlgo_IsNull(t: 'opencascade::handle< HLRAlgo_PolyAlgo > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_IsNull(t)
Handle_HLRAlgo_PolyAlgo_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_IsNull

def Handle_HLRAlgo_PolyData_Create() -> "opencascade::handle< HLRAlgo_PolyData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyData_Create()
Handle_HLRAlgo_PolyData_Create = _HLRAlgo.Handle_HLRAlgo_PolyData_Create

def Handle_HLRAlgo_PolyData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_PolyData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyData_DownCast(t)
Handle_HLRAlgo_PolyData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyData_DownCast

def Handle_HLRAlgo_PolyData_IsNull(t: 'opencascade::handle< HLRAlgo_PolyData > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_PolyData_IsNull(t)
Handle_HLRAlgo_PolyData_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyData_IsNull

def Handle_HLRAlgo_PolyInternalData_Create() -> "opencascade::handle< HLRAlgo_PolyInternalData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_Create()
Handle_HLRAlgo_PolyInternalData_Create = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_Create

def Handle_HLRAlgo_PolyInternalData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_PolyInternalData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DownCast(t)
Handle_HLRAlgo_PolyInternalData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DownCast

def Handle_HLRAlgo_PolyInternalData_IsNull(t: 'opencascade::handle< HLRAlgo_PolyInternalData > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IsNull(t)
Handle_HLRAlgo_PolyInternalData_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IsNull

def Handle_HLRAlgo_PolyInternalNode_Create() -> "opencascade::handle< HLRAlgo_PolyInternalNode >":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_Create()
Handle_HLRAlgo_PolyInternalNode_Create = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_Create

def Handle_HLRAlgo_PolyInternalNode_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_PolyInternalNode >":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DownCast(t)
Handle_HLRAlgo_PolyInternalNode_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DownCast

def Handle_HLRAlgo_PolyInternalNode_IsNull(t: 'opencascade::handle< HLRAlgo_PolyInternalNode > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_IsNull(t)
Handle_HLRAlgo_PolyInternalNode_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_IsNull

def Handle_HLRAlgo_PolyShellData_Create() -> "opencascade::handle< HLRAlgo_PolyShellData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyShellData_Create()
Handle_HLRAlgo_PolyShellData_Create = _HLRAlgo.Handle_HLRAlgo_PolyShellData_Create

def Handle_HLRAlgo_PolyShellData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_PolyShellData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyShellData_DownCast(t)
Handle_HLRAlgo_PolyShellData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyShellData_DownCast

def Handle_HLRAlgo_PolyShellData_IsNull(t: 'opencascade::handle< HLRAlgo_PolyShellData > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_PolyShellData_IsNull(t)
Handle_HLRAlgo_PolyShellData_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyShellData_IsNull

def Handle_HLRAlgo_WiresBlock_Create() -> "opencascade::handle< HLRAlgo_WiresBlock >":
    return _HLRAlgo.Handle_HLRAlgo_WiresBlock_Create()
Handle_HLRAlgo_WiresBlock_Create = _HLRAlgo.Handle_HLRAlgo_WiresBlock_Create

def Handle_HLRAlgo_WiresBlock_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_WiresBlock >":
    return _HLRAlgo.Handle_HLRAlgo_WiresBlock_DownCast(t)
Handle_HLRAlgo_WiresBlock_DownCast = _HLRAlgo.Handle_HLRAlgo_WiresBlock_DownCast

def Handle_HLRAlgo_WiresBlock_IsNull(t: 'opencascade::handle< HLRAlgo_WiresBlock > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_WiresBlock_IsNull(t)
Handle_HLRAlgo_WiresBlock_IsNull = _HLRAlgo.Handle_HLRAlgo_WiresBlock_IsNull

def Handle_HLRAlgo_HArray1OfPINod_Create() -> "opencascade::handle< HLRAlgo_HArray1OfPINod >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_Create()
Handle_HLRAlgo_HArray1OfPINod_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_Create

def Handle_HLRAlgo_HArray1OfPINod_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_HArray1OfPINod >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DownCast(t)
Handle_HLRAlgo_HArray1OfPINod_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DownCast

def Handle_HLRAlgo_HArray1OfPINod_IsNull(t: 'opencascade::handle< HLRAlgo_HArray1OfPINod > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_IsNull(t)
Handle_HLRAlgo_HArray1OfPINod_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_IsNull

def Handle_HLRAlgo_HArray1OfPHDat_Create() -> "opencascade::handle< HLRAlgo_HArray1OfPHDat >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_Create()
Handle_HLRAlgo_HArray1OfPHDat_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_Create

def Handle_HLRAlgo_HArray1OfPHDat_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_HArray1OfPHDat >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DownCast(t)
Handle_HLRAlgo_HArray1OfPHDat_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DownCast

def Handle_HLRAlgo_HArray1OfPHDat_IsNull(t: 'opencascade::handle< HLRAlgo_HArray1OfPHDat > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_IsNull(t)
Handle_HLRAlgo_HArray1OfPHDat_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_IsNull

def Handle_HLRAlgo_HArray1OfTData_Create() -> "opencascade::handle< HLRAlgo_HArray1OfTData >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_Create()
Handle_HLRAlgo_HArray1OfTData_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_Create

def Handle_HLRAlgo_HArray1OfTData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_HArray1OfTData >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DownCast(t)
Handle_HLRAlgo_HArray1OfTData_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DownCast

def Handle_HLRAlgo_HArray1OfTData_IsNull(t: 'opencascade::handle< HLRAlgo_HArray1OfTData > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_IsNull(t)
Handle_HLRAlgo_HArray1OfTData_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_IsNull

def Handle_HLRAlgo_HArray1OfPISeg_Create() -> "opencascade::handle< HLRAlgo_HArray1OfPISeg >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_Create()
Handle_HLRAlgo_HArray1OfPISeg_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_Create

def Handle_HLRAlgo_HArray1OfPISeg_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_HArray1OfPISeg >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DownCast(t)
Handle_HLRAlgo_HArray1OfPISeg_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DownCast

def Handle_HLRAlgo_HArray1OfPISeg_IsNull(t: 'opencascade::handle< HLRAlgo_HArray1OfPISeg > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_IsNull(t)
Handle_HLRAlgo_HArray1OfPISeg_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_IsNull
class HLRAlgo_InterferenceList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_InterferenceList_swiginit(self, _HLRAlgo.new_HLRAlgo_InterferenceList(*args))
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_InterferenceList
HLRAlgo_InterferenceList.begin = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_begin, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.end = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_end, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.cbegin = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_cbegin, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.cend = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_cend, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Size = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Size, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Assign = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Assign, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Set = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Set, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Clear = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Clear, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.First = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_First, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Last = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Last, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Append = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Append, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Prepend = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Prepend, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.RemoveFirst = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_RemoveFirst, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Remove = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Remove, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.InsertBefore = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_InsertBefore, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.InsertAfter = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_InsertAfter, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList.Reverse = new_instancemethod(_HLRAlgo.HLRAlgo_InterferenceList_Reverse, None, HLRAlgo_InterferenceList)
HLRAlgo_InterferenceList_swigregister = _HLRAlgo.HLRAlgo_InterferenceList_swigregister
HLRAlgo_InterferenceList_swigregister(HLRAlgo_InterferenceList)

class HLRAlgo_ListIteratorOfInterferenceList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_swiginit(self, _HLRAlgo.new_HLRAlgo_ListIteratorOfInterferenceList(*args))
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_ListIteratorOfInterferenceList
HLRAlgo_ListIteratorOfInterferenceList.More = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_More, None, HLRAlgo_ListIteratorOfInterferenceList)
HLRAlgo_ListIteratorOfInterferenceList.Next = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Next, None, HLRAlgo_ListIteratorOfInterferenceList)
HLRAlgo_ListIteratorOfInterferenceList.Value = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Value, None, HLRAlgo_ListIteratorOfInterferenceList)
HLRAlgo_ListIteratorOfInterferenceList.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_ChangeValue, None, HLRAlgo_ListIteratorOfInterferenceList)
HLRAlgo_ListIteratorOfInterferenceList_swigregister = _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_swigregister
HLRAlgo_ListIteratorOfInterferenceList_swigregister(HLRAlgo_ListIteratorOfInterferenceList)

class HLRAlgo_ListOfBPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_ListOfBPoint_swiginit(self, _HLRAlgo.new_HLRAlgo_ListOfBPoint(*args))
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_ListOfBPoint
HLRAlgo_ListOfBPoint.begin = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_begin, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.end = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_end, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.cbegin = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_cbegin, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.cend = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_cend, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Size = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Size, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Assign = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Assign, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Set = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Set, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Clear = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Clear, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.First = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_First, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Last = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Last, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Append = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Append, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Prepend = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Prepend, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.RemoveFirst = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_RemoveFirst, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Remove = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Remove, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.InsertBefore = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_InsertBefore, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.InsertAfter = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_InsertAfter, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint.Reverse = new_instancemethod(_HLRAlgo.HLRAlgo_ListOfBPoint_Reverse, None, HLRAlgo_ListOfBPoint)
HLRAlgo_ListOfBPoint_swigregister = _HLRAlgo.HLRAlgo_ListOfBPoint_swigregister
HLRAlgo_ListOfBPoint_swigregister(HLRAlgo_ListOfBPoint)

class HLRAlgo_ListIteratorOfListOfBPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_swiginit(self, _HLRAlgo.new_HLRAlgo_ListIteratorOfListOfBPoint(*args))
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_ListIteratorOfListOfBPoint
HLRAlgo_ListIteratorOfListOfBPoint.More = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_More, None, HLRAlgo_ListIteratorOfListOfBPoint)
HLRAlgo_ListIteratorOfListOfBPoint.Next = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Next, None, HLRAlgo_ListIteratorOfListOfBPoint)
HLRAlgo_ListIteratorOfListOfBPoint.Value = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Value, None, HLRAlgo_ListIteratorOfListOfBPoint)
HLRAlgo_ListIteratorOfListOfBPoint.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_ChangeValue, None, HLRAlgo_ListIteratorOfListOfBPoint)
HLRAlgo_ListIteratorOfListOfBPoint_swigregister = _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_swigregister
HLRAlgo_ListIteratorOfListOfBPoint_swigregister(HLRAlgo_ListIteratorOfListOfBPoint)

class HLRAlgo_Array1OfTData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_Array1OfTData_swiginit(self, _HLRAlgo.new_HLRAlgo_Array1OfTData(*args))
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Array1OfTData

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

HLRAlgo_Array1OfTData.begin = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_begin, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.end = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_end, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.cbegin = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_cbegin, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.cend = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_cend, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Init = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Init, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Size = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Size, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Length = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Length, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.IsEmpty = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_IsEmpty, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Lower = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Lower, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Upper = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Upper, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.IsDeletable = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_IsDeletable, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.IsAllocated = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_IsAllocated, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Assign = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Assign, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Move = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Move, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Set = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Set, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.First = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_First, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.ChangeFirst = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_ChangeFirst, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Last = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Last, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.ChangeLast = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_ChangeLast, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Value = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Value, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_ChangeValue, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.__call__ = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData___call__, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.SetValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_SetValue, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData.Resize = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfTData_Resize, None, HLRAlgo_Array1OfTData)
HLRAlgo_Array1OfTData_swigregister = _HLRAlgo.HLRAlgo_Array1OfTData_swigregister
HLRAlgo_Array1OfTData_swigregister(HLRAlgo_Array1OfTData)

class HLRAlgo_Array1OfPISeg(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_Array1OfPISeg_swiginit(self, _HLRAlgo.new_HLRAlgo_Array1OfPISeg(*args))
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Array1OfPISeg

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

HLRAlgo_Array1OfPISeg.begin = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_begin, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.end = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_end, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.cbegin = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_cbegin, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.cend = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_cend, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Init = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Init, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Size = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Size, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Length = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Length, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.IsEmpty = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_IsEmpty, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Lower = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Lower, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Upper = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Upper, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.IsDeletable = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_IsDeletable, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.IsAllocated = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_IsAllocated, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Assign = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Assign, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Move = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Move, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Set = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Set, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.First = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_First, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.ChangeFirst = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_ChangeFirst, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Last = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Last, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.ChangeLast = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_ChangeLast, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Value = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Value, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_ChangeValue, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.__call__ = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg___call__, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.SetValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_SetValue, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg.Resize = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPISeg_Resize, None, HLRAlgo_Array1OfPISeg)
HLRAlgo_Array1OfPISeg_swigregister = _HLRAlgo.HLRAlgo_Array1OfPISeg_swigregister
HLRAlgo_Array1OfPISeg_swigregister(HLRAlgo_Array1OfPISeg)

class HLRAlgo_Array1OfPINod(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_Array1OfPINod_swiginit(self, _HLRAlgo.new_HLRAlgo_Array1OfPINod(*args))
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Array1OfPINod

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

HLRAlgo_Array1OfPINod.begin = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_begin, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.end = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_end, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.cbegin = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_cbegin, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.cend = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_cend, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Init = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Init, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Size = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Size, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Length = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Length, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.IsEmpty = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_IsEmpty, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Lower = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Lower, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Upper = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Upper, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.IsDeletable = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_IsDeletable, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.IsAllocated = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_IsAllocated, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Assign = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Assign, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Move = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Move, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Set = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Set, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.First = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_First, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.ChangeFirst = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_ChangeFirst, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Last = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Last, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.ChangeLast = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_ChangeLast, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Value = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Value, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.ChangeValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_ChangeValue, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.__call__ = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod___call__, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.SetValue = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_SetValue, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod.Resize = new_instancemethod(_HLRAlgo.HLRAlgo_Array1OfPINod_Resize, None, HLRAlgo_Array1OfPINod)
HLRAlgo_Array1OfPINod_swigregister = _HLRAlgo.HLRAlgo_Array1OfPINod_swigregister
HLRAlgo_Array1OfPINod_swigregister(HLRAlgo_Array1OfPINod)

class hlralgo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddMinMax(*args) -> "void":
        """
        :param IMin:
        	:type IMin: HLRAlgo_EdgesBlock::MinMaxIndices
        	:param IMax:
        	:type IMax: HLRAlgo_EdgesBlock::MinMaxIndices
        	:param OMin:
        	:type OMin: HLRAlgo_EdgesBlock::MinMaxIndices
        	:param OMax:
        	:type OMax: HLRAlgo_EdgesBlock::MinMaxIndices
        	:rtype: void
        """
        return _HLRAlgo.hlralgo_AddMinMax(*args)

    AddMinMax = staticmethod(AddMinMax)

    def CopyMinMax(*args) -> "void":
        """
        :param IMin:
        	:type IMin: HLRAlgo_EdgesBlock::MinMaxIndices
        	:param IMax:
        	:type IMax: HLRAlgo_EdgesBlock::MinMaxIndices
        	:param OMin:
        	:type OMin: HLRAlgo_EdgesBlock::MinMaxIndices
        	:param OMax:
        	:type OMax: HLRAlgo_EdgesBlock::MinMaxIndices
        	:rtype: None
        """
        return _HLRAlgo.hlralgo_CopyMinMax(*args)

    CopyMinMax = staticmethod(CopyMinMax)

    def DecodeMinMax(*args) -> "void":
        """
        :param MinMax:
        	:type MinMax: HLRAlgo_EdgesBlock::MinMaxIndices
        	:param Min:
        	:type Min: HLRAlgo_EdgesBlock::MinMaxIndices
        	:param Max:
        	:type Max: HLRAlgo_EdgesBlock::MinMaxIndices
        	:rtype: void
        """
        return _HLRAlgo.hlralgo_DecodeMinMax(*args)

    DecodeMinMax = staticmethod(DecodeMinMax)

    def EncodeMinMax(*args) -> "void":
        """
        :param Min:
        	:type Min: HLRAlgo_EdgesBlock::MinMaxIndices
        	:param Max:
        	:type Max: HLRAlgo_EdgesBlock::MinMaxIndices
        	:param MinMax:
        	:type MinMax: HLRAlgo_EdgesBlock::MinMaxIndices
        	:rtype: void
        """
        return _HLRAlgo.hlralgo_EncodeMinMax(*args)

    EncodeMinMax = staticmethod(EncodeMinMax)

    def EnlargeMinMax(*args) -> "void":
        """
        :param tol:
        	:type tol: float
        	:param Min:
        	:type Min: float
        	:param Max:
        	:type Max: float
        	:rtype: void
        """
        return _HLRAlgo.hlralgo_EnlargeMinMax(*args)

    EnlargeMinMax = staticmethod(EnlargeMinMax)

    def InitMinMax(*args) -> "void":
        """
        :param Big:
        	:type Big: float
        	:param Min:
        	:type Min: float
        	:param Max:
        	:type Max: float
        	:rtype: void
        """
        return _HLRAlgo.hlralgo_InitMinMax(*args)

    InitMinMax = staticmethod(InitMinMax)

    def SizeBox(*args) -> "Standard_Real":
        """
        :param Min:
        	:type Min: HLRAlgo_EdgesBlock::MinMaxIndices
        	:param Max:
        	:type Max: HLRAlgo_EdgesBlock::MinMaxIndices
        	:rtype: float
        """
        return _HLRAlgo.hlralgo_SizeBox(*args)

    SizeBox = staticmethod(SizeBox)

    def UpdateMinMax(*args) -> "void":
        """
        * Iterator on the visible or hidden parts of an EdgeStatus.
        	:param x:
        	:type x: float
        	:param y:
        	:type y: float
        	:param z:
        	:type z: float
        	:param Min:
        	:type Min: float
        	:param Max:
        	:type Max: float
        	:rtype: void
        """
        return _HLRAlgo.hlralgo_UpdateMinMax(*args)

    UpdateMinMax = staticmethod(UpdateMinMax)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRAlgo.hlralgo_swiginit(self, _HLRAlgo.new_hlralgo())
    __swig_destroy__ = _HLRAlgo.delete_hlralgo
hlralgo_swigregister = _HLRAlgo.hlralgo_swigregister
hlralgo_swigregister(hlralgo)

def hlralgo_AddMinMax(*args) -> "void":
    """
    :param IMin:
    	:type IMin: HLRAlgo_EdgesBlock::MinMaxIndices
    	:param IMax:
    	:type IMax: HLRAlgo_EdgesBlock::MinMaxIndices
    	:param OMin:
    	:type OMin: HLRAlgo_EdgesBlock::MinMaxIndices
    	:param OMax:
    	:type OMax: HLRAlgo_EdgesBlock::MinMaxIndices
    	:rtype: void
    """
    return _HLRAlgo.hlralgo_AddMinMax(*args)

def hlralgo_CopyMinMax(*args) -> "void":
    """
    :param IMin:
    	:type IMin: HLRAlgo_EdgesBlock::MinMaxIndices
    	:param IMax:
    	:type IMax: HLRAlgo_EdgesBlock::MinMaxIndices
    	:param OMin:
    	:type OMin: HLRAlgo_EdgesBlock::MinMaxIndices
    	:param OMax:
    	:type OMax: HLRAlgo_EdgesBlock::MinMaxIndices
    	:rtype: None
    """
    return _HLRAlgo.hlralgo_CopyMinMax(*args)

def hlralgo_DecodeMinMax(*args) -> "void":
    """
    :param MinMax:
    	:type MinMax: HLRAlgo_EdgesBlock::MinMaxIndices
    	:param Min:
    	:type Min: HLRAlgo_EdgesBlock::MinMaxIndices
    	:param Max:
    	:type Max: HLRAlgo_EdgesBlock::MinMaxIndices
    	:rtype: void
    """
    return _HLRAlgo.hlralgo_DecodeMinMax(*args)

def hlralgo_EncodeMinMax(*args) -> "void":
    """
    :param Min:
    	:type Min: HLRAlgo_EdgesBlock::MinMaxIndices
    	:param Max:
    	:type Max: HLRAlgo_EdgesBlock::MinMaxIndices
    	:param MinMax:
    	:type MinMax: HLRAlgo_EdgesBlock::MinMaxIndices
    	:rtype: void
    """
    return _HLRAlgo.hlralgo_EncodeMinMax(*args)

def hlralgo_EnlargeMinMax(*args) -> "void":
    """
    :param tol:
    	:type tol: float
    	:param Min:
    	:type Min: float
    	:param Max:
    	:type Max: float
    	:rtype: void
    """
    return _HLRAlgo.hlralgo_EnlargeMinMax(*args)

def hlralgo_InitMinMax(*args) -> "void":
    """
    :param Big:
    	:type Big: float
    	:param Min:
    	:type Min: float
    	:param Max:
    	:type Max: float
    	:rtype: void
    """
    return _HLRAlgo.hlralgo_InitMinMax(*args)

def hlralgo_SizeBox(*args) -> "Standard_Real":
    """
    :param Min:
    	:type Min: HLRAlgo_EdgesBlock::MinMaxIndices
    	:param Max:
    	:type Max: HLRAlgo_EdgesBlock::MinMaxIndices
    	:rtype: float
    """
    return _HLRAlgo.hlralgo_SizeBox(*args)

def hlralgo_UpdateMinMax(*args) -> "void":
    """
    * Iterator on the visible or hidden parts of an EdgeStatus.
    	:param x:
    	:type x: float
    	:param y:
    	:type y: float
    	:param z:
    	:type z: float
    	:param Min:
    	:type Min: float
    	:param Max:
    	:type Max: float
    	:rtype: void
    """
    return _HLRAlgo.hlralgo_UpdateMinMax(*args)

class HLRAlgo_BiPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param reg1:
        	:type reg1: bool
        	:param regn:
        	:type regn: bool
        	:param outl:
        	:type outl: bool
        	:param intl:
        	:type intl: bool
        	:rtype: None
        :param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param flag:
        	:type flag: int
        	:rtype: None
        :param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param i1:
        	:type i1: int
        	:param i1p1:
        	:type i1p1: int
        	:param i1p2:
        	:type i1p2: int
        	:param reg1:
        	:type reg1: bool
        	:param regn:
        	:type regn: bool
        	:param outl:
        	:type outl: bool
        	:param intl:
        	:type intl: bool
        	:rtype: None
        :param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param i1:
        	:type i1: int
        	:param i1p1:
        	:type i1p1: int
        	:param i1p2:
        	:type i1p2: int
        	:param flag:
        	:type flag: int
        	:rtype: None
        :param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param i1:
        	:type i1: int
        	:param i1p1:
        	:type i1p1: int
        	:param i1p2:
        	:type i1p2: int
        	:param i2:
        	:type i2: int
        	:param i2p1:
        	:type i2p1: int
        	:param i2p2:
        	:type i2p2: int
        	:param reg1:
        	:type reg1: bool
        	:param regn:
        	:type regn: bool
        	:param outl:
        	:type outl: bool
        	:param intl:
        	:type intl: bool
        	:rtype: None
        :param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param i1:
        	:type i1: int
        	:param i1p1:
        	:type i1p1: int
        	:param i1p2:
        	:type i1p2: int
        	:param i2:
        	:type i2: int
        	:param i2p1:
        	:type i2p1: int
        	:param i2p2:
        	:type i2p2: int
        	:param flag:
        	:type flag: int
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_BiPoint_swiginit(self, _HLRAlgo.new_HLRAlgo_BiPoint(*args))

    def Hidden(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_BiPoint_Hidden(self, *args)


    def IntLine(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_BiPoint_IntLine(self, *args)


    def OutLine(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_BiPoint_OutLine(self, *args)


    def Rg1Line(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_BiPoint_Rg1Line(self, *args)


    def RgNLine(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_BiPoint_RgNLine(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_BiPoint
HLRAlgo_BiPoint.Hidden = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_Hidden, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint.IntLine = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_IntLine, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint.OutLine = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_OutLine, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint.Rg1Line = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_Rg1Line, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint.RgNLine = new_instancemethod(_HLRAlgo.HLRAlgo_BiPoint_RgNLine, None, HLRAlgo_BiPoint)
HLRAlgo_BiPoint_swigregister = _HLRAlgo.HLRAlgo_BiPoint_swigregister
HLRAlgo_BiPoint_swigregister(HLRAlgo_BiPoint)

class HLRAlgo_Coincidence(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _HLRAlgo.HLRAlgo_Coincidence_swiginit(self, _HLRAlgo.new_HLRAlgo_Coincidence(*args))

    def Set2D(self, *args) -> "void":
        """
        :param FE:
        	:type FE: int
        	:param Param:
        	:type Param: float
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_Coincidence_Set2D(self, *args)


    def SetState3D(self, *args) -> "void":
        """
        :param stbef:
        	:type stbef: TopAbs_State
        	:param staft:
        	:type staft: TopAbs_State
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_Coincidence_SetState3D(self, *args)


    def State3D(self, *args) -> "void":
        """
        :param stbef:
        	:type stbef: TopAbs_State
        	:param staft:
        	:type staft: TopAbs_State
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_Coincidence_State3D(self, *args)


    def Value2D(self, *args) -> "void":
        """
        :param FE:
        	:type FE: int
        	:param Param:
        	:type Param: float
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_Coincidence_Value2D(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Coincidence
HLRAlgo_Coincidence.Set2D = new_instancemethod(_HLRAlgo.HLRAlgo_Coincidence_Set2D, None, HLRAlgo_Coincidence)
HLRAlgo_Coincidence.SetState3D = new_instancemethod(_HLRAlgo.HLRAlgo_Coincidence_SetState3D, None, HLRAlgo_Coincidence)
HLRAlgo_Coincidence.State3D = new_instancemethod(_HLRAlgo.HLRAlgo_Coincidence_State3D, None, HLRAlgo_Coincidence)
HLRAlgo_Coincidence.Value2D = new_instancemethod(_HLRAlgo.HLRAlgo_Coincidence_Value2D, None, HLRAlgo_Coincidence)
HLRAlgo_Coincidence_swigregister = _HLRAlgo.HLRAlgo_Coincidence_swigregister
HLRAlgo_Coincidence_swigregister(HLRAlgo_Coincidence)

class HLRAlgo_EdgeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Iterator on the visible or hidden parts of an edge.
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_EdgeIterator_swiginit(self, _HLRAlgo.new_HLRAlgo_EdgeIterator(*args))

    def Hidden(self, *args) -> "void":
        """
        * Returns the bounds and the tolerances of the current Hidden Interval
        	:param Start:
        	:type Start: float
        	:param TolStart:
        	:type TolStart: Standard_ShortReal
        	:param End:
        	:type End: float
        	:param TolEnd:
        	:type TolEnd: Standard_ShortReal
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_Hidden(self, *args)


    def InitHidden(self, *args) -> "void":
        """
        :param status:
        	:type status: HLRAlgo_EdgeStatus
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_InitHidden(self, *args)


    def InitVisible(self, *args) -> "void":
        """
        :param status:
        	:type status: HLRAlgo_EdgeStatus
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_InitVisible(self, *args)


    def MoreHidden(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _HLRAlgo.HLRAlgo_EdgeIterator_MoreHidden(self, *args)


    def MoreVisible(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _HLRAlgo.HLRAlgo_EdgeIterator_MoreVisible(self, *args)


    def NextHidden(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAlgo.HLRAlgo_EdgeIterator_NextHidden(self, *args)


    def NextVisible(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAlgo.HLRAlgo_EdgeIterator_NextVisible(self, *args)


    def Visible(self, *args) -> "void":
        """
        * Returns the bounds and the tolerances of the current Visible Interval
        	:param Start:
        	:type Start: float
        	:param TolStart:
        	:type TolStart: Standard_ShortReal
        	:param End:
        	:type End: float
        	:param TolEnd:
        	:type TolEnd: Standard_ShortReal
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_Visible(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgeIterator
HLRAlgo_EdgeIterator.Hidden = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_Hidden, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.InitHidden = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_InitHidden, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.InitVisible = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_InitVisible, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.MoreHidden = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_MoreHidden, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.MoreVisible = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_MoreVisible, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.NextHidden = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_NextHidden, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.NextVisible = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_NextVisible, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator.Visible = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeIterator_Visible, None, HLRAlgo_EdgeIterator)
HLRAlgo_EdgeIterator_swigregister = _HLRAlgo.HLRAlgo_EdgeIterator_swigregister
HLRAlgo_EdgeIterator_swigregister(HLRAlgo_EdgeIterator)

class HLRAlgo_EdgeStatus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AllHidden(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_AllHidden(self, *args)


    def AllVisible(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_AllVisible(self, *args)


    def Bounds(self, *args) -> "void":
        """
        :param theStart:
        	:type theStart: float
        	:param theTolStart:
        	:type theTolStart: Standard_ShortReal
        	:param theEnd:
        	:type theEnd: float
        	:param theTolEnd:
        	:type theTolEnd: Standard_ShortReal
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Bounds(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * Creates a new EdgeStatus. Default visible. The Edge is bounded by the interval <Start>, <End> with the tolerances <TolStart>, <TolEnd>.
        	:param Start:
        	:type Start: float
        	:param TolStart:
        	:type TolStart: Standard_ShortReal
        	:param End:
        	:type End: float
        	:param TolEnd:
        	:type TolEnd: Standard_ShortReal
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_EdgeStatus_swiginit(self, _HLRAlgo.new_HLRAlgo_EdgeStatus(*args))

    def Hide(self, *args) -> "void":
        """
        * Hides the interval <Start>, <End> with the tolerances <TolStart>, <TolEnd>. This interval is subtracted from the visible parts. If the hidden part is on ( or under ) the face the flag <OnFace> is True ( or False ). If the hidden part is on ( or inside ) the boundary of the face the flag <OnBoundary> is True ( or False ).
        	:param Start:
        	:type Start: float
        	:param TolStart:
        	:type TolStart: Standard_ShortReal
        	:param End:
        	:type End: float
        	:param TolEnd:
        	:type TolEnd: Standard_ShortReal
        	:param OnFace:
        	:type OnFace: bool
        	:param OnBoundary:
        	:type OnBoundary: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Hide(self, *args)


    def HideAll(self, *args) -> "void":
        """
        * Hide the whole Edge.
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_HideAll(self, *args)


    def Initialize(self, *args) -> "void":
        """
        * Initialize an EdgeStatus. Default visible. The Edge is bounded by the interval <Start>, <End> with the tolerances <TolStart>, <TolEnd>.
        	:param Start:
        	:type Start: float
        	:param TolStart:
        	:type TolStart: Standard_ShortReal
        	:param End:
        	:type End: float
        	:param TolEnd:
        	:type TolEnd: Standard_ShortReal
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Initialize(self, *args)


    def NbVisiblePart(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _HLRAlgo.HLRAlgo_EdgeStatus_NbVisiblePart(self, *args)


    def ShowAll(self, *args) -> "void":
        """
        * Show the whole Edge.
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_ShowAll(self, *args)


    def VisiblePart(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:param Start:
        	:type Start: float
        	:param TolStart:
        	:type TolStart: Standard_ShortReal
        	:param End:
        	:type End: float
        	:param TolEnd:
        	:type TolEnd: Standard_ShortReal
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_VisiblePart(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgeStatus
HLRAlgo_EdgeStatus.AllHidden = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_AllHidden, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.AllVisible = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_AllVisible, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.Bounds = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_Bounds, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.Hide = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_Hide, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.HideAll = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_HideAll, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.Initialize = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_Initialize, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.NbVisiblePart = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_NbVisiblePart, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.ShowAll = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_ShowAll, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus.VisiblePart = new_instancemethod(_HLRAlgo.HLRAlgo_EdgeStatus_VisiblePart, None, HLRAlgo_EdgeStatus)
HLRAlgo_EdgeStatus_swigregister = _HLRAlgo.HLRAlgo_EdgeStatus_swigregister
HLRAlgo_EdgeStatus_swigregister(HLRAlgo_EdgeStatus)

class HLRAlgo_EdgesBlock(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Double(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:rtype: bool
        :param I:
        	:type I: int
        	:param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Double(self, *args)


    def Edge(self, *args) -> "Standard_Integer":
        """
        :param I:
        	:type I: int
        	:param EI:
        	:type EI: int
        	:rtype: None
        :param I:
        	:type I: int
        	:rtype: int
        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Edge(self, *args)


    def __init__(self, *args):
        """
        * Create a Block of Edges for a wire.
        	:param NbEdges:
        	:type NbEdges: int
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_EdgesBlock_swiginit(self, _HLRAlgo.new_HLRAlgo_EdgesBlock(*args))

    def Internal(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:rtype: bool
        :param I:
        	:type I: int
        	:param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Internal(self, *args)


    def IsoLine(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:rtype: bool
        :param I:
        	:type I: int
        	:param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_IsoLine(self, *args)


    def NbEdges(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _HLRAlgo.HLRAlgo_EdgesBlock_NbEdges(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        :param I:
        	:type I: int
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:rtype: None
        :param I:
        	:type I: int
        	:rtype: TopAbs_Orientation
        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Orientation(self, *args)


    def OutLine(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:rtype: bool
        :param I:
        	:type I: int
        	:param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_OutLine(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_EdgesBlock_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgesBlock
HLRAlgo_EdgesBlock.Double = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_Double, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.Edge = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_Edge, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.Internal = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_Internal, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.IsoLine = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_IsoLine, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.NbEdges = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_NbEdges, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.Orientation = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_Orientation, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock.OutLine = new_instancemethod(_HLRAlgo.HLRAlgo_EdgesBlock_OutLine, None, HLRAlgo_EdgesBlock)
HLRAlgo_EdgesBlock_swigregister = _HLRAlgo.HLRAlgo_EdgesBlock_swigregister
HLRAlgo_EdgesBlock_swigregister(HLRAlgo_EdgesBlock)

class HLRAlgo_Interference(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Boundary(self, *args) -> "HLRAlgo_Coincidence const &":
        """
        :param B:
        	:type B: HLRAlgo_Coincidence
        	:rtype: None
        :rtype: HLRAlgo_Coincidence
        """
        return _HLRAlgo.HLRAlgo_Interference_Boundary(self, *args)


    def BoundaryTransition(self, *args) -> "TopAbs_Orientation":
        """
        :param BTr:
        	:type BTr: TopAbs_Orientation
        	:rtype: None
        :rtype: TopAbs_Orientation
        """
        return _HLRAlgo.HLRAlgo_Interference_BoundaryTransition(self, *args)


    def ChangeBoundary(self, *args) -> "HLRAlgo_Coincidence &":
        """:rtype: HLRAlgo_Coincidence"""
        return _HLRAlgo.HLRAlgo_Interference_ChangeBoundary(self, *args)


    def ChangeIntersection(self, *args) -> "HLRAlgo_Intersection &":
        """:rtype: HLRAlgo_Intersection"""
        return _HLRAlgo.HLRAlgo_Interference_ChangeIntersection(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Inters:
        	:type Inters: HLRAlgo_Intersection
        	:param Bound:
        	:type Bound: HLRAlgo_Coincidence
        	:param Orient:
        	:type Orient: TopAbs_Orientation
        	:param Trans:
        	:type Trans: TopAbs_Orientation
        	:param BTrans:
        	:type BTrans: TopAbs_Orientation
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_Interference_swiginit(self, _HLRAlgo.new_HLRAlgo_Interference(*args))

    def Intersection(self, *args) -> "HLRAlgo_Intersection const &":
        """
        :param I:
        	:type I: HLRAlgo_Intersection
        	:rtype: None
        :rtype: HLRAlgo_Intersection
        """
        return _HLRAlgo.HLRAlgo_Interference_Intersection(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        :param O:
        	:type O: TopAbs_Orientation
        	:rtype: None
        :rtype: TopAbs_Orientation
        """
        return _HLRAlgo.HLRAlgo_Interference_Orientation(self, *args)


    def Transition(self, *args) -> "TopAbs_Orientation":
        """
        :param Tr:
        	:type Tr: TopAbs_Orientation
        	:rtype: None
        :rtype: TopAbs_Orientation
        """
        return _HLRAlgo.HLRAlgo_Interference_Transition(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Interference
HLRAlgo_Interference.Boundary = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_Boundary, None, HLRAlgo_Interference)
HLRAlgo_Interference.BoundaryTransition = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_BoundaryTransition, None, HLRAlgo_Interference)
HLRAlgo_Interference.ChangeBoundary = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_ChangeBoundary, None, HLRAlgo_Interference)
HLRAlgo_Interference.ChangeIntersection = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_ChangeIntersection, None, HLRAlgo_Interference)
HLRAlgo_Interference.Intersection = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_Intersection, None, HLRAlgo_Interference)
HLRAlgo_Interference.Orientation = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_Orientation, None, HLRAlgo_Interference)
HLRAlgo_Interference.Transition = new_instancemethod(_HLRAlgo.HLRAlgo_Interference_Transition, None, HLRAlgo_Interference)
HLRAlgo_Interference_swigregister = _HLRAlgo.HLRAlgo_Interference_swigregister
HLRAlgo_Interference_swigregister(HLRAlgo_Interference)

class HLRAlgo_Intersection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Ori:
        	:type Ori: TopAbs_Orientation
        	:param Lev:
        	:type Lev: int
        	:param SegInd:
        	:type SegInd: int
        	:param Ind:
        	:type Ind: int
        	:param P:
        	:type P: float
        	:param Tol:
        	:type Tol: Standard_ShortReal
        	:param S:
        	:type S: TopAbs_State
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_Intersection_swiginit(self, _HLRAlgo.new_HLRAlgo_Intersection(*args))

    def Index(self, *args) -> "Standard_Integer":
        """
        :param Ind:
        	:type Ind: int
        	:rtype: None
        :rtype: int
        """
        return _HLRAlgo.HLRAlgo_Intersection_Index(self, *args)


    def Level(self, *args) -> "Standard_Integer":
        """
        :param Lev:
        	:type Lev: int
        	:rtype: None
        :rtype: int
        """
        return _HLRAlgo.HLRAlgo_Intersection_Level(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        :param Ori:
        	:type Ori: TopAbs_Orientation
        	:rtype: None
        :rtype: TopAbs_Orientation
        """
        return _HLRAlgo.HLRAlgo_Intersection_Orientation(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        :param P:
        	:type P: float
        	:rtype: None
        :rtype: float
        """
        return _HLRAlgo.HLRAlgo_Intersection_Parameter(self, *args)


    def SegIndex(self, *args) -> "Standard_Integer":
        """
        :param SegInd:
        	:type SegInd: int
        	:rtype: None
        :rtype: int
        """
        return _HLRAlgo.HLRAlgo_Intersection_SegIndex(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        :param S:
        	:type S: TopAbs_State
        	:rtype: None
        :rtype: TopAbs_State
        """
        return _HLRAlgo.HLRAlgo_Intersection_State(self, *args)


    def Tolerance(self, *args) -> "Standard_ShortReal":
        """
        :param T:
        	:type T: Standard_ShortReal
        	:rtype: None
        :rtype: Standard_ShortReal
        """
        return _HLRAlgo.HLRAlgo_Intersection_Tolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Intersection
HLRAlgo_Intersection.Index = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_Index, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.Level = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_Level, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.Orientation = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_Orientation, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.Parameter = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_Parameter, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.SegIndex = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_SegIndex, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.State = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_State, None, HLRAlgo_Intersection)
HLRAlgo_Intersection.Tolerance = new_instancemethod(_HLRAlgo.HLRAlgo_Intersection_Tolerance, None, HLRAlgo_Intersection)
HLRAlgo_Intersection_swigregister = _HLRAlgo.HLRAlgo_Intersection_swigregister
HLRAlgo_Intersection_swigregister(HLRAlgo_Intersection)

class HLRAlgo_PolyAlgo(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_Clear(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _HLRAlgo.HLRAlgo_PolyAlgo_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyAlgo(*args))

    def Hide(self, *args) -> "HLRAlgo_BiPoint::PointsT &":
        """
        * process hiding between <Pt1> and <Pt2>.
        	:param status:
        	:type status: HLRAlgo_EdgeStatus
        	:param Index:
        	:type Index: int
        	:param reg1:
        	:type reg1: bool
        	:param regn:
        	:type regn: bool
        	:param outl:
        	:type outl: bool
        	:param intl:
        	:type intl: bool
        	:rtype: HLRAlgo_BiPoint::PointsT
        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Hide(self, *args)


    def Init(self, *args) -> "void":
        """
        :param HShell:
        	:type HShell: TColStd_HArray1OfTransient
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Init(self, *args)


    def InitHide(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_InitHide(self, *args)


    def InitShow(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_InitShow(self, *args)


    def MoreHide(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_MoreHide(self, *args)


    def MoreShow(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_MoreShow(self, *args)


    def NextHide(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_NextHide(self, *args)


    def NextShow(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_NextShow(self, *args)


    def PolyShell(self, *args) -> "TColStd_Array1OfTransient &":
        """:rtype: TColStd_Array1OfTransient"""
        return _HLRAlgo.HLRAlgo_PolyAlgo_PolyShell(self, *args)


    def Show(self, *args) -> "HLRAlgo_BiPoint::PointsT &":
        """
        * process hiding between <Pt1> and <Pt2>.
        	:param Index:
        	:type Index: int
        	:param reg1:
        	:type reg1: bool
        	:param regn:
        	:type regn: bool
        	:param outl:
        	:type outl: bool
        	:param intl:
        	:type intl: bool
        	:rtype: HLRAlgo_BiPoint::PointsT
        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Show(self, *args)


    def Update(self, *args) -> "void":
        """
        * Prepare all the data to process the algo.
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Update(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyAlgo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyAlgo
HLRAlgo_PolyAlgo.Clear = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_Clear, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.Hide = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_Hide, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.Init = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_Init, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.InitHide = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_InitHide, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.InitShow = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_InitShow, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.MoreHide = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_MoreHide, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.MoreShow = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_MoreShow, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.NextHide = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_NextHide, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.NextShow = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_NextShow, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.PolyShell = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_PolyShell, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.Show = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_Show, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo.Update = new_instancemethod(_HLRAlgo.HLRAlgo_PolyAlgo_Update, None, HLRAlgo_PolyAlgo)
HLRAlgo_PolyAlgo_swigregister = _HLRAlgo.HLRAlgo_PolyAlgo_swigregister
HLRAlgo_PolyAlgo_swigregister(HLRAlgo_PolyAlgo)

class HLRAlgo_PolyData(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FaceIndex(self, *args) -> "Standard_Integer":
        """
        :param I:
        	:type I: int
        	:rtype: None
        :rtype: int
        """
        return _HLRAlgo.HLRAlgo_PolyData_FaceIndex(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _HLRAlgo.HLRAlgo_PolyData_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyData(*args))

    def HNodes(self, *args) -> "void":
        """
        :param HNodes:
        	:type HNodes: TColgp_HArray1OfXYZ
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyData_HNodes(self, *args)


    def HPHDat(self, *args) -> "void":
        """
        :param HPHDat:
        	:type HPHDat: HLRAlgo_HArray1OfPHDat
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyData_HPHDat(self, *args)


    def HTData(self, *args) -> "void":
        """
        :param HTData:
        	:type HTData: HLRAlgo_HArray1OfTData
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyData_HTData(self, *args)


    def Hiding(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _HLRAlgo.HLRAlgo_PolyData_Hiding(self, *args)


    def Nodes(self, *args) -> "TColgp_Array1OfXYZ &":
        """:rtype: TColgp_Array1OfXYZ"""
        return _HLRAlgo.HLRAlgo_PolyData_Nodes(self, *args)


    def PHDat(self, *args) -> "HLRAlgo_Array1OfPHDat &":
        """:rtype: HLRAlgo_Array1OfPHDat"""
        return _HLRAlgo.HLRAlgo_PolyData_PHDat(self, *args)


    def TData(self, *args) -> "HLRAlgo_Array1OfTData &":
        """:rtype: HLRAlgo_Array1OfTData"""
        return _HLRAlgo.HLRAlgo_PolyData_TData(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyData
HLRAlgo_PolyData.FaceIndex = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_FaceIndex, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.HNodes = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_HNodes, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.HPHDat = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_HPHDat, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.HTData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_HTData, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.Hiding = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_Hiding, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.Nodes = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_Nodes, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.PHDat = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_PHDat, None, HLRAlgo_PolyData)
HLRAlgo_PolyData.TData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyData_TData, None, HLRAlgo_PolyData)
HLRAlgo_PolyData_swigregister = _HLRAlgo.HLRAlgo_PolyData_swigregister
HLRAlgo_PolyData_swigregister(HLRAlgo_PolyData)

class HLRAlgo_PolyInternalData(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddNode(self, *args) -> "Standard_Integer":
        """
        :param Nod1RValues:
        	:type Nod1RValues: HLRAlgo_PolyInternalNode::NodeData
        	:param Nod2RValues:
        	:type Nod2RValues: HLRAlgo_PolyInternalNode::NodeData
        	:param PINod1:
        	:type PINod1: HLRAlgo_Array1OfPINod *
        	:param PINod2:
        	:type PINod2: HLRAlgo_Array1OfPINod *
        	:param coef1:
        	:type coef1: float
        	:param X3:
        	:type X3: float
        	:param Y3:
        	:type Y3: float
        	:param Z3:
        	:type Z3: float
        	:rtype: int
        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_AddNode(self, *args)


    def DecPINod(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecPINod(self, *args)


    def DecPISeg(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecPISeg(self, *args)


    def DecTData(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecTData(self, *args)


    def Dump(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_Dump(self, *args)


    def __init__(self, *args):
        """
        :param nbNod:
        	:type nbNod: int
        	:param nbTri:
        	:type nbTri: int
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_PolyInternalData_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyInternalData(*args))

    def IncPINod(self, *args) -> "void":
        """
        :param PINod1:
        	:type PINod1: HLRAlgo_Array1OfPINod *
        	:param PINod2:
        	:type PINod2: HLRAlgo_Array1OfPINod *
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncPINod(self, *args)


    def IncPISeg(self, *args) -> "void":
        """
        :param PISeg1:
        	:type PISeg1: HLRAlgo_Array1OfPISeg *
        	:param PISeg2:
        	:type PISeg2: HLRAlgo_Array1OfPISeg *
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncPISeg(self, *args)


    def IncTData(self, *args) -> "void":
        """
        :param TData1:
        	:type TData1: HLRAlgo_Array1OfTData *
        	:param TData2:
        	:type TData2: HLRAlgo_Array1OfTData *
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncTData(self, *args)


    def IntOutL(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IntOutL(self, *args)


    def NbPINod(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbPINod(self, *args)


    def NbPISeg(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbPISeg(self, *args)


    def NbTData(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbTData(self, *args)


    def PINod(self, *args) -> "HLRAlgo_Array1OfPINod &":
        """:rtype: HLRAlgo_Array1OfPINod"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_PINod(self, *args)


    def PISeg(self, *args) -> "HLRAlgo_Array1OfPISeg &":
        """:rtype: HLRAlgo_Array1OfPISeg"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_PISeg(self, *args)


    def Planar(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_Planar(self, *args)


    def TData(self, *args) -> "HLRAlgo_Array1OfTData &":
        """:rtype: HLRAlgo_Array1OfTData"""
        return _HLRAlgo.HLRAlgo_PolyInternalData_TData(self, *args)


    def UpdateLinks(self, *args) -> "void":
        """
        :param TData:
        	:type TData: HLRAlgo_Array1OfTData *
        	:param PISeg:
        	:type PISeg: HLRAlgo_Array1OfPISeg *
        	:param PINod:
        	:type PINod: HLRAlgo_Array1OfPINod *
        	:rtype: None
        :param ip1:
        	:type ip1: int
        	:param ip2:
        	:type ip2: int
        	:param ip3:
        	:type ip3: int
        	:param TData1:
        	:type TData1: HLRAlgo_Array1OfTData *
        	:param TData2:
        	:type TData2: HLRAlgo_Array1OfTData *
        	:param PISeg1:
        	:type PISeg1: HLRAlgo_Array1OfPISeg *
        	:param PISeg2:
        	:type PISeg2: HLRAlgo_Array1OfPISeg *
        	:param PINod1:
        	:type PINod1: HLRAlgo_Array1OfPINod *
        	:param PINod2:
        	:type PINod2: HLRAlgo_Array1OfPINod *
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_UpdateLinks(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyInternalData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyInternalData
HLRAlgo_PolyInternalData.AddNode = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_AddNode, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.DecPINod = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_DecPINod, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.DecPISeg = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_DecPISeg, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.DecTData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_DecTData, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.Dump = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_Dump, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.IncPINod = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_IncPINod, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.IncPISeg = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_IncPISeg, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.IncTData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_IncTData, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.IntOutL = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_IntOutL, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.NbPINod = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_NbPINod, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.NbPISeg = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_NbPISeg, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.NbTData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_NbTData, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.PINod = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_PINod, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.PISeg = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_PISeg, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.Planar = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_Planar, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.TData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_TData, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData.UpdateLinks = new_instancemethod(_HLRAlgo.HLRAlgo_PolyInternalData_UpdateLinks, None, HLRAlgo_PolyInternalData)
HLRAlgo_PolyInternalData_swigregister = _HLRAlgo.HLRAlgo_PolyInternalData_swigregister
HLRAlgo_PolyInternalData_swigregister(HLRAlgo_PolyInternalData)

class HLRAlgo_PolyInternalNode(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _HLRAlgo.HLRAlgo_PolyInternalNode_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyInternalNode(*args))


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyInternalNode_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyInternalNode
HLRAlgo_PolyInternalNode_swigregister = _HLRAlgo.HLRAlgo_PolyInternalNode_swigregister
HLRAlgo_PolyInternalNode_swigregister(HLRAlgo_PolyInternalNode)

class HLRAlgo_PolyShellData(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Edges(self, *args) -> "HLRAlgo_ListOfBPoint &":
        """:rtype: HLRAlgo_ListOfBPoint"""
        return _HLRAlgo.HLRAlgo_PolyShellData_Edges(self, *args)


    def __init__(self, *args):
        """
        :param nbFace:
        	:type nbFace: int
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_PolyShellData_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyShellData(*args))

    def Hiding(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _HLRAlgo.HLRAlgo_PolyShellData_Hiding(self, *args)


    def HidingPolyData(self, *args) -> "TColStd_Array1OfTransient &":
        """:rtype: TColStd_Array1OfTransient"""
        return _HLRAlgo.HLRAlgo_PolyShellData_HidingPolyData(self, *args)


    def PolyData(self, *args) -> "TColStd_Array1OfTransient &":
        """:rtype: TColStd_Array1OfTransient"""
        return _HLRAlgo.HLRAlgo_PolyShellData_PolyData(self, *args)


    def UpdateGlobalMinMax(self, *args) -> "void":
        """
        :param theBox:
        	:type theBox: HLRAlgo_PolyData::Box
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyShellData_UpdateGlobalMinMax(self, *args)


    def UpdateHiding(self, *args) -> "void":
        """
        :param nbHiding:
        	:type nbHiding: int
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_PolyShellData_UpdateHiding(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyShellData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyShellData
HLRAlgo_PolyShellData.Edges = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_Edges, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.Hiding = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_Hiding, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.HidingPolyData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_HidingPolyData, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.PolyData = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_PolyData, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.UpdateGlobalMinMax = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_UpdateGlobalMinMax, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData.UpdateHiding = new_instancemethod(_HLRAlgo.HLRAlgo_PolyShellData_UpdateHiding, None, HLRAlgo_PolyShellData)
HLRAlgo_PolyShellData_swigregister = _HLRAlgo.HLRAlgo_PolyShellData_swigregister
HLRAlgo_PolyShellData_swigregister(HLRAlgo_PolyShellData)

class HLRAlgo_Projector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Directions(self, *args) -> "void":
        """
        :param D1:
        	:type D1: gp_Vec2d
        	:param D2:
        	:type D2: gp_Vec2d
        	:param D3:
        	:type D3: gp_Vec2d
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_Projector_Directions(self, *args)


    def Focus(self, *args) -> "Standard_Real":
        """
        * Returns the focal length.
        	:rtype: float
        """
        return _HLRAlgo.HLRAlgo_Projector_Focus(self, *args)


    def FullTransformation(self, *args) -> "gp_Trsf const":
        """
        * Returns the original transformation.
        	:rtype: gp_Trsf
        """
        return _HLRAlgo.HLRAlgo_Projector_FullTransformation(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * Creates an axonometric projector. <CS> is the viewing coordinate system.
        	:param CS:
        	:type CS: gp_Ax2
        	:rtype: None
        * Creates a perspective projector. <CS> is the viewing coordinate system.
        	:param CS:
        	:type CS: gp_Ax2
        	:param Focus:
        	:type Focus: float
        	:rtype: None
        * build a Projector with automatic minmax directions.
        	:param T:
        	:type T: gp_Trsf
        	:param Persp:
        	:type Persp: bool
        	:param Focus:
        	:type Focus: float
        	:rtype: None
        * build a Projector with given minmax directions.
        	:param T:
        	:type T: gp_Trsf
        	:param Persp:
        	:type Persp: bool
        	:param Focus:
        	:type Focus: float
        	:param v1:
        	:type v1: gp_Vec2d
        	:param v2:
        	:type v2: gp_Vec2d
        	:param v3:
        	:type v3: gp_Vec2d
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_Projector_swiginit(self, _HLRAlgo.new_HLRAlgo_Projector(*args))

    def InvertedTransformation(self, *args) -> "gp_Trsf const":
        """
        * Returns the active inverted transformation.
        	:rtype: gp_Trsf
        """
        return _HLRAlgo.HLRAlgo_Projector_InvertedTransformation(self, *args)


    def Perspective(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a perspective transformation.
        	:rtype: bool
        """
        return _HLRAlgo.HLRAlgo_Projector_Perspective(self, *args)


    def Project(self, *args) -> "void":
        """
        * Transform and apply perspective if needed.
        	:param P:
        	:type P: gp_Pnt
        	:param Pout:
        	:type Pout: gp_Pnt2d
        	:rtype: None
        * Transform and apply perspective if needed.
        	:param P:
        	:type P: gp_Pnt
        	:param X:
        	:type X: float
        	:param Y:
        	:type Y: float
        	:param Z:
        	:type Z: float
        	:rtype: None
        * Transform and apply perspective if needed.
        	:param P:
        	:type P: gp_Pnt
        	:param D1:
        	:type D1: gp_Vec
        	:param Pout:
        	:type Pout: gp_Pnt2d
        	:param D1out:
        	:type D1out: gp_Vec2d
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_Projector_Project(self, *args)


    def Scaled(self, *args) -> "void":
        """
        * to compute with the given scale and translation.
        	:param On: default value is Standard_False
        	:type On: bool
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_Projector_Scaled(self, *args)


    def Set(self, *args) -> "void":
        """
        :param T:
        	:type T: gp_Trsf
        	:param Persp:
        	:type Persp: bool
        	:param Focus:
        	:type Focus: float
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_Projector_Set(self, *args)


    def Shoot(self, *args) -> "gp_Lin":
        """
        * return a line going through the eye towards the 2d point <X,Y>.
        	:param X:
        	:type X: float
        	:param Y:
        	:type Y: float
        	:rtype: gp_Lin
        """
        return _HLRAlgo.HLRAlgo_Projector_Shoot(self, *args)


    def Transform(self, *args) -> "void":
        """
        :param D:
        	:type D: gp_Vec
        	:rtype: None
        :param Pnt:
        	:type Pnt: gp_Pnt
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_Projector_Transform(self, *args)


    def Transformation(self, *args) -> "gp_Trsf const":
        """
        * Returns the active transformation.
        	:rtype: gp_Trsf
        """
        return _HLRAlgo.HLRAlgo_Projector_Transformation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Projector
HLRAlgo_Projector.Directions = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Directions, None, HLRAlgo_Projector)
HLRAlgo_Projector.Focus = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Focus, None, HLRAlgo_Projector)
HLRAlgo_Projector.FullTransformation = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_FullTransformation, None, HLRAlgo_Projector)
HLRAlgo_Projector.InvertedTransformation = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_InvertedTransformation, None, HLRAlgo_Projector)
HLRAlgo_Projector.Perspective = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Perspective, None, HLRAlgo_Projector)
HLRAlgo_Projector.Project = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Project, None, HLRAlgo_Projector)
HLRAlgo_Projector.Scaled = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Scaled, None, HLRAlgo_Projector)
HLRAlgo_Projector.Set = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Set, None, HLRAlgo_Projector)
HLRAlgo_Projector.Shoot = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Shoot, None, HLRAlgo_Projector)
HLRAlgo_Projector.Transform = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Transform, None, HLRAlgo_Projector)
HLRAlgo_Projector.Transformation = new_instancemethod(_HLRAlgo.HLRAlgo_Projector_Transformation, None, HLRAlgo_Projector)
HLRAlgo_Projector_swigregister = _HLRAlgo.HLRAlgo_Projector_swigregister
HLRAlgo_Projector_swigregister(HLRAlgo_Projector)

class HLRAlgo_WiresBlock(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create a Block of Blocks.
        	:param NbWires:
        	:type NbWires: int
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_WiresBlock_swiginit(self, _HLRAlgo.new_HLRAlgo_WiresBlock(*args))

    def MinMax(self, *args) -> "HLRAlgo_EdgesBlock::MinMaxIndices &":
        """:rtype: HLRAlgo_EdgesBlock::MinMaxIndices"""
        return _HLRAlgo.HLRAlgo_WiresBlock_MinMax(self, *args)


    def NbWires(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _HLRAlgo.HLRAlgo_WiresBlock_NbWires(self, *args)


    def Set(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:param W:
        	:type W: HLRAlgo_EdgesBlock
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_WiresBlock_Set(self, *args)


    def UpdateMinMax(self, *args) -> "void":
        """
        :param theMinMaxes:
        	:type theMinMaxes: HLRAlgo_EdgesBlock::MinMaxIndices
        	:rtype: None
        """
        return _HLRAlgo.HLRAlgo_WiresBlock_UpdateMinMax(self, *args)


    def Wire(self, *args) -> "opencascade::handle< HLRAlgo_EdgesBlock > &":
        """
        :param I:
        	:type I: int
        	:rtype: opencascade::handle<HLRAlgo_EdgesBlock>
        """
        return _HLRAlgo.HLRAlgo_WiresBlock_Wire(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_WiresBlock_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_WiresBlock
HLRAlgo_WiresBlock.MinMax = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock_MinMax, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock.NbWires = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock_NbWires, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock.Set = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock_Set, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock.UpdateMinMax = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock_UpdateMinMax, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock.Wire = new_instancemethod(_HLRAlgo.HLRAlgo_WiresBlock_Wire, None, HLRAlgo_WiresBlock)
HLRAlgo_WiresBlock_swigregister = _HLRAlgo.HLRAlgo_WiresBlock_swigregister
HLRAlgo_WiresBlock_swigregister(HLRAlgo_WiresBlock)

class HLRAlgo_HArray1OfPINod(HLRAlgo_Array1OfPINod, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_HArray1OfPINod_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfPINod(*args))


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfPINod_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPINod
HLRAlgo_HArray1OfPINod.Array1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_Array1, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod.ChangeArray1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPINod_ChangeArray1, None, HLRAlgo_HArray1OfPINod)
HLRAlgo_HArray1OfPINod_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPINod_swigregister
HLRAlgo_HArray1OfPINod_swigregister(HLRAlgo_HArray1OfPINod)

class HLRAlgo_HArray1OfPHDat(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_HArray1OfPHDat_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfPHDat(*args))


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfPHDat_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPHDat
HLRAlgo_HArray1OfPHDat.Array1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_Array1, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat.ChangeArray1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPHDat_ChangeArray1, None, HLRAlgo_HArray1OfPHDat)
HLRAlgo_HArray1OfPHDat_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPHDat_swigregister
HLRAlgo_HArray1OfPHDat_swigregister(HLRAlgo_HArray1OfPHDat)

class HLRAlgo_HArray1OfTData(HLRAlgo_Array1OfTData, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_HArray1OfTData_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfTData(*args))


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfTData_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfTData
HLRAlgo_HArray1OfTData.Array1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_Array1, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData.ChangeArray1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfTData_ChangeArray1, None, HLRAlgo_HArray1OfTData)
HLRAlgo_HArray1OfTData_swigregister = _HLRAlgo.HLRAlgo_HArray1OfTData_swigregister
HLRAlgo_HArray1OfTData_swigregister(HLRAlgo_HArray1OfTData)

class HLRAlgo_HArray1OfPISeg(HLRAlgo_Array1OfPISeg, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_HArray1OfPISeg_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfPISeg(*args))


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfPISeg_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPISeg
HLRAlgo_HArray1OfPISeg.Array1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_Array1, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg.ChangeArray1 = new_instancemethod(_HLRAlgo.HLRAlgo_HArray1OfPISeg_ChangeArray1, None, HLRAlgo_HArray1OfPISeg)
HLRAlgo_HArray1OfPISeg_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPISeg_swigregister
HLRAlgo_HArray1OfPISeg_swigregister(HLRAlgo_HArray1OfPISeg)



