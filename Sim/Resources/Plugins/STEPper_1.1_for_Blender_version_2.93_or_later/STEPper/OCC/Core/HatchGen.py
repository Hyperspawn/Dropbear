# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
HatchGen module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_hatchgen.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _HatchGen.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_HatchGen')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_HatchGen')
    _HatchGen = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HatchGen', [dirname(__file__)])
        except ImportError:
            import _HatchGen
            return _HatchGen
        try:
            _mod = imp.load_module('_HatchGen', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _HatchGen = swig_import_helper()
    del swig_import_helper
else:
    import _HatchGen
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HatchGen.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_HatchGen.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_HatchGen.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_HatchGen.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_HatchGen.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_HatchGen.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_HatchGen.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_HatchGen.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_HatchGen.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_HatchGen.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_HatchGen.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_HatchGen.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_HatchGen.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_HatchGen.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_HatchGen.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_HatchGen.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_HatchGen.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _HatchGen.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _HatchGen.process_exception(error, method_name, class_name)
process_exception = _HatchGen.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopAbs
import OCC.Core.IntRes2d
import OCC.Core.gp
HatchGen_NoProblem = _HatchGen.HatchGen_NoProblem
HatchGen_TrimFailure = _HatchGen.HatchGen_TrimFailure
HatchGen_TransitionFailure = _HatchGen.HatchGen_TransitionFailure
HatchGen_IncoherentParity = _HatchGen.HatchGen_IncoherentParity
HatchGen_IncompatibleStates = _HatchGen.HatchGen_IncompatibleStates
HatchGen_TRUE = _HatchGen.HatchGen_TRUE
HatchGen_TOUCH = _HatchGen.HatchGen_TOUCH
HatchGen_TANGENT = _HatchGen.HatchGen_TANGENT
HatchGen_UNDETERMINED = _HatchGen.HatchGen_UNDETERMINED
class HatchGen_Domains(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HatchGen.HatchGen_Domains_swiginit(self, _HatchGen.new_HatchGen_Domains(*args))
    delNode = staticmethod(_HatchGen.HatchGen_Domains_delNode)
    __swig_destroy__ = _HatchGen.delete_HatchGen_Domains
HatchGen_Domains.begin = new_instancemethod(_HatchGen.HatchGen_Domains_begin, None, HatchGen_Domains)
HatchGen_Domains.end = new_instancemethod(_HatchGen.HatchGen_Domains_end, None, HatchGen_Domains)
HatchGen_Domains.cbegin = new_instancemethod(_HatchGen.HatchGen_Domains_cbegin, None, HatchGen_Domains)
HatchGen_Domains.cend = new_instancemethod(_HatchGen.HatchGen_Domains_cend, None, HatchGen_Domains)
HatchGen_Domains.Size = new_instancemethod(_HatchGen.HatchGen_Domains_Size, None, HatchGen_Domains)
HatchGen_Domains.Length = new_instancemethod(_HatchGen.HatchGen_Domains_Length, None, HatchGen_Domains)
HatchGen_Domains.Lower = new_instancemethod(_HatchGen.HatchGen_Domains_Lower, None, HatchGen_Domains)
HatchGen_Domains.Upper = new_instancemethod(_HatchGen.HatchGen_Domains_Upper, None, HatchGen_Domains)
HatchGen_Domains.IsEmpty = new_instancemethod(_HatchGen.HatchGen_Domains_IsEmpty, None, HatchGen_Domains)
HatchGen_Domains.Reverse = new_instancemethod(_HatchGen.HatchGen_Domains_Reverse, None, HatchGen_Domains)
HatchGen_Domains.Exchange = new_instancemethod(_HatchGen.HatchGen_Domains_Exchange, None, HatchGen_Domains)
HatchGen_Domains.Clear = new_instancemethod(_HatchGen.HatchGen_Domains_Clear, None, HatchGen_Domains)
HatchGen_Domains.Assign = new_instancemethod(_HatchGen.HatchGen_Domains_Assign, None, HatchGen_Domains)
HatchGen_Domains.Set = new_instancemethod(_HatchGen.HatchGen_Domains_Set, None, HatchGen_Domains)
HatchGen_Domains.Remove = new_instancemethod(_HatchGen.HatchGen_Domains_Remove, None, HatchGen_Domains)
HatchGen_Domains.Append = new_instancemethod(_HatchGen.HatchGen_Domains_Append, None, HatchGen_Domains)
HatchGen_Domains.Prepend = new_instancemethod(_HatchGen.HatchGen_Domains_Prepend, None, HatchGen_Domains)
HatchGen_Domains.InsertBefore = new_instancemethod(_HatchGen.HatchGen_Domains_InsertBefore, None, HatchGen_Domains)
HatchGen_Domains.InsertAfter = new_instancemethod(_HatchGen.HatchGen_Domains_InsertAfter, None, HatchGen_Domains)
HatchGen_Domains.Split = new_instancemethod(_HatchGen.HatchGen_Domains_Split, None, HatchGen_Domains)
HatchGen_Domains.First = new_instancemethod(_HatchGen.HatchGen_Domains_First, None, HatchGen_Domains)
HatchGen_Domains.ChangeFirst = new_instancemethod(_HatchGen.HatchGen_Domains_ChangeFirst, None, HatchGen_Domains)
HatchGen_Domains.Last = new_instancemethod(_HatchGen.HatchGen_Domains_Last, None, HatchGen_Domains)
HatchGen_Domains.ChangeLast = new_instancemethod(_HatchGen.HatchGen_Domains_ChangeLast, None, HatchGen_Domains)
HatchGen_Domains.Value = new_instancemethod(_HatchGen.HatchGen_Domains_Value, None, HatchGen_Domains)
HatchGen_Domains.ChangeValue = new_instancemethod(_HatchGen.HatchGen_Domains_ChangeValue, None, HatchGen_Domains)
HatchGen_Domains.__call__ = new_instancemethod(_HatchGen.HatchGen_Domains___call__, None, HatchGen_Domains)
HatchGen_Domains.SetValue = new_instancemethod(_HatchGen.HatchGen_Domains_SetValue, None, HatchGen_Domains)
HatchGen_Domains_swigregister = _HatchGen.HatchGen_Domains_swigregister
HatchGen_Domains_swigregister(HatchGen_Domains)

def HatchGen_Domains_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _HatchGen.HatchGen_Domains_delNode(theNode, theAl)
HatchGen_Domains_delNode = _HatchGen.HatchGen_Domains_delNode

class HatchGen_PointsOnElement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HatchGen.HatchGen_PointsOnElement_swiginit(self, _HatchGen.new_HatchGen_PointsOnElement(*args))
    delNode = staticmethod(_HatchGen.HatchGen_PointsOnElement_delNode)
    __swig_destroy__ = _HatchGen.delete_HatchGen_PointsOnElement
HatchGen_PointsOnElement.begin = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_begin, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.end = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_end, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.cbegin = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_cbegin, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.cend = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_cend, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Size = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Size, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Length = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Length, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Lower = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Lower, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Upper = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Upper, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.IsEmpty = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_IsEmpty, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Reverse = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Reverse, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Exchange = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Exchange, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Clear = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Clear, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Assign = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Assign, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Set = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Set, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Remove = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Remove, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Append = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Append, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Prepend = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Prepend, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.InsertBefore = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_InsertBefore, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.InsertAfter = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_InsertAfter, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Split = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Split, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.First = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_First, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.ChangeFirst = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_ChangeFirst, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Last = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Last, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.ChangeLast = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_ChangeLast, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.Value = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_Value, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.ChangeValue = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_ChangeValue, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.__call__ = new_instancemethod(_HatchGen.HatchGen_PointsOnElement___call__, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement.SetValue = new_instancemethod(_HatchGen.HatchGen_PointsOnElement_SetValue, None, HatchGen_PointsOnElement)
HatchGen_PointsOnElement_swigregister = _HatchGen.HatchGen_PointsOnElement_swigregister
HatchGen_PointsOnElement_swigregister(HatchGen_PointsOnElement)

def HatchGen_PointsOnElement_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _HatchGen.HatchGen_PointsOnElement_delNode(theNode, theAl)
HatchGen_PointsOnElement_delNode = _HatchGen.HatchGen_PointsOnElement_delNode

class HatchGen_PointsOnHatching(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HatchGen.HatchGen_PointsOnHatching_swiginit(self, _HatchGen.new_HatchGen_PointsOnHatching(*args))
    delNode = staticmethod(_HatchGen.HatchGen_PointsOnHatching_delNode)
    __swig_destroy__ = _HatchGen.delete_HatchGen_PointsOnHatching
HatchGen_PointsOnHatching.begin = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_begin, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.end = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_end, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.cbegin = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_cbegin, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.cend = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_cend, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Size = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Size, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Length = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Length, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Lower = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Lower, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Upper = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Upper, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.IsEmpty = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_IsEmpty, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Reverse = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Reverse, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Exchange = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Exchange, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Clear = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Clear, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Assign = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Assign, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Set = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Set, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Remove = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Remove, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Append = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Append, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Prepend = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Prepend, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.InsertBefore = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_InsertBefore, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.InsertAfter = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_InsertAfter, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Split = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Split, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.First = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_First, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.ChangeFirst = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_ChangeFirst, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Last = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Last, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.ChangeLast = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_ChangeLast, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.Value = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_Value, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.ChangeValue = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_ChangeValue, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.__call__ = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching___call__, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching.SetValue = new_instancemethod(_HatchGen.HatchGen_PointsOnHatching_SetValue, None, HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching_swigregister = _HatchGen.HatchGen_PointsOnHatching_swigregister
HatchGen_PointsOnHatching_swigregister(HatchGen_PointsOnHatching)

def HatchGen_PointsOnHatching_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _HatchGen.HatchGen_PointsOnHatching_delNode(theNode, theAl)
HatchGen_PointsOnHatching_delNode = _HatchGen.HatchGen_PointsOnHatching_delNode

class HatchGen_Domain(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Dump(self, *args) -> "void":
        """
        * Dump of the domain.
        	:param Index: default value is 0
        	:type Index: int
        	:rtype: None
        """
        return _HatchGen.HatchGen_Domain_Dump(self, *args)


    def FirstPoint(self, *args) -> "HatchGen_PointOnHatching const &":
        """
        * Returns the first point of the domain. The exception DomainError is raised if HasFirstPoint returns False.
        	:rtype: HatchGen_PointOnHatching
        """
        return _HatchGen.HatchGen_Domain_FirstPoint(self, *args)


    def HasFirstPoint(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the domain has a first point.
        	:rtype: bool
        """
        return _HatchGen.HatchGen_Domain_HasFirstPoint(self, *args)


    def HasSecondPoint(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the domain has a second point.
        	:rtype: bool
        """
        return _HatchGen.HatchGen_Domain_HasSecondPoint(self, *args)


    def __init__(self, *args):
        """
        * Creates an infinite domain.
        	:rtype: None
        * Creates a domain for the curve associated to a hatching.
        	:param P1:
        	:type P1: HatchGen_PointOnHatching
        	:param P2:
        	:type P2: HatchGen_PointOnHatching
        	:rtype: None
        * Creates a semi-infinite domain for the curve associated to a hatching. The `First' flag means that the given point is the first one.
        	:param P:
        	:type P: HatchGen_PointOnHatching
        	:param First:
        	:type First: bool
        	:rtype: None
        """
        _HatchGen.HatchGen_Domain_swiginit(self, _HatchGen.new_HatchGen_Domain(*args))

    def SecondPoint(self, *args) -> "HatchGen_PointOnHatching const &":
        """
        * Returns the second point of the domain. The exception DomainError is raised if HasSecondPoint returns False.
        	:rtype: HatchGen_PointOnHatching
        """
        return _HatchGen.HatchGen_Domain_SecondPoint(self, *args)


    def SetFirstPoint(self, *args) -> "void":
        """
        * Sets the first point of the domain.
        	:param P:
        	:type P: HatchGen_PointOnHatching
        	:rtype: None
        * Sets the first point of the domain at the infinite.
        	:rtype: None
        """
        return _HatchGen.HatchGen_Domain_SetFirstPoint(self, *args)


    def SetPoints(self, *args) -> "void":
        """
        * Sets the first and the second points of the domain.
        	:param P1:
        	:type P1: HatchGen_PointOnHatching
        	:param P2:
        	:type P2: HatchGen_PointOnHatching
        	:rtype: None
        * Sets the first and the second points of the domain as the infinite.
        	:rtype: None
        """
        return _HatchGen.HatchGen_Domain_SetPoints(self, *args)


    def SetSecondPoint(self, *args) -> "void":
        """
        * Sets the second point of the domain.
        	:param P:
        	:type P: HatchGen_PointOnHatching
        	:rtype: None
        * Sets the second point of the domain at the infinite.
        	:rtype: None
        """
        return _HatchGen.HatchGen_Domain_SetSecondPoint(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HatchGen.delete_HatchGen_Domain
HatchGen_Domain.Dump = new_instancemethod(_HatchGen.HatchGen_Domain_Dump, None, HatchGen_Domain)
HatchGen_Domain.FirstPoint = new_instancemethod(_HatchGen.HatchGen_Domain_FirstPoint, None, HatchGen_Domain)
HatchGen_Domain.HasFirstPoint = new_instancemethod(_HatchGen.HatchGen_Domain_HasFirstPoint, None, HatchGen_Domain)
HatchGen_Domain.HasSecondPoint = new_instancemethod(_HatchGen.HatchGen_Domain_HasSecondPoint, None, HatchGen_Domain)
HatchGen_Domain.SecondPoint = new_instancemethod(_HatchGen.HatchGen_Domain_SecondPoint, None, HatchGen_Domain)
HatchGen_Domain.SetFirstPoint = new_instancemethod(_HatchGen.HatchGen_Domain_SetFirstPoint, None, HatchGen_Domain)
HatchGen_Domain.SetPoints = new_instancemethod(_HatchGen.HatchGen_Domain_SetPoints, None, HatchGen_Domain)
HatchGen_Domain.SetSecondPoint = new_instancemethod(_HatchGen.HatchGen_Domain_SetSecondPoint, None, HatchGen_Domain)
HatchGen_Domain_swigregister = _HatchGen.HatchGen_Domain_swigregister
HatchGen_Domain_swigregister(HatchGen_Domain)

class HatchGen_IntersectionPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Dump(self, *args) -> "void":
        """
        * Dump of the point on element.
        	:param Index: default value is 0
        	:type Index: int
        	:rtype: void
        """
        return _HatchGen.HatchGen_IntersectionPoint_Dump(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index of the supporting curve.
        	:rtype: int
        """
        return _HatchGen.HatchGen_IntersectionPoint_Index(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on the curve.
        	:rtype: float
        """
        return _HatchGen.HatchGen_IntersectionPoint_Parameter(self, *args)


    def Position(self, *args) -> "TopAbs_Orientation":
        """
        * Returns the position of the point on the curve.
        	:rtype: TopAbs_Orientation
        """
        return _HatchGen.HatchGen_IntersectionPoint_Position(self, *args)


    def SegmentBeginning(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag that the point is the beginning of a segment.
        	:rtype: bool
        """
        return _HatchGen.HatchGen_IntersectionPoint_SegmentBeginning(self, *args)


    def SegmentEnd(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag that the point is the end of a segment.
        	:rtype: bool
        """
        return _HatchGen.HatchGen_IntersectionPoint_SegmentEnd(self, *args)


    def SetIndex(self, *args) -> "void":
        """
        * Sets the index of the supporting curve.
        	:param Index:
        	:type Index: int
        	:rtype: None
        """
        return _HatchGen.HatchGen_IntersectionPoint_SetIndex(self, *args)


    def SetParameter(self, *args) -> "void":
        """
        * Sets the parameter on the curve.
        	:param Parameter:
        	:type Parameter: float
        	:rtype: None
        """
        return _HatchGen.HatchGen_IntersectionPoint_SetParameter(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        * Sets the position of the point on the curve.
        	:param Position:
        	:type Position: TopAbs_Orientation
        	:rtype: None
        """
        return _HatchGen.HatchGen_IntersectionPoint_SetPosition(self, *args)


    def SetSegmentBeginning(self, *args) -> "void":
        """
        * Sets the flag that the point is the beginning of a segment.
        	:param State: default value is Standard_True
        	:type State: bool
        	:rtype: None
        """
        return _HatchGen.HatchGen_IntersectionPoint_SetSegmentBeginning(self, *args)


    def SetSegmentEnd(self, *args) -> "void":
        """
        * Sets the flag that the point is the end of a segment.
        	:param State: default value is Standard_True
        	:type State: bool
        	:rtype: None
        """
        return _HatchGen.HatchGen_IntersectionPoint_SetSegmentEnd(self, *args)


    def SetStateAfter(self, *args) -> "void":
        """
        * Sets the transition state after the intersection.
        	:param State:
        	:type State: TopAbs_State
        	:rtype: None
        """
        return _HatchGen.HatchGen_IntersectionPoint_SetStateAfter(self, *args)


    def SetStateBefore(self, *args) -> "void":
        """
        * Sets the transition state before the intersection.
        	:param State:
        	:type State: TopAbs_State
        	:rtype: None
        """
        return _HatchGen.HatchGen_IntersectionPoint_SetStateBefore(self, *args)


    def StateAfter(self, *args) -> "TopAbs_State":
        """
        * Returns the transition state after of the intersection.
        	:rtype: TopAbs_State
        """
        return _HatchGen.HatchGen_IntersectionPoint_StateAfter(self, *args)


    def StateBefore(self, *args) -> "TopAbs_State":
        """
        * Returns the transition state before the intersection.
        	:rtype: TopAbs_State
        """
        return _HatchGen.HatchGen_IntersectionPoint_StateBefore(self, *args)


    __repr__ = _dumps_object

HatchGen_IntersectionPoint.Dump = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_Dump, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.Index = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_Index, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.Parameter = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_Parameter, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.Position = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_Position, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SegmentBeginning = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SegmentBeginning, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SegmentEnd = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SegmentEnd, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetIndex = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetIndex, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetParameter = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetParameter, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetPosition = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetPosition, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetSegmentBeginning = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetSegmentBeginning, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetSegmentEnd = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetSegmentEnd, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetStateAfter = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetStateAfter, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.SetStateBefore = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_SetStateBefore, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.StateAfter = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_StateAfter, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint.StateBefore = new_instancemethod(_HatchGen.HatchGen_IntersectionPoint_StateBefore, None, HatchGen_IntersectionPoint)
HatchGen_IntersectionPoint_swigregister = _HatchGen.HatchGen_IntersectionPoint_swigregister
HatchGen_IntersectionPoint_swigregister(HatchGen_IntersectionPoint)

class HatchGen_PointOnElement(HatchGen_IntersectionPoint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * ---Purpose; Creates an empty point on element
        	:rtype: None
        * Creates a point from an other.
        	:param Point:
        	:type Point: HatchGen_PointOnElement
        	:rtype: None
        * Creates a point from an intersection point.
        	:param Point:
        	:type Point: IntRes2d_IntersectionPoint
        	:rtype: None
        """
        _HatchGen.HatchGen_PointOnElement_swiginit(self, _HatchGen.new_HatchGen_PointOnElement(*args))

    def IntersectionType(self, *args) -> "HatchGen_IntersectionType":
        """
        * Returns the intersection type at this point.
        	:rtype: HatchGen_IntersectionType
        """
        return _HatchGen.HatchGen_PointOnElement_IntersectionType(self, *args)


    def IsDifferent(self, *args) -> "Standard_Boolean":
        """
        * Tests if the point is different from an other.
        	:param Point:
        	:type Point: HatchGen_PointOnElement
        	:param Confusion:
        	:type Confusion: float
        	:rtype: bool
        """
        return _HatchGen.HatchGen_PointOnElement_IsDifferent(self, *args)


    def IsIdentical(self, *args) -> "Standard_Boolean":
        """
        * Tests if the point is identical to an other. That is to say : P1.myIndex = P2.myIndex Abs (P1.myParam - P2.myParam) <= Confusion P1.myPosit = P2.myPosit P1.myBefore = P2.myBefore P1.myAfter = P2.myAfter P1.mySegBeg = P2.mySegBeg P1.mySegEnd = P2.mySegEnd P1.myType = P2.myType
        	:param Point:
        	:type Point: HatchGen_PointOnElement
        	:param Confusion:
        	:type Confusion: float
        	:rtype: bool
        """
        return _HatchGen.HatchGen_PointOnElement_IsIdentical(self, *args)


    def SetIntersectionType(self, *args) -> "void":
        """
        * Sets the intersection type at this point.
        	:param Type:
        	:type Type: HatchGen_IntersectionType
        	:rtype: None
        """
        return _HatchGen.HatchGen_PointOnElement_SetIntersectionType(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HatchGen.delete_HatchGen_PointOnElement
HatchGen_PointOnElement.IntersectionType = new_instancemethod(_HatchGen.HatchGen_PointOnElement_IntersectionType, None, HatchGen_PointOnElement)
HatchGen_PointOnElement.IsDifferent = new_instancemethod(_HatchGen.HatchGen_PointOnElement_IsDifferent, None, HatchGen_PointOnElement)
HatchGen_PointOnElement.IsIdentical = new_instancemethod(_HatchGen.HatchGen_PointOnElement_IsIdentical, None, HatchGen_PointOnElement)
HatchGen_PointOnElement.SetIntersectionType = new_instancemethod(_HatchGen.HatchGen_PointOnElement_SetIntersectionType, None, HatchGen_PointOnElement)
HatchGen_PointOnElement_swigregister = _HatchGen.HatchGen_PointOnElement_swigregister
HatchGen_PointOnElement_swigregister(HatchGen_PointOnElement)

class HatchGen_PointOnHatching(HatchGen_IntersectionPoint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddPoint(self, *args) -> "void":
        """
        * Adds a point on element to the point.
        	:param Point:
        	:type Point: HatchGen_PointOnElement
        	:param Confusion:
        	:type Confusion: float
        	:rtype: None
        """
        return _HatchGen.HatchGen_PointOnHatching_AddPoint(self, *args)


    def ClrPoints(self, *args) -> "void":
        """
        * Removes all the points on element of the point.
        	:rtype: None
        """
        return _HatchGen.HatchGen_PointOnHatching_ClrPoints(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty point.
        	:rtype: None
        * Creates a point from an other.
        	:param Point:
        	:type Point: HatchGen_PointOnHatching
        	:rtype: None
        * Creates a point from an intersection point.
        	:param Point:
        	:type Point: IntRes2d_IntersectionPoint
        	:rtype: None
        """
        _HatchGen.HatchGen_PointOnHatching_swiginit(self, _HatchGen.new_HatchGen_PointOnHatching(*args))

    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        * Tests if the point is equal to an other. A point on hatching P1 is said to be equal to an other P2 if : | P2.myParam - P1.myParam | <= Confusion
        	:param Point:
        	:type Point: HatchGen_PointOnHatching
        	:param Confusion:
        	:type Confusion: float
        	:rtype: bool
        """
        return _HatchGen.HatchGen_PointOnHatching_IsEqual(self, *args)


    def IsGreater(self, *args) -> "Standard_Boolean":
        """
        * Tests if the point is greater than an other. A point on hatching P1 is said to be greater than an other P2 if : P1.myParam - P2.myParam > Confusion
        	:param Point:
        	:type Point: HatchGen_PointOnHatching
        	:param Confusion:
        	:type Confusion: float
        	:rtype: bool
        """
        return _HatchGen.HatchGen_PointOnHatching_IsGreater(self, *args)


    def IsLower(self, *args) -> "Standard_Boolean":
        """
        * Tests if the point is lower than an other. A point on hatching P1 is said to be lower than an other P2 if : P2.myParam - P1.myParam > Confusion
        	:param Point:
        	:type Point: HatchGen_PointOnHatching
        	:param Confusion:
        	:type Confusion: float
        	:rtype: bool
        """
        return _HatchGen.HatchGen_PointOnHatching_IsLower(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of elements intersecting the hatching at this point.
        	:rtype: int
        """
        return _HatchGen.HatchGen_PointOnHatching_NbPoints(self, *args)


    def Point(self, *args) -> "HatchGen_PointOnElement const &":
        """
        * Returns the Index-th point on element of the point. The exception OutOfRange is raised if Index > NbPoints.
        	:param Index:
        	:type Index: int
        	:rtype: HatchGen_PointOnElement
        """
        return _HatchGen.HatchGen_PointOnHatching_Point(self, *args)


    def RemPoint(self, *args) -> "void":
        """
        * Removes the Index-th point on element of the point. The exception OutOfRange is raised if Index > NbPoints.
        	:param Index:
        	:type Index: int
        	:rtype: None
        """
        return _HatchGen.HatchGen_PointOnHatching_RemPoint(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HatchGen.delete_HatchGen_PointOnHatching
HatchGen_PointOnHatching.AddPoint = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_AddPoint, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.ClrPoints = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_ClrPoints, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.IsEqual = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_IsEqual, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.IsGreater = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_IsGreater, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.IsLower = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_IsLower, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.NbPoints = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_NbPoints, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.Point = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_Point, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching.RemPoint = new_instancemethod(_HatchGen.HatchGen_PointOnHatching_RemPoint, None, HatchGen_PointOnHatching)
HatchGen_PointOnHatching_swigregister = _HatchGen.HatchGen_PointOnHatching_swigregister
HatchGen_PointOnHatching_swigregister(HatchGen_PointOnHatching)



