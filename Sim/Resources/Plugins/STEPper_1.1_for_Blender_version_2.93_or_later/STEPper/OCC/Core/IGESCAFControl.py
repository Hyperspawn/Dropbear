# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IGESCAFControl module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_igescafcontrol.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IGESCAFControl.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESCAFControl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESCAFControl')
    _IGESCAFControl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESCAFControl', [dirname(__file__)])
        except ImportError:
            import _IGESCAFControl
            return _IGESCAFControl
        try:
            _mod = imp.load_module('_IGESCAFControl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESCAFControl = swig_import_helper()
    del swig_import_helper
else:
    import _IGESCAFControl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESCAFControl.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IGESCAFControl.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IGESCAFControl.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IGESCAFControl.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IGESCAFControl.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IGESCAFControl.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IGESCAFControl.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IGESCAFControl.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IGESCAFControl.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IGESCAFControl.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IGESCAFControl.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IGESCAFControl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IGESCAFControl.process_exception(error, method_name, class_name)
process_exception = _IGESCAFControl.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Quantity
import OCC.Core.TCollection
import OCC.Core.IGESControl
import OCC.Core.Transfer
import OCC.Core.Interface
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.IGESToBRep
import OCC.Core.IGESData
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.TopTools
import OCC.Core.Geom2d
import OCC.Core.XSControl
import OCC.Core.IFSelect
import OCC.Core.TDocStd
import OCC.Core.TDF
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
class igescafcontrol(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DecodeColor(*args) -> "Quantity_Color":
        """
        * Provides a tool for writing IGES file Converts IGES color index to CASCADE color
        	:param col:
        	:type col: int
        	:rtype: Quantity_Color
        """
        return _IGESCAFControl.igescafcontrol_DecodeColor(*args)

    DecodeColor = staticmethod(DecodeColor)

    def EncodeColor(*args) -> "Standard_Integer":
        """
        * Tries to Convert CASCADE color to IGES color index If no corresponding color defined in IGES, returns 0
        	:param col:
        	:type col: Quantity_Color
        	:rtype: int
        """
        return _IGESCAFControl.igescafcontrol_EncodeColor(*args)

    EncodeColor = staticmethod(EncodeColor)

    __repr__ = _dumps_object


    def __init__(self):
        _IGESCAFControl.igescafcontrol_swiginit(self, _IGESCAFControl.new_igescafcontrol())
    __swig_destroy__ = _IGESCAFControl.delete_igescafcontrol
igescafcontrol_swigregister = _IGESCAFControl.igescafcontrol_swigregister
igescafcontrol_swigregister(igescafcontrol)

def igescafcontrol_DecodeColor(*args) -> "Quantity_Color":
    """
    * Provides a tool for writing IGES file Converts IGES color index to CASCADE color
    	:param col:
    	:type col: int
    	:rtype: Quantity_Color
    """
    return _IGESCAFControl.igescafcontrol_DecodeColor(*args)

def igescafcontrol_EncodeColor(*args) -> "Standard_Integer":
    """
    * Tries to Convert CASCADE color to IGES color index If no corresponding color defined in IGES, returns 0
    	:param col:
    	:type col: Quantity_Color
    	:rtype: int
    """
    return _IGESCAFControl.igescafcontrol_EncodeColor(*args)

class IGESCAFControl_Reader(OCC.Core.IGESControl.IGESControl_Reader):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetColorMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _IGESCAFControl.IGESCAFControl_Reader_GetColorMode(self, *args)


    def GetLayerMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _IGESCAFControl.IGESCAFControl_Reader_GetLayerMode(self, *args)


    def GetNameMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _IGESCAFControl.IGESCAFControl_Reader_GetNameMode(self, *args)


    def __init__(self, *args):
        """
        * Creates a reader with an empty IGES model and sets ColorMode, LayerMode and NameMode to Standard_True.
        	:rtype: None
        * Creates a reader tool and attaches it to an already existing Session Clears the session if it was not yet set for IGES
        	:param theWS:
        	:type theWS: XSControl_WorkSession
        	:param FromScratch: default value is Standard_True
        	:type FromScratch: bool
        	:rtype: None
        """
        _IGESCAFControl.IGESCAFControl_Reader_swiginit(self, _IGESCAFControl.new_IGESCAFControl_Reader(*args))

    def Perform(self, *args) -> "Standard_Boolean":
        """
        :param theFileName:
        	:type theFileName: TCollection_AsciiString
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:rtype: bool
        * Translate IGES file given by filename into the document Return True if succeeded, and False in case of fail
        	:param theFileName:
        	:type theFileName: char *
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:rtype: bool
        """
        return _IGESCAFControl.IGESCAFControl_Reader_Perform(self, *args)


    def SetColorMode(self, *args) -> "void":
        """
        * Set ColorMode for indicate read Colors or not.
        	:param theMode:
        	:type theMode: bool
        	:rtype: None
        """
        return _IGESCAFControl.IGESCAFControl_Reader_SetColorMode(self, *args)


    def SetLayerMode(self, *args) -> "void":
        """
        * Set LayerMode for indicate read Layers or not.
        	:param theMode:
        	:type theMode: bool
        	:rtype: None
        """
        return _IGESCAFControl.IGESCAFControl_Reader_SetLayerMode(self, *args)


    def SetNameMode(self, *args) -> "void":
        """
        * Set NameMode for indicate read Name or not.
        	:param theMode:
        	:type theMode: bool
        	:rtype: None
        """
        return _IGESCAFControl.IGESCAFControl_Reader_SetNameMode(self, *args)


    def Transfer(self, *args) -> "Standard_Boolean":
        """
        * Translates currently loaded IGES file into the document Returns True if succeeded, and False in case of fail
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:rtype: bool
        """
        return _IGESCAFControl.IGESCAFControl_Reader_Transfer(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESCAFControl.delete_IGESCAFControl_Reader
IGESCAFControl_Reader.GetColorMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_GetColorMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.GetLayerMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_GetLayerMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.GetNameMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_GetNameMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.Perform = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_Perform, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.SetColorMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_SetColorMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.SetLayerMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_SetLayerMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.SetNameMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_SetNameMode, None, IGESCAFControl_Reader)
IGESCAFControl_Reader.Transfer = new_instancemethod(_IGESCAFControl.IGESCAFControl_Reader_Transfer, None, IGESCAFControl_Reader)
IGESCAFControl_Reader_swigregister = _IGESCAFControl.IGESCAFControl_Reader_swigregister
IGESCAFControl_Reader_swigregister(IGESCAFControl_Reader)

class IGESCAFControl_Writer(OCC.Core.IGESControl.IGESControl_Writer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetColorMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _IGESCAFControl.IGESCAFControl_Writer_GetColorMode(self, *args)


    def GetLayerMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _IGESCAFControl.IGESCAFControl_Writer_GetLayerMode(self, *args)


    def GetNameMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _IGESCAFControl.IGESCAFControl_Writer_GetNameMode(self, *args)


    def __init__(self, *args):
        """
        * Creates a writer with an empty IGES model and sets ColorMode, LayerMode and NameMode to Standard_True.
        	:rtype: None
        * Creates a reader tool and attaches it to an already existing Session Clears the session if it was not yet set for IGES
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:param scratch: default value is Standard_True
        	:type scratch: bool
        	:rtype: None
        """
        _IGESCAFControl.IGESCAFControl_Writer_swiginit(self, _IGESCAFControl.new_IGESCAFControl_Writer(*args))

    def Perform(self, *args) -> "Standard_Boolean":
        """
        :param doc:
        	:type doc: TDocStd_Document
        	:param filename:
        	:type filename: TCollection_AsciiString
        	:rtype: bool
        * Transfers a document and writes it to a IGES file Returns True if translation is OK
        	:param doc:
        	:type doc: TDocStd_Document
        	:param filename:
        	:type filename: char *
        	:rtype: bool
        """
        return _IGESCAFControl.IGESCAFControl_Writer_Perform(self, *args)


    def SetColorMode(self, *args) -> "void":
        """
        * Set ColorMode for indicate write Colors or not.
        	:param colormode:
        	:type colormode: bool
        	:rtype: None
        """
        return _IGESCAFControl.IGESCAFControl_Writer_SetColorMode(self, *args)


    def SetLayerMode(self, *args) -> "void":
        """
        * Set LayerMode for indicate write Layers or not.
        	:param layermode:
        	:type layermode: bool
        	:rtype: None
        """
        return _IGESCAFControl.IGESCAFControl_Writer_SetLayerMode(self, *args)


    def SetNameMode(self, *args) -> "void":
        """
        * Set NameMode for indicate write Name or not.
        	:param namemode:
        	:type namemode: bool
        	:rtype: None
        """
        return _IGESCAFControl.IGESCAFControl_Writer_SetNameMode(self, *args)


    def Transfer(self, *args) -> "Standard_Boolean":
        """
        * Transfers a document to a IGES model Returns True if translation is OK
        	:param doc:
        	:type doc: TDocStd_Document
        	:rtype: bool
        * Transfers labels to a IGES model Returns True if translation is OK
        	:param labels:
        	:type labels: TDF_LabelSequence
        	:rtype: bool
        * Transfers label to a IGES model Returns True if translation is OK
        	:param label:
        	:type label: TDF_Label
        	:rtype: bool
        """
        return _IGESCAFControl.IGESCAFControl_Writer_Transfer(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESCAFControl.delete_IGESCAFControl_Writer
IGESCAFControl_Writer.GetColorMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_GetColorMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.GetLayerMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_GetLayerMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.GetNameMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_GetNameMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.Perform = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_Perform, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.SetColorMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_SetColorMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.SetLayerMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_SetLayerMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.SetNameMode = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_SetNameMode, None, IGESCAFControl_Writer)
IGESCAFControl_Writer.Transfer = new_instancemethod(_IGESCAFControl.IGESCAFControl_Writer_Transfer, None, IGESCAFControl_Writer)
IGESCAFControl_Writer_swigregister = _IGESCAFControl.IGESCAFControl_Writer_swigregister
IGESCAFControl_Writer_swigregister(IGESCAFControl_Writer)



