# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IGESControl module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_igescontrol.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IGESControl.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESControl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESControl')
    _IGESControl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESControl', [dirname(__file__)])
        except ImportError:
            import _IGESControl
            return _IGESControl
        try:
            _mod = imp.load_module('_IGESControl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESControl = swig_import_helper()
    del swig_import_helper
else:
    import _IGESControl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESControl.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IGESControl.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IGESControl.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IGESControl.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IGESControl.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IGESControl.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IGESControl.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IGESControl.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IGESControl.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IGESControl.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IGESControl.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IGESControl.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IGESControl.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IGESControl.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IGESControl.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IGESControl.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IGESControl.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IGESControl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IGESControl.process_exception(error, method_name, class_name)
process_exception = _IGESControl.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Transfer
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.IGESToBRep
import OCC.Core.IGESData
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.TopTools
import OCC.Core.Geom2d
import OCC.Core.XSControl
import OCC.Core.IFSelect

def Handle_IGESControl_ActorWrite_Create() -> "opencascade::handle< IGESControl_ActorWrite >":
    return _IGESControl.Handle_IGESControl_ActorWrite_Create()
Handle_IGESControl_ActorWrite_Create = _IGESControl.Handle_IGESControl_ActorWrite_Create

def Handle_IGESControl_ActorWrite_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESControl_ActorWrite >":
    return _IGESControl.Handle_IGESControl_ActorWrite_DownCast(t)
Handle_IGESControl_ActorWrite_DownCast = _IGESControl.Handle_IGESControl_ActorWrite_DownCast

def Handle_IGESControl_ActorWrite_IsNull(t: 'opencascade::handle< IGESControl_ActorWrite > const &') -> "bool":
    return _IGESControl.Handle_IGESControl_ActorWrite_IsNull(t)
Handle_IGESControl_ActorWrite_IsNull = _IGESControl.Handle_IGESControl_ActorWrite_IsNull

def Handle_IGESControl_AlgoContainer_Create() -> "opencascade::handle< IGESControl_AlgoContainer >":
    return _IGESControl.Handle_IGESControl_AlgoContainer_Create()
Handle_IGESControl_AlgoContainer_Create = _IGESControl.Handle_IGESControl_AlgoContainer_Create

def Handle_IGESControl_AlgoContainer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESControl_AlgoContainer >":
    return _IGESControl.Handle_IGESControl_AlgoContainer_DownCast(t)
Handle_IGESControl_AlgoContainer_DownCast = _IGESControl.Handle_IGESControl_AlgoContainer_DownCast

def Handle_IGESControl_AlgoContainer_IsNull(t: 'opencascade::handle< IGESControl_AlgoContainer > const &') -> "bool":
    return _IGESControl.Handle_IGESControl_AlgoContainer_IsNull(t)
Handle_IGESControl_AlgoContainer_IsNull = _IGESControl.Handle_IGESControl_AlgoContainer_IsNull

def Handle_IGESControl_Controller_Create() -> "opencascade::handle< IGESControl_Controller >":
    return _IGESControl.Handle_IGESControl_Controller_Create()
Handle_IGESControl_Controller_Create = _IGESControl.Handle_IGESControl_Controller_Create

def Handle_IGESControl_Controller_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESControl_Controller >":
    return _IGESControl.Handle_IGESControl_Controller_DownCast(t)
Handle_IGESControl_Controller_DownCast = _IGESControl.Handle_IGESControl_Controller_DownCast

def Handle_IGESControl_Controller_IsNull(t: 'opencascade::handle< IGESControl_Controller > const &') -> "bool":
    return _IGESControl.Handle_IGESControl_Controller_IsNull(t)
Handle_IGESControl_Controller_IsNull = _IGESControl.Handle_IGESControl_Controller_IsNull

def Handle_IGESControl_IGESBoundary_Create() -> "opencascade::handle< IGESControl_IGESBoundary >":
    return _IGESControl.Handle_IGESControl_IGESBoundary_Create()
Handle_IGESControl_IGESBoundary_Create = _IGESControl.Handle_IGESControl_IGESBoundary_Create

def Handle_IGESControl_IGESBoundary_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESControl_IGESBoundary >":
    return _IGESControl.Handle_IGESControl_IGESBoundary_DownCast(t)
Handle_IGESControl_IGESBoundary_DownCast = _IGESControl.Handle_IGESControl_IGESBoundary_DownCast

def Handle_IGESControl_IGESBoundary_IsNull(t: 'opencascade::handle< IGESControl_IGESBoundary > const &') -> "bool":
    return _IGESControl.Handle_IGESControl_IGESBoundary_IsNull(t)
Handle_IGESControl_IGESBoundary_IsNull = _IGESControl.Handle_IGESControl_IGESBoundary_IsNull

def Handle_IGESControl_ToolContainer_Create() -> "opencascade::handle< IGESControl_ToolContainer >":
    return _IGESControl.Handle_IGESControl_ToolContainer_Create()
Handle_IGESControl_ToolContainer_Create = _IGESControl.Handle_IGESControl_ToolContainer_Create

def Handle_IGESControl_ToolContainer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESControl_ToolContainer >":
    return _IGESControl.Handle_IGESControl_ToolContainer_DownCast(t)
Handle_IGESControl_ToolContainer_DownCast = _IGESControl.Handle_IGESControl_ToolContainer_DownCast

def Handle_IGESControl_ToolContainer_IsNull(t: 'opencascade::handle< IGESControl_ToolContainer > const &') -> "bool":
    return _IGESControl.Handle_IGESControl_ToolContainer_IsNull(t)
Handle_IGESControl_ToolContainer_IsNull = _IGESControl.Handle_IGESControl_ToolContainer_IsNull
class IGESControl_ActorWrite(OCC.Core.Transfer.Transfer_ActorOfFinderProcess):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _IGESControl.IGESControl_ActorWrite_swiginit(self, _IGESControl.new_IGESControl_ActorWrite(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_ActorWrite_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_ActorWrite
IGESControl_ActorWrite_swigregister = _IGESControl.IGESControl_ActorWrite_swigregister
IGESControl_ActorWrite_swigregister(IGESControl_ActorWrite)

class IGESControl_AlgoContainer(OCC.Core.IGESToBRep.IGESToBRep_AlgoContainer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _IGESControl.IGESControl_AlgoContainer_swiginit(self, _IGESControl.new_IGESControl_AlgoContainer(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_AlgoContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_AlgoContainer
IGESControl_AlgoContainer_swigregister = _IGESControl.IGESControl_AlgoContainer_swigregister
IGESControl_AlgoContainer_swigregister(IGESControl_AlgoContainer)

class IGESControl_Controller(OCC.Core.XSControl.XSControl_Controller):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes the use of IGES Norm (the first time) and returns a Controller for IGES-5.1 If <modefnes> is True, sets it to internal FNES format
        	:param modefnes: default value is Standard_False
        	:type modefnes: bool
        	:rtype: None
        """
        _IGESControl.IGESControl_Controller_swiginit(self, _IGESControl.new_IGESControl_Controller(*args))

    def Init(*args) -> "Standard_Boolean":
        """
        * Standard Initialisation. It creates a Controller for IGES and records it to various names, available to select it later Returns True when done, False if could not be done Also, it creates and records an Adaptor for FNES
        	:rtype: bool
        """
        return _IGESControl.IGESControl_Controller_Init(*args)

    Init = staticmethod(Init)


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_Controller_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_Controller
IGESControl_Controller_swigregister = _IGESControl.IGESControl_Controller_swigregister
IGESControl_Controller_swigregister(IGESControl_Controller)

def IGESControl_Controller_Init(*args) -> "Standard_Boolean":
    """
    * Standard Initialisation. It creates a Controller for IGES and records it to various names, available to select it later Returns True when done, False if could not be done Also, it creates and records an Adaptor for FNES
    	:rtype: bool
    """
    return _IGESControl.IGESControl_Controller_Init(*args)

class IGESControl_IGESBoundary(OCC.Core.IGESToBRep.IGESToBRep_IGESBoundary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an object and calls inherited constuctor.
        	:rtype: None
        * Creates an object and calls inherited constuctor.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None
        """
        _IGESControl.IGESControl_IGESBoundary_swiginit(self, _IGESControl.new_IGESControl_IGESBoundary(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_IGESBoundary_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_IGESBoundary
IGESControl_IGESBoundary_swigregister = _IGESControl.IGESControl_IGESBoundary_swigregister
IGESControl_IGESBoundary_swigregister(IGESControl_IGESBoundary)

class IGESControl_Reader(OCC.Core.XSControl.XSControl_Reader):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetReadVisible(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _IGESControl.IGESControl_Reader_GetReadVisible(self, *args)


    def __init__(self, *args):
        """
        * Creates a Reader from scratch
        	:rtype: None
        * Creates a Reader from an already existing Session
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:param scratch: default value is Standard_True
        	:type scratch: bool
        	:rtype: None
        """
        _IGESControl.IGESControl_Reader_swiginit(self, _IGESControl.new_IGESControl_Reader(*args))

    def IGESModel(self, *args) -> "opencascade::handle< IGESData_IGESModel >":
        """
        * Returns the model as a IGESModel. It can then be consulted (header, product)
        	:rtype: opencascade::handle<IGESData_IGESModel>
        """
        return _IGESControl.IGESControl_Reader_IGESModel(self, *args)


    def PrintTransferInfo(self, *args) -> "void":
        """
        * Prints Statistics and check list for Transfer
        	:param failwarn:
        	:type failwarn: IFSelect_PrintFail
        	:param mode:
        	:type mode: IFSelect_PrintCount
        	:rtype: None
        """
        return _IGESControl.IGESControl_Reader_PrintTransferInfo(self, *args)


    def SetReadVisible(self, *args) -> "void":
        """
        * Set the transion of ALL Roots (if theReadOnlyVisible is False) or of Visible Roots (if theReadOnlyVisible is True)
        	:param ReadRoot:
        	:type ReadRoot: bool
        	:rtype: None
        """
        return _IGESControl.IGESControl_Reader_SetReadVisible(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_Reader
IGESControl_Reader.GetReadVisible = new_instancemethod(_IGESControl.IGESControl_Reader_GetReadVisible, None, IGESControl_Reader)
IGESControl_Reader.IGESModel = new_instancemethod(_IGESControl.IGESControl_Reader_IGESModel, None, IGESControl_Reader)
IGESControl_Reader.PrintTransferInfo = new_instancemethod(_IGESControl.IGESControl_Reader_PrintTransferInfo, None, IGESControl_Reader)
IGESControl_Reader.SetReadVisible = new_instancemethod(_IGESControl.IGESControl_Reader_SetReadVisible, None, IGESControl_Reader)
IGESControl_Reader_swigregister = _IGESControl.IGESControl_Reader_swigregister
IGESControl_Reader_swigregister(IGESControl_Reader)

class IGESControl_ToolContainer(OCC.Core.IGESToBRep.IGESToBRep_ToolContainer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _IGESControl.IGESControl_ToolContainer_swiginit(self, _IGESControl.new_IGESControl_ToolContainer(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_ToolContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_ToolContainer
IGESControl_ToolContainer_swigregister = _IGESControl.IGESControl_ToolContainer_swigregister
IGESControl_ToolContainer_swigregister(IGESControl_ToolContainer)

class IGESControl_Writer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddEntity(self, *args) -> "Standard_Boolean":
        """
        * Adds an IGES entity (and the ones it references) to the model
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESControl.IGESControl_Writer_AddEntity(self, *args)


    def AddGeom(self, *args) -> "Standard_Boolean":
        """
        * Translates a Geometry (Surface or Curve) to IGES Entities and adds them to the model Returns True if done, False if geom is neither a Surface or a Curve suitable for IGES or is null
        	:param geom:
        	:type geom: Standard_Transient
        	:rtype: bool
        """
        return _IGESControl.IGESControl_Writer_AddGeom(self, *args)


    def AddShape(self, *args) -> "Standard_Boolean":
        """
        * Translates a Shape to IGES Entities and adds them to the model Returns True if done, False if Shape not suitable for IGES or null
        	:param sh:
        	:type sh: TopoDS_Shape
        	:rtype: bool
        """
        return _IGESControl.IGESControl_Writer_AddShape(self, *args)


    def ComputeModel(self, *args) -> "void":
        """
        * Computes the entities found in the model, which is ready to be written. This contrasts with the default computation of headers only.
        	:rtype: None
        """
        return _IGESControl.IGESControl_Writer_ComputeModel(self, *args)


    def __init__(self, *args):
        """
        * Creates a writer object with the default unit (millimeters) and write mode (Face). IGESControl_Writer (const Standard_CString unit, const Standard_Integer modecr = 0);
        	:rtype: None
        * Creates a writer with given values for units and for write mode. unit may be any unit that is accepted by the IGES standard. By default, it is the millimeter. modecr defines the write mode and may be: - 0: Faces (default) - 1: BRep.
        	:param unit:
        	:type unit: char *
        	:param modecr: default value is 0
        	:type modecr: int
        	:rtype: None
        * Creates a writer object with the prepared IGES model model in write mode. modecr defines the write mode and may be: - 0: Faces (default) - 1: BRep.
        	:param model:
        	:type model: IGESData_IGESModel
        	:param modecr: default value is 0
        	:type modecr: int
        	:rtype: None
        """
        _IGESControl.IGESControl_Writer_swiginit(self, _IGESControl.new_IGESControl_Writer(*args))

    def Model(self, *args) -> "opencascade::handle< IGESData_IGESModel > const &":
        """
        * Returns the IGES model to be written in output.
        	:rtype: opencascade::handle<IGESData_IGESModel>
        """
        return _IGESControl.IGESControl_Writer_Model(self, *args)


    def SetTransferProcess(self, *args) -> "void":
        """
        * Returns/Sets the TransferProcess : it contains final results and if some, check messages
        	:param TP:
        	:type TP: Transfer_FinderProcess
        	:rtype: None
        """
        return _IGESControl.IGESControl_Writer_SetTransferProcess(self, *args)


    def TransferProcess(self, *args) -> "opencascade::handle< Transfer_FinderProcess > const &":
        """:rtype: opencascade::handle<Transfer_FinderProcess>"""
        return _IGESControl.IGESControl_Writer_TransferProcess(self, *args)


    def Write(self, *args) -> "Standard_Boolean":
        """
        * Computes then writes the model to an OStream Returns True when done, false in case of error
        	:param S:
        	:type S: Standard_OStream
        	:param fnes: default value is Standard_False
        	:type fnes: bool
        	:rtype: bool
        * Prepares and writes an IGES model either to an OStream, S or to a file name,CString. Returns True if the operation was performed correctly and False if an error occurred (for instance, if the processor could not create the file).
        	:param file:
        	:type file: char *
        	:param fnes: default value is Standard_False
        	:type fnes: bool
        	:rtype: bool
        """
        return _IGESControl.IGESControl_Writer_Write(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_Writer
IGESControl_Writer.AddEntity = new_instancemethod(_IGESControl.IGESControl_Writer_AddEntity, None, IGESControl_Writer)
IGESControl_Writer.AddGeom = new_instancemethod(_IGESControl.IGESControl_Writer_AddGeom, None, IGESControl_Writer)
IGESControl_Writer.AddShape = new_instancemethod(_IGESControl.IGESControl_Writer_AddShape, None, IGESControl_Writer)
IGESControl_Writer.ComputeModel = new_instancemethod(_IGESControl.IGESControl_Writer_ComputeModel, None, IGESControl_Writer)
IGESControl_Writer.Model = new_instancemethod(_IGESControl.IGESControl_Writer_Model, None, IGESControl_Writer)
IGESControl_Writer.SetTransferProcess = new_instancemethod(_IGESControl.IGESControl_Writer_SetTransferProcess, None, IGESControl_Writer)
IGESControl_Writer.TransferProcess = new_instancemethod(_IGESControl.IGESControl_Writer_TransferProcess, None, IGESControl_Writer)
IGESControl_Writer.Write = new_instancemethod(_IGESControl.IGESControl_Writer_Write, None, IGESControl_Writer)
IGESControl_Writer_swigregister = _IGESControl.IGESControl_Writer_swigregister
IGESControl_Writer_swigregister(IGESControl_Writer)



