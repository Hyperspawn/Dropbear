# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IGESToBRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_igestobrep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IGESToBRep.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESToBRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESToBRep')
    _IGESToBRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESToBRep', [dirname(__file__)])
        except ImportError:
            import _IGESToBRep
            return _IGESToBRep
        try:
            _mod = imp.load_module('_IGESToBRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESToBRep = swig_import_helper()
    del swig_import_helper
else:
    import _IGESToBRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESToBRep.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IGESToBRep.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IGESToBRep.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IGESToBRep.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IGESToBRep.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IGESToBRep.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IGESToBRep.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IGESToBRep.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IGESToBRep.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IGESToBRep.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IGESToBRep.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IGESToBRep.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IGESToBRep.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IGESToBRep.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IGESToBRep.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IGESToBRep.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IGESToBRep.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IGESToBRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IGESToBRep.process_exception(error, method_name, class_name)
process_exception = _IGESToBRep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.IGESData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.Transfer
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.TopTools
import OCC.Core.Geom2d

def Handle_IGESToBRep_Actor_Create() -> "opencascade::handle< IGESToBRep_Actor >":
    return _IGESToBRep.Handle_IGESToBRep_Actor_Create()
Handle_IGESToBRep_Actor_Create = _IGESToBRep.Handle_IGESToBRep_Actor_Create

def Handle_IGESToBRep_Actor_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESToBRep_Actor >":
    return _IGESToBRep.Handle_IGESToBRep_Actor_DownCast(t)
Handle_IGESToBRep_Actor_DownCast = _IGESToBRep.Handle_IGESToBRep_Actor_DownCast

def Handle_IGESToBRep_Actor_IsNull(t: 'opencascade::handle< IGESToBRep_Actor > const &') -> "bool":
    return _IGESToBRep.Handle_IGESToBRep_Actor_IsNull(t)
Handle_IGESToBRep_Actor_IsNull = _IGESToBRep.Handle_IGESToBRep_Actor_IsNull

def Handle_IGESToBRep_AlgoContainer_Create() -> "opencascade::handle< IGESToBRep_AlgoContainer >":
    return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_Create()
Handle_IGESToBRep_AlgoContainer_Create = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_Create

def Handle_IGESToBRep_AlgoContainer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESToBRep_AlgoContainer >":
    return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_DownCast(t)
Handle_IGESToBRep_AlgoContainer_DownCast = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_DownCast

def Handle_IGESToBRep_AlgoContainer_IsNull(t: 'opencascade::handle< IGESToBRep_AlgoContainer > const &') -> "bool":
    return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_IsNull(t)
Handle_IGESToBRep_AlgoContainer_IsNull = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_IsNull

def Handle_IGESToBRep_IGESBoundary_Create() -> "opencascade::handle< IGESToBRep_IGESBoundary >":
    return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_Create()
Handle_IGESToBRep_IGESBoundary_Create = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_Create

def Handle_IGESToBRep_IGESBoundary_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESToBRep_IGESBoundary >":
    return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_DownCast(t)
Handle_IGESToBRep_IGESBoundary_DownCast = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_DownCast

def Handle_IGESToBRep_IGESBoundary_IsNull(t: 'opencascade::handle< IGESToBRep_IGESBoundary > const &') -> "bool":
    return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_IsNull(t)
Handle_IGESToBRep_IGESBoundary_IsNull = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_IsNull

def Handle_IGESToBRep_ToolContainer_Create() -> "opencascade::handle< IGESToBRep_ToolContainer >":
    return _IGESToBRep.Handle_IGESToBRep_ToolContainer_Create()
Handle_IGESToBRep_ToolContainer_Create = _IGESToBRep.Handle_IGESToBRep_ToolContainer_Create

def Handle_IGESToBRep_ToolContainer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESToBRep_ToolContainer >":
    return _IGESToBRep.Handle_IGESToBRep_ToolContainer_DownCast(t)
Handle_IGESToBRep_ToolContainer_DownCast = _IGESToBRep.Handle_IGESToBRep_ToolContainer_DownCast

def Handle_IGESToBRep_ToolContainer_IsNull(t: 'opencascade::handle< IGESToBRep_ToolContainer > const &') -> "bool":
    return _IGESToBRep.Handle_IGESToBRep_ToolContainer_IsNull(t)
Handle_IGESToBRep_ToolContainer_IsNull = _IGESToBRep.Handle_IGESToBRep_ToolContainer_IsNull
class igestobrep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AlgoContainer(*args) -> "opencascade::handle< IGESToBRep_AlgoContainer >":
        """
        * Returns default AlgoContainer
        	:rtype: opencascade::handle<IGESToBRep_AlgoContainer>
        """
        return _IGESToBRep.igestobrep_AlgoContainer(*args)

    AlgoContainer = staticmethod(AlgoContainer)

    def IGESCurveToSequenceOfIGESCurve(*args) -> "Standard_Integer":
        """
        :param curve:
        	:type curve: IGESData_IGESEntity
        	:param sequence:
        	:type sequence: TColStd_HSequenceOfTransient
        	:rtype: int
        """
        return _IGESToBRep.igestobrep_IGESCurveToSequenceOfIGESCurve(*args)

    IGESCurveToSequenceOfIGESCurve = staticmethod(IGESCurveToSequenceOfIGESCurve)

    def Init(*args) -> "void":
        """
        * Creates and initializes default AlgoContainer.
        	:rtype: void
        """
        return _IGESToBRep.igestobrep_Init(*args)

    Init = staticmethod(Init)

    def IsBRepEntity(*args) -> "Standard_Boolean":
        """
        * Return True if the IGESEntity can be transfered by TransferBRepEntity. ex: VertexList, EdgeList, Loop, Face, Shell, Manifold Solid BRep Object from IGESSolid : 502, 504, 508, 510, 514, 186.
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESToBRep.igestobrep_IsBRepEntity(*args)

    IsBRepEntity = staticmethod(IsBRepEntity)

    def IsBasicCurve(*args) -> "Standard_Boolean":
        """
        * Return True if the IGESEntity can be transfered by TransferBasicCurve. ex: CircularArc, ConicArc, Line, CopiousData, BSplineCurve, SplineCurve... from IGESGeom : 104,110,112,126
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESToBRep.igestobrep_IsBasicCurve(*args)

    IsBasicCurve = staticmethod(IsBasicCurve)

    def IsBasicSurface(*args) -> "Standard_Boolean":
        """
        * Return True if the IGESEntity can be transfered by TransferBasicSurface. ex: BSplineSurface, SplineSurface... from IGESGeom : 114,128
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESToBRep.igestobrep_IsBasicSurface(*args)

    IsBasicSurface = staticmethod(IsBasicSurface)

    def IsCurveAndSurface(*args) -> "Standard_Boolean":
        """
        * Return True if the IGESEntity can be transfered by TransferCurveAndSurface. ex: All IGESEntity from IGESGeom
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESToBRep.igestobrep_IsCurveAndSurface(*args)

    IsCurveAndSurface = staticmethod(IsCurveAndSurface)

    def IsTopoCurve(*args) -> "Standard_Boolean":
        """
        * Return True if the IGESEntity can be transfered by TransferTopoCurve. ex: all Curves from IGESGeom : all basic curves,102,130,142,144
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESToBRep.igestobrep_IsTopoCurve(*args)

    IsTopoCurve = staticmethod(IsTopoCurve)

    def IsTopoSurface(*args) -> "Standard_Boolean":
        """
        * Return True if the IGESEntity can be transfered by TransferTopoSurface. ex: All Surfaces from IGESGeom : all basic surfaces,108,118,120,122,141,143
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESToBRep.igestobrep_IsTopoSurface(*args)

    IsTopoSurface = staticmethod(IsTopoSurface)

    def SetAlgoContainer(*args) -> "void":
        """
        * Sets default AlgoContainer
        	:param aContainer:
        	:type aContainer: IGESToBRep_AlgoContainer
        	:rtype: void
        """
        return _IGESToBRep.igestobrep_SetAlgoContainer(*args)

    SetAlgoContainer = staticmethod(SetAlgoContainer)

    def TransferPCurve(*args) -> "Standard_Boolean":
        """
        :param fromedge:
        	:type fromedge: TopoDS_Edge
        	:param toedge:
        	:type toedge: TopoDS_Edge
        	:param face:
        	:type face: TopoDS_Face
        	:rtype: bool
        """
        return _IGESToBRep.igestobrep_TransferPCurve(*args)

    TransferPCurve = staticmethod(TransferPCurve)

    __repr__ = _dumps_object


    def __init__(self):
        _IGESToBRep.igestobrep_swiginit(self, _IGESToBRep.new_igestobrep())
    __swig_destroy__ = _IGESToBRep.delete_igestobrep
igestobrep_swigregister = _IGESToBRep.igestobrep_swigregister
igestobrep_swigregister(igestobrep)

def igestobrep_AlgoContainer(*args) -> "opencascade::handle< IGESToBRep_AlgoContainer >":
    """
    * Returns default AlgoContainer
    	:rtype: opencascade::handle<IGESToBRep_AlgoContainer>
    """
    return _IGESToBRep.igestobrep_AlgoContainer(*args)

def igestobrep_IGESCurveToSequenceOfIGESCurve(*args) -> "Standard_Integer":
    """
    :param curve:
    	:type curve: IGESData_IGESEntity
    	:param sequence:
    	:type sequence: TColStd_HSequenceOfTransient
    	:rtype: int
    """
    return _IGESToBRep.igestobrep_IGESCurveToSequenceOfIGESCurve(*args)

def igestobrep_Init(*args) -> "void":
    """
    * Creates and initializes default AlgoContainer.
    	:rtype: void
    """
    return _IGESToBRep.igestobrep_Init(*args)

def igestobrep_IsBRepEntity(*args) -> "Standard_Boolean":
    """
    * Return True if the IGESEntity can be transfered by TransferBRepEntity. ex: VertexList, EdgeList, Loop, Face, Shell, Manifold Solid BRep Object from IGESSolid : 502, 504, 508, 510, 514, 186.
    	:param start:
    	:type start: IGESData_IGESEntity
    	:rtype: bool
    """
    return _IGESToBRep.igestobrep_IsBRepEntity(*args)

def igestobrep_IsBasicCurve(*args) -> "Standard_Boolean":
    """
    * Return True if the IGESEntity can be transfered by TransferBasicCurve. ex: CircularArc, ConicArc, Line, CopiousData, BSplineCurve, SplineCurve... from IGESGeom : 104,110,112,126
    	:param start:
    	:type start: IGESData_IGESEntity
    	:rtype: bool
    """
    return _IGESToBRep.igestobrep_IsBasicCurve(*args)

def igestobrep_IsBasicSurface(*args) -> "Standard_Boolean":
    """
    * Return True if the IGESEntity can be transfered by TransferBasicSurface. ex: BSplineSurface, SplineSurface... from IGESGeom : 114,128
    	:param start:
    	:type start: IGESData_IGESEntity
    	:rtype: bool
    """
    return _IGESToBRep.igestobrep_IsBasicSurface(*args)

def igestobrep_IsCurveAndSurface(*args) -> "Standard_Boolean":
    """
    * Return True if the IGESEntity can be transfered by TransferCurveAndSurface. ex: All IGESEntity from IGESGeom
    	:param start:
    	:type start: IGESData_IGESEntity
    	:rtype: bool
    """
    return _IGESToBRep.igestobrep_IsCurveAndSurface(*args)

def igestobrep_IsTopoCurve(*args) -> "Standard_Boolean":
    """
    * Return True if the IGESEntity can be transfered by TransferTopoCurve. ex: all Curves from IGESGeom : all basic curves,102,130,142,144
    	:param start:
    	:type start: IGESData_IGESEntity
    	:rtype: bool
    """
    return _IGESToBRep.igestobrep_IsTopoCurve(*args)

def igestobrep_IsTopoSurface(*args) -> "Standard_Boolean":
    """
    * Return True if the IGESEntity can be transfered by TransferTopoSurface. ex: All Surfaces from IGESGeom : all basic surfaces,108,118,120,122,141,143
    	:param start:
    	:type start: IGESData_IGESEntity
    	:rtype: bool
    """
    return _IGESToBRep.igestobrep_IsTopoSurface(*args)

def igestobrep_SetAlgoContainer(*args) -> "void":
    """
    * Sets default AlgoContainer
    	:param aContainer:
    	:type aContainer: IGESToBRep_AlgoContainer
    	:rtype: void
    """
    return _IGESToBRep.igestobrep_SetAlgoContainer(*args)

def igestobrep_TransferPCurve(*args) -> "Standard_Boolean":
    """
    :param fromedge:
    	:type fromedge: TopoDS_Edge
    	:param toedge:
    	:type toedge: TopoDS_Edge
    	:param face:
    	:type face: TopoDS_Face
    	:rtype: bool
    """
    return _IGESToBRep.igestobrep_TransferPCurve(*args)

class IGESToBRep_Actor(OCC.Core.Transfer.Transfer_ActorOfTransientProcess):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetContinuity(self, *args) -> "Standard_Integer":
        """
        * Return 'thecontinuity'
        	:rtype: int
        """
        return _IGESToBRep.IGESToBRep_Actor_GetContinuity(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _IGESToBRep.IGESToBRep_Actor_swiginit(self, _IGESToBRep.new_IGESToBRep_Actor(*args))

    def SetContinuity(self, *args) -> "void":
        """
        * ---Purpose By default continuity = 0 if continuity = 1 : try C1 if continuity = 2 : try C2
        	:param continuity: default value is 0
        	:type continuity: int
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_Actor_SetContinuity(self, *args)


    def SetModel(self, *args) -> "void":
        """
        :param model:
        	:type model: Interface_InterfaceModel
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_Actor_SetModel(self, *args)


    def UsedTolerance(self, *args) -> "Standard_Real":
        """
        * Returns the tolerance which was actually used, either from the file or from statics
        	:rtype: float
        """
        return _IGESToBRep.IGESToBRep_Actor_UsedTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_Actor_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_Actor
IGESToBRep_Actor.GetContinuity = new_instancemethod(_IGESToBRep.IGESToBRep_Actor_GetContinuity, None, IGESToBRep_Actor)
IGESToBRep_Actor.SetContinuity = new_instancemethod(_IGESToBRep.IGESToBRep_Actor_SetContinuity, None, IGESToBRep_Actor)
IGESToBRep_Actor.SetModel = new_instancemethod(_IGESToBRep.IGESToBRep_Actor_SetModel, None, IGESToBRep_Actor)
IGESToBRep_Actor.UsedTolerance = new_instancemethod(_IGESToBRep.IGESToBRep_Actor_UsedTolerance, None, IGESToBRep_Actor)
IGESToBRep_Actor_swigregister = _IGESToBRep.IGESToBRep_Actor_swigregister
IGESToBRep_Actor_swigregister(IGESToBRep_Actor)

class IGESToBRep_AlgoContainer(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_AlgoContainer_swiginit(self, _IGESToBRep.new_IGESToBRep_AlgoContainer(*args))

    def SetToolContainer(self, *args) -> "void":
        """
        * Sets ToolContainer
        	:param TC:
        	:type TC: IGESToBRep_ToolContainer
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_AlgoContainer_SetToolContainer(self, *args)


    def ToolContainer(self, *args) -> "opencascade::handle< IGESToBRep_ToolContainer >":
        """
        * Returns ToolContainer
        	:rtype: opencascade::handle<IGESToBRep_ToolContainer>
        """
        return _IGESToBRep.IGESToBRep_AlgoContainer_ToolContainer(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_AlgoContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_AlgoContainer
IGESToBRep_AlgoContainer.SetToolContainer = new_instancemethod(_IGESToBRep.IGESToBRep_AlgoContainer_SetToolContainer, None, IGESToBRep_AlgoContainer)
IGESToBRep_AlgoContainer.ToolContainer = new_instancemethod(_IGESToBRep.IGESToBRep_AlgoContainer_ToolContainer, None, IGESToBRep_AlgoContainer)
IGESToBRep_AlgoContainer_swigregister = _IGESToBRep.IGESToBRep_AlgoContainer_swigregister
IGESToBRep_AlgoContainer_swigregister(IGESToBRep_AlgoContainer)

class IGESToBRep_CurveAndSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddShapeResult(self, *args) -> "void":
        """
        * set in 'myMap' the result of the transfer of the entity of the IGESEntity start ( type VertexList or EdgeList).
        	:param start:
        	:type start: IGESData_IGESEntity
        	:param result:
        	:type result: TopoDS_Shape
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_AddShapeResult(self, *args)


    def GetContinuity(self, *args) -> "Standard_Integer":
        """
        * Returns the value of 'myContinuity'
        	:rtype: int
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetContinuity(self, *args)


    def GetEpsCoeff(self, *args) -> "Standard_Real":
        """
        * Returns the value of 'myEpsCoeff'
        	:rtype: float
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsCoeff(self, *args)


    def GetEpsGeom(self, *args) -> "Standard_Real":
        """
        * Returns the value of 'myEpsGeom'
        	:rtype: float
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsGeom(self, *args)


    def GetEpsilon(self, *args) -> "Standard_Real":
        """
        * Returns the value of 'myEps'
        	:rtype: float
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsilon(self, *args)


    def GetMaxTol(self, *args) -> "Standard_Real":
        """
        * Returns the value of 'myMaxTol'
        	:rtype: float
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetMaxTol(self, *args)


    def GetMinTol(self, *args) -> "Standard_Real":
        """
        * Returns the value of 'myMinTol'
        	:rtype: float
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetMinTol(self, *args)


    def GetModeApprox(self, *args) -> "Standard_Boolean":
        """
        * Returns the value of 'myModeApprox'
        	:rtype: bool
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModeApprox(self, *args)


    def GetModeTransfer(self, *args) -> "Standard_Boolean":
        """
        * Returns the value of 'myModeIsTopo'
        	:rtype: bool
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModeTransfer(self, *args)


    def GetModel(self, *args) -> "opencascade::handle< IGESData_IGESModel >":
        """
        * Returns the value of 'myModel'
        	:rtype: opencascade::handle<IGESData_IGESModel>
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModel(self, *args)


    def GetOptimized(self, *args) -> "Standard_Boolean":
        """
        * Returns the value of 'myContIsOpti'
        	:rtype: bool
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetOptimized(self, *args)


    def GetShapeResult(self, *args) -> "TopoDS_Shape":
        """
        * Returns the result of the transfer of the IGESEntity 'start' contained in 'myMap' . (if HasShapeResult is True).
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: TopoDS_Shape
        * Returns the numth result of the IGESEntity start (type VertexList or EdgeList) in 'myMap'. (if NbShapeResult is not null).
        	:param start:
        	:type start: IGESData_IGESEntity
        	:param num:
        	:type num: int
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetShapeResult(self, *args)


    def GetSurfaceCurve(self, *args) -> "Standard_Integer":
        """
        * Returns the value of ' mySurfaceCurve' 0 = value in file , 2 = kepp 2d and compute 3d 3 = keep 3d and compute 2d
        	:rtype: int
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetSurfaceCurve(self, *args)


    def GetTransferProcess(self, *args) -> "opencascade::handle< Transfer_TransientProcess >":
        """
        * Returns the value of 'myMsgReg'
        	:rtype: opencascade::handle<Transfer_TransientProcess>
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetTransferProcess(self, *args)


    def GetUVResolution(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetUVResolution(self, *args)


    def GetUnitFactor(self, *args) -> "Standard_Real":
        """
        * Returns the value of ' myUnitFactor'
        	:rtype: float
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetUnitFactor(self, *args)


    def HasShapeResult(self, *args) -> "Standard_Boolean":
        """
        * Returns True if start was already treated and has a result in 'myMap' else returns False.
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_HasShapeResult(self, *args)


    def __init__(self, *args):
        """
        * Creates a tool CurveAndSurface ready to run, with epsilons set to 1.E-04, myModeTopo to True, the optimization of the continuity to False.
        	:rtype: None
        * Creates a tool CurveAndSurface ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None
        * Creates a tool CurveAndSurface ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_CurveAndSurface_swiginit(self, _IGESToBRep.new_IGESToBRep_CurveAndSurface(*args))

    def Init(self, *args) -> "void":
        """
        * Initializes the field of the tool CurveAndSurface with default creating values.
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_Init(self, *args)


    def NbShapeResult(self, *args) -> "Standard_Integer":
        """
        * Returns the number of shapes results contained in 'myMap' for the IGESEntity start ( type VertexList or EdgeList).
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: int
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_NbShapeResult(self, *args)


    def SendFail(self, *args) -> "void":
        """
        * Records a new Fail message
        	:param start:
        	:type start: IGESData_IGESEntity
        	:param amsg:
        	:type amsg: Message_Msg
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendFail(self, *args)


    def SendMsg(self, *args) -> "void":
        """
        * Records a new Information message from the definition of a Msg (Original+Value)
        	:param start:
        	:type start: IGESData_IGESEntity
        	:param amsg:
        	:type amsg: Message_Msg
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendMsg(self, *args)


    def SendWarning(self, *args) -> "void":
        """
        * Records a new Warning message
        	:param start:
        	:type start: IGESData_IGESEntity
        	:param amsg:
        	:type amsg: Message_Msg
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendWarning(self, *args)


    def SetContinuity(self, *args) -> "void":
        """
        * Changes the value of 'myContinuity' if continuity = 0 do nothing else if continuity = 1 try C1 if continuity = 2 try C2
        	:param continuity:
        	:type continuity: int
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetContinuity(self, *args)


    def SetEpsCoeff(self, *args) -> "void":
        """
        * Changes the value of 'myEpsCoeff'
        	:param eps:
        	:type eps: float
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsCoeff(self, *args)


    def SetEpsGeom(self, *args) -> "void":
        """
        * Changes the value of 'myEpsGeom'
        	:param eps:
        	:type eps: float
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsGeom(self, *args)


    def SetEpsilon(self, *args) -> "void":
        """
        * Changes the value of 'myEps'
        	:param eps:
        	:type eps: float
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsilon(self, *args)


    def SetMaxTol(self, *args) -> "void":
        """
        * Changes the value of 'myMaxTol'
        	:param maxtol:
        	:type maxtol: float
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetMaxTol(self, *args)


    def SetMinTol(self, *args) -> "void":
        """
        * Changes the value of 'myMinTol'
        	:param mintol:
        	:type mintol: float
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetMinTol(self, *args)


    def SetModeApprox(self, *args) -> "void":
        """
        * Changes the value of 'myModeApprox'
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModeApprox(self, *args)


    def SetModeTransfer(self, *args) -> "void":
        """
        * Changes the value of 'myModeIsTopo'
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModeTransfer(self, *args)


    def SetModel(self, *args) -> "void":
        """
        * Set the value of 'myModel'
        	:param model:
        	:type model: IGESData_IGESModel
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModel(self, *args)


    def SetOptimized(self, *args) -> "void":
        """
        * Changes the value of 'myContIsOpti'
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetOptimized(self, *args)


    def SetShapeResult(self, *args) -> "void":
        """
        * set in 'myMap' the result of the transfer of the IGESEntity 'start'.
        	:param start:
        	:type start: IGESData_IGESEntity
        	:param result:
        	:type result: TopoDS_Shape
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetShapeResult(self, *args)


    def SetSurface(self, *args) -> "void":
        """
        :param theSurface:
        	:type theSurface: Geom_Surface
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetSurface(self, *args)


    def SetSurfaceCurve(self, *args) -> "void":
        """
        * Changes the value of 'mySurfaceCurve'
        	:param ival:
        	:type ival: int
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetSurfaceCurve(self, *args)


    def SetTransferProcess(self, *args) -> "void":
        """
        * Set the value of 'myMsgReg'
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetTransferProcess(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Geom_Surface >":
        """:rtype: opencascade::handle<Geom_Surface>"""
        return _IGESToBRep.IGESToBRep_CurveAndSurface_Surface(self, *args)


    def TransferCurveAndSurface(self, *args) -> "TopoDS_Shape":
        """
        * Returns the result of the transfert of any IGES Curve or Surface Entity. If the transfer has failed, this member return a NullEntity.
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_TransferCurveAndSurface(self, *args)


    def TransferGeometry(self, *args) -> "TopoDS_Shape":
        """
        * Returns the result of the transfert the geometry of any IGESEntity. If the transfer has failed, this member return a NullEntity.
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_TransferGeometry(self, *args)


    def UpdateMinMaxTol(self, *args) -> "void":
        """
        * Sets values of 'myMinTol' and 'myMaxTol' as follows myMaxTol = Max ('read.maxprecision.val', myEpsGeom * myUnitFactor) myMinTol = Precision::Confusion() Remark: This method is automatically invoked each time the values of 'myEpsGeom' or 'myUnitFactor' are changed
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_UpdateMinMaxTol(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_CurveAndSurface
IGESToBRep_CurveAndSurface.AddShapeResult = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_AddShapeResult, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetContinuity = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetContinuity, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetEpsCoeff = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsCoeff, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetEpsGeom = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsGeom, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetEpsilon = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsilon, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetMaxTol = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetMaxTol, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetMinTol = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetMinTol, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetModeApprox = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetModeApprox, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetModeTransfer = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetModeTransfer, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetModel = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetModel, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetOptimized = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetOptimized, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetShapeResult = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetShapeResult, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetSurfaceCurve = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetSurfaceCurve, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetTransferProcess = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetTransferProcess, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetUVResolution = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetUVResolution, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.GetUnitFactor = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_GetUnitFactor, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.HasShapeResult = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_HasShapeResult, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.Init = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_Init, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.NbShapeResult = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_NbShapeResult, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SendFail = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SendFail, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SendMsg = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SendMsg, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SendWarning = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SendWarning, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetContinuity = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetContinuity, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetEpsCoeff = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsCoeff, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetEpsGeom = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsGeom, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetEpsilon = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsilon, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetMaxTol = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetMaxTol, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetMinTol = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetMinTol, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetModeApprox = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetModeApprox, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetModeTransfer = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetModeTransfer, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetModel = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetModel, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetOptimized = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetOptimized, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetShapeResult = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetShapeResult, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetSurface = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetSurface, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetSurfaceCurve = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetSurfaceCurve, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.SetTransferProcess = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_SetTransferProcess, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.Surface = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_Surface, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.TransferCurveAndSurface = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_TransferCurveAndSurface, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.TransferGeometry = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_TransferGeometry, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface.UpdateMinMaxTol = new_instancemethod(_IGESToBRep.IGESToBRep_CurveAndSurface_UpdateMinMaxTol, None, IGESToBRep_CurveAndSurface)
IGESToBRep_CurveAndSurface_swigregister = _IGESToBRep.IGESToBRep_CurveAndSurface_swigregister
IGESToBRep_CurveAndSurface_swigregister(IGESToBRep_CurveAndSurface)

class IGESToBRep_IGESBoundary(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Check(self, *args) -> "void":
        """
        * Checks result of translation of IGES boundary entities (types 141, 142 or 508). Checks consistency of 2D and 3D representations and keeps only one if they are inconsistent. <result>: result of translation (returned by Transfer), <checkclosure>: False for 142 without parent 144 entity, otherwise True, <okCurve3d>, <okCurve2d>: those returned by Transfer.
        	:param result:
        	:type result: bool
        	:param checkclosure:
        	:type checkclosure: bool
        	:param okCurve3d:
        	:type okCurve3d: bool
        	:param okCurve2d:
        	:type okCurve2d: bool
        	:rtype: void
        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Check(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Empty constructor
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_IGESBoundary_swiginit(self, _IGESToBRep.new_IGESToBRep_IGESBoundary(*args))

    def Init(self, *args) -> "void":
        """
        * Inits the object with parameters common for all types of IGES boundaries. <CS>: object to be used for retrieving translation parameters and sending messages, <entity>: boundary entity to be processed, <face>, <trans>, <uFact>: as for IGESToBRep_TopoCurve <filepreference>: preferred representation (2 or 3) given in the IGES file
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:param entity:
        	:type entity: IGESData_IGESEntity
        	:param face:
        	:type face: TopoDS_Face
        	:param trans:
        	:type trans: gp_Trsf2d
        	:param uFact:
        	:type uFact: float
        	:param filepreference:
        	:type filepreference: int
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Init(self, *args)


    def Transfer(self, *args) -> "Standard_Boolean":
        """
        * Translates 141 and 142 entities. Returns True if the curve has been successfully translated, otherwise returns False. <okCurve..>: flags that indicate whether corresponding representation has been successfully translated (must be set to True before first call), <curve3d>: model space curve for 142 and current model space curve for 141, <toreverse3d>: False for 142 and current orientation flag for 141, <curves2d>: 1 parameter space curve for 142 or list of them for current model space curves for 141, <number>: 1 for 142 and rank number of model space curve for 141.
        	:param okCurve:
        	:type okCurve: bool
        	:param okCurve3d:
        	:type okCurve3d: bool
        	:param okCurve2d:
        	:type okCurve2d: bool
        	:param curve3d:
        	:type curve3d: IGESData_IGESEntity
        	:param toreverse3d:
        	:type toreverse3d: bool
        	:param curves2d:
        	:type curves2d: IGESData_HArray1OfIGESEntity
        	:param number:
        	:type number: int
        	:rtype: bool
        * Translates 508 entity. Returns True if the curve has been successfully translated, otherwise returns False. Input object IGESBoundary must be created and initialized before. <okCurve..>: flags that indicate whether corresponding representation has been successfully translated (must be set to True before first call), <curve3d>: result of translation of current edge, <curves2d>: list of parameter space curves for edge, <toreverse2d>: orientation flag of current edge in respect to its model space curve, <number>: rank number of edge, <lsewd>: returns the result of translation of current edge.
        	:param okCurve:
        	:type okCurve: bool
        	:param okCurve3d:
        	:type okCurve3d: bool
        	:param okCurve2d:
        	:type okCurve2d: bool
        	:param curve3d:
        	:type curve3d: ShapeExtend_WireData
        	:param curves2d:
        	:type curves2d: IGESData_HArray1OfIGESEntity
        	:param toreverse2d:
        	:type toreverse2d: bool
        	:param number:
        	:type number: int
        	:param lsewd:
        	:type lsewd: ShapeExtend_WireData
        	:rtype: bool
        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Transfer(self, *args)


    def WireData(self, *args) -> "opencascade::handle< ShapeExtend_WireData >":
        """
        * Returns the resulting wire
        	:rtype: opencascade::handle<ShapeExtend_WireData>
        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData(self, *args)


    def WireData2d(self, *args) -> "opencascade::handle< ShapeExtend_WireData >":
        """
        * Returns the the wire from 2D curves (edges contain pcurves only)
        	:rtype: opencascade::handle<ShapeExtend_WireData>
        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData2d(self, *args)


    def WireData3d(self, *args) -> "opencascade::handle< ShapeExtend_WireData >":
        """
        * Returns the wire from 3D curves (edges contain 3D curves and may contain pcurves)
        	:rtype: opencascade::handle<ShapeExtend_WireData>
        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData3d(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_IGESBoundary_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_IGESBoundary
IGESToBRep_IGESBoundary.Check = new_instancemethod(_IGESToBRep.IGESToBRep_IGESBoundary_Check, None, IGESToBRep_IGESBoundary)
IGESToBRep_IGESBoundary.Init = new_instancemethod(_IGESToBRep.IGESToBRep_IGESBoundary_Init, None, IGESToBRep_IGESBoundary)
IGESToBRep_IGESBoundary.Transfer = new_instancemethod(_IGESToBRep.IGESToBRep_IGESBoundary_Transfer, None, IGESToBRep_IGESBoundary)
IGESToBRep_IGESBoundary.WireData = new_instancemethod(_IGESToBRep.IGESToBRep_IGESBoundary_WireData, None, IGESToBRep_IGESBoundary)
IGESToBRep_IGESBoundary.WireData2d = new_instancemethod(_IGESToBRep.IGESToBRep_IGESBoundary_WireData2d, None, IGESToBRep_IGESBoundary)
IGESToBRep_IGESBoundary.WireData3d = new_instancemethod(_IGESToBRep.IGESToBRep_IGESBoundary_WireData3d, None, IGESToBRep_IGESBoundary)
IGESToBRep_IGESBoundary_swigregister = _IGESToBRep.IGESToBRep_IGESBoundary_swigregister
IGESToBRep_IGESBoundary_swigregister(IGESToBRep_IGESBoundary)

class IGESToBRep_Reader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Actor(self, *args) -> "opencascade::handle< IGESToBRep_Actor >":
        """
        * Returns 'theActor'
        	:rtype: opencascade::handle<IGESToBRep_Actor>
        """
        return _IGESToBRep.IGESToBRep_Reader_Actor(self, *args)


    def Check(self, *args) -> "Standard_Boolean":
        """
        * Checks the IGES file that was loaded into memory. Displays error messages in the default message file if withprint is true. Returns True if no fail message was found and False if there was at least one fail message.
        	:param withprint:
        	:type withprint: bool
        	:rtype: bool
        """
        return _IGESToBRep.IGESToBRep_Reader_Check(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears the results between two translation operations.
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_Reader_Clear(self, *args)


    def __init__(self, *args):
        """
        * Creates a Reader
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_Reader_swiginit(self, _IGESToBRep.new_IGESToBRep_Reader(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the LAST Transfer/TransferRoots was a success
        	:rtype: bool
        """
        return _IGESToBRep.IGESToBRep_Reader_IsDone(self, *args)


    def LoadFile(self, *args) -> "Standard_Integer":
        """
        * Loads a Model from a file.Returns 0 if success. returns 1 if the file could not be opened, returns -1 if an error occurred while the file was being loaded.
        	:param filename:
        	:type filename: char *
        	:rtype: int
        """
        return _IGESToBRep.IGESToBRep_Reader_LoadFile(self, *args)


    def Model(self, *args) -> "opencascade::handle< IGESData_IGESModel >":
        """
        * Returns the Model to be worked on.
        	:rtype: opencascade::handle<IGESData_IGESModel>
        """
        return _IGESToBRep.IGESToBRep_Reader_Model(self, *args)


    def NbShapes(self, *args) -> "Standard_Integer":
        """
        * Returns the number of shapes produced by the translation.
        	:rtype: int
        """
        return _IGESToBRep.IGESToBRep_Reader_NbShapes(self, *args)


    def OneShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns all of the results in a single shape which is: - a null shape if there are no results, - a shape if there is one result, - a compound containing the resulting shapes if there are several.
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_Reader_OneShape(self, *args)


    def SetModel(self, *args) -> "void":
        """
        * Specifies a Model to work on Also clears the result and Done status, sets TransientProcess
        	:param model:
        	:type model: IGESData_IGESModel
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_Reader_SetModel(self, *args)


    def SetTransientProcess(self, *args) -> "void":
        """
        * Allows to set an already defined TransientProcess (to be called after LoadFile or SetModel)
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_Reader_SetTransientProcess(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the num the resulting shape in a translation operation.
        	:param num: default value is 1
        	:type num: int
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_Reader_Shape(self, *args)


    def Transfer(self, *args) -> "Standard_Boolean":
        """
        * Transfers an Entity given its rank in the Model (Root or not) Returns True if it is recognized as Geom-Topol. (But it can have failed : see IsDone)
        	:param num:
        	:type num: int
        	:rtype: bool
        """
        return _IGESToBRep.IGESToBRep_Reader_Transfer(self, *args)


    def TransferRoots(self, *args) -> "void":
        """
        * Translates root entities in an IGES file. Standard_True is the default value and means that only visible root entities are translated. Standard_False translates all of the roots (visible and invisible).
        	:param onlyvisible: default value is Standard_True
        	:type onlyvisible: bool
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_Reader_TransferRoots(self, *args)


    def TransientProcess(self, *args) -> "opencascade::handle< Transfer_TransientProcess >":
        """
        * Returns the TransientProcess
        	:rtype: opencascade::handle<Transfer_TransientProcess>
        """
        return _IGESToBRep.IGESToBRep_Reader_TransientProcess(self, *args)


    def UsedTolerance(self, *args) -> "Standard_Real":
        """
        * Returns the Tolerance which has been actually used, converted in millimeters (either that from File or that from Session, according the mode)
        	:rtype: float
        """
        return _IGESToBRep.IGESToBRep_Reader_UsedTolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_Reader
IGESToBRep_Reader.Actor = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_Actor, None, IGESToBRep_Reader)
IGESToBRep_Reader.Check = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_Check, None, IGESToBRep_Reader)
IGESToBRep_Reader.Clear = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_Clear, None, IGESToBRep_Reader)
IGESToBRep_Reader.IsDone = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_IsDone, None, IGESToBRep_Reader)
IGESToBRep_Reader.LoadFile = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_LoadFile, None, IGESToBRep_Reader)
IGESToBRep_Reader.Model = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_Model, None, IGESToBRep_Reader)
IGESToBRep_Reader.NbShapes = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_NbShapes, None, IGESToBRep_Reader)
IGESToBRep_Reader.OneShape = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_OneShape, None, IGESToBRep_Reader)
IGESToBRep_Reader.SetModel = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_SetModel, None, IGESToBRep_Reader)
IGESToBRep_Reader.SetTransientProcess = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_SetTransientProcess, None, IGESToBRep_Reader)
IGESToBRep_Reader.Shape = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_Shape, None, IGESToBRep_Reader)
IGESToBRep_Reader.Transfer = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_Transfer, None, IGESToBRep_Reader)
IGESToBRep_Reader.TransferRoots = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_TransferRoots, None, IGESToBRep_Reader)
IGESToBRep_Reader.TransientProcess = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_TransientProcess, None, IGESToBRep_Reader)
IGESToBRep_Reader.UsedTolerance = new_instancemethod(_IGESToBRep.IGESToBRep_Reader_UsedTolerance, None, IGESToBRep_Reader)
IGESToBRep_Reader_swigregister = _IGESToBRep.IGESToBRep_Reader_swigregister
IGESToBRep_Reader_swigregister(IGESToBRep_Reader)

class IGESToBRep_ToolContainer(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IGESBoundary(self, *args) -> "opencascade::handle< IGESToBRep_IGESBoundary >":
        """
        * Returns IGESToBRep_IGESBoundary
        	:rtype: opencascade::handle<IGESToBRep_IGESBoundary>
        """
        return _IGESToBRep.IGESToBRep_ToolContainer_IGESBoundary(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_ToolContainer_swiginit(self, _IGESToBRep.new_IGESToBRep_ToolContainer(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_ToolContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_ToolContainer
IGESToBRep_ToolContainer.IGESBoundary = new_instancemethod(_IGESToBRep.IGESToBRep_ToolContainer_IGESBoundary, None, IGESToBRep_ToolContainer)
IGESToBRep_ToolContainer_swigregister = _IGESToBRep.IGESToBRep_ToolContainer_swigregister
IGESToBRep_ToolContainer_swigregister(IGESToBRep_ToolContainer)

class IGESToBRep_BRepEntity(IGESToBRep_CurveAndSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a tool BRepEntity ready to run, with epsilons set to 1.E-04, TheModeTopo to True, the optimization of the continuity to False.
        	:rtype: None
        * Creates a tool BRepEntity ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None
        * Creates a tool BRepEntity ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_BRepEntity_swiginit(self, _IGESToBRep.new_IGESToBRep_BRepEntity(*args))

    def TransferBRepEntity(self, *args) -> "TopoDS_Shape":
        """
        * Transfer the BRepEntity' : Face, Shell or ManifoldSolid.
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferBRepEntity(self, *args)


    def TransferEdge(self, *args) -> "TopoDS_Shape":
        """
        * Transfer the entity number 'index' of the EdgeList 'start'.
        	:param start:
        	:type start: IGESSolid_EdgeList
        	:param index:
        	:type index: int
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferEdge(self, *args)


    def TransferFace(self, *args) -> "TopoDS_Shape":
        """
        * Transfer the Face Entity
        	:param start:
        	:type start: IGESSolid_Face
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferFace(self, *args)


    def TransferLoop(self, *args) -> "TopoDS_Shape":
        """
        * Transfer the Loop Entity
        	:param start:
        	:type start: IGESSolid_Loop
        	:param Face:
        	:type Face: TopoDS_Face
        	:param trans:
        	:type trans: gp_Trsf2d
        	:param uFact:
        	:type uFact: float
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferLoop(self, *args)


    def TransferManifoldSolid(self, *args) -> "TopoDS_Shape":
        """
        * Transfer the ManifoldSolid Entity
        	:param start:
        	:type start: IGESSolid_ManifoldSolid
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferManifoldSolid(self, *args)


    def TransferShell(self, *args) -> "TopoDS_Shape":
        """
        * Transfer the Shell Entity
        	:param start:
        	:type start: IGESSolid_Shell
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferShell(self, *args)


    def TransferVertex(self, *args) -> "TopoDS_Vertex":
        """
        * Transfer the entity number 'index' of the VertexList 'start'
        	:param start:
        	:type start: IGESSolid_VertexList
        	:param index:
        	:type index: int
        	:rtype: TopoDS_Vertex
        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferVertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BRepEntity
IGESToBRep_BRepEntity.TransferBRepEntity = new_instancemethod(_IGESToBRep.IGESToBRep_BRepEntity_TransferBRepEntity, None, IGESToBRep_BRepEntity)
IGESToBRep_BRepEntity.TransferEdge = new_instancemethod(_IGESToBRep.IGESToBRep_BRepEntity_TransferEdge, None, IGESToBRep_BRepEntity)
IGESToBRep_BRepEntity.TransferFace = new_instancemethod(_IGESToBRep.IGESToBRep_BRepEntity_TransferFace, None, IGESToBRep_BRepEntity)
IGESToBRep_BRepEntity.TransferLoop = new_instancemethod(_IGESToBRep.IGESToBRep_BRepEntity_TransferLoop, None, IGESToBRep_BRepEntity)
IGESToBRep_BRepEntity.TransferManifoldSolid = new_instancemethod(_IGESToBRep.IGESToBRep_BRepEntity_TransferManifoldSolid, None, IGESToBRep_BRepEntity)
IGESToBRep_BRepEntity.TransferShell = new_instancemethod(_IGESToBRep.IGESToBRep_BRepEntity_TransferShell, None, IGESToBRep_BRepEntity)
IGESToBRep_BRepEntity.TransferVertex = new_instancemethod(_IGESToBRep.IGESToBRep_BRepEntity_TransferVertex, None, IGESToBRep_BRepEntity)
IGESToBRep_BRepEntity_swigregister = _IGESToBRep.IGESToBRep_BRepEntity_swigregister
IGESToBRep_BRepEntity_swigregister(IGESToBRep_BRepEntity)

class IGESToBRep_BasicCurve(IGESToBRep_CurveAndSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a tool BasicCurve ready to run, with epsilons set to 1.E-04, TheModeTopo to True, the optimization of the continuity to False.
        	:rtype: None
        * Creates a tool BasicCurve ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None
        * Creates a tool BasicCurve ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_BasicCurve_swiginit(self, _IGESToBRep.new_IGESToBRep_BasicCurve(*args))

    def Transfer2dBSplineCurve(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        :param start:
        	:type start: IGESGeom_BSplineCurve
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBSplineCurve(self, *args)


    def Transfer2dBasicCurve(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        * Transfert a IGESEntity which answer True to the member : IGESToBRep::IsBasicCurve(IGESEntity). The IGESEntity must be a curve UV and its associed TRSF must be planar .If this Entity could not be converted, this member returns a NullEntity.
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBasicCurve(self, *args)


    def Transfer2dCircularArc(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        :param start:
        	:type start: IGESGeom_CircularArc
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCircularArc(self, *args)


    def Transfer2dConicArc(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        :param start:
        	:type start: IGESGeom_ConicArc
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dConicArc(self, *args)


    def Transfer2dCopiousData(self, *args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        :param start:
        	:type start: IGESGeom_CopiousData
        	:rtype: opencascade::handle<Geom2d_BSplineCurve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCopiousData(self, *args)


    def Transfer2dLine(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        :param start:
        	:type start: IGESGeom_Line
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dLine(self, *args)


    def Transfer2dSplineCurve(self, *args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        :param start:
        	:type start: IGESGeom_SplineCurve
        	:rtype: opencascade::handle<Geom2d_BSplineCurve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dSplineCurve(self, *args)


    def TransferBSplineCurve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        :param start:
        	:type start: IGESGeom_BSplineCurve
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferBSplineCurve(self, *args)


    def TransferBasicCurve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        * Transfert a IGESEntity which answer True to the member : IGESToBRep::IsBasicCurve(IGESEntity). If this Entity could not be converted, this member returns a NullEntity.
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferBasicCurve(self, *args)


    def TransferCircularArc(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        :param start:
        	:type start: IGESGeom_CircularArc
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferCircularArc(self, *args)


    def TransferConicArc(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        :param start:
        	:type start: IGESGeom_ConicArc
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferConicArc(self, *args)


    def TransferCopiousData(self, *args) -> "opencascade::handle< Geom_BSplineCurve >":
        """
        :param start:
        	:type start: IGESGeom_CopiousData
        	:rtype: opencascade::handle<Geom_BSplineCurve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferCopiousData(self, *args)


    def TransferLine(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        :param start:
        	:type start: IGESGeom_Line
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferLine(self, *args)


    def TransferSplineCurve(self, *args) -> "opencascade::handle< Geom_BSplineCurve >":
        """
        :param start:
        	:type start: IGESGeom_SplineCurve
        	:rtype: opencascade::handle<Geom_BSplineCurve>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferSplineCurve(self, *args)


    def TransferTransformation(self, *args) -> "opencascade::handle< Geom_Transformation >":
        """
        :param start:
        	:type start: IGESGeom_TransformationMatrix
        	:rtype: opencascade::handle<Geom_Transformation>
        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferTransformation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BasicCurve
IGESToBRep_BasicCurve.Transfer2dBSplineCurve = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBSplineCurve, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.Transfer2dBasicCurve = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBasicCurve, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.Transfer2dCircularArc = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCircularArc, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.Transfer2dConicArc = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dConicArc, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.Transfer2dCopiousData = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCopiousData, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.Transfer2dLine = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dLine, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.Transfer2dSplineCurve = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dSplineCurve, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.TransferBSplineCurve = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_TransferBSplineCurve, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.TransferBasicCurve = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_TransferBasicCurve, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.TransferCircularArc = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_TransferCircularArc, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.TransferConicArc = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_TransferConicArc, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.TransferCopiousData = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_TransferCopiousData, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.TransferLine = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_TransferLine, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.TransferSplineCurve = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_TransferSplineCurve, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve.TransferTransformation = new_instancemethod(_IGESToBRep.IGESToBRep_BasicCurve_TransferTransformation, None, IGESToBRep_BasicCurve)
IGESToBRep_BasicCurve_swigregister = _IGESToBRep.IGESToBRep_BasicCurve_swigregister
IGESToBRep_BasicCurve_swigregister(IGESToBRep_BasicCurve)

class IGESToBRep_BasicSurface(IGESToBRep_CurveAndSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a tool BasicSurface ready to run, with epsilons set to 1.E-04, TheModeTopo to True, the optimization of the continuity to False.
        	:rtype: None
        * Creates a tool BasicSurface ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None
        * Creates a tool BasicSurface ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_BasicSurface_swiginit(self, _IGESToBRep.new_IGESToBRep_BasicSurface(*args))

    def TransferBSplineSurface(self, *args) -> "opencascade::handle< Geom_BSplineSurface >":
        """
        * Returns BSplineSurface from Geom if the transfer has succeded.
        	:param start:
        	:type start: IGESGeom_BSplineSurface
        	:rtype: opencascade::handle<Geom_BSplineSurface>
        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferBSplineSurface(self, *args)


    def TransferBasicSurface(self, *args) -> "opencascade::handle< Geom_Surface >":
        """
        * Returns Surface from Geom if the last transfer has succeded.
        	:param start:
        	:type start: IGESData_IGESEntity
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferBasicSurface(self, *args)


    def TransferPlaneSurface(self, *args) -> "opencascade::handle< Geom_Plane >":
        """
        * Returns Plane from Geom if the transfer has succeded.
        	:param start:
        	:type start: IGESSolid_PlaneSurface
        	:rtype: opencascade::handle<Geom_Plane>
        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferPlaneSurface(self, *args)


    def TransferRigthConicalSurface(self, *args) -> "opencascade::handle< Geom_ConicalSurface >":
        """
        * Returns ConicalSurface from Geom if the transfer has succeded.
        	:param start:
        	:type start: IGESSolid_ConicalSurface
        	:rtype: opencascade::handle<Geom_ConicalSurface>
        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferRigthConicalSurface(self, *args)


    def TransferRigthCylindricalSurface(self, *args) -> "opencascade::handle< Geom_CylindricalSurface >":
        """
        * Returns CylindricalSurface from Geom if the transfer has succeded.
        	:param start:
        	:type start: IGESSolid_CylindricalSurface
        	:rtype: opencascade::handle<Geom_CylindricalSurface>
        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferRigthCylindricalSurface(self, *args)


    def TransferSphericalSurface(self, *args) -> "opencascade::handle< Geom_SphericalSurface >":
        """
        * Returns SphericalSurface from Geom if the transfer has succeded.
        	:param start:
        	:type start: IGESSolid_SphericalSurface
        	:rtype: opencascade::handle<Geom_SphericalSurface>
        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferSphericalSurface(self, *args)


    def TransferSplineSurface(self, *args) -> "opencascade::handle< Geom_BSplineSurface >":
        """
        * Returns BSplineSurface from Geom if the transfer has succeded.
        	:param start:
        	:type start: IGESGeom_SplineSurface
        	:rtype: opencascade::handle<Geom_BSplineSurface>
        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferSplineSurface(self, *args)


    def TransferToroidalSurface(self, *args) -> "opencascade::handle< Geom_ToroidalSurface >":
        """
        * Returns SphericalSurface from Geom if the transfer has succeded.
        	:param start:
        	:type start: IGESSolid_ToroidalSurface
        	:rtype: opencascade::handle<Geom_ToroidalSurface>
        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferToroidalSurface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BasicSurface
IGESToBRep_BasicSurface.TransferBSplineSurface = new_instancemethod(_IGESToBRep.IGESToBRep_BasicSurface_TransferBSplineSurface, None, IGESToBRep_BasicSurface)
IGESToBRep_BasicSurface.TransferBasicSurface = new_instancemethod(_IGESToBRep.IGESToBRep_BasicSurface_TransferBasicSurface, None, IGESToBRep_BasicSurface)
IGESToBRep_BasicSurface.TransferPlaneSurface = new_instancemethod(_IGESToBRep.IGESToBRep_BasicSurface_TransferPlaneSurface, None, IGESToBRep_BasicSurface)
IGESToBRep_BasicSurface.TransferRigthConicalSurface = new_instancemethod(_IGESToBRep.IGESToBRep_BasicSurface_TransferRigthConicalSurface, None, IGESToBRep_BasicSurface)
IGESToBRep_BasicSurface.TransferRigthCylindricalSurface = new_instancemethod(_IGESToBRep.IGESToBRep_BasicSurface_TransferRigthCylindricalSurface, None, IGESToBRep_BasicSurface)
IGESToBRep_BasicSurface.TransferSphericalSurface = new_instancemethod(_IGESToBRep.IGESToBRep_BasicSurface_TransferSphericalSurface, None, IGESToBRep_BasicSurface)
IGESToBRep_BasicSurface.TransferSplineSurface = new_instancemethod(_IGESToBRep.IGESToBRep_BasicSurface_TransferSplineSurface, None, IGESToBRep_BasicSurface)
IGESToBRep_BasicSurface.TransferToroidalSurface = new_instancemethod(_IGESToBRep.IGESToBRep_BasicSurface_TransferToroidalSurface, None, IGESToBRep_BasicSurface)
IGESToBRep_BasicSurface_swigregister = _IGESToBRep.IGESToBRep_BasicSurface_swigregister
IGESToBRep_BasicSurface_swigregister(IGESToBRep_BasicSurface)

class IGESToBRep_TopoCurve(IGESToBRep_CurveAndSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Approx2dBSplineCurve(self, *args) -> "void":
        """
        :param start:
        	:type start: Geom2d_BSplineCurve
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Approx2dBSplineCurve(self, *args)


    def ApproxBSplineCurve(self, *args) -> "void":
        """
        :param start:
        	:type start: Geom_BSplineCurve
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_ApproxBSplineCurve(self, *args)


    def BadCase(self, *args) -> "Standard_Boolean":
        """
        * Returns TheBadCase flag
        	:rtype: bool
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_BadCase(self, *args)


    def Curve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        * Returns a Curve given its rank, by default the first one (null Curvee if out of range) in 'TheCurves'
        	:param num: default value is 1
        	:type num: int
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Curve(self, *args)


    def Curve2d(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        * Returns a Curve given its rank, by default the first one (null Curvee if out of range) in 'TheCurves2d'
        	:param num: default value is 1
        	:type num: int
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Curve2d(self, *args)


    def __init__(self, *args):
        """
        * Creates a tool TopoCurve ready to run, with epsilons set to 1.E-04, TheModeTopo to True, the optimization of the continuity to False.
        	:rtype: None
        * Creates a tool TopoCurve ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None
        * Creates a tool TopoCurve ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_TopoCurve
        	:rtype: None
        * Creates a tool TopoCurve ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_TopoCurve_swiginit(self, _IGESToBRep.new_IGESToBRep_TopoCurve(*args))

    def NbCurves(self, *args) -> "Standard_Integer":
        """
        * Returns the count of Curves in 'TheCurves'
        	:rtype: int
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_NbCurves(self, *args)


    def NbCurves2d(self, *args) -> "Standard_Integer":
        """
        * Returns the count of Curves in 'TheCurves2d'
        	:rtype: int
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_NbCurves2d(self, *args)


    def SetBadCase(self, *args) -> "void":
        """
        * Sets TheBadCase flag
        	:param value:
        	:type value: bool
        	:rtype: None
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_SetBadCase(self, *args)


    def Transfer2dCompositeCurve(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_CompositeCurve
        	:param face:
        	:type face: TopoDS_Face
        	:param trans:
        	:type trans: gp_Trsf2d
        	:param uFact:
        	:type uFact: float
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dCompositeCurve(self, *args)


    def Transfer2dOffsetCurve(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_OffsetCurve
        	:param face:
        	:type face: TopoDS_Face
        	:param trans:
        	:type trans: gp_Trsf2d
        	:param uFact:
        	:type uFact: float
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dOffsetCurve(self, *args)


    def Transfer2dPoint(self, *args) -> "TopoDS_Vertex":
        """
        :param start:
        	:type start: IGESGeom_Point
        	:rtype: TopoDS_Vertex
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dPoint(self, *args)


    def Transfer2dTopoBasicCurve(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESData_IGESEntity
        	:param face:
        	:type face: TopoDS_Face
        	:param trans:
        	:type trans: gp_Trsf2d
        	:param uFact:
        	:type uFact: float
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoBasicCurve(self, *args)


    def Transfer2dTopoCurve(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESData_IGESEntity
        	:param face:
        	:type face: TopoDS_Face
        	:param trans:
        	:type trans: gp_Trsf2d
        	:param uFact:
        	:type uFact: float
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoCurve(self, *args)


    def TransferBoundary(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_Boundary
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferBoundary(self, *args)


    def TransferBoundaryOnFace(self, *args) -> "TopoDS_Shape":
        """
        * Transfers a Boundary directly on a face to trim it.
        	:param face:
        	:type face: TopoDS_Face
        	:param start:
        	:type start: IGESGeom_Boundary
        	:param trans:
        	:type trans: gp_Trsf2d
        	:param uFact:
        	:type uFact: float
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferBoundaryOnFace(self, *args)


    def TransferCompositeCurve(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_CompositeCurve
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCompositeCurve(self, *args)


    def TransferCurveOnFace(self, *args) -> "TopoDS_Shape":
        """
        * Transfers a CurveOnSurface directly on a face to trim it. The CurveOnSurface have to be defined Outer or Inner.
        	:param face:
        	:type face: TopoDS_Face
        	:param start:
        	:type start: IGESGeom_CurveOnSurface
        	:param trans:
        	:type trans: gp_Trsf2d
        	:param uFact:
        	:type uFact: float
        	:param IsCurv:
        	:type IsCurv: bool
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnFace(self, *args)


    def TransferCurveOnSurface(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_CurveOnSurface
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnSurface(self, *args)


    def TransferOffsetCurve(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_OffsetCurve
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferOffsetCurve(self, *args)


    def TransferPoint(self, *args) -> "TopoDS_Vertex":
        """
        :param start:
        	:type start: IGESGeom_Point
        	:rtype: TopoDS_Vertex
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferPoint(self, *args)


    def TransferTopoBasicCurve(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESData_IGESEntity
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferTopoBasicCurve(self, *args)


    def TransferTopoCurve(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESData_IGESEntity
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferTopoCurve(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_TopoCurve
IGESToBRep_TopoCurve.Approx2dBSplineCurve = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_Approx2dBSplineCurve, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.ApproxBSplineCurve = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_ApproxBSplineCurve, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.BadCase = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_BadCase, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.Curve = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_Curve, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.Curve2d = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_Curve2d, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.NbCurves = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_NbCurves, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.NbCurves2d = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_NbCurves2d, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.SetBadCase = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_SetBadCase, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.Transfer2dCompositeCurve = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_Transfer2dCompositeCurve, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.Transfer2dOffsetCurve = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_Transfer2dOffsetCurve, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.Transfer2dPoint = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_Transfer2dPoint, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.Transfer2dTopoBasicCurve = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoBasicCurve, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.Transfer2dTopoCurve = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoCurve, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.TransferBoundary = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_TransferBoundary, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.TransferBoundaryOnFace = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_TransferBoundaryOnFace, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.TransferCompositeCurve = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_TransferCompositeCurve, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.TransferCurveOnFace = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnFace, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.TransferCurveOnSurface = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnSurface, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.TransferOffsetCurve = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_TransferOffsetCurve, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.TransferPoint = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_TransferPoint, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.TransferTopoBasicCurve = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_TransferTopoBasicCurve, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve.TransferTopoCurve = new_instancemethod(_IGESToBRep.IGESToBRep_TopoCurve_TransferTopoCurve, None, IGESToBRep_TopoCurve)
IGESToBRep_TopoCurve_swigregister = _IGESToBRep.IGESToBRep_TopoCurve_swigregister
IGESToBRep_TopoCurve_swigregister(IGESToBRep_TopoCurve)

class IGESToBRep_TopoSurface(IGESToBRep_CurveAndSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a tool TopoSurface ready to run, with epsilons set to 1.E-04, TheModeTopo to True, the optimization of the continuity to False.
        	:rtype: None
        * Creates a tool TopoSurface ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None
        * Creates a tool TopoSurface ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_TopoSurface_swiginit(self, _IGESToBRep.new_IGESToBRep_TopoSurface(*args))

    def ParamSurface(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESData_IGESEntity
        	:param trans:
        	:type trans: gp_Trsf2d
        	:param uFact:
        	:type uFact: float
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoSurface_ParamSurface(self, *args)


    def TransferBoundedSurface(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_BoundedSurface
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferBoundedSurface(self, *args)


    def TransferOffsetSurface(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_OffsetSurface
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferOffsetSurface(self, *args)


    def TransferPerforate(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESBasic_SingleParent
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferPerforate(self, *args)


    def TransferPlane(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_Plane
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferPlane(self, *args)


    def TransferRuledSurface(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_RuledSurface
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferRuledSurface(self, *args)


    def TransferSurfaceOfRevolution(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_SurfaceOfRevolution
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferSurfaceOfRevolution(self, *args)


    def TransferTabulatedCylinder(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_TabulatedCylinder
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTabulatedCylinder(self, *args)


    def TransferTopoBasicSurface(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESData_IGESEntity
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTopoBasicSurface(self, *args)


    def TransferTopoSurface(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESData_IGESEntity
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTopoSurface(self, *args)


    def TransferTrimmedSurface(self, *args) -> "TopoDS_Shape":
        """
        :param start:
        	:type start: IGESGeom_TrimmedSurface
        	:rtype: TopoDS_Shape
        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTrimmedSurface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_TopoSurface
IGESToBRep_TopoSurface.ParamSurface = new_instancemethod(_IGESToBRep.IGESToBRep_TopoSurface_ParamSurface, None, IGESToBRep_TopoSurface)
IGESToBRep_TopoSurface.TransferBoundedSurface = new_instancemethod(_IGESToBRep.IGESToBRep_TopoSurface_TransferBoundedSurface, None, IGESToBRep_TopoSurface)
IGESToBRep_TopoSurface.TransferOffsetSurface = new_instancemethod(_IGESToBRep.IGESToBRep_TopoSurface_TransferOffsetSurface, None, IGESToBRep_TopoSurface)
IGESToBRep_TopoSurface.TransferPerforate = new_instancemethod(_IGESToBRep.IGESToBRep_TopoSurface_TransferPerforate, None, IGESToBRep_TopoSurface)
IGESToBRep_TopoSurface.TransferPlane = new_instancemethod(_IGESToBRep.IGESToBRep_TopoSurface_TransferPlane, None, IGESToBRep_TopoSurface)
IGESToBRep_TopoSurface.TransferRuledSurface = new_instancemethod(_IGESToBRep.IGESToBRep_TopoSurface_TransferRuledSurface, None, IGESToBRep_TopoSurface)
IGESToBRep_TopoSurface.TransferSurfaceOfRevolution = new_instancemethod(_IGESToBRep.IGESToBRep_TopoSurface_TransferSurfaceOfRevolution, None, IGESToBRep_TopoSurface)
IGESToBRep_TopoSurface.TransferTabulatedCylinder = new_instancemethod(_IGESToBRep.IGESToBRep_TopoSurface_TransferTabulatedCylinder, None, IGESToBRep_TopoSurface)
IGESToBRep_TopoSurface.TransferTopoBasicSurface = new_instancemethod(_IGESToBRep.IGESToBRep_TopoSurface_TransferTopoBasicSurface, None, IGESToBRep_TopoSurface)
IGESToBRep_TopoSurface.TransferTopoSurface = new_instancemethod(_IGESToBRep.IGESToBRep_TopoSurface_TransferTopoSurface, None, IGESToBRep_TopoSurface)
IGESToBRep_TopoSurface.TransferTrimmedSurface = new_instancemethod(_IGESToBRep.IGESToBRep_TopoSurface_TransferTrimmedSurface, None, IGESToBRep_TopoSurface)
IGESToBRep_TopoSurface_swigregister = _IGESToBRep.IGESToBRep_TopoSurface_swigregister
IGESToBRep_TopoSurface_swigregister(IGESToBRep_TopoSurface)



