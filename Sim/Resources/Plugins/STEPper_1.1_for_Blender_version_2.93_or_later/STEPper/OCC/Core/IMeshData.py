# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IMeshData module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_imeshdata.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IMeshData.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IMeshData')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IMeshData')
    _IMeshData = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IMeshData', [dirname(__file__)])
        except ImportError:
            import _IMeshData
            return _IMeshData
        try:
            _mod = imp.load_module('_IMeshData', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IMeshData = swig_import_helper()
    del swig_import_helper
else:
    import _IMeshData
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IMeshData.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IMeshData.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IMeshData.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IMeshData.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IMeshData.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IMeshData.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IMeshData.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IMeshData.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IMeshData.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IMeshData.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IMeshData.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IMeshData.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IMeshData.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IMeshData.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IMeshData.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IMeshData.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IMeshData.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IMeshData.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IMeshData.process_exception(error, method_name, class_name)
process_exception = _IMeshData.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
IMeshData_NoError = _IMeshData.IMeshData_NoError
IMeshData_OpenWire = _IMeshData.IMeshData_OpenWire
IMeshData_SelfIntersectingWire = _IMeshData.IMeshData_SelfIntersectingWire
IMeshData_Failure = _IMeshData.IMeshData_Failure
IMeshData_ReMesh = _IMeshData.IMeshData_ReMesh
IMeshData_UnorientedWire = _IMeshData.IMeshData_UnorientedWire
IMeshData_TooFewPoints = _IMeshData.IMeshData_TooFewPoints
IMeshData_Outdated = _IMeshData.IMeshData_Outdated
IMeshData_Reused = _IMeshData.IMeshData_Reused

def Handle_IMeshData_ParametersList_Create() -> "opencascade::handle< IMeshData_ParametersList >":
    return _IMeshData.Handle_IMeshData_ParametersList_Create()
Handle_IMeshData_ParametersList_Create = _IMeshData.Handle_IMeshData_ParametersList_Create

def Handle_IMeshData_ParametersList_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshData_ParametersList >":
    return _IMeshData.Handle_IMeshData_ParametersList_DownCast(t)
Handle_IMeshData_ParametersList_DownCast = _IMeshData.Handle_IMeshData_ParametersList_DownCast

def Handle_IMeshData_ParametersList_IsNull(t: 'opencascade::handle< IMeshData_ParametersList > const &') -> "bool":
    return _IMeshData.Handle_IMeshData_ParametersList_IsNull(t)
Handle_IMeshData_ParametersList_IsNull = _IMeshData.Handle_IMeshData_ParametersList_IsNull

def Handle_IMeshData_Shape_Create() -> "opencascade::handle< IMeshData_Shape >":
    return _IMeshData.Handle_IMeshData_Shape_Create()
Handle_IMeshData_Shape_Create = _IMeshData.Handle_IMeshData_Shape_Create

def Handle_IMeshData_Shape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshData_Shape >":
    return _IMeshData.Handle_IMeshData_Shape_DownCast(t)
Handle_IMeshData_Shape_DownCast = _IMeshData.Handle_IMeshData_Shape_DownCast

def Handle_IMeshData_Shape_IsNull(t: 'opencascade::handle< IMeshData_Shape > const &') -> "bool":
    return _IMeshData.Handle_IMeshData_Shape_IsNull(t)
Handle_IMeshData_Shape_IsNull = _IMeshData.Handle_IMeshData_Shape_IsNull

def Handle_IMeshData_Curve_Create() -> "opencascade::handle< IMeshData_Curve >":
    return _IMeshData.Handle_IMeshData_Curve_Create()
Handle_IMeshData_Curve_Create = _IMeshData.Handle_IMeshData_Curve_Create

def Handle_IMeshData_Curve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshData_Curve >":
    return _IMeshData.Handle_IMeshData_Curve_DownCast(t)
Handle_IMeshData_Curve_DownCast = _IMeshData.Handle_IMeshData_Curve_DownCast

def Handle_IMeshData_Curve_IsNull(t: 'opencascade::handle< IMeshData_Curve > const &') -> "bool":
    return _IMeshData.Handle_IMeshData_Curve_IsNull(t)
Handle_IMeshData_Curve_IsNull = _IMeshData.Handle_IMeshData_Curve_IsNull

def Handle_IMeshData_Model_Create() -> "opencascade::handle< IMeshData_Model >":
    return _IMeshData.Handle_IMeshData_Model_Create()
Handle_IMeshData_Model_Create = _IMeshData.Handle_IMeshData_Model_Create

def Handle_IMeshData_Model_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshData_Model >":
    return _IMeshData.Handle_IMeshData_Model_DownCast(t)
Handle_IMeshData_Model_DownCast = _IMeshData.Handle_IMeshData_Model_DownCast

def Handle_IMeshData_Model_IsNull(t: 'opencascade::handle< IMeshData_Model > const &') -> "bool":
    return _IMeshData.Handle_IMeshData_Model_IsNull(t)
Handle_IMeshData_Model_IsNull = _IMeshData.Handle_IMeshData_Model_IsNull

def Handle_IMeshData_PCurve_Create() -> "opencascade::handle< IMeshData_PCurve >":
    return _IMeshData.Handle_IMeshData_PCurve_Create()
Handle_IMeshData_PCurve_Create = _IMeshData.Handle_IMeshData_PCurve_Create

def Handle_IMeshData_PCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshData_PCurve >":
    return _IMeshData.Handle_IMeshData_PCurve_DownCast(t)
Handle_IMeshData_PCurve_DownCast = _IMeshData.Handle_IMeshData_PCurve_DownCast

def Handle_IMeshData_PCurve_IsNull(t: 'opencascade::handle< IMeshData_PCurve > const &') -> "bool":
    return _IMeshData.Handle_IMeshData_PCurve_IsNull(t)
Handle_IMeshData_PCurve_IsNull = _IMeshData.Handle_IMeshData_PCurve_IsNull

def Handle_IMeshData_TessellatedShape_Create() -> "opencascade::handle< IMeshData_TessellatedShape >":
    return _IMeshData.Handle_IMeshData_TessellatedShape_Create()
Handle_IMeshData_TessellatedShape_Create = _IMeshData.Handle_IMeshData_TessellatedShape_Create

def Handle_IMeshData_TessellatedShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshData_TessellatedShape >":
    return _IMeshData.Handle_IMeshData_TessellatedShape_DownCast(t)
Handle_IMeshData_TessellatedShape_DownCast = _IMeshData.Handle_IMeshData_TessellatedShape_DownCast

def Handle_IMeshData_TessellatedShape_IsNull(t: 'opencascade::handle< IMeshData_TessellatedShape > const &') -> "bool":
    return _IMeshData.Handle_IMeshData_TessellatedShape_IsNull(t)
Handle_IMeshData_TessellatedShape_IsNull = _IMeshData.Handle_IMeshData_TessellatedShape_IsNull

def Handle_IMeshData_Edge_Create() -> "opencascade::handle< IMeshData_Edge >":
    return _IMeshData.Handle_IMeshData_Edge_Create()
Handle_IMeshData_Edge_Create = _IMeshData.Handle_IMeshData_Edge_Create

def Handle_IMeshData_Edge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshData_Edge >":
    return _IMeshData.Handle_IMeshData_Edge_DownCast(t)
Handle_IMeshData_Edge_DownCast = _IMeshData.Handle_IMeshData_Edge_DownCast

def Handle_IMeshData_Edge_IsNull(t: 'opencascade::handle< IMeshData_Edge > const &') -> "bool":
    return _IMeshData.Handle_IMeshData_Edge_IsNull(t)
Handle_IMeshData_Edge_IsNull = _IMeshData.Handle_IMeshData_Edge_IsNull

def Handle_IMeshData_Face_Create() -> "opencascade::handle< IMeshData_Face >":
    return _IMeshData.Handle_IMeshData_Face_Create()
Handle_IMeshData_Face_Create = _IMeshData.Handle_IMeshData_Face_Create

def Handle_IMeshData_Face_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshData_Face >":
    return _IMeshData.Handle_IMeshData_Face_DownCast(t)
Handle_IMeshData_Face_DownCast = _IMeshData.Handle_IMeshData_Face_DownCast

def Handle_IMeshData_Face_IsNull(t: 'opencascade::handle< IMeshData_Face > const &') -> "bool":
    return _IMeshData.Handle_IMeshData_Face_IsNull(t)
Handle_IMeshData_Face_IsNull = _IMeshData.Handle_IMeshData_Face_IsNull

def Handle_IMeshData_Wire_Create() -> "opencascade::handle< IMeshData_Wire >":
    return _IMeshData.Handle_IMeshData_Wire_Create()
Handle_IMeshData_Wire_Create = _IMeshData.Handle_IMeshData_Wire_Create

def Handle_IMeshData_Wire_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshData_Wire >":
    return _IMeshData.Handle_IMeshData_Wire_DownCast(t)
Handle_IMeshData_Wire_DownCast = _IMeshData.Handle_IMeshData_Wire_DownCast

def Handle_IMeshData_Wire_IsNull(t: 'opencascade::handle< IMeshData_Wire > const &') -> "bool":
    return _IMeshData.Handle_IMeshData_Wire_IsNull(t)
Handle_IMeshData_Wire_IsNull = _IMeshData.Handle_IMeshData_Wire_IsNull
class IMeshData_ParametersList(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        * Clears parameters list.
        	:param isKeepEndPoints:
        	:type isKeepEndPoints: bool
        	:rtype: void
        """
        return _IMeshData.IMeshData_ParametersList_Clear(self, *args)


    def GetParameter(self, *args) -> "Standard_Real &":
        """
        * Returns parameter with the given index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: float
        """
        return _IMeshData.IMeshData_ParametersList_GetParameter(self, *args)


    def ParametersNb(self, *args) -> "Standard_Integer":
        """
        * Returns number of parameters.
        	:rtype: int
        """
        return _IMeshData.IMeshData_ParametersList_ParametersNb(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshData_ParametersList_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshData.delete_IMeshData_ParametersList
IMeshData_ParametersList.Clear = new_instancemethod(_IMeshData.IMeshData_ParametersList_Clear, None, IMeshData_ParametersList)
IMeshData_ParametersList.GetParameter = new_instancemethod(_IMeshData.IMeshData_ParametersList_GetParameter, None, IMeshData_ParametersList)
IMeshData_ParametersList.ParametersNb = new_instancemethod(_IMeshData.IMeshData_ParametersList_ParametersNb, None, IMeshData_ParametersList)
IMeshData_ParametersList_swigregister = _IMeshData.IMeshData_ParametersList_swigregister
IMeshData_ParametersList_swigregister(IMeshData_ParametersList)

class IMeshData_Shape(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns shape assigned to discrete shape.
        	:rtype: TopoDS_Shape
        """
        return _IMeshData.IMeshData_Shape_GetShape(self, *args)


    def SetShape(self, *args) -> "void":
        """
        * Assigns shape to discrete shape.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: inline void
        """
        return _IMeshData.IMeshData_Shape_SetShape(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshData_Shape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshData.delete_IMeshData_Shape
IMeshData_Shape.GetShape = new_instancemethod(_IMeshData.IMeshData_Shape_GetShape, None, IMeshData_Shape)
IMeshData_Shape.SetShape = new_instancemethod(_IMeshData.IMeshData_Shape_SetShape, None, IMeshData_Shape)
IMeshData_Shape_swigregister = _IMeshData.IMeshData_Shape_swigregister
IMeshData_Shape_swigregister(IMeshData_Shape)

class IMeshData_StatusOwner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetStatusMask(self, *args) -> "Standard_Integer":
        """
        * Returns complete status mask.
        	:rtype: inline int
        """
        return _IMeshData.IMeshData_StatusOwner_GetStatusMask(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        * Returns true in case if status is strictly equal to the given value.
        	:param theValue:
        	:type theValue: IMeshData_Status
        	:rtype: inline bool
        """
        return _IMeshData.IMeshData_StatusOwner_IsEqual(self, *args)


    def IsSet(self, *args) -> "Standard_Boolean":
        """
        * Returns true in case if status is set.
        	:param theValue:
        	:type theValue: IMeshData_Status
        	:rtype: inline bool
        """
        return _IMeshData.IMeshData_StatusOwner_IsSet(self, *args)


    def SetStatus(self, *args) -> "void":
        """
        * Adds status to status flags of a face.
        	:param theValue:
        	:type theValue: IMeshData_Status
        	:rtype: inline void
        """
        return _IMeshData.IMeshData_StatusOwner_SetStatus(self, *args)


    def UnsetStatus(self, *args) -> "void":
        """
        * Adds status to status flags of a face.
        	:param theValue:
        	:type theValue: IMeshData_Status
        	:rtype: inline void
        """
        return _IMeshData.IMeshData_StatusOwner_UnsetStatus(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshData.delete_IMeshData_StatusOwner
IMeshData_StatusOwner.GetStatusMask = new_instancemethod(_IMeshData.IMeshData_StatusOwner_GetStatusMask, None, IMeshData_StatusOwner)
IMeshData_StatusOwner.IsEqual = new_instancemethod(_IMeshData.IMeshData_StatusOwner_IsEqual, None, IMeshData_StatusOwner)
IMeshData_StatusOwner.IsSet = new_instancemethod(_IMeshData.IMeshData_StatusOwner_IsSet, None, IMeshData_StatusOwner)
IMeshData_StatusOwner.SetStatus = new_instancemethod(_IMeshData.IMeshData_StatusOwner_SetStatus, None, IMeshData_StatusOwner)
IMeshData_StatusOwner.UnsetStatus = new_instancemethod(_IMeshData.IMeshData_StatusOwner_UnsetStatus, None, IMeshData_StatusOwner)
IMeshData_StatusOwner_swigregister = _IMeshData.IMeshData_StatusOwner_swigregister
IMeshData_StatusOwner_swigregister(IMeshData_StatusOwner)

class IMeshData_Curve(IMeshData_ParametersList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddPoint(self, *args) -> "void":
        """
        * Adds new discretization point to curve.
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:param theParamOnCurve:
        	:type theParamOnCurve: float
        	:rtype: void
        """
        return _IMeshData.IMeshData_Curve_AddPoint(self, *args)


    def GetPoint(self, *args) -> "gp_Pnt":
        """
        * Returns discretization point with the given index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: gp_Pnt
        """
        return _IMeshData.IMeshData_Curve_GetPoint(self, *args)


    def InsertPoint(self, *args) -> "void":
        """
        * Inserts new discretization point at the given position.
        	:param thePosition:
        	:type thePosition: int
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:param theParamOnPCurve:
        	:type theParamOnPCurve: float
        	:rtype: void
        """
        return _IMeshData.IMeshData_Curve_InsertPoint(self, *args)


    def RemovePoint(self, *args) -> "void":
        """
        * Removes point with the given index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: void
        """
        return _IMeshData.IMeshData_Curve_RemovePoint(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshData_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshData.delete_IMeshData_Curve
IMeshData_Curve.AddPoint = new_instancemethod(_IMeshData.IMeshData_Curve_AddPoint, None, IMeshData_Curve)
IMeshData_Curve.GetPoint = new_instancemethod(_IMeshData.IMeshData_Curve_GetPoint, None, IMeshData_Curve)
IMeshData_Curve.InsertPoint = new_instancemethod(_IMeshData.IMeshData_Curve_InsertPoint, None, IMeshData_Curve)
IMeshData_Curve.RemovePoint = new_instancemethod(_IMeshData.IMeshData_Curve_RemovePoint, None, IMeshData_Curve)
IMeshData_Curve_swigregister = _IMeshData.IMeshData_Curve_swigregister
IMeshData_Curve_swigregister(IMeshData_Curve)

class IMeshData_Model(IMeshData_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddEdge(self, *args) -> "IMeshData::IEdgeHandle const &":
        """
        * Adds new edge to shape model.
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:rtype: IMeshData::IEdgeHandle
        """
        return _IMeshData.IMeshData_Model_AddEdge(self, *args)


    def AddFace(self, *args) -> "IMeshData::IFaceHandle const &":
        """
        * Adds new face to shape model.
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:rtype: IMeshData::IFaceHandle
        """
        return _IMeshData.IMeshData_Model_AddFace(self, *args)


    def EdgesNb(self, *args) -> "Standard_Integer":
        """
        * @name discrete edges Returns number of edges in discrete model.
        	:rtype: int
        """
        return _IMeshData.IMeshData_Model_EdgesNb(self, *args)


    def FacesNb(self, *args) -> "Standard_Integer":
        """
        * @name discrete faces Returns number of faces in discrete model.
        	:rtype: int
        """
        return _IMeshData.IMeshData_Model_FacesNb(self, *args)


    def GetEdge(self, *args) -> "IMeshData::IEdgeHandle const &":
        """
        * Gets model's edge with the given index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: IMeshData::IEdgeHandle
        """
        return _IMeshData.IMeshData_Model_GetEdge(self, *args)


    def GetFace(self, *args) -> "IMeshData::IFaceHandle const &":
        """
        * Gets model's face with the given index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: IMeshData::IFaceHandle
        """
        return _IMeshData.IMeshData_Model_GetFace(self, *args)


    def GetMaxSize(self, *args) -> "Standard_Real":
        """
        * Returns maximum size of shape model.
        	:rtype: float
        """
        return _IMeshData.IMeshData_Model_GetMaxSize(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshData_Model_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshData.delete_IMeshData_Model
IMeshData_Model.AddEdge = new_instancemethod(_IMeshData.IMeshData_Model_AddEdge, None, IMeshData_Model)
IMeshData_Model.AddFace = new_instancemethod(_IMeshData.IMeshData_Model_AddFace, None, IMeshData_Model)
IMeshData_Model.EdgesNb = new_instancemethod(_IMeshData.IMeshData_Model_EdgesNb, None, IMeshData_Model)
IMeshData_Model.FacesNb = new_instancemethod(_IMeshData.IMeshData_Model_FacesNb, None, IMeshData_Model)
IMeshData_Model.GetEdge = new_instancemethod(_IMeshData.IMeshData_Model_GetEdge, None, IMeshData_Model)
IMeshData_Model.GetFace = new_instancemethod(_IMeshData.IMeshData_Model_GetFace, None, IMeshData_Model)
IMeshData_Model.GetMaxSize = new_instancemethod(_IMeshData.IMeshData_Model_GetMaxSize, None, IMeshData_Model)
IMeshData_Model_swigregister = _IMeshData.IMeshData_Model_swigregister
IMeshData_Model_swigregister(IMeshData_Model)

class IMeshData_PCurve(IMeshData_ParametersList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddPoint(self, *args) -> "void":
        """
        * Adds new discretization point to pcurve.
        	:param thePoint:
        	:type thePoint: gp_Pnt2d
        	:param theParamOnPCurve:
        	:type theParamOnPCurve: float
        	:rtype: void
        """
        return _IMeshData.IMeshData_PCurve_AddPoint(self, *args)


    def GetFace(self, *args) -> "IMeshData::IFacePtr const &":
        """
        * Returns discrete face pcurve is associated to.
        	:rtype: inline  IMeshData::IFacePtr
        """
        return _IMeshData.IMeshData_PCurve_GetFace(self, *args)


    def GetIndex(self, *args) -> "Standard_Integer &":
        """
        * Returns index in mesh corresponded to discretization point with the given index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: int
        """
        return _IMeshData.IMeshData_PCurve_GetIndex(self, *args)


    def GetOrientation(self, *args) -> "TopAbs_Orientation":
        """
        * Returns orientation of the edge associated with current pcurve.
        	:rtype: inline TopAbs_Orientation
        """
        return _IMeshData.IMeshData_PCurve_GetOrientation(self, *args)


    def GetPoint(self, *args) -> "gp_Pnt2d":
        """
        * Returns discretization point with the given index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: gp_Pnt2d
        """
        return _IMeshData.IMeshData_PCurve_GetPoint(self, *args)


    def InsertPoint(self, *args) -> "void":
        """
        * Inserts new discretization point at the given position.
        	:param thePosition:
        	:type thePosition: int
        	:param thePoint:
        	:type thePoint: gp_Pnt2d
        	:param theParamOnPCurve:
        	:type theParamOnPCurve: float
        	:rtype: void
        """
        return _IMeshData.IMeshData_PCurve_InsertPoint(self, *args)


    def IsForward(self, *args) -> "Standard_Boolean":
        """
        * Returns forward flag of this pcurve.
        	:rtype: inline bool
        """
        return _IMeshData.IMeshData_PCurve_IsForward(self, *args)


    def IsInternal(self, *args) -> "Standard_Boolean":
        """
        * Returns internal flag of this pcurve.
        	:rtype: inline bool
        """
        return _IMeshData.IMeshData_PCurve_IsInternal(self, *args)


    def RemovePoint(self, *args) -> "void":
        """
        * Removes point with the given index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: void
        """
        return _IMeshData.IMeshData_PCurve_RemovePoint(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshData_PCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshData.delete_IMeshData_PCurve
IMeshData_PCurve.AddPoint = new_instancemethod(_IMeshData.IMeshData_PCurve_AddPoint, None, IMeshData_PCurve)
IMeshData_PCurve.GetFace = new_instancemethod(_IMeshData.IMeshData_PCurve_GetFace, None, IMeshData_PCurve)
IMeshData_PCurve.GetIndex = new_instancemethod(_IMeshData.IMeshData_PCurve_GetIndex, None, IMeshData_PCurve)
IMeshData_PCurve.GetOrientation = new_instancemethod(_IMeshData.IMeshData_PCurve_GetOrientation, None, IMeshData_PCurve)
IMeshData_PCurve.GetPoint = new_instancemethod(_IMeshData.IMeshData_PCurve_GetPoint, None, IMeshData_PCurve)
IMeshData_PCurve.InsertPoint = new_instancemethod(_IMeshData.IMeshData_PCurve_InsertPoint, None, IMeshData_PCurve)
IMeshData_PCurve.IsForward = new_instancemethod(_IMeshData.IMeshData_PCurve_IsForward, None, IMeshData_PCurve)
IMeshData_PCurve.IsInternal = new_instancemethod(_IMeshData.IMeshData_PCurve_IsInternal, None, IMeshData_PCurve)
IMeshData_PCurve.RemovePoint = new_instancemethod(_IMeshData.IMeshData_PCurve_RemovePoint, None, IMeshData_PCurve)
IMeshData_PCurve_swigregister = _IMeshData.IMeshData_PCurve_swigregister
IMeshData_PCurve_swigregister(IMeshData_PCurve)

class IMeshData_TessellatedShape(IMeshData_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetDeflection(self, *args) -> "Standard_Real":
        """
        * Gets deflection value for the discrete model.
        	:rtype: inline float
        """
        return _IMeshData.IMeshData_TessellatedShape_GetDeflection(self, *args)


    def SetDeflection(self, *args) -> "void":
        """
        * Sets deflection value for the discrete model.
        	:param theValue:
        	:type theValue: float
        	:rtype: inline void
        """
        return _IMeshData.IMeshData_TessellatedShape_SetDeflection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshData_TessellatedShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshData.delete_IMeshData_TessellatedShape
IMeshData_TessellatedShape.GetDeflection = new_instancemethod(_IMeshData.IMeshData_TessellatedShape_GetDeflection, None, IMeshData_TessellatedShape)
IMeshData_TessellatedShape.SetDeflection = new_instancemethod(_IMeshData.IMeshData_TessellatedShape_SetDeflection, None, IMeshData_TessellatedShape)
IMeshData_TessellatedShape_swigregister = _IMeshData.IMeshData_TessellatedShape_swigregister
IMeshData_TessellatedShape_swigregister(IMeshData_TessellatedShape)

class IMeshData_Edge(IMeshData_TessellatedShape, IMeshData_StatusOwner):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddPCurve(self, *args) -> "IMeshData::IPCurveHandle const &":
        """
        * Adds discrete pcurve for the specifed discrete face.
        	:param theDFace:
        	:type theDFace: IMeshData::IFacePtr
        	:param theOrientation:
        	:type theOrientation: TopAbs_Orientation
        	:rtype: IMeshData::IPCurveHandle
        """
        return _IMeshData.IMeshData_Edge_AddPCurve(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears curve and all pcurves assigned to the edge from discretization.
        	:param isKeepEndPoints:
        	:type isKeepEndPoints: bool
        	:rtype: inline void
        """
        return _IMeshData.IMeshData_Edge_Clear(self, *args)


    def GetAngularDeflection(self, *args) -> "Standard_Real":
        """
        * Gets value of angular deflection for the discrete model.
        	:rtype: inline float
        """
        return _IMeshData.IMeshData_Edge_GetAngularDeflection(self, *args)


    def GetCurve(self, *args) -> "IMeshData::ICurveHandle const &":
        """
        * Returns 3d curve associated with current edge.
        	:rtype: inline  IMeshData::ICurveHandle
        """
        return _IMeshData.IMeshData_Edge_GetCurve(self, *args)


    def GetDegenerated(self, *args) -> "Standard_Boolean":
        """
        * Returns degenerative flag. By default equals to flag stored in topological shape.
        	:rtype: inline bool
        """
        return _IMeshData.IMeshData_Edge_GetDegenerated(self, *args)


    def GetEdge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns TopoDS_Edge attached to model.
        	:rtype: inline  TopoDS_Edge
        """
        return _IMeshData.IMeshData_Edge_GetEdge(self, *args)


    def GetPCurve(self, *args) -> "IMeshData::IPCurveHandle const &":
        """
        * Returns pcurve for the specified discrete face.
        	:param theDFace:
        	:type theDFace: IMeshData::IFacePtr
        	:param theOrientation:
        	:type theOrientation: TopAbs_Orientation
        	:rtype: IMeshData::IPCurveHandle
        * Returns pcurve with the given index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: IMeshData::IPCurveHandle
        """
        return _IMeshData.IMeshData_Edge_GetPCurve(self, *args)


    def GetSameParam(self, *args) -> "Standard_Boolean":
        """
        * Returns same param flag. By default equals to flag stored in topological shape.
        	:rtype: inline bool
        """
        return _IMeshData.IMeshData_Edge_GetSameParam(self, *args)


    def GetSameRange(self, *args) -> "Standard_Boolean":
        """
        * Returns same range flag. By default equals to flag stored in topological shape.
        	:rtype: inline bool
        """
        return _IMeshData.IMeshData_Edge_GetSameRange(self, *args)


    def IsFree(self, *args) -> "Standard_Boolean":
        """
        * Returns true in case if the edge is free one, i.e. it does not have pcurves.
        	:rtype: inline bool
        """
        return _IMeshData.IMeshData_Edge_IsFree(self, *args)


    def PCurvesNb(self, *args) -> "Standard_Integer":
        """
        * Returns number of pcurves assigned to current edge.
        	:rtype: int
        """
        return _IMeshData.IMeshData_Edge_PCurvesNb(self, *args)


    def SetAngularDeflection(self, *args) -> "void":
        """
        * Sets value of angular deflection for the discrete model.
        	:param theValue:
        	:type theValue: float
        	:rtype: inline void
        """
        return _IMeshData.IMeshData_Edge_SetAngularDeflection(self, *args)


    def SetCurve(self, *args) -> "void":
        """
        * Sets 3d curve associated with current edge.
        	:param theCurve:
        	:type theCurve: IMeshData::ICurveHandle
        	:rtype: inline void
        """
        return _IMeshData.IMeshData_Edge_SetCurve(self, *args)


    def SetDegenerated(self, *args) -> "void":
        """
        * Updates degenerative flag.
        	:param theValue:
        	:type theValue: bool
        	:rtype: inline void
        """
        return _IMeshData.IMeshData_Edge_SetDegenerated(self, *args)


    def SetSameParam(self, *args) -> "void":
        """
        * Updates same param flag.
        	:param theValue:
        	:type theValue: bool
        	:rtype: inline void
        """
        return _IMeshData.IMeshData_Edge_SetSameParam(self, *args)


    def SetSameRange(self, *args) -> "void":
        """
        * Updates same range flag.
        	:param theValue:
        	:type theValue: bool
        	:rtype: inline void
        """
        return _IMeshData.IMeshData_Edge_SetSameRange(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshData_Edge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshData.delete_IMeshData_Edge
IMeshData_Edge.AddPCurve = new_instancemethod(_IMeshData.IMeshData_Edge_AddPCurve, None, IMeshData_Edge)
IMeshData_Edge.Clear = new_instancemethod(_IMeshData.IMeshData_Edge_Clear, None, IMeshData_Edge)
IMeshData_Edge.GetAngularDeflection = new_instancemethod(_IMeshData.IMeshData_Edge_GetAngularDeflection, None, IMeshData_Edge)
IMeshData_Edge.GetCurve = new_instancemethod(_IMeshData.IMeshData_Edge_GetCurve, None, IMeshData_Edge)
IMeshData_Edge.GetDegenerated = new_instancemethod(_IMeshData.IMeshData_Edge_GetDegenerated, None, IMeshData_Edge)
IMeshData_Edge.GetEdge = new_instancemethod(_IMeshData.IMeshData_Edge_GetEdge, None, IMeshData_Edge)
IMeshData_Edge.GetPCurve = new_instancemethod(_IMeshData.IMeshData_Edge_GetPCurve, None, IMeshData_Edge)
IMeshData_Edge.GetSameParam = new_instancemethod(_IMeshData.IMeshData_Edge_GetSameParam, None, IMeshData_Edge)
IMeshData_Edge.GetSameRange = new_instancemethod(_IMeshData.IMeshData_Edge_GetSameRange, None, IMeshData_Edge)
IMeshData_Edge.IsFree = new_instancemethod(_IMeshData.IMeshData_Edge_IsFree, None, IMeshData_Edge)
IMeshData_Edge.PCurvesNb = new_instancemethod(_IMeshData.IMeshData_Edge_PCurvesNb, None, IMeshData_Edge)
IMeshData_Edge.SetAngularDeflection = new_instancemethod(_IMeshData.IMeshData_Edge_SetAngularDeflection, None, IMeshData_Edge)
IMeshData_Edge.SetCurve = new_instancemethod(_IMeshData.IMeshData_Edge_SetCurve, None, IMeshData_Edge)
IMeshData_Edge.SetDegenerated = new_instancemethod(_IMeshData.IMeshData_Edge_SetDegenerated, None, IMeshData_Edge)
IMeshData_Edge.SetSameParam = new_instancemethod(_IMeshData.IMeshData_Edge_SetSameParam, None, IMeshData_Edge)
IMeshData_Edge.SetSameRange = new_instancemethod(_IMeshData.IMeshData_Edge_SetSameRange, None, IMeshData_Edge)
IMeshData_Edge_swigregister = _IMeshData.IMeshData_Edge_swigregister
IMeshData_Edge_swigregister(IMeshData_Edge)

class IMeshData_Face(IMeshData_TessellatedShape, IMeshData_StatusOwner):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddWire(self, *args) -> "IMeshData::IWireHandle const &":
        """
        * Adds wire to discrete model of face.
        	:param theWire:
        	:type theWire: TopoDS_Wire
        	:param theEdgeNb: default value is 0
        	:type theEdgeNb: int
        	:rtype: IMeshData::IWireHandle
        """
        return _IMeshData.IMeshData_Face_AddWire(self, *args)


    def GetFace(self, *args) -> "TopoDS_Face const":
        """
        * Returns TopoDS_Face attached to model.
        	:rtype: inline  TopoDS_Face
        """
        return _IMeshData.IMeshData_Face_GetFace(self, *args)


    def GetSurface(self, *args) -> "opencascade::handle< BRepAdaptor_HSurface > const &":
        """
        * Returns face's surface.
        	:rtype: inline  opencascade::handle<BRepAdaptor_HSurface>
        """
        return _IMeshData.IMeshData_Face_GetSurface(self, *args)


    def GetWire(self, *args) -> "IMeshData::IWireHandle const &":
        """
        * Returns discrete edge with the given index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: IMeshData::IWireHandle
        """
        return _IMeshData.IMeshData_Face_GetWire(self, *args)


    def IsValid(self, *args) -> "Standard_Boolean":
        """
        * Returns whether the face discrete model is valid.
        	:rtype: inline bool
        """
        return _IMeshData.IMeshData_Face_IsValid(self, *args)


    def WiresNb(self, *args) -> "Standard_Integer":
        """
        * Returns number of wires.
        	:rtype: int
        """
        return _IMeshData.IMeshData_Face_WiresNb(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshData_Face_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshData.delete_IMeshData_Face
IMeshData_Face.AddWire = new_instancemethod(_IMeshData.IMeshData_Face_AddWire, None, IMeshData_Face)
IMeshData_Face.GetFace = new_instancemethod(_IMeshData.IMeshData_Face_GetFace, None, IMeshData_Face)
IMeshData_Face.GetSurface = new_instancemethod(_IMeshData.IMeshData_Face_GetSurface, None, IMeshData_Face)
IMeshData_Face.GetWire = new_instancemethod(_IMeshData.IMeshData_Face_GetWire, None, IMeshData_Face)
IMeshData_Face.IsValid = new_instancemethod(_IMeshData.IMeshData_Face_IsValid, None, IMeshData_Face)
IMeshData_Face.WiresNb = new_instancemethod(_IMeshData.IMeshData_Face_WiresNb, None, IMeshData_Face)
IMeshData_Face_swigregister = _IMeshData.IMeshData_Face_swigregister
IMeshData_Face_swigregister(IMeshData_Face)

class IMeshData_Wire(IMeshData_TessellatedShape, IMeshData_StatusOwner):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddEdge(self, *args) -> "Standard_Integer":
        """
        * Adds new discrete edge with specified orientation to wire chain. returns index of added edge in wire chain.
        	:param theDEdge:
        	:type theDEdge: IMeshData::IEdgePtr
        	:param theOrientation:
        	:type theOrientation: TopAbs_Orientation
        	:rtype: int
        """
        return _IMeshData.IMeshData_Wire_AddEdge(self, *args)


    def EdgesNb(self, *args) -> "Standard_Integer":
        """
        * Returns number of edges.
        	:rtype: int
        """
        return _IMeshData.IMeshData_Wire_EdgesNb(self, *args)


    def GetEdge(self, *args) -> "IMeshData::IEdgePtr const &":
        """
        * Returns discrete edge with the given index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: IMeshData::IEdgePtr
        """
        return _IMeshData.IMeshData_Wire_GetEdge(self, *args)


    def GetEdgeOrientation(self, *args) -> "TopAbs_Orientation":
        """
        * Returns True if orientation of discrete edge with the given index is forward.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: TopAbs_Orientation
        """
        return _IMeshData.IMeshData_Wire_GetEdgeOrientation(self, *args)


    def GetWire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns TopoDS_Face attached to model.
        	:rtype: inline  TopoDS_Wire
        """
        return _IMeshData.IMeshData_Wire_GetWire(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshData_Wire_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshData.delete_IMeshData_Wire
IMeshData_Wire.AddEdge = new_instancemethod(_IMeshData.IMeshData_Wire_AddEdge, None, IMeshData_Wire)
IMeshData_Wire.EdgesNb = new_instancemethod(_IMeshData.IMeshData_Wire_EdgesNb, None, IMeshData_Wire)
IMeshData_Wire.GetEdge = new_instancemethod(_IMeshData.IMeshData_Wire_GetEdge, None, IMeshData_Wire)
IMeshData_Wire.GetEdgeOrientation = new_instancemethod(_IMeshData.IMeshData_Wire_GetEdgeOrientation, None, IMeshData_Wire)
IMeshData_Wire.GetWire = new_instancemethod(_IMeshData.IMeshData_Wire_GetWire, None, IMeshData_Wire)
IMeshData_Wire_swigregister = _IMeshData.IMeshData_Wire_swigregister
IMeshData_Wire_swigregister(IMeshData_Wire)



