# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntSurf module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intsurf.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IntSurf.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IntSurf')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IntSurf')
    _IntSurf = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntSurf', [dirname(__file__)])
        except ImportError:
            import _IntSurf
            return _IntSurf
        try:
            _mod = imp.load_module('_IntSurf', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IntSurf = swig_import_helper()
    del swig_import_helper
else:
    import _IntSurf
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntSurf.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IntSurf.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IntSurf.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IntSurf.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IntSurf.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IntSurf.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IntSurf.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IntSurf.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IntSurf.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IntSurf.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IntSurf.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IntSurf.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IntSurf.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IntSurf.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IntSurf.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IntSurf.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IntSurf.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IntSurf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IntSurf.process_exception(error, method_name, class_name)
process_exception = _IntSurf.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
IntSurf_Inside = _IntSurf.IntSurf_Inside
IntSurf_Outside = _IntSurf.IntSurf_Outside
IntSurf_Unknown = _IntSurf.IntSurf_Unknown
IntSurf_In = _IntSurf.IntSurf_In
IntSurf_Out = _IntSurf.IntSurf_Out
IntSurf_Touch = _IntSurf.IntSurf_Touch
IntSurf_Undecided = _IntSurf.IntSurf_Undecided

def Handle_IntSurf_LineOn2S_Create() -> "opencascade::handle< IntSurf_LineOn2S >":
    return _IntSurf.Handle_IntSurf_LineOn2S_Create()
Handle_IntSurf_LineOn2S_Create = _IntSurf.Handle_IntSurf_LineOn2S_Create

def Handle_IntSurf_LineOn2S_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IntSurf_LineOn2S >":
    return _IntSurf.Handle_IntSurf_LineOn2S_DownCast(t)
Handle_IntSurf_LineOn2S_DownCast = _IntSurf.Handle_IntSurf_LineOn2S_DownCast

def Handle_IntSurf_LineOn2S_IsNull(t: 'opencascade::handle< IntSurf_LineOn2S > const &') -> "bool":
    return _IntSurf.Handle_IntSurf_LineOn2S_IsNull(t)
Handle_IntSurf_LineOn2S_IsNull = _IntSurf.Handle_IntSurf_LineOn2S_IsNull
class IntSurf_SequenceOfPathPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.IntSurf_SequenceOfPathPoint_swiginit(self, _IntSurf.new_IntSurf_SequenceOfPathPoint(*args))
    delNode = staticmethod(_IntSurf.IntSurf_SequenceOfPathPoint_delNode)
    __swig_destroy__ = _IntSurf.delete_IntSurf_SequenceOfPathPoint
IntSurf_SequenceOfPathPoint.begin = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_begin, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.end = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_end, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.cbegin = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_cbegin, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.cend = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_cend, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Size = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Size, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Length = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Length, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Lower = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Lower, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Upper = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Upper, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.IsEmpty = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_IsEmpty, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Reverse = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Reverse, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Exchange = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Exchange, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Clear = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Clear, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Assign = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Assign, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Set = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Set, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Remove = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Remove, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Append = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Append, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Prepend = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Prepend, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.InsertBefore = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_InsertBefore, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.InsertAfter = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_InsertAfter, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Split = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Split, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.First = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_First, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.ChangeFirst = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_ChangeFirst, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Last = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Last, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.ChangeLast = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_ChangeLast, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.Value = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_Value, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.ChangeValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_ChangeValue, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.__call__ = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint___call__, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint.SetValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfPathPoint_SetValue, None, IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint_swigregister = _IntSurf.IntSurf_SequenceOfPathPoint_swigregister
IntSurf_SequenceOfPathPoint_swigregister(IntSurf_SequenceOfPathPoint)

def IntSurf_SequenceOfPathPoint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _IntSurf.IntSurf_SequenceOfPathPoint_delNode(theNode, theAl)
IntSurf_SequenceOfPathPoint_delNode = _IntSurf.IntSurf_SequenceOfPathPoint_delNode

class IntSurf_SequenceOfInteriorPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.IntSurf_SequenceOfInteriorPoint_swiginit(self, _IntSurf.new_IntSurf_SequenceOfInteriorPoint(*args))
    delNode = staticmethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_delNode)
    __swig_destroy__ = _IntSurf.delete_IntSurf_SequenceOfInteriorPoint
IntSurf_SequenceOfInteriorPoint.begin = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_begin, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.end = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_end, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.cbegin = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_cbegin, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.cend = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_cend, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Size = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Size, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Length = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Length, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Lower = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Lower, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Upper = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Upper, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.IsEmpty = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_IsEmpty, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Reverse = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Reverse, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Exchange = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Exchange, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Clear = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Clear, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Assign = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Assign, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Set = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Set, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Remove = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Remove, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Append = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Append, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Prepend = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Prepend, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.InsertBefore = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_InsertBefore, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.InsertAfter = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_InsertAfter, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Split = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Split, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.First = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_First, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.ChangeFirst = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_ChangeFirst, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Last = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Last, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.ChangeLast = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_ChangeLast, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.Value = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_Value, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.ChangeValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_ChangeValue, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.__call__ = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint___call__, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint.SetValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfInteriorPoint_SetValue, None, IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint_swigregister = _IntSurf.IntSurf_SequenceOfInteriorPoint_swigregister
IntSurf_SequenceOfInteriorPoint_swigregister(IntSurf_SequenceOfInteriorPoint)

def IntSurf_SequenceOfInteriorPoint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _IntSurf.IntSurf_SequenceOfInteriorPoint_delNode(theNode, theAl)
IntSurf_SequenceOfInteriorPoint_delNode = _IntSurf.IntSurf_SequenceOfInteriorPoint_delNode

class IntSurf_Allocator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _IntSurf.IntSurf_Allocator_swiginit(self, _IntSurf.new_IntSurf_Allocator())
    __swig_destroy__ = _IntSurf.delete_IntSurf_Allocator
IntSurf_Allocator_swigregister = _IntSurf.IntSurf_Allocator_swigregister
IntSurf_Allocator_swigregister(IntSurf_Allocator)

class IntSurf_SequenceOfCouple(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.IntSurf_SequenceOfCouple_swiginit(self, _IntSurf.new_IntSurf_SequenceOfCouple(*args))
    delNode = staticmethod(_IntSurf.IntSurf_SequenceOfCouple_delNode)
    __swig_destroy__ = _IntSurf.delete_IntSurf_SequenceOfCouple
IntSurf_SequenceOfCouple.begin = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_begin, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.end = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_end, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.cbegin = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_cbegin, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.cend = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_cend, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Size = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Size, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Length = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Length, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Lower = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Lower, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Upper = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Upper, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.IsEmpty = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_IsEmpty, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Reverse = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Reverse, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Exchange = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Exchange, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Clear = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Clear, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Assign = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Assign, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Set = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Set, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Remove = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Remove, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Append = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Append, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Prepend = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Prepend, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.InsertBefore = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_InsertBefore, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.InsertAfter = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_InsertAfter, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Split = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Split, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.First = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_First, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.ChangeFirst = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_ChangeFirst, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Last = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Last, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.ChangeLast = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_ChangeLast, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.Value = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_Value, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.ChangeValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_ChangeValue, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.__call__ = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple___call__, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple.SetValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfCouple_SetValue, None, IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple_swigregister = _IntSurf.IntSurf_SequenceOfCouple_swigregister
IntSurf_SequenceOfCouple_swigregister(IntSurf_SequenceOfCouple)

def IntSurf_SequenceOfCouple_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _IntSurf.IntSurf_SequenceOfCouple_delNode(theNode, theAl)
IntSurf_SequenceOfCouple_delNode = _IntSurf.IntSurf_SequenceOfCouple_delNode

class IntSurf_SequenceOfPntOn2S(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.IntSurf_SequenceOfPntOn2S_swiginit(self, _IntSurf.new_IntSurf_SequenceOfPntOn2S(*args))
    delNode = staticmethod(_IntSurf.IntSurf_SequenceOfPntOn2S_delNode)
    __swig_destroy__ = _IntSurf.delete_IntSurf_SequenceOfPntOn2S
IntSurf_SequenceOfPntOn2S.begin = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_begin, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.end = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_end, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.cbegin = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_cbegin, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.cend = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_cend, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Size = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Size, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Length = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Length, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Lower = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Lower, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Upper = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Upper, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.IsEmpty = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_IsEmpty, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Reverse = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Reverse, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Exchange = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Exchange, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Clear = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Clear, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Assign = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Assign, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Set = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Set, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Remove = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Remove, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Append = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Append, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Prepend = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Prepend, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.InsertBefore = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_InsertBefore, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.InsertAfter = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_InsertAfter, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Split = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Split, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.First = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_First, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.ChangeFirst = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_ChangeFirst, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Last = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Last, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.ChangeLast = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_ChangeLast, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.Value = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_Value, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.ChangeValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_ChangeValue, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.__call__ = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S___call__, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S.SetValue = new_instancemethod(_IntSurf.IntSurf_SequenceOfPntOn2S_SetValue, None, IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S_swigregister = _IntSurf.IntSurf_SequenceOfPntOn2S_swigregister
IntSurf_SequenceOfPntOn2S_swigregister(IntSurf_SequenceOfPntOn2S)

def IntSurf_SequenceOfPntOn2S_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _IntSurf.IntSurf_SequenceOfPntOn2S_delNode(theNode, theAl)
IntSurf_SequenceOfPntOn2S_delNode = _IntSurf.IntSurf_SequenceOfPntOn2S_delNode

class IntSurf_ListOfPntOn2S(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.IntSurf_ListOfPntOn2S_swiginit(self, _IntSurf.new_IntSurf_ListOfPntOn2S(*args))
    __swig_destroy__ = _IntSurf.delete_IntSurf_ListOfPntOn2S
IntSurf_ListOfPntOn2S.begin = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_begin, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.end = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_end, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.cbegin = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_cbegin, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.cend = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_cend, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Size = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Size, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Assign = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Assign, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Set = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Set, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Clear = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Clear, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.First = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_First, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Last = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Last, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Append = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Append, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Prepend = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Prepend, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.RemoveFirst = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_RemoveFirst, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Remove = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Remove, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.InsertBefore = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_InsertBefore, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.InsertAfter = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_InsertAfter, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S.Reverse = new_instancemethod(_IntSurf.IntSurf_ListOfPntOn2S_Reverse, None, IntSurf_ListOfPntOn2S)
IntSurf_ListOfPntOn2S_swigregister = _IntSurf.IntSurf_ListOfPntOn2S_swigregister
IntSurf_ListOfPntOn2S_swigregister(IntSurf_ListOfPntOn2S)

class IntSurf_ListIteratorOfListOfPntOn2S(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_swiginit(self, _IntSurf.new_IntSurf_ListIteratorOfListOfPntOn2S(*args))
    __swig_destroy__ = _IntSurf.delete_IntSurf_ListIteratorOfListOfPntOn2S
IntSurf_ListIteratorOfListOfPntOn2S.More = new_instancemethod(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_More, None, IntSurf_ListIteratorOfListOfPntOn2S)
IntSurf_ListIteratorOfListOfPntOn2S.Next = new_instancemethod(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_Next, None, IntSurf_ListIteratorOfListOfPntOn2S)
IntSurf_ListIteratorOfListOfPntOn2S.Value = new_instancemethod(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_Value, None, IntSurf_ListIteratorOfListOfPntOn2S)
IntSurf_ListIteratorOfListOfPntOn2S.ChangeValue = new_instancemethod(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_ChangeValue, None, IntSurf_ListIteratorOfListOfPntOn2S)
IntSurf_ListIteratorOfListOfPntOn2S_swigregister = _IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_swigregister
IntSurf_ListIteratorOfListOfPntOn2S_swigregister(IntSurf_ListIteratorOfListOfPntOn2S)

class intsurf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeTransition(*args) -> "void":
        """
        * Computes the transition of the intersection point between the two lines. TgFirst is the tangent vector of the first line. TgSecond is the tangent vector of the second line. Normal is the direction used to orientate the cross product TgFirst^TgSecond. TFirst is the transition of the point on the first line. TSecond is the transition of the point on the second line.
        	:param TgFirst:
        	:type TgFirst: gp_Vec
        	:param TgSecond:
        	:type TgSecond: gp_Vec
        	:param Normal:
        	:type Normal: gp_Dir
        	:param TFirst:
        	:type TFirst: IntSurf_Transition
        	:param TSecond:
        	:type TSecond: IntSurf_Transition
        	:rtype: void
        """
        return _IntSurf.intsurf_MakeTransition(*args)

    MakeTransition = staticmethod(MakeTransition)

    def SetPeriod(*args) -> "void":
        """
        * Fills theArrOfPeriod array by the period values of theFirstSurf and theSecondSurf. [0] = U-period of theFirstSurf, [1] = V-period of theFirstSurf, [2] = U-period of theSecondSurf, [3] = V-period of theSecondSurf. //! If surface is not periodic in correspond direction then its period is considered to be equal to 0.
        	:param theFirstSurf:
        	:type theFirstSurf: Adaptor3d_HSurface
        	:param theSecondSurf:
        	:type theSecondSurf: Adaptor3d_HSurface
        	:param theArrOfPeriod:
        	:type theArrOfPeriod: float
        	:rtype: void
        """
        return _IntSurf.intsurf_SetPeriod(*args)

    SetPeriod = staticmethod(SetPeriod)

    __repr__ = _dumps_object


    def __init__(self):
        _IntSurf.intsurf_swiginit(self, _IntSurf.new_intsurf())
    __swig_destroy__ = _IntSurf.delete_intsurf
intsurf_swigregister = _IntSurf.intsurf_swigregister
intsurf_swigregister(intsurf)

def intsurf_MakeTransition(*args) -> "void":
    """
    * Computes the transition of the intersection point between the two lines. TgFirst is the tangent vector of the first line. TgSecond is the tangent vector of the second line. Normal is the direction used to orientate the cross product TgFirst^TgSecond. TFirst is the transition of the point on the first line. TSecond is the transition of the point on the second line.
    	:param TgFirst:
    	:type TgFirst: gp_Vec
    	:param TgSecond:
    	:type TgSecond: gp_Vec
    	:param Normal:
    	:type Normal: gp_Dir
    	:param TFirst:
    	:type TFirst: IntSurf_Transition
    	:param TSecond:
    	:type TSecond: IntSurf_Transition
    	:rtype: void
    """
    return _IntSurf.intsurf_MakeTransition(*args)

def intsurf_SetPeriod(*args) -> "void":
    """
    * Fills theArrOfPeriod array by the period values of theFirstSurf and theSecondSurf. [0] = U-period of theFirstSurf, [1] = V-period of theFirstSurf, [2] = U-period of theSecondSurf, [3] = V-period of theSecondSurf. //! If surface is not periodic in correspond direction then its period is considered to be equal to 0.
    	:param theFirstSurf:
    	:type theFirstSurf: Adaptor3d_HSurface
    	:param theSecondSurf:
    	:type theSecondSurf: Adaptor3d_HSurface
    	:param theArrOfPeriod:
    	:type theArrOfPeriod: float
    	:rtype: void
    """
    return _IntSurf.intsurf_SetPeriod(*args)

class IntSurf_Couple(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def First(self, *args) -> "Standard_Integer":
        """
        * returns the first element
        	:rtype: int
        """
        return _IntSurf.IntSurf_Couple_First(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Index1:
        	:type Index1: int
        	:param Index2:
        	:type Index2: int
        	:rtype: None
        """
        _IntSurf.IntSurf_Couple_swiginit(self, _IntSurf.new_IntSurf_Couple(*args))

    def Second(self, *args) -> "Standard_Integer":
        """
        * returns the Second element
        	:rtype: int
        """
        return _IntSurf.IntSurf_Couple_Second(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_Couple
IntSurf_Couple.First = new_instancemethod(_IntSurf.IntSurf_Couple_First, None, IntSurf_Couple)
IntSurf_Couple.Second = new_instancemethod(_IntSurf.IntSurf_Couple_Second, None, IntSurf_Couple)
IntSurf_Couple_swigregister = _IntSurf.IntSurf_Couple_swigregister
IntSurf_Couple_swigregister(IntSurf_Couple)

class IntSurf_InteriorPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Direction(self, *args) -> "gp_Vec const":
        """
        * Returns the tangent at the intersection in 3d space associated to the interior point.
        	:rtype: gp_Vec
        """
        return _IntSurf.IntSurf_InteriorPoint_Direction(self, *args)


    def Direction2d(self, *args) -> "gp_Vec2d const":
        """
        * Returns the tangent at the intersection in the parametric space of the parametric surface.
        	:rtype: gp_Vec2d
        """
        return _IntSurf.IntSurf_InteriorPoint_Direction2d(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Direc:
        	:type Direc: gp_Vec
        	:param Direc2d:
        	:type Direc2d: gp_Vec2d
        	:rtype: None
        """
        _IntSurf.IntSurf_InteriorPoint_swiginit(self, _IntSurf.new_IntSurf_InteriorPoint(*args))

    def Parameters(self, *args) -> "void":
        """
        * Returns the parameters of the interior point on the parametric surface.
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_InteriorPoint_Parameters(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Direc:
        	:type Direc: gp_Vec
        	:param Direc2d:
        	:type Direc2d: gp_Vec2d
        	:rtype: None
        """
        return _IntSurf.IntSurf_InteriorPoint_SetValue(self, *args)


    def UParameter(self, *args) -> "Standard_Real":
        """
        * Returns the first parameter of the interior point on the parametric surface.
        	:rtype: float
        """
        return _IntSurf.IntSurf_InteriorPoint_UParameter(self, *args)


    def VParameter(self, *args) -> "Standard_Real":
        """
        * Returns the second parameter of the interior point on the parametric surface.
        	:rtype: float
        """
        return _IntSurf.IntSurf_InteriorPoint_VParameter(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """
        * Returns the 3d coordinates of the interior point.
        	:rtype: gp_Pnt
        """
        return _IntSurf.IntSurf_InteriorPoint_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_InteriorPoint
IntSurf_InteriorPoint.Direction = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_Direction, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.Direction2d = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_Direction2d, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.Parameters = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_Parameters, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.SetValue = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_SetValue, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.UParameter = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_UParameter, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.VParameter = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_VParameter, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint.Value = new_instancemethod(_IntSurf.IntSurf_InteriorPoint_Value, None, IntSurf_InteriorPoint)
IntSurf_InteriorPoint_swigregister = _IntSurf.IntSurf_InteriorPoint_swigregister
IntSurf_InteriorPoint_swigregister(IntSurf_InteriorPoint)

class IntSurf_InteriorPointTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Direction2d(*args) -> "gp_Dir2d":
        """
        * returns the tangent at the intersectin in the parametric space of the parametrized surface.This tangent is associated to the value2d
        	:param PStart:
        	:type PStart: IntSurf_InteriorPoint
        	:rtype: gp_Dir2d
        """
        return _IntSurf.IntSurf_InteriorPointTool_Direction2d(*args)

    Direction2d = staticmethod(Direction2d)

    def Direction3d(*args) -> "gp_Vec":
        """
        * returns the tangent at the intersectin in 3d space associated to <P>
        	:param PStart:
        	:type PStart: IntSurf_InteriorPoint
        	:rtype: gp_Vec
        """
        return _IntSurf.IntSurf_InteriorPointTool_Direction3d(*args)

    Direction3d = staticmethod(Direction3d)

    def Value2d(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Returns the <U,V> parameters which are associated with <P> it's the parameters which start the marching algorithm
        	:param PStart:
        	:type PStart: IntSurf_InteriorPoint
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_InteriorPointTool_Value2d(*args)

    Value2d = staticmethod(Value2d)

    def Value3d(*args) -> "gp_Pnt":
        """
        * Returns the 3d coordinates of the starting point.
        	:param PStart:
        	:type PStart: IntSurf_InteriorPoint
        	:rtype: gp_Pnt
        """
        return _IntSurf.IntSurf_InteriorPointTool_Value3d(*args)

    Value3d = staticmethod(Value3d)

    __repr__ = _dumps_object


    def __init__(self):
        _IntSurf.IntSurf_InteriorPointTool_swiginit(self, _IntSurf.new_IntSurf_InteriorPointTool())
    __swig_destroy__ = _IntSurf.delete_IntSurf_InteriorPointTool
IntSurf_InteriorPointTool_swigregister = _IntSurf.IntSurf_InteriorPointTool_swigregister
IntSurf_InteriorPointTool_swigregister(IntSurf_InteriorPointTool)

def IntSurf_InteriorPointTool_Direction2d(*args) -> "gp_Dir2d":
    """
    * returns the tangent at the intersectin in the parametric space of the parametrized surface.This tangent is associated to the value2d
    	:param PStart:
    	:type PStart: IntSurf_InteriorPoint
    	:rtype: gp_Dir2d
    """
    return _IntSurf.IntSurf_InteriorPointTool_Direction2d(*args)

def IntSurf_InteriorPointTool_Direction3d(*args) -> "gp_Vec":
    """
    * returns the tangent at the intersectin in 3d space associated to <P>
    	:param PStart:
    	:type PStart: IntSurf_InteriorPoint
    	:rtype: gp_Vec
    """
    return _IntSurf.IntSurf_InteriorPointTool_Direction3d(*args)

def IntSurf_InteriorPointTool_Value2d(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Returns the <U,V> parameters which are associated with <P> it's the parameters which start the marching algorithm
    	:param PStart:
    	:type PStart: IntSurf_InteriorPoint
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:rtype: None
    """
    return _IntSurf.IntSurf_InteriorPointTool_Value2d(*args)

def IntSurf_InteriorPointTool_Value3d(*args) -> "gp_Pnt":
    """
    * Returns the 3d coordinates of the starting point.
    	:param PStart:
    	:type PStart: IntSurf_InteriorPoint
    	:rtype: gp_Pnt
    """
    return _IntSurf.IntSurf_InteriorPointTool_Value3d(*args)

class IntSurf_LineOn2S(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Adds a point in the line.
        	:param P:
        	:type P: IntSurf_PntOn2S
        	:rtype: None
        """
        return _IntSurf.IntSurf_LineOn2S_Add(self, *args)


    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _IntSurf.IntSurf_LineOn2S_Clear(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:param P:
        	:type P: IntSurf_PntOn2S
        	:rtype: None
        """
        return _IntSurf.IntSurf_LineOn2S_InsertBefore(self, *args)


    def __init__(self, *args):
        """
        :param theAllocator: default value is 0
        	:type theAllocator: IntSurf_Allocator
        	:rtype: None
        """
        _IntSurf.IntSurf_LineOn2S_swiginit(self, _IntSurf.new_IntSurf_LineOn2S(*args))

    def IsOutBox(self, *args) -> "Standard_Boolean":
        """
        * Returns True if theP is out of the box built from 3D-points.
        	:param theP:
        	:type theP: gp_Pnt
        	:rtype: bool
        """
        return _IntSurf.IntSurf_LineOn2S_IsOutBox(self, *args)


    def IsOutSurf1Box(self, *args) -> "Standard_Boolean":
        """
        * Returns True if theP is out of the box built from the points on 1st surface
        	:param theP:
        	:type theP: gp_Pnt2d
        	:rtype: bool
        """
        return _IntSurf.IntSurf_LineOn2S_IsOutSurf1Box(self, *args)


    def IsOutSurf2Box(self, *args) -> "Standard_Boolean":
        """
        * Returns True if theP is out of the box built from the points on 2nd surface
        	:param theP:
        	:type theP: gp_Pnt2d
        	:rtype: bool
        """
        return _IntSurf.IntSurf_LineOn2S_IsOutSurf2Box(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points in the line.
        	:rtype: int
        """
        return _IntSurf.IntSurf_LineOn2S_NbPoints(self, *args)


    def RemovePoint(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:rtype: None
        """
        return _IntSurf.IntSurf_LineOn2S_RemovePoint(self, *args)


    def Reverse(self, *args) -> "void":
        """
        * Reverses the order of points of the line.
        	:rtype: None
        """
        return _IntSurf.IntSurf_LineOn2S_Reverse(self, *args)


    def SetUV(self, *args) -> "void":
        """
        * Sets the parametric coordinates on one of the surfaces of the point of range Index in the line.
        	:param Index:
        	:type Index: int
        	:param OnFirst:
        	:type OnFirst: bool
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_LineOn2S_SetUV(self, *args)


    def Split(self, *args) -> "opencascade::handle< IntSurf_LineOn2S >":
        """
        * Keeps in <self> the points 1 to Index-1, and returns the items Index to the end.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<IntSurf_LineOn2S>
        """
        return _IntSurf.IntSurf_LineOn2S_Split(self, *args)


    def Value(self, *args) -> "void":
        """
        * Returns the point of range Index in the line.
        	:param Index:
        	:type Index: int
        	:rtype: IntSurf_PntOn2S
        * Replaces the point of range Index in the line.
        	:param Index:
        	:type Index: int
        	:param P:
        	:type P: IntSurf_PntOn2S
        	:rtype: None
        """
        return _IntSurf.IntSurf_LineOn2S_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IntSurf_LineOn2S_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_LineOn2S
IntSurf_LineOn2S.Add = new_instancemethod(_IntSurf.IntSurf_LineOn2S_Add, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.Clear = new_instancemethod(_IntSurf.IntSurf_LineOn2S_Clear, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.InsertBefore = new_instancemethod(_IntSurf.IntSurf_LineOn2S_InsertBefore, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.IsOutBox = new_instancemethod(_IntSurf.IntSurf_LineOn2S_IsOutBox, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.IsOutSurf1Box = new_instancemethod(_IntSurf.IntSurf_LineOn2S_IsOutSurf1Box, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.IsOutSurf2Box = new_instancemethod(_IntSurf.IntSurf_LineOn2S_IsOutSurf2Box, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.NbPoints = new_instancemethod(_IntSurf.IntSurf_LineOn2S_NbPoints, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.RemovePoint = new_instancemethod(_IntSurf.IntSurf_LineOn2S_RemovePoint, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.Reverse = new_instancemethod(_IntSurf.IntSurf_LineOn2S_Reverse, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.SetUV = new_instancemethod(_IntSurf.IntSurf_LineOn2S_SetUV, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.Split = new_instancemethod(_IntSurf.IntSurf_LineOn2S_Split, None, IntSurf_LineOn2S)
IntSurf_LineOn2S.Value = new_instancemethod(_IntSurf.IntSurf_LineOn2S_Value, None, IntSurf_LineOn2S)
IntSurf_LineOn2S_swigregister = _IntSurf.IntSurf_LineOn2S_swigregister
IntSurf_LineOn2S_swigregister(IntSurf_LineOn2S)

class IntSurf_PathPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddUV(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_PathPoint_AddUV(self, *args)


    def Direction2d(self, *args) -> "gp_Dir2d const":
        """:rtype: gp_Dir2d"""
        return _IntSurf.IntSurf_PathPoint_Direction2d(self, *args)


    def Direction3d(self, *args) -> "gp_Vec const":
        """:rtype: gp_Vec"""
        return _IntSurf.IntSurf_PathPoint_Direction3d(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        _IntSurf.IntSurf_PathPoint_swiginit(self, _IntSurf.new_IntSurf_PathPoint(*args))

    def IsPassingPnt(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _IntSurf.IntSurf_PathPoint_IsPassingPnt(self, *args)


    def IsTangent(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _IntSurf.IntSurf_PathPoint_IsTangent(self, *args)


    def Multiplicity(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntSurf.IntSurf_PathPoint_Multiplicity(self, *args)


    def Parameters(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_PathPoint_Parameters(self, *args)


    def SetDirections(self, *args) -> "void":
        """
        :param V:
        	:type V: gp_Vec
        	:param D:
        	:type D: gp_Dir2d
        	:rtype: None
        """
        return _IntSurf.IntSurf_PathPoint_SetDirections(self, *args)


    def SetPassing(self, *args) -> "void":
        """
        :param Pass:
        	:type Pass: bool
        	:rtype: None
        """
        return _IntSurf.IntSurf_PathPoint_SetPassing(self, *args)


    def SetTangency(self, *args) -> "void":
        """
        :param Tang:
        	:type Tang: bool
        	:rtype: None
        """
        return _IntSurf.IntSurf_PathPoint_SetTangency(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_PathPoint_SetValue(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """:rtype: gp_Pnt"""
        return _IntSurf.IntSurf_PathPoint_Value(self, *args)


    def Value2d(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_PathPoint_Value2d(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_PathPoint
IntSurf_PathPoint.AddUV = new_instancemethod(_IntSurf.IntSurf_PathPoint_AddUV, None, IntSurf_PathPoint)
IntSurf_PathPoint.Direction2d = new_instancemethod(_IntSurf.IntSurf_PathPoint_Direction2d, None, IntSurf_PathPoint)
IntSurf_PathPoint.Direction3d = new_instancemethod(_IntSurf.IntSurf_PathPoint_Direction3d, None, IntSurf_PathPoint)
IntSurf_PathPoint.IsPassingPnt = new_instancemethod(_IntSurf.IntSurf_PathPoint_IsPassingPnt, None, IntSurf_PathPoint)
IntSurf_PathPoint.IsTangent = new_instancemethod(_IntSurf.IntSurf_PathPoint_IsTangent, None, IntSurf_PathPoint)
IntSurf_PathPoint.Multiplicity = new_instancemethod(_IntSurf.IntSurf_PathPoint_Multiplicity, None, IntSurf_PathPoint)
IntSurf_PathPoint.Parameters = new_instancemethod(_IntSurf.IntSurf_PathPoint_Parameters, None, IntSurf_PathPoint)
IntSurf_PathPoint.SetDirections = new_instancemethod(_IntSurf.IntSurf_PathPoint_SetDirections, None, IntSurf_PathPoint)
IntSurf_PathPoint.SetPassing = new_instancemethod(_IntSurf.IntSurf_PathPoint_SetPassing, None, IntSurf_PathPoint)
IntSurf_PathPoint.SetTangency = new_instancemethod(_IntSurf.IntSurf_PathPoint_SetTangency, None, IntSurf_PathPoint)
IntSurf_PathPoint.SetValue = new_instancemethod(_IntSurf.IntSurf_PathPoint_SetValue, None, IntSurf_PathPoint)
IntSurf_PathPoint.Value = new_instancemethod(_IntSurf.IntSurf_PathPoint_Value, None, IntSurf_PathPoint)
IntSurf_PathPoint.Value2d = new_instancemethod(_IntSurf.IntSurf_PathPoint_Value2d, None, IntSurf_PathPoint)
IntSurf_PathPoint_swigregister = _IntSurf.IntSurf_PathPoint_swigregister
IntSurf_PathPoint_swigregister(IntSurf_PathPoint)

class IntSurf_PathPointTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Direction2d(*args) -> "gp_Dir2d":
        """
        * returns the tangent at the intersection in the parametric space of the parametrized surface.This tangent is associated to the value2d la tangente a un sens signifiant (indique le sens de chemin ement) an exception is raised if IsTangent is true.
        	:param PStart:
        	:type PStart: IntSurf_PathPoint
        	:rtype: gp_Dir2d
        """
        return _IntSurf.IntSurf_PathPointTool_Direction2d(*args)

    Direction2d = staticmethod(Direction2d)

    def Direction3d(*args) -> "gp_Vec":
        """
        * returns the tangent at the intersection in 3d space associated to <P> an exception is raised if IsTangent is true.
        	:param PStart:
        	:type PStart: IntSurf_PathPoint
        	:rtype: gp_Vec
        """
        return _IntSurf.IntSurf_PathPointTool_Direction3d(*args)

    Direction3d = staticmethod(Direction3d)

    def IsPassingPnt(*args) -> "Standard_Boolean":
        """
        * Returns True if the point is a point on a non-oriented arc, which means that the intersection line does not stop at such a point but just go through such a point. IsPassingPnt is True when IsOnArc is True
        	:param PStart:
        	:type PStart: IntSurf_PathPoint
        	:rtype: bool
        """
        return _IntSurf.IntSurf_PathPointTool_IsPassingPnt(*args)

    IsPassingPnt = staticmethod(IsPassingPnt)

    def IsTangent(*args) -> "Standard_Boolean":
        """
        * Returns True if the surfaces are tangent at this point. IsTangent can be True when IsOnArc is True if IsPassingPnt is True and IsTangent is True,this point is a stopped point.
        	:param PStart:
        	:type PStart: IntSurf_PathPoint
        	:rtype: bool
        """
        return _IntSurf.IntSurf_PathPointTool_IsTangent(*args)

    IsTangent = staticmethod(IsTangent)

    def Multiplicity(*args) -> "Standard_Integer":
        """
        * Returns the multiplicity of the point i-e the number of auxillar parameters associated to the point which the principal parameters are given by Value2d
        	:param PStart:
        	:type PStart: IntSurf_PathPoint
        	:rtype: int
        """
        return _IntSurf.IntSurf_PathPointTool_Multiplicity(*args)

    Multiplicity = staticmethod(Multiplicity)

    def Parameters(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Parametric coordinates associated to the multiplicity. An exception is raised if Mult<=0 or Mult>multiplicity.
        	:param PStart:
        	:type PStart: IntSurf_PathPoint
        	:param Mult:
        	:type Mult: int
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_PathPointTool_Parameters(*args)

    Parameters = staticmethod(Parameters)

    def Value2d(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Returns the <U, V> parameters which are associated with <P> it's the parameters which start the marching algorithm
        	:param PStart:
        	:type PStart: IntSurf_PathPoint
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_PathPointTool_Value2d(*args)

    Value2d = staticmethod(Value2d)

    def Value3d(*args) -> "gp_Pnt":
        """
        * Returns the 3d coordinates of the starting point.
        	:param PStart:
        	:type PStart: IntSurf_PathPoint
        	:rtype: gp_Pnt
        """
        return _IntSurf.IntSurf_PathPointTool_Value3d(*args)

    Value3d = staticmethod(Value3d)

    __repr__ = _dumps_object


    def __init__(self):
        _IntSurf.IntSurf_PathPointTool_swiginit(self, _IntSurf.new_IntSurf_PathPointTool())
    __swig_destroy__ = _IntSurf.delete_IntSurf_PathPointTool
IntSurf_PathPointTool_swigregister = _IntSurf.IntSurf_PathPointTool_swigregister
IntSurf_PathPointTool_swigregister(IntSurf_PathPointTool)

def IntSurf_PathPointTool_Direction2d(*args) -> "gp_Dir2d":
    """
    * returns the tangent at the intersection in the parametric space of the parametrized surface.This tangent is associated to the value2d la tangente a un sens signifiant (indique le sens de chemin ement) an exception is raised if IsTangent is true.
    	:param PStart:
    	:type PStart: IntSurf_PathPoint
    	:rtype: gp_Dir2d
    """
    return _IntSurf.IntSurf_PathPointTool_Direction2d(*args)

def IntSurf_PathPointTool_Direction3d(*args) -> "gp_Vec":
    """
    * returns the tangent at the intersection in 3d space associated to <P> an exception is raised if IsTangent is true.
    	:param PStart:
    	:type PStart: IntSurf_PathPoint
    	:rtype: gp_Vec
    """
    return _IntSurf.IntSurf_PathPointTool_Direction3d(*args)

def IntSurf_PathPointTool_IsPassingPnt(*args) -> "Standard_Boolean":
    """
    * Returns True if the point is a point on a non-oriented arc, which means that the intersection line does not stop at such a point but just go through such a point. IsPassingPnt is True when IsOnArc is True
    	:param PStart:
    	:type PStart: IntSurf_PathPoint
    	:rtype: bool
    """
    return _IntSurf.IntSurf_PathPointTool_IsPassingPnt(*args)

def IntSurf_PathPointTool_IsTangent(*args) -> "Standard_Boolean":
    """
    * Returns True if the surfaces are tangent at this point. IsTangent can be True when IsOnArc is True if IsPassingPnt is True and IsTangent is True,this point is a stopped point.
    	:param PStart:
    	:type PStart: IntSurf_PathPoint
    	:rtype: bool
    """
    return _IntSurf.IntSurf_PathPointTool_IsTangent(*args)

def IntSurf_PathPointTool_Multiplicity(*args) -> "Standard_Integer":
    """
    * Returns the multiplicity of the point i-e the number of auxillar parameters associated to the point which the principal parameters are given by Value2d
    	:param PStart:
    	:type PStart: IntSurf_PathPoint
    	:rtype: int
    """
    return _IntSurf.IntSurf_PathPointTool_Multiplicity(*args)

def IntSurf_PathPointTool_Parameters(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Parametric coordinates associated to the multiplicity. An exception is raised if Mult<=0 or Mult>multiplicity.
    	:param PStart:
    	:type PStart: IntSurf_PathPoint
    	:param Mult:
    	:type Mult: int
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:rtype: None
    """
    return _IntSurf.IntSurf_PathPointTool_Parameters(*args)

def IntSurf_PathPointTool_Value2d(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Returns the <U, V> parameters which are associated with <P> it's the parameters which start the marching algorithm
    	:param PStart:
    	:type PStart: IntSurf_PathPoint
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:rtype: None
    """
    return _IntSurf.IntSurf_PathPointTool_Value2d(*args)

def IntSurf_PathPointTool_Value3d(*args) -> "gp_Pnt":
    """
    * Returns the 3d coordinates of the starting point.
    	:param PStart:
    	:type PStart: IntSurf_PathPoint
    	:rtype: gp_Pnt
    """
    return _IntSurf.IntSurf_PathPointTool_Value3d(*args)

class IntSurf_PntOn2S(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _IntSurf.IntSurf_PntOn2S_swiginit(self, _IntSurf.new_IntSurf_PntOn2S(*args))

    def IsSame(self, *args) -> "Standard_Boolean":
        """
        * Returns True if 2D- and 3D-coordinates of theOterPoint are equal to corresponding coordinates of me (with given tolerance). If theTol2D < 0.0 we will compare 3D-points only.
        	:param theOtherPoint:
        	:type theOtherPoint: IntSurf_PntOn2S
        	:param theTol3D: default value is 0.0
        	:type theTol3D: float
        	:param theTol2D: default value is -1.0
        	:type theTol2D: float
        	:rtype: bool
        """
        return _IntSurf.IntSurf_PntOn2S_IsSame(self, *args)


    def Parameters(self, *args) -> "void":
        """
        * Returns the parameters of the point on both surfaces.
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_PntOn2S_Parameters(self, *args)


    def ParametersOnS1(self, *args) -> "void":
        """
        * Returns the parameters of the point on the first surface.
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_PntOn2S_ParametersOnS1(self, *args)


    def ParametersOnS2(self, *args) -> "void":
        """
        * Returns the parameters of the point on the second surface.
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_PntOn2S_ParametersOnS2(self, *args)


    def ParametersOnSurface(self, *args) -> "void":
        """
        * Returns the parameters of the point in the parametric space of one of the surface.
        	:param OnFirst:
        	:type OnFirst: bool
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_PntOn2S_ParametersOnSurface(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Sets the value of the point in 3d space.
        	:param Pt:
        	:type Pt: gp_Pnt
        	:rtype: None
        * Sets the values of the point in 3d space, and in the parametric space of one of the surface.
        	:param Pt:
        	:type Pt: gp_Pnt
        	:param OnFirst:
        	:type OnFirst: bool
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        * Sets the values of the point in 3d space, and in the parametric space of each surface.
        	:param Pt:
        	:type Pt: gp_Pnt
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:rtype: None
        * Set the values of the point in the parametric space of one of the surface.
        	:param OnFirst:
        	:type OnFirst: bool
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        * Set the values of the point in the parametric space of one of the surface.
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_PntOn2S_SetValue(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """
        * Returns the point in 3d space.
        	:rtype: gp_Pnt
        """
        return _IntSurf.IntSurf_PntOn2S_Value(self, *args)


    def ValueOnSurface(self, *args) -> "gp_Pnt2d":
        """
        * Returns the point in 2d space of one of the surfaces.
        	:param OnFirst:
        	:type OnFirst: bool
        	:rtype: gp_Pnt2d
        """
        return _IntSurf.IntSurf_PntOn2S_ValueOnSurface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_PntOn2S
IntSurf_PntOn2S.IsSame = new_instancemethod(_IntSurf.IntSurf_PntOn2S_IsSame, None, IntSurf_PntOn2S)
IntSurf_PntOn2S.Parameters = new_instancemethod(_IntSurf.IntSurf_PntOn2S_Parameters, None, IntSurf_PntOn2S)
IntSurf_PntOn2S.ParametersOnS1 = new_instancemethod(_IntSurf.IntSurf_PntOn2S_ParametersOnS1, None, IntSurf_PntOn2S)
IntSurf_PntOn2S.ParametersOnS2 = new_instancemethod(_IntSurf.IntSurf_PntOn2S_ParametersOnS2, None, IntSurf_PntOn2S)
IntSurf_PntOn2S.ParametersOnSurface = new_instancemethod(_IntSurf.IntSurf_PntOn2S_ParametersOnSurface, None, IntSurf_PntOn2S)
IntSurf_PntOn2S.SetValue = new_instancemethod(_IntSurf.IntSurf_PntOn2S_SetValue, None, IntSurf_PntOn2S)
IntSurf_PntOn2S.Value = new_instancemethod(_IntSurf.IntSurf_PntOn2S_Value, None, IntSurf_PntOn2S)
IntSurf_PntOn2S.ValueOnSurface = new_instancemethod(_IntSurf.IntSurf_PntOn2S_ValueOnSurface, None, IntSurf_PntOn2S)
IntSurf_PntOn2S_swigregister = _IntSurf.IntSurf_PntOn2S_swigregister
IntSurf_PntOn2S_swigregister(IntSurf_PntOn2S)

class IntSurf_Quadric(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Cone(self, *args) -> "gp_Cone":
        """:rtype: gp_Cone"""
        return _IntSurf.IntSurf_Quadric_Cone(self, *args)


    def Cylinder(self, *args) -> "gp_Cylinder":
        """:rtype: gp_Cylinder"""
        return _IntSurf.IntSurf_Quadric_Cylinder(self, *args)


    def D1(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param P:
        	:type P: gp_Pnt
        	:param D1U:
        	:type D1U: gp_Vec
        	:param D1V:
        	:type D1V: gp_Vec
        	:rtype: None
        """
        return _IntSurf.IntSurf_Quadric_D1(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        :param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Nu:
        	:type Nu: int
        	:param Nv:
        	:type Nv: int
        	:rtype: gp_Vec
        """
        return _IntSurf.IntSurf_Quadric_DN(self, *args)


    def Distance(self, *args) -> "Standard_Real":
        """
        :param P:
        	:type P: gp_Pnt
        	:rtype: float
        """
        return _IntSurf.IntSurf_Quadric_Distance(self, *args)


    def Gradient(self, *args) -> "gp_Vec":
        """
        :param P:
        	:type P: gp_Pnt
        	:rtype: gp_Vec
        """
        return _IntSurf.IntSurf_Quadric_Gradient(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pln
        	:rtype: None
        :param C:
        	:type C: gp_Cylinder
        	:rtype: None
        :param S:
        	:type S: gp_Sphere
        	:rtype: None
        :param C:
        	:type C: gp_Cone
        	:rtype: None
        :param T:
        	:type T: gp_Torus
        	:rtype: None
        """
        _IntSurf.IntSurf_Quadric_swiginit(self, _IntSurf.new_IntSurf_Quadric(*args))

    def Normale(self, *args) -> "gp_Vec":
        """
        :param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: gp_Vec
        :param P:
        	:type P: gp_Pnt
        	:rtype: gp_Vec
        """
        return _IntSurf.IntSurf_Quadric_Normale(self, *args)


    def Parameters(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntSurf.IntSurf_Quadric_Parameters(self, *args)


    def Plane(self, *args) -> "gp_Pln":
        """:rtype: gp_Pln"""
        return _IntSurf.IntSurf_Quadric_Plane(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pln
        	:rtype: None
        :param C:
        	:type C: gp_Cylinder
        	:rtype: None
        :param S:
        	:type S: gp_Sphere
        	:rtype: None
        :param C:
        	:type C: gp_Cone
        	:rtype: None
        :param T:
        	:type T: gp_Torus
        	:rtype: None
        """
        return _IntSurf.IntSurf_Quadric_SetValue(self, *args)


    def Sphere(self, *args) -> "gp_Sphere":
        """:rtype: gp_Sphere"""
        return _IntSurf.IntSurf_Quadric_Sphere(self, *args)


    def Torus(self, *args) -> "gp_Torus":
        """:rtype: gp_Torus"""
        return _IntSurf.IntSurf_Quadric_Torus(self, *args)


    def TypeQuadric(self, *args) -> "GeomAbs_SurfaceType":
        """:rtype: GeomAbs_SurfaceType"""
        return _IntSurf.IntSurf_Quadric_TypeQuadric(self, *args)


    def ValAndGrad(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param Dist:
        	:type Dist: float
        	:param Grad:
        	:type Grad: gp_Vec
        	:rtype: None
        """
        return _IntSurf.IntSurf_Quadric_ValAndGrad(self, *args)


    def Value(self, *args) -> "gp_Pnt":
        """
        :param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: gp_Pnt
        """
        return _IntSurf.IntSurf_Quadric_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_Quadric
IntSurf_Quadric.Cone = new_instancemethod(_IntSurf.IntSurf_Quadric_Cone, None, IntSurf_Quadric)
IntSurf_Quadric.Cylinder = new_instancemethod(_IntSurf.IntSurf_Quadric_Cylinder, None, IntSurf_Quadric)
IntSurf_Quadric.D1 = new_instancemethod(_IntSurf.IntSurf_Quadric_D1, None, IntSurf_Quadric)
IntSurf_Quadric.DN = new_instancemethod(_IntSurf.IntSurf_Quadric_DN, None, IntSurf_Quadric)
IntSurf_Quadric.Distance = new_instancemethod(_IntSurf.IntSurf_Quadric_Distance, None, IntSurf_Quadric)
IntSurf_Quadric.Gradient = new_instancemethod(_IntSurf.IntSurf_Quadric_Gradient, None, IntSurf_Quadric)
IntSurf_Quadric.Normale = new_instancemethod(_IntSurf.IntSurf_Quadric_Normale, None, IntSurf_Quadric)
IntSurf_Quadric.Parameters = new_instancemethod(_IntSurf.IntSurf_Quadric_Parameters, None, IntSurf_Quadric)
IntSurf_Quadric.Plane = new_instancemethod(_IntSurf.IntSurf_Quadric_Plane, None, IntSurf_Quadric)
IntSurf_Quadric.SetValue = new_instancemethod(_IntSurf.IntSurf_Quadric_SetValue, None, IntSurf_Quadric)
IntSurf_Quadric.Sphere = new_instancemethod(_IntSurf.IntSurf_Quadric_Sphere, None, IntSurf_Quadric)
IntSurf_Quadric.Torus = new_instancemethod(_IntSurf.IntSurf_Quadric_Torus, None, IntSurf_Quadric)
IntSurf_Quadric.TypeQuadric = new_instancemethod(_IntSurf.IntSurf_Quadric_TypeQuadric, None, IntSurf_Quadric)
IntSurf_Quadric.ValAndGrad = new_instancemethod(_IntSurf.IntSurf_Quadric_ValAndGrad, None, IntSurf_Quadric)
IntSurf_Quadric.Value = new_instancemethod(_IntSurf.IntSurf_Quadric_Value, None, IntSurf_Quadric)
IntSurf_Quadric_swigregister = _IntSurf.IntSurf_Quadric_swigregister
IntSurf_Quadric_swigregister(IntSurf_Quadric)

class IntSurf_QuadricTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Gradient(*args) -> "void":
        """
        * Returns the gradient of the function.
        	:param Quad:
        	:type Quad: IntSurf_Quadric
        	:param X:
        	:type X: float
        	:param Y:
        	:type Y: float
        	:param Z:
        	:type Z: float
        	:param V:
        	:type V: gp_Vec
        	:rtype: None
        """
        return _IntSurf.IntSurf_QuadricTool_Gradient(*args)

    Gradient = staticmethod(Gradient)

    def Tolerance(*args) -> "Standard_Real":
        """
        * returns the tolerance of the zero of the implicit function
        	:param Quad:
        	:type Quad: IntSurf_Quadric
        	:rtype: float
        """
        return _IntSurf.IntSurf_QuadricTool_Tolerance(*args)

    Tolerance = staticmethod(Tolerance)

    def Value(*args) -> "Standard_Real":
        """
        * Returns the value of the function.
        	:param Quad:
        	:type Quad: IntSurf_Quadric
        	:param X:
        	:type X: float
        	:param Y:
        	:type Y: float
        	:param Z:
        	:type Z: float
        	:rtype: float
        """
        return _IntSurf.IntSurf_QuadricTool_Value(*args)

    Value = staticmethod(Value)

    def ValueAndGradient(*args) -> "Standard_Real &":
        """
        * Returns the value and the gradient.
        	:param Quad:
        	:type Quad: IntSurf_Quadric
        	:param X:
        	:type X: float
        	:param Y:
        	:type Y: float
        	:param Z:
        	:type Z: float
        	:param Val:
        	:type Val: float
        	:param Grad:
        	:type Grad: gp_Vec
        	:rtype: None
        """
        return _IntSurf.IntSurf_QuadricTool_ValueAndGradient(*args)

    ValueAndGradient = staticmethod(ValueAndGradient)

    __repr__ = _dumps_object


    def __init__(self):
        _IntSurf.IntSurf_QuadricTool_swiginit(self, _IntSurf.new_IntSurf_QuadricTool())
    __swig_destroy__ = _IntSurf.delete_IntSurf_QuadricTool
IntSurf_QuadricTool_swigregister = _IntSurf.IntSurf_QuadricTool_swigregister
IntSurf_QuadricTool_swigregister(IntSurf_QuadricTool)

def IntSurf_QuadricTool_Gradient(*args) -> "void":
    """
    * Returns the gradient of the function.
    	:param Quad:
    	:type Quad: IntSurf_Quadric
    	:param X:
    	:type X: float
    	:param Y:
    	:type Y: float
    	:param Z:
    	:type Z: float
    	:param V:
    	:type V: gp_Vec
    	:rtype: None
    """
    return _IntSurf.IntSurf_QuadricTool_Gradient(*args)

def IntSurf_QuadricTool_Tolerance(*args) -> "Standard_Real":
    """
    * returns the tolerance of the zero of the implicit function
    	:param Quad:
    	:type Quad: IntSurf_Quadric
    	:rtype: float
    """
    return _IntSurf.IntSurf_QuadricTool_Tolerance(*args)

def IntSurf_QuadricTool_Value(*args) -> "Standard_Real":
    """
    * Returns the value of the function.
    	:param Quad:
    	:type Quad: IntSurf_Quadric
    	:param X:
    	:type X: float
    	:param Y:
    	:type Y: float
    	:param Z:
    	:type Z: float
    	:rtype: float
    """
    return _IntSurf.IntSurf_QuadricTool_Value(*args)

def IntSurf_QuadricTool_ValueAndGradient(*args) -> "Standard_Real &":
    """
    * Returns the value and the gradient.
    	:param Quad:
    	:type Quad: IntSurf_Quadric
    	:param X:
    	:type X: float
    	:param Y:
    	:type Y: float
    	:param Z:
    	:type Z: float
    	:param Val:
    	:type Val: float
    	:param Grad:
    	:type Grad: gp_Vec
    	:rtype: None
    """
    return _IntSurf.IntSurf_QuadricTool_ValueAndGradient(*args)

class IntSurf_Transition(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor. Creates an UNDECIDED transition.
        	:rtype: None
        * Create a IN or OUT transition
        	:param Tangent:
        	:type Tangent: bool
        	:param Type:
        	:type Type: IntSurf_TypeTrans
        	:rtype: None
        * Create a TOUCH transition.
        	:param Tangent:
        	:type Tangent: bool
        	:param Situ:
        	:type Situ: IntSurf_Situation
        	:param Oppos:
        	:type Oppos: bool
        	:rtype: None
        """
        _IntSurf.IntSurf_Transition_swiginit(self, _IntSurf.new_IntSurf_Transition(*args))

    def IsOpposite(self, *args) -> "Standard_Boolean":
        """
        * returns a significant value if TransitionType returns TOUCH. In this case, the function returns true when the 2 curves locally define two different parts of the space. If TransitionType returns IN or OUT or UNDECIDED, an exception is raised.
        	:rtype: bool
        """
        return _IntSurf.IntSurf_Transition_IsOpposite(self, *args)


    def IsTangent(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the point is tangent to the arc given by Value. An exception is raised if TransitionType returns UNDECIDED.
        	:rtype: bool
        """
        return _IntSurf.IntSurf_Transition_IsTangent(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Set the values of an IN or OUT transition.
        	:param Tangent:
        	:type Tangent: bool
        	:param Type:
        	:type Type: IntSurf_TypeTrans
        	:rtype: None
        * Set the values of a TOUCH transition.
        	:param Tangent:
        	:type Tangent: bool
        	:param Situ:
        	:type Situ: IntSurf_Situation
        	:param Oppos:
        	:type Oppos: bool
        	:rtype: None
        * Set the values of an UNDECIDED transition.
        	:rtype: None
        """
        return _IntSurf.IntSurf_Transition_SetValue(self, *args)


    def Situation(self, *args) -> "IntSurf_Situation":
        """
        * Returns a significant value if TransitionType returns TOUCH. In this case, the function returns : INSIDE when the intersection line remains inside the Arc, OUTSIDE when it remains outside the Arc, UNKNOWN when the calsulus cannot give results. If TransitionType returns IN, or OUT, or UNDECIDED, a exception is raised.
        	:rtype: IntSurf_Situation
        """
        return _IntSurf.IntSurf_Transition_Situation(self, *args)


    def TransitionType(self, *args) -> "IntSurf_TypeTrans":
        """
        * Returns the type of Transition (in/out/touch/undecided) for the arc given by value. This the transition of the intersection line compared to the Arc of restriction, i-e when the function returns INSIDE for example, it means that the intersection line goes inside the part of plane limited by the arc of restriction.
        	:rtype: IntSurf_TypeTrans
        """
        return _IntSurf.IntSurf_Transition_TransitionType(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_Transition
IntSurf_Transition.IsOpposite = new_instancemethod(_IntSurf.IntSurf_Transition_IsOpposite, None, IntSurf_Transition)
IntSurf_Transition.IsTangent = new_instancemethod(_IntSurf.IntSurf_Transition_IsTangent, None, IntSurf_Transition)
IntSurf_Transition.SetValue = new_instancemethod(_IntSurf.IntSurf_Transition_SetValue, None, IntSurf_Transition)
IntSurf_Transition.Situation = new_instancemethod(_IntSurf.IntSurf_Transition_Situation, None, IntSurf_Transition)
IntSurf_Transition.TransitionType = new_instancemethod(_IntSurf.IntSurf_Transition_TransitionType, None, IntSurf_Transition)
IntSurf_Transition_swigregister = _IntSurf.IntSurf_Transition_swigregister
IntSurf_Transition_swigregister(IntSurf_Transition)



