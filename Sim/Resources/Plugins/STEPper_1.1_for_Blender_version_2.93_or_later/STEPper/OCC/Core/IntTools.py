# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntTools module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_inttools.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IntTools.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IntTools')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IntTools')
    _IntTools = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntTools', [dirname(__file__)])
        except ImportError:
            import _IntTools
            return _IntTools
        try:
            _mod = imp.load_module('_IntTools', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IntTools = swig_import_helper()
    del swig_import_helper
else:
    import _IntTools
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntTools.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IntTools.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IntTools.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IntTools.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IntTools.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IntTools.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IntTools.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IntTools.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IntTools.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IntTools.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IntTools.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IntTools.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IntTools.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IntTools.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IntTools.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IntTools.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IntTools.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IntTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IntTools.process_exception(error, method_name, class_name)
process_exception = _IntTools.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.TopoDS
import OCC.Core.TopLoc
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.Geom2dHatch
import OCC.Core.IntRes2d
import OCC.Core.HatchGen
import OCC.Core.Geom2dInt
import OCC.Core.IntCurve
import OCC.Core.Extrema
import OCC.Core.Intf
import OCC.Core.GeomAPI
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.AppParCurves
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.IntSurf
import OCC.Core.TopTools
import OCC.Core.IntCurvesFace
import OCC.Core.IntPatch
import OCC.Core.IntAna
import OCC.Core.GeomInt
import OCC.Core.IntImp
import OCC.Core.ApproxInt

def Handle_IntTools_Context_Create() -> "opencascade::handle< IntTools_Context >":
    return _IntTools.Handle_IntTools_Context_Create()
Handle_IntTools_Context_Create = _IntTools.Handle_IntTools_Context_Create

def Handle_IntTools_Context_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IntTools_Context >":
    return _IntTools.Handle_IntTools_Context_DownCast(t)
Handle_IntTools_Context_DownCast = _IntTools.Handle_IntTools_Context_DownCast

def Handle_IntTools_Context_IsNull(t: 'opencascade::handle< IntTools_Context > const &') -> "bool":
    return _IntTools.Handle_IntTools_Context_IsNull(t)
Handle_IntTools_Context_IsNull = _IntTools.Handle_IntTools_Context_IsNull

def Handle_IntTools_TopolTool_Create() -> "opencascade::handle< IntTools_TopolTool >":
    return _IntTools.Handle_IntTools_TopolTool_Create()
Handle_IntTools_TopolTool_Create = _IntTools.Handle_IntTools_TopolTool_Create

def Handle_IntTools_TopolTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IntTools_TopolTool >":
    return _IntTools.Handle_IntTools_TopolTool_DownCast(t)
Handle_IntTools_TopolTool_DownCast = _IntTools.Handle_IntTools_TopolTool_DownCast

def Handle_IntTools_TopolTool_IsNull(t: 'opencascade::handle< IntTools_TopolTool > const &') -> "bool":
    return _IntTools.Handle_IntTools_TopolTool_IsNull(t)
Handle_IntTools_TopolTool_IsNull = _IntTools.Handle_IntTools_TopolTool_IsNull
class IntTools_DataMapOfSurfaceSampleBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_DataMapOfSurfaceSampleBox_swiginit(self, _IntTools.new_IntTools_DataMapOfSurfaceSampleBox(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_DataMapOfSurfaceSampleBox
IntTools_DataMapOfSurfaceSampleBox.begin = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_begin, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.end = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_end, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.cbegin = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_cbegin, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.cend = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_cend, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Exchange = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Exchange, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Assign = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Assign, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Set = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Set, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.ReSize = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_ReSize, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Bind = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Bind, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Bound = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Bound, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.IsBound = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_IsBound, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.UnBind = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_UnBind, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Seek = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Seek, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Find = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Find, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.ChangeSeek = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_ChangeSeek, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.ChangeFind = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_ChangeFind, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.__call__ = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox___call__, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Clear = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Clear, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox.Size = new_instancemethod(_IntTools.IntTools_DataMapOfSurfaceSampleBox_Size, None, IntTools_DataMapOfSurfaceSampleBox)
IntTools_DataMapOfSurfaceSampleBox_swigregister = _IntTools.IntTools_DataMapOfSurfaceSampleBox_swigregister
IntTools_DataMapOfSurfaceSampleBox_swigregister(IntTools_DataMapOfSurfaceSampleBox)

class IntTools_SequenceOfCommonPrts(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_SequenceOfCommonPrts_swiginit(self, _IntTools.new_IntTools_SequenceOfCommonPrts(*args))
    delNode = staticmethod(_IntTools.IntTools_SequenceOfCommonPrts_delNode)
    __swig_destroy__ = _IntTools.delete_IntTools_SequenceOfCommonPrts
IntTools_SequenceOfCommonPrts.begin = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_begin, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.end = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_end, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.cbegin = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_cbegin, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.cend = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_cend, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Size = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Size, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Length = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Length, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Lower = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Lower, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Upper = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Upper, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.IsEmpty = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_IsEmpty, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Reverse = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Reverse, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Exchange = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Exchange, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Clear = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Clear, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Assign = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Assign, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Set = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Set, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Remove = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Remove, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Append = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Append, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Prepend = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Prepend, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.InsertBefore = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_InsertBefore, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.InsertAfter = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_InsertAfter, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Split = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Split, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.First = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_First, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.ChangeFirst = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_ChangeFirst, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Last = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Last, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.ChangeLast = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_ChangeLast, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.Value = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_Value, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.ChangeValue = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_ChangeValue, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.__call__ = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts___call__, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts.SetValue = new_instancemethod(_IntTools.IntTools_SequenceOfCommonPrts_SetValue, None, IntTools_SequenceOfCommonPrts)
IntTools_SequenceOfCommonPrts_swigregister = _IntTools.IntTools_SequenceOfCommonPrts_swigregister
IntTools_SequenceOfCommonPrts_swigregister(IntTools_SequenceOfCommonPrts)

def IntTools_SequenceOfCommonPrts_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _IntTools.IntTools_SequenceOfCommonPrts_delNode(theNode, theAl)
IntTools_SequenceOfCommonPrts_delNode = _IntTools.IntTools_SequenceOfCommonPrts_delNode

class IntTools_Array1OfRoots(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_Array1OfRoots_swiginit(self, _IntTools.new_IntTools_Array1OfRoots(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_Array1OfRoots

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

IntTools_Array1OfRoots.begin = new_instancemethod(_IntTools.IntTools_Array1OfRoots_begin, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.end = new_instancemethod(_IntTools.IntTools_Array1OfRoots_end, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.cbegin = new_instancemethod(_IntTools.IntTools_Array1OfRoots_cbegin, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.cend = new_instancemethod(_IntTools.IntTools_Array1OfRoots_cend, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Init = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Init, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Size = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Size, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Length = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Length, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.IsEmpty = new_instancemethod(_IntTools.IntTools_Array1OfRoots_IsEmpty, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Lower = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Lower, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Upper = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Upper, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.IsDeletable = new_instancemethod(_IntTools.IntTools_Array1OfRoots_IsDeletable, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.IsAllocated = new_instancemethod(_IntTools.IntTools_Array1OfRoots_IsAllocated, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Assign = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Assign, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Move = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Move, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Set = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Set, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.First = new_instancemethod(_IntTools.IntTools_Array1OfRoots_First, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.ChangeFirst = new_instancemethod(_IntTools.IntTools_Array1OfRoots_ChangeFirst, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Last = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Last, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.ChangeLast = new_instancemethod(_IntTools.IntTools_Array1OfRoots_ChangeLast, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Value = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Value, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.ChangeValue = new_instancemethod(_IntTools.IntTools_Array1OfRoots_ChangeValue, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.__call__ = new_instancemethod(_IntTools.IntTools_Array1OfRoots___call__, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.SetValue = new_instancemethod(_IntTools.IntTools_Array1OfRoots_SetValue, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots.Resize = new_instancemethod(_IntTools.IntTools_Array1OfRoots_Resize, None, IntTools_Array1OfRoots)
IntTools_Array1OfRoots_swigregister = _IntTools.IntTools_Array1OfRoots_swigregister
IntTools_Array1OfRoots_swigregister(IntTools_Array1OfRoots)

class IntTools_MapOfCurveSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_MapOfCurveSample_swiginit(self, _IntTools.new_IntTools_MapOfCurveSample(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_MapOfCurveSample
IntTools_MapOfCurveSample.cbegin = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_cbegin, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.cend = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_cend, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Exchange = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Exchange, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Assign = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Assign, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Set = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Set, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.ReSize = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_ReSize, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Add = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Add, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Added = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Added, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Remove = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Remove, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Clear = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Clear, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Size = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Size, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.IsEqual = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_IsEqual, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Contains = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Contains, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Union = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Union, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Unite = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Unite, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.HasIntersection = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_HasIntersection, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Intersection = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Intersection, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Intersect = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Intersect, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Subtraction = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Subtraction, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Subtract = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Subtract, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Difference = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Difference, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample.Differ = new_instancemethod(_IntTools.IntTools_MapOfCurveSample_Differ, None, IntTools_MapOfCurveSample)
IntTools_MapOfCurveSample_swigregister = _IntTools.IntTools_MapOfCurveSample_swigregister
IntTools_MapOfCurveSample_swigregister(IntTools_MapOfCurveSample)

class IntTools_SequenceOfCurves(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_SequenceOfCurves_swiginit(self, _IntTools.new_IntTools_SequenceOfCurves(*args))
    delNode = staticmethod(_IntTools.IntTools_SequenceOfCurves_delNode)
    __swig_destroy__ = _IntTools.delete_IntTools_SequenceOfCurves
IntTools_SequenceOfCurves.begin = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_begin, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.end = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_end, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.cbegin = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_cbegin, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.cend = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_cend, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Size = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Size, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Length = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Length, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Lower = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Lower, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Upper = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Upper, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.IsEmpty = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_IsEmpty, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Reverse = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Reverse, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Exchange = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Exchange, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Clear = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Clear, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Assign = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Assign, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Set = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Set, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Remove = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Remove, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Append = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Append, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Prepend = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Prepend, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.InsertBefore = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_InsertBefore, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.InsertAfter = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_InsertAfter, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Split = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Split, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.First = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_First, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.ChangeFirst = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_ChangeFirst, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Last = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Last, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.ChangeLast = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_ChangeLast, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.Value = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_Value, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.ChangeValue = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_ChangeValue, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.__call__ = new_instancemethod(_IntTools.IntTools_SequenceOfCurves___call__, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves.SetValue = new_instancemethod(_IntTools.IntTools_SequenceOfCurves_SetValue, None, IntTools_SequenceOfCurves)
IntTools_SequenceOfCurves_swigregister = _IntTools.IntTools_SequenceOfCurves_swigregister
IntTools_SequenceOfCurves_swigregister(IntTools_SequenceOfCurves)

def IntTools_SequenceOfCurves_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _IntTools.IntTools_SequenceOfCurves_delNode(theNode, theAl)
IntTools_SequenceOfCurves_delNode = _IntTools.IntTools_SequenceOfCurves_delNode

class IntTools_ListOfSurfaceRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_ListOfSurfaceRangeSample_swiginit(self, _IntTools.new_IntTools_ListOfSurfaceRangeSample(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_ListOfSurfaceRangeSample
IntTools_ListOfSurfaceRangeSample.begin = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_begin, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.end = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_end, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.cbegin = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_cbegin, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.cend = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_cend, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Size = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Size, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Assign = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Assign, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Set = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Set, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Clear = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Clear, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.First = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_First, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Last = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Last, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Append = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Append, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Prepend = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Prepend, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.RemoveFirst = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_RemoveFirst, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Remove = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Remove, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.InsertBefore = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_InsertBefore, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.InsertAfter = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_InsertAfter, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample.Reverse = new_instancemethod(_IntTools.IntTools_ListOfSurfaceRangeSample_Reverse, None, IntTools_ListOfSurfaceRangeSample)
IntTools_ListOfSurfaceRangeSample_swigregister = _IntTools.IntTools_ListOfSurfaceRangeSample_swigregister
IntTools_ListOfSurfaceRangeSample_swigregister(IntTools_ListOfSurfaceRangeSample)

class IntTools_ListIteratorOfListOfSurfaceRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_swiginit(self, _IntTools.new_IntTools_ListIteratorOfListOfSurfaceRangeSample(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_ListIteratorOfListOfSurfaceRangeSample
IntTools_ListIteratorOfListOfSurfaceRangeSample.More = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_More, None, IntTools_ListIteratorOfListOfSurfaceRangeSample)
IntTools_ListIteratorOfListOfSurfaceRangeSample.Next = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_Next, None, IntTools_ListIteratorOfListOfSurfaceRangeSample)
IntTools_ListIteratorOfListOfSurfaceRangeSample.Value = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_Value, None, IntTools_ListIteratorOfListOfSurfaceRangeSample)
IntTools_ListIteratorOfListOfSurfaceRangeSample.ChangeValue = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_ChangeValue, None, IntTools_ListIteratorOfListOfSurfaceRangeSample)
IntTools_ListIteratorOfListOfSurfaceRangeSample_swigregister = _IntTools.IntTools_ListIteratorOfListOfSurfaceRangeSample_swigregister
IntTools_ListIteratorOfListOfSurfaceRangeSample_swigregister(IntTools_ListIteratorOfListOfSurfaceRangeSample)

class IntTools_ListOfCurveRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_ListOfCurveRangeSample_swiginit(self, _IntTools.new_IntTools_ListOfCurveRangeSample(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_ListOfCurveRangeSample
IntTools_ListOfCurveRangeSample.begin = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_begin, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.end = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_end, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.cbegin = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_cbegin, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.cend = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_cend, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Size = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Size, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Assign = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Assign, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Set = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Set, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Clear = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Clear, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.First = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_First, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Last = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Last, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Append = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Append, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Prepend = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Prepend, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.RemoveFirst = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_RemoveFirst, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Remove = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Remove, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.InsertBefore = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_InsertBefore, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.InsertAfter = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_InsertAfter, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample.Reverse = new_instancemethod(_IntTools.IntTools_ListOfCurveRangeSample_Reverse, None, IntTools_ListOfCurveRangeSample)
IntTools_ListOfCurveRangeSample_swigregister = _IntTools.IntTools_ListOfCurveRangeSample_swigregister
IntTools_ListOfCurveRangeSample_swigregister(IntTools_ListOfCurveRangeSample)

class IntTools_ListIteratorOfListOfCurveRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_swiginit(self, _IntTools.new_IntTools_ListIteratorOfListOfCurveRangeSample(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_ListIteratorOfListOfCurveRangeSample
IntTools_ListIteratorOfListOfCurveRangeSample.More = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_More, None, IntTools_ListIteratorOfListOfCurveRangeSample)
IntTools_ListIteratorOfListOfCurveRangeSample.Next = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_Next, None, IntTools_ListIteratorOfListOfCurveRangeSample)
IntTools_ListIteratorOfListOfCurveRangeSample.Value = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_Value, None, IntTools_ListIteratorOfListOfCurveRangeSample)
IntTools_ListIteratorOfListOfCurveRangeSample.ChangeValue = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_ChangeValue, None, IntTools_ListIteratorOfListOfCurveRangeSample)
IntTools_ListIteratorOfListOfCurveRangeSample_swigregister = _IntTools.IntTools_ListIteratorOfListOfCurveRangeSample_swigregister
IntTools_ListIteratorOfListOfCurveRangeSample_swigregister(IntTools_ListIteratorOfListOfCurveRangeSample)

class IntTools_Array1OfRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_Array1OfRange_swiginit(self, _IntTools.new_IntTools_Array1OfRange(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_Array1OfRange

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

IntTools_Array1OfRange.begin = new_instancemethod(_IntTools.IntTools_Array1OfRange_begin, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.end = new_instancemethod(_IntTools.IntTools_Array1OfRange_end, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.cbegin = new_instancemethod(_IntTools.IntTools_Array1OfRange_cbegin, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.cend = new_instancemethod(_IntTools.IntTools_Array1OfRange_cend, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Init = new_instancemethod(_IntTools.IntTools_Array1OfRange_Init, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Size = new_instancemethod(_IntTools.IntTools_Array1OfRange_Size, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Length = new_instancemethod(_IntTools.IntTools_Array1OfRange_Length, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.IsEmpty = new_instancemethod(_IntTools.IntTools_Array1OfRange_IsEmpty, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Lower = new_instancemethod(_IntTools.IntTools_Array1OfRange_Lower, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Upper = new_instancemethod(_IntTools.IntTools_Array1OfRange_Upper, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.IsDeletable = new_instancemethod(_IntTools.IntTools_Array1OfRange_IsDeletable, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.IsAllocated = new_instancemethod(_IntTools.IntTools_Array1OfRange_IsAllocated, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Assign = new_instancemethod(_IntTools.IntTools_Array1OfRange_Assign, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Move = new_instancemethod(_IntTools.IntTools_Array1OfRange_Move, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Set = new_instancemethod(_IntTools.IntTools_Array1OfRange_Set, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.First = new_instancemethod(_IntTools.IntTools_Array1OfRange_First, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.ChangeFirst = new_instancemethod(_IntTools.IntTools_Array1OfRange_ChangeFirst, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Last = new_instancemethod(_IntTools.IntTools_Array1OfRange_Last, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.ChangeLast = new_instancemethod(_IntTools.IntTools_Array1OfRange_ChangeLast, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Value = new_instancemethod(_IntTools.IntTools_Array1OfRange_Value, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.ChangeValue = new_instancemethod(_IntTools.IntTools_Array1OfRange_ChangeValue, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.__call__ = new_instancemethod(_IntTools.IntTools_Array1OfRange___call__, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.SetValue = new_instancemethod(_IntTools.IntTools_Array1OfRange_SetValue, None, IntTools_Array1OfRange)
IntTools_Array1OfRange.Resize = new_instancemethod(_IntTools.IntTools_Array1OfRange_Resize, None, IntTools_Array1OfRange)
IntTools_Array1OfRange_swigregister = _IntTools.IntTools_Array1OfRange_swigregister
IntTools_Array1OfRange_swigregister(IntTools_Array1OfRange)

class IntTools_ListOfBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_ListOfBox_swiginit(self, _IntTools.new_IntTools_ListOfBox(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_ListOfBox
IntTools_ListOfBox.begin = new_instancemethod(_IntTools.IntTools_ListOfBox_begin, None, IntTools_ListOfBox)
IntTools_ListOfBox.end = new_instancemethod(_IntTools.IntTools_ListOfBox_end, None, IntTools_ListOfBox)
IntTools_ListOfBox.cbegin = new_instancemethod(_IntTools.IntTools_ListOfBox_cbegin, None, IntTools_ListOfBox)
IntTools_ListOfBox.cend = new_instancemethod(_IntTools.IntTools_ListOfBox_cend, None, IntTools_ListOfBox)
IntTools_ListOfBox.Size = new_instancemethod(_IntTools.IntTools_ListOfBox_Size, None, IntTools_ListOfBox)
IntTools_ListOfBox.Assign = new_instancemethod(_IntTools.IntTools_ListOfBox_Assign, None, IntTools_ListOfBox)
IntTools_ListOfBox.Set = new_instancemethod(_IntTools.IntTools_ListOfBox_Set, None, IntTools_ListOfBox)
IntTools_ListOfBox.Clear = new_instancemethod(_IntTools.IntTools_ListOfBox_Clear, None, IntTools_ListOfBox)
IntTools_ListOfBox.First = new_instancemethod(_IntTools.IntTools_ListOfBox_First, None, IntTools_ListOfBox)
IntTools_ListOfBox.Last = new_instancemethod(_IntTools.IntTools_ListOfBox_Last, None, IntTools_ListOfBox)
IntTools_ListOfBox.Append = new_instancemethod(_IntTools.IntTools_ListOfBox_Append, None, IntTools_ListOfBox)
IntTools_ListOfBox.Prepend = new_instancemethod(_IntTools.IntTools_ListOfBox_Prepend, None, IntTools_ListOfBox)
IntTools_ListOfBox.RemoveFirst = new_instancemethod(_IntTools.IntTools_ListOfBox_RemoveFirst, None, IntTools_ListOfBox)
IntTools_ListOfBox.Remove = new_instancemethod(_IntTools.IntTools_ListOfBox_Remove, None, IntTools_ListOfBox)
IntTools_ListOfBox.InsertBefore = new_instancemethod(_IntTools.IntTools_ListOfBox_InsertBefore, None, IntTools_ListOfBox)
IntTools_ListOfBox.InsertAfter = new_instancemethod(_IntTools.IntTools_ListOfBox_InsertAfter, None, IntTools_ListOfBox)
IntTools_ListOfBox.Reverse = new_instancemethod(_IntTools.IntTools_ListOfBox_Reverse, None, IntTools_ListOfBox)
IntTools_ListOfBox_swigregister = _IntTools.IntTools_ListOfBox_swigregister
IntTools_ListOfBox_swigregister(IntTools_ListOfBox)

class IntTools_ListIteratorOfListOfBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_ListIteratorOfListOfBox_swiginit(self, _IntTools.new_IntTools_ListIteratorOfListOfBox(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_ListIteratorOfListOfBox
IntTools_ListIteratorOfListOfBox.More = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfBox_More, None, IntTools_ListIteratorOfListOfBox)
IntTools_ListIteratorOfListOfBox.Next = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfBox_Next, None, IntTools_ListIteratorOfListOfBox)
IntTools_ListIteratorOfListOfBox.Value = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfBox_Value, None, IntTools_ListIteratorOfListOfBox)
IntTools_ListIteratorOfListOfBox.ChangeValue = new_instancemethod(_IntTools.IntTools_ListIteratorOfListOfBox_ChangeValue, None, IntTools_ListIteratorOfListOfBox)
IntTools_ListIteratorOfListOfBox_swigregister = _IntTools.IntTools_ListIteratorOfListOfBox_swigregister
IntTools_ListIteratorOfListOfBox_swigregister(IntTools_ListIteratorOfListOfBox)

class IntTools_MapOfSurfaceSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_MapOfSurfaceSample_swiginit(self, _IntTools.new_IntTools_MapOfSurfaceSample(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_MapOfSurfaceSample
IntTools_MapOfSurfaceSample.cbegin = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_cbegin, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.cend = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_cend, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Exchange = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Exchange, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Assign = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Assign, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Set = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Set, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.ReSize = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_ReSize, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Add = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Add, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Added = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Added, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Remove = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Remove, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Clear = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Clear, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Size = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Size, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.IsEqual = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_IsEqual, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Contains = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Contains, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Union = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Union, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Unite = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Unite, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.HasIntersection = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_HasIntersection, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Intersection = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Intersection, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Intersect = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Intersect, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Subtraction = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Subtraction, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Subtract = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Subtract, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Difference = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Difference, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample.Differ = new_instancemethod(_IntTools.IntTools_MapOfSurfaceSample_Differ, None, IntTools_MapOfSurfaceSample)
IntTools_MapOfSurfaceSample_swigregister = _IntTools.IntTools_MapOfSurfaceSample_swigregister
IntTools_MapOfSurfaceSample_swigregister(IntTools_MapOfSurfaceSample)

class IntTools_SequenceOfRanges(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_SequenceOfRanges_swiginit(self, _IntTools.new_IntTools_SequenceOfRanges(*args))
    delNode = staticmethod(_IntTools.IntTools_SequenceOfRanges_delNode)
    __swig_destroy__ = _IntTools.delete_IntTools_SequenceOfRanges
IntTools_SequenceOfRanges.begin = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_begin, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.end = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_end, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.cbegin = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_cbegin, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.cend = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_cend, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Size = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Size, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Length = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Length, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Lower = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Lower, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Upper = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Upper, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.IsEmpty = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_IsEmpty, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Reverse = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Reverse, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Exchange = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Exchange, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Clear = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Clear, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Assign = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Assign, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Set = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Set, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Remove = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Remove, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Append = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Append, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Prepend = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Prepend, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.InsertBefore = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_InsertBefore, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.InsertAfter = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_InsertAfter, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Split = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Split, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.First = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_First, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.ChangeFirst = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_ChangeFirst, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Last = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Last, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.ChangeLast = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_ChangeLast, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.Value = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_Value, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.ChangeValue = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_ChangeValue, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.__call__ = new_instancemethod(_IntTools.IntTools_SequenceOfRanges___call__, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges.SetValue = new_instancemethod(_IntTools.IntTools_SequenceOfRanges_SetValue, None, IntTools_SequenceOfRanges)
IntTools_SequenceOfRanges_swigregister = _IntTools.IntTools_SequenceOfRanges_swigregister
IntTools_SequenceOfRanges_swigregister(IntTools_SequenceOfRanges)

def IntTools_SequenceOfRanges_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _IntTools.IntTools_SequenceOfRanges_delNode(theNode, theAl)
IntTools_SequenceOfRanges_delNode = _IntTools.IntTools_SequenceOfRanges_delNode

class IntTools_SequenceOfRoots(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_SequenceOfRoots_swiginit(self, _IntTools.new_IntTools_SequenceOfRoots(*args))
    delNode = staticmethod(_IntTools.IntTools_SequenceOfRoots_delNode)
    __swig_destroy__ = _IntTools.delete_IntTools_SequenceOfRoots
IntTools_SequenceOfRoots.begin = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_begin, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.end = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_end, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.cbegin = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_cbegin, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.cend = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_cend, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Size = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Size, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Length = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Length, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Lower = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Lower, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Upper = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Upper, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.IsEmpty = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_IsEmpty, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Reverse = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Reverse, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Exchange = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Exchange, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Clear = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Clear, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Assign = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Assign, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Set = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Set, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Remove = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Remove, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Append = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Append, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Prepend = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Prepend, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.InsertBefore = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_InsertBefore, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.InsertAfter = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_InsertAfter, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Split = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Split, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.First = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_First, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.ChangeFirst = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_ChangeFirst, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Last = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Last, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.ChangeLast = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_ChangeLast, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.Value = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_Value, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.ChangeValue = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_ChangeValue, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.__call__ = new_instancemethod(_IntTools.IntTools_SequenceOfRoots___call__, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots.SetValue = new_instancemethod(_IntTools.IntTools_SequenceOfRoots_SetValue, None, IntTools_SequenceOfRoots)
IntTools_SequenceOfRoots_swigregister = _IntTools.IntTools_SequenceOfRoots_swigregister
IntTools_SequenceOfRoots_swigregister(IntTools_SequenceOfRoots)

def IntTools_SequenceOfRoots_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _IntTools.IntTools_SequenceOfRoots_delNode(theNode, theAl)
IntTools_SequenceOfRoots_delNode = _IntTools.IntTools_SequenceOfRoots_delNode

class IntTools_SequenceOfPntOn2Faces(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_SequenceOfPntOn2Faces_swiginit(self, _IntTools.new_IntTools_SequenceOfPntOn2Faces(*args))
    delNode = staticmethod(_IntTools.IntTools_SequenceOfPntOn2Faces_delNode)
    __swig_destroy__ = _IntTools.delete_IntTools_SequenceOfPntOn2Faces
IntTools_SequenceOfPntOn2Faces.begin = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_begin, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.end = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_end, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.cbegin = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_cbegin, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.cend = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_cend, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Size = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Size, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Length = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Length, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Lower = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Lower, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Upper = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Upper, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.IsEmpty = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_IsEmpty, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Reverse = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Reverse, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Exchange = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Exchange, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Clear = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Clear, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Assign = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Assign, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Set = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Set, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Remove = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Remove, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Append = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Append, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Prepend = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Prepend, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.InsertBefore = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_InsertBefore, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.InsertAfter = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_InsertAfter, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Split = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Split, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.First = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_First, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.ChangeFirst = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_ChangeFirst, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Last = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Last, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.ChangeLast = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_ChangeLast, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.Value = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_Value, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.ChangeValue = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_ChangeValue, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.__call__ = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces___call__, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces.SetValue = new_instancemethod(_IntTools.IntTools_SequenceOfPntOn2Faces_SetValue, None, IntTools_SequenceOfPntOn2Faces)
IntTools_SequenceOfPntOn2Faces_swigregister = _IntTools.IntTools_SequenceOfPntOn2Faces_swigregister
IntTools_SequenceOfPntOn2Faces_swigregister(IntTools_SequenceOfPntOn2Faces)

def IntTools_SequenceOfPntOn2Faces_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _IntTools.IntTools_SequenceOfPntOn2Faces_delNode(theNode, theAl)
IntTools_SequenceOfPntOn2Faces_delNode = _IntTools.IntTools_SequenceOfPntOn2Faces_delNode

class IntTools_DataMapOfCurveSampleBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntTools.IntTools_DataMapOfCurveSampleBox_swiginit(self, _IntTools.new_IntTools_DataMapOfCurveSampleBox(*args))
    __swig_destroy__ = _IntTools.delete_IntTools_DataMapOfCurveSampleBox
IntTools_DataMapOfCurveSampleBox.begin = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_begin, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.end = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_end, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.cbegin = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_cbegin, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.cend = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_cend, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Exchange = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Exchange, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Assign = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Assign, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Set = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Set, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.ReSize = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_ReSize, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Bind = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Bind, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Bound = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Bound, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.IsBound = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_IsBound, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.UnBind = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_UnBind, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Seek = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Seek, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Find = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Find, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.ChangeSeek = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_ChangeSeek, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.ChangeFind = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_ChangeFind, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.__call__ = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox___call__, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Clear = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Clear, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox.Size = new_instancemethod(_IntTools.IntTools_DataMapOfCurveSampleBox_Size, None, IntTools_DataMapOfCurveSampleBox)
IntTools_DataMapOfCurveSampleBox_swigregister = _IntTools.IntTools_DataMapOfCurveSampleBox_swigregister
IntTools_DataMapOfCurveSampleBox_swigregister(IntTools_DataMapOfCurveSampleBox)

class inttools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FindRootStates(*args) -> "void":
        """
        * Find the states (before and after) for each Root from the sequence aSeq
        	:param aSeq:
        	:type aSeq: IntTools_SequenceOfRoots
        	:param anEpsNull:
        	:type anEpsNull: float
        	:rtype: void
        """
        return _IntTools.inttools_FindRootStates(*args)

    FindRootStates = staticmethod(FindRootStates)

    def GetRadius(*args) -> "Standard_Real &":
        """
        :param C:
        	:type C: BRepAdaptor_Curve
        	:param t1:
        	:type t1: float
        	:param t3:
        	:type t3: float
        	:param R:
        	:type R: float
        	:rtype: int
        """
        return _IntTools.inttools_GetRadius(*args)

    GetRadius = staticmethod(GetRadius)

    def Length(*args) -> "Standard_Real":
        """
        * returns the length of the edge;
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: float
        """
        return _IntTools.inttools_Length(*args)

    Length = staticmethod(Length)

    def Parameter(*args) -> "Standard_Real &":
        """
        :param P:
        	:type P: gp_Pnt
        	:param Curve:
        	:type Curve: Geom_Curve
        	:param aParm:
        	:type aParm: float
        	:rtype: int
        """
        return _IntTools.inttools_Parameter(*args)

    Parameter = staticmethod(Parameter)

    def PrepareArgs(*args) -> "Standard_Integer":
        """
        :param C:
        	:type C: BRepAdaptor_Curve
        	:param tMax:
        	:type tMax: float
        	:param tMin:
        	:type tMin: float
        	:param Discret:
        	:type Discret: int
        	:param Deflect:
        	:type Deflect: float
        	:param anArgs:
        	:type anArgs: IntTools_CArray1OfReal
        	:rtype: int
        """
        return _IntTools.inttools_PrepareArgs(*args)

    PrepareArgs = staticmethod(PrepareArgs)

    def RemoveIdenticalRoots(*args) -> "void":
        """
        * Remove from the sequence aSeq the Roots that have values ti and tj such as |ti-tj] < anEpsT.
        	:param aSeq:
        	:type aSeq: IntTools_SequenceOfRoots
        	:param anEpsT:
        	:type anEpsT: float
        	:rtype: void
        """
        return _IntTools.inttools_RemoveIdenticalRoots(*args)

    RemoveIdenticalRoots = staticmethod(RemoveIdenticalRoots)

    def SortRoots(*args) -> "void":
        """
        * Sort the sequence aSeq of the Roots to arrange the Roons in increasing order
        	:param aSeq:
        	:type aSeq: IntTools_SequenceOfRoots
        	:param anEpsT:
        	:type anEpsT: float
        	:rtype: void
        """
        return _IntTools.inttools_SortRoots(*args)

    SortRoots = staticmethod(SortRoots)

    __repr__ = _dumps_object


    def __init__(self):
        _IntTools.inttools_swiginit(self, _IntTools.new_inttools())
    __swig_destroy__ = _IntTools.delete_inttools
inttools_swigregister = _IntTools.inttools_swigregister
inttools_swigregister(inttools)

def inttools_FindRootStates(*args) -> "void":
    """
    * Find the states (before and after) for each Root from the sequence aSeq
    	:param aSeq:
    	:type aSeq: IntTools_SequenceOfRoots
    	:param anEpsNull:
    	:type anEpsNull: float
    	:rtype: void
    """
    return _IntTools.inttools_FindRootStates(*args)

def inttools_GetRadius(*args) -> "Standard_Real &":
    """
    :param C:
    	:type C: BRepAdaptor_Curve
    	:param t1:
    	:type t1: float
    	:param t3:
    	:type t3: float
    	:param R:
    	:type R: float
    	:rtype: int
    """
    return _IntTools.inttools_GetRadius(*args)

def inttools_Length(*args) -> "Standard_Real":
    """
    * returns the length of the edge;
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: float
    """
    return _IntTools.inttools_Length(*args)

def inttools_Parameter(*args) -> "Standard_Real &":
    """
    :param P:
    	:type P: gp_Pnt
    	:param Curve:
    	:type Curve: Geom_Curve
    	:param aParm:
    	:type aParm: float
    	:rtype: int
    """
    return _IntTools.inttools_Parameter(*args)

def inttools_PrepareArgs(*args) -> "Standard_Integer":
    """
    :param C:
    	:type C: BRepAdaptor_Curve
    	:param tMax:
    	:type tMax: float
    	:param tMin:
    	:type tMin: float
    	:param Discret:
    	:type Discret: int
    	:param Deflect:
    	:type Deflect: float
    	:param anArgs:
    	:type anArgs: IntTools_CArray1OfReal
    	:rtype: int
    """
    return _IntTools.inttools_PrepareArgs(*args)

def inttools_RemoveIdenticalRoots(*args) -> "void":
    """
    * Remove from the sequence aSeq the Roots that have values ti and tj such as |ti-tj] < anEpsT.
    	:param aSeq:
    	:type aSeq: IntTools_SequenceOfRoots
    	:param anEpsT:
    	:type anEpsT: float
    	:rtype: void
    """
    return _IntTools.inttools_RemoveIdenticalRoots(*args)

def inttools_SortRoots(*args) -> "void":
    """
    * Sort the sequence aSeq of the Roots to arrange the Roons in increasing order
    	:param aSeq:
    	:type aSeq: IntTools_SequenceOfRoots
    	:param anEpsT:
    	:type anEpsT: float
    	:rtype: void
    """
    return _IntTools.inttools_SortRoots(*args)

class IntTools_BaseRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetDepth(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntTools.IntTools_BaseRangeSample_GetDepth(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param theDepth:
        	:type theDepth: int
        	:rtype: None
        """
        _IntTools.IntTools_BaseRangeSample_swiginit(self, _IntTools.new_IntTools_BaseRangeSample(*args))

    def SetDepth(self, *args) -> "void":
        """
        :param theDepth:
        	:type theDepth: int
        	:rtype: None
        """
        return _IntTools.IntTools_BaseRangeSample_SetDepth(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_BaseRangeSample
IntTools_BaseRangeSample.GetDepth = new_instancemethod(_IntTools.IntTools_BaseRangeSample_GetDepth, None, IntTools_BaseRangeSample)
IntTools_BaseRangeSample.SetDepth = new_instancemethod(_IntTools.IntTools_BaseRangeSample_SetDepth, None, IntTools_BaseRangeSample)
IntTools_BaseRangeSample_swigregister = _IntTools.IntTools_BaseRangeSample_swigregister
IntTools_BaseRangeSample_swigregister(IntTools_BaseRangeSample)

class IntTools_BeanFaceIntersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Context(self, *args) -> "opencascade::handle< IntTools_Context > const &":
        """
        * Gets the intersecton context
        	:rtype: opencascade::handle<IntTools_Context>
        """
        return _IntTools.IntTools_BeanFaceIntersector_Context(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes the algorithm //! Warning: The parts of the edge which are on the surface of the face and belong to the whole in the face (if there is) is considered as result
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:rtype: None
        * Initializes the algorithm
        	:param theCurve:
        	:type theCurve: BRepAdaptor_Curve
        	:param theSurface:
        	:type theSurface: BRepAdaptor_Surface
        	:param theBeanTolerance:
        	:type theBeanTolerance: float
        	:param theFaceTolerance:
        	:type theFaceTolerance: float
        	:rtype: None
        * Initializes the algorithm theUMinParameter, ... are used for optimization purposes
        	:param theCurve:
        	:type theCurve: BRepAdaptor_Curve
        	:param theSurface:
        	:type theSurface: BRepAdaptor_Surface
        	:param theFirstParOnCurve:
        	:type theFirstParOnCurve: float
        	:param theLastParOnCurve:
        	:type theLastParOnCurve: float
        	:param theUMinParameter:
        	:type theUMinParameter: float
        	:param theUMaxParameter:
        	:type theUMaxParameter: float
        	:param theVMinParameter:
        	:type theVMinParameter: float
        	:param theVMaxParameter:
        	:type theVMaxParameter: float
        	:param theBeanTolerance:
        	:type theBeanTolerance: float
        	:param theFaceTolerance:
        	:type theFaceTolerance: float
        	:rtype: None
        """
        return _IntTools.IntTools_BeanFaceIntersector_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * Initializes the algorithm //! Warning: The parts of the edge which are on the surface of the face and belong to the whole in the face (if there is) is considered as result
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:rtype: None
        * Initializes the algorithm
        	:param theCurve:
        	:type theCurve: BRepAdaptor_Curve
        	:param theSurface:
        	:type theSurface: BRepAdaptor_Surface
        	:param theBeanTolerance:
        	:type theBeanTolerance: float
        	:param theFaceTolerance:
        	:type theFaceTolerance: float
        	:rtype: None
        * Initializes the algorithm theUMinParameter, ... are used for optimization purposes
        	:param theCurve:
        	:type theCurve: BRepAdaptor_Curve
        	:param theSurface:
        	:type theSurface: BRepAdaptor_Surface
        	:param theFirstParOnCurve:
        	:type theFirstParOnCurve: float
        	:param theLastParOnCurve:
        	:type theLastParOnCurve: float
        	:param theUMinParameter:
        	:type theUMinParameter: float
        	:param theUMaxParameter:
        	:type theUMaxParameter: float
        	:param theVMinParameter:
        	:type theVMinParameter: float
        	:param theVMaxParameter:
        	:type theVMaxParameter: float
        	:param theBeanTolerance:
        	:type theBeanTolerance: float
        	:param theFaceTolerance:
        	:type theFaceTolerance: float
        	:rtype: None
        """
        _IntTools.IntTools_BeanFaceIntersector_swiginit(self, _IntTools.new_IntTools_BeanFaceIntersector(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns Done/NotDone state of the algorithm.
        	:rtype: bool
        """
        return _IntTools.IntTools_BeanFaceIntersector_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Launches the algorithm
        	:rtype: None
        """
        return _IntTools.IntTools_BeanFaceIntersector_Perform(self, *args)


    def Result(self, *args) -> "void":
        """
        :rtype: IntTools_SequenceOfRanges
        :param theResults:
        	:type theResults: IntTools_SequenceOfRanges
        	:rtype: None
        """
        return _IntTools.IntTools_BeanFaceIntersector_Result(self, *args)


    def SetBeanParameters(self, *args) -> "void":
        """
        * Set restrictions for curve
        	:param theFirstParOnCurve:
        	:type theFirstParOnCurve: float
        	:param theLastParOnCurve:
        	:type theLastParOnCurve: float
        	:rtype: None
        """
        return _IntTools.IntTools_BeanFaceIntersector_SetBeanParameters(self, *args)


    def SetContext(self, *args) -> "void":
        """
        * Sets the intersecton context
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: None
        """
        return _IntTools.IntTools_BeanFaceIntersector_SetContext(self, *args)


    def SetSurfaceParameters(self, *args) -> "void":
        """
        * Set restrictions for surface
        	:param theUMinParameter:
        	:type theUMinParameter: float
        	:param theUMaxParameter:
        	:type theUMaxParameter: float
        	:param theVMinParameter:
        	:type theVMinParameter: float
        	:param theVMaxParameter:
        	:type theVMaxParameter: float
        	:rtype: None
        """
        return _IntTools.IntTools_BeanFaceIntersector_SetSurfaceParameters(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_BeanFaceIntersector
IntTools_BeanFaceIntersector.Context = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_Context, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.Init = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_Init, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.IsDone = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_IsDone, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.Perform = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_Perform, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.Result = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_Result, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.SetBeanParameters = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_SetBeanParameters, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.SetContext = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_SetContext, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector.SetSurfaceParameters = new_instancemethod(_IntTools.IntTools_BeanFaceIntersector_SetSurfaceParameters, None, IntTools_BeanFaceIntersector)
IntTools_BeanFaceIntersector_swigregister = _IntTools.IntTools_BeanFaceIntersector_swigregister
IntTools_BeanFaceIntersector_swigregister(IntTools_BeanFaceIntersector)

class IntTools_CommonPrt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AllNullFlag(self, *args) -> "Standard_Boolean":
        """
        * Modifier
        	:rtype: bool
        """
        return _IntTools.IntTools_CommonPrt_AllNullFlag(self, *args)


    def AppendRange2(self, *args) -> "void":
        """
        * Appends the range of second edge.
        	:param aR:
        	:type aR: IntTools_Range
        	:rtype: None
        * Appends the range of second edge.
        	:param tf:
        	:type tf: float
        	:param tl:
        	:type tl: float
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_AppendRange2(self, *args)


    def Assign(self, *args) -> "IntTools_CommonPrt &":
        """
        :param Other:
        	:type Other: IntTools_CommonPrt
        	:rtype: IntTools_CommonPrt
        """
        return _IntTools.IntTools_CommonPrt_Assign(self, *args)


    def BoundingPoints(self, *args) -> "void":
        """
        * Selector
        	:param aP1:
        	:type aP1: gp_Pnt
        	:param aP2:
        	:type aP2: gp_Pnt
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_BoundingPoints(self, *args)


    def ChangeRanges2(self, *args) -> "IntTools_SequenceOfRanges &":
        """
        * Returns the ranges of second edge.
        	:rtype: IntTools_SequenceOfRanges
        """
        return _IntTools.IntTools_CommonPrt_ChangeRanges2(self, *args)


    def Copy(self, *args) -> "void":
        """
        * Copies me to anOther
        	:param anOther:
        	:type anOther: IntTools_CommonPrt
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_Copy(self, *args)


    def Edge1(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the first edge.
        	:rtype: TopoDS_Edge
        """
        return _IntTools.IntTools_CommonPrt_Edge1(self, *args)


    def Edge2(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the second edge
        	:rtype: TopoDS_Edge
        """
        return _IntTools.IntTools_CommonPrt_Edge2(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Copy constructor
        	:param aCPrt:
        	:type aCPrt: IntTools_CommonPrt
        	:rtype: None
        """
        _IntTools.IntTools_CommonPrt_swiginit(self, _IntTools.new_IntTools_CommonPrt(*args))

    def Range1(self, *args) -> "void":
        """
        * Returns the range of first edge
        	:rtype: IntTools_Range
        * Returns the range of first edge.
        	:param tf:
        	:type tf: float
        	:param tl:
        	:type tl: float
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_Range1(self, *args)


    def Ranges2(self, *args) -> "IntTools_SequenceOfRanges const &":
        """
        * Returns the ranges of second edge.
        	:rtype: IntTools_SequenceOfRanges
        """
        return _IntTools.IntTools_CommonPrt_Ranges2(self, *args)


    def SetAllNullFlag(self, *args) -> "void":
        """
        * Selector
        	:param aFlag:
        	:type aFlag: bool
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_SetAllNullFlag(self, *args)


    def SetBoundingPoints(self, *args) -> "void":
        """
        * Modifier
        	:param aP1:
        	:type aP1: gp_Pnt
        	:param aP2:
        	:type aP2: gp_Pnt
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_SetBoundingPoints(self, *args)


    def SetEdge1(self, *args) -> "void":
        """
        * Sets the first edge.
        	:param anE:
        	:type anE: TopoDS_Edge
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_SetEdge1(self, *args)


    def SetEdge2(self, *args) -> "void":
        """
        * Sets the second edge.
        	:param anE:
        	:type anE: TopoDS_Edge
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_SetEdge2(self, *args)


    def SetRange1(self, *args) -> "void":
        """
        * Sets the range of first edge.
        	:param aR:
        	:type aR: IntTools_Range
        	:rtype: None
        * Sets the range of first edge.
        	:param tf:
        	:type tf: float
        	:param tl:
        	:type tl: float
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_SetRange1(self, *args)


    def SetType(self, *args) -> "void":
        """
        * Sets the type of the common part Vertex or Edge
        	:param aType:
        	:type aType: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_SetType(self, *args)


    def SetVertexParameter1(self, *args) -> "void":
        """
        * Sets a parameter of first vertex
        	:param tV:
        	:type tV: float
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_SetVertexParameter1(self, *args)


    def SetVertexParameter2(self, *args) -> "void":
        """
        * Sets a parameter of second vertex
        	:param tV:
        	:type tV: float
        	:rtype: None
        """
        return _IntTools.IntTools_CommonPrt_SetVertexParameter2(self, *args)


    def Type(self, *args) -> "TopAbs_ShapeEnum":
        """
        * Returns the type of the common part
        	:rtype: TopAbs_ShapeEnum
        """
        return _IntTools.IntTools_CommonPrt_Type(self, *args)


    def VertexParameter1(self, *args) -> "Standard_Real":
        """
        * Returns parameter of first vertex
        	:rtype: float
        """
        return _IntTools.IntTools_CommonPrt_VertexParameter1(self, *args)


    def VertexParameter2(self, *args) -> "Standard_Real":
        """
        * Returns parameter of second vertex
        	:rtype: float
        """
        return _IntTools.IntTools_CommonPrt_VertexParameter2(self, *args)


    def Set(self, *args) -> "IntTools_CommonPrt &":
        """
        :param Other:
        	:type Other: IntTools_CommonPrt
        	:rtype: IntTools_CommonPrt
        """
        return _IntTools.IntTools_CommonPrt_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_CommonPrt
IntTools_CommonPrt.AllNullFlag = new_instancemethod(_IntTools.IntTools_CommonPrt_AllNullFlag, None, IntTools_CommonPrt)
IntTools_CommonPrt.AppendRange2 = new_instancemethod(_IntTools.IntTools_CommonPrt_AppendRange2, None, IntTools_CommonPrt)
IntTools_CommonPrt.Assign = new_instancemethod(_IntTools.IntTools_CommonPrt_Assign, None, IntTools_CommonPrt)
IntTools_CommonPrt.BoundingPoints = new_instancemethod(_IntTools.IntTools_CommonPrt_BoundingPoints, None, IntTools_CommonPrt)
IntTools_CommonPrt.ChangeRanges2 = new_instancemethod(_IntTools.IntTools_CommonPrt_ChangeRanges2, None, IntTools_CommonPrt)
IntTools_CommonPrt.Copy = new_instancemethod(_IntTools.IntTools_CommonPrt_Copy, None, IntTools_CommonPrt)
IntTools_CommonPrt.Edge1 = new_instancemethod(_IntTools.IntTools_CommonPrt_Edge1, None, IntTools_CommonPrt)
IntTools_CommonPrt.Edge2 = new_instancemethod(_IntTools.IntTools_CommonPrt_Edge2, None, IntTools_CommonPrt)
IntTools_CommonPrt.Range1 = new_instancemethod(_IntTools.IntTools_CommonPrt_Range1, None, IntTools_CommonPrt)
IntTools_CommonPrt.Ranges2 = new_instancemethod(_IntTools.IntTools_CommonPrt_Ranges2, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetAllNullFlag = new_instancemethod(_IntTools.IntTools_CommonPrt_SetAllNullFlag, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetBoundingPoints = new_instancemethod(_IntTools.IntTools_CommonPrt_SetBoundingPoints, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetEdge1 = new_instancemethod(_IntTools.IntTools_CommonPrt_SetEdge1, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetEdge2 = new_instancemethod(_IntTools.IntTools_CommonPrt_SetEdge2, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetRange1 = new_instancemethod(_IntTools.IntTools_CommonPrt_SetRange1, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetType = new_instancemethod(_IntTools.IntTools_CommonPrt_SetType, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetVertexParameter1 = new_instancemethod(_IntTools.IntTools_CommonPrt_SetVertexParameter1, None, IntTools_CommonPrt)
IntTools_CommonPrt.SetVertexParameter2 = new_instancemethod(_IntTools.IntTools_CommonPrt_SetVertexParameter2, None, IntTools_CommonPrt)
IntTools_CommonPrt.Type = new_instancemethod(_IntTools.IntTools_CommonPrt_Type, None, IntTools_CommonPrt)
IntTools_CommonPrt.VertexParameter1 = new_instancemethod(_IntTools.IntTools_CommonPrt_VertexParameter1, None, IntTools_CommonPrt)
IntTools_CommonPrt.VertexParameter2 = new_instancemethod(_IntTools.IntTools_CommonPrt_VertexParameter2, None, IntTools_CommonPrt)
IntTools_CommonPrt.Set = new_instancemethod(_IntTools.IntTools_CommonPrt_Set, None, IntTools_CommonPrt)
IntTools_CommonPrt_swigregister = _IntTools.IntTools_CommonPrt_swigregister
IntTools_CommonPrt_swigregister(IntTools_CommonPrt)

class IntTools_Context(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BndBox(self, *args) -> "Bnd_Box &":
        """
        :param theS:
        	:type theS: TopoDS_Shape
        	:rtype: Bnd_Box
        """
        return _IntTools.IntTools_Context_BndBox(self, *args)


    def ComputePE(self, *args) -> "Standard_Integer":
        """
        * Computes parameter of the Point theP on the edge aE. Returns zero if the distance between point and edge is less than sum of tolerance value of edge and theTopP, otherwise and for following conditions returns negative value 1. the edge is degenerated (-1) 2. the edge does not contain 3d curve and pcurves (-2) 3. projection algorithm failed (-3)
        	:param theP:
        	:type theP: gp_Pnt
        	:param theTolP:
        	:type theTolP: float
        	:param theE:
        	:type theE: TopoDS_Edge
        	:param theT:
        	:type theT: float
        	:param theDist:
        	:type theDist: float
        	:rtype: int
        """
        return _IntTools.IntTools_Context_ComputePE(self, *args)


    def ComputeVE(self, *args) -> "Standard_Integer":
        """
        * Computes parameter of the vertex aV on the edge aE and correct tolerance value for the vertex on the edge. Returns zero if the distance between vertex and edge is less than sum of tolerances and the fuzzy value, otherwise and for following conditions returns negative value: 1. the edge is degenerated (-1) 2. the edge does not contain 3d curve and pcurves (-2) 3. projection algorithm failed (-3)
        	:param theV:
        	:type theV: TopoDS_Vertex
        	:param theE:
        	:type theE: TopoDS_Edge
        	:param theT:
        	:type theT: float
        	:param theTol:
        	:type theTol: float
        	:param theFuzz: default value is Precision::Confusion()
        	:type theFuzz: float
        	:rtype: int
        """
        return _IntTools.IntTools_Context_ComputeVE(self, *args)


    def ComputeVF(self, *args) -> "Standard_Integer":
        """
        * Computes UV parameters of the vertex aV on face aF and correct tolerance value for the vertex on the face. Returns zero if the distance between vertex and face is less than or equal the sum of tolerances and the fuzzy value and the projection point lays inside boundaries of the face. For following conditions returns negative value 1. projection algorithm failed (-1) 2. distance is more than sum of tolerances (-2) 3. projection point out or on the boundaries of face (-3)
        	:param theVertex:
        	:type theVertex: TopoDS_Vertex
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:param theTol:
        	:type theTol: float
        	:param theFuzz: default value is Precision::Confusion()
        	:type theFuzz: float
        	:rtype: int
        """
        return _IntTools.IntTools_Context_ComputeVF(self, *args)


    def FClass2d(self, *args) -> "IntTools_FClass2d &":
        """
        * Returns a reference to point classifier for given face
        	:param aF:
        	:type aF: TopoDS_Face
        	:rtype: IntTools_FClass2d
        """
        return _IntTools.IntTools_Context_FClass2d(self, *args)


    def Hatcher(self, *args) -> "Geom2dHatch_Hatcher &":
        """
        * Returns a reference to 2D hatcher for given face
        	:param aF:
        	:type aF: TopoDS_Face
        	:rtype: Geom2dHatch_Hatcher
        """
        return _IntTools.IntTools_Context_Hatcher(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param theAllocator:
        	:type theAllocator: NCollection_BaseAllocator
        	:rtype: None
        """
        _IntTools.IntTools_Context_swiginit(self, _IntTools.new_IntTools_Context(*args))

    def IsInfiniteFace(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the solid <theFace> has infinite bounds
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:rtype: bool
        """
        return _IntTools.IntTools_Context_IsInfiniteFace(self, *args)


    def IsPointInFace(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the point aP2D is inside the boundaries of the face aF, otherwise returns false
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aP2D:
        	:type aP2D: gp_Pnt2d
        	:rtype: bool
        * Returns true if the point aP2D is inside the boundaries of the face aF, otherwise returns false
        	:param aP3D:
        	:type aP3D: gp_Pnt
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aTol:
        	:type aTol: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Context_IsPointInFace(self, *args)


    def IsPointInOnFace(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the point aP2D is inside or on the boundaries of aF
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aP2D:
        	:type aP2D: gp_Pnt2d
        	:rtype: bool
        """
        return _IntTools.IntTools_Context_IsPointInOnFace(self, *args)


    def IsValidBlockForFace(self, *args) -> "Standard_Boolean":
        """
        * Returns true if IsValidPointForFace returns true for some 3d point that lay on the curve aIC bounded by parameters aT1 and aT2
        	:param aT1:
        	:type aT1: float
        	:param aT2:
        	:type aT2: float
        	:param aIC:
        	:type aIC: IntTools_Curve
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aTol:
        	:type aTol: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Context_IsValidBlockForFace(self, *args)


    def IsValidBlockForFaces(self, *args) -> "Standard_Boolean":
        """
        * Returns true if IsValidBlockForFace returns true for both faces aF1 and aF2
        	:param aT1:
        	:type aT1: float
        	:param aT2:
        	:type aT2: float
        	:param aIC:
        	:type aIC: IntTools_Curve
        	:param aF1:
        	:type aF1: TopoDS_Face
        	:param aF2:
        	:type aF2: TopoDS_Face
        	:param aTol:
        	:type aTol: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Context_IsValidBlockForFaces(self, *args)


    def IsValidPointForFace(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the distance between point aP3D and face aF is less or equal to tolerance aTol and projection point is inside or on the boundaries of the face aF
        	:param aP3D:
        	:type aP3D: gp_Pnt
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aTol:
        	:type aTol: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Context_IsValidPointForFace(self, *args)


    def IsValidPointForFaces(self, *args) -> "Standard_Boolean":
        """
        * Returns true if IsValidPointForFace returns true for both face aF1 and aF2
        	:param aP3D:
        	:type aP3D: gp_Pnt
        	:param aF1:
        	:type aF1: TopoDS_Face
        	:param aF2:
        	:type aF2: TopoDS_Face
        	:param aTol:
        	:type aTol: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Context_IsValidPointForFaces(self, *args)


    def IsVertexOnLine(self, *args) -> "Standard_Boolean":
        """
        * Computes parameter of the vertex aV on the curve aIC. Returns true if the distance between vertex and curve is less than sum of tolerance of aV and aTolC, otherwise or if projection algorithm failed returns false (in this case aT isn't significant)
        	:param aV:
        	:type aV: TopoDS_Vertex
        	:param aIC:
        	:type aIC: IntTools_Curve
        	:param aTolC:
        	:type aTolC: float
        	:param aT:
        	:type aT: float
        	:rtype: bool
        * Computes parameter of the vertex aV on the curve aIC. Returns true if the distance between vertex and curve is less than sum of tolerance of aV and aTolC, otherwise or if projection algorithm failed returns false (in this case aT isn't significant)
        	:param aV:
        	:type aV: TopoDS_Vertex
        	:param aTolV:
        	:type aTolV: float
        	:param aIC:
        	:type aIC: IntTools_Curve
        	:param aTolC:
        	:type aTolC: float
        	:param aT:
        	:type aT: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Context_IsVertexOnLine(self, *args)


    def OBB(self, *args) -> "Bnd_OBB &":
        """
        * Builds and stores an Oriented Bounding Box for the shape. Returns a reference to OBB.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theFuzzyValue: default value is Precision::Confusion()
        	:type theFuzzyValue: float
        	:rtype: Bnd_OBB
        """
        return _IntTools.IntTools_Context_OBB(self, *args)


    def ProjPC(self, *args) -> "GeomAPI_ProjectPointOnCurve &":
        """
        * Returns a reference to point projector for given edge
        	:param aE:
        	:type aE: TopoDS_Edge
        	:rtype: GeomAPI_ProjectPointOnCurve
        """
        return _IntTools.IntTools_Context_ProjPC(self, *args)


    def ProjPS(self, *args) -> "GeomAPI_ProjectPointOnSurf &":
        """
        * Returns a reference to point projector for given face
        	:param aF:
        	:type aF: TopoDS_Face
        	:rtype: GeomAPI_ProjectPointOnSurf
        """
        return _IntTools.IntTools_Context_ProjPS(self, *args)


    def ProjPT(self, *args) -> "GeomAPI_ProjectPointOnCurve &":
        """
        * Returns a reference to point projector for given curve
        	:param aC:
        	:type aC: Geom_Curve
        	:rtype: GeomAPI_ProjectPointOnCurve
        """
        return _IntTools.IntTools_Context_ProjPT(self, *args)


    def ProjectPointOnEdge(self, *args) -> "Standard_Boolean":
        """
        * Computes parameter of the point aP on the edge aE. Returns false if projection algorithm failed other wiese returns true.
        	:param aP:
        	:type aP: gp_Pnt
        	:param aE:
        	:type aE: TopoDS_Edge
        	:param aT:
        	:type aT: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Context_ProjectPointOnEdge(self, *args)


    def SetPOnSProjectionTolerance(self, *args) -> "void":
        """
        * Sets tolerance to be used for projection of point on surface. Clears map of already cached projectors in order to maintain correct value for all projectors
        	:param theValue:
        	:type theValue: float
        	:rtype: None
        """
        return _IntTools.IntTools_Context_SetPOnSProjectionTolerance(self, *args)


    def SolidClassifier(self, *args) -> "BRepClass3d_SolidClassifier &":
        """
        * Returns a reference to solid classifier for given solid
        	:param aSolid:
        	:type aSolid: TopoDS_Solid
        	:rtype: BRepClass3d_SolidClassifier
        """
        return _IntTools.IntTools_Context_SolidClassifier(self, *args)


    def StatePointFace(self, *args) -> "TopAbs_State":
        """
        * Returns the state of the point aP2D relative to face aF
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aP2D:
        	:type aP2D: gp_Pnt2d
        	:rtype: TopAbs_State
        """
        return _IntTools.IntTools_Context_StatePointFace(self, *args)


    def SurfaceAdaptor(self, *args) -> "BRepAdaptor_Surface &":
        """
        * Returns a reference to surface adaptor for given face
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:rtype: BRepAdaptor_Surface
        """
        return _IntTools.IntTools_Context_SurfaceAdaptor(self, *args)


    def SurfaceData(self, *args) -> "IntTools_SurfaceRangeLocalizeData &":
        """
        * Returns a reference to surface localization data for given face
        	:param aF:
        	:type aF: TopoDS_Face
        	:rtype: IntTools_SurfaceRangeLocalizeData
        """
        return _IntTools.IntTools_Context_SurfaceData(self, *args)


    def UVBounds(self, *args) -> "void":
        """
        * Computes the boundaries of the face using surface adaptor
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None
        """
        return _IntTools.IntTools_Context_UVBounds(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IntTools_Context_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_Context
IntTools_Context.BndBox = new_instancemethod(_IntTools.IntTools_Context_BndBox, None, IntTools_Context)
IntTools_Context.ComputePE = new_instancemethod(_IntTools.IntTools_Context_ComputePE, None, IntTools_Context)
IntTools_Context.ComputeVE = new_instancemethod(_IntTools.IntTools_Context_ComputeVE, None, IntTools_Context)
IntTools_Context.ComputeVF = new_instancemethod(_IntTools.IntTools_Context_ComputeVF, None, IntTools_Context)
IntTools_Context.FClass2d = new_instancemethod(_IntTools.IntTools_Context_FClass2d, None, IntTools_Context)
IntTools_Context.Hatcher = new_instancemethod(_IntTools.IntTools_Context_Hatcher, None, IntTools_Context)
IntTools_Context.IsInfiniteFace = new_instancemethod(_IntTools.IntTools_Context_IsInfiniteFace, None, IntTools_Context)
IntTools_Context.IsPointInFace = new_instancemethod(_IntTools.IntTools_Context_IsPointInFace, None, IntTools_Context)
IntTools_Context.IsPointInOnFace = new_instancemethod(_IntTools.IntTools_Context_IsPointInOnFace, None, IntTools_Context)
IntTools_Context.IsValidBlockForFace = new_instancemethod(_IntTools.IntTools_Context_IsValidBlockForFace, None, IntTools_Context)
IntTools_Context.IsValidBlockForFaces = new_instancemethod(_IntTools.IntTools_Context_IsValidBlockForFaces, None, IntTools_Context)
IntTools_Context.IsValidPointForFace = new_instancemethod(_IntTools.IntTools_Context_IsValidPointForFace, None, IntTools_Context)
IntTools_Context.IsValidPointForFaces = new_instancemethod(_IntTools.IntTools_Context_IsValidPointForFaces, None, IntTools_Context)
IntTools_Context.IsVertexOnLine = new_instancemethod(_IntTools.IntTools_Context_IsVertexOnLine, None, IntTools_Context)
IntTools_Context.OBB = new_instancemethod(_IntTools.IntTools_Context_OBB, None, IntTools_Context)
IntTools_Context.ProjPC = new_instancemethod(_IntTools.IntTools_Context_ProjPC, None, IntTools_Context)
IntTools_Context.ProjPS = new_instancemethod(_IntTools.IntTools_Context_ProjPS, None, IntTools_Context)
IntTools_Context.ProjPT = new_instancemethod(_IntTools.IntTools_Context_ProjPT, None, IntTools_Context)
IntTools_Context.ProjectPointOnEdge = new_instancemethod(_IntTools.IntTools_Context_ProjectPointOnEdge, None, IntTools_Context)
IntTools_Context.SetPOnSProjectionTolerance = new_instancemethod(_IntTools.IntTools_Context_SetPOnSProjectionTolerance, None, IntTools_Context)
IntTools_Context.SolidClassifier = new_instancemethod(_IntTools.IntTools_Context_SolidClassifier, None, IntTools_Context)
IntTools_Context.StatePointFace = new_instancemethod(_IntTools.IntTools_Context_StatePointFace, None, IntTools_Context)
IntTools_Context.SurfaceAdaptor = new_instancemethod(_IntTools.IntTools_Context_SurfaceAdaptor, None, IntTools_Context)
IntTools_Context.SurfaceData = new_instancemethod(_IntTools.IntTools_Context_SurfaceData, None, IntTools_Context)
IntTools_Context.UVBounds = new_instancemethod(_IntTools.IntTools_Context_UVBounds, None, IntTools_Context)
IntTools_Context_swigregister = _IntTools.IntTools_Context_swigregister
IntTools_Context_swigregister(IntTools_Context)

class IntTools_Curve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Bounds(self, *args) -> "Standard_Boolean":
        """
        * If the 3d curve is bounded curve the method will return True and modify the output parameters with boundary parameters of the curve and corresponded 3d points. If the curve does not have bounds, the method will return false and the output parameters will stay untouched.
        	:param theFirst:
        	:type theFirst: float
        	:param theLast:
        	:type theLast: float
        	:param theFirstPnt:
        	:type theFirstPnt: gp_Pnt
        	:param theLastPnt:
        	:type theLastPnt: gp_Pnt
        	:rtype: bool
        """
        return _IntTools.IntTools_Curve_Bounds(self, *args)


    def Curve(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """
        * Returns 3d curve
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _IntTools.IntTools_Curve_Curve(self, *args)


    def D0(self, *args) -> "Standard_Boolean":
        """
        * Computes 3d point corresponded to the given parameter if this parameter is inside the boundaries of the curve. Returns True in this case. Otherwise, the point will not be computed and the method will return False.
        	:param thePar:
        	:type thePar: float
        	:param thePnt:
        	:type thePnt: gp_Pnt
        	:rtype: bool
        """
        return _IntTools.IntTools_Curve_D0(self, *args)


    def FirstCurve2d(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        * Returns first 2d curve
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _IntTools.IntTools_Curve_FirstCurve2d(self, *args)


    def HasBounds(self, *args) -> "Standard_Boolean":
        """
        * Returns True if 3d curve is BoundedCurve
        	:rtype: bool
        """
        return _IntTools.IntTools_Curve_HasBounds(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Constructor taking 3d curve, two 2d curves and two tolerance values
        	:param the3dCurve3d:
        	:type the3dCurve3d: Geom_Curve
        	:param the2dCurve1:
        	:type the2dCurve1: Geom2d_Curve
        	:param the2dCurve2:
        	:type the2dCurve2: Geom2d_Curve
        	:param theTolerance: default value is 0.0
        	:type theTolerance: float
        	:param theTangentialTolerance: default value is 0.0
        	:type theTangentialTolerance: float
        	:rtype: None
        """
        _IntTools.IntTools_Curve_swiginit(self, _IntTools.new_IntTools_Curve(*args))

    def SecondCurve2d(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        * Returns second 2d curve
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _IntTools.IntTools_Curve_SecondCurve2d(self, *args)


    def SetCurve(self, *args) -> "void":
        """
        * Sets the 3d curve
        	:param the3dCurve:
        	:type the3dCurve: Geom_Curve
        	:rtype: None
        """
        return _IntTools.IntTools_Curve_SetCurve(self, *args)


    def SetCurves(self, *args) -> "void":
        """
        * Sets the curves
        	:param the3dCurve:
        	:type the3dCurve: Geom_Curve
        	:param the2dCurve1:
        	:type the2dCurve1: Geom2d_Curve
        	:param the2dCurve2:
        	:type the2dCurve2: Geom2d_Curve
        	:rtype: None
        """
        return _IntTools.IntTools_Curve_SetCurves(self, *args)


    def SetFirstCurve2d(self, *args) -> "void":
        """
        * Sets the first 2d curve
        	:param the2dCurve1:
        	:type the2dCurve1: Geom2d_Curve
        	:rtype: None
        """
        return _IntTools.IntTools_Curve_SetFirstCurve2d(self, *args)


    def SetSecondCurve2d(self, *args) -> "void":
        """
        * Sets the second 2d curve
        	:param the2dCurve2:
        	:type the2dCurve2: Geom2d_Curve
        	:rtype: None
        """
        return _IntTools.IntTools_Curve_SetSecondCurve2d(self, *args)


    def SetTangentialTolerance(self, *args) -> "void":
        """
        * Sets the tangential tolerance
        	:param theTangentialTolerance:
        	:type theTangentialTolerance: float
        	:rtype: None
        """
        return _IntTools.IntTools_Curve_SetTangentialTolerance(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * Sets the tolerance for the curve
        	:param theTolerance:
        	:type theTolerance: float
        	:rtype: None
        """
        return _IntTools.IntTools_Curve_SetTolerance(self, *args)


    def TangentialTolerance(self, *args) -> "Standard_Real":
        """
        * Returns the tangential tolerance
        	:rtype: float
        """
        return _IntTools.IntTools_Curve_TangentialTolerance(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        * Returns the tolerance
        	:rtype: float
        """
        return _IntTools.IntTools_Curve_Tolerance(self, *args)


    def Type(self, *args) -> "GeomAbs_CurveType":
        """
        * Returns the type of the 3d curve
        	:rtype: GeomAbs_CurveType
        """
        return _IntTools.IntTools_Curve_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_Curve
IntTools_Curve.Bounds = new_instancemethod(_IntTools.IntTools_Curve_Bounds, None, IntTools_Curve)
IntTools_Curve.Curve = new_instancemethod(_IntTools.IntTools_Curve_Curve, None, IntTools_Curve)
IntTools_Curve.D0 = new_instancemethod(_IntTools.IntTools_Curve_D0, None, IntTools_Curve)
IntTools_Curve.FirstCurve2d = new_instancemethod(_IntTools.IntTools_Curve_FirstCurve2d, None, IntTools_Curve)
IntTools_Curve.HasBounds = new_instancemethod(_IntTools.IntTools_Curve_HasBounds, None, IntTools_Curve)
IntTools_Curve.SecondCurve2d = new_instancemethod(_IntTools.IntTools_Curve_SecondCurve2d, None, IntTools_Curve)
IntTools_Curve.SetCurve = new_instancemethod(_IntTools.IntTools_Curve_SetCurve, None, IntTools_Curve)
IntTools_Curve.SetCurves = new_instancemethod(_IntTools.IntTools_Curve_SetCurves, None, IntTools_Curve)
IntTools_Curve.SetFirstCurve2d = new_instancemethod(_IntTools.IntTools_Curve_SetFirstCurve2d, None, IntTools_Curve)
IntTools_Curve.SetSecondCurve2d = new_instancemethod(_IntTools.IntTools_Curve_SetSecondCurve2d, None, IntTools_Curve)
IntTools_Curve.SetTangentialTolerance = new_instancemethod(_IntTools.IntTools_Curve_SetTangentialTolerance, None, IntTools_Curve)
IntTools_Curve.SetTolerance = new_instancemethod(_IntTools.IntTools_Curve_SetTolerance, None, IntTools_Curve)
IntTools_Curve.TangentialTolerance = new_instancemethod(_IntTools.IntTools_Curve_TangentialTolerance, None, IntTools_Curve)
IntTools_Curve.Tolerance = new_instancemethod(_IntTools.IntTools_Curve_Tolerance, None, IntTools_Curve)
IntTools_Curve.Type = new_instancemethod(_IntTools.IntTools_Curve_Type, None, IntTools_Curve)
IntTools_Curve_swigregister = _IntTools.IntTools_Curve_swigregister
IntTools_Curve_swigregister(IntTools_Curve)

class IntTools_CurveRangeLocalizeData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddBox(self, *args) -> "void":
        """
        :param theRange:
        	:type theRange: IntTools_CurveRangeSample
        	:param theBox:
        	:type theBox: Bnd_Box
        	:rtype: None
        """
        return _IntTools.IntTools_CurveRangeLocalizeData_AddBox(self, *args)


    def AddOutRange(self, *args) -> "void":
        """
        :param theRange:
        	:type theRange: IntTools_CurveRangeSample
        	:rtype: None
        """
        return _IntTools.IntTools_CurveRangeLocalizeData_AddOutRange(self, *args)


    def FindBox(self, *args) -> "Standard_Boolean":
        """
        :param theRange:
        	:type theRange: IntTools_CurveRangeSample
        	:param theBox:
        	:type theBox: Bnd_Box
        	:rtype: bool
        """
        return _IntTools.IntTools_CurveRangeLocalizeData_FindBox(self, *args)


    def GetMinRange(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntTools.IntTools_CurveRangeLocalizeData_GetMinRange(self, *args)


    def GetNbSample(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntTools.IntTools_CurveRangeLocalizeData_GetNbSample(self, *args)


    def __init__(self, *args):
        """
        :param theNbSample:
        	:type theNbSample: int
        	:param theMinRange:
        	:type theMinRange: float
        	:rtype: None
        """
        _IntTools.IntTools_CurveRangeLocalizeData_swiginit(self, _IntTools.new_IntTools_CurveRangeLocalizeData(*args))

    def IsRangeOut(self, *args) -> "Standard_Boolean":
        """
        :param theRange:
        	:type theRange: IntTools_CurveRangeSample
        	:rtype: bool
        """
        return _IntTools.IntTools_CurveRangeLocalizeData_IsRangeOut(self, *args)


    def ListRangeOut(self, *args) -> "void":
        """
        :param theList:
        	:type theList: IntTools_ListOfCurveRangeSample
        	:rtype: None
        """
        return _IntTools.IntTools_CurveRangeLocalizeData_ListRangeOut(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_CurveRangeLocalizeData
IntTools_CurveRangeLocalizeData.AddBox = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_AddBox, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.AddOutRange = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_AddOutRange, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.FindBox = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_FindBox, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.GetMinRange = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_GetMinRange, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.GetNbSample = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_GetNbSample, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.IsRangeOut = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_IsRangeOut, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData.ListRangeOut = new_instancemethod(_IntTools.IntTools_CurveRangeLocalizeData_ListRangeOut, None, IntTools_CurveRangeLocalizeData)
IntTools_CurveRangeLocalizeData_swigregister = _IntTools.IntTools_CurveRangeLocalizeData_swigregister
IntTools_CurveRangeLocalizeData_swigregister(IntTools_CurveRangeLocalizeData)

class IntTools_CurveRangeSampleMapHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        * Computes a hash code for the given key, in the range [1, theUpperBound] @param theKey the key which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param theKey:
        	:type theKey: IntTools_CurveRangeSample
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _IntTools.IntTools_CurveRangeSampleMapHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.
        	:param S1:
        	:type S1: IntTools_CurveRangeSample
        	:param S2:
        	:type S2: IntTools_CurveRangeSample
        	:rtype: bool
        """
        return _IntTools.IntTools_CurveRangeSampleMapHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _IntTools.IntTools_CurveRangeSampleMapHasher_swiginit(self, _IntTools.new_IntTools_CurveRangeSampleMapHasher())
    __swig_destroy__ = _IntTools.delete_IntTools_CurveRangeSampleMapHasher
IntTools_CurveRangeSampleMapHasher_swigregister = _IntTools.IntTools_CurveRangeSampleMapHasher_swigregister
IntTools_CurveRangeSampleMapHasher_swigregister(IntTools_CurveRangeSampleMapHasher)

def IntTools_CurveRangeSampleMapHasher_HashCode(*args) -> "Standard_Integer":
    """
    * Computes a hash code for the given key, in the range [1, theUpperBound] @param theKey the key which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
    	:param theKey:
    	:type theKey: IntTools_CurveRangeSample
    	:param theUpperBound:
    	:type theUpperBound: int
    	:rtype: int
    """
    return _IntTools.IntTools_CurveRangeSampleMapHasher_HashCode(*args)

def IntTools_CurveRangeSampleMapHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.
    	:param S1:
    	:type S1: IntTools_CurveRangeSample
    	:param S2:
    	:type S2: IntTools_CurveRangeSample
    	:rtype: bool
    """
    return _IntTools.IntTools_CurveRangeSampleMapHasher_IsEqual(*args)

class IntTools_EdgeEdge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CommonParts(self, *args) -> "IntTools_SequenceOfCommonPrts const &":
        """
        * Returns common parts
        	:rtype: IntTools_SequenceOfCommonPrts
        """
        return _IntTools.IntTools_EdgeEdge_CommonParts(self, *args)


    def FuzzyValue(self, *args) -> "Standard_Real":
        """
        * Returns Fuzzy value
        	:rtype: float
        """
        return _IntTools.IntTools_EdgeEdge_FuzzyValue(self, *args)


    def __init__(self, *args):
        """
        * Empty contructor
        	:rtype: None
        * Contructor
        	:param theEdge1:
        	:type theEdge1: TopoDS_Edge
        	:param theEdge2:
        	:type theEdge2: TopoDS_Edge
        	:rtype: None
        * Contructor
        	:param theEdge1:
        	:type theEdge1: TopoDS_Edge
        	:param aT11:
        	:type aT11: float
        	:param aT12:
        	:type aT12: float
        	:param theEdge2:
        	:type theEdge2: TopoDS_Edge
        	:param aT21:
        	:type aT21: float
        	:param aT22:
        	:type aT22: float
        	:rtype: None
        """
        _IntTools.IntTools_EdgeEdge_swiginit(self, _IntTools.new_IntTools_EdgeEdge(*args))

    def IsCoincidenceCheckedQuickly(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag myQuickCoincidenceCheck
        	:rtype: bool
        """
        return _IntTools.IntTools_EdgeEdge_IsCoincidenceCheckedQuickly(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if common part(s) is(are) found
        	:rtype: bool
        """
        return _IntTools.IntTools_EdgeEdge_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs the intersection between edges
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeEdge_Perform(self, *args)


    def SetEdge1(self, *args) -> "void":
        """
        * Sets the first edge
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:rtype: None
        * Sets the first edge and its range
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param aT1:
        	:type aT1: float
        	:param aT2:
        	:type aT2: float
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeEdge_SetEdge1(self, *args)


    def SetEdge2(self, *args) -> "void":
        """
        * Sets the second edge
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:rtype: None
        * Sets the first edge and its range
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param aT1:
        	:type aT1: float
        	:param aT2:
        	:type aT2: float
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeEdge_SetEdge2(self, *args)


    def SetFuzzyValue(self, *args) -> "void":
        """
        * Sets the Fuzzy value
        	:param theFuzz:
        	:type theFuzz: float
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeEdge_SetFuzzyValue(self, *args)


    def SetRange1(self, *args) -> "void":
        """
        * Sets the range for the first edge
        	:param theRange1:
        	:type theRange1: IntTools_Range
        	:rtype: None
        * Sets the range for the first edge
        	:param aT1:
        	:type aT1: float
        	:param aT2:
        	:type aT2: float
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeEdge_SetRange1(self, *args)


    def SetRange2(self, *args) -> "void":
        """
        * Sets the range for the second edge
        	:param theRange:
        	:type theRange: IntTools_Range
        	:rtype: None
        * Sets the range for the second edge
        	:param aT1:
        	:type aT1: float
        	:param aT2:
        	:type aT2: float
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeEdge_SetRange2(self, *args)


    def UseQuickCoincidenceCheck(self, *args) -> "void":
        """
        * Sets the flag myQuickCoincidenceCheck
        	:param bFlag:
        	:type bFlag: bool
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeEdge_UseQuickCoincidenceCheck(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_EdgeEdge
IntTools_EdgeEdge.CommonParts = new_instancemethod(_IntTools.IntTools_EdgeEdge_CommonParts, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.FuzzyValue = new_instancemethod(_IntTools.IntTools_EdgeEdge_FuzzyValue, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.IsCoincidenceCheckedQuickly = new_instancemethod(_IntTools.IntTools_EdgeEdge_IsCoincidenceCheckedQuickly, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.IsDone = new_instancemethod(_IntTools.IntTools_EdgeEdge_IsDone, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.Perform = new_instancemethod(_IntTools.IntTools_EdgeEdge_Perform, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.SetEdge1 = new_instancemethod(_IntTools.IntTools_EdgeEdge_SetEdge1, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.SetEdge2 = new_instancemethod(_IntTools.IntTools_EdgeEdge_SetEdge2, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.SetFuzzyValue = new_instancemethod(_IntTools.IntTools_EdgeEdge_SetFuzzyValue, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.SetRange1 = new_instancemethod(_IntTools.IntTools_EdgeEdge_SetRange1, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.SetRange2 = new_instancemethod(_IntTools.IntTools_EdgeEdge_SetRange2, None, IntTools_EdgeEdge)
IntTools_EdgeEdge.UseQuickCoincidenceCheck = new_instancemethod(_IntTools.IntTools_EdgeEdge_UseQuickCoincidenceCheck, None, IntTools_EdgeEdge)
IntTools_EdgeEdge_swigregister = _IntTools.IntTools_EdgeEdge_swigregister
IntTools_EdgeEdge_swigregister(IntTools_EdgeEdge)

class IntTools_EdgeFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CommonParts(self, *args) -> "IntTools_SequenceOfCommonPrts const &":
        """
        * @name Obtaining results Returns resulting common parts
        	:rtype: IntTools_SequenceOfCommonPrts
        """
        return _IntTools.IntTools_EdgeFace_CommonParts(self, *args)


    def Context(self, *args) -> "opencascade::handle< IntTools_Context > const &":
        """
        * Returns the intersection context
        	:rtype: opencascade::handle<IntTools_Context>
        """
        return _IntTools.IntTools_EdgeFace_Context(self, *args)


    def Edge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the edge
        	:rtype: TopoDS_Edge
        """
        return _IntTools.IntTools_EdgeFace_Edge(self, *args)


    def ErrorStatus(self, *args) -> "Standard_Integer":
        """
        * Returns the code of completion: 0 - means successful completion; 1 - the process was not started; 2,3 - invalid source data for the algorithm; 4 - projection failed.
        	:rtype: int
        """
        return _IntTools.IntTools_EdgeFace_ErrorStatus(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """
        * Returns the face
        	:rtype: TopoDS_Face
        """
        return _IntTools.IntTools_EdgeFace_Face(self, *args)


    def FuzzyValue(self, *args) -> "Standard_Real":
        """
        * Returns the Fuzzy value
        	:rtype: float
        """
        return _IntTools.IntTools_EdgeFace_FuzzyValue(self, *args)


    def __init__(self, *args):
        """
        * @name Constructors Empty Constructor
        	:rtype: None
        """
        _IntTools.IntTools_EdgeFace_swiginit(self, _IntTools.new_IntTools_EdgeFace(*args))

    def IsCoincidenceCheckedQuickly(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag myQuickCoincidenceCheck
        	:rtype: bool
        """
        return _IntTools.IntTools_EdgeFace_IsCoincidenceCheckedQuickly(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * @name Checking validity of the intersection Returns True if computation was successful. Otherwise returns False.
        	:rtype: bool
        """
        return _IntTools.IntTools_EdgeFace_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        * @name Performing the operation Launches the process
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeFace_Perform(self, *args)


    def Range(self, *args) -> "IntTools_Range const &":
        """
        * Returns intersection range of the edge
        	:rtype: IntTools_Range
        """
        return _IntTools.IntTools_EdgeFace_Range(self, *args)


    def SetContext(self, *args) -> "void":
        """
        * Sets the intersection context
        	:param theContext:
        	:type theContext: IntTools_Context
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeFace_SetContext(self, *args)


    def SetEdge(self, *args) -> "void":
        """
        * @name Setters/Getters Sets the edge for intersection
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeFace_SetEdge(self, *args)


    def SetFace(self, *args) -> "void":
        """
        * Sets the face for intersection
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeFace_SetFace(self, *args)


    def SetFuzzyValue(self, *args) -> "void":
        """
        * Sets the Fuzzy value
        	:param theFuzz:
        	:type theFuzz: float
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeFace_SetFuzzyValue(self, *args)


    def SetRange(self, *args) -> "void":
        """
        * Sets the boundaries for the edge. The algorithm processes edge inside these boundaries.
        	:param theRange:
        	:type theRange: IntTools_Range
        	:rtype: None
        * Sets the boundaries for the edge. The algorithm processes edge inside these boundaries.
        	:param theFirst:
        	:type theFirst: float
        	:param theLast:
        	:type theLast: float
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeFace_SetRange(self, *args)


    def UseQuickCoincidenceCheck(self, *args) -> "void":
        """
        * Sets the flag for quick coincidence check. It is safe to use the quick check for coincidence only if both of the following conditions are met: - The vertices of edge are lying on the face; - The edge does not intersect the boundaries of the face on the given range.
        	:param theFlag:
        	:type theFlag: bool
        	:rtype: None
        """
        return _IntTools.IntTools_EdgeFace_UseQuickCoincidenceCheck(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_EdgeFace
IntTools_EdgeFace.CommonParts = new_instancemethod(_IntTools.IntTools_EdgeFace_CommonParts, None, IntTools_EdgeFace)
IntTools_EdgeFace.Context = new_instancemethod(_IntTools.IntTools_EdgeFace_Context, None, IntTools_EdgeFace)
IntTools_EdgeFace.Edge = new_instancemethod(_IntTools.IntTools_EdgeFace_Edge, None, IntTools_EdgeFace)
IntTools_EdgeFace.ErrorStatus = new_instancemethod(_IntTools.IntTools_EdgeFace_ErrorStatus, None, IntTools_EdgeFace)
IntTools_EdgeFace.Face = new_instancemethod(_IntTools.IntTools_EdgeFace_Face, None, IntTools_EdgeFace)
IntTools_EdgeFace.FuzzyValue = new_instancemethod(_IntTools.IntTools_EdgeFace_FuzzyValue, None, IntTools_EdgeFace)
IntTools_EdgeFace.IsCoincidenceCheckedQuickly = new_instancemethod(_IntTools.IntTools_EdgeFace_IsCoincidenceCheckedQuickly, None, IntTools_EdgeFace)
IntTools_EdgeFace.IsDone = new_instancemethod(_IntTools.IntTools_EdgeFace_IsDone, None, IntTools_EdgeFace)
IntTools_EdgeFace.Perform = new_instancemethod(_IntTools.IntTools_EdgeFace_Perform, None, IntTools_EdgeFace)
IntTools_EdgeFace.Range = new_instancemethod(_IntTools.IntTools_EdgeFace_Range, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetContext = new_instancemethod(_IntTools.IntTools_EdgeFace_SetContext, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetEdge = new_instancemethod(_IntTools.IntTools_EdgeFace_SetEdge, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetFace = new_instancemethod(_IntTools.IntTools_EdgeFace_SetFace, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetFuzzyValue = new_instancemethod(_IntTools.IntTools_EdgeFace_SetFuzzyValue, None, IntTools_EdgeFace)
IntTools_EdgeFace.SetRange = new_instancemethod(_IntTools.IntTools_EdgeFace_SetRange, None, IntTools_EdgeFace)
IntTools_EdgeFace.UseQuickCoincidenceCheck = new_instancemethod(_IntTools.IntTools_EdgeFace_UseQuickCoincidenceCheck, None, IntTools_EdgeFace)
IntTools_EdgeFace_swigregister = _IntTools.IntTools_EdgeFace_swigregister
IntTools_EdgeFace_swigregister(IntTools_EdgeFace)

class IntTools_FClass2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Destroy(self, *args) -> "void":
        """
        * Destructor
        	:rtype: None
        """
        return _IntTools.IntTools_FClass2d_Destroy(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes algorithm by the face F and tolerance Tol
        	:param F:
        	:type F: TopoDS_Face
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _IntTools.IntTools_FClass2d_Init(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Initializes algorithm by the face F and tolerance Tol
        	:param F:
        	:type F: TopoDS_Face
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _IntTools.IntTools_FClass2d_swiginit(self, _IntTools.new_IntTools_FClass2d(*args))

    def IsHole(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _IntTools.IntTools_FClass2d_IsHole(self, *args)


    def Perform(self, *args) -> "TopAbs_State":
        """
        * Returns state of the 2d point Puv. If RecadreOnPeriodic is true (defalut value), for the periodic surface 2d point, adjusted to period, is classified.
        	:param Puv:
        	:type Puv: gp_Pnt2d
        	:param RecadreOnPeriodic: default value is Standard_True
        	:type RecadreOnPeriodic: bool
        	:rtype: TopAbs_State
        """
        return _IntTools.IntTools_FClass2d_Perform(self, *args)


    def PerformInfinitePoint(self, *args) -> "TopAbs_State":
        """
        * Returns state of infinite 2d point relatively to (0, 0)
        	:rtype: TopAbs_State
        """
        return _IntTools.IntTools_FClass2d_PerformInfinitePoint(self, *args)


    def TestOnRestriction(self, *args) -> "TopAbs_State":
        """
        * Test a point with +- an offset (Tol) and returns On if some points are OUT an some are IN (Caution: Internal use . see the code for more details)
        	:param Puv:
        	:type Puv: gp_Pnt2d
        	:param Tol:
        	:type Tol: float
        	:param RecadreOnPeriodic: default value is Standard_True
        	:type RecadreOnPeriodic: bool
        	:rtype: TopAbs_State
        """
        return _IntTools.IntTools_FClass2d_TestOnRestriction(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_FClass2d
IntTools_FClass2d.Destroy = new_instancemethod(_IntTools.IntTools_FClass2d_Destroy, None, IntTools_FClass2d)
IntTools_FClass2d.Init = new_instancemethod(_IntTools.IntTools_FClass2d_Init, None, IntTools_FClass2d)
IntTools_FClass2d.IsHole = new_instancemethod(_IntTools.IntTools_FClass2d_IsHole, None, IntTools_FClass2d)
IntTools_FClass2d.Perform = new_instancemethod(_IntTools.IntTools_FClass2d_Perform, None, IntTools_FClass2d)
IntTools_FClass2d.PerformInfinitePoint = new_instancemethod(_IntTools.IntTools_FClass2d_PerformInfinitePoint, None, IntTools_FClass2d)
IntTools_FClass2d.TestOnRestriction = new_instancemethod(_IntTools.IntTools_FClass2d_TestOnRestriction, None, IntTools_FClass2d)
IntTools_FClass2d_swigregister = _IntTools.IntTools_FClass2d_swigregister
IntTools_FClass2d_swigregister(IntTools_FClass2d)

class IntTools_FaceFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Context(self, *args) -> "opencascade::handle< IntTools_Context > const &":
        """
        * Gets the intersecton context
        	:rtype: opencascade::handle<IntTools_Context>
        """
        return _IntTools.IntTools_FaceFace_Context(self, *args)


    def Face1(self, *args) -> "TopoDS_Face const":
        """
        * Returns first of processed faces
        	:rtype: TopoDS_Face
        """
        return _IntTools.IntTools_FaceFace_Face1(self, *args)


    def Face2(self, *args) -> "TopoDS_Face const":
        """
        * Returns second of processed faces
        	:rtype: TopoDS_Face
        """
        return _IntTools.IntTools_FaceFace_Face2(self, *args)


    def FuzzyValue(self, *args) -> "Standard_Real":
        """
        * Returns Fuzzy value
        	:rtype: float
        """
        return _IntTools.IntTools_FaceFace_FuzzyValue(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _IntTools.IntTools_FaceFace_swiginit(self, _IntTools.new_IntTools_FaceFace(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the intersection was successful
        	:rtype: bool
        """
        return _IntTools.IntTools_FaceFace_IsDone(self, *args)


    def Lines(self, *args) -> "IntTools_SequenceOfCurves const &":
        """
        * Returns sequence of 3d curves as result of intersection
        	:rtype: IntTools_SequenceOfCurves
        """
        return _IntTools.IntTools_FaceFace_Lines(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Intersects underliing surfaces of F1 and F2 Use sum of tolerance of F1 and F2 as intersection criteria
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: None
        """
        return _IntTools.IntTools_FaceFace_Perform(self, *args)


    def Points(self, *args) -> "IntTools_SequenceOfPntOn2Faces const &":
        """
        * Returns sequence of 3d curves as result of intersection
        	:rtype: IntTools_SequenceOfPntOn2Faces
        """
        return _IntTools.IntTools_FaceFace_Points(self, *args)


    def PrepareLines3D(self, *args) -> "void":
        """
        * Provides post-processing the result lines. <bToSplit> - the flag. In case of <bToSplit> is true the closed 3D-curves will be splitted on parts. In case of <bToSplit> is false the closed 3D-curves remain untouched.
        	:param bToSplit: default value is Standard_True
        	:type bToSplit: bool
        	:rtype: None
        """
        return _IntTools.IntTools_FaceFace_PrepareLines3D(self, *args)


    def SetContext(self, *args) -> "void":
        """
        * Sets the intersecton context
        	:param aContext:
        	:type aContext: IntTools_Context
        	:rtype: None
        """
        return _IntTools.IntTools_FaceFace_SetContext(self, *args)


    def SetFuzzyValue(self, *args) -> "void":
        """
        * Sets the Fuzzy value
        	:param theFuzz:
        	:type theFuzz: float
        	:rtype: None
        """
        return _IntTools.IntTools_FaceFace_SetFuzzyValue(self, *args)


    def SetList(self, *args) -> "void":
        """
        :param ListOfPnts:
        	:type ListOfPnts: IntSurf_ListOfPntOn2S
        	:rtype: None
        """
        return _IntTools.IntTools_FaceFace_SetList(self, *args)


    def SetParameters(self, *args) -> "void":
        """
        * Modifier
        	:param ApproxCurves:
        	:type ApproxCurves: bool
        	:param ComputeCurveOnS1:
        	:type ComputeCurveOnS1: bool
        	:param ComputeCurveOnS2:
        	:type ComputeCurveOnS2: bool
        	:param ApproximationTolerance:
        	:type ApproximationTolerance: float
        	:rtype: None
        """
        return _IntTools.IntTools_FaceFace_SetParameters(self, *args)


    def TangentFaces(self, *args) -> "Standard_Boolean":
        """
        * Returns True if faces are tangent
        	:rtype: bool
        """
        return _IntTools.IntTools_FaceFace_TangentFaces(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_FaceFace
IntTools_FaceFace.Context = new_instancemethod(_IntTools.IntTools_FaceFace_Context, None, IntTools_FaceFace)
IntTools_FaceFace.Face1 = new_instancemethod(_IntTools.IntTools_FaceFace_Face1, None, IntTools_FaceFace)
IntTools_FaceFace.Face2 = new_instancemethod(_IntTools.IntTools_FaceFace_Face2, None, IntTools_FaceFace)
IntTools_FaceFace.FuzzyValue = new_instancemethod(_IntTools.IntTools_FaceFace_FuzzyValue, None, IntTools_FaceFace)
IntTools_FaceFace.IsDone = new_instancemethod(_IntTools.IntTools_FaceFace_IsDone, None, IntTools_FaceFace)
IntTools_FaceFace.Lines = new_instancemethod(_IntTools.IntTools_FaceFace_Lines, None, IntTools_FaceFace)
IntTools_FaceFace.Perform = new_instancemethod(_IntTools.IntTools_FaceFace_Perform, None, IntTools_FaceFace)
IntTools_FaceFace.Points = new_instancemethod(_IntTools.IntTools_FaceFace_Points, None, IntTools_FaceFace)
IntTools_FaceFace.PrepareLines3D = new_instancemethod(_IntTools.IntTools_FaceFace_PrepareLines3D, None, IntTools_FaceFace)
IntTools_FaceFace.SetContext = new_instancemethod(_IntTools.IntTools_FaceFace_SetContext, None, IntTools_FaceFace)
IntTools_FaceFace.SetFuzzyValue = new_instancemethod(_IntTools.IntTools_FaceFace_SetFuzzyValue, None, IntTools_FaceFace)
IntTools_FaceFace.SetList = new_instancemethod(_IntTools.IntTools_FaceFace_SetList, None, IntTools_FaceFace)
IntTools_FaceFace.SetParameters = new_instancemethod(_IntTools.IntTools_FaceFace_SetParameters, None, IntTools_FaceFace)
IntTools_FaceFace.TangentFaces = new_instancemethod(_IntTools.IntTools_FaceFace_TangentFaces, None, IntTools_FaceFace)
IntTools_FaceFace_swigregister = _IntTools.IntTools_FaceFace_swigregister
IntTools_FaceFace_swigregister(IntTools_FaceFace)

class IntTools_MarkedRangeSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Flag(self, *args) -> "Standard_Integer":
        """
        * Returns flag of the range with index theIndex
        	:param theIndex:
        	:type theIndex: int
        	:rtype: int
        """
        return _IntTools.IntTools_MarkedRangeSet_Flag(self, *args)


    def GetIndex(self, *args) -> "Standard_Integer":
        """
        * Returns index of range which contains theValue. If theValue do not belong any range returns 0.
        	:param theValue:
        	:type theValue: float
        	:rtype: int
        * Returns index of range which contains theValue If theValue do not belong any range returns 0. If UseLower is Standard_True then lower boundary of the range can be equal to theValue, otherwise upper boundary of the range can be equal to theValue.
        	:param theValue:
        	:type theValue: float
        	:param UseLower:
        	:type UseLower: bool
        	:rtype: int
        """
        return _IntTools.IntTools_MarkedRangeSet_GetIndex(self, *args)


    def GetIndices(self, *args) -> "TColStd_SequenceOfInteger const &":
        """
        :param theValue:
        	:type theValue: float
        	:rtype: TColStd_SequenceOfInteger
        """
        return _IntTools.IntTools_MarkedRangeSet_GetIndices(self, *args)


    def InsertRange(self, *args) -> "Standard_Boolean":
        """
        * Inserts a new range marked with flag theFlag It replace the existing ranges or parts of ranges and their flags. Returns True if the range is inside the initial boundaries, otherwise or in case of some error returns False
        	:param theFirstBoundary:
        	:type theFirstBoundary: float
        	:param theLastBoundary:
        	:type theLastBoundary: float
        	:param theFlag:
        	:type theFlag: int
        	:rtype: bool
        * Inserts a new range marked with flag theFlag It replace the existing ranges or parts of ranges and their flags. Returns True if the range is inside the initial boundaries, otherwise or in case of some error returns False
        	:param theRange:
        	:type theRange: IntTools_Range
        	:param theFlag:
        	:type theFlag: int
        	:rtype: bool
        * Inserts a new range marked with flag theFlag It replace the existing ranges or parts of ranges and their flags. The index theIndex is a position where the range will be inserted. Returns True if the range is inside the initial boundaries, otherwise or in case of some error returns False
        	:param theFirstBoundary:
        	:type theFirstBoundary: float
        	:param theLastBoundary:
        	:type theLastBoundary: float
        	:param theFlag:
        	:type theFlag: int
        	:param theIndex:
        	:type theIndex: int
        	:rtype: bool
        * Inserts a new range marked with flag theFlag It replace the existing ranges or parts of ranges and their flags. The index theIndex is a position where the range will be inserted. Returns True if the range is inside the initial boundaries, otherwise or in case of some error returns False
        	:param theRange:
        	:type theRange: IntTools_Range
        	:param theFlag:
        	:type theFlag: int
        	:param theIndex:
        	:type theIndex: int
        	:rtype: bool
        """
        return _IntTools.IntTools_MarkedRangeSet_InsertRange(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * build set of ranges which consists of one range with boundary values theFirstBoundary and theLastBoundary
        	:param theFirstBoundary:
        	:type theFirstBoundary: float
        	:param theLastBoundary:
        	:type theLastBoundary: float
        	:param theInitFlag:
        	:type theInitFlag: int
        	:rtype: None
        * Build set of ranges based on the array of progressive sorted values //! Warning: The constructor do not check if the values of array are not sorted It should be checked before function invocation
        	:param theSortedArray:
        	:type theSortedArray: IntTools_CArray1OfReal
        	:param theInitFlag:
        	:type theInitFlag: int
        	:rtype: None
        """
        _IntTools.IntTools_MarkedRangeSet_swiginit(self, _IntTools.new_IntTools_MarkedRangeSet(*args))

    def Length(self, *args) -> "Standard_Integer":
        """
        * Returns number of ranges
        	:rtype: int
        """
        return _IntTools.IntTools_MarkedRangeSet_Length(self, *args)


    def Range(self, *args) -> "IntTools_Range":
        """
        * Returns the range with index theIndex. the Index can be from 1 to Length()
        	:param theIndex:
        	:type theIndex: int
        	:rtype: IntTools_Range
        """
        return _IntTools.IntTools_MarkedRangeSet_Range(self, *args)


    def SetBoundaries(self, *args) -> "void":
        """
        * build set of ranges which consists of one range with boundary values theFirstBoundary and theLastBoundary
        	:param theFirstBoundary:
        	:type theFirstBoundary: float
        	:param theLastBoundary:
        	:type theLastBoundary: float
        	:param theInitFlag:
        	:type theInitFlag: int
        	:rtype: None
        """
        return _IntTools.IntTools_MarkedRangeSet_SetBoundaries(self, *args)


    def SetFlag(self, *args) -> "void":
        """
        * Set flag theFlag for range with index theIndex
        	:param theIndex:
        	:type theIndex: int
        	:param theFlag:
        	:type theFlag: int
        	:rtype: None
        """
        return _IntTools.IntTools_MarkedRangeSet_SetFlag(self, *args)


    def SetRanges(self, *args) -> "void":
        """
        * Build set of ranges based on the array of progressive sorted values //! Warning: The function do not check if the values of array are not sorted It should be checked before function invocation
        	:param theSortedArray:
        	:type theSortedArray: IntTools_CArray1OfReal
        	:param theInitFlag:
        	:type theInitFlag: int
        	:rtype: None
        """
        return _IntTools.IntTools_MarkedRangeSet_SetRanges(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_MarkedRangeSet
IntTools_MarkedRangeSet.Flag = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_Flag, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.GetIndex = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_GetIndex, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.GetIndices = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_GetIndices, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.InsertRange = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_InsertRange, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.Length = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_Length, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.Range = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_Range, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.SetBoundaries = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_SetBoundaries, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.SetFlag = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_SetFlag, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet.SetRanges = new_instancemethod(_IntTools.IntTools_MarkedRangeSet_SetRanges, None, IntTools_MarkedRangeSet)
IntTools_MarkedRangeSet_swigregister = _IntTools.IntTools_MarkedRangeSet_swigregister
IntTools_MarkedRangeSet_swigregister(IntTools_MarkedRangeSet)

class IntTools_PntOn2Faces(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Initializes me by two points aP1 and aP2
        	:param aP1:
        	:type aP1: IntTools_PntOnFace
        	:param aP2:
        	:type aP2: IntTools_PntOnFace
        	:rtype: None
        """
        _IntTools.IntTools_PntOn2Faces_swiginit(self, _IntTools.new_IntTools_PntOn2Faces(*args))

    def IsValid(self, *args) -> "Standard_Boolean":
        """
        * Selector
        	:rtype: bool
        """
        return _IntTools.IntTools_PntOn2Faces_IsValid(self, *args)


    def P1(self, *args) -> "IntTools_PntOnFace const &":
        """
        * Selector
        	:rtype: IntTools_PntOnFace
        """
        return _IntTools.IntTools_PntOn2Faces_P1(self, *args)


    def P2(self, *args) -> "IntTools_PntOnFace const &":
        """
        * Selector
        	:rtype: IntTools_PntOnFace
        """
        return _IntTools.IntTools_PntOn2Faces_P2(self, *args)


    def SetP1(self, *args) -> "void":
        """
        * Modifier
        	:param aP1:
        	:type aP1: IntTools_PntOnFace
        	:rtype: None
        """
        return _IntTools.IntTools_PntOn2Faces_SetP1(self, *args)


    def SetP2(self, *args) -> "void":
        """
        * Modifier
        	:param aP2:
        	:type aP2: IntTools_PntOnFace
        	:rtype: None
        """
        return _IntTools.IntTools_PntOn2Faces_SetP2(self, *args)


    def SetValid(self, *args) -> "void":
        """
        * Modifier
        	:param bF:
        	:type bF: bool
        	:rtype: None
        """
        return _IntTools.IntTools_PntOn2Faces_SetValid(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_PntOn2Faces
IntTools_PntOn2Faces.IsValid = new_instancemethod(_IntTools.IntTools_PntOn2Faces_IsValid, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces.P1 = new_instancemethod(_IntTools.IntTools_PntOn2Faces_P1, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces.P2 = new_instancemethod(_IntTools.IntTools_PntOn2Faces_P2, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces.SetP1 = new_instancemethod(_IntTools.IntTools_PntOn2Faces_SetP1, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces.SetP2 = new_instancemethod(_IntTools.IntTools_PntOn2Faces_SetP2, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces.SetValid = new_instancemethod(_IntTools.IntTools_PntOn2Faces_SetValid, None, IntTools_PntOn2Faces)
IntTools_PntOn2Faces_swigregister = _IntTools.IntTools_PntOn2Faces_swigregister
IntTools_PntOn2Faces_swigregister(IntTools_PntOn2Faces)

class IntTools_PntOnFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Face(self, *args) -> "TopoDS_Face const":
        """
        * Selector
        	:rtype: TopoDS_Face
        """
        return _IntTools.IntTools_PntOnFace_Face(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes me by aFace, a 3d point and it's UV parameters on face
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aP:
        	:type aP: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntTools.IntTools_PntOnFace_Init(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _IntTools.IntTools_PntOnFace_swiginit(self, _IntTools.new_IntTools_PntOnFace(*args))

    def Parameters(self, *args) -> "void":
        """
        * Selector
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntTools.IntTools_PntOnFace_Parameters(self, *args)


    def Pnt(self, *args) -> "gp_Pnt const":
        """
        * Selector
        	:rtype: gp_Pnt
        """
        return _IntTools.IntTools_PntOnFace_Pnt(self, *args)


    def SetFace(self, *args) -> "void":
        """
        * Modifier
        	:param aF:
        	:type aF: TopoDS_Face
        	:rtype: None
        """
        return _IntTools.IntTools_PntOnFace_SetFace(self, *args)


    def SetParameters(self, *args) -> "void":
        """
        * Modifier
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _IntTools.IntTools_PntOnFace_SetParameters(self, *args)


    def SetPnt(self, *args) -> "void":
        """
        * Modifier
        	:param aP:
        	:type aP: gp_Pnt
        	:rtype: None
        """
        return _IntTools.IntTools_PntOnFace_SetPnt(self, *args)


    def SetValid(self, *args) -> "void":
        """
        * Modifier
        	:param bF:
        	:type bF: bool
        	:rtype: None
        """
        return _IntTools.IntTools_PntOnFace_SetValid(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_PntOnFace
IntTools_PntOnFace.Face = new_instancemethod(_IntTools.IntTools_PntOnFace_Face, None, IntTools_PntOnFace)
IntTools_PntOnFace.Init = new_instancemethod(_IntTools.IntTools_PntOnFace_Init, None, IntTools_PntOnFace)
IntTools_PntOnFace.Parameters = new_instancemethod(_IntTools.IntTools_PntOnFace_Parameters, None, IntTools_PntOnFace)
IntTools_PntOnFace.Pnt = new_instancemethod(_IntTools.IntTools_PntOnFace_Pnt, None, IntTools_PntOnFace)
IntTools_PntOnFace.SetFace = new_instancemethod(_IntTools.IntTools_PntOnFace_SetFace, None, IntTools_PntOnFace)
IntTools_PntOnFace.SetParameters = new_instancemethod(_IntTools.IntTools_PntOnFace_SetParameters, None, IntTools_PntOnFace)
IntTools_PntOnFace.SetPnt = new_instancemethod(_IntTools.IntTools_PntOnFace_SetPnt, None, IntTools_PntOnFace)
IntTools_PntOnFace.SetValid = new_instancemethod(_IntTools.IntTools_PntOnFace_SetValid, None, IntTools_PntOnFace)
IntTools_PntOnFace_swigregister = _IntTools.IntTools_PntOnFace_swigregister
IntTools_PntOnFace_swigregister(IntTools_PntOnFace)

class IntTools_Range(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def First(self, *args) -> "Standard_Real":
        """
        * Selector
        	:rtype: float
        """
        return _IntTools.IntTools_Range_First(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Initialize me by range boundaries
        	:param aFirst:
        	:type aFirst: float
        	:param aLast:
        	:type aLast: float
        	:rtype: None
        """
        _IntTools.IntTools_Range_swiginit(self, _IntTools.new_IntTools_Range(*args))

    def Last(self, *args) -> "Standard_Real":
        """
        * Selector
        	:rtype: float
        """
        return _IntTools.IntTools_Range_Last(self, *args)


    def Range(self, *args) -> "void":
        """
        * Selector
        	:param aFirst:
        	:type aFirst: float
        	:param aLast:
        	:type aLast: float
        	:rtype: None
        """
        return _IntTools.IntTools_Range_Range(self, *args)


    def SetFirst(self, *args) -> "void":
        """
        * Modifier
        	:param aFirst:
        	:type aFirst: float
        	:rtype: None
        """
        return _IntTools.IntTools_Range_SetFirst(self, *args)


    def SetLast(self, *args) -> "void":
        """
        * Modifier
        	:param aLast:
        	:type aLast: float
        	:rtype: None
        """
        return _IntTools.IntTools_Range_SetLast(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_Range
IntTools_Range.First = new_instancemethod(_IntTools.IntTools_Range_First, None, IntTools_Range)
IntTools_Range.Last = new_instancemethod(_IntTools.IntTools_Range_Last, None, IntTools_Range)
IntTools_Range.Range = new_instancemethod(_IntTools.IntTools_Range_Range, None, IntTools_Range)
IntTools_Range.SetFirst = new_instancemethod(_IntTools.IntTools_Range_SetFirst, None, IntTools_Range)
IntTools_Range.SetLast = new_instancemethod(_IntTools.IntTools_Range_SetLast, None, IntTools_Range)
IntTools_Range_swigregister = _IntTools.IntTools_Range_swigregister
IntTools_Range_swigregister(IntTools_Range)

class IntTools_Root(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Initializes my by range of parameters and type of root
        	:param aRoot:
        	:type aRoot: float
        	:param aType:
        	:type aType: int
        	:rtype: None
        """
        _IntTools.IntTools_Root_swiginit(self, _IntTools.new_IntTools_Root(*args))

    def Interval(self, *args) -> "void":
        """
        * Returns the values of interval from which the Root was found [t1,t2] and the corresponding values of the function on the bounds f(t1), f(t2).
        	:param t1:
        	:type t1: float
        	:param t2:
        	:type t2: float
        	:param f1:
        	:type f1: float
        	:param f2:
        	:type f2: float
        	:rtype: None
        """
        return _IntTools.IntTools_Root_Interval(self, *args)


    def IsValid(self, *args) -> "Standard_Boolean":
        """
        * Returns the validity flag for the root, True if myStateBefore==TopAbs_OUT && myStateAfter==TopAbs_IN or myStateBefore==TopAbs_OUT && myStateAfter==TopAbs_ON or myStateBefore==TopAbs_ON && myStateAfter==TopAbs_OUT or myStateBefore==TopAbs_IN && myStateAfter==TopAbs_OUT . For other cases it returns False.
        	:rtype: bool
        """
        return _IntTools.IntTools_Root_IsValid(self, *args)


    def LayerHeight(self, *args) -> "Standard_Real":
        """
        * Not used in Edge/Edge algorithm
        	:rtype: float
        """
        return _IntTools.IntTools_Root_LayerHeight(self, *args)


    def Root(self, *args) -> "Standard_Real":
        """
        * Returns the Root value
        	:rtype: float
        """
        return _IntTools.IntTools_Root_Root(self, *args)


    def SetInterval(self, *args) -> "void":
        """
        * Sets the interval from which the Root was found [t1,t2] and the corresponding values of the function on the bounds f(t1), f(t2).
        	:param t1:
        	:type t1: float
        	:param t2:
        	:type t2: float
        	:param f1:
        	:type f1: float
        	:param f2:
        	:type f2: float
        	:rtype: None
        """
        return _IntTools.IntTools_Root_SetInterval(self, *args)


    def SetLayerHeight(self, *args) -> "void":
        """
        * Not used in Edge/Edge algorithm
        	:param aHeight:
        	:type aHeight: float
        	:rtype: None
        """
        return _IntTools.IntTools_Root_SetLayerHeight(self, *args)


    def SetRoot(self, *args) -> "void":
        """
        * Sets the Root's value
        	:param aRoot:
        	:type aRoot: float
        	:rtype: None
        """
        return _IntTools.IntTools_Root_SetRoot(self, *args)


    def SetStateAfter(self, *args) -> "void":
        """
        * Set the value of the state after the root (at t=Root-dt)
        	:param aState:
        	:type aState: TopAbs_State
        	:rtype: None
        """
        return _IntTools.IntTools_Root_SetStateAfter(self, *args)


    def SetStateBefore(self, *args) -> "void":
        """
        * Set the value of the state before the root (at t=Root-dt)
        	:param aState:
        	:type aState: TopAbs_State
        	:rtype: None
        """
        return _IntTools.IntTools_Root_SetStateBefore(self, *args)


    def SetType(self, *args) -> "void":
        """
        * Sets the Root's Type
        	:param aType:
        	:type aType: int
        	:rtype: None
        """
        return _IntTools.IntTools_Root_SetType(self, *args)


    def StateAfter(self, *args) -> "TopAbs_State":
        """
        * Returns the state after the root
        	:rtype: TopAbs_State
        """
        return _IntTools.IntTools_Root_StateAfter(self, *args)


    def StateBefore(self, *args) -> "TopAbs_State":
        """
        * Returns the state before the root
        	:rtype: TopAbs_State
        """
        return _IntTools.IntTools_Root_StateBefore(self, *args)


    def Type(self, *args) -> "Standard_Integer":
        """
        * Returns the type of the root =0 - Simple (was found by bisection method); =2 - Smart when f1=0, f2!=0 or vice versa (was found by Fibbonacci method); =1 - Pure (pure zero for all t [t1,t2] );
        	:rtype: int
        """
        return _IntTools.IntTools_Root_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_Root
IntTools_Root.Interval = new_instancemethod(_IntTools.IntTools_Root_Interval, None, IntTools_Root)
IntTools_Root.IsValid = new_instancemethod(_IntTools.IntTools_Root_IsValid, None, IntTools_Root)
IntTools_Root.LayerHeight = new_instancemethod(_IntTools.IntTools_Root_LayerHeight, None, IntTools_Root)
IntTools_Root.Root = new_instancemethod(_IntTools.IntTools_Root_Root, None, IntTools_Root)
IntTools_Root.SetInterval = new_instancemethod(_IntTools.IntTools_Root_SetInterval, None, IntTools_Root)
IntTools_Root.SetLayerHeight = new_instancemethod(_IntTools.IntTools_Root_SetLayerHeight, None, IntTools_Root)
IntTools_Root.SetRoot = new_instancemethod(_IntTools.IntTools_Root_SetRoot, None, IntTools_Root)
IntTools_Root.SetStateAfter = new_instancemethod(_IntTools.IntTools_Root_SetStateAfter, None, IntTools_Root)
IntTools_Root.SetStateBefore = new_instancemethod(_IntTools.IntTools_Root_SetStateBefore, None, IntTools_Root)
IntTools_Root.SetType = new_instancemethod(_IntTools.IntTools_Root_SetType, None, IntTools_Root)
IntTools_Root.StateAfter = new_instancemethod(_IntTools.IntTools_Root_StateAfter, None, IntTools_Root)
IntTools_Root.StateBefore = new_instancemethod(_IntTools.IntTools_Root_StateBefore, None, IntTools_Root)
IntTools_Root.Type = new_instancemethod(_IntTools.IntTools_Root_Type, None, IntTools_Root)
IntTools_Root_swigregister = _IntTools.IntTools_Root_swigregister
IntTools_Root_swigregister(IntTools_Root)

class IntTools_ShrunkRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BndBox(self, *args) -> "Bnd_Box const &":
        """:rtype: Bnd_Box"""
        return _IntTools.IntTools_ShrunkRange_BndBox(self, *args)


    def Context(self, *args) -> "opencascade::handle< IntTools_Context > const &":
        """:rtype: opencascade::handle<IntTools_Context>"""
        return _IntTools.IntTools_ShrunkRange_Context(self, *args)


    def Edge(self, *args) -> "TopoDS_Edge const":
        """:rtype: TopoDS_Edge"""
        return _IntTools.IntTools_ShrunkRange_Edge(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _IntTools.IntTools_ShrunkRange_swiginit(self, _IntTools.new_IntTools_ShrunkRange(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True in case the shrunk range is computed
        	:rtype: bool
        """
        return _IntTools.IntTools_ShrunkRange_IsDone(self, *args)


    def IsSplittable(self, *args) -> "Standard_Boolean":
        """
        * Returns False in case the shrunk range is too short and the edge cannot be split, otherwise returns True
        	:rtype: bool
        """
        return _IntTools.IntTools_ShrunkRange_IsSplittable(self, *args)


    def Length(self, *args) -> "Standard_Real":
        """
        * Returns the length of the edge if computed.
        	:rtype: float
        """
        return _IntTools.IntTools_ShrunkRange_Length(self, *args)


    def Perform(self, *args) -> "void":
        """:rtype: None"""
        return _IntTools.IntTools_ShrunkRange_Perform(self, *args)


    def SetContext(self, *args) -> "void":
        """
        :param aCtx:
        	:type aCtx: IntTools_Context
        	:rtype: None
        """
        return _IntTools.IntTools_ShrunkRange_SetContext(self, *args)


    def SetData(self, *args) -> "void":
        """
        :param aE:
        	:type aE: TopoDS_Edge
        	:param aT1:
        	:type aT1: float
        	:param aT2:
        	:type aT2: float
        	:param aV1:
        	:type aV1: TopoDS_Vertex
        	:param aV2:
        	:type aV2: TopoDS_Vertex
        	:rtype: None
        """
        return _IntTools.IntTools_ShrunkRange_SetData(self, *args)


    def SetShrunkRange(self, *args) -> "void":
        """
        :param aT1:
        	:type aT1: float
        	:param aT2:
        	:type aT2: float
        	:rtype: None
        """
        return _IntTools.IntTools_ShrunkRange_SetShrunkRange(self, *args)


    def ShrunkRange(self, *args) -> "void":
        """
        :param aT1:
        	:type aT1: float
        	:param aT2:
        	:type aT2: float
        	:rtype: None
        """
        return _IntTools.IntTools_ShrunkRange_ShrunkRange(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_ShrunkRange
IntTools_ShrunkRange.BndBox = new_instancemethod(_IntTools.IntTools_ShrunkRange_BndBox, None, IntTools_ShrunkRange)
IntTools_ShrunkRange.Context = new_instancemethod(_IntTools.IntTools_ShrunkRange_Context, None, IntTools_ShrunkRange)
IntTools_ShrunkRange.Edge = new_instancemethod(_IntTools.IntTools_ShrunkRange_Edge, None, IntTools_ShrunkRange)
IntTools_ShrunkRange.IsDone = new_instancemethod(_IntTools.IntTools_ShrunkRange_IsDone, None, IntTools_ShrunkRange)
IntTools_ShrunkRange.IsSplittable = new_instancemethod(_IntTools.IntTools_ShrunkRange_IsSplittable, None, IntTools_ShrunkRange)
IntTools_ShrunkRange.Length = new_instancemethod(_IntTools.IntTools_ShrunkRange_Length, None, IntTools_ShrunkRange)
IntTools_ShrunkRange.Perform = new_instancemethod(_IntTools.IntTools_ShrunkRange_Perform, None, IntTools_ShrunkRange)
IntTools_ShrunkRange.SetContext = new_instancemethod(_IntTools.IntTools_ShrunkRange_SetContext, None, IntTools_ShrunkRange)
IntTools_ShrunkRange.SetData = new_instancemethod(_IntTools.IntTools_ShrunkRange_SetData, None, IntTools_ShrunkRange)
IntTools_ShrunkRange.SetShrunkRange = new_instancemethod(_IntTools.IntTools_ShrunkRange_SetShrunkRange, None, IntTools_ShrunkRange)
IntTools_ShrunkRange.ShrunkRange = new_instancemethod(_IntTools.IntTools_ShrunkRange_ShrunkRange, None, IntTools_ShrunkRange)
IntTools_ShrunkRange_swigregister = _IntTools.IntTools_ShrunkRange_swigregister
IntTools_ShrunkRange_swigregister(IntTools_ShrunkRange)

class IntTools_SurfaceRangeLocalizeData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddBox(self, *args) -> "void":
        """
        :param theRange:
        	:type theRange: IntTools_SurfaceRangeSample
        	:param theBox:
        	:type theBox: Bnd_Box
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_AddBox(self, *args)


    def AddOutRange(self, *args) -> "void":
        """
        :param theRange:
        	:type theRange: IntTools_SurfaceRangeSample
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_AddOutRange(self, *args)


    def Assign(self, *args) -> "IntTools_SurfaceRangeLocalizeData &":
        """
        :param Other:
        	:type Other: IntTools_SurfaceRangeLocalizeData
        	:rtype: IntTools_SurfaceRangeLocalizeData
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_Assign(self, *args)


    def ClearGrid(self, *args) -> "void":
        """
        * Clears the grid of points.
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_ClearGrid(self, *args)


    def FindBox(self, *args) -> "Standard_Boolean":
        """
        :param theRange:
        	:type theRange: IntTools_SurfaceRangeSample
        	:param theBox:
        	:type theBox: Bnd_Box
        	:rtype: bool
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_FindBox(self, *args)


    def GetGridDeflection(self, *args) -> "Standard_Real":
        """
        * Query the grid deflection.
        	:rtype: float
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetGridDeflection(self, *args)


    def GetGridPoint(self, *args) -> "gp_Pnt const":
        """
        * Set the grid point.
        	:param theUIndex:
        	:type theUIndex: int
        	:param theVIndex:
        	:type theVIndex: int
        	:rtype: gp_Pnt
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetGridPoint(self, *args)


    def GetMinRangeU(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetMinRangeU(self, *args)


    def GetMinRangeV(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetMinRangeV(self, *args)


    def GetNBUPointsInFrame(self, *args) -> "Standard_Integer":
        """
        * Returns the number of grid points on U direction in frame.
        	:rtype: int
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetNBUPointsInFrame(self, *args)


    def GetNBVPointsInFrame(self, *args) -> "Standard_Integer":
        """
        * Returns the number of grid points on V direction in frame.
        	:rtype: int
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetNBVPointsInFrame(self, *args)


    def GetNbSampleU(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetNbSampleU(self, *args)


    def GetNbSampleV(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetNbSampleV(self, *args)


    def GetPointInFrame(self, *args) -> "gp_Pnt const":
        """
        * Returns the grid point in frame.
        	:param theUIndex:
        	:type theUIndex: int
        	:param theVIndex:
        	:type theVIndex: int
        	:rtype: gp_Pnt
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetPointInFrame(self, *args)


    def GetRangeUGrid(self, *args) -> "Standard_Integer":
        """
        * Query the range U of the grid of points.
        	:rtype: int
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetRangeUGrid(self, *args)


    def GetRangeVGrid(self, *args) -> "Standard_Integer":
        """
        * Query the range V of the grid of points.
        	:rtype: int
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetRangeVGrid(self, *args)


    def GetUParam(self, *args) -> "Standard_Real":
        """
        * Query the U parameter of the grid points at that index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: float
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetUParam(self, *args)


    def GetUParamInFrame(self, *args) -> "Standard_Real":
        """
        * Query the U parameter of the grid points at that index in frame.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: float
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetUParamInFrame(self, *args)


    def GetVParam(self, *args) -> "Standard_Real":
        """
        * Query the V parameter of the grid points at that index.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: float
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetVParam(self, *args)


    def GetVParamInFrame(self, *args) -> "Standard_Real":
        """
        * Query the V parameter of the grid points at that index in frame.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: float
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_GetVParamInFrame(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param theNbSampleU:
        	:type theNbSampleU: int
        	:param theNbSampleV:
        	:type theNbSampleV: int
        	:param theMinRangeU:
        	:type theMinRangeU: float
        	:param theMinRangeV:
        	:type theMinRangeV: float
        	:rtype: None
        :param Other:
        	:type Other: IntTools_SurfaceRangeLocalizeData
        	:rtype: None
        """
        _IntTools.IntTools_SurfaceRangeLocalizeData_swiginit(self, _IntTools.new_IntTools_SurfaceRangeLocalizeData(*args))

    def IsRangeOut(self, *args) -> "Standard_Boolean":
        """
        :param theRange:
        	:type theRange: IntTools_SurfaceRangeSample
        	:rtype: bool
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_IsRangeOut(self, *args)


    def ListRangeOut(self, *args) -> "void":
        """
        :param theList:
        	:type theList: IntTools_ListOfSurfaceRangeSample
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_ListRangeOut(self, *args)


    def RemoveRangeOutAll(self, *args) -> "void":
        """:rtype: None"""
        return _IntTools.IntTools_SurfaceRangeLocalizeData_RemoveRangeOutAll(self, *args)


    def SetFrame(self, *args) -> "void":
        """
        * Sets the frame area. Used to work with grid points.
        	:param theUMin:
        	:type theUMin: float
        	:param theUMax:
        	:type theUMax: float
        	:param theVMin:
        	:type theVMin: float
        	:param theVMax:
        	:type theVMax: float
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetFrame(self, *args)


    def SetGridDeflection(self, *args) -> "void":
        """
        * Set the grid deflection.
        	:param theDeflection:
        	:type theDeflection: float
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetGridDeflection(self, *args)


    def SetGridPoint(self, *args) -> "void":
        """
        * Set the grid point.
        	:param theUIndex:
        	:type theUIndex: int
        	:param theVIndex:
        	:type theVIndex: int
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetGridPoint(self, *args)


    def SetRangeUGrid(self, *args) -> "void":
        """
        * Set the range U of the grid of points.
        	:param theNbUGrid:
        	:type theNbUGrid: int
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetRangeUGrid(self, *args)


    def SetRangeVGrid(self, *args) -> "void":
        """
        * Set the range V of the grid of points.
        	:param theNbVGrid:
        	:type theNbVGrid: int
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetRangeVGrid(self, *args)


    def SetUParam(self, *args) -> "void":
        """
        * Set the U parameter of the grid points at that index.
        	:param theIndex:
        	:type theIndex: int
        	:param theUParam:
        	:type theUParam: float
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetUParam(self, *args)


    def SetVParam(self, *args) -> "void":
        """
        * Set the V parameter of the grid points at that index.
        	:param theIndex:
        	:type theIndex: int
        	:param theVParam:
        	:type theVParam: float
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_SetVParam(self, *args)


    def Set(self, *args) -> "IntTools_SurfaceRangeLocalizeData &":
        """
        :param Other:
        	:type Other: IntTools_SurfaceRangeLocalizeData
        	:rtype: IntTools_SurfaceRangeLocalizeData
        """
        return _IntTools.IntTools_SurfaceRangeLocalizeData_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_SurfaceRangeLocalizeData
IntTools_SurfaceRangeLocalizeData.AddBox = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_AddBox, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.AddOutRange = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_AddOutRange, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.Assign = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_Assign, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.ClearGrid = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_ClearGrid, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.FindBox = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_FindBox, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetGridDeflection = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetGridDeflection, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetGridPoint = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetGridPoint, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetMinRangeU = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetMinRangeU, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetMinRangeV = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetMinRangeV, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetNBUPointsInFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetNBUPointsInFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetNBVPointsInFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetNBVPointsInFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetNbSampleU = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetNbSampleU, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetNbSampleV = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetNbSampleV, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetPointInFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetPointInFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetRangeUGrid = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetRangeUGrid, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetRangeVGrid = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetRangeVGrid, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetUParam = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetUParam, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetUParamInFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetUParamInFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetVParam = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetVParam, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.GetVParamInFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_GetVParamInFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.IsRangeOut = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_IsRangeOut, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.ListRangeOut = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_ListRangeOut, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.RemoveRangeOutAll = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_RemoveRangeOutAll, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetFrame = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetFrame, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetGridDeflection = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetGridDeflection, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetGridPoint = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetGridPoint, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetRangeUGrid = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetRangeUGrid, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetRangeVGrid = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetRangeVGrid, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetUParam = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetUParam, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.SetVParam = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_SetVParam, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData.Set = new_instancemethod(_IntTools.IntTools_SurfaceRangeLocalizeData_Set, None, IntTools_SurfaceRangeLocalizeData)
IntTools_SurfaceRangeLocalizeData_swigregister = _IntTools.IntTools_SurfaceRangeLocalizeData_swigregister
IntTools_SurfaceRangeLocalizeData_swigregister(IntTools_SurfaceRangeLocalizeData)

class IntTools_SurfaceRangeSample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Assign(self, *args) -> "IntTools_SurfaceRangeSample &":
        """
        :param Other:
        	:type Other: IntTools_SurfaceRangeSample
        	:rtype: IntTools_SurfaceRangeSample
        """
        return _IntTools.IntTools_SurfaceRangeSample_Assign(self, *args)


    def GetDepthU(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntTools.IntTools_SurfaceRangeSample_GetDepthU(self, *args)


    def GetDepthV(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntTools.IntTools_SurfaceRangeSample_GetDepthV(self, *args)


    def GetDepths(self, *args) -> "void":
        """
        :param theDepthU:
        	:type theDepthU: int
        	:param theDepthV:
        	:type theDepthV: int
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeSample_GetDepths(self, *args)


    def GetIndexU(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntTools.IntTools_SurfaceRangeSample_GetIndexU(self, *args)


    def GetIndexV(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntTools.IntTools_SurfaceRangeSample_GetIndexV(self, *args)


    def GetIndexes(self, *args) -> "void":
        """
        :param theIndexU:
        	:type theIndexU: int
        	:param theIndexV:
        	:type theIndexV: int
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeSample_GetIndexes(self, *args)


    def GetRangeIndexUDeeper(self, *args) -> "Standard_Integer":
        """
        :param theNbSampleU:
        	:type theNbSampleU: int
        	:rtype: int
        """
        return _IntTools.IntTools_SurfaceRangeSample_GetRangeIndexUDeeper(self, *args)


    def GetRangeIndexVDeeper(self, *args) -> "Standard_Integer":
        """
        :param theNbSampleV:
        	:type theNbSampleV: int
        	:rtype: int
        """
        return _IntTools.IntTools_SurfaceRangeSample_GetRangeIndexVDeeper(self, *args)


    def GetRangeU(self, *args) -> "IntTools_Range":
        """
        :param theFirstU:
        	:type theFirstU: float
        	:param theLastU:
        	:type theLastU: float
        	:param theNbSampleU:
        	:type theNbSampleU: int
        	:rtype: IntTools_Range
        """
        return _IntTools.IntTools_SurfaceRangeSample_GetRangeU(self, *args)


    def GetRangeV(self, *args) -> "IntTools_Range":
        """
        :param theFirstV:
        	:type theFirstV: float
        	:param theLastV:
        	:type theLastV: float
        	:param theNbSampleV:
        	:type theNbSampleV: int
        	:rtype: IntTools_Range
        """
        return _IntTools.IntTools_SurfaceRangeSample_GetRangeV(self, *args)


    def GetRanges(self, *args) -> "void":
        """
        :param theRangeU:
        	:type theRangeU: IntTools_CurveRangeSample
        	:param theRangeV:
        	:type theRangeV: IntTools_CurveRangeSample
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeSample_GetRanges(self, *args)


    def GetSampleRangeU(self, *args) -> "IntTools_CurveRangeSample const &":
        """:rtype: IntTools_CurveRangeSample"""
        return _IntTools.IntTools_SurfaceRangeSample_GetSampleRangeU(self, *args)


    def GetSampleRangeV(self, *args) -> "IntTools_CurveRangeSample const &":
        """:rtype: IntTools_CurveRangeSample"""
        return _IntTools.IntTools_SurfaceRangeSample_GetSampleRangeV(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param theIndexU:
        	:type theIndexU: int
        	:param theDepthU:
        	:type theDepthU: int
        	:param theIndexV:
        	:type theIndexV: int
        	:param theDepthV:
        	:type theDepthV: int
        	:rtype: None
        :param theRangeU:
        	:type theRangeU: IntTools_CurveRangeSample
        	:param theRangeV:
        	:type theRangeV: IntTools_CurveRangeSample
        	:rtype: None
        :param Other:
        	:type Other: IntTools_SurfaceRangeSample
        	:rtype: None
        """
        _IntTools.IntTools_SurfaceRangeSample_swiginit(self, _IntTools.new_IntTools_SurfaceRangeSample(*args))

    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        :param Other:
        	:type Other: IntTools_SurfaceRangeSample
        	:rtype: bool
        """
        return _IntTools.IntTools_SurfaceRangeSample_IsEqual(self, *args)


    def SetDepthU(self, *args) -> "void":
        """
        :param theDepthU:
        	:type theDepthU: int
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeSample_SetDepthU(self, *args)


    def SetDepthV(self, *args) -> "void":
        """
        :param theDepthV:
        	:type theDepthV: int
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeSample_SetDepthV(self, *args)


    def SetIndexU(self, *args) -> "void":
        """
        :param theIndexU:
        	:type theIndexU: int
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeSample_SetIndexU(self, *args)


    def SetIndexV(self, *args) -> "void":
        """
        :param theIndexV:
        	:type theIndexV: int
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeSample_SetIndexV(self, *args)


    def SetIndexes(self, *args) -> "void":
        """
        :param theIndexU:
        	:type theIndexU: int
        	:param theIndexV:
        	:type theIndexV: int
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeSample_SetIndexes(self, *args)


    def SetRanges(self, *args) -> "void":
        """
        :param theRangeU:
        	:type theRangeU: IntTools_CurveRangeSample
        	:param theRangeV:
        	:type theRangeV: IntTools_CurveRangeSample
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeSample_SetRanges(self, *args)


    def SetSampleRangeU(self, *args) -> "void":
        """
        :param theRangeSampleU:
        	:type theRangeSampleU: IntTools_CurveRangeSample
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeSample_SetSampleRangeU(self, *args)


    def SetSampleRangeV(self, *args) -> "void":
        """
        :param theRangeSampleV:
        	:type theRangeSampleV: IntTools_CurveRangeSample
        	:rtype: None
        """
        return _IntTools.IntTools_SurfaceRangeSample_SetSampleRangeV(self, *args)


    def Set(self, *args) -> "IntTools_SurfaceRangeSample &":
        """
        :param Other:
        	:type Other: IntTools_SurfaceRangeSample
        	:rtype: IntTools_SurfaceRangeSample
        """
        return _IntTools.IntTools_SurfaceRangeSample_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_SurfaceRangeSample
IntTools_SurfaceRangeSample.Assign = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_Assign, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetDepthU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetDepthU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetDepthV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetDepthV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetDepths = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetDepths, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetIndexU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetIndexU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetIndexV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetIndexV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetIndexes = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetIndexes, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetRangeIndexUDeeper = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetRangeIndexUDeeper, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetRangeIndexVDeeper = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetRangeIndexVDeeper, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetRangeU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetRangeU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetRangeV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetRangeV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetRanges = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetRanges, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetSampleRangeU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetSampleRangeU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.GetSampleRangeV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_GetSampleRangeV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.IsEqual = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_IsEqual, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetDepthU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetDepthU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetDepthV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetDepthV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetIndexU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetIndexU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetIndexV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetIndexV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetIndexes = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetIndexes, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetRanges = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetRanges, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetSampleRangeU = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetSampleRangeU, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.SetSampleRangeV = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_SetSampleRangeV, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample.Set = new_instancemethod(_IntTools.IntTools_SurfaceRangeSample_Set, None, IntTools_SurfaceRangeSample)
IntTools_SurfaceRangeSample_swigregister = _IntTools.IntTools_SurfaceRangeSample_swigregister
IntTools_SurfaceRangeSample_swigregister(IntTools_SurfaceRangeSample)

class IntTools_SurfaceRangeSampleMapHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        * Computes a hash code for the given key, in the range [1, theUpperBound] @param theKey the key which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param theKey:
        	:type theKey: IntTools_SurfaceRangeSample
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _IntTools.IntTools_SurfaceRangeSampleMapHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.
        	:param S1:
        	:type S1: IntTools_SurfaceRangeSample
        	:param S2:
        	:type S2: IntTools_SurfaceRangeSample
        	:rtype: bool
        """
        return _IntTools.IntTools_SurfaceRangeSampleMapHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _IntTools.IntTools_SurfaceRangeSampleMapHasher_swiginit(self, _IntTools.new_IntTools_SurfaceRangeSampleMapHasher())
    __swig_destroy__ = _IntTools.delete_IntTools_SurfaceRangeSampleMapHasher
IntTools_SurfaceRangeSampleMapHasher_swigregister = _IntTools.IntTools_SurfaceRangeSampleMapHasher_swigregister
IntTools_SurfaceRangeSampleMapHasher_swigregister(IntTools_SurfaceRangeSampleMapHasher)

def IntTools_SurfaceRangeSampleMapHasher_HashCode(*args) -> "Standard_Integer":
    """
    * Computes a hash code for the given key, in the range [1, theUpperBound] @param theKey the key which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
    	:param theKey:
    	:type theKey: IntTools_SurfaceRangeSample
    	:param theUpperBound:
    	:type theUpperBound: int
    	:rtype: int
    """
    return _IntTools.IntTools_SurfaceRangeSampleMapHasher_HashCode(*args)

def IntTools_SurfaceRangeSampleMapHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.
    	:param S1:
    	:type S1: IntTools_SurfaceRangeSample
    	:param S2:
    	:type S2: IntTools_SurfaceRangeSample
    	:rtype: bool
    """
    return _IntTools.IntTools_SurfaceRangeSampleMapHasher_IsEqual(*args)

class IntTools_Tools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CheckCurve(*args) -> "Standard_Boolean":
        """
        * Checks if the curve is not covered by the default tolerance (confusion). Builds bounding box for the curve and stores it into <theBox>.
        	:param theCurve:
        	:type theCurve: IntTools_Curve
        	:param theBox:
        	:type theBox: Bnd_Box
        	:rtype: bool
        """
        return _IntTools.IntTools_Tools_CheckCurve(*args)

    CheckCurve = staticmethod(CheckCurve)

    def ClassifyPointByFace(*args) -> "TopAbs_State":
        """
        :param aF:
        	:type aF: TopoDS_Face
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: TopAbs_State
        """
        return _IntTools.IntTools_Tools_ClassifyPointByFace(*args)

    ClassifyPointByFace = staticmethod(ClassifyPointByFace)

    def ComputeIntRange(*args) -> "Standard_Real":
        """
        * Computes the correct Intersection range for Line/Line, Line/Plane and Plane/Plane intersections
        	:param theTol1:
        	:type theTol1: float
        	:param theTol2:
        	:type theTol2: float
        	:param theAngle:
        	:type theAngle: float
        	:rtype: float
        """
        return _IntTools.IntTools_Tools_ComputeIntRange(*args)

    ComputeIntRange = staticmethod(ComputeIntRange)

    def ComputeTolerance(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Computes the max distance between points taken from 3D and 2D curves by the same parameter
        	:param theCurve3D:
        	:type theCurve3D: Geom_Curve
        	:param theCurve2D:
        	:type theCurve2D: Geom2d_Curve
        	:param theSurf:
        	:type theSurf: Geom_Surface
        	:param theFirst:
        	:type theFirst: float
        	:param theLast:
        	:type theLast: float
        	:param theMaxDist:
        	:type theMaxDist: float
        	:param theMaxPar:
        	:type theMaxPar: float
        	:param theTolRange: default value is Precision::Confusion()
        	:type theTolRange: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Tools_ComputeTolerance(*args)

    ComputeTolerance = staticmethod(ComputeTolerance)

    def ComputeVV(*args) -> "Standard_Integer":
        """
        * Computes distance between vertex V1 and vertex V2, if the distance is less than sum of vertex tolerances returns zero, otherwise returns negative value
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: int
        """
        return _IntTools.IntTools_Tools_ComputeVV(*args)

    ComputeVV = staticmethod(ComputeVV)

    def CurveTolerance(*args) -> "Standard_Real":
        """
        * Returns adaptive tolerance for given aTolBase if aC is trimmed curve and basis curve is parabola, otherwise returns value of aTolBase
        	:param aC:
        	:type aC: Geom_Curve
        	:param aTolBase:
        	:type aTolBase: float
        	:rtype: float
        """
        return _IntTools.IntTools_Tools_CurveTolerance(*args)

    CurveTolerance = staticmethod(CurveTolerance)

    def HasInternalEdge(*args) -> "Standard_Boolean":
        """
        * Returns True if wire aW contains edges with INTERNAL orientation
        	:param aW:
        	:type aW: TopoDS_Wire
        	:rtype: bool
        """
        return _IntTools.IntTools_Tools_HasInternalEdge(*args)

    HasInternalEdge = staticmethod(HasInternalEdge)

    def IntermediatePoint(*args) -> "Standard_Real":
        """
        * Returns some value between aFirst and aLast
        	:param aFirst:
        	:type aFirst: float
        	:param aLast:
        	:type aLast: float
        	:rtype: float
        """
        return _IntTools.IntTools_Tools_IntermediatePoint(*args)

    IntermediatePoint = staticmethod(IntermediatePoint)

    def IsClosed(*args) -> "Standard_Boolean":
        """
        * Returns True if aC is BoundedCurve from Geom and the distance between first point of the curve aC and last point is less than 1.e-12
        	:param aC:
        	:type aC: Geom_Curve
        	:rtype: bool
        """
        return _IntTools.IntTools_Tools_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def IsDirsCoinside(*args) -> "Standard_Boolean":
        """
        * Returns True if D1 and D2 coinside
        	:param D1:
        	:type D1: gp_Dir
        	:param D2:
        	:type D2: gp_Dir
        	:rtype: bool
        * Returns True if D1 and D2 coinside with given tolerance
        	:param D1:
        	:type D1: gp_Dir
        	:param D2:
        	:type D2: gp_Dir
        	:param aTol:
        	:type aTol: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Tools_IsDirsCoinside(*args)

    IsDirsCoinside = staticmethod(IsDirsCoinside)

    def IsInRange(*args) -> "Standard_Boolean":
        """
        * Checks if the range <theR> interfere with the range <theRRef>
        	:param theRRef:
        	:type theRRef: IntTools_Range
        	:param theR:
        	:type theR: IntTools_Range
        	:param theTol:
        	:type theTol: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Tools_IsInRange(*args)

    IsInRange = staticmethod(IsInRange)

    def IsMiddlePointsEqual(*args) -> "Standard_Boolean":
        """
        * Gets boundary of parameters of E1 and E2. Computes 3d points on each corresponded to average parameters. Returns True if distance between computed points is less than sum of edge tolerance, otherwise returns False.
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:rtype: bool
        """
        return _IntTools.IntTools_Tools_IsMiddlePointsEqual(*args)

    IsMiddlePointsEqual = staticmethod(IsMiddlePointsEqual)

    def IsOnPave(*args) -> "Standard_Boolean":
        """
        :param theT:
        	:type theT: float
        	:param theRange:
        	:type theRange: IntTools_Range
        	:param theTol:
        	:type theTol: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Tools_IsOnPave(*args)

    IsOnPave = staticmethod(IsOnPave)

    def IsOnPave1(*args) -> "Standard_Boolean":
        """
        :param theT:
        	:type theT: float
        	:param theRange:
        	:type theRange: IntTools_Range
        	:param theTol:
        	:type theTol: float
        	:rtype: bool
        """
        return _IntTools.IntTools_Tools_IsOnPave1(*args)

    IsOnPave1 = staticmethod(IsOnPave1)

    def IsVertex(*args) -> "Standard_Boolean":
        """
        * Computes square distance between a point on the edge E corresponded to parameter t and vertices of edge E. Returns True if this distance is less than square tolerance of vertex, otherwise returns false.
        	:param E:
        	:type E: TopoDS_Edge
        	:param t:
        	:type t: float
        	:rtype: bool
        * Returns True if square distance between vertex V and a point on the edge E corresponded to parameter t is less than square tolerance of V
        	:param E:
        	:type E: TopoDS_Edge
        	:param V:
        	:type V: TopoDS_Vertex
        	:param t:
        	:type t: float
        	:rtype: bool
        * Returns True if IsVertx for middle parameter of fist range and first edge returns True and if IsVertex for middle parameter of second range and second range returns True, otherwise returns False
        	:param aCmnPrt:
        	:type aCmnPrt: IntTools_CommonPrt
        	:rtype: bool
        * Returns True if the distance between point aP and vertex aV is less or equal to sum of aTolPV and vertex tolerance, otherwise returns False
        	:param aP:
        	:type aP: gp_Pnt
        	:param aTolPV:
        	:type aTolPV: float
        	:param aV:
        	:type aV: TopoDS_Vertex
        	:rtype: bool
        """
        return _IntTools.IntTools_Tools_IsVertex(*args)

    IsVertex = staticmethod(IsVertex)

    def MakeFaceFromWireAndFace(*args) -> "void":
        """
        * Build a face based on surface of given face aF and bounded by wire aW
        	:param aW:
        	:type aW: TopoDS_Wire
        	:param aF:
        	:type aF: TopoDS_Face
        	:param aFNew:
        	:type aFNew: TopoDS_Face
        	:rtype: void
        """
        return _IntTools.IntTools_Tools_MakeFaceFromWireAndFace(*args)

    MakeFaceFromWireAndFace = staticmethod(MakeFaceFromWireAndFace)

    def RejectLines(*args) -> "void":
        """
        * Puts curves from aSIn to aSOut except those curves that are coincide with first curve from aSIn.
        	:param aSIn:
        	:type aSIn: IntTools_SequenceOfCurves
        	:param aSOut:
        	:type aSOut: IntTools_SequenceOfCurves
        	:rtype: void
        """
        return _IntTools.IntTools_Tools_RejectLines(*args)

    RejectLines = staticmethod(RejectLines)

    def SegPln(*args) -> "Standard_Real &, Standard_Real &, Standard_Real &, Standard_Real &":
        """
        :param theLin:
        	:type theLin: gp_Lin
        	:param theTLin1:
        	:type theTLin1: float
        	:param theTLin2:
        	:type theTLin2: float
        	:param theTolLin:
        	:type theTolLin: float
        	:param thePln:
        	:type thePln: gp_Pln
        	:param theTolPln:
        	:type theTolPln: float
        	:param theP:
        	:type theP: gp_Pnt
        	:param theT:
        	:type theT: float
        	:param theTolP:
        	:type theTolP: float
        	:param theTmin:
        	:type theTmin: float
        	:param theTmax:
        	:type theTmax: float
        	:rtype: int
        """
        return _IntTools.IntTools_Tools_SegPln(*args)

    SegPln = staticmethod(SegPln)

    def SplitCurve(*args) -> "Standard_Integer":
        """
        * Split aC by average parameter if aC is closed in 3D. Returns positive value if splitting has been done, otherwise returns zero.
        	:param aC:
        	:type aC: IntTools_Curve
        	:param aS:
        	:type aS: IntTools_SequenceOfCurves
        	:rtype: int
        """
        return _IntTools.IntTools_Tools_SplitCurve(*args)

    SplitCurve = staticmethod(SplitCurve)

    def VertexParameter(*args) -> "Standard_Real &":
        """
        :param theCP:
        	:type theCP: IntTools_CommonPrt
        	:param theT:
        	:type theT: float
        	:rtype: void
        """
        return _IntTools.IntTools_Tools_VertexParameter(*args)

    VertexParameter = staticmethod(VertexParameter)

    def VertexParameters(*args) -> "Standard_Real &, Standard_Real &":
        """
        :param theCP:
        	:type theCP: IntTools_CommonPrt
        	:param theT1:
        	:type theT1: float
        	:param theT2:
        	:type theT2: float
        	:rtype: void
        """
        return _IntTools.IntTools_Tools_VertexParameters(*args)

    VertexParameters = staticmethod(VertexParameters)

    __repr__ = _dumps_object


    def __init__(self):
        _IntTools.IntTools_Tools_swiginit(self, _IntTools.new_IntTools_Tools())
    __swig_destroy__ = _IntTools.delete_IntTools_Tools
IntTools_Tools_swigregister = _IntTools.IntTools_Tools_swigregister
IntTools_Tools_swigregister(IntTools_Tools)

def IntTools_Tools_CheckCurve(*args) -> "Standard_Boolean":
    """
    * Checks if the curve is not covered by the default tolerance (confusion). Builds bounding box for the curve and stores it into <theBox>.
    	:param theCurve:
    	:type theCurve: IntTools_Curve
    	:param theBox:
    	:type theBox: Bnd_Box
    	:rtype: bool
    """
    return _IntTools.IntTools_Tools_CheckCurve(*args)

def IntTools_Tools_ClassifyPointByFace(*args) -> "TopAbs_State":
    """
    :param aF:
    	:type aF: TopoDS_Face
    	:param P:
    	:type P: gp_Pnt2d
    	:rtype: TopAbs_State
    """
    return _IntTools.IntTools_Tools_ClassifyPointByFace(*args)

def IntTools_Tools_ComputeIntRange(*args) -> "Standard_Real":
    """
    * Computes the correct Intersection range for Line/Line, Line/Plane and Plane/Plane intersections
    	:param theTol1:
    	:type theTol1: float
    	:param theTol2:
    	:type theTol2: float
    	:param theAngle:
    	:type theAngle: float
    	:rtype: float
    """
    return _IntTools.IntTools_Tools_ComputeIntRange(*args)

def IntTools_Tools_ComputeTolerance(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Computes the max distance between points taken from 3D and 2D curves by the same parameter
    	:param theCurve3D:
    	:type theCurve3D: Geom_Curve
    	:param theCurve2D:
    	:type theCurve2D: Geom2d_Curve
    	:param theSurf:
    	:type theSurf: Geom_Surface
    	:param theFirst:
    	:type theFirst: float
    	:param theLast:
    	:type theLast: float
    	:param theMaxDist:
    	:type theMaxDist: float
    	:param theMaxPar:
    	:type theMaxPar: float
    	:param theTolRange: default value is Precision::Confusion()
    	:type theTolRange: float
    	:rtype: bool
    """
    return _IntTools.IntTools_Tools_ComputeTolerance(*args)

def IntTools_Tools_ComputeVV(*args) -> "Standard_Integer":
    """
    * Computes distance between vertex V1 and vertex V2, if the distance is less than sum of vertex tolerances returns zero, otherwise returns negative value
    	:param V1:
    	:type V1: TopoDS_Vertex
    	:param V2:
    	:type V2: TopoDS_Vertex
    	:rtype: int
    """
    return _IntTools.IntTools_Tools_ComputeVV(*args)

def IntTools_Tools_CurveTolerance(*args) -> "Standard_Real":
    """
    * Returns adaptive tolerance for given aTolBase if aC is trimmed curve and basis curve is parabola, otherwise returns value of aTolBase
    	:param aC:
    	:type aC: Geom_Curve
    	:param aTolBase:
    	:type aTolBase: float
    	:rtype: float
    """
    return _IntTools.IntTools_Tools_CurveTolerance(*args)

def IntTools_Tools_HasInternalEdge(*args) -> "Standard_Boolean":
    """
    * Returns True if wire aW contains edges with INTERNAL orientation
    	:param aW:
    	:type aW: TopoDS_Wire
    	:rtype: bool
    """
    return _IntTools.IntTools_Tools_HasInternalEdge(*args)

def IntTools_Tools_IntermediatePoint(*args) -> "Standard_Real":
    """
    * Returns some value between aFirst and aLast
    	:param aFirst:
    	:type aFirst: float
    	:param aLast:
    	:type aLast: float
    	:rtype: float
    """
    return _IntTools.IntTools_Tools_IntermediatePoint(*args)

def IntTools_Tools_IsClosed(*args) -> "Standard_Boolean":
    """
    * Returns True if aC is BoundedCurve from Geom and the distance between first point of the curve aC and last point is less than 1.e-12
    	:param aC:
    	:type aC: Geom_Curve
    	:rtype: bool
    """
    return _IntTools.IntTools_Tools_IsClosed(*args)

def IntTools_Tools_IsDirsCoinside(*args) -> "Standard_Boolean":
    """
    * Returns True if D1 and D2 coinside
    	:param D1:
    	:type D1: gp_Dir
    	:param D2:
    	:type D2: gp_Dir
    	:rtype: bool
    * Returns True if D1 and D2 coinside with given tolerance
    	:param D1:
    	:type D1: gp_Dir
    	:param D2:
    	:type D2: gp_Dir
    	:param aTol:
    	:type aTol: float
    	:rtype: bool
    """
    return _IntTools.IntTools_Tools_IsDirsCoinside(*args)

def IntTools_Tools_IsInRange(*args) -> "Standard_Boolean":
    """
    * Checks if the range <theR> interfere with the range <theRRef>
    	:param theRRef:
    	:type theRRef: IntTools_Range
    	:param theR:
    	:type theR: IntTools_Range
    	:param theTol:
    	:type theTol: float
    	:rtype: bool
    """
    return _IntTools.IntTools_Tools_IsInRange(*args)

def IntTools_Tools_IsMiddlePointsEqual(*args) -> "Standard_Boolean":
    """
    * Gets boundary of parameters of E1 and E2. Computes 3d points on each corresponded to average parameters. Returns True if distance between computed points is less than sum of edge tolerance, otherwise returns False.
    	:param E1:
    	:type E1: TopoDS_Edge
    	:param E2:
    	:type E2: TopoDS_Edge
    	:rtype: bool
    """
    return _IntTools.IntTools_Tools_IsMiddlePointsEqual(*args)

def IntTools_Tools_IsOnPave(*args) -> "Standard_Boolean":
    """
    :param theT:
    	:type theT: float
    	:param theRange:
    	:type theRange: IntTools_Range
    	:param theTol:
    	:type theTol: float
    	:rtype: bool
    """
    return _IntTools.IntTools_Tools_IsOnPave(*args)

def IntTools_Tools_IsOnPave1(*args) -> "Standard_Boolean":
    """
    :param theT:
    	:type theT: float
    	:param theRange:
    	:type theRange: IntTools_Range
    	:param theTol:
    	:type theTol: float
    	:rtype: bool
    """
    return _IntTools.IntTools_Tools_IsOnPave1(*args)

def IntTools_Tools_IsVertex(*args) -> "Standard_Boolean":
    """
    * Computes square distance between a point on the edge E corresponded to parameter t and vertices of edge E. Returns True if this distance is less than square tolerance of vertex, otherwise returns false.
    	:param E:
    	:type E: TopoDS_Edge
    	:param t:
    	:type t: float
    	:rtype: bool
    * Returns True if square distance between vertex V and a point on the edge E corresponded to parameter t is less than square tolerance of V
    	:param E:
    	:type E: TopoDS_Edge
    	:param V:
    	:type V: TopoDS_Vertex
    	:param t:
    	:type t: float
    	:rtype: bool
    * Returns True if IsVertx for middle parameter of fist range and first edge returns True and if IsVertex for middle parameter of second range and second range returns True, otherwise returns False
    	:param aCmnPrt:
    	:type aCmnPrt: IntTools_CommonPrt
    	:rtype: bool
    * Returns True if the distance between point aP and vertex aV is less or equal to sum of aTolPV and vertex tolerance, otherwise returns False
    	:param aP:
    	:type aP: gp_Pnt
    	:param aTolPV:
    	:type aTolPV: float
    	:param aV:
    	:type aV: TopoDS_Vertex
    	:rtype: bool
    """
    return _IntTools.IntTools_Tools_IsVertex(*args)

def IntTools_Tools_MakeFaceFromWireAndFace(*args) -> "void":
    """
    * Build a face based on surface of given face aF and bounded by wire aW
    	:param aW:
    	:type aW: TopoDS_Wire
    	:param aF:
    	:type aF: TopoDS_Face
    	:param aFNew:
    	:type aFNew: TopoDS_Face
    	:rtype: void
    """
    return _IntTools.IntTools_Tools_MakeFaceFromWireAndFace(*args)

def IntTools_Tools_RejectLines(*args) -> "void":
    """
    * Puts curves from aSIn to aSOut except those curves that are coincide with first curve from aSIn.
    	:param aSIn:
    	:type aSIn: IntTools_SequenceOfCurves
    	:param aSOut:
    	:type aSOut: IntTools_SequenceOfCurves
    	:rtype: void
    """
    return _IntTools.IntTools_Tools_RejectLines(*args)

def IntTools_Tools_SegPln(*args) -> "Standard_Real &, Standard_Real &, Standard_Real &, Standard_Real &":
    """
    :param theLin:
    	:type theLin: gp_Lin
    	:param theTLin1:
    	:type theTLin1: float
    	:param theTLin2:
    	:type theTLin2: float
    	:param theTolLin:
    	:type theTolLin: float
    	:param thePln:
    	:type thePln: gp_Pln
    	:param theTolPln:
    	:type theTolPln: float
    	:param theP:
    	:type theP: gp_Pnt
    	:param theT:
    	:type theT: float
    	:param theTolP:
    	:type theTolP: float
    	:param theTmin:
    	:type theTmin: float
    	:param theTmax:
    	:type theTmax: float
    	:rtype: int
    """
    return _IntTools.IntTools_Tools_SegPln(*args)

def IntTools_Tools_SplitCurve(*args) -> "Standard_Integer":
    """
    * Split aC by average parameter if aC is closed in 3D. Returns positive value if splitting has been done, otherwise returns zero.
    	:param aC:
    	:type aC: IntTools_Curve
    	:param aS:
    	:type aS: IntTools_SequenceOfCurves
    	:rtype: int
    """
    return _IntTools.IntTools_Tools_SplitCurve(*args)

def IntTools_Tools_VertexParameter(*args) -> "Standard_Real &":
    """
    :param theCP:
    	:type theCP: IntTools_CommonPrt
    	:param theT:
    	:type theT: float
    	:rtype: void
    """
    return _IntTools.IntTools_Tools_VertexParameter(*args)

def IntTools_Tools_VertexParameters(*args) -> "Standard_Real &, Standard_Real &":
    """
    :param theCP:
    	:type theCP: IntTools_CommonPrt
    	:param theT1:
    	:type theT1: float
    	:param theT2:
    	:type theT2: float
    	:rtype: void
    """
    return _IntTools.IntTools_Tools_VertexParameters(*args)

class IntTools_TopolTool(OCC.Core.Adaptor3d.Adaptor3d_TopolTool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Initialize(self, *args) -> "void":
        """
        * Redefined empty initializer //! Warning: Raises the exception NotImplemented
        	:rtype: void
        * Initializes me by surface
        	:param theSurface:
        	:type theSurface: Adaptor3d_HSurface
        	:rtype: void
        """
        return _IntTools.IntTools_TopolTool_Initialize(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Initializes me by surface
        	:param theSurface:
        	:type theSurface: Adaptor3d_HSurface
        	:rtype: None
        """
        _IntTools.IntTools_TopolTool_swiginit(self, _IntTools.new_IntTools_TopolTool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IntTools_TopolTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_TopolTool
IntTools_TopolTool.Initialize = new_instancemethod(_IntTools.IntTools_TopolTool_Initialize, None, IntTools_TopolTool)
IntTools_TopolTool_swigregister = _IntTools.IntTools_TopolTool_swigregister
IntTools_TopolTool_swigregister(IntTools_TopolTool)

class IntTools_WLineTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DecompositionOfWLine(*args) -> "Standard_Real &":
        """
        :param theWLine:
        	:type theWLine: IntPatch_WLine
        	:param theSurface1:
        	:type theSurface1: GeomAdaptor_HSurface
        	:param theSurface2:
        	:type theSurface2: GeomAdaptor_HSurface
        	:param theFace1:
        	:type theFace1: TopoDS_Face
        	:param theFace2:
        	:type theFace2: TopoDS_Face
        	:param theLConstructor:
        	:type theLConstructor: GeomInt_LineConstructor
        	:param theAvoidLConstructor:
        	:type theAvoidLConstructor: bool
        	:param theTol:
        	:type theTol: float
        	:param theNewLines:
        	:type theNewLines: IntPatch_SequenceOfLine
        	:param theReachedTol3d:
        	:type theReachedTol3d: float
        	:param &:
        	:type &: IntTools_Context
        	:rtype: bool
        """
        return _IntTools.IntTools_WLineTool_DecompositionOfWLine(*args)

    DecompositionOfWLine = staticmethod(DecompositionOfWLine)

    def NotUseSurfacesForApprox(*args) -> "Standard_Boolean":
        """
        :param aF1:
        	:type aF1: TopoDS_Face
        	:param aF2:
        	:type aF2: TopoDS_Face
        	:param WL:
        	:type WL: IntPatch_WLine
        	:param ifprm:
        	:type ifprm: int
        	:param ilprm:
        	:type ilprm: int
        	:rtype: bool
        """
        return _IntTools.IntTools_WLineTool_NotUseSurfacesForApprox(*args)

    NotUseSurfacesForApprox = staticmethod(NotUseSurfacesForApprox)

    __repr__ = _dumps_object


    def __init__(self):
        _IntTools.IntTools_WLineTool_swiginit(self, _IntTools.new_IntTools_WLineTool())
    __swig_destroy__ = _IntTools.delete_IntTools_WLineTool
IntTools_WLineTool_swigregister = _IntTools.IntTools_WLineTool_swigregister
IntTools_WLineTool_swigregister(IntTools_WLineTool)

def IntTools_WLineTool_DecompositionOfWLine(*args) -> "Standard_Real &":
    """
    :param theWLine:
    	:type theWLine: IntPatch_WLine
    	:param theSurface1:
    	:type theSurface1: GeomAdaptor_HSurface
    	:param theSurface2:
    	:type theSurface2: GeomAdaptor_HSurface
    	:param theFace1:
    	:type theFace1: TopoDS_Face
    	:param theFace2:
    	:type theFace2: TopoDS_Face
    	:param theLConstructor:
    	:type theLConstructor: GeomInt_LineConstructor
    	:param theAvoidLConstructor:
    	:type theAvoidLConstructor: bool
    	:param theTol:
    	:type theTol: float
    	:param theNewLines:
    	:type theNewLines: IntPatch_SequenceOfLine
    	:param theReachedTol3d:
    	:type theReachedTol3d: float
    	:param &:
    	:type &: IntTools_Context
    	:rtype: bool
    """
    return _IntTools.IntTools_WLineTool_DecompositionOfWLine(*args)

def IntTools_WLineTool_NotUseSurfacesForApprox(*args) -> "Standard_Boolean":
    """
    :param aF1:
    	:type aF1: TopoDS_Face
    	:param aF2:
    	:type aF2: TopoDS_Face
    	:param WL:
    	:type WL: IntPatch_WLine
    	:param ifprm:
    	:type ifprm: int
    	:param ilprm:
    	:type ilprm: int
    	:rtype: bool
    """
    return _IntTools.IntTools_WLineTool_NotUseSurfacesForApprox(*args)

class IntTools_CurveRangeSample(IntTools_BaseRangeSample):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetRange(self, *args) -> "IntTools_Range":
        """
        :param theFirst:
        	:type theFirst: float
        	:param theLast:
        	:type theLast: float
        	:param theNbSample:
        	:type theNbSample: int
        	:rtype: IntTools_Range
        """
        return _IntTools.IntTools_CurveRangeSample_GetRange(self, *args)


    def GetRangeIndex(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntTools.IntTools_CurveRangeSample_GetRangeIndex(self, *args)


    def GetRangeIndexDeeper(self, *args) -> "Standard_Integer":
        """
        :param theNbSample:
        	:type theNbSample: int
        	:rtype: int
        """
        return _IntTools.IntTools_CurveRangeSample_GetRangeIndexDeeper(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param theIndex:
        	:type theIndex: int
        	:rtype: None
        """
        _IntTools.IntTools_CurveRangeSample_swiginit(self, _IntTools.new_IntTools_CurveRangeSample(*args))

    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        :param Other:
        	:type Other: IntTools_CurveRangeSample
        	:rtype: bool
        """
        return _IntTools.IntTools_CurveRangeSample_IsEqual(self, *args)


    def SetRangeIndex(self, *args) -> "void":
        """
        :param theIndex:
        	:type theIndex: int
        	:rtype: None
        """
        return _IntTools.IntTools_CurveRangeSample_SetRangeIndex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntTools.delete_IntTools_CurveRangeSample
IntTools_CurveRangeSample.GetRange = new_instancemethod(_IntTools.IntTools_CurveRangeSample_GetRange, None, IntTools_CurveRangeSample)
IntTools_CurveRangeSample.GetRangeIndex = new_instancemethod(_IntTools.IntTools_CurveRangeSample_GetRangeIndex, None, IntTools_CurveRangeSample)
IntTools_CurveRangeSample.GetRangeIndexDeeper = new_instancemethod(_IntTools.IntTools_CurveRangeSample_GetRangeIndexDeeper, None, IntTools_CurveRangeSample)
IntTools_CurveRangeSample.IsEqual = new_instancemethod(_IntTools.IntTools_CurveRangeSample_IsEqual, None, IntTools_CurveRangeSample)
IntTools_CurveRangeSample.SetRangeIndex = new_instancemethod(_IntTools.IntTools_CurveRangeSample_SetRangeIndex, None, IntTools_CurveRangeSample)
IntTools_CurveRangeSample_swigregister = _IntTools.IntTools_CurveRangeSample_swigregister
IntTools_CurveRangeSample_swigregister(IntTools_CurveRangeSample)



