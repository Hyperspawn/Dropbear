# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntWalk module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intwalk.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IntWalk.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IntWalk')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IntWalk')
    _IntWalk = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntWalk', [dirname(__file__)])
        except ImportError:
            import _IntWalk
            return _IntWalk
        try:
            _mod = imp.load_module('_IntWalk', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IntWalk = swig_import_helper()
    del swig_import_helper
else:
    import _IntWalk
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntWalk.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IntWalk.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IntWalk.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IntWalk.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IntWalk.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IntWalk.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IntWalk.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IntWalk.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IntWalk.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IntWalk.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IntWalk.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IntWalk.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IntWalk.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IntWalk.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IntWalk.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IntWalk.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IntWalk.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IntWalk.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IntWalk.process_exception(error, method_name, class_name)
process_exception = _IntWalk.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.gp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.IntImp
import OCC.Core.IntSurf
IntWalk_PasTropGrand = _IntWalk.IntWalk_PasTropGrand
IntWalk_StepTooSmall = _IntWalk.IntWalk_StepTooSmall
IntWalk_PointConfondu = _IntWalk.IntWalk_PointConfondu
IntWalk_ArretSurPointPrecedent = _IntWalk.IntWalk_ArretSurPointPrecedent
IntWalk_ArretSurPoint = _IntWalk.IntWalk_ArretSurPoint
IntWalk_OK = _IntWalk.IntWalk_OK
class IntWalk_TheFunctionOfTheInt2S(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AuxillarSurface1(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """:rtype: opencascade::handle<Adaptor3d_HSurface>"""
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_AuxillarSurface1(self, *args)


    def AuxillarSurface2(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """:rtype: opencascade::handle<Adaptor3d_HSurface>"""
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_AuxillarSurface2(self, *args)


    def ComputeParameters(self, *args) -> "void":
        """
        :param ChoixIso:
        	:type ChoixIso: IntImp_ConstIsoparametric
        	:param Param:
        	:type Param: TColStd_Array1OfReal
        	:param UVap:
        	:type UVap: math_Vector
        	:param BornInf:
        	:type BornInf: math_Vector
        	:param BornSup:
        	:type BornSup: math_Vector
        	:param Tolerance:
        	:type Tolerance: math_Vector
        	:rtype: None
        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_ComputeParameters(self, *args)


    def Direction(self, *args) -> "gp_Dir":
        """:rtype: gp_Dir"""
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_Direction(self, *args)


    def DirectionOnS1(self, *args) -> "gp_Dir2d":
        """:rtype: gp_Dir2d"""
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_DirectionOnS1(self, *args)


    def DirectionOnS2(self, *args) -> "gp_Dir2d":
        """:rtype: gp_Dir2d"""
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_DirectionOnS2(self, *args)


    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:rtype: None
        """
        _IntWalk.IntWalk_TheFunctionOfTheInt2S_swiginit(self, _IntWalk.new_IntWalk_TheFunctionOfTheInt2S(*args))

    def IsTangent(self, *args) -> "Standard_Boolean":
        """
        :param UVap:
        	:type UVap: math_Vector
        	:param Param:
        	:type Param: TColStd_Array1OfReal
        	:param BestChoix:
        	:type BestChoix: IntImp_ConstIsoparametric
        	:rtype: bool
        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_IsTangent(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """:rtype: gp_Pnt"""
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_Point(self, *args)


    def Root(self, *args) -> "Standard_Real":
        """
        * returns somme des fi*fi
        	:rtype: float
        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_Root(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntWalk.delete_IntWalk_TheFunctionOfTheInt2S
IntWalk_TheFunctionOfTheInt2S.AuxillarSurface1 = new_instancemethod(_IntWalk.IntWalk_TheFunctionOfTheInt2S_AuxillarSurface1, None, IntWalk_TheFunctionOfTheInt2S)
IntWalk_TheFunctionOfTheInt2S.AuxillarSurface2 = new_instancemethod(_IntWalk.IntWalk_TheFunctionOfTheInt2S_AuxillarSurface2, None, IntWalk_TheFunctionOfTheInt2S)
IntWalk_TheFunctionOfTheInt2S.ComputeParameters = new_instancemethod(_IntWalk.IntWalk_TheFunctionOfTheInt2S_ComputeParameters, None, IntWalk_TheFunctionOfTheInt2S)
IntWalk_TheFunctionOfTheInt2S.Direction = new_instancemethod(_IntWalk.IntWalk_TheFunctionOfTheInt2S_Direction, None, IntWalk_TheFunctionOfTheInt2S)
IntWalk_TheFunctionOfTheInt2S.DirectionOnS1 = new_instancemethod(_IntWalk.IntWalk_TheFunctionOfTheInt2S_DirectionOnS1, None, IntWalk_TheFunctionOfTheInt2S)
IntWalk_TheFunctionOfTheInt2S.DirectionOnS2 = new_instancemethod(_IntWalk.IntWalk_TheFunctionOfTheInt2S_DirectionOnS2, None, IntWalk_TheFunctionOfTheInt2S)
IntWalk_TheFunctionOfTheInt2S.IsTangent = new_instancemethod(_IntWalk.IntWalk_TheFunctionOfTheInt2S_IsTangent, None, IntWalk_TheFunctionOfTheInt2S)
IntWalk_TheFunctionOfTheInt2S.Point = new_instancemethod(_IntWalk.IntWalk_TheFunctionOfTheInt2S_Point, None, IntWalk_TheFunctionOfTheInt2S)
IntWalk_TheFunctionOfTheInt2S.Root = new_instancemethod(_IntWalk.IntWalk_TheFunctionOfTheInt2S_Root, None, IntWalk_TheFunctionOfTheInt2S)
IntWalk_TheFunctionOfTheInt2S_swigregister = _IntWalk.IntWalk_TheFunctionOfTheInt2S_swigregister
IntWalk_TheFunctionOfTheInt2S_swigregister(IntWalk_TheFunctionOfTheInt2S)

class IntWalk_TheInt2S(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangePoint(self, *args) -> "IntSurf_PntOn2S &":
        """
        * return the intersection point which is enable for changing.
        	:rtype: IntSurf_PntOn2S
        """
        return _IntWalk.IntWalk_TheInt2S_ChangePoint(self, *args)


    def Direction(self, *args) -> "gp_Dir const":
        """
        * Returns the tangent at the intersection line.
        	:rtype: gp_Dir
        """
        return _IntWalk.IntWalk_TheInt2S_Direction(self, *args)


    def DirectionOnS1(self, *args) -> "gp_Dir2d const":
        """
        * Returns the tangent at the intersection line in the parametric space of the first surface.
        	:rtype: gp_Dir2d
        """
        return _IntWalk.IntWalk_TheInt2S_DirectionOnS1(self, *args)


    def DirectionOnS2(self, *args) -> "gp_Dir2d const":
        """
        * Returns the tangent at the intersection line in the parametric space of the second surface.
        	:rtype: gp_Dir2d
        """
        return _IntWalk.IntWalk_TheInt2S_DirectionOnS2(self, *args)


    def Function(self, *args) -> "IntWalk_TheFunctionOfTheInt2S &":
        """
        * return the math function which is used to compute the intersection
        	:rtype: IntWalk_TheFunctionOfTheInt2S
        """
        return _IntWalk.IntWalk_TheInt2S_Function(self, *args)


    def __init__(self, *args):
        """
        * compute the solution point with the close point
        	:param Param:
        	:type Param: TColStd_Array1OfReal
        	:param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param TolTangency:
        	:type TolTangency: float
        	:rtype: None
        * initialize the parameters to compute the solution point it 's possible to write to optimize: IntImp_Int2S inter(S1,S2,Func,TolTangency); math_FunctionSetRoot rsnld(inter.Function()); while ...{ Param(1)=... Param(2)=... param(3)=... inter.Perform(Param,rsnld); }
        	:param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param TolTangency:
        	:type TolTangency: float
        	:rtype: None
        """
        _IntWalk.IntWalk_TheInt2S_swiginit(self, _IntWalk.new_IntWalk_TheInt2S(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the creation completed without failure.
        	:rtype: bool
        """
        return _IntWalk.IntWalk_TheInt2S_IsDone(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * Returns True when there is no solution to the problem.
        	:rtype: bool
        """
        return _IntWalk.IntWalk_TheInt2S_IsEmpty(self, *args)


    def IsTangent(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the surfaces are tangent at the intersection point.
        	:rtype: bool
        """
        return _IntWalk.IntWalk_TheInt2S_IsTangent(self, *args)


    def Perform(self, *args) -> "IntImp_ConstIsoparametric":
        """
        * returns the best constant isoparametric to find the next intersection's point +stores the solution point (the solution point is found with the close point to intersect the isoparametric with the other patch; the choice of the isoparametic is calculated)
        	:param Param:
        	:type Param: TColStd_Array1OfReal
        	:param Rsnld:
        	:type Rsnld: math_FunctionSetRoot
        	:rtype: IntImp_ConstIsoparametric
        * returns the best constant isoparametric to find the next intersection's point +stores the solution point (the solution point is found with the close point to intersect the isoparametric with the other patch; the choice of the isoparametic is given by ChoixIso)
        	:param Param:
        	:type Param: TColStd_Array1OfReal
        	:param Rsnld:
        	:type Rsnld: math_FunctionSetRoot
        	:param ChoixIso:
        	:type ChoixIso: IntImp_ConstIsoparametric
        	:rtype: IntImp_ConstIsoparametric
        """
        return _IntWalk.IntWalk_TheInt2S_Perform(self, *args)


    def Point(self, *args) -> "IntSurf_PntOn2S const &":
        """
        * Returns the intersection point.
        	:rtype: IntSurf_PntOn2S
        """
        return _IntWalk.IntWalk_TheInt2S_Point(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntWalk.delete_IntWalk_TheInt2S
IntWalk_TheInt2S.ChangePoint = new_instancemethod(_IntWalk.IntWalk_TheInt2S_ChangePoint, None, IntWalk_TheInt2S)
IntWalk_TheInt2S.Direction = new_instancemethod(_IntWalk.IntWalk_TheInt2S_Direction, None, IntWalk_TheInt2S)
IntWalk_TheInt2S.DirectionOnS1 = new_instancemethod(_IntWalk.IntWalk_TheInt2S_DirectionOnS1, None, IntWalk_TheInt2S)
IntWalk_TheInt2S.DirectionOnS2 = new_instancemethod(_IntWalk.IntWalk_TheInt2S_DirectionOnS2, None, IntWalk_TheInt2S)
IntWalk_TheInt2S.Function = new_instancemethod(_IntWalk.IntWalk_TheInt2S_Function, None, IntWalk_TheInt2S)
IntWalk_TheInt2S.IsDone = new_instancemethod(_IntWalk.IntWalk_TheInt2S_IsDone, None, IntWalk_TheInt2S)
IntWalk_TheInt2S.IsEmpty = new_instancemethod(_IntWalk.IntWalk_TheInt2S_IsEmpty, None, IntWalk_TheInt2S)
IntWalk_TheInt2S.IsTangent = new_instancemethod(_IntWalk.IntWalk_TheInt2S_IsTangent, None, IntWalk_TheInt2S)
IntWalk_TheInt2S.Perform = new_instancemethod(_IntWalk.IntWalk_TheInt2S_Perform, None, IntWalk_TheInt2S)
IntWalk_TheInt2S.Point = new_instancemethod(_IntWalk.IntWalk_TheInt2S_Point, None, IntWalk_TheInt2S)
IntWalk_TheInt2S_swigregister = _IntWalk.IntWalk_TheInt2S_swigregister
IntWalk_TheInt2S_swigregister(IntWalk_TheInt2S)

class IntWalk_WalkingData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ustart = _swig_property(_IntWalk.IntWalk_WalkingData_ustart_get, _IntWalk.IntWalk_WalkingData_ustart_set)
    vstart = _swig_property(_IntWalk.IntWalk_WalkingData_vstart_get, _IntWalk.IntWalk_WalkingData_vstart_set)
    etat = _swig_property(_IntWalk.IntWalk_WalkingData_etat_get, _IntWalk.IntWalk_WalkingData_etat_set)

    __repr__ = _dumps_object


    def __init__(self):
        _IntWalk.IntWalk_WalkingData_swiginit(self, _IntWalk.new_IntWalk_WalkingData())
    __swig_destroy__ = _IntWalk.delete_IntWalk_WalkingData
IntWalk_WalkingData_swigregister = _IntWalk.IntWalk_WalkingData_swigregister
IntWalk_WalkingData_swigregister(IntWalk_WalkingData)



