# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Law module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_law.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Law.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Law')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Law')
    _Law = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Law', [dirname(__file__)])
        except ImportError:
            import _Law
            return _Law
        try:
            _mod = imp.load_module('_Law', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Law = swig_import_helper()
    del swig_import_helper
else:
    import _Law
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Law.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Law.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Law.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Law.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Law.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Law.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Law.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Law.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Law.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Law.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Law.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Law.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Law.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Law.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Law.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Law.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Law.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Law.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Law.process_exception(error, method_name, class_name)
process_exception = _Law.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message

def Handle_Law_BSpline_Create() -> "opencascade::handle< Law_BSpline >":
    return _Law.Handle_Law_BSpline_Create()
Handle_Law_BSpline_Create = _Law.Handle_Law_BSpline_Create

def Handle_Law_BSpline_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Law_BSpline >":
    return _Law.Handle_Law_BSpline_DownCast(t)
Handle_Law_BSpline_DownCast = _Law.Handle_Law_BSpline_DownCast

def Handle_Law_BSpline_IsNull(t: 'opencascade::handle< Law_BSpline > const &') -> "bool":
    return _Law.Handle_Law_BSpline_IsNull(t)
Handle_Law_BSpline_IsNull = _Law.Handle_Law_BSpline_IsNull

def Handle_Law_Function_Create() -> "opencascade::handle< Law_Function >":
    return _Law.Handle_Law_Function_Create()
Handle_Law_Function_Create = _Law.Handle_Law_Function_Create

def Handle_Law_Function_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Law_Function >":
    return _Law.Handle_Law_Function_DownCast(t)
Handle_Law_Function_DownCast = _Law.Handle_Law_Function_DownCast

def Handle_Law_Function_IsNull(t: 'opencascade::handle< Law_Function > const &') -> "bool":
    return _Law.Handle_Law_Function_IsNull(t)
Handle_Law_Function_IsNull = _Law.Handle_Law_Function_IsNull

def Handle_Law_BSpFunc_Create() -> "opencascade::handle< Law_BSpFunc >":
    return _Law.Handle_Law_BSpFunc_Create()
Handle_Law_BSpFunc_Create = _Law.Handle_Law_BSpFunc_Create

def Handle_Law_BSpFunc_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Law_BSpFunc >":
    return _Law.Handle_Law_BSpFunc_DownCast(t)
Handle_Law_BSpFunc_DownCast = _Law.Handle_Law_BSpFunc_DownCast

def Handle_Law_BSpFunc_IsNull(t: 'opencascade::handle< Law_BSpFunc > const &') -> "bool":
    return _Law.Handle_Law_BSpFunc_IsNull(t)
Handle_Law_BSpFunc_IsNull = _Law.Handle_Law_BSpFunc_IsNull

def Handle_Law_Composite_Create() -> "opencascade::handle< Law_Composite >":
    return _Law.Handle_Law_Composite_Create()
Handle_Law_Composite_Create = _Law.Handle_Law_Composite_Create

def Handle_Law_Composite_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Law_Composite >":
    return _Law.Handle_Law_Composite_DownCast(t)
Handle_Law_Composite_DownCast = _Law.Handle_Law_Composite_DownCast

def Handle_Law_Composite_IsNull(t: 'opencascade::handle< Law_Composite > const &') -> "bool":
    return _Law.Handle_Law_Composite_IsNull(t)
Handle_Law_Composite_IsNull = _Law.Handle_Law_Composite_IsNull

def Handle_Law_Constant_Create() -> "opencascade::handle< Law_Constant >":
    return _Law.Handle_Law_Constant_Create()
Handle_Law_Constant_Create = _Law.Handle_Law_Constant_Create

def Handle_Law_Constant_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Law_Constant >":
    return _Law.Handle_Law_Constant_DownCast(t)
Handle_Law_Constant_DownCast = _Law.Handle_Law_Constant_DownCast

def Handle_Law_Constant_IsNull(t: 'opencascade::handle< Law_Constant > const &') -> "bool":
    return _Law.Handle_Law_Constant_IsNull(t)
Handle_Law_Constant_IsNull = _Law.Handle_Law_Constant_IsNull

def Handle_Law_Linear_Create() -> "opencascade::handle< Law_Linear >":
    return _Law.Handle_Law_Linear_Create()
Handle_Law_Linear_Create = _Law.Handle_Law_Linear_Create

def Handle_Law_Linear_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Law_Linear >":
    return _Law.Handle_Law_Linear_DownCast(t)
Handle_Law_Linear_DownCast = _Law.Handle_Law_Linear_DownCast

def Handle_Law_Linear_IsNull(t: 'opencascade::handle< Law_Linear > const &') -> "bool":
    return _Law.Handle_Law_Linear_IsNull(t)
Handle_Law_Linear_IsNull = _Law.Handle_Law_Linear_IsNull

def Handle_Law_Interpol_Create() -> "opencascade::handle< Law_Interpol >":
    return _Law.Handle_Law_Interpol_Create()
Handle_Law_Interpol_Create = _Law.Handle_Law_Interpol_Create

def Handle_Law_Interpol_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Law_Interpol >":
    return _Law.Handle_Law_Interpol_DownCast(t)
Handle_Law_Interpol_DownCast = _Law.Handle_Law_Interpol_DownCast

def Handle_Law_Interpol_IsNull(t: 'opencascade::handle< Law_Interpol > const &') -> "bool":
    return _Law.Handle_Law_Interpol_IsNull(t)
Handle_Law_Interpol_IsNull = _Law.Handle_Law_Interpol_IsNull

def Handle_Law_S_Create() -> "opencascade::handle< Law_S >":
    return _Law.Handle_Law_S_Create()
Handle_Law_S_Create = _Law.Handle_Law_S_Create

def Handle_Law_S_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Law_S >":
    return _Law.Handle_Law_S_DownCast(t)
Handle_Law_S_DownCast = _Law.Handle_Law_S_DownCast

def Handle_Law_S_IsNull(t: 'opencascade::handle< Law_S > const &') -> "bool":
    return _Law.Handle_Law_S_IsNull(t)
Handle_Law_S_IsNull = _Law.Handle_Law_S_IsNull
class Law_Laws(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Law.Law_Laws_swiginit(self, _Law.new_Law_Laws(*args))
    __swig_destroy__ = _Law.delete_Law_Laws
Law_Laws.begin = new_instancemethod(_Law.Law_Laws_begin, None, Law_Laws)
Law_Laws.end = new_instancemethod(_Law.Law_Laws_end, None, Law_Laws)
Law_Laws.cbegin = new_instancemethod(_Law.Law_Laws_cbegin, None, Law_Laws)
Law_Laws.cend = new_instancemethod(_Law.Law_Laws_cend, None, Law_Laws)
Law_Laws.Size = new_instancemethod(_Law.Law_Laws_Size, None, Law_Laws)
Law_Laws.Assign = new_instancemethod(_Law.Law_Laws_Assign, None, Law_Laws)
Law_Laws.Set = new_instancemethod(_Law.Law_Laws_Set, None, Law_Laws)
Law_Laws.Clear = new_instancemethod(_Law.Law_Laws_Clear, None, Law_Laws)
Law_Laws.First = new_instancemethod(_Law.Law_Laws_First, None, Law_Laws)
Law_Laws.Last = new_instancemethod(_Law.Law_Laws_Last, None, Law_Laws)
Law_Laws.Append = new_instancemethod(_Law.Law_Laws_Append, None, Law_Laws)
Law_Laws.Prepend = new_instancemethod(_Law.Law_Laws_Prepend, None, Law_Laws)
Law_Laws.RemoveFirst = new_instancemethod(_Law.Law_Laws_RemoveFirst, None, Law_Laws)
Law_Laws.Remove = new_instancemethod(_Law.Law_Laws_Remove, None, Law_Laws)
Law_Laws.InsertBefore = new_instancemethod(_Law.Law_Laws_InsertBefore, None, Law_Laws)
Law_Laws.InsertAfter = new_instancemethod(_Law.Law_Laws_InsertAfter, None, Law_Laws)
Law_Laws.Reverse = new_instancemethod(_Law.Law_Laws_Reverse, None, Law_Laws)
Law_Laws_swigregister = _Law.Law_Laws_swigregister
Law_Laws_swigregister(Law_Laws)

class Law_ListIteratorOfLaws(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Law.Law_ListIteratorOfLaws_swiginit(self, _Law.new_Law_ListIteratorOfLaws(*args))
    __swig_destroy__ = _Law.delete_Law_ListIteratorOfLaws
Law_ListIteratorOfLaws.More = new_instancemethod(_Law.Law_ListIteratorOfLaws_More, None, Law_ListIteratorOfLaws)
Law_ListIteratorOfLaws.Next = new_instancemethod(_Law.Law_ListIteratorOfLaws_Next, None, Law_ListIteratorOfLaws)
Law_ListIteratorOfLaws.Value = new_instancemethod(_Law.Law_ListIteratorOfLaws_Value, None, Law_ListIteratorOfLaws)
Law_ListIteratorOfLaws.ChangeValue = new_instancemethod(_Law.Law_ListIteratorOfLaws_ChangeValue, None, Law_ListIteratorOfLaws)
Law_ListIteratorOfLaws_swigregister = _Law.Law_ListIteratorOfLaws_swigregister
Law_ListIteratorOfLaws_swigregister(Law_ListIteratorOfLaws)

class law(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MixBnd(*args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        * This algorithm searches the knot values corresponding to the splitting of a given B-spline law into several arcs with the same continuity. The continuity order is given at the construction time. Builds a 1d bspline that is near from Lin with null derivatives at the extremities.
        	:param Lin:
        	:type Lin: Law_Linear
        	:rtype: opencascade::handle<Law_BSpFunc>
        * Builds the poles of the 1d bspline that is near from Lin with null derivatives at the extremities.
        	:param Degree:
        	:type Degree: int
        	:param Knots:
        	:type Knots: TColStd_Array1OfReal
        	:param Mults:
        	:type Mults: TColStd_Array1OfInteger
        	:param Lin:
        	:type Lin: Law_Linear
        	:rtype: opencascade::handle<TColStd_HArray1OfReal>
        """
        return _Law.law_MixBnd(*args)

    MixBnd = staticmethod(MixBnd)

    def MixTgt(*args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        * Builds the poles of the 1d bspline that is null on the rigth side of Knots(Index) (on the left if NulOnTheRight is false) and that is like a t*(1-t)(1-t) curve on the left side of Knots(Index) (on the rigth if NulOnTheRight is false). The result curve is C1 with a derivative equal to 1. at first parameter (-1 at last parameter if NulOnTheRight is false). Warning: Mults(Index) must greater or equal to degree-1.
        	:param Degree:
        	:type Degree: int
        	:param Knots:
        	:type Knots: TColStd_Array1OfReal
        	:param Mults:
        	:type Mults: TColStd_Array1OfInteger
        	:param NulOnTheRight:
        	:type NulOnTheRight: bool
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<TColStd_HArray1OfReal>
        """
        return _Law.law_MixTgt(*args)

    MixTgt = staticmethod(MixTgt)

    def Reparametrize(*args) -> "opencascade::handle< Law_BSpline >":
        """
        * Computes a 1 d curve to reparametrize a curve. Its an interpolation of NbPoints points calculated at quasi constant abscissa.
        	:param Curve:
        	:type Curve: Adaptor3d_Curve
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param HasDF:
        	:type HasDF: bool
        	:param HasDL:
        	:type HasDL: bool
        	:param DFirst:
        	:type DFirst: float
        	:param DLast:
        	:type DLast: float
        	:param Rev:
        	:type Rev: bool
        	:param NbPoints:
        	:type NbPoints: int
        	:rtype: opencascade::handle<Law_BSpline>
        """
        return _Law.law_Reparametrize(*args)

    Reparametrize = staticmethod(Reparametrize)

    def Scale(*args) -> "opencascade::handle< Law_BSpline >":
        """
        * Computes a 1 d curve to scale a field of tangency. Value is 1. for t = (First+Last)/2 . If HasFirst value for t = First is VFirst (null derivative). If HasLast value for t = Last is VLast (null derivative). //! 1.  _ _/ \_ __/ \__ / VFirst ____/  VLast \____ First  Last
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param HasF:
        	:type HasF: bool
        	:param HasL:
        	:type HasL: bool
        	:param VFirst:
        	:type VFirst: float
        	:param VLast:
        	:type VLast: float
        	:rtype: opencascade::handle<Law_BSpline>
        """
        return _Law.law_Scale(*args)

    Scale = staticmethod(Scale)

    def ScaleCub(*args) -> "opencascade::handle< Law_BSpline >":
        """
        :param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param HasF:
        	:type HasF: bool
        	:param HasL:
        	:type HasL: bool
        	:param VFirst:
        	:type VFirst: float
        	:param VLast:
        	:type VLast: float
        	:rtype: opencascade::handle<Law_BSpline>
        """
        return _Law.law_ScaleCub(*args)

    ScaleCub = staticmethod(ScaleCub)

    __repr__ = _dumps_object


    def __init__(self):
        _Law.law_swiginit(self, _Law.new_law())
    __swig_destroy__ = _Law.delete_law
law_swigregister = _Law.law_swigregister
law_swigregister(law)

def law_MixBnd(*args) -> "opencascade::handle< TColStd_HArray1OfReal >":
    """
    * This algorithm searches the knot values corresponding to the splitting of a given B-spline law into several arcs with the same continuity. The continuity order is given at the construction time. Builds a 1d bspline that is near from Lin with null derivatives at the extremities.
    	:param Lin:
    	:type Lin: Law_Linear
    	:rtype: opencascade::handle<Law_BSpFunc>
    * Builds the poles of the 1d bspline that is near from Lin with null derivatives at the extremities.
    	:param Degree:
    	:type Degree: int
    	:param Knots:
    	:type Knots: TColStd_Array1OfReal
    	:param Mults:
    	:type Mults: TColStd_Array1OfInteger
    	:param Lin:
    	:type Lin: Law_Linear
    	:rtype: opencascade::handle<TColStd_HArray1OfReal>
    """
    return _Law.law_MixBnd(*args)

def law_MixTgt(*args) -> "opencascade::handle< TColStd_HArray1OfReal >":
    """
    * Builds the poles of the 1d bspline that is null on the rigth side of Knots(Index) (on the left if NulOnTheRight is false) and that is like a t*(1-t)(1-t) curve on the left side of Knots(Index) (on the rigth if NulOnTheRight is false). The result curve is C1 with a derivative equal to 1. at first parameter (-1 at last parameter if NulOnTheRight is false). Warning: Mults(Index) must greater or equal to degree-1.
    	:param Degree:
    	:type Degree: int
    	:param Knots:
    	:type Knots: TColStd_Array1OfReal
    	:param Mults:
    	:type Mults: TColStd_Array1OfInteger
    	:param NulOnTheRight:
    	:type NulOnTheRight: bool
    	:param Index:
    	:type Index: int
    	:rtype: opencascade::handle<TColStd_HArray1OfReal>
    """
    return _Law.law_MixTgt(*args)

def law_Reparametrize(*args) -> "opencascade::handle< Law_BSpline >":
    """
    * Computes a 1 d curve to reparametrize a curve. Its an interpolation of NbPoints points calculated at quasi constant abscissa.
    	:param Curve:
    	:type Curve: Adaptor3d_Curve
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:param HasDF:
    	:type HasDF: bool
    	:param HasDL:
    	:type HasDL: bool
    	:param DFirst:
    	:type DFirst: float
    	:param DLast:
    	:type DLast: float
    	:param Rev:
    	:type Rev: bool
    	:param NbPoints:
    	:type NbPoints: int
    	:rtype: opencascade::handle<Law_BSpline>
    """
    return _Law.law_Reparametrize(*args)

def law_Scale(*args) -> "opencascade::handle< Law_BSpline >":
    """
    * Computes a 1 d curve to scale a field of tangency. Value is 1. for t = (First+Last)/2 . If HasFirst value for t = First is VFirst (null derivative). If HasLast value for t = Last is VLast (null derivative). //! 1.  _ _/ \_ __/ \__ / VFirst ____/  VLast \____ First  Last
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:param HasF:
    	:type HasF: bool
    	:param HasL:
    	:type HasL: bool
    	:param VFirst:
    	:type VFirst: float
    	:param VLast:
    	:type VLast: float
    	:rtype: opencascade::handle<Law_BSpline>
    """
    return _Law.law_Scale(*args)

def law_ScaleCub(*args) -> "opencascade::handle< Law_BSpline >":
    """
    :param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:param HasF:
    	:type HasF: bool
    	:param HasL:
    	:type HasL: bool
    	:param VFirst:
    	:type VFirst: float
    	:param VLast:
    	:type VLast: float
    	:rtype: opencascade::handle<Law_BSpline>
    """
    return _Law.law_ScaleCub(*args)

class Law_BSpline(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Continuity(self, *args) -> "GeomAbs_Shape":
        """
        * Returns the global continuity of the curve : C0 : only geometric continuity, C1 : continuity of the first derivative all along the Curve, C2 : continuity of the second derivative all along the Curve, C3 : continuity of the third derivative all along the Curve, CN : the order of continuity is infinite. For a B-spline curve of degree d if a knot Ui has a multiplicity p the B-spline curve is only Cd-p continuous at Ui. So the global continuity of the curve can't be greater than Cd-p where p is the maximum multiplicity of the interior Knots. In the interior of a knot span the curve is infinitely continuously differentiable.
        	:rtype: GeomAbs_Shape
        """
        return _Law.Law_BSpline_Continuity(self, *args)


    def Copy(self, *args) -> "opencascade::handle< Law_BSpline >":
        """:rtype: opencascade::handle<Law_BSpline>"""
        return _Law.Law_BSpline_Copy(self, *args)


    def D0(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param P:
        	:type P: float
        	:rtype: None
        """
        return _Law.Law_BSpline_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param P:
        	:type P: float
        	:param V1:
        	:type V1: float
        	:rtype: None
        """
        return _Law.Law_BSpline_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param P:
        	:type P: float
        	:param V1:
        	:type V1: float
        	:param V2:
        	:type V2: float
        	:rtype: None
        """
        return _Law.Law_BSpline_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param P:
        	:type P: float
        	:param V1:
        	:type V1: float
        	:param V2:
        	:type V2: float
        	:param V3:
        	:type V3: float
        	:rtype: None
        """
        return _Law.Law_BSpline_D3(self, *args)


    def DN(self, *args) -> "Standard_Real":
        """
        * The following functions computes the point of parameter U and the derivatives at this point on the B-spline curve arc defined between the knot FromK1 and the knot ToK2. U can be out of bounds [Knot (FromK1), Knot (ToK2)] but for the computation we only use the definition of the curve between these two knots. This method is useful to compute local derivative, if the order of continuity of the whole curve is not greater enough. Inside the parametric domain Knot (FromK1), Knot (ToK2) the evaluations are the same as if we consider the whole definition of the curve. Of course the evaluations are different outside this parametric domain.
        	:param U:
        	:type U: float
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Law.Law_BSpline_DN(self, *args)


    def Degree(self, *args) -> "Standard_Integer":
        """
        * Computation of value and derivatives
        	:rtype: int
        """
        return _Law.Law_BSpline_Degree(self, *args)


    def EndPoint(self, *args) -> "Standard_Real":
        """
        * Returns the last point of the curve. Warnings : The last point of the curve is different from the last pole of the curve if the multiplicity of the last knot is lower than Degree.
        	:rtype: float
        """
        return _Law.Law_BSpline_EndPoint(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        * Computes the parametric value of the start point of the curve. It is a knot value.
        	:rtype: float
        """
        return _Law.Law_BSpline_FirstParameter(self, *args)


    def FirstUKnotIndex(self, *args) -> "Standard_Integer":
        """
        * For a B-spline curve the first parameter (which gives the start point of the curve) is a knot value but if the multiplicity of the first knot index is lower than Degree + 1 it is not the first knot of the curve. This method computes the index of the knot corresponding to the first parameter.
        	:rtype: int
        """
        return _Law.Law_BSpline_FirstUKnotIndex(self, *args)


    def IncreaseDegree(self, *args) -> "void":
        """
        * Increase the degree to <Degree>. Nothing is done if <Degree> is lower or equal to the current degree.
        	:param Degree:
        	:type Degree: int
        	:rtype: None
        """
        return _Law.Law_BSpline_IncreaseDegree(self, *args)


    def IncreaseMultiplicity(self, *args) -> "void":
        """
        * Increases the multiplicity of the knot <Index> to <M>. //! If <M> is lower or equal to the current multiplicity nothing is done. If <M> is higher than the degree the degree is used. If <Index> is not in [FirstUKnotIndex, LastUKnotIndex]
        	:param Index:
        	:type Index: int
        	:param M:
        	:type M: int
        	:rtype: None
        * Increases the multiplicities of the knots in [I1,I2] to <M>. //! For each knot if <M> is lower or equal to the current multiplicity nothing is done. If <M> is higher than the degree the degree is used. If <I1,I2> are not in [FirstUKnotIndex, LastUKnotIndex]
        	:param I1:
        	:type I1: int
        	:param I2:
        	:type I2: int
        	:param M:
        	:type M: int
        	:rtype: None
        """
        return _Law.Law_BSpline_IncreaseMultiplicity(self, *args)


    def IncrementMultiplicity(self, *args) -> "void":
        """
        * Increment the multiplicities of the knots in [I1,I2] by <M>. //! If <M> is not positive nithing is done. //! For each knot the resulting multiplicity is limited to the Degree. If <I1,I2> are not in [FirstUKnotIndex, LastUKnotIndex]
        	:param I1:
        	:type I1: int
        	:param I2:
        	:type I2: int
        	:param M:
        	:type M: int
        	:rtype: None
        """
        return _Law.Law_BSpline_IncrementMultiplicity(self, *args)


    def InsertKnot(self, *args) -> "void":
        """
        * Inserts a knot value in the sequence of knots. If <U> is an existing knot the multiplicity is increased by <M>. //! If U is not on the parameter range nothing is done. //! If the multiplicity is negative or null nothing is done. The new multiplicity is limited to the degree. //! The tolerance criterion for knots equality is the max of Epsilon(U) and ParametricTolerance.
        	:param U:
        	:type U: float
        	:param M: default value is 1
        	:type M: int
        	:param ParametricTolerance: default value is 0.0
        	:type ParametricTolerance: float
        	:param Add: default value is Standard_True
        	:type Add: bool
        	:rtype: None
        """
        return _Law.Law_BSpline_InsertKnot(self, *args)


    def InsertKnots(self, *args) -> "void":
        """
        * Inserts a set of knots values in the sequence of knots. //! For each U = Knots(i), M = Mults(i) //! If <U> is an existing knot the multiplicity is increased by <M> if <Add> is True, increased to <M> if <Add> is False. //! If U is not on the parameter range nothing is done. //! If the multiplicity is negative or null nothing is done. The new multiplicity is limited to the degree. //! The tolerance criterion for knots equality is the max of Epsilon(U) and ParametricTolerance.
        	:param Knots:
        	:type Knots: TColStd_Array1OfReal
        	:param Mults:
        	:type Mults: TColStd_Array1OfInteger
        	:param ParametricTolerance: default value is 0.0
        	:type ParametricTolerance: float
        	:param Add: default value is Standard_False
        	:type Add: bool
        	:rtype: None
        """
        return _Law.Law_BSpline_InsertKnots(self, *args)


    def IsCN(self, *args) -> "Standard_Boolean":
        """
        * Returns the continuity of the curve, the curve is at least C0. Raised if N < 0.
        	:param N:
        	:type N: int
        	:rtype: bool
        """
        return _Law.Law_BSpline_IsCN(self, *args)


    def IsClosed(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the distance between the first point and the last point of the curve is lower or equal to Resolution from package gp. Warnings : The first and the last point can be different from the first pole and the last pole of the curve.
        	:rtype: bool
        """
        return _Law.Law_BSpline_IsClosed(self, *args)


    def IsPeriodic(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the curve is periodic.
        	:rtype: bool
        """
        return _Law.Law_BSpline_IsPeriodic(self, *args)


    def IsRational(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the weights are not identical. The tolerance criterion is Epsilon of the class Real.
        	:rtype: bool
        """
        return _Law.Law_BSpline_IsRational(self, *args)


    def Knot(self, *args) -> "Standard_Real":
        """
        * Returns the knot of range Index. When there is a knot with a multiplicity greater than 1 the knot is not repeated. The method Multiplicity can be used to get the multiplicity of the Knot. Raised if Index < 1 or Index > NbKnots
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _Law.Law_BSpline_Knot(self, *args)


    def KnotDistribution(self, *args) -> "GeomAbs_BSplKnotDistribution":
        """
        * Returns NonUniform or Uniform or QuasiUniform or PiecewiseBezier. If all the knots differ by a positive constant from the preceding knot the BSpline Curve can be : - Uniform if all the knots are of multiplicity 1, - QuasiUniform if all the knots are of multiplicity 1 except for the first and last knot which are of multiplicity Degree + 1, - PiecewiseBezier if the first and last knots have multiplicity Degree + 1 and if interior knots have multiplicity Degree A piecewise Bezier with only two knots is a BezierCurve. else the curve is non uniform. The tolerance criterion is Epsilon from class Real.
        	:rtype: GeomAbs_BSplKnotDistribution
        """
        return _Law.Law_BSpline_KnotDistribution(self, *args)


    def KnotSequence(self, *args) -> "void":
        """
        * Returns the knots sequence. In this sequence the knots with a multiplicity greater than 1 are repeated. Example : K = {k1, k1, k1, k2, k3, k3, k4, k4, k4} //! Raised if the length of K is not equal to NbPoles + Degree + 1
        	:param K:
        	:type K: TColStd_Array1OfReal
        	:rtype: None
        """
        return _Law.Law_BSpline_KnotSequence(self, *args)


    def Knots(self, *args) -> "void":
        """
        * returns the knot values of the B-spline curve; //! Raised if the length of K is not equal to the number of knots.
        	:param K:
        	:type K: TColStd_Array1OfReal
        	:rtype: None
        """
        return _Law.Law_BSpline_Knots(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        * Computes the parametric value of the end point of the curve. It is a knot value.
        	:rtype: float
        """
        return _Law.Law_BSpline_LastParameter(self, *args)


    def LastUKnotIndex(self, *args) -> "Standard_Integer":
        """
        * For a BSpline curve the last parameter (which gives the end point of the curve) is a knot value but if the multiplicity of the last knot index is lower than Degree + 1 it is not the last knot of the curve. This method computes the index of the knot corresponding to the last parameter.
        	:rtype: int
        """
        return _Law.Law_BSpline_LastUKnotIndex(self, *args)


    def __init__(self, *args):
        """
        * Creates a non-rational B_spline curve on the basis <Knots, Multiplicities> of degree <Degree>.
        	:param Poles:
        	:type Poles: TColStd_Array1OfReal
        	:param Knots:
        	:type Knots: TColStd_Array1OfReal
        	:param Multiplicities:
        	:type Multiplicities: TColStd_Array1OfInteger
        	:param Degree:
        	:type Degree: int
        	:param Periodic: default value is Standard_False
        	:type Periodic: bool
        	:rtype: None
        * Creates a rational B_spline curve on the basis <Knots, Multiplicities> of degree <Degree>.
        	:param Poles:
        	:type Poles: TColStd_Array1OfReal
        	:param Weights:
        	:type Weights: TColStd_Array1OfReal
        	:param Knots:
        	:type Knots: TColStd_Array1OfReal
        	:param Multiplicities:
        	:type Multiplicities: TColStd_Array1OfInteger
        	:param Degree:
        	:type Degree: int
        	:param Periodic: default value is Standard_False
        	:type Periodic: bool
        	:rtype: None
        """
        _Law.Law_BSpline_swiginit(self, _Law.new_Law_BSpline(*args))

    def LocalD0(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param FromK1:
        	:type FromK1: int
        	:param ToK2:
        	:type ToK2: int
        	:param P:
        	:type P: float
        	:rtype: None
        """
        return _Law.Law_BSpline_LocalD0(self, *args)


    def LocalD1(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param FromK1:
        	:type FromK1: int
        	:param ToK2:
        	:type ToK2: int
        	:param P:
        	:type P: float
        	:param V1:
        	:type V1: float
        	:rtype: None
        """
        return _Law.Law_BSpline_LocalD1(self, *args)


    def LocalD2(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param FromK1:
        	:type FromK1: int
        	:param ToK2:
        	:type ToK2: int
        	:param P:
        	:type P: float
        	:param V1:
        	:type V1: float
        	:param V2:
        	:type V2: float
        	:rtype: None
        """
        return _Law.Law_BSpline_LocalD2(self, *args)


    def LocalD3(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param FromK1:
        	:type FromK1: int
        	:param ToK2:
        	:type ToK2: int
        	:param P:
        	:type P: float
        	:param V1:
        	:type V1: float
        	:param V2:
        	:type V2: float
        	:param V3:
        	:type V3: float
        	:rtype: None
        """
        return _Law.Law_BSpline_LocalD3(self, *args)


    def LocalDN(self, *args) -> "Standard_Real":
        """
        :param U:
        	:type U: float
        	:param FromK1:
        	:type FromK1: int
        	:param ToK2:
        	:type ToK2: int
        	:param N:
        	:type N: int
        	:rtype: float
        """
        return _Law.Law_BSpline_LocalDN(self, *args)


    def LocalValue(self, *args) -> "Standard_Real":
        """
        :param U:
        	:type U: float
        	:param FromK1:
        	:type FromK1: int
        	:param ToK2:
        	:type ToK2: int
        	:rtype: float
        """
        return _Law.Law_BSpline_LocalValue(self, *args)


    def LocateU(self, *args) -> "void":
        """
        * Locates the parametric value U in the sequence of knots. If 'WithKnotRepetition' is True we consider the knot's representation with repetition of multiple knot value, otherwise we consider the knot's representation with no repetition of multiple knot values. Knots (I1) <= U <= Knots (I2) . if I1 = I2 U is a knot value (the tolerance criterion ParametricTolerance is used). . if I1 < 1 => U < Knots (1) - Abs(ParametricTolerance) . if I2 > NbKnots => U > Knots (NbKnots) + Abs(ParametricTolerance)
        	:param U:
        	:type U: float
        	:param ParametricTolerance:
        	:type ParametricTolerance: float
        	:param I1:
        	:type I1: int
        	:param I2:
        	:type I2: int
        	:param WithKnotRepetition: default value is Standard_False
        	:type WithKnotRepetition: bool
        	:rtype: None
        """
        return _Law.Law_BSpline_LocateU(self, *args)


    def MaxDegree(*args) -> "Standard_Integer":
        """
        * Returns the value of the maximum degree of the normalized B-spline basis functions in this package.
        	:rtype: int
        """
        return _Law.Law_BSpline_MaxDegree(*args)

    MaxDegree = staticmethod(MaxDegree)

    def MovePointAndTangent(self, *args) -> "void":
        """
        * Changes the value of the Law at parameter U to NewValue. and makes its derivative at U be derivative. StartingCondition = -1 means first can move EndingCondition = -1 means last point can move StartingCondition = 0 means the first point cannot move EndingCondition = 0 means the last point cannot move StartingCondition = 1 means the first point and tangent cannot move EndingCondition = 1 means the last point and tangent cannot move and so forth ErrorStatus != 0 means that there are not enought degree of freedom with the constrain to deform the curve accordingly
        	:param U:
        	:type U: float
        	:param NewValue:
        	:type NewValue: float
        	:param Derivative:
        	:type Derivative: float
        	:param Tolerance:
        	:type Tolerance: float
        	:param StartingCondition:
        	:type StartingCondition: int
        	:param EndingCondition:
        	:type EndingCondition: int
        	:param ErrorStatus:
        	:type ErrorStatus: int
        	:rtype: None
        """
        return _Law.Law_BSpline_MovePointAndTangent(self, *args)


    def Multiplicities(self, *args) -> "void":
        """
        * Returns the multiplicity of the knots of the curve. //! Raised if the length of M is not equal to NbKnots.
        	:param M:
        	:type M: TColStd_Array1OfInteger
        	:rtype: None
        """
        return _Law.Law_BSpline_Multiplicities(self, *args)


    def Multiplicity(self, *args) -> "Standard_Integer":
        """
        * Returns the multiplicity of the knots of range Index. Raised if Index < 1 or Index > NbKnots
        	:param Index:
        	:type Index: int
        	:rtype: int
        """
        return _Law.Law_BSpline_Multiplicity(self, *args)


    def NbKnots(self, *args) -> "Standard_Integer":
        """
        * Returns the number of knots. This method returns the number of knot without repetition of multiple knots.
        	:rtype: int
        """
        return _Law.Law_BSpline_NbKnots(self, *args)


    def NbPoles(self, *args) -> "Standard_Integer":
        """
        * Returns the number of poles
        	:rtype: int
        """
        return _Law.Law_BSpline_NbPoles(self, *args)


    def PeriodicNormalization(self, *args) -> "void":
        """
        * returns the parameter normalized within the period if the curve is periodic : otherwise does not do anything
        	:param U:
        	:type U: float
        	:rtype: None
        """
        return _Law.Law_BSpline_PeriodicNormalization(self, *args)


    def Pole(self, *args) -> "Standard_Real":
        """
        * Returns the pole of range Index. Raised if Index < 1 or Index > NbPoles.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _Law.Law_BSpline_Pole(self, *args)


    def Poles(self, *args) -> "void":
        """
        * Returns the poles of the B-spline curve; //! Raised if the length of P is not equal to the number of poles.
        	:param P:
        	:type P: TColStd_Array1OfReal
        	:rtype: None
        """
        return _Law.Law_BSpline_Poles(self, *args)


    def RemoveKnot(self, *args) -> "Standard_Boolean":
        """
        * Decrement the knots multiplicity to <M>. If M is 0 the knot is removed. The Poles sequence is modified. //! As there are two ways to compute the new poles the average is computed if the distance is lower than the <Tolerance>, else False is returned. //! A low tolerance is used to prevent the modification of the curve. //! A high tolerance is used to 'smooth' the curve. //! Raised if Index is not in the range [FirstUKnotIndex, LastUKnotIndex] pole insertion and pole removing this operation is limited to the Uniform or QuasiUniform BSplineCurve. The knot values are modified . If the BSpline is NonUniform or Piecewise Bezier an exception Construction error is raised.
        	:param Index:
        	:type Index: int
        	:param M:
        	:type M: int
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: bool
        """
        return _Law.Law_BSpline_RemoveKnot(self, *args)


    def Resolution(self, *args) -> "void":
        """
        * given Tolerance3D returns UTolerance such that if f(t) is the curve we have | t1 - t0| < Utolerance ===> |f(t1) - f(t0)| < Tolerance3D
        	:param Tolerance3D:
        	:type Tolerance3D: float
        	:param UTolerance:
        	:type UTolerance: float
        	:rtype: None
        """
        return _Law.Law_BSpline_Resolution(self, *args)


    def Reverse(self, *args) -> "void":
        """
        * Changes the direction of parametrization of <self>. The Knot sequence is modified, the FirstParameter and the LastParameter are not modified. The StartPoint of the initial curve becomes the EndPoint of the reversed curve and the EndPoint of the initial curve becomes the StartPoint of the reversed curve.
        	:rtype: None
        """
        return _Law.Law_BSpline_Reverse(self, *args)


    def ReversedParameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on the reversed curve for the point of parameter U on <self>. //! returns UFirst + ULast - U
        	:param U:
        	:type U: float
        	:rtype: float
        """
        return _Law.Law_BSpline_ReversedParameter(self, *args)


    def Segment(self, *args) -> "void":
        """
        * Segments the curve between U1 and U2. The control points are modified, the first and the last point are not the same. Warnings : Even if <self> is not closed it can become closed after the segmentation for example if U1 or U2 are out of the bounds of the curve <self> or if the curve makes loop. After the segmentation the length of a curve can be null. raises if U2 < U1.
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None
        """
        return _Law.Law_BSpline_Segment(self, *args)


    def SetKnot(self, *args) -> "void":
        """
        * Changes the knot of range Index. The multiplicity of the knot is not modified. Raised if K >= Knots(Index+1) or K <= Knots(Index-1). Raised if Index < 1 || Index > NbKnots
        	:param Index:
        	:type Index: int
        	:param K:
        	:type K: float
        	:rtype: None
        * Changes the knot of range Index with its multiplicity. You can increase the multiplicity of a knot but it is not allowed to decrease the multiplicity of an existing knot. //! Raised if K >= Knots(Index+1) or K <= Knots(Index-1). Raised if M is greater than Degree or lower than the previous multiplicity of knot of range Index. Raised if Index < 1 || Index > NbKnots
        	:param Index:
        	:type Index: int
        	:param K:
        	:type K: float
        	:param M:
        	:type M: int
        	:rtype: None
        """
        return _Law.Law_BSpline_SetKnot(self, *args)


    def SetKnots(self, *args) -> "void":
        """
        * Changes all the knots of the curve The multiplicity of the knots are not modified. //! Raised if there is an index such that K (Index+1) <= K (Index). //! Raised if K.Lower() < 1 or K.Upper() > NbKnots
        	:param K:
        	:type K: TColStd_Array1OfReal
        	:rtype: None
        """
        return _Law.Law_BSpline_SetKnots(self, *args)


    def SetNotPeriodic(self, *args) -> "void":
        """
        * Makes a non periodic curve. If the curve was non periodic the curve is not modified.
        	:rtype: None
        """
        return _Law.Law_BSpline_SetNotPeriodic(self, *args)


    def SetOrigin(self, *args) -> "void":
        """
        * Set the origin of a periodic curve at Knot(index) KnotVector and poles are modified. Raised if the curve is not periodic Raised if index not in the range [FirstUKnotIndex , LastUKnotIndex]
        	:param Index:
        	:type Index: int
        	:rtype: None
        """
        return _Law.Law_BSpline_SetOrigin(self, *args)


    def SetPeriodic(self, *args) -> "void":
        """
        * Makes a closed B-spline into a periodic curve. The curve is periodic if the knot sequence is periodic and if the curve is closed (The tolerance criterion is Resolution from gp). The period T is equal to Knot(LastUKnotIndex) - Knot(FirstUKnotIndex). A periodic B-spline can be uniform or not. Raised if the curve is not closed.
        	:rtype: None
        """
        return _Law.Law_BSpline_SetPeriodic(self, *args)


    def SetPole(self, *args) -> "void":
        """
        * Substitutes the Pole of range Index with P. //! Raised if Index < 1 || Index > NbPoles
        	:param Index:
        	:type Index: int
        	:param P:
        	:type P: float
        	:rtype: None
        * Substitutes the pole and the weight of range Index. If the curve <self> is not rational it can become rational If the curve was rational it can become non rational //! Raised if Index < 1 || Index > NbPoles Raised if Weight <= 0.0
        	:param Index:
        	:type Index: int
        	:param P:
        	:type P: float
        	:param Weight:
        	:type Weight: float
        	:rtype: None
        """
        return _Law.Law_BSpline_SetPole(self, *args)


    def SetWeight(self, *args) -> "void":
        """
        * Changes the weight for the pole of range Index. If the curve was non rational it can become rational. If the curve was rational it can become non rational. //! Raised if Index < 1 || Index > NbPoles Raised if Weight <= 0.0
        	:param Index:
        	:type Index: int
        	:param Weight:
        	:type Weight: float
        	:rtype: None
        """
        return _Law.Law_BSpline_SetWeight(self, *args)


    def StartPoint(self, *args) -> "Standard_Real":
        """
        * Returns the start point of the curve. Warnings : This point is different from the first pole of the curve if the multiplicity of the first knot is lower than Degree.
        	:rtype: float
        """
        return _Law.Law_BSpline_StartPoint(self, *args)


    def Value(self, *args) -> "Standard_Real":
        """
        :param U:
        	:type U: float
        	:rtype: float
        """
        return _Law.Law_BSpline_Value(self, *args)


    def Weight(self, *args) -> "Standard_Real":
        """
        * Returns the weight of the pole of range Index . Raised if Index < 1 or Index > NbPoles.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _Law.Law_BSpline_Weight(self, *args)


    def Weights(self, *args) -> "void":
        """
        * Returns the weights of the B-spline curve; //! Raised if the length of W is not equal to NbPoles.
        	:param W:
        	:type W: TColStd_Array1OfReal
        	:rtype: None
        """
        return _Law.Law_BSpline_Weights(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Law_BSpline_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Law.delete_Law_BSpline
Law_BSpline.Continuity = new_instancemethod(_Law.Law_BSpline_Continuity, None, Law_BSpline)
Law_BSpline.Copy = new_instancemethod(_Law.Law_BSpline_Copy, None, Law_BSpline)
Law_BSpline.D0 = new_instancemethod(_Law.Law_BSpline_D0, None, Law_BSpline)
Law_BSpline.D1 = new_instancemethod(_Law.Law_BSpline_D1, None, Law_BSpline)
Law_BSpline.D2 = new_instancemethod(_Law.Law_BSpline_D2, None, Law_BSpline)
Law_BSpline.D3 = new_instancemethod(_Law.Law_BSpline_D3, None, Law_BSpline)
Law_BSpline.DN = new_instancemethod(_Law.Law_BSpline_DN, None, Law_BSpline)
Law_BSpline.Degree = new_instancemethod(_Law.Law_BSpline_Degree, None, Law_BSpline)
Law_BSpline.EndPoint = new_instancemethod(_Law.Law_BSpline_EndPoint, None, Law_BSpline)
Law_BSpline.FirstParameter = new_instancemethod(_Law.Law_BSpline_FirstParameter, None, Law_BSpline)
Law_BSpline.FirstUKnotIndex = new_instancemethod(_Law.Law_BSpline_FirstUKnotIndex, None, Law_BSpline)
Law_BSpline.IncreaseDegree = new_instancemethod(_Law.Law_BSpline_IncreaseDegree, None, Law_BSpline)
Law_BSpline.IncreaseMultiplicity = new_instancemethod(_Law.Law_BSpline_IncreaseMultiplicity, None, Law_BSpline)
Law_BSpline.IncrementMultiplicity = new_instancemethod(_Law.Law_BSpline_IncrementMultiplicity, None, Law_BSpline)
Law_BSpline.InsertKnot = new_instancemethod(_Law.Law_BSpline_InsertKnot, None, Law_BSpline)
Law_BSpline.InsertKnots = new_instancemethod(_Law.Law_BSpline_InsertKnots, None, Law_BSpline)
Law_BSpline.IsCN = new_instancemethod(_Law.Law_BSpline_IsCN, None, Law_BSpline)
Law_BSpline.IsClosed = new_instancemethod(_Law.Law_BSpline_IsClosed, None, Law_BSpline)
Law_BSpline.IsPeriodic = new_instancemethod(_Law.Law_BSpline_IsPeriodic, None, Law_BSpline)
Law_BSpline.IsRational = new_instancemethod(_Law.Law_BSpline_IsRational, None, Law_BSpline)
Law_BSpline.Knot = new_instancemethod(_Law.Law_BSpline_Knot, None, Law_BSpline)
Law_BSpline.KnotDistribution = new_instancemethod(_Law.Law_BSpline_KnotDistribution, None, Law_BSpline)
Law_BSpline.KnotSequence = new_instancemethod(_Law.Law_BSpline_KnotSequence, None, Law_BSpline)
Law_BSpline.Knots = new_instancemethod(_Law.Law_BSpline_Knots, None, Law_BSpline)
Law_BSpline.LastParameter = new_instancemethod(_Law.Law_BSpline_LastParameter, None, Law_BSpline)
Law_BSpline.LastUKnotIndex = new_instancemethod(_Law.Law_BSpline_LastUKnotIndex, None, Law_BSpline)
Law_BSpline.LocalD0 = new_instancemethod(_Law.Law_BSpline_LocalD0, None, Law_BSpline)
Law_BSpline.LocalD1 = new_instancemethod(_Law.Law_BSpline_LocalD1, None, Law_BSpline)
Law_BSpline.LocalD2 = new_instancemethod(_Law.Law_BSpline_LocalD2, None, Law_BSpline)
Law_BSpline.LocalD3 = new_instancemethod(_Law.Law_BSpline_LocalD3, None, Law_BSpline)
Law_BSpline.LocalDN = new_instancemethod(_Law.Law_BSpline_LocalDN, None, Law_BSpline)
Law_BSpline.LocalValue = new_instancemethod(_Law.Law_BSpline_LocalValue, None, Law_BSpline)
Law_BSpline.LocateU = new_instancemethod(_Law.Law_BSpline_LocateU, None, Law_BSpline)
Law_BSpline.MovePointAndTangent = new_instancemethod(_Law.Law_BSpline_MovePointAndTangent, None, Law_BSpline)
Law_BSpline.Multiplicities = new_instancemethod(_Law.Law_BSpline_Multiplicities, None, Law_BSpline)
Law_BSpline.Multiplicity = new_instancemethod(_Law.Law_BSpline_Multiplicity, None, Law_BSpline)
Law_BSpline.NbKnots = new_instancemethod(_Law.Law_BSpline_NbKnots, None, Law_BSpline)
Law_BSpline.NbPoles = new_instancemethod(_Law.Law_BSpline_NbPoles, None, Law_BSpline)
Law_BSpline.PeriodicNormalization = new_instancemethod(_Law.Law_BSpline_PeriodicNormalization, None, Law_BSpline)
Law_BSpline.Pole = new_instancemethod(_Law.Law_BSpline_Pole, None, Law_BSpline)
Law_BSpline.Poles = new_instancemethod(_Law.Law_BSpline_Poles, None, Law_BSpline)
Law_BSpline.RemoveKnot = new_instancemethod(_Law.Law_BSpline_RemoveKnot, None, Law_BSpline)
Law_BSpline.Resolution = new_instancemethod(_Law.Law_BSpline_Resolution, None, Law_BSpline)
Law_BSpline.Reverse = new_instancemethod(_Law.Law_BSpline_Reverse, None, Law_BSpline)
Law_BSpline.ReversedParameter = new_instancemethod(_Law.Law_BSpline_ReversedParameter, None, Law_BSpline)
Law_BSpline.Segment = new_instancemethod(_Law.Law_BSpline_Segment, None, Law_BSpline)
Law_BSpline.SetKnot = new_instancemethod(_Law.Law_BSpline_SetKnot, None, Law_BSpline)
Law_BSpline.SetKnots = new_instancemethod(_Law.Law_BSpline_SetKnots, None, Law_BSpline)
Law_BSpline.SetNotPeriodic = new_instancemethod(_Law.Law_BSpline_SetNotPeriodic, None, Law_BSpline)
Law_BSpline.SetOrigin = new_instancemethod(_Law.Law_BSpline_SetOrigin, None, Law_BSpline)
Law_BSpline.SetPeriodic = new_instancemethod(_Law.Law_BSpline_SetPeriodic, None, Law_BSpline)
Law_BSpline.SetPole = new_instancemethod(_Law.Law_BSpline_SetPole, None, Law_BSpline)
Law_BSpline.SetWeight = new_instancemethod(_Law.Law_BSpline_SetWeight, None, Law_BSpline)
Law_BSpline.StartPoint = new_instancemethod(_Law.Law_BSpline_StartPoint, None, Law_BSpline)
Law_BSpline.Value = new_instancemethod(_Law.Law_BSpline_Value, None, Law_BSpline)
Law_BSpline.Weight = new_instancemethod(_Law.Law_BSpline_Weight, None, Law_BSpline)
Law_BSpline.Weights = new_instancemethod(_Law.Law_BSpline_Weights, None, Law_BSpline)
Law_BSpline_swigregister = _Law.Law_BSpline_swigregister
Law_BSpline_swigregister(Law_BSpline)

def Law_BSpline_MaxDegree(*args) -> "Standard_Integer":
    """
    * Returns the value of the maximum degree of the normalized B-spline basis functions in this package.
    	:rtype: int
    """
    return _Law.Law_BSpline_MaxDegree(*args)

class Law_BSplineKnotSplitting(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Locates the knot values which correspond to the segmentation of the curve into arcs with a continuity equal to ContinuityRange. //! Raised if ContinuityRange is not greater or equal zero.
        	:param BasisLaw:
        	:type BasisLaw: Law_BSpline
        	:param ContinuityRange:
        	:type ContinuityRange: int
        	:rtype: None
        """
        _Law.Law_BSplineKnotSplitting_swiginit(self, _Law.new_Law_BSplineKnotSplitting(*args))

    def NbSplits(self, *args) -> "Standard_Integer":
        """
        * Returns the number of knots corresponding to the splitting.
        	:rtype: int
        """
        return _Law.Law_BSplineKnotSplitting_NbSplits(self, *args)


    def SplitValue(self, *args) -> "Standard_Integer":
        """
        * Returns the index of the knot corresponding to the splitting of range Index. //! Raised if Index < 1 or Index > NbSplits
        	:param Index:
        	:type Index: int
        	:rtype: int
        """
        return _Law.Law_BSplineKnotSplitting_SplitValue(self, *args)


    def Splitting(self, *args) -> "void":
        """
        * Returns the indexes of the BSpline curve knots corresponding to the splitting. //! Raised if the length of SplitValues is not equal to NbSPlit.
        	:param SplitValues:
        	:type SplitValues: TColStd_Array1OfInteger
        	:rtype: None
        """
        return _Law.Law_BSplineKnotSplitting_Splitting(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Law.delete_Law_BSplineKnotSplitting
Law_BSplineKnotSplitting.NbSplits = new_instancemethod(_Law.Law_BSplineKnotSplitting_NbSplits, None, Law_BSplineKnotSplitting)
Law_BSplineKnotSplitting.SplitValue = new_instancemethod(_Law.Law_BSplineKnotSplitting_SplitValue, None, Law_BSplineKnotSplitting)
Law_BSplineKnotSplitting.Splitting = new_instancemethod(_Law.Law_BSplineKnotSplitting_Splitting, None, Law_BSplineKnotSplitting)
Law_BSplineKnotSplitting_swigregister = _Law.Law_BSplineKnotSplitting_swigregister
Law_BSplineKnotSplitting_swigregister(Law_BSplineKnotSplitting)

class Law_Function(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Bounds(self, *args) -> "void":
        """
        * Returns the parametric bounds of the function.
        	:param PFirst:
        	:type PFirst: float
        	:param PLast:
        	:type PLast: float
        	:rtype: void
        """
        return _Law.Law_Function_Bounds(self, *args)


    def Continuity(self, *args) -> "GeomAbs_Shape":
        """:rtype: GeomAbs_Shape"""
        return _Law.Law_Function_Continuity(self, *args)


    def D1(self, *args) -> "void":
        """
        * Returns the value F and the first derivative D of the function at the point of parameter X.
        	:param X:
        	:type X: float
        	:param F:
        	:type F: float
        	:param D:
        	:type D: float
        	:rtype: void
        """
        return _Law.Law_Function_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        * Returns the value, first and seconde derivatives at parameter X.
        	:param X:
        	:type X: float
        	:param F:
        	:type F: float
        	:param D:
        	:type D: float
        	:param D2:
        	:type D2: float
        	:rtype: void
        """
        return _Law.Law_Function_D2(self, *args)


    def Intervals(self, *args) -> "void":
        """
        * Stores in <T> the parameters bounding the intervals of continuity <S>. //! The array must provide enough room to accomodate for the parameters. i.e. T.Length() > NbIntervals()
        	:param T:
        	:type T: TColStd_Array1OfReal
        	:param S:
        	:type S: GeomAbs_Shape
        	:rtype: void
        """
        return _Law.Law_Function_Intervals(self, *args)


    def NbIntervals(self, *args) -> "Standard_Integer":
        """
        * Returns the number of intervals for continuity <S>. May be one if Continuity(me) >= <S>
        	:param S:
        	:type S: GeomAbs_Shape
        	:rtype: int
        """
        return _Law.Law_Function_NbIntervals(self, *args)


    def Trim(self, *args) -> "opencascade::handle< Law_Function >":
        """
        * Returns a law equivalent of <self> between parameters <First> and <Last>. <Tol> is used to test for 3d points confusion. It is usfule to determines the derivatives in these values <First> and <Last> if the Law is not Cn.
        	:param PFirst:
        	:type PFirst: float
        	:param PLast:
        	:type PLast: float
        	:param Tol:
        	:type Tol: float
        	:rtype: opencascade::handle<Law_Function>
        """
        return _Law.Law_Function_Trim(self, *args)


    def Value(self, *args) -> "Standard_Real":
        """
        * Returns the value of the function at the point of parameter X.
        	:param X:
        	:type X: float
        	:rtype: float
        """
        return _Law.Law_Function_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Law_Function_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Law.delete_Law_Function
Law_Function.Bounds = new_instancemethod(_Law.Law_Function_Bounds, None, Law_Function)
Law_Function.Continuity = new_instancemethod(_Law.Law_Function_Continuity, None, Law_Function)
Law_Function.D1 = new_instancemethod(_Law.Law_Function_D1, None, Law_Function)
Law_Function.D2 = new_instancemethod(_Law.Law_Function_D2, None, Law_Function)
Law_Function.Intervals = new_instancemethod(_Law.Law_Function_Intervals, None, Law_Function)
Law_Function.NbIntervals = new_instancemethod(_Law.Law_Function_NbIntervals, None, Law_Function)
Law_Function.Trim = new_instancemethod(_Law.Law_Function_Trim, None, Law_Function)
Law_Function.Value = new_instancemethod(_Law.Law_Function_Value, None, Law_Function)
Law_Function_swigregister = _Law.Law_Function_swigregister
Law_Function_swigregister(Law_Function)

class Law_Interpolate(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Curve(self, *args) -> "opencascade::handle< Law_BSpline > const &":
        """:rtype: opencascade::handle<Law_BSpline>"""
        return _Law.Law_Interpolate_Curve(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Law.Law_Interpolate_IsDone(self, *args)


    def __init__(self, *args):
        """
        * Tolerance is to check if the points are not too close to one an other. It is also used to check if the tangent vector is not too small. There should be at least 2 points. If PeriodicFlag is True then the curve will be periodic be periodic
        	:param Points:
        	:type Points: TColStd_HArray1OfReal
        	:param PeriodicFlag:
        	:type PeriodicFlag: bool
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * Tolerance is to check if the points are not too close to one an other. It is also used to check if the tangent vector is not too small. There should be at least 2 points. If PeriodicFlag is True then the curve will be periodic be periodic
        	:param Points:
        	:type Points: TColStd_HArray1OfReal
        	:param Parameters:
        	:type Parameters: TColStd_HArray1OfReal
        	:param PeriodicFlag:
        	:type PeriodicFlag: bool
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        """
        _Law.Law_Interpolate_swiginit(self, _Law.new_Law_Interpolate(*args))

    def Load(self, *args) -> "void":
        """
        * loads initial and final tangents if any.
        	:param InitialTangent:
        	:type InitialTangent: float
        	:param FinalTangent:
        	:type FinalTangent: float
        	:rtype: None
        * loads the tangents. We should have as many tangents as they are points in the array if TangentFlags.Value(i) is Standard_True use the tangent Tangents.Value(i) otherwise the tangent is not constrained.
        	:param Tangents:
        	:type Tangents: TColStd_Array1OfReal
        	:param TangentFlags:
        	:type TangentFlags: TColStd_HArray1OfBoolean
        	:rtype: None
        """
        return _Law.Law_Interpolate_Load(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Makes the interpolation
        	:rtype: None
        """
        return _Law.Law_Interpolate_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Law.delete_Law_Interpolate
Law_Interpolate.Curve = new_instancemethod(_Law.Law_Interpolate_Curve, None, Law_Interpolate)
Law_Interpolate.IsDone = new_instancemethod(_Law.Law_Interpolate_IsDone, None, Law_Interpolate)
Law_Interpolate.Load = new_instancemethod(_Law.Law_Interpolate_Load, None, Law_Interpolate)
Law_Interpolate.Perform = new_instancemethod(_Law.Law_Interpolate_Perform, None, Law_Interpolate)
Law_Interpolate_swigregister = _Law.Law_Interpolate_swigregister
Law_Interpolate_swigregister(Law_Interpolate)

class Law_BSpFunc(Law_Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Curve(self, *args) -> "opencascade::handle< Law_BSpline >":
        """:rtype: opencascade::handle<Law_BSpline>"""
        return _Law.Law_BSpFunc_Curve(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param C:
        	:type C: Law_BSpline
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        """
        _Law.Law_BSpFunc_swiginit(self, _Law.new_Law_BSpFunc(*args))

    def SetCurve(self, *args) -> "void":
        """
        :param C:
        	:type C: Law_BSpline
        	:rtype: None
        """
        return _Law.Law_BSpFunc_SetCurve(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Law_BSpFunc_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Law.delete_Law_BSpFunc
Law_BSpFunc.Curve = new_instancemethod(_Law.Law_BSpFunc_Curve, None, Law_BSpFunc)
Law_BSpFunc.SetCurve = new_instancemethod(_Law.Law_BSpFunc_SetCurve, None, Law_BSpFunc)
Law_BSpFunc_swigregister = _Law.Law_BSpFunc_swigregister
Law_BSpFunc_swigregister(Law_BSpFunc)

class Law_Composite(Law_Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeElementaryLaw(self, *args) -> "opencascade::handle< Law_Function > &":
        """
        * Returns the elementary function of the composite used to compute at parameter W.
        	:param W:
        	:type W: float
        	:rtype: opencascade::handle<Law_Function>
        """
        return _Law.Law_Composite_ChangeElementaryLaw(self, *args)


    def ChangeLaws(self, *args) -> "Law_Laws &":
        """:rtype: Law_Laws"""
        return _Law.Law_Composite_ChangeLaws(self, *args)


    def IsPeriodic(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Law.Law_Composite_IsPeriodic(self, *args)


    def __init__(self, *args):
        """
        * Construct an empty Law
        	:rtype: None
        * Construct an empty, trimed Law
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Law.Law_Composite_swiginit(self, _Law.new_Law_Composite(*args))

    def SetPeriodic(self, *args) -> "void":
        """:rtype: None"""
        return _Law.Law_Composite_SetPeriodic(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Law_Composite_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Law.delete_Law_Composite
Law_Composite.ChangeElementaryLaw = new_instancemethod(_Law.Law_Composite_ChangeElementaryLaw, None, Law_Composite)
Law_Composite.ChangeLaws = new_instancemethod(_Law.Law_Composite_ChangeLaws, None, Law_Composite)
Law_Composite.IsPeriodic = new_instancemethod(_Law.Law_Composite_IsPeriodic, None, Law_Composite)
Law_Composite.SetPeriodic = new_instancemethod(_Law.Law_Composite_SetPeriodic, None, Law_Composite)
Law_Composite_swigregister = _Law.Law_Composite_swigregister
Law_Composite_swigregister(Law_Composite)

class Law_Constant(Law_Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _Law.Law_Constant_swiginit(self, _Law.new_Law_Constant(*args))

    def Set(self, *args) -> "void":
        """
        * Set the radius and the range of the constant Law.
        	:param Radius:
        	:type Radius: float
        	:param PFirst:
        	:type PFirst: float
        	:param PLast:
        	:type PLast: float
        	:rtype: None
        """
        return _Law.Law_Constant_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Law_Constant_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Law.delete_Law_Constant
Law_Constant.Set = new_instancemethod(_Law.Law_Constant_Set, None, Law_Constant)
Law_Constant_swigregister = _Law.Law_Constant_swigregister
Law_Constant_swigregister(Law_Constant)

class Law_Linear(Law_Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty linear evolution law.
        	:rtype: None
        """
        _Law.Law_Linear_swiginit(self, _Law.new_Law_Linear(*args))

    def Set(self, *args) -> "void":
        """
        * Defines this linear evolution law by assigning both: - the bounds Pdeb and Pfin of the parameter, and - the values Valdeb and Valfin of the function at these two parametric bounds.
        	:param Pdeb:
        	:type Pdeb: float
        	:param Valdeb:
        	:type Valdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param Valfin:
        	:type Valfin: float
        	:rtype: None
        """
        return _Law.Law_Linear_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Law_Linear_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Law.delete_Law_Linear
Law_Linear.Set = new_instancemethod(_Law.Law_Linear_Set, None, Law_Linear)
Law_Linear_swigregister = _Law.Law_Linear_swigregister
Law_Linear_swigregister(Law_Linear)

class Law_Interpol(Law_BSpFunc):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty interpolative evolution law. The function Set is used to define the law.
        	:rtype: None
        """
        _Law.Law_Interpol_swiginit(self, _Law.new_Law_Interpol(*args))

    def Set(self, *args) -> "void":
        """
        * Defines this evolution law by interpolating the set of 2D points ParAndRad. The Y coordinate of a point of ParAndRad is the value of the function at the parameter point given by its X coordinate. If Periodic is true, this function is assumed to be periodic. Warning - The X coordinates of points in the table ParAndRad must be given in ascendant order. - If Periodic is true, the first and last Y coordinates of points in the table ParAndRad are assumed to be equal. In addition, with the second syntax, Dd and Df are also assumed to be equal. If this is not the case, Set uses the first value(s) as last value(s).
        	:param ParAndRad:
        	:type ParAndRad: TColgp_Array1OfPnt2d
        	:param Periodic: default value is Standard_False
        	:type Periodic: bool
        	:rtype: None
        * Defines this evolution law by interpolating the set of 2D points ParAndRad. The Y coordinate of a point of ParAndRad is the value of the function at the parameter point given by its X coordinate. If Periodic is true, this function is assumed to be periodic. In the second syntax, Dd and Df define the values of the first derivative of the function at its first and last points. Warning - The X coordinates of points in the table ParAndRad must be given in ascendant order. - If Periodic is true, the first and last Y coordinates of points in the table ParAndRad are assumed to be equal. In addition, with the second syntax, Dd and Df are also assumed to be equal. If this is not the case, Set uses the first value(s) as last value(s).
        	:param ParAndRad:
        	:type ParAndRad: TColgp_Array1OfPnt2d
        	:param Dd:
        	:type Dd: float
        	:param Df:
        	:type Df: float
        	:param Periodic: default value is Standard_False
        	:type Periodic: bool
        	:rtype: None
        """
        return _Law.Law_Interpol_Set(self, *args)


    def SetInRelative(self, *args) -> "void":
        """
        :param ParAndRad:
        	:type ParAndRad: TColgp_Array1OfPnt2d
        	:param Ud:
        	:type Ud: float
        	:param Uf:
        	:type Uf: float
        	:param Periodic: default value is Standard_False
        	:type Periodic: bool
        	:rtype: None
        :param ParAndRad:
        	:type ParAndRad: TColgp_Array1OfPnt2d
        	:param Ud:
        	:type Ud: float
        	:param Uf:
        	:type Uf: float
        	:param Dd:
        	:type Dd: float
        	:param Df:
        	:type Df: float
        	:param Periodic: default value is Standard_False
        	:type Periodic: bool
        	:rtype: None
        """
        return _Law.Law_Interpol_SetInRelative(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Law_Interpol_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Law.delete_Law_Interpol
Law_Interpol.Set = new_instancemethod(_Law.Law_Interpol_Set, None, Law_Interpol)
Law_Interpol.SetInRelative = new_instancemethod(_Law.Law_Interpol_SetInRelative, None, Law_Interpol)
Law_Interpol_swigregister = _Law.Law_Interpol_swigregister
Law_Interpol_swigregister(Law_Interpol)

class Law_S(Law_BSpFunc):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty 'S' evolution law.
        	:rtype: None
        """
        _Law.Law_S_swiginit(self, _Law.new_Law_S(*args))

    def Set(self, *args) -> "void":
        """
        * Defines this S evolution law by assigning both: - the bounds Pdeb and Pfin of the parameter, and - the values Valdeb and Valfin of the function at these two parametric bounds. The function is assumed to have the first derivatives equal to 0 at the two parameter points Pdeb and Pfin.
        	:param Pdeb:
        	:type Pdeb: float
        	:param Valdeb:
        	:type Valdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param Valfin:
        	:type Valfin: float
        	:rtype: None
        * Defines this S evolution law by assigning - the bounds Pdeb and Pfin of the parameter, - the values Valdeb and Valfin of the function at these two parametric bounds, and - the values Ddeb and Dfin of the first derivative of the function at these two parametric bounds.
        	:param Pdeb:
        	:type Pdeb: float
        	:param Valdeb:
        	:type Valdeb: float
        	:param Ddeb:
        	:type Ddeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param Valfin:
        	:type Valfin: float
        	:param Dfin:
        	:type Dfin: float
        	:rtype: None
        """
        return _Law.Law_S_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Law_S_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Law.delete_Law_S
Law_S.Set = new_instancemethod(_Law.Law_S_Set, None, Law_S)
Law_S_swigregister = _Law.Law_S_swigregister
Law_S_swigregister(Law_S)



