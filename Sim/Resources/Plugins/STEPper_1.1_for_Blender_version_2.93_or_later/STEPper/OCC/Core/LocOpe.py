# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
LocOpe module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_locope.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _LocOpe.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_LocOpe')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_LocOpe')
    _LocOpe = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_LocOpe', [dirname(__file__)])
        except ImportError:
            import _LocOpe
            return _LocOpe
        try:
            _mod = imp.load_module('_LocOpe', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _LocOpe = swig_import_helper()
    del swig_import_helper
else:
    import _LocOpe
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocOpe.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_LocOpe.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_LocOpe.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_LocOpe.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_LocOpe.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_LocOpe.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_LocOpe.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_LocOpe.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_LocOpe.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_LocOpe.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_LocOpe.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_LocOpe.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_LocOpe.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_LocOpe.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_LocOpe.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_LocOpe.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_LocOpe.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _LocOpe.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _LocOpe.process_exception(error, method_name, class_name)
process_exception = _LocOpe.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TColgp
import OCC.Core.TopTools
import OCC.Core.TCollection
import OCC.Core.TColGeom
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColStd
LocOpe_FUSE = _LocOpe.LocOpe_FUSE
LocOpe_CUT = _LocOpe.LocOpe_CUT
LocOpe_INVALID = _LocOpe.LocOpe_INVALID

def Handle_LocOpe_GeneratedShape_Create() -> "opencascade::handle< LocOpe_GeneratedShape >":
    return _LocOpe.Handle_LocOpe_GeneratedShape_Create()
Handle_LocOpe_GeneratedShape_Create = _LocOpe.Handle_LocOpe_GeneratedShape_Create

def Handle_LocOpe_GeneratedShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< LocOpe_GeneratedShape >":
    return _LocOpe.Handle_LocOpe_GeneratedShape_DownCast(t)
Handle_LocOpe_GeneratedShape_DownCast = _LocOpe.Handle_LocOpe_GeneratedShape_DownCast

def Handle_LocOpe_GeneratedShape_IsNull(t: 'opencascade::handle< LocOpe_GeneratedShape > const &') -> "bool":
    return _LocOpe.Handle_LocOpe_GeneratedShape_IsNull(t)
Handle_LocOpe_GeneratedShape_IsNull = _LocOpe.Handle_LocOpe_GeneratedShape_IsNull

def Handle_LocOpe_WiresOnShape_Create() -> "opencascade::handle< LocOpe_WiresOnShape >":
    return _LocOpe.Handle_LocOpe_WiresOnShape_Create()
Handle_LocOpe_WiresOnShape_Create = _LocOpe.Handle_LocOpe_WiresOnShape_Create

def Handle_LocOpe_WiresOnShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< LocOpe_WiresOnShape >":
    return _LocOpe.Handle_LocOpe_WiresOnShape_DownCast(t)
Handle_LocOpe_WiresOnShape_DownCast = _LocOpe.Handle_LocOpe_WiresOnShape_DownCast

def Handle_LocOpe_WiresOnShape_IsNull(t: 'opencascade::handle< LocOpe_WiresOnShape > const &') -> "bool":
    return _LocOpe.Handle_LocOpe_WiresOnShape_IsNull(t)
Handle_LocOpe_WiresOnShape_IsNull = _LocOpe.Handle_LocOpe_WiresOnShape_IsNull

def Handle_LocOpe_GluedShape_Create() -> "opencascade::handle< LocOpe_GluedShape >":
    return _LocOpe.Handle_LocOpe_GluedShape_Create()
Handle_LocOpe_GluedShape_Create = _LocOpe.Handle_LocOpe_GluedShape_Create

def Handle_LocOpe_GluedShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< LocOpe_GluedShape >":
    return _LocOpe.Handle_LocOpe_GluedShape_DownCast(t)
Handle_LocOpe_GluedShape_DownCast = _LocOpe.Handle_LocOpe_GluedShape_DownCast

def Handle_LocOpe_GluedShape_IsNull(t: 'opencascade::handle< LocOpe_GluedShape > const &') -> "bool":
    return _LocOpe.Handle_LocOpe_GluedShape_IsNull(t)
Handle_LocOpe_GluedShape_IsNull = _LocOpe.Handle_LocOpe_GluedShape_IsNull
class LocOpe_SequenceOfLin(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.LocOpe_SequenceOfLin_swiginit(self, _LocOpe.new_LocOpe_SequenceOfLin(*args))
    delNode = staticmethod(_LocOpe.LocOpe_SequenceOfLin_delNode)
    __swig_destroy__ = _LocOpe.delete_LocOpe_SequenceOfLin
LocOpe_SequenceOfLin.begin = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_begin, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.end = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_end, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.cbegin = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_cbegin, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.cend = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_cend, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Size = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Size, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Length = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Length, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Lower = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Lower, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Upper = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Upper, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.IsEmpty = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_IsEmpty, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Reverse = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Reverse, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Exchange = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Exchange, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Clear = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Clear, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Assign = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Assign, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Set = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Set, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Remove = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Remove, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Append = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Append, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Prepend = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Prepend, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.InsertBefore = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_InsertBefore, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.InsertAfter = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_InsertAfter, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Split = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Split, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.First = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_First, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.ChangeFirst = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_ChangeFirst, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Last = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Last, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.ChangeLast = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_ChangeLast, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.Value = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_Value, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.ChangeValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_ChangeValue, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.__call__ = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin___call__, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin.SetValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfLin_SetValue, None, LocOpe_SequenceOfLin)
LocOpe_SequenceOfLin_swigregister = _LocOpe.LocOpe_SequenceOfLin_swigregister
LocOpe_SequenceOfLin_swigregister(LocOpe_SequenceOfLin)

def LocOpe_SequenceOfLin_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _LocOpe.LocOpe_SequenceOfLin_delNode(theNode, theAl)
LocOpe_SequenceOfLin_delNode = _LocOpe.LocOpe_SequenceOfLin_delNode

class LocOpe_DataMapOfShapePnt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.LocOpe_DataMapOfShapePnt_swiginit(self, _LocOpe.new_LocOpe_DataMapOfShapePnt(*args))
    __swig_destroy__ = _LocOpe.delete_LocOpe_DataMapOfShapePnt
LocOpe_DataMapOfShapePnt.begin = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_begin, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.end = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_end, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.cbegin = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_cbegin, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.cend = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_cend, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Exchange = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Exchange, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Assign = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Assign, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Set = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Set, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.ReSize = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_ReSize, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Bind = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Bind, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Bound = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Bound, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.IsBound = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_IsBound, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.UnBind = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_UnBind, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Seek = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Seek, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Find = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Find, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.ChangeSeek = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_ChangeSeek, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.ChangeFind = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_ChangeFind, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.__call__ = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt___call__, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Clear = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Clear, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt.Size = new_instancemethod(_LocOpe.LocOpe_DataMapOfShapePnt_Size, None, LocOpe_DataMapOfShapePnt)
LocOpe_DataMapOfShapePnt_swigregister = _LocOpe.LocOpe_DataMapOfShapePnt_swigregister
LocOpe_DataMapOfShapePnt_swigregister(LocOpe_DataMapOfShapePnt)

class LocOpe_SequenceOfCirc(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.LocOpe_SequenceOfCirc_swiginit(self, _LocOpe.new_LocOpe_SequenceOfCirc(*args))
    delNode = staticmethod(_LocOpe.LocOpe_SequenceOfCirc_delNode)
    __swig_destroy__ = _LocOpe.delete_LocOpe_SequenceOfCirc
LocOpe_SequenceOfCirc.begin = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_begin, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.end = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_end, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.cbegin = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_cbegin, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.cend = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_cend, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Size = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Size, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Length = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Length, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Lower = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Lower, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Upper = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Upper, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.IsEmpty = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_IsEmpty, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Reverse = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Reverse, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Exchange = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Exchange, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Clear = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Clear, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Assign = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Assign, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Set = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Set, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Remove = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Remove, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Append = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Append, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Prepend = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Prepend, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.InsertBefore = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_InsertBefore, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.InsertAfter = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_InsertAfter, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Split = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Split, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.First = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_First, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.ChangeFirst = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_ChangeFirst, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Last = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Last, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.ChangeLast = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_ChangeLast, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.Value = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_Value, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.ChangeValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_ChangeValue, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.__call__ = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc___call__, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc.SetValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfCirc_SetValue, None, LocOpe_SequenceOfCirc)
LocOpe_SequenceOfCirc_swigregister = _LocOpe.LocOpe_SequenceOfCirc_swigregister
LocOpe_SequenceOfCirc_swigregister(LocOpe_SequenceOfCirc)

def LocOpe_SequenceOfCirc_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _LocOpe.LocOpe_SequenceOfCirc_delNode(theNode, theAl)
LocOpe_SequenceOfCirc_delNode = _LocOpe.LocOpe_SequenceOfCirc_delNode

class LocOpe_SequenceOfPntFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LocOpe.LocOpe_SequenceOfPntFace_swiginit(self, _LocOpe.new_LocOpe_SequenceOfPntFace(*args))
    delNode = staticmethod(_LocOpe.LocOpe_SequenceOfPntFace_delNode)
    __swig_destroy__ = _LocOpe.delete_LocOpe_SequenceOfPntFace
LocOpe_SequenceOfPntFace.begin = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_begin, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.end = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_end, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.cbegin = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_cbegin, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.cend = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_cend, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Size = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Size, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Length = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Length, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Lower = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Lower, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Upper = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Upper, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.IsEmpty = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_IsEmpty, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Reverse = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Reverse, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Exchange = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Exchange, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Clear = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Clear, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Assign = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Assign, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Set = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Set, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Remove = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Remove, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Append = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Append, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Prepend = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Prepend, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.InsertBefore = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_InsertBefore, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.InsertAfter = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_InsertAfter, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Split = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Split, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.First = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_First, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.ChangeFirst = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_ChangeFirst, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Last = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Last, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.ChangeLast = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_ChangeLast, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.Value = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_Value, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.ChangeValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_ChangeValue, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.__call__ = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace___call__, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace.SetValue = new_instancemethod(_LocOpe.LocOpe_SequenceOfPntFace_SetValue, None, LocOpe_SequenceOfPntFace)
LocOpe_SequenceOfPntFace_swigregister = _LocOpe.LocOpe_SequenceOfPntFace_swigregister
LocOpe_SequenceOfPntFace_swigregister(LocOpe_SequenceOfPntFace)

def LocOpe_SequenceOfPntFace_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _LocOpe.LocOpe_SequenceOfPntFace_delNode(theNode, theAl)
LocOpe_SequenceOfPntFace_delNode = _LocOpe.LocOpe_SequenceOfPntFace_delNode

class locope(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Closed(*args) -> "Standard_Boolean":
        """
        * Returns Standard_True when the wire <W> is closed on the face <OnF>.
        	:param W:
        	:type W: TopoDS_Wire
        	:param OnF:
        	:type OnF: TopoDS_Face
        	:rtype: bool
        * Returns Standard_True when the edge <E> is closed on the face <OnF>.
        	:param E:
        	:type E: TopoDS_Edge
        	:param OnF:
        	:type OnF: TopoDS_Face
        	:rtype: bool
        """
        return _LocOpe.locope_Closed(*args)

    Closed = staticmethod(Closed)

    def SampleEdges(*args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param Pt:
        	:type Pt: TColgp_SequenceOfPnt
        	:rtype: void
        """
        return _LocOpe.locope_SampleEdges(*args)

    SampleEdges = staticmethod(SampleEdges)

    def TgtFaces(*args) -> "Standard_Boolean":
        """
        * Returns Standard_True when the faces are tangent
        	:param E:
        	:type E: TopoDS_Edge
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: bool
        """
        return _LocOpe.locope_TgtFaces(*args)

    TgtFaces = staticmethod(TgtFaces)

    __repr__ = _dumps_object


    def __init__(self):
        _LocOpe.locope_swiginit(self, _LocOpe.new_locope())
    __swig_destroy__ = _LocOpe.delete_locope
locope_swigregister = _LocOpe.locope_swigregister
locope_swigregister(locope)

def locope_Closed(*args) -> "Standard_Boolean":
    """
    * Returns Standard_True when the wire <W> is closed on the face <OnF>.
    	:param W:
    	:type W: TopoDS_Wire
    	:param OnF:
    	:type OnF: TopoDS_Face
    	:rtype: bool
    * Returns Standard_True when the edge <E> is closed on the face <OnF>.
    	:param E:
    	:type E: TopoDS_Edge
    	:param OnF:
    	:type OnF: TopoDS_Face
    	:rtype: bool
    """
    return _LocOpe.locope_Closed(*args)

def locope_SampleEdges(*args) -> "void":
    """
    :param S:
    	:type S: TopoDS_Shape
    	:param Pt:
    	:type Pt: TColgp_SequenceOfPnt
    	:rtype: void
    """
    return _LocOpe.locope_SampleEdges(*args)

def locope_TgtFaces(*args) -> "Standard_Boolean":
    """
    * Returns Standard_True when the faces are tangent
    	:param E:
    	:type E: TopoDS_Edge
    	:param F1:
    	:type F1: TopoDS_Face
    	:param F2:
    	:type F2: TopoDS_Face
    	:rtype: bool
    """
    return _LocOpe.locope_TgtFaces(*args)

class LocOpe_BuildShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Builds shape(s) from the list <L>. Uses only the faces of <L>.
        	:param L:
        	:type L: TopTools_ListOfShape
        	:rtype: None
        """
        _LocOpe.LocOpe_BuildShape_swiginit(self, _LocOpe.new_LocOpe_BuildShape(*args))

    def Perform(self, *args) -> "void":
        """
        * Builds shape(s) from the list <L>. Uses only the faces of <L>.
        	:param L:
        	:type L: TopTools_ListOfShape
        	:rtype: None
        """
        return _LocOpe.LocOpe_BuildShape_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_BuildShape_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_BuildShape
LocOpe_BuildShape.Perform = new_instancemethod(_LocOpe.LocOpe_BuildShape_Perform, None, LocOpe_BuildShape)
LocOpe_BuildShape.Shape = new_instancemethod(_LocOpe.LocOpe_BuildShape_Shape, None, LocOpe_BuildShape)
LocOpe_BuildShape_swigregister = _LocOpe.LocOpe_BuildShape_swigregister
LocOpe_BuildShape_swigregister(LocOpe_BuildShape)

class LocOpe_BuildWires(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _LocOpe.LocOpe_BuildWires_IsDone(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Ledges:
        	:type Ledges: TopTools_ListOfShape
        	:param PW:
        	:type PW: LocOpe_WiresOnShape
        	:rtype: None
        """
        _LocOpe.LocOpe_BuildWires_swiginit(self, _LocOpe.new_LocOpe_BuildWires(*args))

    def Perform(self, *args) -> "void":
        """
        :param Ledges:
        	:type Ledges: TopTools_ListOfShape
        	:param PW:
        	:type PW: LocOpe_WiresOnShape
        	:rtype: None
        """
        return _LocOpe.LocOpe_BuildWires_Perform(self, *args)


    def Result(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _LocOpe.LocOpe_BuildWires_Result(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_BuildWires
LocOpe_BuildWires.IsDone = new_instancemethod(_LocOpe.LocOpe_BuildWires_IsDone, None, LocOpe_BuildWires)
LocOpe_BuildWires.Perform = new_instancemethod(_LocOpe.LocOpe_BuildWires_Perform, None, LocOpe_BuildWires)
LocOpe_BuildWires.Result = new_instancemethod(_LocOpe.LocOpe_BuildWires_Result, None, LocOpe_BuildWires)
LocOpe_BuildWires_swigregister = _LocOpe.LocOpe_BuildWires_swigregister
LocOpe_BuildWires_swigregister(LocOpe_BuildWires)

class LocOpe_CSIntersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Destroy(self, *args) -> "void":
        """:rtype: None"""
        return _LocOpe.LocOpe_CSIntersector_Destroy(self, *args)


    def Init(self, *args) -> "void":
        """
        * Performs the intersection between <Ax1 and <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _LocOpe.LocOpe_CSIntersector_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns <Standard_True> if the intersection has been done.
        	:rtype: bool
        """
        return _LocOpe.LocOpe_CSIntersector_IsDone(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Creates and performs the intersection betwwen <Ax1> and <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _LocOpe.LocOpe_CSIntersector_swiginit(self, _LocOpe.new_LocOpe_CSIntersector(*args))

    def LocalizeAfter(self, *args) -> "Standard_Boolean":
        """
        * On the element of range <I>, searches the first intersection point located after the parameter <From>, wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point. (IndFrom <= IndTo). <Tol> is used to determine if 2 parameters are equal. //! Otherwise, returns <Standard_False>.
        	:param I:
        	:type I: int
        	:param From:
        	:type From: float
        	:param Tol:
        	:type Tol: float
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:param IndFrom:
        	:type IndFrom: int
        	:param IndTo:
        	:type IndTo: int
        	:rtype: bool
        * On the element of range <I>, searches the first intersection point located after the index <FromInd> ( >= FromInd + 1), wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point. (IndFrom <= IndTo). <Tol> is used to determine if 2 parameters are equal. //! Otherwise, returns <Standard_False>.
        	:param I:
        	:type I: int
        	:param FromInd:
        	:type FromInd: int
        	:param Tol:
        	:type Tol: float
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:param IndFrom:
        	:type IndFrom: int
        	:param IndTo:
        	:type IndTo: int
        	:rtype: bool
        """
        return _LocOpe.LocOpe_CSIntersector_LocalizeAfter(self, *args)


    def LocalizeBefore(self, *args) -> "Standard_Boolean":
        """
        * On the element of range <I>, searches the first intersection point located before the parameter <From>, wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point (IndFrom <= IndTo). <Tol> is used to determine if 2 parameters are equal. //! Otherwise, returns <Standard_False>.
        	:param I:
        	:type I: int
        	:param From:
        	:type From: float
        	:param Tol:
        	:type Tol: float
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:param IndFrom:
        	:type IndFrom: int
        	:param IndTo:
        	:type IndTo: int
        	:rtype: bool
        * On the element of range <I>, searches the first intersection point located before the index <FromInd> ( <= FromInd -1), wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point (IndFrom <= IndTo). <Tol> is used to determine if 2 parameters are equal. //! Otherwise, returns <Standard_False>.
        	:param I:
        	:type I: int
        	:param FromInd:
        	:type FromInd: int
        	:param Tol:
        	:type Tol: float
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:param IndFrom:
        	:type IndFrom: int
        	:param IndTo:
        	:type IndTo: int
        	:rtype: bool
        """
        return _LocOpe.LocOpe_CSIntersector_LocalizeBefore(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of intersection point on the element of range <I>.
        	:param I:
        	:type I: int
        	:rtype: int
        """
        return _LocOpe.LocOpe_CSIntersector_NbPoints(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param Slin:
        	:type Slin: LocOpe_SequenceOfLin
        	:rtype: None
        :param Scir:
        	:type Scir: LocOpe_SequenceOfCirc
        	:rtype: None
        :param Scur:
        	:type Scur: TColGeom_SequenceOfCurve
        	:rtype: None
        """
        return _LocOpe.LocOpe_CSIntersector_Perform(self, *args)


    def Point(self, *args) -> "LocOpe_PntFace const &":
        """
        * Returns the intersection point of range <Index> on element of range <I>. The points are sorted in increasing order of parameter along the axis.
        	:param I:
        	:type I: int
        	:param Index:
        	:type Index: int
        	:rtype: LocOpe_PntFace
        """
        return _LocOpe.LocOpe_CSIntersector_Point(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_CSIntersector
LocOpe_CSIntersector.Destroy = new_instancemethod(_LocOpe.LocOpe_CSIntersector_Destroy, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.Init = new_instancemethod(_LocOpe.LocOpe_CSIntersector_Init, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.IsDone = new_instancemethod(_LocOpe.LocOpe_CSIntersector_IsDone, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.LocalizeAfter = new_instancemethod(_LocOpe.LocOpe_CSIntersector_LocalizeAfter, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.LocalizeBefore = new_instancemethod(_LocOpe.LocOpe_CSIntersector_LocalizeBefore, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.NbPoints = new_instancemethod(_LocOpe.LocOpe_CSIntersector_NbPoints, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.Perform = new_instancemethod(_LocOpe.LocOpe_CSIntersector_Perform, None, LocOpe_CSIntersector)
LocOpe_CSIntersector.Point = new_instancemethod(_LocOpe.LocOpe_CSIntersector_Point, None, LocOpe_CSIntersector)
LocOpe_CSIntersector_swigregister = _LocOpe.LocOpe_CSIntersector_swigregister
LocOpe_CSIntersector_swigregister(LocOpe_CSIntersector)

class LocOpe_CurveShapeIntersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(self, *args) -> "void":
        """
        * Performs the intersection between <Ax1 and <S>.
        	:param Axis:
        	:type Axis: gp_Ax1
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        * Performs the intersection between <Ax1 and <S>.
        	:param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _LocOpe.LocOpe_CurveShapeIntersector_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns <Standard_True> if the intersection has been done.
        	:rtype: bool
        """
        return _LocOpe.LocOpe_CurveShapeIntersector_IsDone(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Creates and performs the intersection betwwen <Ax1> and <S>.
        	:param Axis:
        	:type Axis: gp_Ax1
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        * Creates and performs yte intersection betwwen <C> and <S>.
        	:param C:
        	:type C: gp_Circ
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _LocOpe.LocOpe_CurveShapeIntersector_swiginit(self, _LocOpe.new_LocOpe_CurveShapeIntersector(*args))

    def LocalizeAfter(self, *args) -> "Standard_Boolean":
        """
        * Searches the first intersection point located after the parameter <From>, wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point. (IndFrom <= IndTo). //! Otherwise, returns <Standard_False>.
        	:param From:
        	:type From: float
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:param IndFrom:
        	:type IndFrom: int
        	:param IndTo:
        	:type IndTo: int
        	:rtype: bool
        * Searches the first intersection point located after the index <FromInd> ( >= FromInd + 1), wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point. (IndFrom <= IndTo). //! Otherwise, returns <Standard_False>.
        	:param FromInd:
        	:type FromInd: int
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:param IndFrom:
        	:type IndFrom: int
        	:param IndTo:
        	:type IndTo: int
        	:rtype: bool
        """
        return _LocOpe.LocOpe_CurveShapeIntersector_LocalizeAfter(self, *args)


    def LocalizeBefore(self, *args) -> "Standard_Boolean":
        """
        * Searches the first intersection point located before the parameter <From>, wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point (IndFrom <= IndTo). //! Otherwise, returns <Standard_False>.
        	:param From:
        	:type From: float
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:param IndFrom:
        	:type IndFrom: int
        	:param IndTo:
        	:type IndTo: int
        	:rtype: bool
        * Searches the first intersection point located before the index <FromInd> ( <= FromInd -1), wich orientation is not TopAbs_EXTERNAL. If found, returns <Standard_True>. <Or> contains the orientation of the point, <IndFrom> and <IndTo> represents the interval of index in the sequence of intersection point corresponding to the point (IndFrom <= IndTo). //! Otherwise, returns <Standard_False>.
        	:param FromInd:
        	:type FromInd: int
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:param IndFrom:
        	:type IndFrom: int
        	:param IndTo:
        	:type IndTo: int
        	:rtype: bool
        """
        return _LocOpe.LocOpe_CurveShapeIntersector_LocalizeBefore(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of intersection point.
        	:rtype: int
        """
        return _LocOpe.LocOpe_CurveShapeIntersector_NbPoints(self, *args)


    def Point(self, *args) -> "LocOpe_PntFace const &":
        """
        * Returns the intersection point of range <Index>. The points are sorted in increasing order of parameter along the axis.
        	:param Index:
        	:type Index: int
        	:rtype: LocOpe_PntFace
        """
        return _LocOpe.LocOpe_CurveShapeIntersector_Point(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_CurveShapeIntersector
LocOpe_CurveShapeIntersector.Init = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_Init, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector.IsDone = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_IsDone, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector.LocalizeAfter = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_LocalizeAfter, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector.LocalizeBefore = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_LocalizeBefore, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector.NbPoints = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_NbPoints, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector.Point = new_instancemethod(_LocOpe.LocOpe_CurveShapeIntersector_Point, None, LocOpe_CurveShapeIntersector)
LocOpe_CurveShapeIntersector_swigregister = _LocOpe.LocOpe_CurveShapeIntersector_swigregister
LocOpe_CurveShapeIntersector_swigregister(LocOpe_CurveShapeIntersector)

class LocOpe_DPrism(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BarycCurve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """:rtype: opencascade::handle<Geom_Curve>"""
        return _LocOpe.LocOpe_DPrism_BarycCurve(self, *args)


    def Curves(self, *args) -> "void":
        """
        :param SCurves:
        	:type SCurves: TColGeom_SequenceOfCurve
        	:rtype: None
        """
        return _LocOpe.LocOpe_DPrism_Curves(self, *args)


    def FirstShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_DPrism_FirstShape(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _LocOpe.LocOpe_DPrism_IsDone(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_DPrism_LastShape(self, *args)


    def __init__(self, *args):
        """
        :param Spine:
        	:type Spine: TopoDS_Face
        	:param Height1:
        	:type Height1: float
        	:param Height2:
        	:type Height2: float
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        :param Spine:
        	:type Spine: TopoDS_Face
        	:param Height:
        	:type Height: float
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        """
        _LocOpe.LocOpe_DPrism_swiginit(self, _LocOpe.new_LocOpe_DPrism(*args))

    def Profile(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_DPrism_Profile(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_DPrism_Shape(self, *args)


    def Shapes(self, *args) -> "TopTools_ListOfShape const &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_DPrism_Shapes(self, *args)


    def Spine(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_DPrism_Spine(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_DPrism
LocOpe_DPrism.BarycCurve = new_instancemethod(_LocOpe.LocOpe_DPrism_BarycCurve, None, LocOpe_DPrism)
LocOpe_DPrism.Curves = new_instancemethod(_LocOpe.LocOpe_DPrism_Curves, None, LocOpe_DPrism)
LocOpe_DPrism.FirstShape = new_instancemethod(_LocOpe.LocOpe_DPrism_FirstShape, None, LocOpe_DPrism)
LocOpe_DPrism.IsDone = new_instancemethod(_LocOpe.LocOpe_DPrism_IsDone, None, LocOpe_DPrism)
LocOpe_DPrism.LastShape = new_instancemethod(_LocOpe.LocOpe_DPrism_LastShape, None, LocOpe_DPrism)
LocOpe_DPrism.Profile = new_instancemethod(_LocOpe.LocOpe_DPrism_Profile, None, LocOpe_DPrism)
LocOpe_DPrism.Shape = new_instancemethod(_LocOpe.LocOpe_DPrism_Shape, None, LocOpe_DPrism)
LocOpe_DPrism.Shapes = new_instancemethod(_LocOpe.LocOpe_DPrism_Shapes, None, LocOpe_DPrism)
LocOpe_DPrism.Spine = new_instancemethod(_LocOpe.LocOpe_DPrism_Spine, None, LocOpe_DPrism)
LocOpe_DPrism_swigregister = _LocOpe.LocOpe_DPrism_swigregister
LocOpe_DPrism_swigregister(LocOpe_DPrism)

class LocOpe_FindEdges(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def EdgeFrom(self, *args) -> "TopoDS_Edge const":
        """:rtype: TopoDS_Edge"""
        return _LocOpe.LocOpe_FindEdges_EdgeFrom(self, *args)


    def EdgeTo(self, *args) -> "TopoDS_Edge const":
        """:rtype: TopoDS_Edge"""
        return _LocOpe.LocOpe_FindEdges_EdgeTo(self, *args)


    def InitIterator(self, *args) -> "void":
        """:rtype: None"""
        return _LocOpe.LocOpe_FindEdges_InitIterator(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param FFrom:
        	:type FFrom: TopoDS_Shape
        	:param FTo:
        	:type FTo: TopoDS_Shape
        	:rtype: None
        """
        _LocOpe.LocOpe_FindEdges_swiginit(self, _LocOpe.new_LocOpe_FindEdges(*args))

    def More(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _LocOpe.LocOpe_FindEdges_More(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _LocOpe.LocOpe_FindEdges_Next(self, *args)


    def Set(self, *args) -> "void":
        """
        :param FFrom:
        	:type FFrom: TopoDS_Shape
        	:param FTo:
        	:type FTo: TopoDS_Shape
        	:rtype: None
        """
        return _LocOpe.LocOpe_FindEdges_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_FindEdges
LocOpe_FindEdges.EdgeFrom = new_instancemethod(_LocOpe.LocOpe_FindEdges_EdgeFrom, None, LocOpe_FindEdges)
LocOpe_FindEdges.EdgeTo = new_instancemethod(_LocOpe.LocOpe_FindEdges_EdgeTo, None, LocOpe_FindEdges)
LocOpe_FindEdges.InitIterator = new_instancemethod(_LocOpe.LocOpe_FindEdges_InitIterator, None, LocOpe_FindEdges)
LocOpe_FindEdges.More = new_instancemethod(_LocOpe.LocOpe_FindEdges_More, None, LocOpe_FindEdges)
LocOpe_FindEdges.Next = new_instancemethod(_LocOpe.LocOpe_FindEdges_Next, None, LocOpe_FindEdges)
LocOpe_FindEdges.Set = new_instancemethod(_LocOpe.LocOpe_FindEdges_Set, None, LocOpe_FindEdges)
LocOpe_FindEdges_swigregister = _LocOpe.LocOpe_FindEdges_swigregister
LocOpe_FindEdges_swigregister(LocOpe_FindEdges)

class LocOpe_FindEdgesInFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Edge(self, *args) -> "TopoDS_Edge const":
        """:rtype: TopoDS_Edge"""
        return _LocOpe.LocOpe_FindEdgesInFace_Edge(self, *args)


    def Init(self, *args) -> "void":
        """:rtype: None"""
        return _LocOpe.LocOpe_FindEdgesInFace_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: TopoDS_Shape
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _LocOpe.LocOpe_FindEdgesInFace_swiginit(self, _LocOpe.new_LocOpe_FindEdgesInFace(*args))

    def More(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _LocOpe.LocOpe_FindEdgesInFace_More(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _LocOpe.LocOpe_FindEdgesInFace_Next(self, *args)


    def Set(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _LocOpe.LocOpe_FindEdgesInFace_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_FindEdgesInFace
LocOpe_FindEdgesInFace.Edge = new_instancemethod(_LocOpe.LocOpe_FindEdgesInFace_Edge, None, LocOpe_FindEdgesInFace)
LocOpe_FindEdgesInFace.Init = new_instancemethod(_LocOpe.LocOpe_FindEdgesInFace_Init, None, LocOpe_FindEdgesInFace)
LocOpe_FindEdgesInFace.More = new_instancemethod(_LocOpe.LocOpe_FindEdgesInFace_More, None, LocOpe_FindEdgesInFace)
LocOpe_FindEdgesInFace.Next = new_instancemethod(_LocOpe.LocOpe_FindEdgesInFace_Next, None, LocOpe_FindEdgesInFace)
LocOpe_FindEdgesInFace.Set = new_instancemethod(_LocOpe.LocOpe_FindEdgesInFace_Set, None, LocOpe_FindEdgesInFace)
LocOpe_FindEdgesInFace_swigregister = _LocOpe.LocOpe_FindEdgesInFace_swigregister
LocOpe_FindEdgesInFace_swigregister(LocOpe_FindEdgesInFace)

class LocOpe_GeneratedShape(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Generated(self, *args) -> "TopoDS_Face":
        """
        * Returns the edge created by the vertex <V>. If none, must return a null shape.
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: TopoDS_Edge
        * Returns the face created by the edge <E>. If none, must return a null shape.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: TopoDS_Face
        """
        return _LocOpe.LocOpe_GeneratedShape_Generated(self, *args)


    def GeneratingEdges(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _LocOpe.LocOpe_GeneratedShape_GeneratingEdges(self, *args)


    def OrientedFaces(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of correctly oriented generated faces.
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_GeneratedShape_OrientedFaces(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_LocOpe_GeneratedShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_GeneratedShape
LocOpe_GeneratedShape.Generated = new_instancemethod(_LocOpe.LocOpe_GeneratedShape_Generated, None, LocOpe_GeneratedShape)
LocOpe_GeneratedShape.GeneratingEdges = new_instancemethod(_LocOpe.LocOpe_GeneratedShape_GeneratingEdges, None, LocOpe_GeneratedShape)
LocOpe_GeneratedShape.OrientedFaces = new_instancemethod(_LocOpe.LocOpe_GeneratedShape_OrientedFaces, None, LocOpe_GeneratedShape)
LocOpe_GeneratedShape_swigregister = _LocOpe.LocOpe_GeneratedShape_swigregister
LocOpe_GeneratedShape_swigregister(LocOpe_GeneratedShape)

class LocOpe_Generator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DescendantFace(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the descendant face of <F>. <F> may belong to the original shape or to the 'generated' shape. The returned face may be a null shape (when <F> disappears).
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_Generator_DescendantFace(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes the algorithm on the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _LocOpe.LocOpe_Generator_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _LocOpe.LocOpe_Generator_IsDone(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Creates the algorithm on the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _LocOpe.LocOpe_Generator_swiginit(self, _LocOpe.new_LocOpe_Generator(*args))

    def Perform(self, *args) -> "void":
        """
        :param G:
        	:type G: LocOpe_GeneratedShape
        	:rtype: None
        """
        return _LocOpe.LocOpe_Generator_Perform(self, *args)


    def ResultingShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the new shape
        	:rtype: TopoDS_Shape
        """
        return _LocOpe.LocOpe_Generator_ResultingShape(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the initial shape
        	:rtype: TopoDS_Shape
        """
        return _LocOpe.LocOpe_Generator_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_Generator
LocOpe_Generator.DescendantFace = new_instancemethod(_LocOpe.LocOpe_Generator_DescendantFace, None, LocOpe_Generator)
LocOpe_Generator.Init = new_instancemethod(_LocOpe.LocOpe_Generator_Init, None, LocOpe_Generator)
LocOpe_Generator.IsDone = new_instancemethod(_LocOpe.LocOpe_Generator_IsDone, None, LocOpe_Generator)
LocOpe_Generator.Perform = new_instancemethod(_LocOpe.LocOpe_Generator_Perform, None, LocOpe_Generator)
LocOpe_Generator.ResultingShape = new_instancemethod(_LocOpe.LocOpe_Generator_ResultingShape, None, LocOpe_Generator)
LocOpe_Generator.Shape = new_instancemethod(_LocOpe.LocOpe_Generator_Shape, None, LocOpe_Generator)
LocOpe_Generator_swigregister = _LocOpe.LocOpe_Generator_swigregister
LocOpe_Generator_swigregister(LocOpe_Generator)

class LocOpe_Gluer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BasisShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_Gluer_BasisShape(self, *args)


    def Bind(self, *args) -> "void":
        """
        :param Fnew:
        	:type Fnew: TopoDS_Face
        	:param Fbase:
        	:type Fbase: TopoDS_Face
        	:rtype: None
        :param Enew:
        	:type Enew: TopoDS_Edge
        	:param Ebase:
        	:type Ebase: TopoDS_Edge
        	:rtype: None
        """
        return _LocOpe.LocOpe_Gluer_Bind(self, *args)


    def DescendantFaces(self, *args) -> "TopTools_ListOfShape const &":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_Gluer_DescendantFaces(self, *args)


    def Edges(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _LocOpe.LocOpe_Gluer_Edges(self, *args)


    def GluedShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_Gluer_GluedShape(self, *args)


    def Init(self, *args) -> "void":
        """
        :param Sbase:
        	:type Sbase: TopoDS_Shape
        	:param Snew:
        	:type Snew: TopoDS_Shape
        	:rtype: None
        """
        return _LocOpe.LocOpe_Gluer_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _LocOpe.LocOpe_Gluer_IsDone(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Sbase:
        	:type Sbase: TopoDS_Shape
        	:param Snew:
        	:type Snew: TopoDS_Shape
        	:rtype: None
        """
        _LocOpe.LocOpe_Gluer_swiginit(self, _LocOpe.new_LocOpe_Gluer(*args))

    def OpeType(self, *args) -> "LocOpe_Operation":
        """:rtype: LocOpe_Operation"""
        return _LocOpe.LocOpe_Gluer_OpeType(self, *args)


    def Perform(self, *args) -> "void":
        """:rtype: None"""
        return _LocOpe.LocOpe_Gluer_Perform(self, *args)


    def ResultingShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_Gluer_ResultingShape(self, *args)


    def TgtEdges(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _LocOpe.LocOpe_Gluer_TgtEdges(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_Gluer
LocOpe_Gluer.BasisShape = new_instancemethod(_LocOpe.LocOpe_Gluer_BasisShape, None, LocOpe_Gluer)
LocOpe_Gluer.Bind = new_instancemethod(_LocOpe.LocOpe_Gluer_Bind, None, LocOpe_Gluer)
LocOpe_Gluer.DescendantFaces = new_instancemethod(_LocOpe.LocOpe_Gluer_DescendantFaces, None, LocOpe_Gluer)
LocOpe_Gluer.Edges = new_instancemethod(_LocOpe.LocOpe_Gluer_Edges, None, LocOpe_Gluer)
LocOpe_Gluer.GluedShape = new_instancemethod(_LocOpe.LocOpe_Gluer_GluedShape, None, LocOpe_Gluer)
LocOpe_Gluer.Init = new_instancemethod(_LocOpe.LocOpe_Gluer_Init, None, LocOpe_Gluer)
LocOpe_Gluer.IsDone = new_instancemethod(_LocOpe.LocOpe_Gluer_IsDone, None, LocOpe_Gluer)
LocOpe_Gluer.OpeType = new_instancemethod(_LocOpe.LocOpe_Gluer_OpeType, None, LocOpe_Gluer)
LocOpe_Gluer.Perform = new_instancemethod(_LocOpe.LocOpe_Gluer_Perform, None, LocOpe_Gluer)
LocOpe_Gluer.ResultingShape = new_instancemethod(_LocOpe.LocOpe_Gluer_ResultingShape, None, LocOpe_Gluer)
LocOpe_Gluer.TgtEdges = new_instancemethod(_LocOpe.LocOpe_Gluer_TgtEdges, None, LocOpe_Gluer)
LocOpe_Gluer_swigregister = _LocOpe.LocOpe_Gluer_swigregister
LocOpe_Gluer_swigregister(LocOpe_Gluer)

class LocOpe_LinearForm(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_LinearForm_FirstShape(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_LinearForm_LastShape(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Base:
        	:type Base: TopoDS_Shape
        	:param V:
        	:type V: gp_Vec
        	:param Pnt1:
        	:type Pnt1: gp_Pnt
        	:param Pnt2:
        	:type Pnt2: gp_Pnt
        	:rtype: None
        :param Base:
        	:type Base: TopoDS_Shape
        	:param V:
        	:type V: gp_Vec
        	:param Vectra:
        	:type Vectra: gp_Vec
        	:param Pnt1:
        	:type Pnt1: gp_Pnt
        	:param Pnt2:
        	:type Pnt2: gp_Pnt
        	:rtype: None
        """
        _LocOpe.LocOpe_LinearForm_swiginit(self, _LocOpe.new_LocOpe_LinearForm(*args))

    def Perform(self, *args) -> "void":
        """
        :param Base:
        	:type Base: TopoDS_Shape
        	:param V:
        	:type V: gp_Vec
        	:param Pnt1:
        	:type Pnt1: gp_Pnt
        	:param Pnt2:
        	:type Pnt2: gp_Pnt
        	:rtype: None
        :param Base:
        	:type Base: TopoDS_Shape
        	:param V:
        	:type V: gp_Vec
        	:param Vectra:
        	:type Vectra: gp_Vec
        	:param Pnt1:
        	:type Pnt1: gp_Pnt
        	:param Pnt2:
        	:type Pnt2: gp_Pnt
        	:rtype: None
        """
        return _LocOpe.LocOpe_LinearForm_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_LinearForm_Shape(self, *args)


    def Shapes(self, *args) -> "TopTools_ListOfShape const &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_LinearForm_Shapes(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_LinearForm
LocOpe_LinearForm.FirstShape = new_instancemethod(_LocOpe.LocOpe_LinearForm_FirstShape, None, LocOpe_LinearForm)
LocOpe_LinearForm.LastShape = new_instancemethod(_LocOpe.LocOpe_LinearForm_LastShape, None, LocOpe_LinearForm)
LocOpe_LinearForm.Perform = new_instancemethod(_LocOpe.LocOpe_LinearForm_Perform, None, LocOpe_LinearForm)
LocOpe_LinearForm.Shape = new_instancemethod(_LocOpe.LocOpe_LinearForm_Shape, None, LocOpe_LinearForm)
LocOpe_LinearForm.Shapes = new_instancemethod(_LocOpe.LocOpe_LinearForm_Shapes, None, LocOpe_LinearForm)
LocOpe_LinearForm_swigregister = _LocOpe.LocOpe_LinearForm_swigregister
LocOpe_LinearForm_swigregister(LocOpe_LinearForm)

class LocOpe_Pipe(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BarycCurve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """:rtype: opencascade::handle<Geom_Curve>"""
        return _LocOpe.LocOpe_Pipe_BarycCurve(self, *args)


    def Curves(self, *args) -> "TColGeom_SequenceOfCurve const &":
        """
        :param Spt:
        	:type Spt: TColgp_SequenceOfPnt
        	:rtype: TColGeom_SequenceOfCurve
        """
        return _LocOpe.LocOpe_Pipe_Curves(self, *args)


    def FirstShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_Pipe_FirstShape(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_Pipe_LastShape(self, *args)


    def __init__(self, *args):
        """
        :param Spine:
        	:type Spine: TopoDS_Wire
        	:param Profile:
        	:type Profile: TopoDS_Shape
        	:rtype: None
        """
        _LocOpe.LocOpe_Pipe_swiginit(self, _LocOpe.new_LocOpe_Pipe(*args))

    def Profile(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_Pipe_Profile(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_Pipe_Shape(self, *args)


    def Shapes(self, *args) -> "TopTools_ListOfShape const &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_Pipe_Shapes(self, *args)


    def Spine(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_Pipe_Spine(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_Pipe
LocOpe_Pipe.BarycCurve = new_instancemethod(_LocOpe.LocOpe_Pipe_BarycCurve, None, LocOpe_Pipe)
LocOpe_Pipe.Curves = new_instancemethod(_LocOpe.LocOpe_Pipe_Curves, None, LocOpe_Pipe)
LocOpe_Pipe.FirstShape = new_instancemethod(_LocOpe.LocOpe_Pipe_FirstShape, None, LocOpe_Pipe)
LocOpe_Pipe.LastShape = new_instancemethod(_LocOpe.LocOpe_Pipe_LastShape, None, LocOpe_Pipe)
LocOpe_Pipe.Profile = new_instancemethod(_LocOpe.LocOpe_Pipe_Profile, None, LocOpe_Pipe)
LocOpe_Pipe.Shape = new_instancemethod(_LocOpe.LocOpe_Pipe_Shape, None, LocOpe_Pipe)
LocOpe_Pipe.Shapes = new_instancemethod(_LocOpe.LocOpe_Pipe_Shapes, None, LocOpe_Pipe)
LocOpe_Pipe.Spine = new_instancemethod(_LocOpe.LocOpe_Pipe_Spine, None, LocOpe_Pipe)
LocOpe_Pipe_swigregister = _LocOpe.LocOpe_Pipe_swigregister
LocOpe_Pipe_swigregister(LocOpe_Pipe)

class LocOpe_PntFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeOrientation(self, *args) -> "TopAbs_Orientation &":
        """:rtype: TopAbs_Orientation"""
        return _LocOpe.LocOpe_PntFace_ChangeOrientation(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _LocOpe.LocOpe_PntFace_Face(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor. Useful only for the list.
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param F:
        	:type F: TopoDS_Face
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:param Param:
        	:type Param: float
        	:param UPar:
        	:type UPar: float
        	:param VPar:
        	:type VPar: float
        	:rtype: None
        """
        _LocOpe.LocOpe_PntFace_swiginit(self, _LocOpe.new_LocOpe_PntFace(*args))

    def Orientation(self, *args) -> "TopAbs_Orientation":
        """:rtype: TopAbs_Orientation"""
        return _LocOpe.LocOpe_PntFace_Orientation(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _LocOpe.LocOpe_PntFace_Parameter(self, *args)


    def Pnt(self, *args) -> "gp_Pnt const":
        """:rtype: gp_Pnt"""
        return _LocOpe.LocOpe_PntFace_Pnt(self, *args)


    def UParameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _LocOpe.LocOpe_PntFace_UParameter(self, *args)


    def VParameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _LocOpe.LocOpe_PntFace_VParameter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_PntFace
LocOpe_PntFace.ChangeOrientation = new_instancemethod(_LocOpe.LocOpe_PntFace_ChangeOrientation, None, LocOpe_PntFace)
LocOpe_PntFace.Face = new_instancemethod(_LocOpe.LocOpe_PntFace_Face, None, LocOpe_PntFace)
LocOpe_PntFace.Orientation = new_instancemethod(_LocOpe.LocOpe_PntFace_Orientation, None, LocOpe_PntFace)
LocOpe_PntFace.Parameter = new_instancemethod(_LocOpe.LocOpe_PntFace_Parameter, None, LocOpe_PntFace)
LocOpe_PntFace.Pnt = new_instancemethod(_LocOpe.LocOpe_PntFace_Pnt, None, LocOpe_PntFace)
LocOpe_PntFace.UParameter = new_instancemethod(_LocOpe.LocOpe_PntFace_UParameter, None, LocOpe_PntFace)
LocOpe_PntFace.VParameter = new_instancemethod(_LocOpe.LocOpe_PntFace_VParameter, None, LocOpe_PntFace)
LocOpe_PntFace_swigregister = _LocOpe.LocOpe_PntFace_swigregister
LocOpe_PntFace_swigregister(LocOpe_PntFace)

class LocOpe_Prism(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BarycCurve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """:rtype: opencascade::handle<Geom_Curve>"""
        return _LocOpe.LocOpe_Prism_BarycCurve(self, *args)


    def Curves(self, *args) -> "void":
        """
        :param SCurves:
        	:type SCurves: TColGeom_SequenceOfCurve
        	:rtype: None
        """
        return _LocOpe.LocOpe_Prism_Curves(self, *args)


    def FirstShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_Prism_FirstShape(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_Prism_LastShape(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Base:
        	:type Base: TopoDS_Shape
        	:param V:
        	:type V: gp_Vec
        	:rtype: None
        :param Base:
        	:type Base: TopoDS_Shape
        	:param V:
        	:type V: gp_Vec
        	:param Vectra:
        	:type Vectra: gp_Vec
        	:rtype: None
        """
        _LocOpe.LocOpe_Prism_swiginit(self, _LocOpe.new_LocOpe_Prism(*args))

    def Perform(self, *args) -> "void":
        """
        :param Base:
        	:type Base: TopoDS_Shape
        	:param V:
        	:type V: gp_Vec
        	:rtype: None
        :param Base:
        	:type Base: TopoDS_Shape
        	:param V:
        	:type V: gp_Vec
        	:param Vtra:
        	:type Vtra: gp_Vec
        	:rtype: None
        """
        return _LocOpe.LocOpe_Prism_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_Prism_Shape(self, *args)


    def Shapes(self, *args) -> "TopTools_ListOfShape const &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_Prism_Shapes(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_Prism
LocOpe_Prism.BarycCurve = new_instancemethod(_LocOpe.LocOpe_Prism_BarycCurve, None, LocOpe_Prism)
LocOpe_Prism.Curves = new_instancemethod(_LocOpe.LocOpe_Prism_Curves, None, LocOpe_Prism)
LocOpe_Prism.FirstShape = new_instancemethod(_LocOpe.LocOpe_Prism_FirstShape, None, LocOpe_Prism)
LocOpe_Prism.LastShape = new_instancemethod(_LocOpe.LocOpe_Prism_LastShape, None, LocOpe_Prism)
LocOpe_Prism.Perform = new_instancemethod(_LocOpe.LocOpe_Prism_Perform, None, LocOpe_Prism)
LocOpe_Prism.Shape = new_instancemethod(_LocOpe.LocOpe_Prism_Shape, None, LocOpe_Prism)
LocOpe_Prism.Shapes = new_instancemethod(_LocOpe.LocOpe_Prism_Shapes, None, LocOpe_Prism)
LocOpe_Prism_swigregister = _LocOpe.LocOpe_Prism_swigregister
LocOpe_Prism_swigregister(LocOpe_Prism)

class LocOpe_SplitDrafts(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(self, *args) -> "void":
        """
        * Initializes the algoritm with the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _LocOpe.LocOpe_SplitDrafts_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns <Standard_True> if the modification has been succesfully performed.
        	:rtype: bool
        """
        return _LocOpe.LocOpe_SplitDrafts_IsDone(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Creates the algoritm on the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _LocOpe.LocOpe_SplitDrafts_swiginit(self, _LocOpe.new_LocOpe_SplitDrafts(*args))

    def OriginalShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _LocOpe.LocOpe_SplitDrafts_OriginalShape(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Splits the face <F> of the former given shape with the wire <W>. The wire is assumed to lie on the face. Puts a draft angle on both parts of the wire. <Extractg>, <Nplg>, <Angleg> define the arguments for the left part of the wire. <Extractd>, <Npld>, <Angled> define the arguments for the right part of the wire. The draft angle is measured with the direction <Extract>. <Npl> defines the neutral plane (points belonging to the neutral plane are not modified). <Angle> is the value of the draft angle. If <ModifyLeft> is set to <Standard_False>, no draft angle is applied to the left part of the wire. If <ModifyRight> is set to <Standard_False>,no draft angle is applied to the right part of the wire.
        	:param F:
        	:type F: TopoDS_Face
        	:param W:
        	:type W: TopoDS_Wire
        	:param Extractg:
        	:type Extractg: gp_Dir
        	:param NPlg:
        	:type NPlg: gp_Pln
        	:param Angleg:
        	:type Angleg: float
        	:param Extractd:
        	:type Extractd: gp_Dir
        	:param NPld:
        	:type NPld: gp_Pln
        	:param Angled:
        	:type Angled: float
        	:param ModifyLeft: default value is Standard_True
        	:type ModifyLeft: bool
        	:param ModifyRight: default value is Standard_True
        	:type ModifyRight: bool
        	:rtype: None
        * Splits the face <F> of the former given shape with the wire <W>. The wire is assumed to lie on the face. Puts a draft angle on the left part of the wire. The draft angle is measured with the direction <Extract>. <Npl> defines the neutral plane (points belonging to the neutral plane are not modified). <Angle> is the value of the draft angle.
        	:param F:
        	:type F: TopoDS_Face
        	:param W:
        	:type W: TopoDS_Wire
        	:param Extract:
        	:type Extract: gp_Dir
        	:param NPl:
        	:type NPl: gp_Pln
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        """
        return _LocOpe.LocOpe_SplitDrafts_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the modified shape.
        	:rtype: TopoDS_Shape
        """
        return _LocOpe.LocOpe_SplitDrafts_Shape(self, *args)


    def ShapesFromShape(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Manages the descendant shapes.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_SplitDrafts_ShapesFromShape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_SplitDrafts
LocOpe_SplitDrafts.Init = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_Init, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts.IsDone = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_IsDone, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts.OriginalShape = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_OriginalShape, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts.Perform = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_Perform, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts.Shape = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_Shape, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts.ShapesFromShape = new_instancemethod(_LocOpe.LocOpe_SplitDrafts_ShapesFromShape, None, LocOpe_SplitDrafts)
LocOpe_SplitDrafts_swigregister = _LocOpe.LocOpe_SplitDrafts_swigregister
LocOpe_SplitDrafts_swigregister(LocOpe_SplitDrafts)

class LocOpe_SplitShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Standard_Boolean":
        """
        * Adds the vertex <V> on the edge <E>, at parameter <P>.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P:
        	:type P: float
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        * Adds the wire <W> on the face <F>.
        	:param W:
        	:type W: TopoDS_Wire
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        * Adds the list of wires <Lwires> on the face <F>.
        	:param Lwires:
        	:type Lwires: TopTools_ListOfShape
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _LocOpe.LocOpe_SplitShape_Add(self, *args)


    def CanSplit(self, *args) -> "Standard_Boolean":
        """
        * Tests if it is possible to split the edge <E>.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _LocOpe.LocOpe_SplitShape_CanSplit(self, *args)


    def DescendantShapes(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of descendant shapes of <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_SplitShape_DescendantShapes(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes the process on the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _LocOpe.LocOpe_SplitShape_Init(self, *args)


    def LeftOf(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the 'left' part defined by the wire <W> on the face <F>. The returned list of shape is in fact a list of faces. The face <F> is considered with its topological orientation in the original shape. <W> is considered with its orientation.
        	:param W:
        	:type W: TopoDS_Wire
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_SplitShape_LeftOf(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Creates the process with the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _LocOpe.LocOpe_SplitShape_swiginit(self, _LocOpe.new_LocOpe_SplitShape(*args))

    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the 'original' shape.
        	:rtype: TopoDS_Shape
        """
        return _LocOpe.LocOpe_SplitShape_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_SplitShape
LocOpe_SplitShape.Add = new_instancemethod(_LocOpe.LocOpe_SplitShape_Add, None, LocOpe_SplitShape)
LocOpe_SplitShape.CanSplit = new_instancemethod(_LocOpe.LocOpe_SplitShape_CanSplit, None, LocOpe_SplitShape)
LocOpe_SplitShape.DescendantShapes = new_instancemethod(_LocOpe.LocOpe_SplitShape_DescendantShapes, None, LocOpe_SplitShape)
LocOpe_SplitShape.Init = new_instancemethod(_LocOpe.LocOpe_SplitShape_Init, None, LocOpe_SplitShape)
LocOpe_SplitShape.LeftOf = new_instancemethod(_LocOpe.LocOpe_SplitShape_LeftOf, None, LocOpe_SplitShape)
LocOpe_SplitShape.Shape = new_instancemethod(_LocOpe.LocOpe_SplitShape_Shape, None, LocOpe_SplitShape)
LocOpe_SplitShape_swigregister = _LocOpe.LocOpe_SplitShape_swigregister
LocOpe_SplitShape_swigregister(LocOpe_SplitShape)

class LocOpe_Spliter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DescendantShapes(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of descendant shapes of <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_Spliter_DescendantShapes(self, *args)


    def DirectLeft(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the faces which are the left of the projected wires and which are
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_Spliter_DirectLeft(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes the algorithm on the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _LocOpe.LocOpe_Spliter_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _LocOpe.LocOpe_Spliter_IsDone(self, *args)


    def Left(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the faces of the 'left' part on the shape. (It is build from DirectLeft, with the faces connected to this set, and so on...).
        	:rtype: TopTools_ListOfShape
        """
        return _LocOpe.LocOpe_Spliter_Left(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Creates the algorithm on the shape <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _LocOpe.LocOpe_Spliter_swiginit(self, _LocOpe.new_LocOpe_Spliter(*args))

    def Perform(self, *args) -> "void":
        """
        :param PW:
        	:type PW: LocOpe_WiresOnShape
        	:rtype: None
        """
        return _LocOpe.LocOpe_Spliter_Perform(self, *args)


    def ResultingShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the new shape
        	:rtype: TopoDS_Shape
        """
        return _LocOpe.LocOpe_Spliter_ResultingShape(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the initial shape
        	:rtype: TopoDS_Shape
        """
        return _LocOpe.LocOpe_Spliter_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_Spliter
LocOpe_Spliter.DescendantShapes = new_instancemethod(_LocOpe.LocOpe_Spliter_DescendantShapes, None, LocOpe_Spliter)
LocOpe_Spliter.DirectLeft = new_instancemethod(_LocOpe.LocOpe_Spliter_DirectLeft, None, LocOpe_Spliter)
LocOpe_Spliter.Init = new_instancemethod(_LocOpe.LocOpe_Spliter_Init, None, LocOpe_Spliter)
LocOpe_Spliter.IsDone = new_instancemethod(_LocOpe.LocOpe_Spliter_IsDone, None, LocOpe_Spliter)
LocOpe_Spliter.Left = new_instancemethod(_LocOpe.LocOpe_Spliter_Left, None, LocOpe_Spliter)
LocOpe_Spliter.Perform = new_instancemethod(_LocOpe.LocOpe_Spliter_Perform, None, LocOpe_Spliter)
LocOpe_Spliter.ResultingShape = new_instancemethod(_LocOpe.LocOpe_Spliter_ResultingShape, None, LocOpe_Spliter)
LocOpe_Spliter.Shape = new_instancemethod(_LocOpe.LocOpe_Spliter_Shape, None, LocOpe_Spliter)
LocOpe_Spliter_swigregister = _LocOpe.LocOpe_Spliter_swigregister
LocOpe_Spliter_swigregister(LocOpe_Spliter)

class LocOpe_WiresOnShape(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Standard_Boolean":
        """
        * Add splitting edges or wires for whole initial shape withot additional specification edge->face, edge->edge This method puts edge on the corresponding faces from initial shape
        	:param theEdges:
        	:type theEdges: TopTools_SequenceOfShape
        	:rtype: bool
        """
        return _LocOpe.LocOpe_WiresOnShape_Add(self, *args)


    def Bind(self, *args) -> "void":
        """
        :param W:
        	:type W: TopoDS_Wire
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        :param Comp:
        	:type Comp: TopoDS_Compound
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        :param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        :param EfromW:
        	:type EfromW: TopoDS_Edge
        	:param EonFace:
        	:type EonFace: TopoDS_Edge
        	:rtype: None
        """
        return _LocOpe.LocOpe_WiresOnShape_Bind(self, *args)


    def BindAll(self, *args) -> "void":
        """:rtype: None"""
        return _LocOpe.LocOpe_WiresOnShape_BindAll(self, *args)


    def Edge(self, *args) -> "TopoDS_Edge":
        """:rtype: TopoDS_Edge"""
        return _LocOpe.LocOpe_WiresOnShape_Edge(self, *args)


    def Init(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _LocOpe.LocOpe_WiresOnShape_Init(self, *args)


    def InitEdgeIterator(self, *args) -> "void":
        """:rtype: None"""
        return _LocOpe.LocOpe_WiresOnShape_InitEdgeIterator(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _LocOpe.LocOpe_WiresOnShape_IsDone(self, *args)


    def IsFaceWithSection(self, *args) -> "Standard_Boolean":
        """
        * tells is the face to be split by section or not
        	:param aFace:
        	:type aFace: TopoDS_Shape
        	:rtype: bool
        """
        return _LocOpe.LocOpe_WiresOnShape_IsFaceWithSection(self, *args)


    def __init__(self, *args):
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _LocOpe.LocOpe_WiresOnShape_swiginit(self, _LocOpe.new_LocOpe_WiresOnShape(*args))

    def MoreEdge(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _LocOpe.LocOpe_WiresOnShape_MoreEdge(self, *args)


    def NextEdge(self, *args) -> "void":
        """:rtype: None"""
        return _LocOpe.LocOpe_WiresOnShape_NextEdge(self, *args)


    def OnEdge(self, *args) -> "Standard_Boolean":
        """
        * If the current edge is projected on an edge, returns <Standard_True> and sets the value of <E>. Otherwise, returns <Standard_False>.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        * If the vertex <V> lies on an edge of the original shape, returns <Standard_True> and sets the concerned edge in <E>, and the parameter on the edge in <P>. Else returns <Standard_False>.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: float
        	:rtype: bool
        * If the vertex <V> lies on an edge of the original shape, returns <Standard_True> and sets the concerned edge in <E>, and the parameter on the edge in <P>. Else returns <Standard_False>.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param EdgeFrom:
        	:type EdgeFrom: TopoDS_Edge
        	:param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: float
        	:rtype: bool
        """
        return _LocOpe.LocOpe_WiresOnShape_OnEdge(self, *args)


    def OnFace(self, *args) -> "TopoDS_Face":
        """
        * Returns the face of the shape on which the current edge is projected.
        	:rtype: TopoDS_Face
        """
        return _LocOpe.LocOpe_WiresOnShape_OnFace(self, *args)


    def OnVertex(self, *args) -> "Standard_Boolean":
        """
        :param Vwire:
        	:type Vwire: TopoDS_Vertex
        	:param Vshape:
        	:type Vshape: TopoDS_Vertex
        	:rtype: bool
        """
        return _LocOpe.LocOpe_WiresOnShape_OnVertex(self, *args)


    def SetCheckInterior(self, *args) -> "void":
        """
        * Set the flag of check internal intersections default value is True (to check)
        	:param ToCheckInterior:
        	:type ToCheckInterior: bool
        	:rtype: None
        """
        return _LocOpe.LocOpe_WiresOnShape_SetCheckInterior(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_LocOpe_WiresOnShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_WiresOnShape
LocOpe_WiresOnShape.Add = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_Add, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.Bind = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_Bind, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.BindAll = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_BindAll, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.Edge = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_Edge, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.Init = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_Init, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.InitEdgeIterator = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_InitEdgeIterator, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.IsDone = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_IsDone, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.IsFaceWithSection = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_IsFaceWithSection, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.MoreEdge = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_MoreEdge, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.NextEdge = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_NextEdge, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.OnEdge = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_OnEdge, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.OnFace = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_OnFace, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.OnVertex = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_OnVertex, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape.SetCheckInterior = new_instancemethod(_LocOpe.LocOpe_WiresOnShape_SetCheckInterior, None, LocOpe_WiresOnShape)
LocOpe_WiresOnShape_swigregister = _LocOpe.LocOpe_WiresOnShape_swigregister
LocOpe_WiresOnShape_swigregister(LocOpe_WiresOnShape)

class LocOpe_GluedShape(LocOpe_GeneratedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Generated(self, *args) -> "TopoDS_Face":
        """
        * Returns the edge created by the vertex <V>. If none, must return a null shape.
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: TopoDS_Edge
        * Returns the face created by the edge <E>. If none, must return a null shape.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: TopoDS_Face
        """
        return _LocOpe.LocOpe_GluedShape_Generated(self, *args)


    def GlueOnFace(self, *args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _LocOpe.LocOpe_GluedShape_GlueOnFace(self, *args)


    def Init(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _LocOpe.LocOpe_GluedShape_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _LocOpe.LocOpe_GluedShape_swiginit(self, _LocOpe.new_LocOpe_GluedShape(*args))


    @staticmethod
    def DownCast(t):
      return Handle_LocOpe_GluedShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _LocOpe.delete_LocOpe_GluedShape
LocOpe_GluedShape.Generated = new_instancemethod(_LocOpe.LocOpe_GluedShape_Generated, None, LocOpe_GluedShape)
LocOpe_GluedShape.GlueOnFace = new_instancemethod(_LocOpe.LocOpe_GluedShape_GlueOnFace, None, LocOpe_GluedShape)
LocOpe_GluedShape.Init = new_instancemethod(_LocOpe.LocOpe_GluedShape_Init, None, LocOpe_GluedShape)
LocOpe_GluedShape_swigregister = _LocOpe.LocOpe_GluedShape_swigregister
LocOpe_GluedShape_swigregister(LocOpe_GluedShape)



