# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
MAT2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_mat2d.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _MAT2d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_MAT2d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_MAT2d')
    _MAT2d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MAT2d', [dirname(__file__)])
        except ImportError:
            import _MAT2d
            return _MAT2d
        try:
            _mod = imp.load_module('_MAT2d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _MAT2d = swig_import_helper()
    del swig_import_helper
else:
    import _MAT2d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MAT2d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_MAT2d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_MAT2d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_MAT2d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_MAT2d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_MAT2d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_MAT2d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_MAT2d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_MAT2d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_MAT2d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_MAT2d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_MAT2d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_MAT2d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_MAT2d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_MAT2d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_MAT2d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_MAT2d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _MAT2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _MAT2d.process_exception(error, method_name, class_name)
process_exception = _MAT2d.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.GeomAbs
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.TColgp
import OCC.Core.MAT
import OCC.Core.Bisector
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.IntRes2d

def Handle_MAT2d_Circuit_Create() -> "opencascade::handle< MAT2d_Circuit >":
    return _MAT2d.Handle_MAT2d_Circuit_Create()
Handle_MAT2d_Circuit_Create = _MAT2d.Handle_MAT2d_Circuit_Create

def Handle_MAT2d_Circuit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< MAT2d_Circuit >":
    return _MAT2d.Handle_MAT2d_Circuit_DownCast(t)
Handle_MAT2d_Circuit_DownCast = _MAT2d.Handle_MAT2d_Circuit_DownCast

def Handle_MAT2d_Circuit_IsNull(t: 'opencascade::handle< MAT2d_Circuit > const &') -> "bool":
    return _MAT2d.Handle_MAT2d_Circuit_IsNull(t)
Handle_MAT2d_Circuit_IsNull = _MAT2d.Handle_MAT2d_Circuit_IsNull

def Handle_MAT2d_Connexion_Create() -> "opencascade::handle< MAT2d_Connexion >":
    return _MAT2d.Handle_MAT2d_Connexion_Create()
Handle_MAT2d_Connexion_Create = _MAT2d.Handle_MAT2d_Connexion_Create

def Handle_MAT2d_Connexion_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< MAT2d_Connexion >":
    return _MAT2d.Handle_MAT2d_Connexion_DownCast(t)
Handle_MAT2d_Connexion_DownCast = _MAT2d.Handle_MAT2d_Connexion_DownCast

def Handle_MAT2d_Connexion_IsNull(t: 'opencascade::handle< MAT2d_Connexion > const &') -> "bool":
    return _MAT2d.Handle_MAT2d_Connexion_IsNull(t)
Handle_MAT2d_Connexion_IsNull = _MAT2d.Handle_MAT2d_Connexion_IsNull
class MAT2d_DataMapOfIntegerSequenceOfConnexion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerSequenceOfConnexion(*args))
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfIntegerSequenceOfConnexion
MAT2d_DataMapOfIntegerSequenceOfConnexion.begin = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_begin, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.end = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_end, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.cbegin = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_cbegin, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.cend = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_cend, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Exchange = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Exchange, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Assign, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Set, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ReSize, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Bind, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Bound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Bound, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_IsBound, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_UnBind, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Seek = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Seek, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Find, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.ChangeSeek = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ChangeSeek, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ChangeFind, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.__call__ = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion___call__, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Clear, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Size = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Size, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion.Keys = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Keys, None, MAT2d_DataMapOfIntegerSequenceOfConnexion)
MAT2d_DataMapOfIntegerSequenceOfConnexion_swigregister = _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_swigregister
MAT2d_DataMapOfIntegerSequenceOfConnexion_swigregister(MAT2d_DataMapOfIntegerSequenceOfConnexion)

class MAT2d_DataMapOfIntegerConnexion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfIntegerConnexion_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerConnexion(*args))
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfIntegerConnexion
MAT2d_DataMapOfIntegerConnexion.begin = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_begin, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.end = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_end, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.cbegin = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_cbegin, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.cend = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_cend, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Exchange = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Exchange, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Assign, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Set, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_ReSize, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Bind, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Bound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Bound, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_IsBound, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_UnBind, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Seek = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Seek, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Find, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.ChangeSeek = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_ChangeSeek, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_ChangeFind, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.__call__ = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion___call__, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Clear, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Size = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Size, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion.Keys = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Keys, None, MAT2d_DataMapOfIntegerConnexion)
MAT2d_DataMapOfIntegerConnexion_swigregister = _MAT2d.MAT2d_DataMapOfIntegerConnexion_swigregister
MAT2d_DataMapOfIntegerConnexion_swigregister(MAT2d_DataMapOfIntegerConnexion)

class MAT2d_DataMapOfIntegerPnt2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfIntegerPnt2d_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerPnt2d(*args))
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfIntegerPnt2d
MAT2d_DataMapOfIntegerPnt2d.begin = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_begin, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.end = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_end, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.cbegin = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_cbegin, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.cend = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_cend, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Exchange = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Exchange, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Assign, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Set, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_ReSize, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Bind, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Bound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Bound, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_IsBound, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_UnBind, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Seek = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Seek, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Find, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.ChangeSeek = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_ChangeSeek, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_ChangeFind, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.__call__ = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d___call__, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Clear, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Size = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Size, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d.Keys = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Keys, None, MAT2d_DataMapOfIntegerPnt2d)
MAT2d_DataMapOfIntegerPnt2d_swigregister = _MAT2d.MAT2d_DataMapOfIntegerPnt2d_swigregister
MAT2d_DataMapOfIntegerPnt2d_swigregister(MAT2d_DataMapOfIntegerPnt2d)

class MAT2d_DataMapOfIntegerVec2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfIntegerVec2d_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerVec2d(*args))
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfIntegerVec2d
MAT2d_DataMapOfIntegerVec2d.begin = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_begin, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.end = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_end, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.cbegin = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_cbegin, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.cend = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_cend, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Exchange = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Exchange, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Assign, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Set, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_ReSize, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Bind, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Bound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Bound, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_IsBound, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_UnBind, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Seek = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Seek, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Find, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.ChangeSeek = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_ChangeSeek, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_ChangeFind, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.__call__ = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d___call__, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Clear, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Size = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Size, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d.Keys = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Keys, None, MAT2d_DataMapOfIntegerVec2d)
MAT2d_DataMapOfIntegerVec2d_swigregister = _MAT2d.MAT2d_DataMapOfIntegerVec2d_swigregister
MAT2d_DataMapOfIntegerVec2d_swigregister(MAT2d_DataMapOfIntegerVec2d)

class MAT2d_DataMapOfIntegerBisec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfIntegerBisec_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerBisec(*args))
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfIntegerBisec
MAT2d_DataMapOfIntegerBisec.begin = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_begin, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.end = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_end, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.cbegin = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_cbegin, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.cend = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_cend, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Exchange = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Exchange, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Assign, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Set, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_ReSize, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Bind, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Bound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Bound, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_IsBound, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_UnBind, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Seek = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Seek, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Find, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.ChangeSeek = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_ChangeSeek, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_ChangeFind, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.__call__ = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec___call__, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Clear, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Size = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Size, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec.Keys = new_instancemethod(_MAT2d.MAT2d_DataMapOfIntegerBisec_Keys, None, MAT2d_DataMapOfIntegerBisec)
MAT2d_DataMapOfIntegerBisec_swigregister = _MAT2d.MAT2d_DataMapOfIntegerBisec_swigregister
MAT2d_DataMapOfIntegerBisec_swigregister(MAT2d_DataMapOfIntegerBisec)

class MAT2d_Array2OfConnexion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_Array2OfConnexion_swiginit(self, _MAT2d.new_MAT2d_Array2OfConnexion(*args))
    __swig_destroy__ = _MAT2d.delete_MAT2d_Array2OfConnexion
MAT2d_Array2OfConnexion.Init = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Init, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.Size = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Size, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.Length = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Length, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.NbRows = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_NbRows, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.NbColumns = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_NbColumns, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.RowLength = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_RowLength, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.ColLength = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_ColLength, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.LowerRow = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_LowerRow, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.UpperRow = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_UpperRow, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.LowerCol = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_LowerCol, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.UpperCol = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_UpperCol, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.IsDeletable = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_IsDeletable, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.Assign = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Assign, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.Move = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Move, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.Set = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Set, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.Value = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Value, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.ChangeValue = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_ChangeValue, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.__call__ = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion___call__, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.SetValue = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_SetValue, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion.Resize = new_instancemethod(_MAT2d.MAT2d_Array2OfConnexion_Resize, None, MAT2d_Array2OfConnexion)
MAT2d_Array2OfConnexion_swigregister = _MAT2d.MAT2d_Array2OfConnexion_swigregister
MAT2d_Array2OfConnexion_swigregister(MAT2d_Array2OfConnexion)

class MAT2d_SequenceOfSequenceOfCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_SequenceOfSequenceOfCurve_swiginit(self, _MAT2d.new_MAT2d_SequenceOfSequenceOfCurve(*args))
    delNode = staticmethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_delNode)
    __swig_destroy__ = _MAT2d.delete_MAT2d_SequenceOfSequenceOfCurve
MAT2d_SequenceOfSequenceOfCurve.begin = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_begin, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.end = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_end, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.cbegin = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_cbegin, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.cend = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_cend, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Size = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Size, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Length = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Length, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Lower = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Lower, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Upper = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Upper, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.IsEmpty = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_IsEmpty, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Reverse = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Reverse, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Exchange = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Exchange, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Clear = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Clear, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Assign = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Assign, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Set = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Set, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Remove = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Remove, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Append = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Append, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Prepend = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Prepend, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.InsertBefore = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_InsertBefore, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.InsertAfter = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_InsertAfter, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Split = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Split, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.First = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_First, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.ChangeFirst = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_ChangeFirst, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Last = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Last, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.ChangeLast = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_ChangeLast, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.Value = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Value, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.ChangeValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_ChangeValue, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.__call__ = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve___call__, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve.SetValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_SetValue, None, MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve_swigregister = _MAT2d.MAT2d_SequenceOfSequenceOfCurve_swigregister
MAT2d_SequenceOfSequenceOfCurve_swigregister(MAT2d_SequenceOfSequenceOfCurve)

def MAT2d_SequenceOfSequenceOfCurve_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _MAT2d.MAT2d_SequenceOfSequenceOfCurve_delNode(theNode, theAl)
MAT2d_SequenceOfSequenceOfCurve_delNode = _MAT2d.MAT2d_SequenceOfSequenceOfCurve_delNode

class MAT2d_SequenceOfSequenceOfGeometry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_swiginit(self, _MAT2d.new_MAT2d_SequenceOfSequenceOfGeometry(*args))
    delNode = staticmethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_delNode)
    __swig_destroy__ = _MAT2d.delete_MAT2d_SequenceOfSequenceOfGeometry
MAT2d_SequenceOfSequenceOfGeometry.begin = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_begin, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.end = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_end, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.cbegin = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_cbegin, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.cend = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_cend, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Size = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Size, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Length = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Length, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Lower = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Lower, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Upper = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Upper, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.IsEmpty = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_IsEmpty, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Reverse = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Reverse, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Exchange = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Exchange, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Clear = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Clear, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Assign = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Assign, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Set = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Set, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Remove = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Remove, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Append = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Append, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Prepend = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Prepend, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.InsertBefore = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_InsertBefore, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.InsertAfter = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_InsertAfter, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Split = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Split, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.First = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_First, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.ChangeFirst = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_ChangeFirst, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Last = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Last, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.ChangeLast = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_ChangeLast, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.Value = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Value, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.ChangeValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_ChangeValue, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.__call__ = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry___call__, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry.SetValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_SetValue, None, MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry_swigregister = _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_swigregister
MAT2d_SequenceOfSequenceOfGeometry_swigregister(MAT2d_SequenceOfSequenceOfGeometry)

def MAT2d_SequenceOfSequenceOfGeometry_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_delNode(theNode, theAl)
MAT2d_SequenceOfSequenceOfGeometry_delNode = _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_delNode

class MAT2d_SequenceOfConnexion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_SequenceOfConnexion_swiginit(self, _MAT2d.new_MAT2d_SequenceOfConnexion(*args))
    delNode = staticmethod(_MAT2d.MAT2d_SequenceOfConnexion_delNode)
    __swig_destroy__ = _MAT2d.delete_MAT2d_SequenceOfConnexion
MAT2d_SequenceOfConnexion.begin = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_begin, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.end = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_end, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.cbegin = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_cbegin, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.cend = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_cend, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Size = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Size, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Length = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Length, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Lower = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Lower, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Upper = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Upper, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.IsEmpty = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_IsEmpty, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Reverse = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Reverse, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Exchange = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Exchange, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Clear = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Clear, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Assign = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Assign, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Set = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Set, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Remove = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Remove, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Append = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Append, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Prepend = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Prepend, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.InsertBefore = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_InsertBefore, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.InsertAfter = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_InsertAfter, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Split = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Split, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.First = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_First, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.ChangeFirst = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_ChangeFirst, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Last = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Last, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.ChangeLast = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_ChangeLast, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.Value = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_Value, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.ChangeValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_ChangeValue, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.__call__ = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion___call__, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion.SetValue = new_instancemethod(_MAT2d.MAT2d_SequenceOfConnexion_SetValue, None, MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion_swigregister = _MAT2d.MAT2d_SequenceOfConnexion_swigregister
MAT2d_SequenceOfConnexion_swigregister(MAT2d_SequenceOfConnexion)

def MAT2d_SequenceOfConnexion_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _MAT2d.MAT2d_SequenceOfConnexion_delNode(theNode, theAl)
MAT2d_SequenceOfConnexion_delNode = _MAT2d.MAT2d_SequenceOfConnexion_delNode

class MAT2d_DataMapOfBiIntSequenceOfInteger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_swiginit(self, _MAT2d.new_MAT2d_DataMapOfBiIntSequenceOfInteger(*args))
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfBiIntSequenceOfInteger
MAT2d_DataMapOfBiIntSequenceOfInteger.begin = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_begin, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.end = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_end, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.cbegin = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_cbegin, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.cend = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_cend, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Exchange = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Exchange, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Assign, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Set, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ReSize, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Bind, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Bound = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Bound, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_IsBound, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_UnBind, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Seek = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Seek, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Find, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.ChangeSeek = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ChangeSeek, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ChangeFind, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.__call__ = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger___call__, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Clear, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger.Size = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Size, None, MAT2d_DataMapOfBiIntSequenceOfInteger)
MAT2d_DataMapOfBiIntSequenceOfInteger_swigregister = _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_swigregister
MAT2d_DataMapOfBiIntSequenceOfInteger_swigregister(MAT2d_DataMapOfBiIntSequenceOfInteger)

class MAT2d_DataMapOfBiIntInteger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfBiIntInteger_swiginit(self, _MAT2d.new_MAT2d_DataMapOfBiIntInteger(*args))
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfBiIntInteger
MAT2d_DataMapOfBiIntInteger.begin = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_begin, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.end = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_end, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.cbegin = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_cbegin, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.cend = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_cend, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Exchange = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Exchange, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Assign = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Assign, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Set = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Set, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.ReSize = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_ReSize, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Bind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Bind, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Bound = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Bound, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.IsBound = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_IsBound, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.UnBind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_UnBind, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Seek = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Seek, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Find = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Find, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.ChangeSeek = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_ChangeSeek, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.ChangeFind = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_ChangeFind, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.__call__ = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger___call__, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Clear = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Clear, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger.Size = new_instancemethod(_MAT2d.MAT2d_DataMapOfBiIntInteger_Size, None, MAT2d_DataMapOfBiIntInteger)
MAT2d_DataMapOfBiIntInteger_swigregister = _MAT2d.MAT2d_DataMapOfBiIntInteger_swigregister
MAT2d_DataMapOfBiIntInteger_swigregister(MAT2d_DataMapOfBiIntInteger)

class MAT2d_BiInt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstIndex(self, *args) -> "void":
        """
        :rtype: int
        :param I1:
        	:type I1: int
        	:rtype: None
        """
        return _MAT2d.MAT2d_BiInt_FirstIndex(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        :param B:
        	:type B: MAT2d_BiInt
        	:rtype: bool
        """
        return _MAT2d.MAT2d_BiInt_IsEqual(self, *args)


    def __init__(self, *args):
        """
        :param I1:
        	:type I1: int
        	:param I2:
        	:type I2: int
        	:rtype: None
        """
        _MAT2d.MAT2d_BiInt_swiginit(self, _MAT2d.new_MAT2d_BiInt(*args))

    def SecondIndex(self, *args) -> "void":
        """
        :rtype: int
        :param I2:
        	:type I2: int
        	:rtype: None
        """
        return _MAT2d.MAT2d_BiInt_SecondIndex(self, *args)


    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_BiInt
MAT2d_BiInt.FirstIndex = new_instancemethod(_MAT2d.MAT2d_BiInt_FirstIndex, None, MAT2d_BiInt)
MAT2d_BiInt.IsEqual = new_instancemethod(_MAT2d.MAT2d_BiInt_IsEqual, None, MAT2d_BiInt)
MAT2d_BiInt.SecondIndex = new_instancemethod(_MAT2d.MAT2d_BiInt_SecondIndex, None, MAT2d_BiInt)
MAT2d_BiInt.__eq_wrapper__ = new_instancemethod(_MAT2d.MAT2d_BiInt___eq_wrapper__, None, MAT2d_BiInt)
MAT2d_BiInt_swigregister = _MAT2d.MAT2d_BiInt_swigregister
MAT2d_BiInt_swigregister(MAT2d_BiInt)

class MAT2d_Circuit(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Connexion(self, *args) -> "opencascade::handle< MAT2d_Connexion >":
        """
        * Returns the Connexion on the item <Index> in me.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<MAT2d_Connexion>
        """
        return _MAT2d.MAT2d_Circuit_Connexion(self, *args)


    def ConnexionOn(self, *args) -> "Standard_Boolean":
        """
        * Returns <True> is there is a connexion on the item <Index> in <self>.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _MAT2d.MAT2d_Circuit_ConnexionOn(self, *args)


    def LineLength(self, *args) -> "Standard_Integer":
        """
        * Returns the number of items on the line <IndexLine>.
        	:param IndexLine:
        	:type IndexLine: int
        	:rtype: int
        """
        return _MAT2d.MAT2d_Circuit_LineLength(self, *args)


    def __init__(self, *args):
        """
        :param aJoinType: default value is GeomAbs_Arc
        	:type aJoinType: GeomAbs_JoinType
        	:param IsOpenResult: default value is Standard_False
        	:type IsOpenResult: bool
        	:rtype: None
        """
        _MAT2d.MAT2d_Circuit_swiginit(self, _MAT2d.new_MAT2d_Circuit(*args))

    def NumberOfItems(self, *args) -> "Standard_Integer":
        """
        * Returns the Number of Items .
        	:rtype: int
        """
        return _MAT2d.MAT2d_Circuit_NumberOfItems(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param aFigure:
        	:type aFigure: MAT2d_SequenceOfSequenceOfGeometry
        	:param IsClosed:
        	:type IsClosed: TColStd_SequenceOfBoolean
        	:param IndRefLine:
        	:type IndRefLine: int
        	:param Trigo:
        	:type Trigo: bool
        	:rtype: None
        """
        return _MAT2d.MAT2d_Circuit_Perform(self, *args)


    def RefToEqui(self, *args) -> "TColStd_SequenceOfInteger const &":
        """
        * Returns the set of index of the items in <self>corresponding to the curve <IndCurve> on the line <IndLine> from the initial figure.
        	:param IndLine:
        	:type IndLine: int
        	:param IndCurve:
        	:type IndCurve: int
        	:rtype: TColStd_SequenceOfInteger
        """
        return _MAT2d.MAT2d_Circuit_RefToEqui(self, *args)


    def Value(self, *args) -> "opencascade::handle< Geom2d_Geometry >":
        """
        * Returns the item at position <Index> in <self>.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<Geom2d_Geometry>
        """
        return _MAT2d.MAT2d_Circuit_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_MAT2d_Circuit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_Circuit
MAT2d_Circuit.Connexion = new_instancemethod(_MAT2d.MAT2d_Circuit_Connexion, None, MAT2d_Circuit)
MAT2d_Circuit.ConnexionOn = new_instancemethod(_MAT2d.MAT2d_Circuit_ConnexionOn, None, MAT2d_Circuit)
MAT2d_Circuit.LineLength = new_instancemethod(_MAT2d.MAT2d_Circuit_LineLength, None, MAT2d_Circuit)
MAT2d_Circuit.NumberOfItems = new_instancemethod(_MAT2d.MAT2d_Circuit_NumberOfItems, None, MAT2d_Circuit)
MAT2d_Circuit.Perform = new_instancemethod(_MAT2d.MAT2d_Circuit_Perform, None, MAT2d_Circuit)
MAT2d_Circuit.RefToEqui = new_instancemethod(_MAT2d.MAT2d_Circuit_RefToEqui, None, MAT2d_Circuit)
MAT2d_Circuit.Value = new_instancemethod(_MAT2d.MAT2d_Circuit_Value, None, MAT2d_Circuit)
MAT2d_Circuit_swigregister = _MAT2d.MAT2d_Circuit_swigregister
MAT2d_Circuit_swigregister(MAT2d_Circuit)

class MAT2d_Connexion(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Distance(self, *args) -> "void":
        """
        * Returns the distance between the two points.
        	:rtype: float
        :param aDistance:
        	:type aDistance: float
        	:rtype: None
        """
        return _MAT2d.MAT2d_Connexion_Distance(self, *args)


    def Dump(self, *args) -> "void":
        """
        * Print <self>.
        	:param Deep: default value is 0
        	:type Deep: int
        	:param Offset: default value is 0
        	:type Offset: int
        	:rtype: None
        """
        return _MAT2d.MAT2d_Connexion_Dump(self, *args)


    def IndexFirstLine(self, *args) -> "void":
        """
        * Returns the Index on the first line.
        	:rtype: int
        :param anIndex:
        	:type anIndex: int
        	:rtype: None
        """
        return _MAT2d.MAT2d_Connexion_IndexFirstLine(self, *args)


    def IndexItemOnFirst(self, *args) -> "void":
        """
        * Returns the Index of the item on the first line.
        	:rtype: int
        :param anIndex:
        	:type anIndex: int
        	:rtype: None
        """
        return _MAT2d.MAT2d_Connexion_IndexItemOnFirst(self, *args)


    def IndexItemOnSecond(self, *args) -> "void":
        """
        * Returns the Index of the item on the second line.
        	:rtype: int
        :param anIndex:
        	:type anIndex: int
        	:rtype: None
        """
        return _MAT2d.MAT2d_Connexion_IndexItemOnSecond(self, *args)


    def IndexSecondLine(self, *args) -> "void":
        """
        * Returns the Index on the Second line.
        	:rtype: int
        :param anIndex:
        	:type anIndex: int
        	:rtype: None
        """
        return _MAT2d.MAT2d_Connexion_IndexSecondLine(self, *args)


    def IsAfter(self, *args) -> "Standard_Boolean":
        """
        * Returns <True> if my firstPoint is on the same line than the firstpoint of <aConnexion> and my firstpoint is after the firstpoint of <aConnexion> on the line. <aSense> = 1 if <aConnexion> is on the Left of its firstline, else <aSense> = -1.
        	:param aConnexion:
        	:type aConnexion: MAT2d_Connexion
        	:param aSense:
        	:type aSense: float
        	:rtype: bool
        """
        return _MAT2d.MAT2d_Connexion_IsAfter(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param LineA:
        	:type LineA: int
        	:param LineB:
        	:type LineB: int
        	:param ItemA:
        	:type ItemA: int
        	:param ItemB:
        	:type ItemB: int
        	:param Distance:
        	:type Distance: float
        	:param ParameterOnA:
        	:type ParameterOnA: float
        	:param ParameterOnB:
        	:type ParameterOnB: float
        	:param PointA:
        	:type PointA: gp_Pnt2d
        	:param PointB:
        	:type PointB: gp_Pnt2d
        	:rtype: None
        """
        _MAT2d.MAT2d_Connexion_swiginit(self, _MAT2d.new_MAT2d_Connexion(*args))

    def ParameterOnFirst(self, *args) -> "void":
        """
        * Returns the parameter of the point on the firstline.
        	:rtype: float
        :param aParameter:
        	:type aParameter: float
        	:rtype: None
        """
        return _MAT2d.MAT2d_Connexion_ParameterOnFirst(self, *args)


    def ParameterOnSecond(self, *args) -> "void":
        """
        * Returns the parameter of the point on the secondline.
        	:rtype: float
        :param aParameter:
        	:type aParameter: float
        	:rtype: None
        """
        return _MAT2d.MAT2d_Connexion_ParameterOnSecond(self, *args)


    def PointOnFirst(self, *args) -> "void":
        """
        * Returns the point on the firstline.
        	:rtype: gp_Pnt2d
        :param aPoint:
        	:type aPoint: gp_Pnt2d
        	:rtype: None
        """
        return _MAT2d.MAT2d_Connexion_PointOnFirst(self, *args)


    def PointOnSecond(self, *args) -> "void":
        """
        * Returns the point on the secondline.
        	:rtype: gp_Pnt2d
        :param aPoint:
        	:type aPoint: gp_Pnt2d
        	:rtype: None
        """
        return _MAT2d.MAT2d_Connexion_PointOnSecond(self, *args)


    def Reverse(self, *args) -> "opencascade::handle< MAT2d_Connexion >":
        """
        * Returns the reverse connexion of <self>. the firstpoint is the secondpoint. the secondpoint is the firstpoint.
        	:rtype: opencascade::handle<MAT2d_Connexion>
        """
        return _MAT2d.MAT2d_Connexion_Reverse(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_MAT2d_Connexion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_Connexion
MAT2d_Connexion.Distance = new_instancemethod(_MAT2d.MAT2d_Connexion_Distance, None, MAT2d_Connexion)
MAT2d_Connexion.Dump = new_instancemethod(_MAT2d.MAT2d_Connexion_Dump, None, MAT2d_Connexion)
MAT2d_Connexion.IndexFirstLine = new_instancemethod(_MAT2d.MAT2d_Connexion_IndexFirstLine, None, MAT2d_Connexion)
MAT2d_Connexion.IndexItemOnFirst = new_instancemethod(_MAT2d.MAT2d_Connexion_IndexItemOnFirst, None, MAT2d_Connexion)
MAT2d_Connexion.IndexItemOnSecond = new_instancemethod(_MAT2d.MAT2d_Connexion_IndexItemOnSecond, None, MAT2d_Connexion)
MAT2d_Connexion.IndexSecondLine = new_instancemethod(_MAT2d.MAT2d_Connexion_IndexSecondLine, None, MAT2d_Connexion)
MAT2d_Connexion.IsAfter = new_instancemethod(_MAT2d.MAT2d_Connexion_IsAfter, None, MAT2d_Connexion)
MAT2d_Connexion.ParameterOnFirst = new_instancemethod(_MAT2d.MAT2d_Connexion_ParameterOnFirst, None, MAT2d_Connexion)
MAT2d_Connexion.ParameterOnSecond = new_instancemethod(_MAT2d.MAT2d_Connexion_ParameterOnSecond, None, MAT2d_Connexion)
MAT2d_Connexion.PointOnFirst = new_instancemethod(_MAT2d.MAT2d_Connexion_PointOnFirst, None, MAT2d_Connexion)
MAT2d_Connexion.PointOnSecond = new_instancemethod(_MAT2d.MAT2d_Connexion_PointOnSecond, None, MAT2d_Connexion)
MAT2d_Connexion.Reverse = new_instancemethod(_MAT2d.MAT2d_Connexion_Reverse, None, MAT2d_Connexion)
MAT2d_Connexion_swigregister = _MAT2d.MAT2d_Connexion_swigregister
MAT2d_Connexion_swigregister(MAT2d_Connexion)

class MAT2d_MapBiIntHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        * Computes a hash code for the given key, in the range [1, theUpperBound] @param theKey the key which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param theKey:
        	:type theKey: MAT2d_BiInt
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _MAT2d.MAT2d_MapBiIntHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        :param Key1:
        	:type Key1: MAT2d_BiInt
        	:param Key2:
        	:type Key2: MAT2d_BiInt
        	:rtype: bool
        """
        return _MAT2d.MAT2d_MapBiIntHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _MAT2d.MAT2d_MapBiIntHasher_swiginit(self, _MAT2d.new_MAT2d_MapBiIntHasher())
    __swig_destroy__ = _MAT2d.delete_MAT2d_MapBiIntHasher
MAT2d_MapBiIntHasher_swigregister = _MAT2d.MAT2d_MapBiIntHasher_swigregister
MAT2d_MapBiIntHasher_swigregister(MAT2d_MapBiIntHasher)

def MAT2d_MapBiIntHasher_HashCode(*args) -> "Standard_Integer":
    """
    * Computes a hash code for the given key, in the range [1, theUpperBound] @param theKey the key which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
    	:param theKey:
    	:type theKey: MAT2d_BiInt
    	:param theUpperBound:
    	:type theUpperBound: int
    	:rtype: int
    """
    return _MAT2d.MAT2d_MapBiIntHasher_HashCode(*args)

def MAT2d_MapBiIntHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    :param Key1:
    	:type Key1: MAT2d_BiInt
    	:param Key2:
    	:type Key2: MAT2d_BiInt
    	:rtype: bool
    """
    return _MAT2d.MAT2d_MapBiIntHasher_IsEqual(*args)

class MAT2d_Mat2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def bisector(self, *args) -> "opencascade::handle< MAT_Bisector >":
        """
        * Returns the current root.
        	:rtype: opencascade::handle<MAT_Bisector>
        """
        return _MAT2d.MAT2d_Mat2d_bisector(self, *args)


    def CreateMat(self, *args) -> "void":
        """
        * Algoritm of computation of the bisecting locus.
        	:param aTool:
        	:type aTool: MAT2d_Tool2d
        	:rtype: None
        """
        return _MAT2d.MAT2d_Mat2d_CreateMat(self, *args)


    def CreateMatOpen(self, *args) -> "void":
        """
        * Algoritm of computation of the bisecting locus for open wire.
        	:param aTool:
        	:type aTool: MAT2d_Tool2d
        	:rtype: None
        """
        return _MAT2d.MAT2d_Mat2d_CreateMatOpen(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initialize an iterator on the set of the roots of the trees of bisectors.
        	:rtype: None
        """
        return _MAT2d.MAT2d_Mat2d_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns <True> if CreateMat has succeeded.
        	:rtype: bool
        """
        return _MAT2d.MAT2d_Mat2d_IsDone(self, *args)


    def __init__(self, *args):
        """
        * Empty construtor.
        	:param IsOpenResult: default value is Standard_False
        	:type IsOpenResult: bool
        	:rtype: None
        """
        _MAT2d.MAT2d_Mat2d_swiginit(self, _MAT2d.new_MAT2d_Mat2d(*args))

    def More(self, *args) -> "Standard_Boolean":
        """
        * Return False if there is no more roots.
        	:rtype: bool
        """
        return _MAT2d.MAT2d_Mat2d_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Move to the next root.
        	:rtype: None
        """
        return _MAT2d.MAT2d_Mat2d_Next(self, *args)


    def NumberOfBisectors(self, *args) -> "Standard_Integer":
        """
        * Returns the total number of bisectors.
        	:rtype: int
        """
        return _MAT2d.MAT2d_Mat2d_NumberOfBisectors(self, *args)


    def SemiInfinite(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there are semi_infinite bisectors. So there is a tree for each semi_infinte bisector.
        	:rtype: bool
        """
        return _MAT2d.MAT2d_Mat2d_SemiInfinite(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_Mat2d
MAT2d_Mat2d.bisector = new_instancemethod(_MAT2d.MAT2d_Mat2d_bisector, None, MAT2d_Mat2d)
MAT2d_Mat2d.CreateMat = new_instancemethod(_MAT2d.MAT2d_Mat2d_CreateMat, None, MAT2d_Mat2d)
MAT2d_Mat2d.CreateMatOpen = new_instancemethod(_MAT2d.MAT2d_Mat2d_CreateMatOpen, None, MAT2d_Mat2d)
MAT2d_Mat2d.Init = new_instancemethod(_MAT2d.MAT2d_Mat2d_Init, None, MAT2d_Mat2d)
MAT2d_Mat2d.IsDone = new_instancemethod(_MAT2d.MAT2d_Mat2d_IsDone, None, MAT2d_Mat2d)
MAT2d_Mat2d.More = new_instancemethod(_MAT2d.MAT2d_Mat2d_More, None, MAT2d_Mat2d)
MAT2d_Mat2d.Next = new_instancemethod(_MAT2d.MAT2d_Mat2d_Next, None, MAT2d_Mat2d)
MAT2d_Mat2d.NumberOfBisectors = new_instancemethod(_MAT2d.MAT2d_Mat2d_NumberOfBisectors, None, MAT2d_Mat2d)
MAT2d_Mat2d.SemiInfinite = new_instancemethod(_MAT2d.MAT2d_Mat2d_SemiInfinite, None, MAT2d_Mat2d)
MAT2d_Mat2d_swigregister = _MAT2d.MAT2d_Mat2d_swigregister
MAT2d_Mat2d_swigregister(MAT2d_Mat2d)

class MAT2d_MiniPath(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConnexionsFrom(self, *args) -> "MAT2d_SequenceOfConnexion &":
        """
        * Returns the connexions which start on line designed by <Index>.
        	:param Index:
        	:type Index: int
        	:rtype: MAT2d_SequenceOfConnexion
        """
        return _MAT2d.MAT2d_MiniPath_ConnexionsFrom(self, *args)


    def Father(self, *args) -> "opencascade::handle< MAT2d_Connexion >":
        """
        * Returns the connexion which ends on line designed by <Index>.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<MAT2d_Connexion>
        """
        return _MAT2d.MAT2d_MiniPath_Father(self, *args)


    def IsConnexionsFrom(self, *args) -> "Standard_Boolean":
        """
        * Returns <True> if there is one Connexion which starts on line designed by <Index>.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _MAT2d.MAT2d_MiniPath_IsConnexionsFrom(self, *args)


    def IsRoot(self, *args) -> "Standard_Boolean":
        """
        * Returns <True> if the line designed by <Index> is the root.
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _MAT2d.MAT2d_MiniPath_IsRoot(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _MAT2d.MAT2d_MiniPath_swiginit(self, _MAT2d.new_MAT2d_MiniPath(*args))

    def Path(self, *args) -> "MAT2d_SequenceOfConnexion const &":
        """
        * Returns the sequence of connexions corresponding to the path.
        	:rtype: MAT2d_SequenceOfConnexion
        """
        return _MAT2d.MAT2d_MiniPath_Path(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Computes the path to link the lines in <Figure>. the path starts on the line of index <IndStart> <Sense> = True if the Circuit turns in the trigonometric sense.
        	:param Figure:
        	:type Figure: MAT2d_SequenceOfSequenceOfGeometry
        	:param IndStart:
        	:type IndStart: int
        	:param Sense:
        	:type Sense: bool
        	:rtype: None
        """
        return _MAT2d.MAT2d_MiniPath_Perform(self, *args)


    def RunOnConnexions(self, *args) -> "void":
        """
        * Run on the set of connexions to compute the path. the path is an exploration of the tree which contains the connexions and their reverses. if the tree of connexions is A / | B E / | | C D F //! the path is A->B, B->C, C->B, B->D, D->B, B->A, A->E, E->F, F->E, E->A.
        	:rtype: None
        """
        return _MAT2d.MAT2d_MiniPath_RunOnConnexions(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_MiniPath
MAT2d_MiniPath.ConnexionsFrom = new_instancemethod(_MAT2d.MAT2d_MiniPath_ConnexionsFrom, None, MAT2d_MiniPath)
MAT2d_MiniPath.Father = new_instancemethod(_MAT2d.MAT2d_MiniPath_Father, None, MAT2d_MiniPath)
MAT2d_MiniPath.IsConnexionsFrom = new_instancemethod(_MAT2d.MAT2d_MiniPath_IsConnexionsFrom, None, MAT2d_MiniPath)
MAT2d_MiniPath.IsRoot = new_instancemethod(_MAT2d.MAT2d_MiniPath_IsRoot, None, MAT2d_MiniPath)
MAT2d_MiniPath.Path = new_instancemethod(_MAT2d.MAT2d_MiniPath_Path, None, MAT2d_MiniPath)
MAT2d_MiniPath.Perform = new_instancemethod(_MAT2d.MAT2d_MiniPath_Perform, None, MAT2d_MiniPath)
MAT2d_MiniPath.RunOnConnexions = new_instancemethod(_MAT2d.MAT2d_MiniPath_RunOnConnexions, None, MAT2d_MiniPath)
MAT2d_MiniPath_swigregister = _MAT2d.MAT2d_MiniPath_swigregister
MAT2d_MiniPath_swigregister(MAT2d_MiniPath)

class MAT2d_Tool2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BisecFusion(self, *args) -> "void":
        """
        :param Index1:
        	:type Index1: int
        	:param Index2:
        	:type Index2: int
        	:rtype: None
        """
        return _MAT2d.MAT2d_Tool2d_BisecFusion(self, *args)


    def ChangeGeomBis(self, *args) -> "Bisector_Bisec &":
        """
        * Returns the <Bisec> of index <Index> in <theGeomBisectors>.
        	:param Index:
        	:type Index: int
        	:rtype: Bisector_Bisec
        """
        return _MAT2d.MAT2d_Tool2d_ChangeGeomBis(self, *args)


    def Circuit(self, *args) -> "opencascade::handle< MAT2d_Circuit >":
        """:rtype: opencascade::handle<MAT2d_Circuit>"""
        return _MAT2d.MAT2d_Tool2d_Circuit(self, *args)


    def CreateBisector(self, *args) -> "void":
        """
        * Creates the geometric bisector defined by <abisector>.
        	:param abisector:
        	:type abisector: MAT_Bisector
        	:rtype: None
        """
        return _MAT2d.MAT2d_Tool2d_CreateBisector(self, *args)


    def Distance(self, *args) -> "Standard_Real":
        """
        * Returns the distance between the two points designed by their parameters on <abisector>.
        	:param abisector:
        	:type abisector: MAT_Bisector
        	:param param1:
        	:type param1: float
        	:param param2:
        	:type param2: float
        	:rtype: float
        """
        return _MAT2d.MAT2d_Tool2d_Distance(self, *args)


    def Dump(self, *args) -> "void":
        """
        * displays informations about the bisector defined by <bisector>.
        	:param bisector:
        	:type bisector: int
        	:param erease:
        	:type erease: int
        	:rtype: None
        """
        return _MAT2d.MAT2d_Tool2d_Dump(self, *args)


    def FirstPoint(self, *args) -> "Standard_Integer":
        """
        * Creates the point at the origin of the bisector between anitem and the previous item. dist is the distance from the FirstPoint to <anitem>. Returns the index of this point in <theGeomPnts>.
        	:param anitem:
        	:type anitem: int
        	:param dist:
        	:type dist: float
        	:rtype: int
        """
        return _MAT2d.MAT2d_Tool2d_FirstPoint(self, *args)


    def GeomBis(self, *args) -> "Bisector_Bisec const &":
        """
        * Returns the <Bisec> of index <Index> in <theGeomBisectors>.
        	:param Index:
        	:type Index: int
        	:rtype: Bisector_Bisec
        """
        return _MAT2d.MAT2d_Tool2d_GeomBis(self, *args)


    def GeomElt(self, *args) -> "opencascade::handle< Geom2d_Geometry >":
        """
        * Returns the Geometry of index <Index> in <theGeomElts>.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<Geom2d_Geometry>
        """
        return _MAT2d.MAT2d_Tool2d_GeomElt(self, *args)


    def GeomPnt(self, *args) -> "gp_Pnt2d const":
        """
        * Returns the point of index <Index> in the <theGeomPnts>.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Pnt2d
        """
        return _MAT2d.MAT2d_Tool2d_GeomPnt(self, *args)


    def GeomVec(self, *args) -> "gp_Vec2d const":
        """
        * Returns the vector of index <Index> in the <theGeomVecs>.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Vec2d
        """
        return _MAT2d.MAT2d_Tool2d_GeomVec(self, *args)


    def InitItems(self, *args) -> "void":
        """
        * InitItems cuts the line in Items. this Items are the geometrics representations of the BasicElts from MAT.
        	:param aCircuit:
        	:type aCircuit: MAT2d_Circuit
        	:rtype: None
        """
        return _MAT2d.MAT2d_Tool2d_InitItems(self, *args)


    def IntersectBisector(self, *args) -> "Standard_Real":
        """
        * Computes the point of intersection between the bisectors defined by <bisectorone> and <bisectortwo> . If this point exists, <intpnt> is its index in <theGeomPnts> and Return the distance of the point from the bisector else Return <RealLast>.
        	:param bisectorone:
        	:type bisectorone: MAT_Bisector
        	:param bisectortwo:
        	:type bisectortwo: MAT_Bisector
        	:param intpnt:
        	:type intpnt: int
        	:rtype: float
        """
        return _MAT2d.MAT2d_Tool2d_IntersectBisector(self, *args)


    def __init__(self, *args):
        """
        * Empty Constructor.
        	:rtype: None
        """
        _MAT2d.MAT2d_Tool2d_swiginit(self, _MAT2d.new_MAT2d_Tool2d(*args))

    def NumberOfItems(self, *args) -> "Standard_Integer":
        """
        * Returns the Number of Items .
        	:rtype: int
        """
        return _MAT2d.MAT2d_Tool2d_NumberOfItems(self, *args)


    def Sense(self, *args) -> "void":
        """
        * <aSide> defines the side of the computation of the map.
        	:param aside:
        	:type aside: MAT_Side
        	:rtype: None
        """
        return _MAT2d.MAT2d_Tool2d_Sense(self, *args)


    def SetJoinType(self, *args) -> "void":
        """
        :param aJoinType:
        	:type aJoinType: GeomAbs_JoinType
        	:rtype: None
        """
        return _MAT2d.MAT2d_Tool2d_SetJoinType(self, *args)


    def Tangent(self, *args) -> "Standard_Integer":
        """
        * Creates the Tangent at the end of the bisector defined by <bisector>. Returns the index of this vector in <theGeomVecs>
        	:param bisector:
        	:type bisector: int
        	:rtype: int
        """
        return _MAT2d.MAT2d_Tool2d_Tangent(self, *args)


    def TangentAfter(self, *args) -> "Standard_Integer":
        """
        * Creates the Reversed Tangent at the origin of the Item defined by <anitem>. Returns the index of this vector in <theGeomVecs>
        	:param anitem:
        	:type anitem: int
        	:param IsOpenResult:
        	:type IsOpenResult: bool
        	:rtype: int
        """
        return _MAT2d.MAT2d_Tool2d_TangentAfter(self, *args)


    def TangentBefore(self, *args) -> "Standard_Integer":
        """
        * Creates the Tangent at the end of the Item defined by <anitem>. Returns the index of this vector in <theGeomVecs>
        	:param anitem:
        	:type anitem: int
        	:param IsOpenResult:
        	:type IsOpenResult: bool
        	:rtype: int
        """
        return _MAT2d.MAT2d_Tool2d_TangentBefore(self, *args)


    def ToleranceOfConfusion(self, *args) -> "Standard_Real":
        """
        * Returns tolerance to test the confusion of two points.
        	:rtype: float
        """
        return _MAT2d.MAT2d_Tool2d_ToleranceOfConfusion(self, *args)


    def TrimBisector(self, *args) -> "Standard_Boolean":
        """
        * Trims the geometric bisector by the <firstparameter> of <abisector>. If the parameter is out of the bisector, Return False. else Return True.
        	:param abisector:
        	:type abisector: MAT_Bisector
        	:rtype: bool
        * Trims the geometric bisector by the point of index <apoint> in <theGeomPnts>. If the point is out of the bisector, Return False. else Return True.
        	:param abisector:
        	:type abisector: MAT_Bisector
        	:param apoint:
        	:type apoint: int
        	:rtype: bool
        """
        return _MAT2d.MAT2d_Tool2d_TrimBisector(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_Tool2d
MAT2d_Tool2d.BisecFusion = new_instancemethod(_MAT2d.MAT2d_Tool2d_BisecFusion, None, MAT2d_Tool2d)
MAT2d_Tool2d.ChangeGeomBis = new_instancemethod(_MAT2d.MAT2d_Tool2d_ChangeGeomBis, None, MAT2d_Tool2d)
MAT2d_Tool2d.Circuit = new_instancemethod(_MAT2d.MAT2d_Tool2d_Circuit, None, MAT2d_Tool2d)
MAT2d_Tool2d.CreateBisector = new_instancemethod(_MAT2d.MAT2d_Tool2d_CreateBisector, None, MAT2d_Tool2d)
MAT2d_Tool2d.Distance = new_instancemethod(_MAT2d.MAT2d_Tool2d_Distance, None, MAT2d_Tool2d)
MAT2d_Tool2d.Dump = new_instancemethod(_MAT2d.MAT2d_Tool2d_Dump, None, MAT2d_Tool2d)
MAT2d_Tool2d.FirstPoint = new_instancemethod(_MAT2d.MAT2d_Tool2d_FirstPoint, None, MAT2d_Tool2d)
MAT2d_Tool2d.GeomBis = new_instancemethod(_MAT2d.MAT2d_Tool2d_GeomBis, None, MAT2d_Tool2d)
MAT2d_Tool2d.GeomElt = new_instancemethod(_MAT2d.MAT2d_Tool2d_GeomElt, None, MAT2d_Tool2d)
MAT2d_Tool2d.GeomPnt = new_instancemethod(_MAT2d.MAT2d_Tool2d_GeomPnt, None, MAT2d_Tool2d)
MAT2d_Tool2d.GeomVec = new_instancemethod(_MAT2d.MAT2d_Tool2d_GeomVec, None, MAT2d_Tool2d)
MAT2d_Tool2d.InitItems = new_instancemethod(_MAT2d.MAT2d_Tool2d_InitItems, None, MAT2d_Tool2d)
MAT2d_Tool2d.IntersectBisector = new_instancemethod(_MAT2d.MAT2d_Tool2d_IntersectBisector, None, MAT2d_Tool2d)
MAT2d_Tool2d.NumberOfItems = new_instancemethod(_MAT2d.MAT2d_Tool2d_NumberOfItems, None, MAT2d_Tool2d)
MAT2d_Tool2d.Sense = new_instancemethod(_MAT2d.MAT2d_Tool2d_Sense, None, MAT2d_Tool2d)
MAT2d_Tool2d.SetJoinType = new_instancemethod(_MAT2d.MAT2d_Tool2d_SetJoinType, None, MAT2d_Tool2d)
MAT2d_Tool2d.Tangent = new_instancemethod(_MAT2d.MAT2d_Tool2d_Tangent, None, MAT2d_Tool2d)
MAT2d_Tool2d.TangentAfter = new_instancemethod(_MAT2d.MAT2d_Tool2d_TangentAfter, None, MAT2d_Tool2d)
MAT2d_Tool2d.TangentBefore = new_instancemethod(_MAT2d.MAT2d_Tool2d_TangentBefore, None, MAT2d_Tool2d)
MAT2d_Tool2d.ToleranceOfConfusion = new_instancemethod(_MAT2d.MAT2d_Tool2d_ToleranceOfConfusion, None, MAT2d_Tool2d)
MAT2d_Tool2d.TrimBisector = new_instancemethod(_MAT2d.MAT2d_Tool2d_TrimBisector, None, MAT2d_Tool2d)
MAT2d_Tool2d_swigregister = _MAT2d.MAT2d_Tool2d_swigregister
MAT2d_Tool2d_swigregister(MAT2d_Tool2d)



