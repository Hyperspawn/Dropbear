# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
NLPlate module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_nlplate.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _NLPlate.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_NLPlate')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_NLPlate')
    _NLPlate = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_NLPlate', [dirname(__file__)])
        except ImportError:
            import _NLPlate
            return _NLPlate
        try:
            _mod = imp.load_module('_NLPlate', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _NLPlate = swig_import_helper()
    del swig_import_helper
else:
    import _NLPlate
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NLPlate.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_NLPlate.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_NLPlate.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_NLPlate.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_NLPlate.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_NLPlate.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_NLPlate.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_NLPlate.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_NLPlate.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_NLPlate.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_NLPlate.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_NLPlate.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_NLPlate.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_NLPlate.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_NLPlate.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_NLPlate.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_NLPlate.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _NLPlate.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _NLPlate.process_exception(error, method_name, class_name)
process_exception = _NLPlate.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.Plate
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.Geom
import OCC.Core.GeomAbs

def Handle_NLPlate_HGPPConstraint_Create() -> "opencascade::handle< NLPlate_HGPPConstraint >":
    return _NLPlate.Handle_NLPlate_HGPPConstraint_Create()
Handle_NLPlate_HGPPConstraint_Create = _NLPlate.Handle_NLPlate_HGPPConstraint_Create

def Handle_NLPlate_HGPPConstraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< NLPlate_HGPPConstraint >":
    return _NLPlate.Handle_NLPlate_HGPPConstraint_DownCast(t)
Handle_NLPlate_HGPPConstraint_DownCast = _NLPlate.Handle_NLPlate_HGPPConstraint_DownCast

def Handle_NLPlate_HGPPConstraint_IsNull(t: 'opencascade::handle< NLPlate_HGPPConstraint > const &') -> "bool":
    return _NLPlate.Handle_NLPlate_HGPPConstraint_IsNull(t)
Handle_NLPlate_HGPPConstraint_IsNull = _NLPlate.Handle_NLPlate_HGPPConstraint_IsNull

def Handle_NLPlate_HPG0Constraint_Create() -> "opencascade::handle< NLPlate_HPG0Constraint >":
    return _NLPlate.Handle_NLPlate_HPG0Constraint_Create()
Handle_NLPlate_HPG0Constraint_Create = _NLPlate.Handle_NLPlate_HPG0Constraint_Create

def Handle_NLPlate_HPG0Constraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< NLPlate_HPG0Constraint >":
    return _NLPlate.Handle_NLPlate_HPG0Constraint_DownCast(t)
Handle_NLPlate_HPG0Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0Constraint_DownCast

def Handle_NLPlate_HPG0Constraint_IsNull(t: 'opencascade::handle< NLPlate_HPG0Constraint > const &') -> "bool":
    return _NLPlate.Handle_NLPlate_HPG0Constraint_IsNull(t)
Handle_NLPlate_HPG0Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG0Constraint_IsNull

def Handle_NLPlate_HPG1Constraint_Create() -> "opencascade::handle< NLPlate_HPG1Constraint >":
    return _NLPlate.Handle_NLPlate_HPG1Constraint_Create()
Handle_NLPlate_HPG1Constraint_Create = _NLPlate.Handle_NLPlate_HPG1Constraint_Create

def Handle_NLPlate_HPG1Constraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< NLPlate_HPG1Constraint >":
    return _NLPlate.Handle_NLPlate_HPG1Constraint_DownCast(t)
Handle_NLPlate_HPG1Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG1Constraint_DownCast

def Handle_NLPlate_HPG1Constraint_IsNull(t: 'opencascade::handle< NLPlate_HPG1Constraint > const &') -> "bool":
    return _NLPlate.Handle_NLPlate_HPG1Constraint_IsNull(t)
Handle_NLPlate_HPG1Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG1Constraint_IsNull

def Handle_NLPlate_HPG0G1Constraint_Create() -> "opencascade::handle< NLPlate_HPG0G1Constraint >":
    return _NLPlate.Handle_NLPlate_HPG0G1Constraint_Create()
Handle_NLPlate_HPG0G1Constraint_Create = _NLPlate.Handle_NLPlate_HPG0G1Constraint_Create

def Handle_NLPlate_HPG0G1Constraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< NLPlate_HPG0G1Constraint >":
    return _NLPlate.Handle_NLPlate_HPG0G1Constraint_DownCast(t)
Handle_NLPlate_HPG0G1Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0G1Constraint_DownCast

def Handle_NLPlate_HPG0G1Constraint_IsNull(t: 'opencascade::handle< NLPlate_HPG0G1Constraint > const &') -> "bool":
    return _NLPlate.Handle_NLPlate_HPG0G1Constraint_IsNull(t)
Handle_NLPlate_HPG0G1Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG0G1Constraint_IsNull

def Handle_NLPlate_HPG2Constraint_Create() -> "opencascade::handle< NLPlate_HPG2Constraint >":
    return _NLPlate.Handle_NLPlate_HPG2Constraint_Create()
Handle_NLPlate_HPG2Constraint_Create = _NLPlate.Handle_NLPlate_HPG2Constraint_Create

def Handle_NLPlate_HPG2Constraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< NLPlate_HPG2Constraint >":
    return _NLPlate.Handle_NLPlate_HPG2Constraint_DownCast(t)
Handle_NLPlate_HPG2Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG2Constraint_DownCast

def Handle_NLPlate_HPG2Constraint_IsNull(t: 'opencascade::handle< NLPlate_HPG2Constraint > const &') -> "bool":
    return _NLPlate.Handle_NLPlate_HPG2Constraint_IsNull(t)
Handle_NLPlate_HPG2Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG2Constraint_IsNull

def Handle_NLPlate_HPG0G2Constraint_Create() -> "opencascade::handle< NLPlate_HPG0G2Constraint >":
    return _NLPlate.Handle_NLPlate_HPG0G2Constraint_Create()
Handle_NLPlate_HPG0G2Constraint_Create = _NLPlate.Handle_NLPlate_HPG0G2Constraint_Create

def Handle_NLPlate_HPG0G2Constraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< NLPlate_HPG0G2Constraint >":
    return _NLPlate.Handle_NLPlate_HPG0G2Constraint_DownCast(t)
Handle_NLPlate_HPG0G2Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0G2Constraint_DownCast

def Handle_NLPlate_HPG0G2Constraint_IsNull(t: 'opencascade::handle< NLPlate_HPG0G2Constraint > const &') -> "bool":
    return _NLPlate.Handle_NLPlate_HPG0G2Constraint_IsNull(t)
Handle_NLPlate_HPG0G2Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG0G2Constraint_IsNull

def Handle_NLPlate_HPG3Constraint_Create() -> "opencascade::handle< NLPlate_HPG3Constraint >":
    return _NLPlate.Handle_NLPlate_HPG3Constraint_Create()
Handle_NLPlate_HPG3Constraint_Create = _NLPlate.Handle_NLPlate_HPG3Constraint_Create

def Handle_NLPlate_HPG3Constraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< NLPlate_HPG3Constraint >":
    return _NLPlate.Handle_NLPlate_HPG3Constraint_DownCast(t)
Handle_NLPlate_HPG3Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG3Constraint_DownCast

def Handle_NLPlate_HPG3Constraint_IsNull(t: 'opencascade::handle< NLPlate_HPG3Constraint > const &') -> "bool":
    return _NLPlate.Handle_NLPlate_HPG3Constraint_IsNull(t)
Handle_NLPlate_HPG3Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG3Constraint_IsNull

def Handle_NLPlate_HPG0G3Constraint_Create() -> "opencascade::handle< NLPlate_HPG0G3Constraint >":
    return _NLPlate.Handle_NLPlate_HPG0G3Constraint_Create()
Handle_NLPlate_HPG0G3Constraint_Create = _NLPlate.Handle_NLPlate_HPG0G3Constraint_Create

def Handle_NLPlate_HPG0G3Constraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< NLPlate_HPG0G3Constraint >":
    return _NLPlate.Handle_NLPlate_HPG0G3Constraint_DownCast(t)
Handle_NLPlate_HPG0G3Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0G3Constraint_DownCast

def Handle_NLPlate_HPG0G3Constraint_IsNull(t: 'opencascade::handle< NLPlate_HPG0G3Constraint > const &') -> "bool":
    return _NLPlate.Handle_NLPlate_HPG0G3Constraint_IsNull(t)
Handle_NLPlate_HPG0G3Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG0G3Constraint_IsNull
class NLPlate_StackOfPlate(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NLPlate.NLPlate_StackOfPlate_swiginit(self, _NLPlate.new_NLPlate_StackOfPlate(*args))
    __swig_destroy__ = _NLPlate.delete_NLPlate_StackOfPlate
NLPlate_StackOfPlate.begin = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_begin, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.end = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_end, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.cbegin = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_cbegin, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.cend = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_cend, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.Size = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_Size, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.Assign = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_Assign, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.Set = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_Set, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.Clear = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_Clear, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.First = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_First, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.Last = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_Last, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.Append = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_Append, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.Prepend = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_Prepend, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.RemoveFirst = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_RemoveFirst, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.Remove = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_Remove, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.InsertBefore = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_InsertBefore, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.InsertAfter = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_InsertAfter, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate.Reverse = new_instancemethod(_NLPlate.NLPlate_StackOfPlate_Reverse, None, NLPlate_StackOfPlate)
NLPlate_StackOfPlate_swigregister = _NLPlate.NLPlate_StackOfPlate_swigregister
NLPlate_StackOfPlate_swigregister(NLPlate_StackOfPlate)

class NLPlate_ListIteratorOfStackOfPlate(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NLPlate.NLPlate_ListIteratorOfStackOfPlate_swiginit(self, _NLPlate.new_NLPlate_ListIteratorOfStackOfPlate(*args))
    __swig_destroy__ = _NLPlate.delete_NLPlate_ListIteratorOfStackOfPlate
NLPlate_ListIteratorOfStackOfPlate.More = new_instancemethod(_NLPlate.NLPlate_ListIteratorOfStackOfPlate_More, None, NLPlate_ListIteratorOfStackOfPlate)
NLPlate_ListIteratorOfStackOfPlate.Next = new_instancemethod(_NLPlate.NLPlate_ListIteratorOfStackOfPlate_Next, None, NLPlate_ListIteratorOfStackOfPlate)
NLPlate_ListIteratorOfStackOfPlate.Value = new_instancemethod(_NLPlate.NLPlate_ListIteratorOfStackOfPlate_Value, None, NLPlate_ListIteratorOfStackOfPlate)
NLPlate_ListIteratorOfStackOfPlate.ChangeValue = new_instancemethod(_NLPlate.NLPlate_ListIteratorOfStackOfPlate_ChangeValue, None, NLPlate_ListIteratorOfStackOfPlate)
NLPlate_ListIteratorOfStackOfPlate_swigregister = _NLPlate.NLPlate_ListIteratorOfStackOfPlate_swigregister
NLPlate_ListIteratorOfStackOfPlate_swigregister(NLPlate_ListIteratorOfStackOfPlate)

class NLPlate_SequenceOfHGPPConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NLPlate.NLPlate_SequenceOfHGPPConstraint_swiginit(self, _NLPlate.new_NLPlate_SequenceOfHGPPConstraint(*args))
    delNode = staticmethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_delNode)
    __swig_destroy__ = _NLPlate.delete_NLPlate_SequenceOfHGPPConstraint
NLPlate_SequenceOfHGPPConstraint.begin = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_begin, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.end = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_end, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.cbegin = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_cbegin, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.cend = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_cend, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Size = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Size, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Length = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Length, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Lower = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Lower, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Upper = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Upper, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.IsEmpty = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_IsEmpty, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Reverse = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Reverse, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Exchange = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Exchange, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Clear = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Clear, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Assign = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Assign, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Set = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Set, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Remove = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Remove, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Append = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Append, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Prepend = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Prepend, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.InsertBefore = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_InsertBefore, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.InsertAfter = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_InsertAfter, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Split = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Split, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.First = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_First, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.ChangeFirst = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_ChangeFirst, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Last = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Last, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.ChangeLast = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_ChangeLast, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.Value = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Value, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.ChangeValue = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_ChangeValue, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.__call__ = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint___call__, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint.SetValue = new_instancemethod(_NLPlate.NLPlate_SequenceOfHGPPConstraint_SetValue, None, NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint_swigregister = _NLPlate.NLPlate_SequenceOfHGPPConstraint_swigregister
NLPlate_SequenceOfHGPPConstraint_swigregister(NLPlate_SequenceOfHGPPConstraint)

def NLPlate_SequenceOfHGPPConstraint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _NLPlate.NLPlate_SequenceOfHGPPConstraint_delNode(theNode, theAl)
NLPlate_SequenceOfHGPPConstraint_delNode = _NLPlate.NLPlate_SequenceOfHGPPConstraint_delNode

class NLPlate_HGPPConstraint(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ActiveOrder(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _NLPlate.NLPlate_HGPPConstraint_ActiveOrder(self, *args)


    def G0Criterion(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _NLPlate.NLPlate_HGPPConstraint_G0Criterion(self, *args)


    def G0Target(self, *args) -> "gp_XYZ const":
        """:rtype: gp_XYZ"""
        return _NLPlate.NLPlate_HGPPConstraint_G0Target(self, *args)


    def G1Criterion(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _NLPlate.NLPlate_HGPPConstraint_G1Criterion(self, *args)


    def G1Target(self, *args) -> "Plate_D1 const &":
        """:rtype: Plate_D1"""
        return _NLPlate.NLPlate_HGPPConstraint_G1Target(self, *args)


    def G2Criterion(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _NLPlate.NLPlate_HGPPConstraint_G2Criterion(self, *args)


    def G2Target(self, *args) -> "Plate_D2 const &":
        """:rtype: Plate_D2"""
        return _NLPlate.NLPlate_HGPPConstraint_G2Target(self, *args)


    def G3Criterion(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _NLPlate.NLPlate_HGPPConstraint_G3Criterion(self, *args)


    def G3Target(self, *args) -> "Plate_D3 const &":
        """:rtype: Plate_D3"""
        return _NLPlate.NLPlate_HGPPConstraint_G3Target(self, *args)


    def IncrementalLoadAllowed(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _NLPlate.NLPlate_HGPPConstraint_IncrementalLoadAllowed(self, *args)


    def IsG0(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _NLPlate.NLPlate_HGPPConstraint_IsG0(self, *args)


    def Orientation(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _NLPlate.NLPlate_HGPPConstraint_Orientation(self, *args)


    def SetActiveOrder(self, *args) -> "void":
        """
        :param ActiveOrder:
        	:type ActiveOrder: int
        	:rtype: void
        """
        return _NLPlate.NLPlate_HGPPConstraint_SetActiveOrder(self, *args)


    def SetG0Criterion(self, *args) -> "void":
        """
        :param TolDist:
        	:type TolDist: float
        	:rtype: void
        """
        return _NLPlate.NLPlate_HGPPConstraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args) -> "void":
        """
        :param TolAng:
        	:type TolAng: float
        	:rtype: void
        """
        return _NLPlate.NLPlate_HGPPConstraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args) -> "void":
        """
        :param TolCurv:
        	:type TolCurv: float
        	:rtype: void
        """
        return _NLPlate.NLPlate_HGPPConstraint_SetG2Criterion(self, *args)


    def SetG3Criterion(self, *args) -> "void":
        """
        :param TolG3:
        	:type TolG3: float
        	:rtype: void
        """
        return _NLPlate.NLPlate_HGPPConstraint_SetG3Criterion(self, *args)


    def SetIncrementalLoadAllowed(self, *args) -> "void":
        """
        :param ILA:
        	:type ILA: bool
        	:rtype: void
        """
        return _NLPlate.NLPlate_HGPPConstraint_SetIncrementalLoadAllowed(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        :param Orient: default value is 0
        	:type Orient: int
        	:rtype: void
        """
        return _NLPlate.NLPlate_HGPPConstraint_SetOrientation(self, *args)


    def SetUV(self, *args) -> "void":
        """
        :param UV:
        	:type UV: gp_XY
        	:rtype: void
        """
        return _NLPlate.NLPlate_HGPPConstraint_SetUV(self, *args)


    def SetUVFreeSliding(self, *args) -> "void":
        """
        :param UVFree:
        	:type UVFree: bool
        	:rtype: void
        """
        return _NLPlate.NLPlate_HGPPConstraint_SetUVFreeSliding(self, *args)


    def UV(self, *args) -> "gp_XY const":
        """:rtype: gp_XY"""
        return _NLPlate.NLPlate_HGPPConstraint_UV(self, *args)


    def UVFreeSliding(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _NLPlate.NLPlate_HGPPConstraint_UVFreeSliding(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HGPPConstraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HGPPConstraint
NLPlate_HGPPConstraint.ActiveOrder = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_ActiveOrder, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.G0Criterion = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_G0Criterion, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.G0Target = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_G0Target, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.G1Criterion = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_G1Criterion, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.G1Target = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_G1Target, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.G2Criterion = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_G2Criterion, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.G2Target = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_G2Target, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.G3Criterion = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_G3Criterion, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.G3Target = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_G3Target, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.IncrementalLoadAllowed = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_IncrementalLoadAllowed, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.IsG0 = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_IsG0, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.Orientation = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_Orientation, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.SetActiveOrder = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_SetActiveOrder, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.SetG0Criterion = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_SetG0Criterion, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.SetG1Criterion = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_SetG1Criterion, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.SetG2Criterion = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_SetG2Criterion, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.SetG3Criterion = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_SetG3Criterion, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.SetIncrementalLoadAllowed = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_SetIncrementalLoadAllowed, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.SetOrientation = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_SetOrientation, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.SetUV = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_SetUV, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.SetUVFreeSliding = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_SetUVFreeSliding, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.UV = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_UV, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint.UVFreeSliding = new_instancemethod(_NLPlate.NLPlate_HGPPConstraint_UVFreeSliding, None, NLPlate_HGPPConstraint)
NLPlate_HGPPConstraint_swigregister = _NLPlate.NLPlate_HGPPConstraint_swigregister
NLPlate_HGPPConstraint_swigregister(NLPlate_HGPPConstraint)

class NLPlate_NLPlate(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConstraintsSliding(self, *args) -> "void":
        """
        :param NbIterations: default value is 3
        	:type NbIterations: int
        	:rtype: None
        """
        return _NLPlate.NLPlate_NLPlate_ConstraintsSliding(self, *args)


    def Continuity(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _NLPlate.NLPlate_NLPlate_Continuity(self, *args)


    def Evaluate(self, *args) -> "gp_XYZ":
        """
        :param point2d:
        	:type point2d: gp_XY
        	:rtype: gp_XYZ
        """
        return _NLPlate.NLPlate_NLPlate_Evaluate(self, *args)


    def EvaluateDerivative(self, *args) -> "gp_XYZ":
        """
        :param point2d:
        	:type point2d: gp_XY
        	:param iu:
        	:type iu: int
        	:param iv:
        	:type iv: int
        	:rtype: gp_XYZ
        """
        return _NLPlate.NLPlate_NLPlate_EvaluateDerivative(self, *args)


    def IncrementalSolve(self, *args) -> "void":
        """
        :param ord: default value is 2
        	:type ord: int
        	:param InitialConsraintOrder: default value is 1
        	:type InitialConsraintOrder: int
        	:param NbIncrements: default value is 4
        	:type NbIncrements: int
        	:param UVSliding: default value is Standard_False
        	:type UVSliding: bool
        	:rtype: None
        """
        return _NLPlate.NLPlate_NLPlate_IncrementalSolve(self, *args)


    def Init(self, *args) -> "void":
        """
        * reset the Plate in the initial state ( same as after Create((Surface))
        	:rtype: None
        """
        return _NLPlate.NLPlate_NLPlate_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * returns True if all has been correctly done.
        	:rtype: bool
        """
        return _NLPlate.NLPlate_NLPlate_IsDone(self, *args)


    def Load(self, *args) -> "void":
        """
        :param GConst:
        	:type GConst: NLPlate_HGPPConstraint
        	:rtype: None
        """
        return _NLPlate.NLPlate_NLPlate_Load(self, *args)


    def MaxActiveConstraintOrder(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _NLPlate.NLPlate_NLPlate_MaxActiveConstraintOrder(self, *args)


    def __init__(self, *args):
        """
        :param InitialSurface:
        	:type InitialSurface: Geom_Surface
        	:rtype: None
        """
        _NLPlate.NLPlate_NLPlate_swiginit(self, _NLPlate.new_NLPlate_NLPlate(*args))

    def Solve(self, *args) -> "void":
        """
        :param ord: default value is 2
        	:type ord: int
        	:param InitialConsraintOrder: default value is 1
        	:type InitialConsraintOrder: int
        	:rtype: None
        """
        return _NLPlate.NLPlate_NLPlate_Solve(self, *args)


    def Solve2(self, *args) -> "void":
        """
        :param ord: default value is 2
        	:type ord: int
        	:param InitialConsraintOrder: default value is 1
        	:type InitialConsraintOrder: int
        	:rtype: None
        """
        return _NLPlate.NLPlate_NLPlate_Solve2(self, *args)


    def destroy(self, *args) -> "void":
        """:rtype: None"""
        return _NLPlate.NLPlate_NLPlate_destroy(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_NLPlate
NLPlate_NLPlate.ConstraintsSliding = new_instancemethod(_NLPlate.NLPlate_NLPlate_ConstraintsSliding, None, NLPlate_NLPlate)
NLPlate_NLPlate.Continuity = new_instancemethod(_NLPlate.NLPlate_NLPlate_Continuity, None, NLPlate_NLPlate)
NLPlate_NLPlate.Evaluate = new_instancemethod(_NLPlate.NLPlate_NLPlate_Evaluate, None, NLPlate_NLPlate)
NLPlate_NLPlate.EvaluateDerivative = new_instancemethod(_NLPlate.NLPlate_NLPlate_EvaluateDerivative, None, NLPlate_NLPlate)
NLPlate_NLPlate.IncrementalSolve = new_instancemethod(_NLPlate.NLPlate_NLPlate_IncrementalSolve, None, NLPlate_NLPlate)
NLPlate_NLPlate.Init = new_instancemethod(_NLPlate.NLPlate_NLPlate_Init, None, NLPlate_NLPlate)
NLPlate_NLPlate.IsDone = new_instancemethod(_NLPlate.NLPlate_NLPlate_IsDone, None, NLPlate_NLPlate)
NLPlate_NLPlate.Load = new_instancemethod(_NLPlate.NLPlate_NLPlate_Load, None, NLPlate_NLPlate)
NLPlate_NLPlate.MaxActiveConstraintOrder = new_instancemethod(_NLPlate.NLPlate_NLPlate_MaxActiveConstraintOrder, None, NLPlate_NLPlate)
NLPlate_NLPlate.Solve = new_instancemethod(_NLPlate.NLPlate_NLPlate_Solve, None, NLPlate_NLPlate)
NLPlate_NLPlate.Solve2 = new_instancemethod(_NLPlate.NLPlate_NLPlate_Solve2, None, NLPlate_NLPlate)
NLPlate_NLPlate.destroy = new_instancemethod(_NLPlate.NLPlate_NLPlate_destroy, None, NLPlate_NLPlate)
NLPlate_NLPlate_swigregister = _NLPlate.NLPlate_NLPlate_swigregister
NLPlate_NLPlate_swigregister(NLPlate_NLPlate)

class NLPlate_HPG0Constraint(NLPlate_HGPPConstraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param UV:
        	:type UV: gp_XY
        	:param Value:
        	:type Value: gp_XYZ
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG0Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG0Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG0Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0Constraint
NLPlate_HPG0Constraint_swigregister = _NLPlate.NLPlate_HPG0Constraint_swigregister
NLPlate_HPG0Constraint_swigregister(NLPlate_HPG0Constraint)

class NLPlate_HPG1Constraint(NLPlate_HGPPConstraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param UV:
        	:type UV: gp_XY
        	:param D1T:
        	:type D1T: Plate_D1
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG1Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG1Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG1Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG1Constraint
NLPlate_HPG1Constraint_swigregister = _NLPlate.NLPlate_HPG1Constraint_swigregister
NLPlate_HPG1Constraint_swigregister(NLPlate_HPG1Constraint)

class NLPlate_HPG0G1Constraint(NLPlate_HPG0Constraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param UV:
        	:type UV: gp_XY
        	:param Value:
        	:type Value: gp_XYZ
        	:param D1T:
        	:type D1T: Plate_D1
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG0G1Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG0G1Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG0G1Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0G1Constraint
NLPlate_HPG0G1Constraint_swigregister = _NLPlate.NLPlate_HPG0G1Constraint_swigregister
NLPlate_HPG0G1Constraint_swigregister(NLPlate_HPG0G1Constraint)

class NLPlate_HPG2Constraint(NLPlate_HPG1Constraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param UV:
        	:type UV: gp_XY
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2T:
        	:type D2T: Plate_D2
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG2Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG2Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG2Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG2Constraint
NLPlate_HPG2Constraint_swigregister = _NLPlate.NLPlate_HPG2Constraint_swigregister
NLPlate_HPG2Constraint_swigregister(NLPlate_HPG2Constraint)

class NLPlate_HPG0G2Constraint(NLPlate_HPG0G1Constraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param UV:
        	:type UV: gp_XY
        	:param Value:
        	:type Value: gp_XYZ
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2T:
        	:type D2T: Plate_D2
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG0G2Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG0G2Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG0G2Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0G2Constraint
NLPlate_HPG0G2Constraint_swigregister = _NLPlate.NLPlate_HPG0G2Constraint_swigregister
NLPlate_HPG0G2Constraint_swigregister(NLPlate_HPG0G2Constraint)

class NLPlate_HPG3Constraint(NLPlate_HPG2Constraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param UV:
        	:type UV: gp_XY
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2T:
        	:type D2T: Plate_D2
        	:param D3T:
        	:type D3T: Plate_D3
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG3Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG3Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG3Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG3Constraint
NLPlate_HPG3Constraint_swigregister = _NLPlate.NLPlate_HPG3Constraint_swigregister
NLPlate_HPG3Constraint_swigregister(NLPlate_HPG3Constraint)

class NLPlate_HPG0G3Constraint(NLPlate_HPG0G2Constraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param UV:
        	:type UV: gp_XY
        	:param Value:
        	:type Value: gp_XYZ
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2T:
        	:type D2T: Plate_D2
        	:param D3T:
        	:type D3T: Plate_D3
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG0G3Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG0G3Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG0G3Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0G3Constraint
NLPlate_HPG0G3Constraint_swigregister = _NLPlate.NLPlate_HPG0G3Constraint_swigregister
NLPlate_HPG0G3Constraint_swigregister(NLPlate_HPG0G3Constraint)



