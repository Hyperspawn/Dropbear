# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
PCDM module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_pcdm.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _PCDM.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PCDM')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PCDM')
    _PCDM = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PCDM', [dirname(__file__)])
        except ImportError:
            import _PCDM
            return _PCDM
        try:
            _mod = imp.load_module('_PCDM', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PCDM = swig_import_helper()
    del swig_import_helper
else:
    import _PCDM
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PCDM.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_PCDM.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_PCDM.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_PCDM.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_PCDM.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_PCDM.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_PCDM.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_PCDM.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_PCDM.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_PCDM.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_PCDM.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_PCDM.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_PCDM.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_PCDM.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_PCDM.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_PCDM.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_PCDM.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _PCDM.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _PCDM.process_exception(error, method_name, class_name)
process_exception = _PCDM.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Storage
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.TColStd
import OCC.Core.CDM
import OCC.Core.Resource
PCDM_SS_OK = _PCDM.PCDM_SS_OK
PCDM_SS_DriverFailure = _PCDM.PCDM_SS_DriverFailure
PCDM_SS_WriteFailure = _PCDM.PCDM_SS_WriteFailure
PCDM_SS_Failure = _PCDM.PCDM_SS_Failure
PCDM_SS_Doc_IsNull = _PCDM.PCDM_SS_Doc_IsNull
PCDM_SS_No_Obj = _PCDM.PCDM_SS_No_Obj
PCDM_SS_Info_Section_Error = _PCDM.PCDM_SS_Info_Section_Error
PCDM_TOFD_File = _PCDM.PCDM_TOFD_File
PCDM_TOFD_CmpFile = _PCDM.PCDM_TOFD_CmpFile
PCDM_TOFD_XmlFile = _PCDM.PCDM_TOFD_XmlFile
PCDM_TOFD_Unknown = _PCDM.PCDM_TOFD_Unknown
PCDM_RS_OK = _PCDM.PCDM_RS_OK
PCDM_RS_NoDriver = _PCDM.PCDM_RS_NoDriver
PCDM_RS_UnknownFileDriver = _PCDM.PCDM_RS_UnknownFileDriver
PCDM_RS_OpenError = _PCDM.PCDM_RS_OpenError
PCDM_RS_NoVersion = _PCDM.PCDM_RS_NoVersion
PCDM_RS_NoSchema = _PCDM.PCDM_RS_NoSchema
PCDM_RS_NoDocument = _PCDM.PCDM_RS_NoDocument
PCDM_RS_ExtensionFailure = _PCDM.PCDM_RS_ExtensionFailure
PCDM_RS_WrongStreamMode = _PCDM.PCDM_RS_WrongStreamMode
PCDM_RS_FormatFailure = _PCDM.PCDM_RS_FormatFailure
PCDM_RS_TypeFailure = _PCDM.PCDM_RS_TypeFailure
PCDM_RS_TypeNotFoundInSchema = _PCDM.PCDM_RS_TypeNotFoundInSchema
PCDM_RS_UnrecognizedFileFormat = _PCDM.PCDM_RS_UnrecognizedFileFormat
PCDM_RS_MakeFailure = _PCDM.PCDM_RS_MakeFailure
PCDM_RS_PermissionDenied = _PCDM.PCDM_RS_PermissionDenied
PCDM_RS_DriverFailure = _PCDM.PCDM_RS_DriverFailure
PCDM_RS_AlreadyRetrievedAndModified = _PCDM.PCDM_RS_AlreadyRetrievedAndModified
PCDM_RS_AlreadyRetrieved = _PCDM.PCDM_RS_AlreadyRetrieved
PCDM_RS_UnknownDocument = _PCDM.PCDM_RS_UnknownDocument
PCDM_RS_WrongResource = _PCDM.PCDM_RS_WrongResource
PCDM_RS_ReaderException = _PCDM.PCDM_RS_ReaderException
PCDM_RS_NoModel = _PCDM.PCDM_RS_NoModel

def Handle_PCDM_ReadWriter_Create() -> "opencascade::handle< PCDM_ReadWriter >":
    return _PCDM.Handle_PCDM_ReadWriter_Create()
Handle_PCDM_ReadWriter_Create = _PCDM.Handle_PCDM_ReadWriter_Create

def Handle_PCDM_ReadWriter_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_ReadWriter >":
    return _PCDM.Handle_PCDM_ReadWriter_DownCast(t)
Handle_PCDM_ReadWriter_DownCast = _PCDM.Handle_PCDM_ReadWriter_DownCast

def Handle_PCDM_ReadWriter_IsNull(t: 'opencascade::handle< PCDM_ReadWriter > const &') -> "bool":
    return _PCDM.Handle_PCDM_ReadWriter_IsNull(t)
Handle_PCDM_ReadWriter_IsNull = _PCDM.Handle_PCDM_ReadWriter_IsNull

def Handle_PCDM_Reader_Create() -> "opencascade::handle< PCDM_Reader >":
    return _PCDM.Handle_PCDM_Reader_Create()
Handle_PCDM_Reader_Create = _PCDM.Handle_PCDM_Reader_Create

def Handle_PCDM_Reader_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_Reader >":
    return _PCDM.Handle_PCDM_Reader_DownCast(t)
Handle_PCDM_Reader_DownCast = _PCDM.Handle_PCDM_Reader_DownCast

def Handle_PCDM_Reader_IsNull(t: 'opencascade::handle< PCDM_Reader > const &') -> "bool":
    return _PCDM.Handle_PCDM_Reader_IsNull(t)
Handle_PCDM_Reader_IsNull = _PCDM.Handle_PCDM_Reader_IsNull

def Handle_PCDM_ReferenceIterator_Create() -> "opencascade::handle< PCDM_ReferenceIterator >":
    return _PCDM.Handle_PCDM_ReferenceIterator_Create()
Handle_PCDM_ReferenceIterator_Create = _PCDM.Handle_PCDM_ReferenceIterator_Create

def Handle_PCDM_ReferenceIterator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_ReferenceIterator >":
    return _PCDM.Handle_PCDM_ReferenceIterator_DownCast(t)
Handle_PCDM_ReferenceIterator_DownCast = _PCDM.Handle_PCDM_ReferenceIterator_DownCast

def Handle_PCDM_ReferenceIterator_IsNull(t: 'opencascade::handle< PCDM_ReferenceIterator > const &') -> "bool":
    return _PCDM.Handle_PCDM_ReferenceIterator_IsNull(t)
Handle_PCDM_ReferenceIterator_IsNull = _PCDM.Handle_PCDM_ReferenceIterator_IsNull

def Handle_PCDM_Writer_Create() -> "opencascade::handle< PCDM_Writer >":
    return _PCDM.Handle_PCDM_Writer_Create()
Handle_PCDM_Writer_Create = _PCDM.Handle_PCDM_Writer_Create

def Handle_PCDM_Writer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_Writer >":
    return _PCDM.Handle_PCDM_Writer_DownCast(t)
Handle_PCDM_Writer_DownCast = _PCDM.Handle_PCDM_Writer_DownCast

def Handle_PCDM_Writer_IsNull(t: 'opencascade::handle< PCDM_Writer > const &') -> "bool":
    return _PCDM.Handle_PCDM_Writer_IsNull(t)
Handle_PCDM_Writer_IsNull = _PCDM.Handle_PCDM_Writer_IsNull

def Handle_PCDM_ReadWriter_1_Create() -> "opencascade::handle< PCDM_ReadWriter_1 >":
    return _PCDM.Handle_PCDM_ReadWriter_1_Create()
Handle_PCDM_ReadWriter_1_Create = _PCDM.Handle_PCDM_ReadWriter_1_Create

def Handle_PCDM_ReadWriter_1_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_ReadWriter_1 >":
    return _PCDM.Handle_PCDM_ReadWriter_1_DownCast(t)
Handle_PCDM_ReadWriter_1_DownCast = _PCDM.Handle_PCDM_ReadWriter_1_DownCast

def Handle_PCDM_ReadWriter_1_IsNull(t: 'opencascade::handle< PCDM_ReadWriter_1 > const &') -> "bool":
    return _PCDM.Handle_PCDM_ReadWriter_1_IsNull(t)
Handle_PCDM_ReadWriter_1_IsNull = _PCDM.Handle_PCDM_ReadWriter_1_IsNull

def Handle_PCDM_RetrievalDriver_Create() -> "opencascade::handle< PCDM_RetrievalDriver >":
    return _PCDM.Handle_PCDM_RetrievalDriver_Create()
Handle_PCDM_RetrievalDriver_Create = _PCDM.Handle_PCDM_RetrievalDriver_Create

def Handle_PCDM_RetrievalDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_RetrievalDriver >":
    return _PCDM.Handle_PCDM_RetrievalDriver_DownCast(t)
Handle_PCDM_RetrievalDriver_DownCast = _PCDM.Handle_PCDM_RetrievalDriver_DownCast

def Handle_PCDM_RetrievalDriver_IsNull(t: 'opencascade::handle< PCDM_RetrievalDriver > const &') -> "bool":
    return _PCDM.Handle_PCDM_RetrievalDriver_IsNull(t)
Handle_PCDM_RetrievalDriver_IsNull = _PCDM.Handle_PCDM_RetrievalDriver_IsNull

def Handle_PCDM_StorageDriver_Create() -> "opencascade::handle< PCDM_StorageDriver >":
    return _PCDM.Handle_PCDM_StorageDriver_Create()
Handle_PCDM_StorageDriver_Create = _PCDM.Handle_PCDM_StorageDriver_Create

def Handle_PCDM_StorageDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_StorageDriver >":
    return _PCDM.Handle_PCDM_StorageDriver_DownCast(t)
Handle_PCDM_StorageDriver_DownCast = _PCDM.Handle_PCDM_StorageDriver_DownCast

def Handle_PCDM_StorageDriver_IsNull(t: 'opencascade::handle< PCDM_StorageDriver > const &') -> "bool":
    return _PCDM.Handle_PCDM_StorageDriver_IsNull(t)
Handle_PCDM_StorageDriver_IsNull = _PCDM.Handle_PCDM_StorageDriver_IsNull
class PCDM_SequenceOfDocument(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PCDM.PCDM_SequenceOfDocument_swiginit(self, _PCDM.new_PCDM_SequenceOfDocument(*args))
    delNode = staticmethod(_PCDM.PCDM_SequenceOfDocument_delNode)
    __swig_destroy__ = _PCDM.delete_PCDM_SequenceOfDocument
PCDM_SequenceOfDocument.begin = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_begin, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.end = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_end, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.cbegin = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_cbegin, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.cend = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_cend, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Size = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Size, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Length = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Length, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Lower = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Lower, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Upper = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Upper, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.IsEmpty = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_IsEmpty, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Reverse = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Reverse, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Exchange = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Exchange, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Clear = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Clear, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Assign = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Assign, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Set = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Set, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Remove = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Remove, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Append = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Append, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Prepend = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Prepend, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.InsertBefore = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_InsertBefore, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.InsertAfter = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_InsertAfter, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Split = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Split, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.First = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_First, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.ChangeFirst = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_ChangeFirst, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Last = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Last, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.ChangeLast = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_ChangeLast, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.Value = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_Value, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.ChangeValue = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_ChangeValue, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.__call__ = new_instancemethod(_PCDM.PCDM_SequenceOfDocument___call__, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument.SetValue = new_instancemethod(_PCDM.PCDM_SequenceOfDocument_SetValue, None, PCDM_SequenceOfDocument)
PCDM_SequenceOfDocument_swigregister = _PCDM.PCDM_SequenceOfDocument_swigregister
PCDM_SequenceOfDocument_swigregister(PCDM_SequenceOfDocument)

def PCDM_SequenceOfDocument_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _PCDM.PCDM_SequenceOfDocument_delNode(theNode, theAl)
PCDM_SequenceOfDocument_delNode = _PCDM.PCDM_SequenceOfDocument_delNode

class PCDM_SequenceOfReference(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PCDM.PCDM_SequenceOfReference_swiginit(self, _PCDM.new_PCDM_SequenceOfReference(*args))
    delNode = staticmethod(_PCDM.PCDM_SequenceOfReference_delNode)
    __swig_destroy__ = _PCDM.delete_PCDM_SequenceOfReference
PCDM_SequenceOfReference.begin = new_instancemethod(_PCDM.PCDM_SequenceOfReference_begin, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.end = new_instancemethod(_PCDM.PCDM_SequenceOfReference_end, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.cbegin = new_instancemethod(_PCDM.PCDM_SequenceOfReference_cbegin, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.cend = new_instancemethod(_PCDM.PCDM_SequenceOfReference_cend, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Size = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Size, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Length = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Length, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Lower = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Lower, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Upper = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Upper, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.IsEmpty = new_instancemethod(_PCDM.PCDM_SequenceOfReference_IsEmpty, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Reverse = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Reverse, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Exchange = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Exchange, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Clear = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Clear, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Assign = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Assign, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Set = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Set, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Remove = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Remove, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Append = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Append, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Prepend = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Prepend, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.InsertBefore = new_instancemethod(_PCDM.PCDM_SequenceOfReference_InsertBefore, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.InsertAfter = new_instancemethod(_PCDM.PCDM_SequenceOfReference_InsertAfter, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Split = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Split, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.First = new_instancemethod(_PCDM.PCDM_SequenceOfReference_First, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.ChangeFirst = new_instancemethod(_PCDM.PCDM_SequenceOfReference_ChangeFirst, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Last = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Last, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.ChangeLast = new_instancemethod(_PCDM.PCDM_SequenceOfReference_ChangeLast, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.Value = new_instancemethod(_PCDM.PCDM_SequenceOfReference_Value, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.ChangeValue = new_instancemethod(_PCDM.PCDM_SequenceOfReference_ChangeValue, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.__call__ = new_instancemethod(_PCDM.PCDM_SequenceOfReference___call__, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference.SetValue = new_instancemethod(_PCDM.PCDM_SequenceOfReference_SetValue, None, PCDM_SequenceOfReference)
PCDM_SequenceOfReference_swigregister = _PCDM.PCDM_SequenceOfReference_swigregister
PCDM_SequenceOfReference_swigregister(PCDM_SequenceOfReference)

def PCDM_SequenceOfReference_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _PCDM.PCDM_SequenceOfReference_delNode(theNode, theAl)
PCDM_SequenceOfReference_delNode = _PCDM.PCDM_SequenceOfReference_delNode

class pcdm(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FileDriverType(*args) -> "PCDM_TypeOfFileDriver":
        """
        :param aFileName:
        	:type aFileName: TCollection_AsciiString
        	:param aBaseDriver:
        	:type aBaseDriver: PCDM_BaseDriverPointer
        	:rtype: PCDM_TypeOfFileDriver
        :param theIStream:
        	:type theIStream: Standard_IStream
        	:param theBaseDriver:
        	:type theBaseDriver: PCDM_BaseDriverPointer
        	:rtype: PCDM_TypeOfFileDriver
        """
        return _PCDM.pcdm_FileDriverType(*args)

    FileDriverType = staticmethod(FileDriverType)

    __repr__ = _dumps_object


    def __init__(self):
        _PCDM.pcdm_swiginit(self, _PCDM.new_pcdm())
    __swig_destroy__ = _PCDM.delete_pcdm
pcdm_swigregister = _PCDM.pcdm_swigregister
pcdm_swigregister(pcdm)

def pcdm_FileDriverType(*args) -> "PCDM_TypeOfFileDriver":
    """
    :param aFileName:
    	:type aFileName: TCollection_AsciiString
    	:param aBaseDriver:
    	:type aBaseDriver: PCDM_BaseDriverPointer
    	:rtype: PCDM_TypeOfFileDriver
    :param theIStream:
    	:type theIStream: Standard_IStream
    	:param theBaseDriver:
    	:type theBaseDriver: PCDM_BaseDriverPointer
    	:rtype: PCDM_TypeOfFileDriver
    """
    return _PCDM.pcdm_FileDriverType(*args)

class PCDM_ReadWriter(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FileFormat(*args) -> "TCollection_ExtendedString":
        """
        * tries to get a format in the file. returns an empty string if the file could not be read or does not have a FileFormat information.
        	:param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:rtype: TCollection_ExtendedString
        * tries to get a format from the stream. returns an empty string if the file could not be read or does not have a FileFormat information.
        	:param theIStream:
        	:type theIStream: Standard_IStream
        	:param theData:
        	:type theData: Storage_Data
        	:rtype: TCollection_ExtendedString
        """
        return _PCDM.PCDM_ReadWriter_FileFormat(*args)

    FileFormat = staticmethod(FileFormat)

    def Open(*args) -> "void":
        """
        :param aDriver:
        	:type aDriver: Storage_BaseDriver
        	:param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:param anOpenMode:
        	:type anOpenMode: Storage_OpenMode
        	:rtype: void
        """
        return _PCDM.PCDM_ReadWriter_Open(*args)

    Open = staticmethod(Open)

    def ReadDocumentVersion(self, *args) -> "Standard_Integer":
        """
        :param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:param theMsgDriver:
        	:type theMsgDriver: Message_Messenger
        	:rtype: int
        """
        return _PCDM.PCDM_ReadWriter_ReadDocumentVersion(self, *args)


    def ReadExtensions(self, *args) -> "void":
        """
        :param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:param theExtensions:
        	:type theExtensions: TColStd_SequenceOfExtendedString
        	:param theMsgDriver:
        	:type theMsgDriver: Message_Messenger
        	:rtype: void
        """
        return _PCDM.PCDM_ReadWriter_ReadExtensions(self, *args)


    def ReadReferenceCounter(self, *args) -> "Standard_Integer":
        """
        :param theFileName:
        	:type theFileName: TCollection_ExtendedString
        	:param theMsgDriver:
        	:type theMsgDriver: Message_Messenger
        	:rtype: int
        """
        return _PCDM.PCDM_ReadWriter_ReadReferenceCounter(self, *args)


    def ReadReferences(self, *args) -> "void":
        """
        :param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:param theReferences:
        	:type theReferences: PCDM_SequenceOfReference
        	:param theMsgDriver:
        	:type theMsgDriver: Message_Messenger
        	:rtype: void
        """
        return _PCDM.PCDM_ReadWriter_ReadReferences(self, *args)


    def Reader(*args) -> "opencascade::handle< PCDM_ReadWriter >":
        """
        * returns the convenient Reader for a File.
        	:param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:rtype: opencascade::handle<PCDM_ReadWriter>
        """
        return _PCDM.PCDM_ReadWriter_Reader(*args)

    Reader = staticmethod(Reader)

    def Version(self, *args) -> "TCollection_AsciiString":
        """
        * returns PCDM_ReadWriter_1.
        	:rtype: TCollection_AsciiString
        """
        return _PCDM.PCDM_ReadWriter_Version(self, *args)


    def WriteExtensions(self, *args) -> "void":
        """
        :param aData:
        	:type aData: Storage_Data
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:rtype: void
        """
        return _PCDM.PCDM_ReadWriter_WriteExtensions(self, *args)


    def WriteFileFormat(*args) -> "void":
        """
        :param aData:
        	:type aData: Storage_Data
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:rtype: void
        """
        return _PCDM.PCDM_ReadWriter_WriteFileFormat(*args)

    WriteFileFormat = staticmethod(WriteFileFormat)

    def WriteReferenceCounter(self, *args) -> "void":
        """
        :param aData:
        	:type aData: Storage_Data
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:rtype: void
        """
        return _PCDM.PCDM_ReadWriter_WriteReferenceCounter(self, *args)


    def WriteReferences(self, *args) -> "void":
        """
        :param aData:
        	:type aData: Storage_Data
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:param theReferencerFileName:
        	:type theReferencerFileName: TCollection_ExtendedString
        	:rtype: void
        """
        return _PCDM.PCDM_ReadWriter_WriteReferences(self, *args)


    def WriteVersion(self, *args) -> "void":
        """
        :param aData:
        	:type aData: Storage_Data
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:rtype: void
        """
        return _PCDM.PCDM_ReadWriter_WriteVersion(self, *args)


    def Writer(*args) -> "opencascade::handle< PCDM_ReadWriter >":
        """:rtype: opencascade::handle<PCDM_ReadWriter>"""
        return _PCDM.PCDM_ReadWriter_Writer(*args)

    Writer = staticmethod(Writer)


    @staticmethod
    def DownCast(t):
      return Handle_PCDM_ReadWriter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_ReadWriter
PCDM_ReadWriter.ReadDocumentVersion = new_instancemethod(_PCDM.PCDM_ReadWriter_ReadDocumentVersion, None, PCDM_ReadWriter)
PCDM_ReadWriter.ReadExtensions = new_instancemethod(_PCDM.PCDM_ReadWriter_ReadExtensions, None, PCDM_ReadWriter)
PCDM_ReadWriter.ReadReferenceCounter = new_instancemethod(_PCDM.PCDM_ReadWriter_ReadReferenceCounter, None, PCDM_ReadWriter)
PCDM_ReadWriter.ReadReferences = new_instancemethod(_PCDM.PCDM_ReadWriter_ReadReferences, None, PCDM_ReadWriter)
PCDM_ReadWriter.Version = new_instancemethod(_PCDM.PCDM_ReadWriter_Version, None, PCDM_ReadWriter)
PCDM_ReadWriter.WriteExtensions = new_instancemethod(_PCDM.PCDM_ReadWriter_WriteExtensions, None, PCDM_ReadWriter)
PCDM_ReadWriter.WriteReferenceCounter = new_instancemethod(_PCDM.PCDM_ReadWriter_WriteReferenceCounter, None, PCDM_ReadWriter)
PCDM_ReadWriter.WriteReferences = new_instancemethod(_PCDM.PCDM_ReadWriter_WriteReferences, None, PCDM_ReadWriter)
PCDM_ReadWriter.WriteVersion = new_instancemethod(_PCDM.PCDM_ReadWriter_WriteVersion, None, PCDM_ReadWriter)
PCDM_ReadWriter_swigregister = _PCDM.PCDM_ReadWriter_swigregister
PCDM_ReadWriter_swigregister(PCDM_ReadWriter)

def PCDM_ReadWriter_FileFormat(*args) -> "TCollection_ExtendedString":
    """
    * tries to get a format in the file. returns an empty string if the file could not be read or does not have a FileFormat information.
    	:param aFileName:
    	:type aFileName: TCollection_ExtendedString
    	:rtype: TCollection_ExtendedString
    * tries to get a format from the stream. returns an empty string if the file could not be read or does not have a FileFormat information.
    	:param theIStream:
    	:type theIStream: Standard_IStream
    	:param theData:
    	:type theData: Storage_Data
    	:rtype: TCollection_ExtendedString
    """
    return _PCDM.PCDM_ReadWriter_FileFormat(*args)

def PCDM_ReadWriter_Open(*args) -> "void":
    """
    :param aDriver:
    	:type aDriver: Storage_BaseDriver
    	:param aFileName:
    	:type aFileName: TCollection_ExtendedString
    	:param anOpenMode:
    	:type anOpenMode: Storage_OpenMode
    	:rtype: void
    """
    return _PCDM.PCDM_ReadWriter_Open(*args)

def PCDM_ReadWriter_Reader(*args) -> "opencascade::handle< PCDM_ReadWriter >":
    """
    * returns the convenient Reader for a File.
    	:param aFileName:
    	:type aFileName: TCollection_ExtendedString
    	:rtype: opencascade::handle<PCDM_ReadWriter>
    """
    return _PCDM.PCDM_ReadWriter_Reader(*args)

def PCDM_ReadWriter_WriteFileFormat(*args) -> "void":
    """
    :param aData:
    	:type aData: Storage_Data
    	:param aDocument:
    	:type aDocument: CDM_Document
    	:rtype: void
    """
    return _PCDM.PCDM_ReadWriter_WriteFileFormat(*args)

def PCDM_ReadWriter_Writer(*args) -> "opencascade::handle< PCDM_ReadWriter >":
    """:rtype: opencascade::handle<PCDM_ReadWriter>"""
    return _PCDM.PCDM_ReadWriter_Writer(*args)

class PCDM_Reader(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CreateDocument(self, *args) -> "opencascade::handle< CDM_Document >":
        """
        * this method is called by the framework before the read method.
        	:rtype: opencascade::handle<CDM_Document>
        """
        return _PCDM.PCDM_Reader_CreateDocument(self, *args)


    def GetStatus(self, *args) -> "PCDM_ReaderStatus":
        """:rtype: PCDM_ReaderStatus"""
        return _PCDM.PCDM_Reader_GetStatus(self, *args)


    def Read(self, *args) -> "void":
        """
        * retrieves the content of the file into a new Document.
        	:param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:param aNewDocument:
        	:type aNewDocument: CDM_Document
        	:param anApplication:
        	:type anApplication: CDM_Application
        	:rtype: void
        :param theIStream:
        	:type theIStream: Standard_IStream
        	:param theStorageData:
        	:type theStorageData: Storage_Data
        	:param theDoc:
        	:type theDoc: CDM_Document
        	:param theApplication:
        	:type theApplication: CDM_Application
        	:rtype: void
        """
        return _PCDM.PCDM_Reader_Read(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_PCDM_Reader_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_Reader
PCDM_Reader.CreateDocument = new_instancemethod(_PCDM.PCDM_Reader_CreateDocument, None, PCDM_Reader)
PCDM_Reader.GetStatus = new_instancemethod(_PCDM.PCDM_Reader_GetStatus, None, PCDM_Reader)
PCDM_Reader.Read = new_instancemethod(_PCDM.PCDM_Reader_Read, None, PCDM_Reader)
PCDM_Reader_swigregister = _PCDM.PCDM_Reader_swigregister
PCDM_Reader_swigregister(PCDM_Reader)

class PCDM_Reference(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DocumentVersion(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _PCDM.PCDM_Reference_DocumentVersion(self, *args)


    def FileName(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _PCDM.PCDM_Reference_FileName(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param aReferenceIdentifier:
        	:type aReferenceIdentifier: int
        	:param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:param aDocumentVersion:
        	:type aDocumentVersion: int
        	:rtype: None
        """
        _PCDM.PCDM_Reference_swiginit(self, _PCDM.new_PCDM_Reference(*args))

    def ReferenceIdentifier(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _PCDM.PCDM_Reference_ReferenceIdentifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_Reference
PCDM_Reference.DocumentVersion = new_instancemethod(_PCDM.PCDM_Reference_DocumentVersion, None, PCDM_Reference)
PCDM_Reference.FileName = new_instancemethod(_PCDM.PCDM_Reference_FileName, None, PCDM_Reference)
PCDM_Reference.ReferenceIdentifier = new_instancemethod(_PCDM.PCDM_Reference_ReferenceIdentifier, None, PCDM_Reference)
PCDM_Reference_swigregister = _PCDM.PCDM_Reference_swigregister
PCDM_Reference_swigregister(PCDM_Reference)

class PCDM_ReferenceIterator(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(self, *args) -> "void":
        """
        :param aMetaData:
        	:type aMetaData: CDM_MetaData
        	:rtype: void
        """
        return _PCDM.PCDM_ReferenceIterator_Init(self, *args)


    def LoadReferences(self, *args) -> "void":
        """
        :param aDocument:
        	:type aDocument: CDM_Document
        	:param aMetaData:
        	:type aMetaData: CDM_MetaData
        	:param anApplication:
        	:type anApplication: CDM_Application
        	:param UseStorageConfiguration:
        	:type UseStorageConfiguration: bool
        	:rtype: None
        """
        return _PCDM.PCDM_ReferenceIterator_LoadReferences(self, *args)


    def __init__(self, *args):
        """
        * Warning! The constructor does not initialization.
        	:param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _PCDM.PCDM_ReferenceIterator_swiginit(self, _PCDM.new_PCDM_ReferenceIterator(*args))


    @staticmethod
    def DownCast(t):
      return Handle_PCDM_ReferenceIterator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_ReferenceIterator
PCDM_ReferenceIterator.Init = new_instancemethod(_PCDM.PCDM_ReferenceIterator_Init, None, PCDM_ReferenceIterator)
PCDM_ReferenceIterator.LoadReferences = new_instancemethod(_PCDM.PCDM_ReferenceIterator_LoadReferences, None, PCDM_ReferenceIterator)
PCDM_ReferenceIterator_swigregister = _PCDM.PCDM_ReferenceIterator_swigregister
PCDM_ReferenceIterator_swigregister(PCDM_ReferenceIterator)

class PCDM_Writer(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Write(self, *args) -> "void":
        """
        :param aDocument:
        	:type aDocument: CDM_Document
        	:param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:rtype: void
        * Write <theDocument> to theOStream
        	:param theDocument:
        	:type theDocument: CDM_Document
        	:param theOStream:
        	:type theOStream: Standard_OStream
        	:rtype: void
        """
        return _PCDM.PCDM_Writer_Write(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_PCDM_Writer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_Writer
PCDM_Writer.Write = new_instancemethod(_PCDM.PCDM_Writer_Write, None, PCDM_Writer)
PCDM_Writer_swigregister = _PCDM.PCDM_Writer_swigregister
PCDM_Writer_swigregister(PCDM_Writer)

class PCDM_ReadWriter_1(PCDM_ReadWriter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _PCDM.PCDM_ReadWriter_1_swiginit(self, _PCDM.new_PCDM_ReadWriter_1(*args))


    @staticmethod
    def DownCast(t):
      return Handle_PCDM_ReadWriter_1_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_ReadWriter_1
PCDM_ReadWriter_1_swigregister = _PCDM.PCDM_ReadWriter_1_swigregister
PCDM_ReadWriter_1_swigregister(PCDM_ReadWriter_1)

class PCDM_RetrievalDriver(PCDM_Reader):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DocumentVersion(*args) -> "Standard_Integer":
        """
        :param theFileName:
        	:type theFileName: TCollection_ExtendedString
        	:param theMsgDriver:
        	:type theMsgDriver: Message_Messenger
        	:rtype: int
        """
        return _PCDM.PCDM_RetrievalDriver_DocumentVersion(*args)

    DocumentVersion = staticmethod(DocumentVersion)

    def GetFormat(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _PCDM.PCDM_RetrievalDriver_GetFormat(self, *args)


    def ReferenceCounter(*args) -> "Standard_Integer":
        """
        :param theFileName:
        	:type theFileName: TCollection_ExtendedString
        	:param theMsgDriver:
        	:type theMsgDriver: Message_Messenger
        	:rtype: int
        """
        return _PCDM.PCDM_RetrievalDriver_ReferenceCounter(*args)

    ReferenceCounter = staticmethod(ReferenceCounter)

    def SetFormat(self, *args) -> "void":
        """
        :param aformat:
        	:type aformat: TCollection_ExtendedString
        	:rtype: None
        """
        return _PCDM.PCDM_RetrievalDriver_SetFormat(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_PCDM_RetrievalDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_RetrievalDriver
PCDM_RetrievalDriver.GetFormat = new_instancemethod(_PCDM.PCDM_RetrievalDriver_GetFormat, None, PCDM_RetrievalDriver)
PCDM_RetrievalDriver.SetFormat = new_instancemethod(_PCDM.PCDM_RetrievalDriver_SetFormat, None, PCDM_RetrievalDriver)
PCDM_RetrievalDriver_swigregister = _PCDM.PCDM_RetrievalDriver_swigregister
PCDM_RetrievalDriver_swigregister(PCDM_RetrievalDriver)

def PCDM_RetrievalDriver_DocumentVersion(*args) -> "Standard_Integer":
    """
    :param theFileName:
    	:type theFileName: TCollection_ExtendedString
    	:param theMsgDriver:
    	:type theMsgDriver: Message_Messenger
    	:rtype: int
    """
    return _PCDM.PCDM_RetrievalDriver_DocumentVersion(*args)

def PCDM_RetrievalDriver_ReferenceCounter(*args) -> "Standard_Integer":
    """
    :param theFileName:
    	:type theFileName: TCollection_ExtendedString
    	:param theMsgDriver:
    	:type theMsgDriver: Message_Messenger
    	:rtype: int
    """
    return _PCDM.PCDM_RetrievalDriver_ReferenceCounter(*args)

class PCDM_StorageDriver(PCDM_Writer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetFormat(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _PCDM.PCDM_StorageDriver_GetFormat(self, *args)


    def GetStoreStatus(self, *args) -> "PCDM_StoreStatus":
        """:rtype: PCDM_StoreStatus"""
        return _PCDM.PCDM_StorageDriver_GetStoreStatus(self, *args)


    def IsError(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _PCDM.PCDM_StorageDriver_IsError(self, *args)


    def Make(self, *args) -> "void":
        """
        * raises NotImplemented.
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:rtype: opencascade::handle<PCDM_Document>
        * By default, puts in the Sequence the document returns by the previous Make method.
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:param Documents:
        	:type Documents: PCDM_SequenceOfDocument
        	:rtype: void
        """
        return _PCDM.PCDM_StorageDriver_Make(self, *args)


    def SetFormat(self, *args) -> "void":
        """
        :param aformat:
        	:type aformat: TCollection_ExtendedString
        	:rtype: None
        """
        return _PCDM.PCDM_StorageDriver_SetFormat(self, *args)


    def SetIsError(self, *args) -> "void":
        """
        :param theIsError:
        	:type theIsError: bool
        	:rtype: None
        """
        return _PCDM.PCDM_StorageDriver_SetIsError(self, *args)


    def SetStoreStatus(self, *args) -> "void":
        """
        :param theStoreStatus:
        	:type theStoreStatus: PCDM_StoreStatus
        	:rtype: None
        """
        return _PCDM.PCDM_StorageDriver_SetStoreStatus(self, *args)


    def Write(self, *args) -> "void":
        """
        * Warning! raises DriverError if an error occurs during inside the Make method. stores the content of the Document into a new file. //! by default Write will use Make method to build a persistent document and the Schema method to write the persistent document.
        	:param aDocument:
        	:type aDocument: CDM_Document
        	:param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:rtype: void
        * Write <theDocument> to theOStream
        	:param theDocument:
        	:type theDocument: CDM_Document
        	:param theOStream:
        	:type theOStream: Standard_OStream
        	:rtype: void
        """
        return _PCDM.PCDM_StorageDriver_Write(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_PCDM_StorageDriver_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        _PCDM.PCDM_StorageDriver_swiginit(self, _PCDM.new_PCDM_StorageDriver())
    __swig_destroy__ = _PCDM.delete_PCDM_StorageDriver
PCDM_StorageDriver.GetFormat = new_instancemethod(_PCDM.PCDM_StorageDriver_GetFormat, None, PCDM_StorageDriver)
PCDM_StorageDriver.GetStoreStatus = new_instancemethod(_PCDM.PCDM_StorageDriver_GetStoreStatus, None, PCDM_StorageDriver)
PCDM_StorageDriver.IsError = new_instancemethod(_PCDM.PCDM_StorageDriver_IsError, None, PCDM_StorageDriver)
PCDM_StorageDriver.Make = new_instancemethod(_PCDM.PCDM_StorageDriver_Make, None, PCDM_StorageDriver)
PCDM_StorageDriver.SetFormat = new_instancemethod(_PCDM.PCDM_StorageDriver_SetFormat, None, PCDM_StorageDriver)
PCDM_StorageDriver.SetIsError = new_instancemethod(_PCDM.PCDM_StorageDriver_SetIsError, None, PCDM_StorageDriver)
PCDM_StorageDriver.SetStoreStatus = new_instancemethod(_PCDM.PCDM_StorageDriver_SetStoreStatus, None, PCDM_StorageDriver)
PCDM_StorageDriver.Write = new_instancemethod(_PCDM.PCDM_StorageDriver_Write, None, PCDM_StorageDriver)
PCDM_StorageDriver_swigregister = _PCDM.PCDM_StorageDriver_swigregister
PCDM_StorageDriver_swigregister(PCDM_StorageDriver)



