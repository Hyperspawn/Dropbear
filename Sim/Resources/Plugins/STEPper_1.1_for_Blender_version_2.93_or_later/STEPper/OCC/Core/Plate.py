# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Plate module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_plate.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Plate.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Plate')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Plate')
    _Plate = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Plate', [dirname(__file__)])
        except ImportError:
            import _Plate
            return _Plate
        try:
            _mod = imp.load_module('_Plate', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Plate = swig_import_helper()
    del swig_import_helper
else:
    import _Plate
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Plate.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Plate.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Plate.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Plate.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Plate.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Plate.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Plate.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Plate.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Plate.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Plate.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Plate.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Plate.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Plate.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Plate.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Plate.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Plate.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Plate.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Plate.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Plate.process_exception(error, method_name, class_name)
process_exception = _Plate.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message

def Handle_Plate_HArray1OfPinpointConstraint_Create() -> "opencascade::handle< Plate_HArray1OfPinpointConstraint >":
    return _Plate.Handle_Plate_HArray1OfPinpointConstraint_Create()
Handle_Plate_HArray1OfPinpointConstraint_Create = _Plate.Handle_Plate_HArray1OfPinpointConstraint_Create

def Handle_Plate_HArray1OfPinpointConstraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Plate_HArray1OfPinpointConstraint >":
    return _Plate.Handle_Plate_HArray1OfPinpointConstraint_DownCast(t)
Handle_Plate_HArray1OfPinpointConstraint_DownCast = _Plate.Handle_Plate_HArray1OfPinpointConstraint_DownCast

def Handle_Plate_HArray1OfPinpointConstraint_IsNull(t: 'opencascade::handle< Plate_HArray1OfPinpointConstraint > const &') -> "bool":
    return _Plate.Handle_Plate_HArray1OfPinpointConstraint_IsNull(t)
Handle_Plate_HArray1OfPinpointConstraint_IsNull = _Plate.Handle_Plate_HArray1OfPinpointConstraint_IsNull
class Plate_Array1OfPinpointConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Plate.Plate_Array1OfPinpointConstraint_swiginit(self, _Plate.new_Plate_Array1OfPinpointConstraint(*args))
    __swig_destroy__ = _Plate.delete_Plate_Array1OfPinpointConstraint

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Plate_Array1OfPinpointConstraint.begin = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_begin, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.end = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_end, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.cbegin = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_cbegin, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.cend = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_cend, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Init = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Init, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Size = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Size, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Length = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Length, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.IsEmpty = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_IsEmpty, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Lower = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Lower, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Upper = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Upper, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.IsDeletable = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_IsDeletable, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.IsAllocated = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_IsAllocated, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Assign = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Assign, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Move = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Move, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Set = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Set, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.First = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_First, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.ChangeFirst = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_ChangeFirst, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Last = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Last, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.ChangeLast = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_ChangeLast, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Value = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Value, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.ChangeValue = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_ChangeValue, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.__call__ = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint___call__, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.SetValue = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_SetValue, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint.Resize = new_instancemethod(_Plate.Plate_Array1OfPinpointConstraint_Resize, None, Plate_Array1OfPinpointConstraint)
Plate_Array1OfPinpointConstraint_swigregister = _Plate.Plate_Array1OfPinpointConstraint_swigregister
Plate_Array1OfPinpointConstraint_swigregister(Plate_Array1OfPinpointConstraint)

class Plate_SequenceOfPinpointConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Plate.Plate_SequenceOfPinpointConstraint_swiginit(self, _Plate.new_Plate_SequenceOfPinpointConstraint(*args))
    delNode = staticmethod(_Plate.Plate_SequenceOfPinpointConstraint_delNode)
    __swig_destroy__ = _Plate.delete_Plate_SequenceOfPinpointConstraint
Plate_SequenceOfPinpointConstraint.begin = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_begin, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.end = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_end, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.cbegin = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_cbegin, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.cend = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_cend, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Size = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Size, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Length = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Length, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Lower = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Lower, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Upper = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Upper, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.IsEmpty = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_IsEmpty, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Reverse = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Reverse, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Exchange = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Exchange, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Clear = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Clear, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Assign = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Assign, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Set = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Set, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Remove = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Remove, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Append = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Append, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Prepend = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Prepend, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.InsertBefore = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_InsertBefore, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.InsertAfter = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_InsertAfter, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Split = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Split, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.First = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_First, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.ChangeFirst = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_ChangeFirst, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Last = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Last, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.ChangeLast = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_ChangeLast, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.Value = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_Value, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.ChangeValue = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_ChangeValue, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.__call__ = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint___call__, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint.SetValue = new_instancemethod(_Plate.Plate_SequenceOfPinpointConstraint_SetValue, None, Plate_SequenceOfPinpointConstraint)
Plate_SequenceOfPinpointConstraint_swigregister = _Plate.Plate_SequenceOfPinpointConstraint_swigregister
Plate_SequenceOfPinpointConstraint_swigregister(Plate_SequenceOfPinpointConstraint)

def Plate_SequenceOfPinpointConstraint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Plate.Plate_SequenceOfPinpointConstraint_delNode(theNode, theAl)
Plate_SequenceOfPinpointConstraint_delNode = _Plate.Plate_SequenceOfPinpointConstraint_delNode

class Plate_SequenceOfLinearXYZConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Plate.Plate_SequenceOfLinearXYZConstraint_swiginit(self, _Plate.new_Plate_SequenceOfLinearXYZConstraint(*args))
    delNode = staticmethod(_Plate.Plate_SequenceOfLinearXYZConstraint_delNode)
    __swig_destroy__ = _Plate.delete_Plate_SequenceOfLinearXYZConstraint
Plate_SequenceOfLinearXYZConstraint.begin = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_begin, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.end = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_end, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.cbegin = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_cbegin, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.cend = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_cend, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Size = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Size, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Length = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Length, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Lower = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Lower, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Upper = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Upper, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.IsEmpty = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_IsEmpty, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Reverse = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Reverse, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Exchange = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Exchange, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Clear = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Clear, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Assign = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Assign, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Set = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Set, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Remove = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Remove, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Append = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Append, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Prepend = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Prepend, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.InsertBefore = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_InsertBefore, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.InsertAfter = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_InsertAfter, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Split = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Split, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.First = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_First, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.ChangeFirst = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_ChangeFirst, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Last = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Last, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.ChangeLast = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_ChangeLast, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.Value = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_Value, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.ChangeValue = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_ChangeValue, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.__call__ = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint___call__, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint.SetValue = new_instancemethod(_Plate.Plate_SequenceOfLinearXYZConstraint_SetValue, None, Plate_SequenceOfLinearXYZConstraint)
Plate_SequenceOfLinearXYZConstraint_swigregister = _Plate.Plate_SequenceOfLinearXYZConstraint_swigregister
Plate_SequenceOfLinearXYZConstraint_swigregister(Plate_SequenceOfLinearXYZConstraint)

def Plate_SequenceOfLinearXYZConstraint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Plate.Plate_SequenceOfLinearXYZConstraint_delNode(theNode, theAl)
Plate_SequenceOfLinearXYZConstraint_delNode = _Plate.Plate_SequenceOfLinearXYZConstraint_delNode

class Plate_SequenceOfLinearScalarConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Plate.Plate_SequenceOfLinearScalarConstraint_swiginit(self, _Plate.new_Plate_SequenceOfLinearScalarConstraint(*args))
    delNode = staticmethod(_Plate.Plate_SequenceOfLinearScalarConstraint_delNode)
    __swig_destroy__ = _Plate.delete_Plate_SequenceOfLinearScalarConstraint
Plate_SequenceOfLinearScalarConstraint.begin = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_begin, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.end = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_end, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.cbegin = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_cbegin, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.cend = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_cend, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Size = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Size, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Length = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Length, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Lower = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Lower, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Upper = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Upper, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.IsEmpty = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_IsEmpty, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Reverse = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Reverse, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Exchange = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Exchange, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Clear = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Clear, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Assign = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Assign, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Set = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Set, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Remove = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Remove, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Append = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Append, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Prepend = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Prepend, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.InsertBefore = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_InsertBefore, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.InsertAfter = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_InsertAfter, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Split = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Split, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.First = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_First, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.ChangeFirst = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_ChangeFirst, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Last = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Last, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.ChangeLast = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_ChangeLast, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.Value = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_Value, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.ChangeValue = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_ChangeValue, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.__call__ = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint___call__, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint.SetValue = new_instancemethod(_Plate.Plate_SequenceOfLinearScalarConstraint_SetValue, None, Plate_SequenceOfLinearScalarConstraint)
Plate_SequenceOfLinearScalarConstraint_swigregister = _Plate.Plate_SequenceOfLinearScalarConstraint_swigregister
Plate_SequenceOfLinearScalarConstraint_swigregister(Plate_SequenceOfLinearScalarConstraint)

def Plate_SequenceOfLinearScalarConstraint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Plate.Plate_SequenceOfLinearScalarConstraint_delNode(theNode, theAl)
Plate_SequenceOfLinearScalarConstraint_delNode = _Plate.Plate_SequenceOfLinearScalarConstraint_delNode

class Plate_D1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DU(self, *args) -> "gp_XYZ const":
        """:rtype: gp_XYZ"""
        return _Plate.Plate_D1_DU(self, *args)


    def DV(self, *args) -> "gp_XYZ const":
        """:rtype: gp_XYZ"""
        return _Plate.Plate_D1_DV(self, *args)


    def __init__(self, *args):
        """
        :param du:
        	:type du: gp_XYZ
        	:param dv:
        	:type dv: gp_XYZ
        	:rtype: None
        :param ref:
        	:type ref: Plate_D1
        	:rtype: None
        """
        _Plate.Plate_D1_swiginit(self, _Plate.new_Plate_D1(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_D1
Plate_D1.DU = new_instancemethod(_Plate.Plate_D1_DU, None, Plate_D1)
Plate_D1.DV = new_instancemethod(_Plate.Plate_D1_DV, None, Plate_D1)
Plate_D1_swigregister = _Plate.Plate_D1_swigregister
Plate_D1_swigregister(Plate_D1)

class Plate_D2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param duu:
        	:type duu: gp_XYZ
        	:param duv:
        	:type duv: gp_XYZ
        	:param dvv:
        	:type dvv: gp_XYZ
        	:rtype: None
        :param ref:
        	:type ref: Plate_D2
        	:rtype: None
        """
        _Plate.Plate_D2_swiginit(self, _Plate.new_Plate_D2(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_D2
Plate_D2_swigregister = _Plate.Plate_D2_swigregister
Plate_D2_swigregister(Plate_D2)

class Plate_D3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param duuu:
        	:type duuu: gp_XYZ
        	:param duuv:
        	:type duuv: gp_XYZ
        	:param duvv:
        	:type duvv: gp_XYZ
        	:param dvvv:
        	:type dvvv: gp_XYZ
        	:rtype: None
        :param ref:
        	:type ref: Plate_D3
        	:rtype: None
        """
        _Plate.Plate_D3_swiginit(self, _Plate.new_Plate_D3(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_D3
Plate_D3_swigregister = _Plate.Plate_D3_swigregister
Plate_D3_swigregister(Plate_D3)

class Plate_FreeGtoCConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetPPC(self, *args) -> "Plate_PinpointConstraint const &":
        """
        :param Index:
        	:type Index: int
        	:rtype: Plate_PinpointConstraint
        """
        return _Plate.Plate_FreeGtoCConstraint_GetPPC(self, *args)


    def LSC(self, *args) -> "Plate_LinearScalarConstraint const &":
        """
        :param Index:
        	:type Index: int
        	:rtype: Plate_LinearScalarConstraint
        """
        return _Plate.Plate_FreeGtoCConstraint_LSC(self, *args)


    def __init__(self, *args):
        """
        :param point2d:
        	:type point2d: gp_XY
        	:param D1S:
        	:type D1S: Plate_D1
        	:param D1T:
        	:type D1T: Plate_D1
        	:param IncrementalLoad: default value is 1.0
        	:type IncrementalLoad: float
        	:param orientation: default value is 0
        	:type orientation: int
        	:rtype: None
        :param point2d:
        	:type point2d: gp_XY
        	:param D1S:
        	:type D1S: Plate_D1
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2S:
        	:type D2S: Plate_D2
        	:param D2T:
        	:type D2T: Plate_D2
        	:param IncrementalLoad: default value is 1.0
        	:type IncrementalLoad: float
        	:param orientation: default value is 0
        	:type orientation: int
        	:rtype: None
        :param point2d:
        	:type point2d: gp_XY
        	:param D1S:
        	:type D1S: Plate_D1
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2S:
        	:type D2S: Plate_D2
        	:param D2T:
        	:type D2T: Plate_D2
        	:param D3S:
        	:type D3S: Plate_D3
        	:param D3T:
        	:type D3T: Plate_D3
        	:param IncrementalLoad: default value is 1.0
        	:type IncrementalLoad: float
        	:param orientation: default value is 0
        	:type orientation: int
        	:rtype: None
        """
        _Plate.Plate_FreeGtoCConstraint_swiginit(self, _Plate.new_Plate_FreeGtoCConstraint(*args))

    def nb_LSC(self, *args) -> "Standard_Integer const &":
        """:rtype: int"""
        return _Plate.Plate_FreeGtoCConstraint_nb_LSC(self, *args)


    def nb_PPC(self, *args) -> "Standard_Integer const &":
        """:rtype: int"""
        return _Plate.Plate_FreeGtoCConstraint_nb_PPC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_FreeGtoCConstraint
Plate_FreeGtoCConstraint.GetPPC = new_instancemethod(_Plate.Plate_FreeGtoCConstraint_GetPPC, None, Plate_FreeGtoCConstraint)
Plate_FreeGtoCConstraint.LSC = new_instancemethod(_Plate.Plate_FreeGtoCConstraint_LSC, None, Plate_FreeGtoCConstraint)
Plate_FreeGtoCConstraint.nb_LSC = new_instancemethod(_Plate.Plate_FreeGtoCConstraint_nb_LSC, None, Plate_FreeGtoCConstraint)
Plate_FreeGtoCConstraint.nb_PPC = new_instancemethod(_Plate.Plate_FreeGtoCConstraint_nb_PPC, None, Plate_FreeGtoCConstraint)
Plate_FreeGtoCConstraint_swigregister = _Plate.Plate_FreeGtoCConstraint_swigregister
Plate_FreeGtoCConstraint_swigregister(Plate_FreeGtoCConstraint)

class Plate_GlobalTranslationConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def LXYZC(self, *args) -> "Plate_LinearXYZConstraint const &":
        """:rtype: Plate_LinearXYZConstraint"""
        return _Plate.Plate_GlobalTranslationConstraint_LXYZC(self, *args)


    def __init__(self, *args):
        """
        :param SOfXY:
        	:type SOfXY: TColgp_SequenceOfXY
        	:rtype: None
        """
        _Plate.Plate_GlobalTranslationConstraint_swiginit(self, _Plate.new_Plate_GlobalTranslationConstraint(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_GlobalTranslationConstraint
Plate_GlobalTranslationConstraint.LXYZC = new_instancemethod(_Plate.Plate_GlobalTranslationConstraint_LXYZC, None, Plate_GlobalTranslationConstraint)
Plate_GlobalTranslationConstraint_swigregister = _Plate.Plate_GlobalTranslationConstraint_swigregister
Plate_GlobalTranslationConstraint_swigregister(Plate_GlobalTranslationConstraint)

class Plate_GtoCConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def D1SurfInit(self, *args) -> "Plate_D1 const &":
        """:rtype: Plate_D1"""
        return _Plate.Plate_GtoCConstraint_D1SurfInit(self, *args)


    def GetPPC(self, *args) -> "Plate_PinpointConstraint const &":
        """
        :param Index:
        	:type Index: int
        	:rtype: Plate_PinpointConstraint
        """
        return _Plate.Plate_GtoCConstraint_GetPPC(self, *args)


    def __init__(self, *args):
        """
        :param ref:
        	:type ref: Plate_GtoCConstraint
        	:rtype: None
        :param point2d:
        	:type point2d: gp_XY
        	:param D1S:
        	:type D1S: Plate_D1
        	:param D1T:
        	:type D1T: Plate_D1
        	:rtype: None
        :param point2d:
        	:type point2d: gp_XY
        	:param D1S:
        	:type D1S: Plate_D1
        	:param D1T:
        	:type D1T: Plate_D1
        	:param nP:
        	:type nP: gp_XYZ
        	:rtype: None
        :param point2d:
        	:type point2d: gp_XY
        	:param D1S:
        	:type D1S: Plate_D1
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2S:
        	:type D2S: Plate_D2
        	:param D2T:
        	:type D2T: Plate_D2
        	:rtype: None
        :param point2d:
        	:type point2d: gp_XY
        	:param D1S:
        	:type D1S: Plate_D1
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2S:
        	:type D2S: Plate_D2
        	:param D2T:
        	:type D2T: Plate_D2
        	:param nP:
        	:type nP: gp_XYZ
        	:rtype: None
        :param point2d:
        	:type point2d: gp_XY
        	:param D1S:
        	:type D1S: Plate_D1
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2S:
        	:type D2S: Plate_D2
        	:param D2T:
        	:type D2T: Plate_D2
        	:param D3S:
        	:type D3S: Plate_D3
        	:param D3T:
        	:type D3T: Plate_D3
        	:rtype: None
        :param point2d:
        	:type point2d: gp_XY
        	:param D1S:
        	:type D1S: Plate_D1
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2S:
        	:type D2S: Plate_D2
        	:param D2T:
        	:type D2T: Plate_D2
        	:param D3S:
        	:type D3S: Plate_D3
        	:param D3T:
        	:type D3T: Plate_D3
        	:param nP:
        	:type nP: gp_XYZ
        	:rtype: None
        """
        _Plate.Plate_GtoCConstraint_swiginit(self, _Plate.new_Plate_GtoCConstraint(*args))

    def nb_PPC(self, *args) -> "Standard_Integer const &":
        """:rtype: int"""
        return _Plate.Plate_GtoCConstraint_nb_PPC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_GtoCConstraint
Plate_GtoCConstraint.D1SurfInit = new_instancemethod(_Plate.Plate_GtoCConstraint_D1SurfInit, None, Plate_GtoCConstraint)
Plate_GtoCConstraint.GetPPC = new_instancemethod(_Plate.Plate_GtoCConstraint_GetPPC, None, Plate_GtoCConstraint)
Plate_GtoCConstraint.nb_PPC = new_instancemethod(_Plate.Plate_GtoCConstraint_nb_PPC, None, Plate_GtoCConstraint)
Plate_GtoCConstraint_swigregister = _Plate.Plate_GtoCConstraint_swigregister
Plate_GtoCConstraint_swigregister(Plate_GtoCConstraint)

class Plate_LineConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def LSC(self, *args) -> "Plate_LinearScalarConstraint const &":
        """:rtype: Plate_LinearScalarConstraint"""
        return _Plate.Plate_LineConstraint_LSC(self, *args)


    def __init__(self, *args):
        """
        :param point2d:
        	:type point2d: gp_XY
        	:param lin:
        	:type lin: gp_Lin
        	:param iu: default value is 0
        	:type iu: int
        	:param iv: default value is 0
        	:type iv: int
        	:rtype: None
        """
        _Plate.Plate_LineConstraint_swiginit(self, _Plate.new_Plate_LineConstraint(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_LineConstraint
Plate_LineConstraint.LSC = new_instancemethod(_Plate.Plate_LineConstraint_LSC, None, Plate_LineConstraint)
Plate_LineConstraint_swigregister = _Plate.Plate_LineConstraint_swigregister
Plate_LineConstraint_swigregister(Plate_LineConstraint)

class Plate_LinearScalarConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Coeff(self, *args) -> "TColgp_Array2OfXYZ const &":
        """:rtype: TColgp_Array2OfXYZ"""
        return _Plate.Plate_LinearScalarConstraint_Coeff(self, *args)


    def GetPPC(self, *args) -> "Plate_Array1OfPinpointConstraint const &":
        """:rtype: Plate_Array1OfPinpointConstraint"""
        return _Plate.Plate_LinearScalarConstraint_GetPPC(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param thePPC1:
        	:type thePPC1: Plate_PinpointConstraint
        	:param theCoeff:
        	:type theCoeff: gp_XYZ
        	:rtype: None
        :param thePPC:
        	:type thePPC: Plate_Array1OfPinpointConstraint
        	:param theCoeff:
        	:type theCoeff: TColgp_Array1OfXYZ
        	:rtype: None
        :param thePPC:
        	:type thePPC: Plate_Array1OfPinpointConstraint
        	:param theCoeff:
        	:type theCoeff: TColgp_Array2OfXYZ
        	:rtype: None
        :param ColLen:
        	:type ColLen: int
        	:param RowLen:
        	:type RowLen: int
        	:rtype: None
        """
        _Plate.Plate_LinearScalarConstraint_swiginit(self, _Plate.new_Plate_LinearScalarConstraint(*args))

    def SetCoeff(self, *args) -> "void":
        """
        * Sets the coeff of index (Row,Col) to Value raise if Row (respectively Col) is greater than the Row (respectively Column) length of coeff
        	:param Row:
        	:type Row: int
        	:param Col:
        	:type Col: int
        	:param Value:
        	:type Value: gp_XYZ
        	:rtype: None
        """
        return _Plate.Plate_LinearScalarConstraint_SetCoeff(self, *args)


    def SetPPC(self, *args) -> "void":
        """
        * Sets the PinPointConstraint of index Index to Value raise if Index is greater than the length of PPC or the Row length of coeff or lower than 1
        	:param Index:
        	:type Index: int
        	:param Value:
        	:type Value: Plate_PinpointConstraint
        	:rtype: None
        """
        return _Plate.Plate_LinearScalarConstraint_SetPPC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_LinearScalarConstraint
Plate_LinearScalarConstraint.Coeff = new_instancemethod(_Plate.Plate_LinearScalarConstraint_Coeff, None, Plate_LinearScalarConstraint)
Plate_LinearScalarConstraint.GetPPC = new_instancemethod(_Plate.Plate_LinearScalarConstraint_GetPPC, None, Plate_LinearScalarConstraint)
Plate_LinearScalarConstraint.SetCoeff = new_instancemethod(_Plate.Plate_LinearScalarConstraint_SetCoeff, None, Plate_LinearScalarConstraint)
Plate_LinearScalarConstraint.SetPPC = new_instancemethod(_Plate.Plate_LinearScalarConstraint_SetPPC, None, Plate_LinearScalarConstraint)
Plate_LinearScalarConstraint_swigregister = _Plate.Plate_LinearScalarConstraint_swigregister
Plate_LinearScalarConstraint_swigregister(Plate_LinearScalarConstraint)

class Plate_LinearXYZConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Coeff(self, *args) -> "TColStd_Array2OfReal const &":
        """:rtype: TColStd_Array2OfReal"""
        return _Plate.Plate_LinearXYZConstraint_Coeff(self, *args)


    def GetPPC(self, *args) -> "Plate_Array1OfPinpointConstraint const &":
        """:rtype: Plate_Array1OfPinpointConstraint"""
        return _Plate.Plate_LinearXYZConstraint_GetPPC(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param thePPC:
        	:type thePPC: Plate_Array1OfPinpointConstraint
        	:param theCoeff:
        	:type theCoeff: TColStd_Array1OfReal
        	:rtype: None
        :param thePPC:
        	:type thePPC: Plate_Array1OfPinpointConstraint
        	:param theCoeff:
        	:type theCoeff: TColStd_Array2OfReal
        	:rtype: None
        :param ColLen:
        	:type ColLen: int
        	:param RowLen:
        	:type RowLen: int
        	:rtype: None
        """
        _Plate.Plate_LinearXYZConstraint_swiginit(self, _Plate.new_Plate_LinearXYZConstraint(*args))

    def SetCoeff(self, *args) -> "void":
        """
        * Sets the coeff of index (Row,Col) to Value raise if Row (respectively Col) is greater than the Row (respectively Column) length of coeff
        	:param Row:
        	:type Row: int
        	:param Col:
        	:type Col: int
        	:param Value:
        	:type Value: float
        	:rtype: None
        """
        return _Plate.Plate_LinearXYZConstraint_SetCoeff(self, *args)


    def SetPPC(self, *args) -> "void":
        """
        * Sets the PinPointConstraint of index Index to Value raise if Index is greater than the length of PPC or the Row length of coeff or lower than 1
        	:param Index:
        	:type Index: int
        	:param Value:
        	:type Value: Plate_PinpointConstraint
        	:rtype: None
        """
        return _Plate.Plate_LinearXYZConstraint_SetPPC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_LinearXYZConstraint
Plate_LinearXYZConstraint.Coeff = new_instancemethod(_Plate.Plate_LinearXYZConstraint_Coeff, None, Plate_LinearXYZConstraint)
Plate_LinearXYZConstraint.GetPPC = new_instancemethod(_Plate.Plate_LinearXYZConstraint_GetPPC, None, Plate_LinearXYZConstraint)
Plate_LinearXYZConstraint.SetCoeff = new_instancemethod(_Plate.Plate_LinearXYZConstraint_SetCoeff, None, Plate_LinearXYZConstraint)
Plate_LinearXYZConstraint.SetPPC = new_instancemethod(_Plate.Plate_LinearXYZConstraint_SetPPC, None, Plate_LinearXYZConstraint)
Plate_LinearXYZConstraint_swigregister = _Plate.Plate_LinearXYZConstraint_swigregister
Plate_LinearXYZConstraint_swigregister(Plate_LinearXYZConstraint)

class Plate_PinpointConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Idu(self, *args) -> "Standard_Integer const &":
        """:rtype: int"""
        return _Plate.Plate_PinpointConstraint_Idu(self, *args)


    def Idv(self, *args) -> "Standard_Integer const &":
        """:rtype: int"""
        return _Plate.Plate_PinpointConstraint_Idv(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param point2d:
        	:type point2d: gp_XY
        	:param ImposedValue:
        	:type ImposedValue: gp_XYZ
        	:param iu: default value is 0
        	:type iu: int
        	:param iv: default value is 0
        	:type iv: int
        	:rtype: None
        """
        _Plate.Plate_PinpointConstraint_swiginit(self, _Plate.new_Plate_PinpointConstraint(*args))

    def Pnt2d(self, *args) -> "gp_XY const":
        """:rtype: gp_XY"""
        return _Plate.Plate_PinpointConstraint_Pnt2d(self, *args)


    def Value(self, *args) -> "gp_XYZ const":
        """:rtype: gp_XYZ"""
        return _Plate.Plate_PinpointConstraint_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_PinpointConstraint
Plate_PinpointConstraint.Idu = new_instancemethod(_Plate.Plate_PinpointConstraint_Idu, None, Plate_PinpointConstraint)
Plate_PinpointConstraint.Idv = new_instancemethod(_Plate.Plate_PinpointConstraint_Idv, None, Plate_PinpointConstraint)
Plate_PinpointConstraint.Pnt2d = new_instancemethod(_Plate.Plate_PinpointConstraint_Pnt2d, None, Plate_PinpointConstraint)
Plate_PinpointConstraint.Value = new_instancemethod(_Plate.Plate_PinpointConstraint_Value, None, Plate_PinpointConstraint)
Plate_PinpointConstraint_swigregister = _Plate.Plate_PinpointConstraint_swigregister
Plate_PinpointConstraint_swigregister(Plate_PinpointConstraint)

class Plate_PlaneConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def LSC(self, *args) -> "Plate_LinearScalarConstraint const &":
        """:rtype: Plate_LinearScalarConstraint"""
        return _Plate.Plate_PlaneConstraint_LSC(self, *args)


    def __init__(self, *args):
        """
        :param point2d:
        	:type point2d: gp_XY
        	:param pln:
        	:type pln: gp_Pln
        	:param iu: default value is 0
        	:type iu: int
        	:param iv: default value is 0
        	:type iv: int
        	:rtype: None
        """
        _Plate.Plate_PlaneConstraint_swiginit(self, _Plate.new_Plate_PlaneConstraint(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_PlaneConstraint
Plate_PlaneConstraint.LSC = new_instancemethod(_Plate.Plate_PlaneConstraint_LSC, None, Plate_PlaneConstraint)
Plate_PlaneConstraint_swigregister = _Plate.Plate_PlaneConstraint_swigregister
Plate_PlaneConstraint_swigregister(Plate_PlaneConstraint)

class Plate_Plate(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CoefPol(self, *args) -> "void":
        """
        :param Coefs:
        	:type Coefs: TColgp_HArray2OfXYZ
        	:rtype: None
        """
        return _Plate.Plate_Plate_CoefPol(self, *args)


    def Continuity(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _Plate.Plate_Plate_Continuity(self, *args)


    def Copy(self, *args) -> "Plate_Plate &":
        """
        :param Ref:
        	:type Ref: Plate_Plate
        	:rtype: Plate_Plate
        """
        return _Plate.Plate_Plate_Copy(self, *args)


    def Evaluate(self, *args) -> "gp_XYZ":
        """
        :param point2d:
        	:type point2d: gp_XY
        	:rtype: gp_XYZ
        """
        return _Plate.Plate_Plate_Evaluate(self, *args)


    def EvaluateDerivative(self, *args) -> "gp_XYZ":
        """
        :param point2d:
        	:type point2d: gp_XY
        	:param iu:
        	:type iu: int
        	:param iv:
        	:type iv: int
        	:rtype: gp_XYZ
        """
        return _Plate.Plate_Plate_EvaluateDerivative(self, *args)


    def Init(self, *args) -> "void":
        """
        * reset the Plate in the initial state ( same as after Create())
        	:rtype: None
        """
        return _Plate.Plate_Plate_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * returns True if all has been correctly done.
        	:rtype: bool
        """
        return _Plate.Plate_Plate_IsDone(self, *args)


    def Load(self, *args) -> "void":
        """
        :param PConst:
        	:type PConst: Plate_PinpointConstraint
        	:rtype: None
        :param LXYZConst:
        	:type LXYZConst: Plate_LinearXYZConstraint
        	:rtype: None
        :param LScalarConst:
        	:type LScalarConst: Plate_LinearScalarConstraint
        	:rtype: None
        :param GTConst:
        	:type GTConst: Plate_GlobalTranslationConstraint
        	:rtype: None
        :param LConst:
        	:type LConst: Plate_LineConstraint
        	:rtype: None
        :param PConst:
        	:type PConst: Plate_PlaneConstraint
        	:rtype: None
        :param SCConst:
        	:type SCConst: Plate_SampledCurveConstraint
        	:rtype: None
        :param GtoCConst:
        	:type GtoCConst: Plate_GtoCConstraint
        	:rtype: None
        :param FGtoCConst:
        	:type FGtoCConst: Plate_FreeGtoCConstraint
        	:rtype: None
        """
        return _Plate.Plate_Plate_Load(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Ref:
        	:type Ref: Plate_Plate
        	:rtype: None
        """
        _Plate.Plate_Plate_swiginit(self, _Plate.new_Plate_Plate(*args))

    def SetPolynomialPartOnly(self, *args) -> "void":
        """
        :param PPOnly: default value is Standard_True
        	:type PPOnly: bool
        	:rtype: None
        """
        return _Plate.Plate_Plate_SetPolynomialPartOnly(self, *args)


    def SolveTI(self, *args) -> "void":
        """
        :param ord: default value is 4
        	:type ord: int
        	:param anisotropie: default value is 1.0
        	:type anisotropie: float
        	:param aProgress: default value is opencascade::handle<Message_ProgressIndicator>()
        	:type aProgress: Message_ProgressIndicator
        	:rtype: None
        """
        return _Plate.Plate_Plate_SolveTI(self, *args)


    def UVBox(self, *args) -> "void":
        """
        :param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None
        """
        return _Plate.Plate_Plate_UVBox(self, *args)


    def UVConstraints(self, *args) -> "void":
        """
        :param Seq:
        	:type Seq: TColgp_SequenceOfXY
        	:rtype: None
        """
        return _Plate.Plate_Plate_UVConstraints(self, *args)


    def destroy(self, *args) -> "void":
        """:rtype: None"""
        return _Plate.Plate_Plate_destroy(self, *args)


    def Set(self, *args) -> "Plate_Plate &":
        """
        :param Ref:
        	:type Ref: Plate_Plate
        	:rtype: Plate_Plate
        """
        return _Plate.Plate_Plate_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_Plate
Plate_Plate.CoefPol = new_instancemethod(_Plate.Plate_Plate_CoefPol, None, Plate_Plate)
Plate_Plate.Continuity = new_instancemethod(_Plate.Plate_Plate_Continuity, None, Plate_Plate)
Plate_Plate.Copy = new_instancemethod(_Plate.Plate_Plate_Copy, None, Plate_Plate)
Plate_Plate.Evaluate = new_instancemethod(_Plate.Plate_Plate_Evaluate, None, Plate_Plate)
Plate_Plate.EvaluateDerivative = new_instancemethod(_Plate.Plate_Plate_EvaluateDerivative, None, Plate_Plate)
Plate_Plate.Init = new_instancemethod(_Plate.Plate_Plate_Init, None, Plate_Plate)
Plate_Plate.IsDone = new_instancemethod(_Plate.Plate_Plate_IsDone, None, Plate_Plate)
Plate_Plate.Load = new_instancemethod(_Plate.Plate_Plate_Load, None, Plate_Plate)
Plate_Plate.SetPolynomialPartOnly = new_instancemethod(_Plate.Plate_Plate_SetPolynomialPartOnly, None, Plate_Plate)
Plate_Plate.SolveTI = new_instancemethod(_Plate.Plate_Plate_SolveTI, None, Plate_Plate)
Plate_Plate.UVBox = new_instancemethod(_Plate.Plate_Plate_UVBox, None, Plate_Plate)
Plate_Plate.UVConstraints = new_instancemethod(_Plate.Plate_Plate_UVConstraints, None, Plate_Plate)
Plate_Plate.destroy = new_instancemethod(_Plate.Plate_Plate_destroy, None, Plate_Plate)
Plate_Plate.Set = new_instancemethod(_Plate.Plate_Plate_Set, None, Plate_Plate)
Plate_Plate_swigregister = _Plate.Plate_Plate_swigregister
Plate_Plate_swigregister(Plate_Plate)

class Plate_SampledCurveConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def LXYZC(self, *args) -> "Plate_LinearXYZConstraint const &":
        """:rtype: Plate_LinearXYZConstraint"""
        return _Plate.Plate_SampledCurveConstraint_LXYZC(self, *args)


    def __init__(self, *args):
        """
        :param SOPPC:
        	:type SOPPC: Plate_SequenceOfPinpointConstraint
        	:param n:
        	:type n: int
        	:rtype: None
        """
        _Plate.Plate_SampledCurveConstraint_swiginit(self, _Plate.new_Plate_SampledCurveConstraint(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_SampledCurveConstraint
Plate_SampledCurveConstraint.LXYZC = new_instancemethod(_Plate.Plate_SampledCurveConstraint_LXYZC, None, Plate_SampledCurveConstraint)
Plate_SampledCurveConstraint_swigregister = _Plate.Plate_SampledCurveConstraint_swigregister
Plate_SampledCurveConstraint_swigregister(Plate_SampledCurveConstraint)

class Plate_HArray1OfPinpointConstraint(Plate_Array1OfPinpointConstraint, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Plate.Plate_HArray1OfPinpointConstraint_swiginit(self, _Plate.new_Plate_HArray1OfPinpointConstraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Plate_HArray1OfPinpointConstraint_DownCast(t)

    __swig_destroy__ = _Plate.delete_Plate_HArray1OfPinpointConstraint
Plate_HArray1OfPinpointConstraint.Array1 = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_Array1, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint.ChangeArray1 = new_instancemethod(_Plate.Plate_HArray1OfPinpointConstraint_ChangeArray1, None, Plate_HArray1OfPinpointConstraint)
Plate_HArray1OfPinpointConstraint_swigregister = _Plate.Plate_HArray1OfPinpointConstraint_swigregister
Plate_HArray1OfPinpointConstraint_swigregister(Plate_HArray1OfPinpointConstraint)



