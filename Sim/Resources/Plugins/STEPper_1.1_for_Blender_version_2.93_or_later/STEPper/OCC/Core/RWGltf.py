# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
RWGltf module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_rwgltf.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _RWGltf.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWGltf')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWGltf')
    _RWGltf = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWGltf', [dirname(__file__)])
        except ImportError:
            import _RWGltf
            return _RWGltf
        try:
            _mod = imp.load_module('_RWGltf', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWGltf = swig_import_helper()
    del swig_import_helper
else:
    import _RWGltf
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWGltf.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_RWGltf.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_RWGltf.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_RWGltf.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_RWGltf.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_RWGltf.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_RWGltf.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_RWGltf.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_RWGltf.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_RWGltf.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_RWGltf.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_RWGltf.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_RWGltf.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_RWGltf.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_RWGltf.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_RWGltf.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_RWGltf.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _RWGltf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _RWGltf.process_exception(error, method_name, class_name)
process_exception = _RWGltf.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
RWGltf_GltfPrimitiveMode_UNKNOWN = _RWGltf.RWGltf_GltfPrimitiveMode_UNKNOWN
RWGltf_GltfPrimitiveMode_Points = _RWGltf.RWGltf_GltfPrimitiveMode_Points
RWGltf_GltfPrimitiveMode_Lines = _RWGltf.RWGltf_GltfPrimitiveMode_Lines
RWGltf_GltfPrimitiveMode_LineLoop = _RWGltf.RWGltf_GltfPrimitiveMode_LineLoop
RWGltf_GltfPrimitiveMode_LineStrip = _RWGltf.RWGltf_GltfPrimitiveMode_LineStrip
RWGltf_GltfPrimitiveMode_Triangles = _RWGltf.RWGltf_GltfPrimitiveMode_Triangles
RWGltf_GltfPrimitiveMode_TriangleStrip = _RWGltf.RWGltf_GltfPrimitiveMode_TriangleStrip
RWGltf_GltfPrimitiveMode_TriangleFan = _RWGltf.RWGltf_GltfPrimitiveMode_TriangleFan
RWGltf_GltfBufferViewTarget_UNKNOWN = _RWGltf.RWGltf_GltfBufferViewTarget_UNKNOWN
RWGltf_GltfBufferViewTarget_ARRAY_BUFFER = _RWGltf.RWGltf_GltfBufferViewTarget_ARRAY_BUFFER
RWGltf_GltfBufferViewTarget_ELEMENT_ARRAY_BUFFER = _RWGltf.RWGltf_GltfBufferViewTarget_ELEMENT_ARRAY_BUFFER
RWGltf_GltfArrayType_UNKNOWN = _RWGltf.RWGltf_GltfArrayType_UNKNOWN
RWGltf_GltfArrayType_Indices = _RWGltf.RWGltf_GltfArrayType_Indices
RWGltf_GltfArrayType_Position = _RWGltf.RWGltf_GltfArrayType_Position
RWGltf_GltfArrayType_Normal = _RWGltf.RWGltf_GltfArrayType_Normal
RWGltf_GltfArrayType_Color = _RWGltf.RWGltf_GltfArrayType_Color
RWGltf_GltfArrayType_TCoord0 = _RWGltf.RWGltf_GltfArrayType_TCoord0
RWGltf_GltfArrayType_TCoord1 = _RWGltf.RWGltf_GltfArrayType_TCoord1
RWGltf_GltfArrayType_Joint = _RWGltf.RWGltf_GltfArrayType_Joint
RWGltf_GltfArrayType_Weight = _RWGltf.RWGltf_GltfArrayType_Weight
RWGltf_GltfRootElement_Asset = _RWGltf.RWGltf_GltfRootElement_Asset
RWGltf_GltfRootElement_Scenes = _RWGltf.RWGltf_GltfRootElement_Scenes
RWGltf_GltfRootElement_Scene = _RWGltf.RWGltf_GltfRootElement_Scene
RWGltf_GltfRootElement_Nodes = _RWGltf.RWGltf_GltfRootElement_Nodes
RWGltf_GltfRootElement_Meshes = _RWGltf.RWGltf_GltfRootElement_Meshes
RWGltf_GltfRootElement_Accessors = _RWGltf.RWGltf_GltfRootElement_Accessors
RWGltf_GltfRootElement_BufferViews = _RWGltf.RWGltf_GltfRootElement_BufferViews
RWGltf_GltfRootElement_Buffers = _RWGltf.RWGltf_GltfRootElement_Buffers
RWGltf_GltfRootElement_NB_MANDATORY = _RWGltf.RWGltf_GltfRootElement_NB_MANDATORY
RWGltf_GltfRootElement_Animations = _RWGltf.RWGltf_GltfRootElement_Animations
RWGltf_GltfRootElement_Materials = _RWGltf.RWGltf_GltfRootElement_Materials
RWGltf_GltfRootElement_Programs = _RWGltf.RWGltf_GltfRootElement_Programs
RWGltf_GltfRootElement_Samplers = _RWGltf.RWGltf_GltfRootElement_Samplers
RWGltf_GltfRootElement_Shaders = _RWGltf.RWGltf_GltfRootElement_Shaders
RWGltf_GltfRootElement_Skins = _RWGltf.RWGltf_GltfRootElement_Skins
RWGltf_GltfRootElement_Techniques = _RWGltf.RWGltf_GltfRootElement_Techniques
RWGltf_GltfRootElement_Textures = _RWGltf.RWGltf_GltfRootElement_Textures
RWGltf_GltfRootElement_Images = _RWGltf.RWGltf_GltfRootElement_Images
RWGltf_GltfRootElement_ExtensionsUsed = _RWGltf.RWGltf_GltfRootElement_ExtensionsUsed
RWGltf_GltfRootElement_ExtensionsRequired = _RWGltf.RWGltf_GltfRootElement_ExtensionsRequired
RWGltf_GltfRootElement_NB = _RWGltf.RWGltf_GltfRootElement_NB
RWGltf_GltfAccessorCompType_UNKNOWN = _RWGltf.RWGltf_GltfAccessorCompType_UNKNOWN
RWGltf_GltfAccessorCompType_Int8 = _RWGltf.RWGltf_GltfAccessorCompType_Int8
RWGltf_GltfAccessorCompType_UInt8 = _RWGltf.RWGltf_GltfAccessorCompType_UInt8
RWGltf_GltfAccessorCompType_Int16 = _RWGltf.RWGltf_GltfAccessorCompType_Int16
RWGltf_GltfAccessorCompType_UInt16 = _RWGltf.RWGltf_GltfAccessorCompType_UInt16
RWGltf_GltfAccessorCompType_UInt32 = _RWGltf.RWGltf_GltfAccessorCompType_UInt32
RWGltf_GltfAccessorCompType_Float32 = _RWGltf.RWGltf_GltfAccessorCompType_Float32
RWGltf_GltfAccessorLayout_UNKNOWN = _RWGltf.RWGltf_GltfAccessorLayout_UNKNOWN
RWGltf_GltfAccessorLayout_Scalar = _RWGltf.RWGltf_GltfAccessorLayout_Scalar
RWGltf_GltfAccessorLayout_Vec2 = _RWGltf.RWGltf_GltfAccessorLayout_Vec2
RWGltf_GltfAccessorLayout_Vec3 = _RWGltf.RWGltf_GltfAccessorLayout_Vec3
RWGltf_GltfAccessorLayout_Vec4 = _RWGltf.RWGltf_GltfAccessorLayout_Vec4
RWGltf_GltfAccessorLayout_Mat2 = _RWGltf.RWGltf_GltfAccessorLayout_Mat2
RWGltf_GltfAccessorLayout_Mat3 = _RWGltf.RWGltf_GltfAccessorLayout_Mat3
RWGltf_GltfAccessorLayout_Mat4 = _RWGltf.RWGltf_GltfAccessorLayout_Mat4

def Handle_RWGltf_MaterialCommon_Create() -> "opencascade::handle< RWGltf_MaterialCommon >":
    return _RWGltf.Handle_RWGltf_MaterialCommon_Create()
Handle_RWGltf_MaterialCommon_Create = _RWGltf.Handle_RWGltf_MaterialCommon_Create

def Handle_RWGltf_MaterialCommon_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWGltf_MaterialCommon >":
    return _RWGltf.Handle_RWGltf_MaterialCommon_DownCast(t)
Handle_RWGltf_MaterialCommon_DownCast = _RWGltf.Handle_RWGltf_MaterialCommon_DownCast

def Handle_RWGltf_MaterialCommon_IsNull(t: 'opencascade::handle< RWGltf_MaterialCommon > const &') -> "bool":
    return _RWGltf.Handle_RWGltf_MaterialCommon_IsNull(t)
Handle_RWGltf_MaterialCommon_IsNull = _RWGltf.Handle_RWGltf_MaterialCommon_IsNull

def Handle_RWGltf_MaterialMetallicRoughness_Create() -> "opencascade::handle< RWGltf_MaterialMetallicRoughness >":
    return _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_Create()
Handle_RWGltf_MaterialMetallicRoughness_Create = _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_Create

def Handle_RWGltf_MaterialMetallicRoughness_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWGltf_MaterialMetallicRoughness >":
    return _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_DownCast(t)
Handle_RWGltf_MaterialMetallicRoughness_DownCast = _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_DownCast

def Handle_RWGltf_MaterialMetallicRoughness_IsNull(t: 'opencascade::handle< RWGltf_MaterialMetallicRoughness > const &') -> "bool":
    return _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_IsNull(t)
Handle_RWGltf_MaterialMetallicRoughness_IsNull = _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_IsNull
class RWGltf_GltfAccessor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Id = _swig_property(_RWGltf.RWGltf_GltfAccessor_Id_get, _RWGltf.RWGltf_GltfAccessor_Id_set)
    ByteOffset = _swig_property(_RWGltf.RWGltf_GltfAccessor_ByteOffset_get, _RWGltf.RWGltf_GltfAccessor_ByteOffset_set)
    Count = _swig_property(_RWGltf.RWGltf_GltfAccessor_Count_get, _RWGltf.RWGltf_GltfAccessor_Count_set)
    ByteStride = _swig_property(_RWGltf.RWGltf_GltfAccessor_ByteStride_get, _RWGltf.RWGltf_GltfAccessor_ByteStride_set)
    Type = _swig_property(_RWGltf.RWGltf_GltfAccessor_Type_get, _RWGltf.RWGltf_GltfAccessor_Type_set)
    ComponentType = _swig_property(_RWGltf.RWGltf_GltfAccessor_ComponentType_get, _RWGltf.RWGltf_GltfAccessor_ComponentType_set)
    BndBox = _swig_property(_RWGltf.RWGltf_GltfAccessor_BndBox_get, _RWGltf.RWGltf_GltfAccessor_BndBox_set)

    def __init__(self, *args):
        """
        * //!< bounding box Empty constructor.
        	:rtype: None
        """
        _RWGltf.RWGltf_GltfAccessor_swiginit(self, _RWGltf.new_RWGltf_GltfAccessor(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfAccessor
RWGltf_GltfAccessor_swigregister = _RWGltf.RWGltf_GltfAccessor_swigregister
RWGltf_GltfAccessor_swigregister(RWGltf_GltfAccessor)

class RWGltf_GltfBufferView(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Id = _swig_property(_RWGltf.RWGltf_GltfBufferView_Id_get, _RWGltf.RWGltf_GltfBufferView_Id_set)
    ByteOffset = _swig_property(_RWGltf.RWGltf_GltfBufferView_ByteOffset_get, _RWGltf.RWGltf_GltfBufferView_ByteOffset_set)
    ByteLength = _swig_property(_RWGltf.RWGltf_GltfBufferView_ByteLength_get, _RWGltf.RWGltf_GltfBufferView_ByteLength_set)
    ByteStride = _swig_property(_RWGltf.RWGltf_GltfBufferView_ByteStride_get, _RWGltf.RWGltf_GltfBufferView_ByteStride_set)
    Target = _swig_property(_RWGltf.RWGltf_GltfBufferView_Target_get, _RWGltf.RWGltf_GltfBufferView_Target_set)

    def __init__(self, *args):
        """:rtype: None"""
        _RWGltf.RWGltf_GltfBufferView_swiginit(self, _RWGltf.new_RWGltf_GltfBufferView(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfBufferView
RWGltf_GltfBufferView_swigregister = _RWGltf.RWGltf_GltfBufferView_swigregister
RWGltf_GltfBufferView_swigregister(RWGltf_GltfBufferView)

class RWGltf_GltfFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NodePos = _swig_property(_RWGltf.RWGltf_GltfFace_NodePos_get, _RWGltf.RWGltf_GltfFace_NodePos_set)
    NodeNorm = _swig_property(_RWGltf.RWGltf_GltfFace_NodeNorm_get, _RWGltf.RWGltf_GltfFace_NodeNorm_set)
    NodeUV = _swig_property(_RWGltf.RWGltf_GltfFace_NodeUV_get, _RWGltf.RWGltf_GltfFace_NodeUV_set)
    Indices = _swig_property(_RWGltf.RWGltf_GltfFace_Indices_get, _RWGltf.RWGltf_GltfFace_Indices_set)

    __repr__ = _dumps_object


    def __init__(self):
        _RWGltf.RWGltf_GltfFace_swiginit(self, _RWGltf.new_RWGltf_GltfFace())
    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfFace
RWGltf_GltfFace_swigregister = _RWGltf.RWGltf_GltfFace_swigregister
RWGltf_GltfFace_swigregister(RWGltf_GltfFace)

class RWGltf_GltfPrimArrayData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    StreamData = _swig_property(_RWGltf.RWGltf_GltfPrimArrayData_StreamData_get, _RWGltf.RWGltf_GltfPrimArrayData_StreamData_set)
    StreamUri = _swig_property(_RWGltf.RWGltf_GltfPrimArrayData_StreamUri_get, _RWGltf.RWGltf_GltfPrimArrayData_StreamUri_set)
    StreamOffset = _swig_property(_RWGltf.RWGltf_GltfPrimArrayData_StreamOffset_get, _RWGltf.RWGltf_GltfPrimArrayData_StreamOffset_set)
    Accessor = _swig_property(_RWGltf.RWGltf_GltfPrimArrayData_Accessor_get, _RWGltf.RWGltf_GltfPrimArrayData_Accessor_set)
    Type = _swig_property(_RWGltf.RWGltf_GltfPrimArrayData_Type_get, _RWGltf.RWGltf_GltfPrimArrayData_Type_set)

    def __init__(self, *args):
        """
        :rtype: None
        :param theType:
        	:type theType: RWGltf_GltfArrayType
        	:rtype: None
        """
        _RWGltf.RWGltf_GltfPrimArrayData_swiginit(self, _RWGltf.new_RWGltf_GltfPrimArrayData(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfPrimArrayData
RWGltf_GltfPrimArrayData_swigregister = _RWGltf.RWGltf_GltfPrimArrayData_swigregister
RWGltf_GltfPrimArrayData_swigregister(RWGltf_GltfPrimArrayData)

class RWGltf_MaterialCommon(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    AmbientTexture = _swig_property(_RWGltf.RWGltf_MaterialCommon_AmbientTexture_get, _RWGltf.RWGltf_MaterialCommon_AmbientTexture_set)
    DiffuseTexture = _swig_property(_RWGltf.RWGltf_MaterialCommon_DiffuseTexture_get, _RWGltf.RWGltf_MaterialCommon_DiffuseTexture_set)
    SpecularTexture = _swig_property(_RWGltf.RWGltf_MaterialCommon_SpecularTexture_get, _RWGltf.RWGltf_MaterialCommon_SpecularTexture_set)
    Id = _swig_property(_RWGltf.RWGltf_MaterialCommon_Id_get, _RWGltf.RWGltf_MaterialCommon_Id_set)
    Name = _swig_property(_RWGltf.RWGltf_MaterialCommon_Name_get, _RWGltf.RWGltf_MaterialCommon_Name_set)
    AmbientColor = _swig_property(_RWGltf.RWGltf_MaterialCommon_AmbientColor_get, _RWGltf.RWGltf_MaterialCommon_AmbientColor_set)
    DiffuseColor = _swig_property(_RWGltf.RWGltf_MaterialCommon_DiffuseColor_get, _RWGltf.RWGltf_MaterialCommon_DiffuseColor_set)
    SpecularColor = _swig_property(_RWGltf.RWGltf_MaterialCommon_SpecularColor_get, _RWGltf.RWGltf_MaterialCommon_SpecularColor_set)
    EmissiveColor = _swig_property(_RWGltf.RWGltf_MaterialCommon_EmissiveColor_get, _RWGltf.RWGltf_MaterialCommon_EmissiveColor_set)
    Shininess = _swig_property(_RWGltf.RWGltf_MaterialCommon_Shininess_get, _RWGltf.RWGltf_MaterialCommon_Shininess_set)
    Transparency = _swig_property(_RWGltf.RWGltf_MaterialCommon_Transparency_get, _RWGltf.RWGltf_MaterialCommon_Transparency_set)

    def __init__(self, *args):
        """:rtype: None"""
        _RWGltf.RWGltf_MaterialCommon_swiginit(self, _RWGltf.new_RWGltf_MaterialCommon(*args))


    @staticmethod
    def DownCast(t):
      return Handle_RWGltf_MaterialCommon_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_MaterialCommon
RWGltf_MaterialCommon_swigregister = _RWGltf.RWGltf_MaterialCommon_swigregister
RWGltf_MaterialCommon_swigregister(RWGltf_MaterialCommon)

class RWGltf_MaterialMetallicRoughness(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    BaseColorTexture = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_BaseColorTexture_get, _RWGltf.RWGltf_MaterialMetallicRoughness_BaseColorTexture_set)
    MetallicRoughnessTexture = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_MetallicRoughnessTexture_get, _RWGltf.RWGltf_MaterialMetallicRoughness_MetallicRoughnessTexture_set)
    EmissiveTexture = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveTexture_get, _RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveTexture_set)
    OcclusionTexture = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_OcclusionTexture_get, _RWGltf.RWGltf_MaterialMetallicRoughness_OcclusionTexture_set)
    NormalTexture = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_NormalTexture_get, _RWGltf.RWGltf_MaterialMetallicRoughness_NormalTexture_set)
    Id = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_Id_get, _RWGltf.RWGltf_MaterialMetallicRoughness_Id_set)
    Name = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_Name_get, _RWGltf.RWGltf_MaterialMetallicRoughness_Name_set)
    BaseColor = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_BaseColor_get, _RWGltf.RWGltf_MaterialMetallicRoughness_BaseColor_set)
    EmissiveFactor = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveFactor_get, _RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveFactor_set)
    Metallic = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_Metallic_get, _RWGltf.RWGltf_MaterialMetallicRoughness_Metallic_set)
    Roughness = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_Roughness_get, _RWGltf.RWGltf_MaterialMetallicRoughness_Roughness_set)

    def __init__(self, *args):
        """
        * //!< roughness (or scale factor to the texture) within range [0.0, 1.0]; 1.0 by default
        	:rtype: None
        """
        _RWGltf.RWGltf_MaterialMetallicRoughness_swiginit(self, _RWGltf.new_RWGltf_MaterialMetallicRoughness(*args))


    @staticmethod
    def DownCast(t):
      return Handle_RWGltf_MaterialMetallicRoughness_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_MaterialMetallicRoughness
RWGltf_MaterialMetallicRoughness_swigregister = _RWGltf.RWGltf_MaterialMetallicRoughness_swigregister
RWGltf_MaterialMetallicRoughness_swigregister(RWGltf_MaterialMetallicRoughness)



