# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Resource module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_resource.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Resource.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Resource')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Resource')
    _Resource = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Resource', [dirname(__file__)])
        except ImportError:
            import _Resource
            return _Resource
        try:
            _mod = imp.load_module('_Resource', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Resource = swig_import_helper()
    del swig_import_helper
else:
    import _Resource
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Resource.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Resource.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Resource.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Resource.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Resource.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Resource.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Resource.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Resource.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Resource.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Resource.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Resource.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Resource.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Resource.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Resource.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Resource.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Resource.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Resource.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Resource.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Resource.process_exception(error, method_name, class_name)
process_exception = _Resource.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
Resource_FormatType_SJIS = _Resource.Resource_FormatType_SJIS
Resource_FormatType_EUC = _Resource.Resource_FormatType_EUC
Resource_FormatType_ANSI = _Resource.Resource_FormatType_ANSI
Resource_FormatType_GB = _Resource.Resource_FormatType_GB
Resource_FormatType_UTF8 = _Resource.Resource_FormatType_UTF8
Resource_FormatType_SystemLocale = _Resource.Resource_FormatType_SystemLocale
Resource_SJIS = _Resource.Resource_SJIS
Resource_EUC = _Resource.Resource_EUC
Resource_ANSI = _Resource.Resource_ANSI
Resource_GB = _Resource.Resource_GB

def Handle_Resource_Manager_Create() -> "opencascade::handle< Resource_Manager >":
    return _Resource.Handle_Resource_Manager_Create()
Handle_Resource_Manager_Create = _Resource.Handle_Resource_Manager_Create

def Handle_Resource_Manager_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Resource_Manager >":
    return _Resource.Handle_Resource_Manager_DownCast(t)
Handle_Resource_Manager_DownCast = _Resource.Handle_Resource_Manager_DownCast

def Handle_Resource_Manager_IsNull(t: 'opencascade::handle< Resource_Manager > const &') -> "bool":
    return _Resource.Handle_Resource_Manager_IsNull(t)
Handle_Resource_Manager_IsNull = _Resource.Handle_Resource_Manager_IsNull
class Resource_DataMapOfAsciiStringAsciiString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Resource.Resource_DataMapOfAsciiStringAsciiString_swiginit(self, _Resource.new_Resource_DataMapOfAsciiStringAsciiString(*args))
    __swig_destroy__ = _Resource.delete_Resource_DataMapOfAsciiStringAsciiString
Resource_DataMapOfAsciiStringAsciiString.begin = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_begin, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.end = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_end, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.cbegin = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_cbegin, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.cend = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_cend, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Exchange = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Exchange, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Assign = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Assign, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Set = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Set, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.ReSize = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_ReSize, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Bind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Bind, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Bound = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Bound, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.IsBound = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_IsBound, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.UnBind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_UnBind, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Seek = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Seek, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Find = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Find, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.ChangeSeek = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_ChangeSeek, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.ChangeFind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_ChangeFind, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.__call__ = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString___call__, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Clear = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Clear, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Size = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Size, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString_swigregister = _Resource.Resource_DataMapOfAsciiStringAsciiString_swigregister
Resource_DataMapOfAsciiStringAsciiString_swigregister(Resource_DataMapOfAsciiStringAsciiString)

class Resource_DataMapOfAsciiStringExtendedString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Resource.Resource_DataMapOfAsciiStringExtendedString_swiginit(self, _Resource.new_Resource_DataMapOfAsciiStringExtendedString(*args))
    __swig_destroy__ = _Resource.delete_Resource_DataMapOfAsciiStringExtendedString
Resource_DataMapOfAsciiStringExtendedString.begin = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_begin, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.end = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_end, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.cbegin = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_cbegin, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.cend = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_cend, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Exchange = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Exchange, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Assign = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Assign, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Set = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Set, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.ReSize = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_ReSize, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Bind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Bind, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Bound = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Bound, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.IsBound = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_IsBound, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.UnBind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_UnBind, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Seek = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Seek, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Find = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Find, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.ChangeSeek = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_ChangeSeek, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.ChangeFind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_ChangeFind, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.__call__ = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString___call__, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Clear = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Clear, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Size = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Size, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString_swigregister = _Resource.Resource_DataMapOfAsciiStringExtendedString_swigregister
Resource_DataMapOfAsciiStringExtendedString_swigregister(Resource_DataMapOfAsciiStringExtendedString)

class Resource_LexicalCompare(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsLower(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <Left> is lower than <Right>.
        	:param Left:
        	:type Left: TCollection_AsciiString
        	:param Right:
        	:type Right: TCollection_AsciiString
        	:rtype: bool
        """
        return _Resource.Resource_LexicalCompare_IsLower(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _Resource.Resource_LexicalCompare_swiginit(self, _Resource.new_Resource_LexicalCompare(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Resource.delete_Resource_LexicalCompare
Resource_LexicalCompare.IsLower = new_instancemethod(_Resource.Resource_LexicalCompare_IsLower, None, Resource_LexicalCompare)
Resource_LexicalCompare_swigregister = _Resource.Resource_LexicalCompare_swigregister
Resource_LexicalCompare_swigregister(Resource_LexicalCompare)

class Resource_Manager(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ExtValue(self, *args) -> "Standard_ExtString":
        """
        * Gets the value of an ExtString resource according to its instance and its type.
        	:param aResourceName:
        	:type aResourceName: char *
        	:rtype: Standard_ExtString
        """
        return _Resource.Resource_Manager_ExtValue(self, *args)


    def Find(self, *args) -> "Standard_Boolean":
        """
        * returns True if the Resource does exist.
        	:param aResource:
        	:type aResource: char *
        	:rtype: bool
        """
        return _Resource.Resource_Manager_Find(self, *args)


    def GetResourcePath(*args) -> "void":
        """
        * Gets the resource file full path by its name. If corresponding environment variable is not set or file doesn't exist returns empty string.
        	:param aPath:
        	:type aPath: TCollection_AsciiString
        	:param aName:
        	:type aName: char *
        	:param isUserDefaults:
        	:type isUserDefaults: bool
        	:rtype: void
        """
        return _Resource.Resource_Manager_GetResourcePath(*args)

    GetResourcePath = staticmethod(GetResourcePath)

    def Integer(self, *args) -> "Standard_Integer":
        """
        * Gets the value of an integer resource according to its instance and its type.
        	:param aResourceName:
        	:type aResourceName: char *
        	:rtype: int
        """
        return _Resource.Resource_Manager_Integer(self, *args)


    def Real(self, *args) -> "Standard_Real":
        """
        * Gets the value of a real resource according to its instance and its type.
        	:param aResourceName:
        	:type aResourceName: char *
        	:rtype: float
        """
        return _Resource.Resource_Manager_Real(self, *args)


    def __init__(self, *args):
        """
        * Create a Resource manager. Attempts to find the two following files: $CSF_`aName`Defaults/aName $CSF_`aName`UserDefaults/aName and load them respectively into a reference and a user resource structure. //! If CSF_ResourceVerbose defined, seeked files will be printed. //! FILE SYNTAX The syntax of a resource file is a sequence of resource lines terminated by newline characters or end of file. The syntax of an individual resource line is:
        	:param aName:
        	:type aName: char *
        	:param Verbose: default value is Standard_False
        	:type Verbose: bool
        	:rtype: None
        :param aName:
        	:type aName: char *
        	:param aDefaultsDirectory:
        	:type aDefaultsDirectory: TCollection_AsciiString
        	:param anUserDefaultsDirectory:
        	:type anUserDefaultsDirectory: TCollection_AsciiString
        	:param Verbose: default value is Standard_False
        	:type Verbose: bool
        	:rtype: None
        """
        _Resource.Resource_Manager_swiginit(self, _Resource.new_Resource_Manager(*args))

    def Save(self, *args) -> "Standard_Boolean":
        """
        * Save the user resource structure in the specified file. Creates the file if it does not exist.
        	:rtype: bool
        """
        return _Resource.Resource_Manager_Save(self, *args)


    def SetResource(self, *args) -> "void":
        """
        * Sets the new value of an integer resource. If the resource does not exist, it is created.
        	:param aResourceName:
        	:type aResourceName: char *
        	:param aValue:
        	:type aValue: int
        	:rtype: void
        * Sets the new value of a real resource. If the resource does not exist, it is created.
        	:param aResourceName:
        	:type aResourceName: char *
        	:param aValue:
        	:type aValue: float
        	:rtype: void
        * Sets the new value of an CString resource. If the resource does not exist, it is created.
        	:param aResourceName:
        	:type aResourceName: char *
        	:param aValue:
        	:type aValue: char *
        	:rtype: void
        * Sets the new value of an ExtString resource. If the resource does not exist, it is created.
        	:param aResourceName:
        	:type aResourceName: char *
        	:param aValue:
        	:type aValue: Standard_ExtString
        	:rtype: void
        """
        return _Resource.Resource_Manager_SetResource(self, *args)


    def Value(self, *args) -> "char const *":
        """
        * Gets the value of a CString resource according to its instance and its type.
        	:param aResourceName:
        	:type aResourceName: char *
        	:rtype: char *
        """
        return _Resource.Resource_Manager_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Resource_Manager_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Resource.delete_Resource_Manager
Resource_Manager.ExtValue = new_instancemethod(_Resource.Resource_Manager_ExtValue, None, Resource_Manager)
Resource_Manager.Find = new_instancemethod(_Resource.Resource_Manager_Find, None, Resource_Manager)
Resource_Manager.Integer = new_instancemethod(_Resource.Resource_Manager_Integer, None, Resource_Manager)
Resource_Manager.Real = new_instancemethod(_Resource.Resource_Manager_Real, None, Resource_Manager)
Resource_Manager.Save = new_instancemethod(_Resource.Resource_Manager_Save, None, Resource_Manager)
Resource_Manager.SetResource = new_instancemethod(_Resource.Resource_Manager_SetResource, None, Resource_Manager)
Resource_Manager.Value = new_instancemethod(_Resource.Resource_Manager_Value, None, Resource_Manager)
Resource_Manager_swigregister = _Resource.Resource_Manager_swigregister
Resource_Manager_swigregister(Resource_Manager)

def Resource_Manager_GetResourcePath(*args) -> "void":
    """
    * Gets the resource file full path by its name. If corresponding environment variable is not set or file doesn't exist returns empty string.
    	:param aPath:
    	:type aPath: TCollection_AsciiString
    	:param aName:
    	:type aName: char *
    	:param isUserDefaults:
    	:type isUserDefaults: bool
    	:rtype: void
    """
    return _Resource.Resource_Manager_GetResourcePath(*args)

class Resource_Unicode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConvertANSIToUnicode(*args) -> "void":
        """
        * Converts non-ASCII CString <fromstr> in ANSI format to Unicode ExtendedString <tostr>.
        	:param fromstr:
        	:type fromstr: char *
        	:param tostr:
        	:type tostr: TCollection_ExtendedString
        	:rtype: void
        """
        return _Resource.Resource_Unicode_ConvertANSIToUnicode(*args)

    ConvertANSIToUnicode = staticmethod(ConvertANSIToUnicode)

    def ConvertBig5ToUnicode(*args) -> "Standard_Boolean":
        """
        * Converts non-ASCII CString <fromstr> in Big5 format to Unicode ExtendedString <tostr>.
        	:param fromstr:
        	:type fromstr: char *
        	:param tostr:
        	:type tostr: TCollection_ExtendedString
        	:rtype: bool
        """
        return _Resource.Resource_Unicode_ConvertBig5ToUnicode(*args)

    ConvertBig5ToUnicode = staticmethod(ConvertBig5ToUnicode)

    def ConvertEUCToUnicode(*args) -> "void":
        """
        * Converts non-ASCII CString <fromstr> in EUC format to Unicode ExtendedString <tostr>.
        	:param fromstr:
        	:type fromstr: char *
        	:param tostr:
        	:type tostr: TCollection_ExtendedString
        	:rtype: void
        """
        return _Resource.Resource_Unicode_ConvertEUCToUnicode(*args)

    ConvertEUCToUnicode = staticmethod(ConvertEUCToUnicode)

    def ConvertFormatToUnicode(*args) -> "void":
        """
        * Converts the non-ASCII C string (as specified by GetFormat()) to the Unicode string of extended characters.
        	:param theFromStr:
        	:type theFromStr: char *
        	:param theToStr:
        	:type theToStr: TCollection_ExtendedString
        	:rtype: None
        * Converts the non-ASCII C string in specified format to the Unicode string of extended characters. @param theFormat [in] source encoding @param theFromStr [in] text to convert @param theToStr [out] destination string
        	:param theFormat:
        	:type theFormat: Resource_FormatType
        	:param theFromStr:
        	:type theFromStr: char *
        	:param theToStr:
        	:type theToStr: TCollection_ExtendedString
        	:rtype: void
        """
        return _Resource.Resource_Unicode_ConvertFormatToUnicode(*args)

    ConvertFormatToUnicode = staticmethod(ConvertFormatToUnicode)

    def ConvertGBKToUnicode(*args) -> "Standard_Boolean":
        """
        * Converts non-ASCII CString <fromstr> in GBK format to Unicode ExtendedString <tostr>.
        	:param fromstr:
        	:type fromstr: char *
        	:param tostr:
        	:type tostr: TCollection_ExtendedString
        	:rtype: bool
        """
        return _Resource.Resource_Unicode_ConvertGBKToUnicode(*args)

    ConvertGBKToUnicode = staticmethod(ConvertGBKToUnicode)

    def ConvertGBToUnicode(*args) -> "void":
        """
        * Converts non-ASCII CString <fromstr> in GB format to Unicode ExtendedString <tostr>.
        	:param fromstr:
        	:type fromstr: char *
        	:param tostr:
        	:type tostr: TCollection_ExtendedString
        	:rtype: void
        """
        return _Resource.Resource_Unicode_ConvertGBToUnicode(*args)

    ConvertGBToUnicode = staticmethod(ConvertGBToUnicode)

    def ConvertSJISToUnicode(*args) -> "void":
        """
        * Converts non-ASCII CString <fromstr> in SJIS format to Unicode ExtendedString <tostr>.
        	:param fromstr:
        	:type fromstr: char *
        	:param tostr:
        	:type tostr: TCollection_ExtendedString
        	:rtype: void
        """
        return _Resource.Resource_Unicode_ConvertSJISToUnicode(*args)

    ConvertSJISToUnicode = staticmethod(ConvertSJISToUnicode)

    def ConvertUnicodeToANSI(*args) -> "Standard_Boolean":
        """
        * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in ANSI format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.
        	:param fromstr:
        	:type fromstr: TCollection_ExtendedString
        	:param tostr:
        	:type tostr: Standard_PCharacter
        	:param maxsize:
        	:type maxsize: int
        	:rtype: bool
        """
        return _Resource.Resource_Unicode_ConvertUnicodeToANSI(*args)

    ConvertUnicodeToANSI = staticmethod(ConvertUnicodeToANSI)

    def ConvertUnicodeToEUC(*args) -> "Standard_Boolean":
        """
        * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in EUC format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.
        	:param fromstr:
        	:type fromstr: TCollection_ExtendedString
        	:param tostr:
        	:type tostr: Standard_PCharacter
        	:param maxsize:
        	:type maxsize: int
        	:rtype: bool
        """
        return _Resource.Resource_Unicode_ConvertUnicodeToEUC(*args)

    ConvertUnicodeToEUC = staticmethod(ConvertUnicodeToEUC)

    def ConvertUnicodeToFormat(*args) -> "Standard_Boolean":
        """
        * Converts the Unicode string of extended characters to the non-ASCII string according to specified format. You need more than twice the length of the source string to complete the conversion. The function returns true if conversion is complete, i.e. the maximum number of characters is not reached before the end of conversion. @param theFormat [in] destination encoding @param theFromStr [in] text to convert @param theToStr [out] destination buffer @param theMaxSize [in] destination buffer length
        	:param theFormat:
        	:type theFormat: Resource_FormatType
        	:param theFromStr:
        	:type theFromStr: TCollection_ExtendedString
        	:param theToStr:
        	:type theToStr: Standard_PCharacter
        	:param theMaxSize:
        	:type theMaxSize: int
        	:rtype: bool
        * Converts the Unicode string of extended characters to the non-ASCII string according to the format returned by the function GetFormat. @param theFromStr [in] text to convert @param theToStr [out] destination buffer @param theMaxSize [in] destination buffer length
        	:param theFromStr:
        	:type theFromStr: TCollection_ExtendedString
        	:param theToStr:
        	:type theToStr: Standard_PCharacter
        	:param theMaxSize:
        	:type theMaxSize: int
        	:rtype: bool
        """
        return _Resource.Resource_Unicode_ConvertUnicodeToFormat(*args)

    ConvertUnicodeToFormat = staticmethod(ConvertUnicodeToFormat)

    def ConvertUnicodeToGB(*args) -> "Standard_Boolean":
        """
        * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in GB format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.
        	:param fromstr:
        	:type fromstr: TCollection_ExtendedString
        	:param tostr:
        	:type tostr: Standard_PCharacter
        	:param maxsize:
        	:type maxsize: int
        	:rtype: bool
        """
        return _Resource.Resource_Unicode_ConvertUnicodeToGB(*args)

    ConvertUnicodeToGB = staticmethod(ConvertUnicodeToGB)

    def ConvertUnicodeToSJIS(*args) -> "Standard_Boolean":
        """
        * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in SJIS format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.
        	:param fromstr:
        	:type fromstr: TCollection_ExtendedString
        	:param tostr:
        	:type tostr: Standard_PCharacter
        	:param maxsize:
        	:type maxsize: int
        	:rtype: bool
        """
        return _Resource.Resource_Unicode_ConvertUnicodeToSJIS(*args)

    ConvertUnicodeToSJIS = staticmethod(ConvertUnicodeToSJIS)

    def GetFormat(*args) -> "Resource_FormatType":
        """
        * Returns the current conversion format (either ANSI, EUC, GB or SJIS). The current converting format must be defined in advance with the SetFormat function.
        	:rtype: Resource_FormatType
        """
        return _Resource.Resource_Unicode_GetFormat(*args)

    GetFormat = staticmethod(GetFormat)

    def ReadFormat(*args) -> "void":
        """
        * Reads converting format from resource 'FormatType' in Resource Manager 'CharSet'
        	:rtype: void
        """
        return _Resource.Resource_Unicode_ReadFormat(*args)

    ReadFormat = staticmethod(ReadFormat)

    def SetFormat(*args) -> "void":
        """
        * Defines the current conversion format as typecode. This conversion format will then be used by the functions ConvertFormatToUnicode and ConvertUnicodeToFormat to convert the strings.
        	:param typecode:
        	:type typecode: Resource_FormatType
        	:rtype: void
        """
        return _Resource.Resource_Unicode_SetFormat(*args)

    SetFormat = staticmethod(SetFormat)

    __repr__ = _dumps_object


    def __init__(self):
        _Resource.Resource_Unicode_swiginit(self, _Resource.new_Resource_Unicode())
    __swig_destroy__ = _Resource.delete_Resource_Unicode
Resource_Unicode_swigregister = _Resource.Resource_Unicode_swigregister
Resource_Unicode_swigregister(Resource_Unicode)

def Resource_Unicode_ConvertANSIToUnicode(*args) -> "void":
    """
    * Converts non-ASCII CString <fromstr> in ANSI format to Unicode ExtendedString <tostr>.
    	:param fromstr:
    	:type fromstr: char *
    	:param tostr:
    	:type tostr: TCollection_ExtendedString
    	:rtype: void
    """
    return _Resource.Resource_Unicode_ConvertANSIToUnicode(*args)

def Resource_Unicode_ConvertBig5ToUnicode(*args) -> "Standard_Boolean":
    """
    * Converts non-ASCII CString <fromstr> in Big5 format to Unicode ExtendedString <tostr>.
    	:param fromstr:
    	:type fromstr: char *
    	:param tostr:
    	:type tostr: TCollection_ExtendedString
    	:rtype: bool
    """
    return _Resource.Resource_Unicode_ConvertBig5ToUnicode(*args)

def Resource_Unicode_ConvertEUCToUnicode(*args) -> "void":
    """
    * Converts non-ASCII CString <fromstr> in EUC format to Unicode ExtendedString <tostr>.
    	:param fromstr:
    	:type fromstr: char *
    	:param tostr:
    	:type tostr: TCollection_ExtendedString
    	:rtype: void
    """
    return _Resource.Resource_Unicode_ConvertEUCToUnicode(*args)

def Resource_Unicode_ConvertFormatToUnicode(*args) -> "void":
    """
    * Converts the non-ASCII C string (as specified by GetFormat()) to the Unicode string of extended characters.
    	:param theFromStr:
    	:type theFromStr: char *
    	:param theToStr:
    	:type theToStr: TCollection_ExtendedString
    	:rtype: None
    * Converts the non-ASCII C string in specified format to the Unicode string of extended characters. @param theFormat [in] source encoding @param theFromStr [in] text to convert @param theToStr [out] destination string
    	:param theFormat:
    	:type theFormat: Resource_FormatType
    	:param theFromStr:
    	:type theFromStr: char *
    	:param theToStr:
    	:type theToStr: TCollection_ExtendedString
    	:rtype: void
    """
    return _Resource.Resource_Unicode_ConvertFormatToUnicode(*args)

def Resource_Unicode_ConvertGBKToUnicode(*args) -> "Standard_Boolean":
    """
    * Converts non-ASCII CString <fromstr> in GBK format to Unicode ExtendedString <tostr>.
    	:param fromstr:
    	:type fromstr: char *
    	:param tostr:
    	:type tostr: TCollection_ExtendedString
    	:rtype: bool
    """
    return _Resource.Resource_Unicode_ConvertGBKToUnicode(*args)

def Resource_Unicode_ConvertGBToUnicode(*args) -> "void":
    """
    * Converts non-ASCII CString <fromstr> in GB format to Unicode ExtendedString <tostr>.
    	:param fromstr:
    	:type fromstr: char *
    	:param tostr:
    	:type tostr: TCollection_ExtendedString
    	:rtype: void
    """
    return _Resource.Resource_Unicode_ConvertGBToUnicode(*args)

def Resource_Unicode_ConvertSJISToUnicode(*args) -> "void":
    """
    * Converts non-ASCII CString <fromstr> in SJIS format to Unicode ExtendedString <tostr>.
    	:param fromstr:
    	:type fromstr: char *
    	:param tostr:
    	:type tostr: TCollection_ExtendedString
    	:rtype: void
    """
    return _Resource.Resource_Unicode_ConvertSJISToUnicode(*args)

def Resource_Unicode_ConvertUnicodeToANSI(*args) -> "Standard_Boolean":
    """
    * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in ANSI format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.
    	:param fromstr:
    	:type fromstr: TCollection_ExtendedString
    	:param tostr:
    	:type tostr: Standard_PCharacter
    	:param maxsize:
    	:type maxsize: int
    	:rtype: bool
    """
    return _Resource.Resource_Unicode_ConvertUnicodeToANSI(*args)

def Resource_Unicode_ConvertUnicodeToEUC(*args) -> "Standard_Boolean":
    """
    * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in EUC format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.
    	:param fromstr:
    	:type fromstr: TCollection_ExtendedString
    	:param tostr:
    	:type tostr: Standard_PCharacter
    	:param maxsize:
    	:type maxsize: int
    	:rtype: bool
    """
    return _Resource.Resource_Unicode_ConvertUnicodeToEUC(*args)

def Resource_Unicode_ConvertUnicodeToFormat(*args) -> "Standard_Boolean":
    """
    * Converts the Unicode string of extended characters to the non-ASCII string according to specified format. You need more than twice the length of the source string to complete the conversion. The function returns true if conversion is complete, i.e. the maximum number of characters is not reached before the end of conversion. @param theFormat [in] destination encoding @param theFromStr [in] text to convert @param theToStr [out] destination buffer @param theMaxSize [in] destination buffer length
    	:param theFormat:
    	:type theFormat: Resource_FormatType
    	:param theFromStr:
    	:type theFromStr: TCollection_ExtendedString
    	:param theToStr:
    	:type theToStr: Standard_PCharacter
    	:param theMaxSize:
    	:type theMaxSize: int
    	:rtype: bool
    * Converts the Unicode string of extended characters to the non-ASCII string according to the format returned by the function GetFormat. @param theFromStr [in] text to convert @param theToStr [out] destination buffer @param theMaxSize [in] destination buffer length
    	:param theFromStr:
    	:type theFromStr: TCollection_ExtendedString
    	:param theToStr:
    	:type theToStr: Standard_PCharacter
    	:param theMaxSize:
    	:type theMaxSize: int
    	:rtype: bool
    """
    return _Resource.Resource_Unicode_ConvertUnicodeToFormat(*args)

def Resource_Unicode_ConvertUnicodeToGB(*args) -> "Standard_Boolean":
    """
    * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in GB format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.
    	:param fromstr:
    	:type fromstr: TCollection_ExtendedString
    	:param tostr:
    	:type tostr: Standard_PCharacter
    	:param maxsize:
    	:type maxsize: int
    	:rtype: bool
    """
    return _Resource.Resource_Unicode_ConvertUnicodeToGB(*args)

def Resource_Unicode_ConvertUnicodeToSJIS(*args) -> "Standard_Boolean":
    """
    * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in SJIS format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.
    	:param fromstr:
    	:type fromstr: TCollection_ExtendedString
    	:param tostr:
    	:type tostr: Standard_PCharacter
    	:param maxsize:
    	:type maxsize: int
    	:rtype: bool
    """
    return _Resource.Resource_Unicode_ConvertUnicodeToSJIS(*args)

def Resource_Unicode_GetFormat(*args) -> "Resource_FormatType":
    """
    * Returns the current conversion format (either ANSI, EUC, GB or SJIS). The current converting format must be defined in advance with the SetFormat function.
    	:rtype: Resource_FormatType
    """
    return _Resource.Resource_Unicode_GetFormat(*args)

def Resource_Unicode_ReadFormat(*args) -> "void":
    """
    * Reads converting format from resource 'FormatType' in Resource Manager 'CharSet'
    	:rtype: void
    """
    return _Resource.Resource_Unicode_ReadFormat(*args)

def Resource_Unicode_SetFormat(*args) -> "void":
    """
    * Defines the current conversion format as typecode. This conversion format will then be used by the functions ConvertFormatToUnicode and ConvertUnicodeToFormat to convert the strings.
    	:param typecode:
    	:type typecode: Resource_FormatType
    	:rtype: void
    """
    return _Resource.Resource_Unicode_SetFormat(*args)



