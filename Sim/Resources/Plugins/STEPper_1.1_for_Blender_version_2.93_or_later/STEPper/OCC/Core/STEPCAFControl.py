# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
STEPCAFControl module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepcafcontrol.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _STEPCAFControl.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_STEPCAFControl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_STEPCAFControl')
    _STEPCAFControl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_STEPCAFControl', [dirname(__file__)])
        except ImportError:
            import _STEPCAFControl
            return _STEPCAFControl
        try:
            _mod = imp.load_module('_STEPCAFControl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _STEPCAFControl = swig_import_helper()
    del swig_import_helper
else:
    import _STEPCAFControl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _STEPCAFControl.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_STEPCAFControl.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_STEPCAFControl.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_STEPCAFControl.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_STEPCAFControl.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_STEPCAFControl.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_STEPCAFControl.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_STEPCAFControl.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_STEPCAFControl.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_STEPCAFControl.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_STEPCAFControl.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_STEPCAFControl.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_STEPCAFControl.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_STEPCAFControl.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_STEPCAFControl.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_STEPCAFControl.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_STEPCAFControl.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _STEPCAFControl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _STEPCAFControl.process_exception(error, method_name, class_name)
process_exception = _STEPCAFControl.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepShape
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.STEPControl
import OCC.Core.Transfer
import OCC.Core.TopTools
import OCC.Core.XSControl
import OCC.Core.IFSelect
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.TDF
import OCC.Core.XCAFDimTolObjects
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
import OCC.Core.StepDimTol
import OCC.Core.StepVisual
import OCC.Core.XCAFDoc
import OCC.Core.Quantity
import OCC.Core.XCAFNoteObjects
import OCC.Core.TDataStd
import OCC.Core.XCAFView
import OCC.Core.STEPConstruct
import OCC.Core.StepAP203

def Handle_STEPCAFControl_ActorWrite_Create() -> "opencascade::handle< STEPCAFControl_ActorWrite >":
    return _STEPCAFControl.Handle_STEPCAFControl_ActorWrite_Create()
Handle_STEPCAFControl_ActorWrite_Create = _STEPCAFControl.Handle_STEPCAFControl_ActorWrite_Create

def Handle_STEPCAFControl_ActorWrite_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPCAFControl_ActorWrite >":
    return _STEPCAFControl.Handle_STEPCAFControl_ActorWrite_DownCast(t)
Handle_STEPCAFControl_ActorWrite_DownCast = _STEPCAFControl.Handle_STEPCAFControl_ActorWrite_DownCast

def Handle_STEPCAFControl_ActorWrite_IsNull(t: 'opencascade::handle< STEPCAFControl_ActorWrite > const &') -> "bool":
    return _STEPCAFControl.Handle_STEPCAFControl_ActorWrite_IsNull(t)
Handle_STEPCAFControl_ActorWrite_IsNull = _STEPCAFControl.Handle_STEPCAFControl_ActorWrite_IsNull

def Handle_STEPCAFControl_Controller_Create() -> "opencascade::handle< STEPCAFControl_Controller >":
    return _STEPCAFControl.Handle_STEPCAFControl_Controller_Create()
Handle_STEPCAFControl_Controller_Create = _STEPCAFControl.Handle_STEPCAFControl_Controller_Create

def Handle_STEPCAFControl_Controller_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPCAFControl_Controller >":
    return _STEPCAFControl.Handle_STEPCAFControl_Controller_DownCast(t)
Handle_STEPCAFControl_Controller_DownCast = _STEPCAFControl.Handle_STEPCAFControl_Controller_DownCast

def Handle_STEPCAFControl_Controller_IsNull(t: 'opencascade::handle< STEPCAFControl_Controller > const &') -> "bool":
    return _STEPCAFControl.Handle_STEPCAFControl_Controller_IsNull(t)
Handle_STEPCAFControl_Controller_IsNull = _STEPCAFControl.Handle_STEPCAFControl_Controller_IsNull

def Handle_STEPCAFControl_ExternFile_Create() -> "opencascade::handle< STEPCAFControl_ExternFile >":
    return _STEPCAFControl.Handle_STEPCAFControl_ExternFile_Create()
Handle_STEPCAFControl_ExternFile_Create = _STEPCAFControl.Handle_STEPCAFControl_ExternFile_Create

def Handle_STEPCAFControl_ExternFile_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPCAFControl_ExternFile >":
    return _STEPCAFControl.Handle_STEPCAFControl_ExternFile_DownCast(t)
Handle_STEPCAFControl_ExternFile_DownCast = _STEPCAFControl.Handle_STEPCAFControl_ExternFile_DownCast

def Handle_STEPCAFControl_ExternFile_IsNull(t: 'opencascade::handle< STEPCAFControl_ExternFile > const &') -> "bool":
    return _STEPCAFControl.Handle_STEPCAFControl_ExternFile_IsNull(t)
Handle_STEPCAFControl_ExternFile_IsNull = _STEPCAFControl.Handle_STEPCAFControl_ExternFile_IsNull
class STEPCAFControl_DataMapOfPDExternFile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_swiginit(self, _STEPCAFControl.new_STEPCAFControl_DataMapOfPDExternFile(*args))
    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_DataMapOfPDExternFile
STEPCAFControl_DataMapOfPDExternFile.begin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_begin, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.end = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_end, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.cbegin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_cbegin, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.cend = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_cend, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.Exchange = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_Exchange, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.Assign = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_Assign, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.Set = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_Set, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.ReSize = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_ReSize, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.Bind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_Bind, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.Bound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_Bound, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.IsBound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_IsBound, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.UnBind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_UnBind, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.Seek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_Seek, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.Find = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_Find, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.ChangeSeek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_ChangeSeek, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.ChangeFind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_ChangeFind, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.__call__ = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile___call__, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.Clear = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_Clear, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile.Size = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_Size, None, STEPCAFControl_DataMapOfPDExternFile)
STEPCAFControl_DataMapOfPDExternFile_swigregister = _STEPCAFControl.STEPCAFControl_DataMapOfPDExternFile_swigregister
STEPCAFControl_DataMapOfPDExternFile_swigregister(STEPCAFControl_DataMapOfPDExternFile)

class STEPCAFControl_DataMapOfShapeSDR(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_swiginit(self, _STEPCAFControl.new_STEPCAFControl_DataMapOfShapeSDR(*args))
    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_DataMapOfShapeSDR
STEPCAFControl_DataMapOfShapeSDR.begin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_begin, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.end = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_end, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.cbegin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_cbegin, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.cend = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_cend, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.Exchange = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_Exchange, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.Assign = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_Assign, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.Set = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_Set, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.ReSize = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_ReSize, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.Bind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_Bind, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.Bound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_Bound, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.IsBound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_IsBound, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.UnBind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_UnBind, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.Seek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_Seek, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.Find = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_Find, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.ChangeSeek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_ChangeSeek, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.ChangeFind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_ChangeFind, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.__call__ = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR___call__, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.Clear = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_Clear, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR.Size = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_Size, None, STEPCAFControl_DataMapOfShapeSDR)
STEPCAFControl_DataMapOfShapeSDR_swigregister = _STEPCAFControl.STEPCAFControl_DataMapOfShapeSDR_swigregister
STEPCAFControl_DataMapOfShapeSDR_swigregister(STEPCAFControl_DataMapOfShapeSDR)

class STEPCAFControl_DataMapOfShapePD(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPCAFControl.STEPCAFControl_DataMapOfShapePD_swiginit(self, _STEPCAFControl.new_STEPCAFControl_DataMapOfShapePD(*args))
    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_DataMapOfShapePD
STEPCAFControl_DataMapOfShapePD.begin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_begin, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.end = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_end, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.cbegin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_cbegin, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.cend = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_cend, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.Exchange = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_Exchange, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.Assign = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_Assign, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.Set = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_Set, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.ReSize = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_ReSize, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.Bind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_Bind, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.Bound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_Bound, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.IsBound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_IsBound, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.UnBind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_UnBind, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.Seek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_Seek, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.Find = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_Find, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.ChangeSeek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_ChangeSeek, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.ChangeFind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_ChangeFind, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.__call__ = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD___call__, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.Clear = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_Clear, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD.Size = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfShapePD_Size, None, STEPCAFControl_DataMapOfShapePD)
STEPCAFControl_DataMapOfShapePD_swigregister = _STEPCAFControl.STEPCAFControl_DataMapOfShapePD_swigregister
STEPCAFControl_DataMapOfShapePD_swigregister(STEPCAFControl_DataMapOfShapePD)

class STEPCAFControl_DataMapOfLabelExternFile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_swiginit(self, _STEPCAFControl.new_STEPCAFControl_DataMapOfLabelExternFile(*args))
    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_DataMapOfLabelExternFile
STEPCAFControl_DataMapOfLabelExternFile.begin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_begin, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.end = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_end, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.cbegin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_cbegin, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.cend = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_cend, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.Exchange = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_Exchange, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.Assign = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_Assign, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.Set = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_Set, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.ReSize = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_ReSize, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.Bind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_Bind, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.Bound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_Bound, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.IsBound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_IsBound, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.UnBind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_UnBind, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.Seek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_Seek, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.Find = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_Find, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.ChangeSeek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_ChangeSeek, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.ChangeFind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_ChangeFind, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.__call__ = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile___call__, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.Clear = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_Clear, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile.Size = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_Size, None, STEPCAFControl_DataMapOfLabelExternFile)
STEPCAFControl_DataMapOfLabelExternFile_swigregister = _STEPCAFControl.STEPCAFControl_DataMapOfLabelExternFile_swigregister
STEPCAFControl_DataMapOfLabelExternFile_swigregister(STEPCAFControl_DataMapOfLabelExternFile)

class STEPCAFControl_DataMapOfSDRExternFile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_swiginit(self, _STEPCAFControl.new_STEPCAFControl_DataMapOfSDRExternFile(*args))
    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_DataMapOfSDRExternFile
STEPCAFControl_DataMapOfSDRExternFile.begin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_begin, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.end = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_end, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.cbegin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_cbegin, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.cend = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_cend, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.Exchange = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_Exchange, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.Assign = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_Assign, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.Set = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_Set, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.ReSize = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_ReSize, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.Bind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_Bind, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.Bound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_Bound, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.IsBound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_IsBound, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.UnBind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_UnBind, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.Seek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_Seek, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.Find = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_Find, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.ChangeSeek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_ChangeSeek, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.ChangeFind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_ChangeFind, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.__call__ = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile___call__, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.Clear = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_Clear, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile.Size = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_Size, None, STEPCAFControl_DataMapOfSDRExternFile)
STEPCAFControl_DataMapOfSDRExternFile_swigregister = _STEPCAFControl.STEPCAFControl_DataMapOfSDRExternFile_swigregister
STEPCAFControl_DataMapOfSDRExternFile_swigregister(STEPCAFControl_DataMapOfSDRExternFile)

class STEPCAFControl_DataMapOfLabelShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_swiginit(self, _STEPCAFControl.new_STEPCAFControl_DataMapOfLabelShape(*args))
    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_DataMapOfLabelShape
STEPCAFControl_DataMapOfLabelShape.begin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_begin, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.end = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_end, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.cbegin = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_cbegin, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.cend = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_cend, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.Exchange = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_Exchange, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.Assign = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_Assign, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.Set = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_Set, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.ReSize = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_ReSize, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.Bind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_Bind, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.Bound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_Bound, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.IsBound = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_IsBound, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.UnBind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_UnBind, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.Seek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_Seek, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.Find = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_Find, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.ChangeSeek = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_ChangeSeek, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.ChangeFind = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_ChangeFind, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.__call__ = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape___call__, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.Clear = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_Clear, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape.Size = new_instancemethod(_STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_Size, None, STEPCAFControl_DataMapOfLabelShape)
STEPCAFControl_DataMapOfLabelShape_swigregister = _STEPCAFControl.STEPCAFControl_DataMapOfLabelShape_swigregister
STEPCAFControl_DataMapOfLabelShape_swigregister(STEPCAFControl_DataMapOfLabelShape)

class STEPCAFControl_ActorWrite(OCC.Core.STEPControl.STEPControl_ActorWrite):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ClearMap(self, *args) -> "void":
        """
        * Clears map of shapes registered as assemblies
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_ActorWrite_ClearMap(self, *args)


    def RegisterAssembly(self, *args) -> "void":
        """
        * Registers shape to be written as assembly The shape should be TopoDS_Compound (else does nothing)
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_ActorWrite_RegisterAssembly(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _STEPCAFControl.STEPCAFControl_ActorWrite_swiginit(self, _STEPCAFControl.new_STEPCAFControl_ActorWrite(*args))

    def SetStdMode(self, *args) -> "void":
        """
        * Set standard mode of work In standard mode Actor (default) behaves exactly as its ancestor, also map is cleared
        	:param stdmode: default value is Standard_True
        	:type stdmode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_ActorWrite_SetStdMode(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_STEPCAFControl_ActorWrite_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_ActorWrite
STEPCAFControl_ActorWrite.ClearMap = new_instancemethod(_STEPCAFControl.STEPCAFControl_ActorWrite_ClearMap, None, STEPCAFControl_ActorWrite)
STEPCAFControl_ActorWrite.RegisterAssembly = new_instancemethod(_STEPCAFControl.STEPCAFControl_ActorWrite_RegisterAssembly, None, STEPCAFControl_ActorWrite)
STEPCAFControl_ActorWrite.SetStdMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_ActorWrite_SetStdMode, None, STEPCAFControl_ActorWrite)
STEPCAFControl_ActorWrite_swigregister = _STEPCAFControl.STEPCAFControl_ActorWrite_swigregister
STEPCAFControl_ActorWrite_swigregister(STEPCAFControl_ActorWrite)

class STEPCAFControl_Controller(OCC.Core.STEPControl.STEPControl_Controller):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args) -> "Standard_Boolean":
        """
        * Standard Initialisation. It creates a Controller for STEP-XCAF and records it to various names, available to select it later Returns True when done, False if could not be done
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_Controller_Init(*args)

    Init = staticmethod(Init)

    def __init__(self, *args):
        """
        * Initializes the use of STEP Norm (the first time)
        	:rtype: None
        """
        _STEPCAFControl.STEPCAFControl_Controller_swiginit(self, _STEPCAFControl.new_STEPCAFControl_Controller(*args))


    @staticmethod
    def DownCast(t):
      return Handle_STEPCAFControl_Controller_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_Controller
STEPCAFControl_Controller_swigregister = _STEPCAFControl.STEPCAFControl_Controller_swigregister
STEPCAFControl_Controller_swigregister(STEPCAFControl_Controller)

def STEPCAFControl_Controller_Init(*args) -> "Standard_Boolean":
    """
    * Standard Initialisation. It creates a Controller for STEP-XCAF and records it to various names, available to select it later Returns True when done, False if could not be done
    	:rtype: bool
    """
    return _STEPCAFControl.STEPCAFControl_Controller_Init(*args)

class STEPCAFControl_ExternFile(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetLabel(self, *args) -> "TDF_Label":
        """:rtype: TDF_Label"""
        return _STEPCAFControl.STEPCAFControl_ExternFile_GetLabel(self, *args)


    def GetLoadStatus(self, *args) -> "IFSelect_ReturnStatus":
        """:rtype: IFSelect_ReturnStatus"""
        return _STEPCAFControl.STEPCAFControl_ExternFile_GetLoadStatus(self, *args)


    def GetName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPCAFControl.STEPCAFControl_ExternFile_GetName(self, *args)


    def GetTransferStatus(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_ExternFile_GetTransferStatus(self, *args)


    def GetWS(self, *args) -> "opencascade::handle< XSControl_WorkSession >":
        """:rtype: opencascade::handle<XSControl_WorkSession>"""
        return _STEPCAFControl.STEPCAFControl_ExternFile_GetWS(self, *args)


    def GetWriteStatus(self, *args) -> "IFSelect_ReturnStatus":
        """:rtype: IFSelect_ReturnStatus"""
        return _STEPCAFControl.STEPCAFControl_ExternFile_GetWriteStatus(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty structure
        	:rtype: None
        """
        _STEPCAFControl.STEPCAFControl_ExternFile_swiginit(self, _STEPCAFControl.new_STEPCAFControl_ExternFile(*args))

    def SetLabel(self, *args) -> "void":
        """
        :param L:
        	:type L: TDF_Label
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_ExternFile_SetLabel(self, *args)


    def SetLoadStatus(self, *args) -> "void":
        """
        :param stat:
        	:type stat: IFSelect_ReturnStatus
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_ExternFile_SetLoadStatus(self, *args)


    def SetName(self, *args) -> "void":
        """
        :param name:
        	:type name: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_ExternFile_SetName(self, *args)


    def SetTransferStatus(self, *args) -> "void":
        """
        :param isok:
        	:type isok: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_ExternFile_SetTransferStatus(self, *args)


    def SetWS(self, *args) -> "void":
        """
        :param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_ExternFile_SetWS(self, *args)


    def SetWriteStatus(self, *args) -> "void":
        """
        :param stat:
        	:type stat: IFSelect_ReturnStatus
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_ExternFile_SetWriteStatus(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_STEPCAFControl_ExternFile_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_ExternFile
STEPCAFControl_ExternFile.GetLabel = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_GetLabel, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile.GetLoadStatus = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_GetLoadStatus, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile.GetName = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_GetName, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile.GetTransferStatus = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_GetTransferStatus, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile.GetWS = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_GetWS, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile.GetWriteStatus = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_GetWriteStatus, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile.SetLabel = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_SetLabel, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile.SetLoadStatus = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_SetLoadStatus, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile.SetName = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_SetName, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile.SetTransferStatus = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_SetTransferStatus, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile.SetWS = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_SetWS, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile.SetWriteStatus = new_instancemethod(_STEPCAFControl.STEPCAFControl_ExternFile_SetWriteStatus, None, STEPCAFControl_ExternFile)
STEPCAFControl_ExternFile_swigregister = _STEPCAFControl.STEPCAFControl_ExternFile_swigregister
STEPCAFControl_ExternFile_swigregister(STEPCAFControl_ExternFile)

class STEPCAFControl_GDTProperty(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetDatumRefModifiers(*args) -> "opencascade::handle< StepDimTol_HArray1OfDatumReferenceModifier >":
        """
        :param theModifiers:
        	:type theModifiers: XCAFDimTolObjects_DatumModifiersSequence
        	:param theModifWithVal:
        	:type theModifWithVal: XCAFDimTolObjects_DatumModifWithValue
        	:param theValue:
        	:type theValue: float
        	:param theUnit:
        	:type theUnit: StepBasic_Unit
        	:rtype: opencascade::handle<StepDimTol_HArray1OfDatumReferenceModifier>
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDatumRefModifiers(*args)

    GetDatumRefModifiers = staticmethod(GetDatumRefModifiers)

    def GetDatumTargetName(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param theDatumType:
        	:type theDatumType: XCAFDimTolObjects_DatumTargetType
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDatumTargetName(*args)

    GetDatumTargetName = staticmethod(GetDatumTargetName)

    def GetDatumTargetType(*args) -> "Standard_Boolean":
        """
        :param theDescription:
        	:type theDescription: TCollection_HAsciiString
        	:param theType:
        	:type theType: XCAFDimTolObjects_DatumTargetType
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDatumTargetType(*args)

    GetDatumTargetType = staticmethod(GetDatumTargetType)

    def GetDimClassOfTolerance(*args) -> "Standard_Boolean &":
        """
        :param theLAF:
        	:type theLAF: StepShape_LimitsAndFits
        	:param theHolle:
        	:type theHolle: bool
        	:param theFV:
        	:type theFV: XCAFDimTolObjects_DimensionFormVariance
        	:param theG:
        	:type theG: XCAFDimTolObjects_DimensionGrade
        	:rtype: void
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimClassOfTolerance(*args)

    GetDimClassOfTolerance = staticmethod(GetDimClassOfTolerance)

    def GetDimModifierName(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param theModifier:
        	:type theModifier: XCAFDimTolObjects_DimensionModif
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimModifierName(*args)

    GetDimModifierName = staticmethod(GetDimModifierName)

    def GetDimModifiers(*args) -> "void":
        """
        :param theCRI:
        	:type theCRI: StepRepr_CompoundRepresentationItem
        	:param theModifiers:
        	:type theModifiers: XCAFDimTolObjects_DimensionModifiersSequence
        	:rtype: void
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimModifiers(*args)

    GetDimModifiers = staticmethod(GetDimModifiers)

    def GetDimQualifierName(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param theQualifier:
        	:type theQualifier: XCAFDimTolObjects_DimensionQualifier
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimQualifierName(*args)

    GetDimQualifierName = staticmethod(GetDimQualifierName)

    def GetDimQualifierType(*args) -> "Standard_Boolean":
        """
        :param theDescription:
        	:type theDescription: TCollection_HAsciiString
        	:param theType:
        	:type theType: XCAFDimTolObjects_DimensionQualifier
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimQualifierType(*args)

    GetDimQualifierType = staticmethod(GetDimQualifierType)

    def GetDimType(*args) -> "Standard_Boolean":
        """
        :param theName:
        	:type theName: TCollection_HAsciiString
        	:param theType:
        	:type theType: XCAFDimTolObjects_DimensionType
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimType(*args)

    GetDimType = staticmethod(GetDimType)

    def GetDimTypeName(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param theType:
        	:type theType: XCAFDimTolObjects_DimensionType
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimTypeName(*args)

    GetDimTypeName = staticmethod(GetDimTypeName)

    def GetGeomTolerance(*args) -> "opencascade::handle< StepDimTol_GeometricTolerance >":
        """
        :param theType:
        	:type theType: XCAFDimTolObjects_GeomToleranceType
        	:rtype: opencascade::handle<StepDimTol_GeometricTolerance>
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetGeomTolerance(*args)

    GetGeomTolerance = staticmethod(GetGeomTolerance)

    def GetGeomToleranceModifier(*args) -> "StepDimTol_GeometricToleranceModifier":
        """
        :param theModifier:
        	:type theModifier: XCAFDimTolObjects_GeomToleranceModif
        	:rtype: StepDimTol_GeometricToleranceModifier
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetGeomToleranceModifier(*args)

    GetGeomToleranceModifier = staticmethod(GetGeomToleranceModifier)

    def GetGeomToleranceType(*args) -> "XCAFDimTolObjects_GeomToleranceType":
        """
        :param theType:
        	:type theType: XCAFDimTolObjects_GeomToleranceType
        	:rtype: StepDimTol_GeometricToleranceType
        :param theType:
        	:type theType: StepDimTol_GeometricToleranceType
        	:rtype: XCAFDimTolObjects_GeomToleranceType
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetGeomToleranceType(*args)

    GetGeomToleranceType = staticmethod(GetGeomToleranceType)

    def GetLimitsAndFits(*args) -> "opencascade::handle< StepShape_LimitsAndFits >":
        """
        :param theHole:
        	:type theHole: bool
        	:param theFormVariance:
        	:type theFormVariance: XCAFDimTolObjects_DimensionFormVariance
        	:param theGrade:
        	:type theGrade: XCAFDimTolObjects_DimensionGrade
        	:rtype: opencascade::handle<StepShape_LimitsAndFits>
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetLimitsAndFits(*args)

    GetLimitsAndFits = staticmethod(GetLimitsAndFits)

    def GetTessellation(*args) -> "opencascade::handle< StepVisual_TessellatedGeometricSet >":
        """
        :param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: opencascade::handle<StepVisual_TessellatedGeometricSet>
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetTessellation(*args)

    GetTessellation = staticmethod(GetTessellation)

    def GetTolValueType(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param theDescription:
        	:type theDescription: TCollection_HAsciiString
        	:param theType:
        	:type theType: XCAFDimTolObjects_GeomToleranceTypeValue
        	:rtype: bool
        :param theType:
        	:type theType: XCAFDimTolObjects_GeomToleranceTypeValue
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_GetTolValueType(*args)

    GetTolValueType = staticmethod(GetTolValueType)

    def IsDimensionalLocation(*args) -> "Standard_Boolean":
        """
        :param theType:
        	:type theType: XCAFDimTolObjects_DimensionType
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_IsDimensionalLocation(*args)

    IsDimensionalLocation = staticmethod(IsDimensionalLocation)

    def IsDimensionalSize(*args) -> "Standard_Boolean":
        """
        :param theType:
        	:type theType: XCAFDimTolObjects_DimensionType
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_GDTProperty_IsDimensionalSize(*args)

    IsDimensionalSize = staticmethod(IsDimensionalSize)

    def __init__(self, *args):
        """:rtype: None"""
        _STEPCAFControl.STEPCAFControl_GDTProperty_swiginit(self, _STEPCAFControl.new_STEPCAFControl_GDTProperty(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_GDTProperty
STEPCAFControl_GDTProperty_swigregister = _STEPCAFControl.STEPCAFControl_GDTProperty_swigregister
STEPCAFControl_GDTProperty_swigregister(STEPCAFControl_GDTProperty)

def STEPCAFControl_GDTProperty_GetDatumRefModifiers(*args) -> "opencascade::handle< StepDimTol_HArray1OfDatumReferenceModifier >":
    """
    :param theModifiers:
    	:type theModifiers: XCAFDimTolObjects_DatumModifiersSequence
    	:param theModifWithVal:
    	:type theModifWithVal: XCAFDimTolObjects_DatumModifWithValue
    	:param theValue:
    	:type theValue: float
    	:param theUnit:
    	:type theUnit: StepBasic_Unit
    	:rtype: opencascade::handle<StepDimTol_HArray1OfDatumReferenceModifier>
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDatumRefModifiers(*args)

def STEPCAFControl_GDTProperty_GetDatumTargetName(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param theDatumType:
    	:type theDatumType: XCAFDimTolObjects_DatumTargetType
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDatumTargetName(*args)

def STEPCAFControl_GDTProperty_GetDatumTargetType(*args) -> "Standard_Boolean":
    """
    :param theDescription:
    	:type theDescription: TCollection_HAsciiString
    	:param theType:
    	:type theType: XCAFDimTolObjects_DatumTargetType
    	:rtype: bool
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDatumTargetType(*args)

def STEPCAFControl_GDTProperty_GetDimClassOfTolerance(*args) -> "Standard_Boolean &":
    """
    :param theLAF:
    	:type theLAF: StepShape_LimitsAndFits
    	:param theHolle:
    	:type theHolle: bool
    	:param theFV:
    	:type theFV: XCAFDimTolObjects_DimensionFormVariance
    	:param theG:
    	:type theG: XCAFDimTolObjects_DimensionGrade
    	:rtype: void
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimClassOfTolerance(*args)

def STEPCAFControl_GDTProperty_GetDimModifierName(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param theModifier:
    	:type theModifier: XCAFDimTolObjects_DimensionModif
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimModifierName(*args)

def STEPCAFControl_GDTProperty_GetDimModifiers(*args) -> "void":
    """
    :param theCRI:
    	:type theCRI: StepRepr_CompoundRepresentationItem
    	:param theModifiers:
    	:type theModifiers: XCAFDimTolObjects_DimensionModifiersSequence
    	:rtype: void
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimModifiers(*args)

def STEPCAFControl_GDTProperty_GetDimQualifierName(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param theQualifier:
    	:type theQualifier: XCAFDimTolObjects_DimensionQualifier
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimQualifierName(*args)

def STEPCAFControl_GDTProperty_GetDimQualifierType(*args) -> "Standard_Boolean":
    """
    :param theDescription:
    	:type theDescription: TCollection_HAsciiString
    	:param theType:
    	:type theType: XCAFDimTolObjects_DimensionQualifier
    	:rtype: bool
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimQualifierType(*args)

def STEPCAFControl_GDTProperty_GetDimType(*args) -> "Standard_Boolean":
    """
    :param theName:
    	:type theName: TCollection_HAsciiString
    	:param theType:
    	:type theType: XCAFDimTolObjects_DimensionType
    	:rtype: bool
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimType(*args)

def STEPCAFControl_GDTProperty_GetDimTypeName(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param theType:
    	:type theType: XCAFDimTolObjects_DimensionType
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetDimTypeName(*args)

def STEPCAFControl_GDTProperty_GetGeomTolerance(*args) -> "opencascade::handle< StepDimTol_GeometricTolerance >":
    """
    :param theType:
    	:type theType: XCAFDimTolObjects_GeomToleranceType
    	:rtype: opencascade::handle<StepDimTol_GeometricTolerance>
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetGeomTolerance(*args)

def STEPCAFControl_GDTProperty_GetGeomToleranceModifier(*args) -> "StepDimTol_GeometricToleranceModifier":
    """
    :param theModifier:
    	:type theModifier: XCAFDimTolObjects_GeomToleranceModif
    	:rtype: StepDimTol_GeometricToleranceModifier
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetGeomToleranceModifier(*args)

def STEPCAFControl_GDTProperty_GetGeomToleranceType(*args) -> "XCAFDimTolObjects_GeomToleranceType":
    """
    :param theType:
    	:type theType: XCAFDimTolObjects_GeomToleranceType
    	:rtype: StepDimTol_GeometricToleranceType
    :param theType:
    	:type theType: StepDimTol_GeometricToleranceType
    	:rtype: XCAFDimTolObjects_GeomToleranceType
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetGeomToleranceType(*args)

def STEPCAFControl_GDTProperty_GetLimitsAndFits(*args) -> "opencascade::handle< StepShape_LimitsAndFits >":
    """
    :param theHole:
    	:type theHole: bool
    	:param theFormVariance:
    	:type theFormVariance: XCAFDimTolObjects_DimensionFormVariance
    	:param theGrade:
    	:type theGrade: XCAFDimTolObjects_DimensionGrade
    	:rtype: opencascade::handle<StepShape_LimitsAndFits>
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetLimitsAndFits(*args)

def STEPCAFControl_GDTProperty_GetTessellation(*args) -> "opencascade::handle< StepVisual_TessellatedGeometricSet >":
    """
    :param theShape:
    	:type theShape: TopoDS_Shape
    	:rtype: opencascade::handle<StepVisual_TessellatedGeometricSet>
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetTessellation(*args)

def STEPCAFControl_GDTProperty_GetTolValueType(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param theDescription:
    	:type theDescription: TCollection_HAsciiString
    	:param theType:
    	:type theType: XCAFDimTolObjects_GeomToleranceTypeValue
    	:rtype: bool
    :param theType:
    	:type theType: XCAFDimTolObjects_GeomToleranceTypeValue
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_GetTolValueType(*args)

def STEPCAFControl_GDTProperty_IsDimensionalLocation(*args) -> "Standard_Boolean":
    """
    :param theType:
    	:type theType: XCAFDimTolObjects_DimensionType
    	:rtype: bool
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_IsDimensionalLocation(*args)

def STEPCAFControl_GDTProperty_IsDimensionalSize(*args) -> "Standard_Boolean":
    """
    :param theType:
    	:type theType: XCAFDimTolObjects_DimensionType
    	:rtype: bool
    """
    return _STEPCAFControl.STEPCAFControl_GDTProperty_IsDimensionalSize(*args)

class STEPCAFControl_Reader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeReader(self, *args) -> "STEPControl_Reader &":
        """
        * Returns basic reader
        	:rtype: STEPControl_Reader
        """
        return _STEPCAFControl.STEPCAFControl_Reader_ChangeReader(self, *args)


    def ExternFile(self, *args) -> "Standard_Boolean":
        """
        * Returns data on external file by its name Returns False if no external file with given name is read
        	:param name:
        	:type name: char *
        	:param ef:
        	:type ef: STEPCAFControl_ExternFile
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_Reader_ExternFile(self, *args)


    def ExternFiles(self, *args) -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< STEPCAFControl_ExternFile > > const &":
        """
        * Returns data on external files Returns Null handle if no external files are read
        	:rtype: NCollection_DataMap<TCollection_AsciiString, opencascade::handle<STEPCAFControl_ExternFile> >
        """
        return _STEPCAFControl.STEPCAFControl_Reader_ExternFiles(self, *args)


    def FindInstance(*args) -> "TDF_Label":
        """
        * Returns label of instance of an assembly component corresponding to a given NAUO
        	:param NAUO:
        	:type NAUO: StepRepr_NextAssemblyUsageOccurrence
        	:param STool:
        	:type STool: XCAFDoc_ShapeTool
        	:param Tool:
        	:type Tool: STEPConstruct_Tool
        	:param ShapeLabelMap:
        	:type ShapeLabelMap: XCAFDoc_DataMapOfShapeLabel
        	:rtype: TDF_Label
        """
        return _STEPCAFControl.STEPCAFControl_Reader_FindInstance(*args)

    FindInstance = staticmethod(FindInstance)

    def GetColorMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Reader_GetColorMode(self, *args)


    def GetGDTMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Reader_GetGDTMode(self, *args)


    def GetLayerMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Reader_GetLayerMode(self, *args)


    def GetMatMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Reader_GetMatMode(self, *args)


    def GetNameMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Reader_GetNameMode(self, *args)


    def GetPropsMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Reader_GetPropsMode(self, *args)


    def GetSHUOMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Reader_GetSHUOMode(self, *args)


    def GetViewMode(self, *args) -> "Standard_Boolean":
        """
        * Get View mode
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_Reader_GetViewMode(self, *args)


    def Init(self, *args) -> "void":
        """
        * Clears the internal data structures and attaches to a new session Clears the session if it was not yet set for STEP
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:param scratch: default value is Standard_True
        	:type scratch: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Reader_Init(self, *args)


    def NbRootsForTransfer(self, *args) -> "Standard_Integer":
        """
        * Returns number of roots recognized for transfer Shortcut for Reader().NbRootsForTransfer()
        	:rtype: int
        """
        return _STEPCAFControl.STEPCAFControl_Reader_NbRootsForTransfer(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        :param filename:
        	:type filename: TCollection_AsciiString
        	:param doc:
        	:type doc: TDocStd_Document
        	:rtype: bool
        * Translate STEP file given by filename into the document Return True if succeeded, and False in case of fail
        	:param filename:
        	:type filename: char *
        	:param doc:
        	:type doc: TDocStd_Document
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_Reader_Perform(self, *args)


    def ReadFile(self, *args) -> "IFSelect_ReturnStatus":
        """
        * Loads a file and returns the read status Provided for use like single-file reader
        	:param filename:
        	:type filename: char *
        	:rtype: IFSelect_ReturnStatus
        """
        return _STEPCAFControl.STEPCAFControl_Reader_ReadFile(self, *args)


    def Reader(self, *args) -> "STEPControl_Reader const &":
        """
        * Returns basic reader as const
        	:rtype: STEPControl_Reader
        """
        return _STEPCAFControl.STEPCAFControl_Reader_Reader(self, *args)


    def __init__(self, *args):
        """
        * Creates a reader with an empty STEP model and sets ColorMode, LayerMode, NameMode and PropsMode to Standard_True.
        	:rtype: None
        * Creates a reader tool and attaches it to an already existing Session Clears the session if it was not yet set for STEP
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:param scratch: default value is Standard_True
        	:type scratch: bool
        	:rtype: None
        """
        _STEPCAFControl.STEPCAFControl_Reader_swiginit(self, _STEPCAFControl.new_STEPCAFControl_Reader(*args))

    def SetColorMode(self, *args) -> "void":
        """
        * Set ColorMode for indicate read Colors or not.
        	:param colormode:
        	:type colormode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Reader_SetColorMode(self, *args)


    def SetGDTMode(self, *args) -> "void":
        """
        * Set GDT mode for indicate write GDT or not.
        	:param gdtmode:
        	:type gdtmode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Reader_SetGDTMode(self, *args)


    def SetLayerMode(self, *args) -> "void":
        """
        * Set LayerMode for indicate read Layers or not.
        	:param layermode:
        	:type layermode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Reader_SetLayerMode(self, *args)


    def SetMatMode(self, *args) -> "void":
        """
        * Set Material mode
        	:param matmode:
        	:type matmode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Reader_SetMatMode(self, *args)


    def SetNameMode(self, *args) -> "void":
        """
        * Set NameMode for indicate read Name or not.
        	:param namemode:
        	:type namemode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Reader_SetNameMode(self, *args)


    def SetPropsMode(self, *args) -> "void":
        """
        * PropsMode for indicate read Validation properties or not.
        	:param propsmode:
        	:type propsmode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Reader_SetPropsMode(self, *args)


    def SetSHUOMode(self, *args) -> "void":
        """
        * Set SHUO mode for indicate write SHUO or not.
        	:param shuomode:
        	:type shuomode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Reader_SetSHUOMode(self, *args)


    def SetSourceCodePage(self, *args) -> "void":
        """
        * Return the encoding of STEP file for converting names into UNICODE.
        	:param theCode:
        	:type theCode: Resource_FormatType
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Reader_SetSourceCodePage(self, *args)


    def SetViewMode(self, *args) -> "void":
        """
        * Set View mode
        	:param viewmode:
        	:type viewmode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Reader_SetViewMode(self, *args)


    def SourceCodePage(self, *args) -> "Resource_FormatType":
        """
        * Return the encoding of STEP file for converting names into UNICODE. Initialized from 'read.stepcaf.codepage' variable by constructor, which is Resource_UTF8 by default.
        	:rtype: Resource_FormatType
        """
        return _STEPCAFControl.STEPCAFControl_Reader_SourceCodePage(self, *args)


    def Transfer(self, *args) -> "Standard_Boolean":
        """
        * Translates currently loaded STEP file into the document Returns True if succeeded, and False in case of fail Provided for use like single-file reader
        	:param doc:
        	:type doc: TDocStd_Document
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_Reader_Transfer(self, *args)


    def TransferOneRoot(self, *args) -> "Standard_Boolean":
        """
        * Translates currently loaded STEP file into the document Returns True if succeeded, and False in case of fail Provided for use like single-file reader
        	:param num:
        	:type num: int
        	:param doc:
        	:type doc: TDocStd_Document
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_Reader_TransferOneRoot(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_Reader
STEPCAFControl_Reader.ChangeReader = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_ChangeReader, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.ExternFile = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_ExternFile, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.ExternFiles = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_ExternFiles, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.GetColorMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_GetColorMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.GetGDTMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_GetGDTMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.GetLayerMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_GetLayerMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.GetMatMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_GetMatMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.GetNameMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_GetNameMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.GetPropsMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_GetPropsMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.GetSHUOMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_GetSHUOMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.GetViewMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_GetViewMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.Init = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_Init, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.NbRootsForTransfer = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_NbRootsForTransfer, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.Perform = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_Perform, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.ReadFile = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_ReadFile, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.Reader = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_Reader, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.SetColorMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_SetColorMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.SetGDTMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_SetGDTMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.SetLayerMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_SetLayerMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.SetMatMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_SetMatMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.SetNameMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_SetNameMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.SetPropsMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_SetPropsMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.SetSHUOMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_SetSHUOMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.SetSourceCodePage = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_SetSourceCodePage, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.SetViewMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_SetViewMode, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.SourceCodePage = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_SourceCodePage, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.Transfer = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_Transfer, None, STEPCAFControl_Reader)
STEPCAFControl_Reader.TransferOneRoot = new_instancemethod(_STEPCAFControl.STEPCAFControl_Reader_TransferOneRoot, None, STEPCAFControl_Reader)
STEPCAFControl_Reader_swigregister = _STEPCAFControl.STEPCAFControl_Reader_swigregister
STEPCAFControl_Reader_swigregister(STEPCAFControl_Reader)

def STEPCAFControl_Reader_FindInstance(*args) -> "TDF_Label":
    """
    * Returns label of instance of an assembly component corresponding to a given NAUO
    	:param NAUO:
    	:type NAUO: StepRepr_NextAssemblyUsageOccurrence
    	:param STool:
    	:type STool: XCAFDoc_ShapeTool
    	:param Tool:
    	:type Tool: STEPConstruct_Tool
    	:param ShapeLabelMap:
    	:type ShapeLabelMap: XCAFDoc_DataMapOfShapeLabel
    	:rtype: TDF_Label
    """
    return _STEPCAFControl.STEPCAFControl_Reader_FindInstance(*args)

class STEPCAFControl_Writer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeWriter(self, *args) -> "STEPControl_Writer &":
        """
        * Returns basic reader for root file
        	:rtype: STEPControl_Writer
        """
        return _STEPCAFControl.STEPCAFControl_Writer_ChangeWriter(self, *args)


    def ExternFile(self, *args) -> "Standard_Boolean":
        """
        * Returns data on external file by its original label Returns False if no external file with given name is read
        	:param L:
        	:type L: TDF_Label
        	:param ef:
        	:type ef: STEPCAFControl_ExternFile
        	:rtype: bool
        * Returns data on external file by its name Returns False if no external file with given name is read
        	:param name:
        	:type name: char *
        	:param ef:
        	:type ef: STEPCAFControl_ExternFile
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_Writer_ExternFile(self, *args)


    def ExternFiles(self, *args) -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< STEPCAFControl_ExternFile > > const &":
        """
        * Returns data on external files Returns Null handle if no external files are read
        	:rtype: NCollection_DataMap<TCollection_AsciiString, opencascade::handle<STEPCAFControl_ExternFile> >
        """
        return _STEPCAFControl.STEPCAFControl_Writer_ExternFiles(self, *args)


    def GetColorMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Writer_GetColorMode(self, *args)


    def GetDimTolMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Writer_GetDimTolMode(self, *args)


    def GetLayerMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Writer_GetLayerMode(self, *args)


    def GetMaterialMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Writer_GetMaterialMode(self, *args)


    def GetNameMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Writer_GetNameMode(self, *args)


    def GetPropsMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Writer_GetPropsMode(self, *args)


    def GetSHUOMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPCAFControl.STEPCAFControl_Writer_GetSHUOMode(self, *args)


    def Init(self, *args) -> "void":
        """
        * Clears the internal data structures and attaches to a new session Clears the session if it was not yet set for STEP
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:param scratch: default value is Standard_True
        	:type scratch: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Writer_Init(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        :param doc:
        	:type doc: TDocStd_Document
        	:param filename:
        	:type filename: TCollection_AsciiString
        	:rtype: bool
        * Transfers a document and writes it to a STEP file Returns True if translation is OK
        	:param doc:
        	:type doc: TDocStd_Document
        	:param filename:
        	:type filename: char *
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_Writer_Perform(self, *args)


    def __init__(self, *args):
        """
        * Creates a writer with an empty STEP model and sets ColorMode, LayerMode, NameMode and PropsMode to Standard_True.
        	:rtype: None
        * Creates a reader tool and attaches it to an already existing Session Clears the session if it was not yet set for STEP Clears the internal data structures
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:param scratch: default value is Standard_True
        	:type scratch: bool
        	:rtype: None
        """
        _STEPCAFControl.STEPCAFControl_Writer_swiginit(self, _STEPCAFControl.new_STEPCAFControl_Writer(*args))

    def SetColorMode(self, *args) -> "void":
        """
        * Set ColorMode for indicate write Colors or not.
        	:param colormode:
        	:type colormode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Writer_SetColorMode(self, *args)


    def SetDimTolMode(self, *args) -> "void":
        """
        * Set dimtolmode for indicate write D&GTs or not.
        	:param dimtolmode:
        	:type dimtolmode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Writer_SetDimTolMode(self, *args)


    def SetLayerMode(self, *args) -> "void":
        """
        * Set LayerMode for indicate write Layers or not.
        	:param layermode:
        	:type layermode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Writer_SetLayerMode(self, *args)


    def SetMaterialMode(self, *args) -> "void":
        """
        * Set dimtolmode for indicate write D&GTs or not.
        	:param matmode:
        	:type matmode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Writer_SetMaterialMode(self, *args)


    def SetNameMode(self, *args) -> "void":
        """
        * Set NameMode for indicate write Name or not.
        	:param namemode:
        	:type namemode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Writer_SetNameMode(self, *args)


    def SetPropsMode(self, *args) -> "void":
        """
        * PropsMode for indicate write Validation properties or not.
        	:param propsmode:
        	:type propsmode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Writer_SetPropsMode(self, *args)


    def SetSHUOMode(self, *args) -> "void":
        """
        * Set SHUO mode for indicate write SHUO or not.
        	:param shuomode:
        	:type shuomode: bool
        	:rtype: None
        """
        return _STEPCAFControl.STEPCAFControl_Writer_SetSHUOMode(self, *args)


    def Transfer(self, *args) -> "Standard_Boolean":
        """
        * Transfers a document (or single label) to a STEP model The mode of translation of shape is AsIs If multi is not null pointer, it switches to multifile mode (with external refs), and string pointed by <multi> gives prefix for names of extern files (can be empty string) Returns True if translation is OK
        	:param doc:
        	:type doc: TDocStd_Document
        	:param mode: default value is STEPControl_AsIs
        	:type mode: STEPControl_StepModelType
        	:param multi: default value is 0
        	:type multi: char *
        	:rtype: bool
        * Method to transfer part of the document specified by label
        	:param L:
        	:type L: TDF_Label
        	:param mode: default value is STEPControl_AsIs
        	:type mode: STEPControl_StepModelType
        	:param multi: default value is 0
        	:type multi: char *
        	:rtype: bool
        """
        return _STEPCAFControl.STEPCAFControl_Writer_Transfer(self, *args)


    def Write(self, *args) -> "IFSelect_ReturnStatus":
        """
        * Writes all the produced models into file In case of multimodel with extern references, filename will be a name of root file, all other files have names of corresponding parts Provided for use like single-file writer
        	:param filename:
        	:type filename: char *
        	:rtype: IFSelect_ReturnStatus
        """
        return _STEPCAFControl.STEPCAFControl_Writer_Write(self, *args)


    def Writer(self, *args) -> "STEPControl_Writer const &":
        """
        * Returns basic reader as const
        	:rtype: STEPControl_Writer
        """
        return _STEPCAFControl.STEPCAFControl_Writer_Writer(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPCAFControl.delete_STEPCAFControl_Writer
STEPCAFControl_Writer.ChangeWriter = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_ChangeWriter, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.ExternFile = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_ExternFile, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.ExternFiles = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_ExternFiles, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.GetColorMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_GetColorMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.GetDimTolMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_GetDimTolMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.GetLayerMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_GetLayerMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.GetMaterialMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_GetMaterialMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.GetNameMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_GetNameMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.GetPropsMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_GetPropsMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.GetSHUOMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_GetSHUOMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.Init = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_Init, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.Perform = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_Perform, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.SetColorMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_SetColorMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.SetDimTolMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_SetDimTolMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.SetLayerMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_SetLayerMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.SetMaterialMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_SetMaterialMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.SetNameMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_SetNameMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.SetPropsMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_SetPropsMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.SetSHUOMode = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_SetSHUOMode, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.Transfer = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_Transfer, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.Write = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_Write, None, STEPCAFControl_Writer)
STEPCAFControl_Writer.Writer = new_instancemethod(_STEPCAFControl.STEPCAFControl_Writer_Writer, None, STEPCAFControl_Writer)
STEPCAFControl_Writer_swigregister = _STEPCAFControl.STEPCAFControl_Writer_swigregister
STEPCAFControl_Writer_swigregister(STEPCAFControl_Writer)



