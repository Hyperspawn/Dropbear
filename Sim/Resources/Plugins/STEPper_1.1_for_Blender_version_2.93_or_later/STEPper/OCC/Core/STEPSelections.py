# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
STEPSelections module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepselections.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _STEPSelections.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_STEPSelections')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_STEPSelections')
    _STEPSelections = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_STEPSelections', [dirname(__file__)])
        except ImportError:
            import _STEPSelections
            return _STEPSelections
        try:
            _mod = imp.load_module('_STEPSelections', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _STEPSelections = swig_import_helper()
    del swig_import_helper
else:
    import _STEPSelections
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _STEPSelections.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_STEPSelections.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_STEPSelections.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_STEPSelections.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_STEPSelections.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_STEPSelections.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_STEPSelections.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_STEPSelections.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_STEPSelections.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_STEPSelections.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_STEPSelections.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_STEPSelections.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_STEPSelections.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_STEPSelections.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_STEPSelections.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_STEPSelections.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_STEPSelections.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _STEPSelections.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _STEPSelections.process_exception(error, method_name, class_name)
process_exception = _STEPSelections.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepShape
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.IFSelect
import OCC.Core.XSControl
import OCC.Core.Transfer
import OCC.Core.TopTools
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d

def Handle_STEPSelections_AssemblyComponent_Create() -> "opencascade::handle< STEPSelections_AssemblyComponent >":
    return _STEPSelections.Handle_STEPSelections_AssemblyComponent_Create()
Handle_STEPSelections_AssemblyComponent_Create = _STEPSelections.Handle_STEPSelections_AssemblyComponent_Create

def Handle_STEPSelections_AssemblyComponent_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPSelections_AssemblyComponent >":
    return _STEPSelections.Handle_STEPSelections_AssemblyComponent_DownCast(t)
Handle_STEPSelections_AssemblyComponent_DownCast = _STEPSelections.Handle_STEPSelections_AssemblyComponent_DownCast

def Handle_STEPSelections_AssemblyComponent_IsNull(t: 'opencascade::handle< STEPSelections_AssemblyComponent > const &') -> "bool":
    return _STEPSelections.Handle_STEPSelections_AssemblyComponent_IsNull(t)
Handle_STEPSelections_AssemblyComponent_IsNull = _STEPSelections.Handle_STEPSelections_AssemblyComponent_IsNull

def Handle_STEPSelections_AssemblyLink_Create() -> "opencascade::handle< STEPSelections_AssemblyLink >":
    return _STEPSelections.Handle_STEPSelections_AssemblyLink_Create()
Handle_STEPSelections_AssemblyLink_Create = _STEPSelections.Handle_STEPSelections_AssemblyLink_Create

def Handle_STEPSelections_AssemblyLink_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPSelections_AssemblyLink >":
    return _STEPSelections.Handle_STEPSelections_AssemblyLink_DownCast(t)
Handle_STEPSelections_AssemblyLink_DownCast = _STEPSelections.Handle_STEPSelections_AssemblyLink_DownCast

def Handle_STEPSelections_AssemblyLink_IsNull(t: 'opencascade::handle< STEPSelections_AssemblyLink > const &') -> "bool":
    return _STEPSelections.Handle_STEPSelections_AssemblyLink_IsNull(t)
Handle_STEPSelections_AssemblyLink_IsNull = _STEPSelections.Handle_STEPSelections_AssemblyLink_IsNull

def Handle_STEPSelections_SelectAssembly_Create() -> "opencascade::handle< STEPSelections_SelectAssembly >":
    return _STEPSelections.Handle_STEPSelections_SelectAssembly_Create()
Handle_STEPSelections_SelectAssembly_Create = _STEPSelections.Handle_STEPSelections_SelectAssembly_Create

def Handle_STEPSelections_SelectAssembly_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPSelections_SelectAssembly >":
    return _STEPSelections.Handle_STEPSelections_SelectAssembly_DownCast(t)
Handle_STEPSelections_SelectAssembly_DownCast = _STEPSelections.Handle_STEPSelections_SelectAssembly_DownCast

def Handle_STEPSelections_SelectAssembly_IsNull(t: 'opencascade::handle< STEPSelections_SelectAssembly > const &') -> "bool":
    return _STEPSelections.Handle_STEPSelections_SelectAssembly_IsNull(t)
Handle_STEPSelections_SelectAssembly_IsNull = _STEPSelections.Handle_STEPSelections_SelectAssembly_IsNull

def Handle_STEPSelections_SelectDerived_Create() -> "opencascade::handle< STEPSelections_SelectDerived >":
    return _STEPSelections.Handle_STEPSelections_SelectDerived_Create()
Handle_STEPSelections_SelectDerived_Create = _STEPSelections.Handle_STEPSelections_SelectDerived_Create

def Handle_STEPSelections_SelectDerived_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPSelections_SelectDerived >":
    return _STEPSelections.Handle_STEPSelections_SelectDerived_DownCast(t)
Handle_STEPSelections_SelectDerived_DownCast = _STEPSelections.Handle_STEPSelections_SelectDerived_DownCast

def Handle_STEPSelections_SelectDerived_IsNull(t: 'opencascade::handle< STEPSelections_SelectDerived > const &') -> "bool":
    return _STEPSelections.Handle_STEPSelections_SelectDerived_IsNull(t)
Handle_STEPSelections_SelectDerived_IsNull = _STEPSelections.Handle_STEPSelections_SelectDerived_IsNull

def Handle_STEPSelections_SelectFaces_Create() -> "opencascade::handle< STEPSelections_SelectFaces >":
    return _STEPSelections.Handle_STEPSelections_SelectFaces_Create()
Handle_STEPSelections_SelectFaces_Create = _STEPSelections.Handle_STEPSelections_SelectFaces_Create

def Handle_STEPSelections_SelectFaces_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPSelections_SelectFaces >":
    return _STEPSelections.Handle_STEPSelections_SelectFaces_DownCast(t)
Handle_STEPSelections_SelectFaces_DownCast = _STEPSelections.Handle_STEPSelections_SelectFaces_DownCast

def Handle_STEPSelections_SelectFaces_IsNull(t: 'opencascade::handle< STEPSelections_SelectFaces > const &') -> "bool":
    return _STEPSelections.Handle_STEPSelections_SelectFaces_IsNull(t)
Handle_STEPSelections_SelectFaces_IsNull = _STEPSelections.Handle_STEPSelections_SelectFaces_IsNull

def Handle_STEPSelections_SelectForTransfer_Create() -> "opencascade::handle< STEPSelections_SelectForTransfer >":
    return _STEPSelections.Handle_STEPSelections_SelectForTransfer_Create()
Handle_STEPSelections_SelectForTransfer_Create = _STEPSelections.Handle_STEPSelections_SelectForTransfer_Create

def Handle_STEPSelections_SelectForTransfer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPSelections_SelectForTransfer >":
    return _STEPSelections.Handle_STEPSelections_SelectForTransfer_DownCast(t)
Handle_STEPSelections_SelectForTransfer_DownCast = _STEPSelections.Handle_STEPSelections_SelectForTransfer_DownCast

def Handle_STEPSelections_SelectForTransfer_IsNull(t: 'opencascade::handle< STEPSelections_SelectForTransfer > const &') -> "bool":
    return _STEPSelections.Handle_STEPSelections_SelectForTransfer_IsNull(t)
Handle_STEPSelections_SelectForTransfer_IsNull = _STEPSelections.Handle_STEPSelections_SelectForTransfer_IsNull

def Handle_STEPSelections_SelectGSCurves_Create() -> "opencascade::handle< STEPSelections_SelectGSCurves >":
    return _STEPSelections.Handle_STEPSelections_SelectGSCurves_Create()
Handle_STEPSelections_SelectGSCurves_Create = _STEPSelections.Handle_STEPSelections_SelectGSCurves_Create

def Handle_STEPSelections_SelectGSCurves_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPSelections_SelectGSCurves >":
    return _STEPSelections.Handle_STEPSelections_SelectGSCurves_DownCast(t)
Handle_STEPSelections_SelectGSCurves_DownCast = _STEPSelections.Handle_STEPSelections_SelectGSCurves_DownCast

def Handle_STEPSelections_SelectGSCurves_IsNull(t: 'opencascade::handle< STEPSelections_SelectGSCurves > const &') -> "bool":
    return _STEPSelections.Handle_STEPSelections_SelectGSCurves_IsNull(t)
Handle_STEPSelections_SelectGSCurves_IsNull = _STEPSelections.Handle_STEPSelections_SelectGSCurves_IsNull

def Handle_STEPSelections_SelectInstances_Create() -> "opencascade::handle< STEPSelections_SelectInstances >":
    return _STEPSelections.Handle_STEPSelections_SelectInstances_Create()
Handle_STEPSelections_SelectInstances_Create = _STEPSelections.Handle_STEPSelections_SelectInstances_Create

def Handle_STEPSelections_SelectInstances_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPSelections_SelectInstances >":
    return _STEPSelections.Handle_STEPSelections_SelectInstances_DownCast(t)
Handle_STEPSelections_SelectInstances_DownCast = _STEPSelections.Handle_STEPSelections_SelectInstances_DownCast

def Handle_STEPSelections_SelectInstances_IsNull(t: 'opencascade::handle< STEPSelections_SelectInstances > const &') -> "bool":
    return _STEPSelections.Handle_STEPSelections_SelectInstances_IsNull(t)
Handle_STEPSelections_SelectInstances_IsNull = _STEPSelections.Handle_STEPSelections_SelectInstances_IsNull

def Handle_STEPSelections_HSequenceOfAssemblyLink_Create() -> "opencascade::handle< STEPSelections_HSequenceOfAssemblyLink >":
    return _STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_Create()
Handle_STEPSelections_HSequenceOfAssemblyLink_Create = _STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_Create

def Handle_STEPSelections_HSequenceOfAssemblyLink_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPSelections_HSequenceOfAssemblyLink >":
    return _STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_DownCast(t)
Handle_STEPSelections_HSequenceOfAssemblyLink_DownCast = _STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_DownCast

def Handle_STEPSelections_HSequenceOfAssemblyLink_IsNull(t: 'opencascade::handle< STEPSelections_HSequenceOfAssemblyLink > const &') -> "bool":
    return _STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_IsNull(t)
Handle_STEPSelections_HSequenceOfAssemblyLink_IsNull = _STEPSelections.Handle_STEPSelections_HSequenceOfAssemblyLink_IsNull
class STEPSelections_SequenceOfAssemblyLink(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.STEPSelections_SequenceOfAssemblyLink_swiginit(self, _STEPSelections.new_STEPSelections_SequenceOfAssemblyLink(*args))
    delNode = staticmethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_delNode)
    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SequenceOfAssemblyLink
STEPSelections_SequenceOfAssemblyLink.begin = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_begin, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.end = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_end, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.cbegin = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_cbegin, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.cend = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_cend, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Size = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Size, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Length = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Length, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Lower = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Lower, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Upper = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Upper, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.IsEmpty = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_IsEmpty, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Reverse = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Reverse, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Exchange = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Exchange, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Clear = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Clear, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Assign = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Assign, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Set = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Set, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Remove = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Remove, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Append = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Append, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Prepend = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Prepend, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.InsertBefore = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_InsertBefore, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.InsertAfter = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_InsertAfter, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Split = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Split, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.First = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_First, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.ChangeFirst = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_ChangeFirst, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Last = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Last, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.ChangeLast = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_ChangeLast, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.Value = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_Value, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.ChangeValue = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_ChangeValue, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.__call__ = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink___call__, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink.SetValue = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyLink_SetValue, None, STEPSelections_SequenceOfAssemblyLink)
STEPSelections_SequenceOfAssemblyLink_swigregister = _STEPSelections.STEPSelections_SequenceOfAssemblyLink_swigregister
STEPSelections_SequenceOfAssemblyLink_swigregister(STEPSelections_SequenceOfAssemblyLink)

def STEPSelections_SequenceOfAssemblyLink_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _STEPSelections.STEPSelections_SequenceOfAssemblyLink_delNode(theNode, theAl)
STEPSelections_SequenceOfAssemblyLink_delNode = _STEPSelections.STEPSelections_SequenceOfAssemblyLink_delNode

class STEPSelections_SequenceOfAssemblyComponent(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_swiginit(self, _STEPSelections.new_STEPSelections_SequenceOfAssemblyComponent(*args))
    delNode = staticmethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_delNode)
    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SequenceOfAssemblyComponent
STEPSelections_SequenceOfAssemblyComponent.begin = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_begin, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.end = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_end, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.cbegin = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_cbegin, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.cend = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_cend, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Size = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Size, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Length = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Length, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Lower = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Lower, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Upper = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Upper, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.IsEmpty = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_IsEmpty, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Reverse = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Reverse, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Exchange = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Exchange, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Clear = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Clear, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Assign = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Assign, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Set = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Set, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Remove = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Remove, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Append = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Append, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Prepend = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Prepend, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.InsertBefore = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_InsertBefore, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.InsertAfter = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_InsertAfter, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Split = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Split, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.First = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_First, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.ChangeFirst = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_ChangeFirst, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Last = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Last, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.ChangeLast = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_ChangeLast, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.Value = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_Value, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.ChangeValue = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_ChangeValue, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.__call__ = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent___call__, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent.SetValue = new_instancemethod(_STEPSelections.STEPSelections_SequenceOfAssemblyComponent_SetValue, None, STEPSelections_SequenceOfAssemblyComponent)
STEPSelections_SequenceOfAssemblyComponent_swigregister = _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_swigregister
STEPSelections_SequenceOfAssemblyComponent_swigregister(STEPSelections_SequenceOfAssemblyComponent)

def STEPSelections_SequenceOfAssemblyComponent_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_delNode(theNode, theAl)
STEPSelections_SequenceOfAssemblyComponent_delNode = _STEPSelections.STEPSelections_SequenceOfAssemblyComponent_delNode

class STEPSelections_AssemblyComponent(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetList(self, *args) -> "opencascade::handle< STEPSelections_HSequenceOfAssemblyLink >":
        """:rtype: opencascade::handle<STEPSelections_HSequenceOfAssemblyLink>"""
        return _STEPSelections.STEPSelections_AssemblyComponent_GetList(self, *args)


    def GetSDR(self, *args) -> "opencascade::handle< StepShape_ShapeDefinitionRepresentation >":
        """:rtype: opencascade::handle<StepShape_ShapeDefinitionRepresentation>"""
        return _STEPSelections.STEPSelections_AssemblyComponent_GetSDR(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param sdr:
        	:type sdr: StepShape_ShapeDefinitionRepresentation
        	:param list:
        	:type list: STEPSelections_HSequenceOfAssemblyLink
        	:rtype: None
        """
        _STEPSelections.STEPSelections_AssemblyComponent_swiginit(self, _STEPSelections.new_STEPSelections_AssemblyComponent(*args))

    def SetList(self, *args) -> "void":
        """
        :param list:
        	:type list: STEPSelections_HSequenceOfAssemblyLink
        	:rtype: None
        """
        return _STEPSelections.STEPSelections_AssemblyComponent_SetList(self, *args)


    def SetSDR(self, *args) -> "void":
        """
        :param sdr:
        	:type sdr: StepShape_ShapeDefinitionRepresentation
        	:rtype: None
        """
        return _STEPSelections.STEPSelections_AssemblyComponent_SetSDR(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_STEPSelections_AssemblyComponent_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_AssemblyComponent
STEPSelections_AssemblyComponent.GetList = new_instancemethod(_STEPSelections.STEPSelections_AssemblyComponent_GetList, None, STEPSelections_AssemblyComponent)
STEPSelections_AssemblyComponent.GetSDR = new_instancemethod(_STEPSelections.STEPSelections_AssemblyComponent_GetSDR, None, STEPSelections_AssemblyComponent)
STEPSelections_AssemblyComponent.SetList = new_instancemethod(_STEPSelections.STEPSelections_AssemblyComponent_SetList, None, STEPSelections_AssemblyComponent)
STEPSelections_AssemblyComponent.SetSDR = new_instancemethod(_STEPSelections.STEPSelections_AssemblyComponent_SetSDR, None, STEPSelections_AssemblyComponent)
STEPSelections_AssemblyComponent_swigregister = _STEPSelections.STEPSelections_AssemblyComponent_swigregister
STEPSelections_AssemblyComponent_swigregister(STEPSelections_AssemblyComponent)

class STEPSelections_AssemblyExplorer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(STEPSelections_AssemblyExplorer self) -> std::string"""
        return _STEPSelections.STEPSelections_AssemblyExplorer_DumpToString(self)


    def FillListWithGraph(self, *args) -> "void":
        """
        :param cmp:
        	:type cmp: STEPSelections_AssemblyComponent
        	:rtype: None
        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_FillListWithGraph(self, *args)


    def FindItemWithNAUO(self, *args) -> "opencascade::handle< Standard_Transient >":
        """
        :param nauo:
        	:type nauo: StepRepr_NextAssemblyUsageOccurrence
        	:rtype: opencascade::handle<Standard_Transient>
        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_FindItemWithNAUO(self, *args)


    def FindSDRWithProduct(self, *args) -> "opencascade::handle< StepShape_ShapeDefinitionRepresentation >":
        """
        :param product:
        	:type product: StepBasic_ProductDefinition
        	:rtype: opencascade::handle<StepShape_ShapeDefinitionRepresentation>
        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_FindSDRWithProduct(self, *args)


    def Init(self, *args) -> "void":
        """
        :param G:
        	:type G: Interface_Graph
        	:rtype: None
        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_Init(self, *args)


    def NbAssemblies(self, *args) -> "Standard_Integer":
        """
        * Returns the number of root assemblies;
        	:rtype: int
        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_NbAssemblies(self, *args)


    def Root(self, *args) -> "opencascade::handle< STEPSelections_AssemblyComponent >":
        """
        * Returns root of assenbly by its rank;
        	:param rank: default value is 1
        	:type rank: int
        	:rtype: opencascade::handle<STEPSelections_AssemblyComponent>
        """
        return _STEPSelections.STEPSelections_AssemblyExplorer_Root(self, *args)


    def __init__(self, *args):
        """
        :param G:
        	:type G: Interface_Graph
        	:rtype: None
        """
        _STEPSelections.STEPSelections_AssemblyExplorer_swiginit(self, _STEPSelections.new_STEPSelections_AssemblyExplorer(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_AssemblyExplorer
STEPSelections_AssemblyExplorer.DumpToString = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_DumpToString, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.FillListWithGraph = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_FillListWithGraph, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.FindItemWithNAUO = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_FindItemWithNAUO, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.FindSDRWithProduct = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_FindSDRWithProduct, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.Init = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_Init, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.NbAssemblies = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_NbAssemblies, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer.Root = new_instancemethod(_STEPSelections.STEPSelections_AssemblyExplorer_Root, None, STEPSelections_AssemblyExplorer)
STEPSelections_AssemblyExplorer_swigregister = _STEPSelections.STEPSelections_AssemblyExplorer_swigregister
STEPSelections_AssemblyExplorer_swigregister(STEPSelections_AssemblyExplorer)

class STEPSelections_AssemblyLink(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetComponent(self, *args) -> "opencascade::handle< STEPSelections_AssemblyComponent >":
        """:rtype: opencascade::handle<STEPSelections_AssemblyComponent>"""
        return _STEPSelections.STEPSelections_AssemblyLink_GetComponent(self, *args)


    def GetItem(self, *args) -> "opencascade::handle< Standard_Transient >":
        """:rtype: opencascade::handle<Standard_Transient>"""
        return _STEPSelections.STEPSelections_AssemblyLink_GetItem(self, *args)


    def GetNAUO(self, *args) -> "opencascade::handle< StepRepr_NextAssemblyUsageOccurrence >":
        """:rtype: opencascade::handle<StepRepr_NextAssemblyUsageOccurrence>"""
        return _STEPSelections.STEPSelections_AssemblyLink_GetNAUO(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param nauo:
        	:type nauo: StepRepr_NextAssemblyUsageOccurrence
        	:param item:
        	:type item: Standard_Transient
        	:param part:
        	:type part: STEPSelections_AssemblyComponent
        	:rtype: None
        """
        _STEPSelections.STEPSelections_AssemblyLink_swiginit(self, _STEPSelections.new_STEPSelections_AssemblyLink(*args))

    def SetComponent(self, *args) -> "void":
        """
        :param part:
        	:type part: STEPSelections_AssemblyComponent
        	:rtype: None
        """
        return _STEPSelections.STEPSelections_AssemblyLink_SetComponent(self, *args)


    def SetItem(self, *args) -> "void":
        """
        :param item:
        	:type item: Standard_Transient
        	:rtype: None
        """
        return _STEPSelections.STEPSelections_AssemblyLink_SetItem(self, *args)


    def SetNAUO(self, *args) -> "void":
        """
        :param nauo:
        	:type nauo: StepRepr_NextAssemblyUsageOccurrence
        	:rtype: None
        """
        return _STEPSelections.STEPSelections_AssemblyLink_SetNAUO(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_STEPSelections_AssemblyLink_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_AssemblyLink
STEPSelections_AssemblyLink.GetComponent = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_GetComponent, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink.GetItem = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_GetItem, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink.GetNAUO = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_GetNAUO, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink.SetComponent = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_SetComponent, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink.SetItem = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_SetItem, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink.SetNAUO = new_instancemethod(_STEPSelections.STEPSelections_AssemblyLink_SetNAUO, None, STEPSelections_AssemblyLink)
STEPSelections_AssemblyLink_swigregister = _STEPSelections.STEPSelections_AssemblyLink_swigregister
STEPSelections_AssemblyLink_swigregister(STEPSelections_AssemblyLink)

class STEPSelections_Counter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _STEPSelections.STEPSelections_Counter_Clear(self, *args)


    def Count(self, *args) -> "void":
        """
        :param graph:
        	:type graph: Interface_Graph
        	:param start:
        	:type start: Standard_Transient
        	:rtype: None
        """
        return _STEPSelections.STEPSelections_Counter_Count(self, *args)


    def NbInstancesOfEdges(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _STEPSelections.STEPSelections_Counter_NbInstancesOfEdges(self, *args)


    def NbInstancesOfFaces(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _STEPSelections.STEPSelections_Counter_NbInstancesOfFaces(self, *args)


    def NbInstancesOfShells(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _STEPSelections.STEPSelections_Counter_NbInstancesOfShells(self, *args)


    def NbInstancesOfSolids(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _STEPSelections.STEPSelections_Counter_NbInstancesOfSolids(self, *args)


    def NbInstancesOfWires(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _STEPSelections.STEPSelections_Counter_NbInstancesOfWires(self, *args)


    def NbSourceEdges(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _STEPSelections.STEPSelections_Counter_NbSourceEdges(self, *args)


    def NbSourceFaces(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _STEPSelections.STEPSelections_Counter_NbSourceFaces(self, *args)


    def NbSourceShells(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _STEPSelections.STEPSelections_Counter_NbSourceShells(self, *args)


    def NbSourceSolids(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _STEPSelections.STEPSelections_Counter_NbSourceSolids(self, *args)


    def NbSourceWires(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _STEPSelections.STEPSelections_Counter_NbSourceWires(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _STEPSelections.STEPSelections_Counter_swiginit(self, _STEPSelections.new_STEPSelections_Counter(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_Counter
STEPSelections_Counter.Clear = new_instancemethod(_STEPSelections.STEPSelections_Counter_Clear, None, STEPSelections_Counter)
STEPSelections_Counter.Count = new_instancemethod(_STEPSelections.STEPSelections_Counter_Count, None, STEPSelections_Counter)
STEPSelections_Counter.NbInstancesOfEdges = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbInstancesOfEdges, None, STEPSelections_Counter)
STEPSelections_Counter.NbInstancesOfFaces = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbInstancesOfFaces, None, STEPSelections_Counter)
STEPSelections_Counter.NbInstancesOfShells = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbInstancesOfShells, None, STEPSelections_Counter)
STEPSelections_Counter.NbInstancesOfSolids = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbInstancesOfSolids, None, STEPSelections_Counter)
STEPSelections_Counter.NbInstancesOfWires = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbInstancesOfWires, None, STEPSelections_Counter)
STEPSelections_Counter.NbSourceEdges = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbSourceEdges, None, STEPSelections_Counter)
STEPSelections_Counter.NbSourceFaces = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbSourceFaces, None, STEPSelections_Counter)
STEPSelections_Counter.NbSourceShells = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbSourceShells, None, STEPSelections_Counter)
STEPSelections_Counter.NbSourceSolids = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbSourceSolids, None, STEPSelections_Counter)
STEPSelections_Counter.NbSourceWires = new_instancemethod(_STEPSelections.STEPSelections_Counter_NbSourceWires, None, STEPSelections_Counter)
STEPSelections_Counter_swigregister = _STEPSelections.STEPSelections_Counter_swigregister
STEPSelections_Counter_swigregister(STEPSelections_Counter)

class STEPSelections_SelectAssembly(OCC.Core.IFSelect.IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _STEPSelections.STEPSelections_SelectAssembly_swiginit(self, _STEPSelections.new_STEPSelections_SelectAssembly(*args))


    @staticmethod
    def DownCast(t):
      return Handle_STEPSelections_SelectAssembly_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectAssembly
STEPSelections_SelectAssembly_swigregister = _STEPSelections.STEPSelections_SelectAssembly_swigregister
STEPSelections_SelectAssembly_swigregister(STEPSelections_SelectAssembly)

class STEPSelections_SelectDerived(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Matches(self, *args) -> "Standard_Boolean":
        """
        :param ent:
        	:type ent: Standard_Transient
        	:param model:
        	:type model: Interface_InterfaceModel
        	:param text:
        	:type text: TCollection_AsciiString
        	:param exact:
        	:type exact: bool
        	:rtype: bool
        """
        return _STEPSelections.STEPSelections_SelectDerived_Matches(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _STEPSelections.STEPSelections_SelectDerived_swiginit(self, _STEPSelections.new_STEPSelections_SelectDerived(*args))


    @staticmethod
    def DownCast(t):
      return Handle_STEPSelections_SelectDerived_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectDerived
STEPSelections_SelectDerived.Matches = new_instancemethod(_STEPSelections.STEPSelections_SelectDerived_Matches, None, STEPSelections_SelectDerived)
STEPSelections_SelectDerived_swigregister = _STEPSelections.STEPSelections_SelectDerived_swigregister
STEPSelections_SelectDerived_swigregister(STEPSelections_SelectDerived)

class STEPSelections_SelectFaces(OCC.Core.IFSelect.IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _STEPSelections.STEPSelections_SelectFaces_swiginit(self, _STEPSelections.new_STEPSelections_SelectFaces(*args))


    @staticmethod
    def DownCast(t):
      return Handle_STEPSelections_SelectFaces_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectFaces
STEPSelections_SelectFaces_swigregister = _STEPSelections.STEPSelections_SelectFaces_swigregister
STEPSelections_SelectFaces_swigregister(STEPSelections_SelectFaces)

class STEPSelections_SelectForTransfer(OCC.Core.XSControl.XSControl_SelectForTransfer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param TR:
        	:type TR: XSControl_TransferReader
        	:rtype: None
        """
        _STEPSelections.STEPSelections_SelectForTransfer_swiginit(self, _STEPSelections.new_STEPSelections_SelectForTransfer(*args))


    @staticmethod
    def DownCast(t):
      return Handle_STEPSelections_SelectForTransfer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectForTransfer
STEPSelections_SelectForTransfer_swigregister = _STEPSelections.STEPSelections_SelectForTransfer_swigregister
STEPSelections_SelectForTransfer_swigregister(STEPSelections_SelectForTransfer)

class STEPSelections_SelectGSCurves(OCC.Core.IFSelect.IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _STEPSelections.STEPSelections_SelectGSCurves_swiginit(self, _STEPSelections.new_STEPSelections_SelectGSCurves(*args))


    @staticmethod
    def DownCast(t):
      return Handle_STEPSelections_SelectGSCurves_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectGSCurves
STEPSelections_SelectGSCurves_swigregister = _STEPSelections.STEPSelections_SelectGSCurves_swigregister
STEPSelections_SelectGSCurves_swigregister(STEPSelections_SelectGSCurves)

class STEPSelections_SelectInstances(OCC.Core.IFSelect.IFSelect_SelectExplore):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _STEPSelections.STEPSelections_SelectInstances_swiginit(self, _STEPSelections.new_STEPSelections_SelectInstances(*args))


    @staticmethod
    def DownCast(t):
      return Handle_STEPSelections_SelectInstances_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_SelectInstances
STEPSelections_SelectInstances_swigregister = _STEPSelections.STEPSelections_SelectInstances_swigregister
STEPSelections_SelectInstances_swigregister(STEPSelections_SelectInstances)

class STEPSelections_HSequenceOfAssemblyLink(STEPSelections_SequenceOfAssemblyLink, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_swiginit(self, _STEPSelections.new_STEPSelections_HSequenceOfAssemblyLink(*args))


    @staticmethod
    def DownCast(t):
      return Handle_STEPSelections_HSequenceOfAssemblyLink_DownCast(t)

    __swig_destroy__ = _STEPSelections.delete_STEPSelections_HSequenceOfAssemblyLink
STEPSelections_HSequenceOfAssemblyLink.Sequence = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Sequence, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.Append = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_Append, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink.ChangeSequence = new_instancemethod(_STEPSelections.STEPSelections_HSequenceOfAssemblyLink_ChangeSequence, None, STEPSelections_HSequenceOfAssemblyLink)
STEPSelections_HSequenceOfAssemblyLink_swigregister = _STEPSelections.STEPSelections_HSequenceOfAssemblyLink_swigregister
STEPSelections_HSequenceOfAssemblyLink_swigregister(STEPSelections_HSequenceOfAssemblyLink)



