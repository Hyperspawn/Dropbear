# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ShapeCustom module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_shapecustom.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ShapeCustom.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ShapeCustom')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ShapeCustom')
    _ShapeCustom = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeCustom', [dirname(__file__)])
        except ImportError:
            import _ShapeCustom
            return _ShapeCustom
        try:
            _mod = imp.load_module('_ShapeCustom', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ShapeCustom = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeCustom
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeCustom.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ShapeCustom.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ShapeCustom.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ShapeCustom.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ShapeCustom.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ShapeCustom.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ShapeCustom.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ShapeCustom.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ShapeCustom.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ShapeCustom.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ShapeCustom.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ShapeCustom.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ShapeCustom.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ShapeCustom.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ShapeCustom.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ShapeCustom.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ShapeCustom.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ShapeCustom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ShapeCustom.process_exception(error, method_name, class_name)
process_exception = _ShapeCustom.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.Geom
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom2d
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom

def Handle_ShapeCustom_Modification_Create() -> "opencascade::handle< ShapeCustom_Modification >":
    return _ShapeCustom.Handle_ShapeCustom_Modification_Create()
Handle_ShapeCustom_Modification_Create = _ShapeCustom.Handle_ShapeCustom_Modification_Create

def Handle_ShapeCustom_Modification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeCustom_Modification >":
    return _ShapeCustom.Handle_ShapeCustom_Modification_DownCast(t)
Handle_ShapeCustom_Modification_DownCast = _ShapeCustom.Handle_ShapeCustom_Modification_DownCast

def Handle_ShapeCustom_Modification_IsNull(t: 'opencascade::handle< ShapeCustom_Modification > const &') -> "bool":
    return _ShapeCustom.Handle_ShapeCustom_Modification_IsNull(t)
Handle_ShapeCustom_Modification_IsNull = _ShapeCustom.Handle_ShapeCustom_Modification_IsNull

def Handle_ShapeCustom_RestrictionParameters_Create() -> "opencascade::handle< ShapeCustom_RestrictionParameters >":
    return _ShapeCustom.Handle_ShapeCustom_RestrictionParameters_Create()
Handle_ShapeCustom_RestrictionParameters_Create = _ShapeCustom.Handle_ShapeCustom_RestrictionParameters_Create

def Handle_ShapeCustom_RestrictionParameters_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeCustom_RestrictionParameters >":
    return _ShapeCustom.Handle_ShapeCustom_RestrictionParameters_DownCast(t)
Handle_ShapeCustom_RestrictionParameters_DownCast = _ShapeCustom.Handle_ShapeCustom_RestrictionParameters_DownCast

def Handle_ShapeCustom_RestrictionParameters_IsNull(t: 'opencascade::handle< ShapeCustom_RestrictionParameters > const &') -> "bool":
    return _ShapeCustom.Handle_ShapeCustom_RestrictionParameters_IsNull(t)
Handle_ShapeCustom_RestrictionParameters_IsNull = _ShapeCustom.Handle_ShapeCustom_RestrictionParameters_IsNull

def Handle_ShapeCustom_TrsfModification_Create() -> "opencascade::handle< ShapeCustom_TrsfModification >":
    return _ShapeCustom.Handle_ShapeCustom_TrsfModification_Create()
Handle_ShapeCustom_TrsfModification_Create = _ShapeCustom.Handle_ShapeCustom_TrsfModification_Create

def Handle_ShapeCustom_TrsfModification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeCustom_TrsfModification >":
    return _ShapeCustom.Handle_ShapeCustom_TrsfModification_DownCast(t)
Handle_ShapeCustom_TrsfModification_DownCast = _ShapeCustom.Handle_ShapeCustom_TrsfModification_DownCast

def Handle_ShapeCustom_TrsfModification_IsNull(t: 'opencascade::handle< ShapeCustom_TrsfModification > const &') -> "bool":
    return _ShapeCustom.Handle_ShapeCustom_TrsfModification_IsNull(t)
Handle_ShapeCustom_TrsfModification_IsNull = _ShapeCustom.Handle_ShapeCustom_TrsfModification_IsNull

def Handle_ShapeCustom_ConvertToBSpline_Create() -> "opencascade::handle< ShapeCustom_ConvertToBSpline >":
    return _ShapeCustom.Handle_ShapeCustom_ConvertToBSpline_Create()
Handle_ShapeCustom_ConvertToBSpline_Create = _ShapeCustom.Handle_ShapeCustom_ConvertToBSpline_Create

def Handle_ShapeCustom_ConvertToBSpline_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeCustom_ConvertToBSpline >":
    return _ShapeCustom.Handle_ShapeCustom_ConvertToBSpline_DownCast(t)
Handle_ShapeCustom_ConvertToBSpline_DownCast = _ShapeCustom.Handle_ShapeCustom_ConvertToBSpline_DownCast

def Handle_ShapeCustom_ConvertToBSpline_IsNull(t: 'opencascade::handle< ShapeCustom_ConvertToBSpline > const &') -> "bool":
    return _ShapeCustom.Handle_ShapeCustom_ConvertToBSpline_IsNull(t)
Handle_ShapeCustom_ConvertToBSpline_IsNull = _ShapeCustom.Handle_ShapeCustom_ConvertToBSpline_IsNull

def Handle_ShapeCustom_DirectModification_Create() -> "opencascade::handle< ShapeCustom_DirectModification >":
    return _ShapeCustom.Handle_ShapeCustom_DirectModification_Create()
Handle_ShapeCustom_DirectModification_Create = _ShapeCustom.Handle_ShapeCustom_DirectModification_Create

def Handle_ShapeCustom_DirectModification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeCustom_DirectModification >":
    return _ShapeCustom.Handle_ShapeCustom_DirectModification_DownCast(t)
Handle_ShapeCustom_DirectModification_DownCast = _ShapeCustom.Handle_ShapeCustom_DirectModification_DownCast

def Handle_ShapeCustom_DirectModification_IsNull(t: 'opencascade::handle< ShapeCustom_DirectModification > const &') -> "bool":
    return _ShapeCustom.Handle_ShapeCustom_DirectModification_IsNull(t)
Handle_ShapeCustom_DirectModification_IsNull = _ShapeCustom.Handle_ShapeCustom_DirectModification_IsNull
class shapecustom(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BSplineRestriction(*args) -> "TopoDS_Shape":
        """
        * Returns a new shape with all surfaces, curves and pcurves which type is BSpline/Bezier or based on them converted having Degree less than <MaxDegree> or number of spans less than <NbMaxSegment> in dependence on parameter priority <Degree>. <GmaxDegree> and <GMaxSegments> are maximum possible degree and number of spans correspondingly. These values will be used in those cases when approximation with specified parameters is impossible and one of GmaxDegree or GMaxSegments is selected in dependence on priority. Note that even if approximation is impossible with <GMaxDegree> then number of spans can exceed specified <GMaxSegment> <Rational> specifies if to convert Rational BSpline/Bezier into polynomial B-Spline. If flags ConvOffSurf,ConvOffCurve3d,ConvOffCurve2d are Standard_True there are means that Offset surfaces , Offset curves 3d and Offset curves 2d are converted to BSPline correspondingly.
        	:param S:
        	:type S: TopoDS_Shape
        	:param Tol3d:
        	:type Tol3d: float
        	:param Tol2d:
        	:type Tol2d: float
        	:param MaxDegree:
        	:type MaxDegree: int
        	:param MaxNbSegment:
        	:type MaxNbSegment: int
        	:param Continuity3d:
        	:type Continuity3d: GeomAbs_Shape
        	:param Continuity2d:
        	:type Continuity2d: GeomAbs_Shape
        	:param Degree:
        	:type Degree: bool
        	:param Rational:
        	:type Rational: bool
        	:param aParameters:
        	:type aParameters: ShapeCustom_RestrictionParameters
        	:rtype: TopoDS_Shape
        """
        return _ShapeCustom.shapecustom_BSplineRestriction(*args)

    BSplineRestriction = staticmethod(BSplineRestriction)

    def ConvertToBSpline(*args) -> "TopoDS_Shape":
        """
        * Returns a new shape with all surfaces of linear extrusion, revolution, offset, and planar surfaces converted according to flags to Geom_BSplineSurface (with same parameterisation).
        	:param S:
        	:type S: TopoDS_Shape
        	:param extrMode:
        	:type extrMode: bool
        	:param revolMode:
        	:type revolMode: bool
        	:param offsetMode:
        	:type offsetMode: bool
        	:param planeMode: default value is Standard_False
        	:type planeMode: bool
        	:rtype: TopoDS_Shape
        """
        return _ShapeCustom.shapecustom_ConvertToBSpline(*args)

    ConvertToBSpline = staticmethod(ConvertToBSpline)

    def ConvertToRevolution(*args) -> "TopoDS_Shape":
        """
        * Returns a new shape with all elementary periodic surfaces converted to Geom_SurfaceOfRevolution
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _ShapeCustom.shapecustom_ConvertToRevolution(*args)

    ConvertToRevolution = staticmethod(ConvertToRevolution)

    def DirectFaces(*args) -> "TopoDS_Shape":
        """
        * Returns a new shape without indirect surfaces.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _ShapeCustom.shapecustom_DirectFaces(*args)

    DirectFaces = staticmethod(DirectFaces)

    def ScaleShape(*args) -> "TopoDS_Shape":
        """
        * Returns a new shape which is scaled original
        	:param S:
        	:type S: TopoDS_Shape
        	:param scale:
        	:type scale: float
        	:rtype: TopoDS_Shape
        """
        return _ShapeCustom.shapecustom_ScaleShape(*args)

    ScaleShape = staticmethod(ScaleShape)

    def SweptToElementary(*args) -> "TopoDS_Shape":
        """
        * Returns a new shape with all surfaces of revolution and linear extrusion convert to elementary periodic surfaces
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _ShapeCustom.shapecustom_SweptToElementary(*args)

    SweptToElementary = staticmethod(SweptToElementary)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeCustom.shapecustom_swiginit(self, _ShapeCustom.new_shapecustom())
    __swig_destroy__ = _ShapeCustom.delete_shapecustom
shapecustom_swigregister = _ShapeCustom.shapecustom_swigregister
shapecustom_swigregister(shapecustom)

def shapecustom_BSplineRestriction(*args) -> "TopoDS_Shape":
    """
    * Returns a new shape with all surfaces, curves and pcurves which type is BSpline/Bezier or based on them converted having Degree less than <MaxDegree> or number of spans less than <NbMaxSegment> in dependence on parameter priority <Degree>. <GmaxDegree> and <GMaxSegments> are maximum possible degree and number of spans correspondingly. These values will be used in those cases when approximation with specified parameters is impossible and one of GmaxDegree or GMaxSegments is selected in dependence on priority. Note that even if approximation is impossible with <GMaxDegree> then number of spans can exceed specified <GMaxSegment> <Rational> specifies if to convert Rational BSpline/Bezier into polynomial B-Spline. If flags ConvOffSurf,ConvOffCurve3d,ConvOffCurve2d are Standard_True there are means that Offset surfaces , Offset curves 3d and Offset curves 2d are converted to BSPline correspondingly.
    	:param S:
    	:type S: TopoDS_Shape
    	:param Tol3d:
    	:type Tol3d: float
    	:param Tol2d:
    	:type Tol2d: float
    	:param MaxDegree:
    	:type MaxDegree: int
    	:param MaxNbSegment:
    	:type MaxNbSegment: int
    	:param Continuity3d:
    	:type Continuity3d: GeomAbs_Shape
    	:param Continuity2d:
    	:type Continuity2d: GeomAbs_Shape
    	:param Degree:
    	:type Degree: bool
    	:param Rational:
    	:type Rational: bool
    	:param aParameters:
    	:type aParameters: ShapeCustom_RestrictionParameters
    	:rtype: TopoDS_Shape
    """
    return _ShapeCustom.shapecustom_BSplineRestriction(*args)

def shapecustom_ConvertToBSpline(*args) -> "TopoDS_Shape":
    """
    * Returns a new shape with all surfaces of linear extrusion, revolution, offset, and planar surfaces converted according to flags to Geom_BSplineSurface (with same parameterisation).
    	:param S:
    	:type S: TopoDS_Shape
    	:param extrMode:
    	:type extrMode: bool
    	:param revolMode:
    	:type revolMode: bool
    	:param offsetMode:
    	:type offsetMode: bool
    	:param planeMode: default value is Standard_False
    	:type planeMode: bool
    	:rtype: TopoDS_Shape
    """
    return _ShapeCustom.shapecustom_ConvertToBSpline(*args)

def shapecustom_ConvertToRevolution(*args) -> "TopoDS_Shape":
    """
    * Returns a new shape with all elementary periodic surfaces converted to Geom_SurfaceOfRevolution
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: TopoDS_Shape
    """
    return _ShapeCustom.shapecustom_ConvertToRevolution(*args)

def shapecustom_DirectFaces(*args) -> "TopoDS_Shape":
    """
    * Returns a new shape without indirect surfaces.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: TopoDS_Shape
    """
    return _ShapeCustom.shapecustom_DirectFaces(*args)

def shapecustom_ScaleShape(*args) -> "TopoDS_Shape":
    """
    * Returns a new shape which is scaled original
    	:param S:
    	:type S: TopoDS_Shape
    	:param scale:
    	:type scale: float
    	:rtype: TopoDS_Shape
    """
    return _ShapeCustom.shapecustom_ScaleShape(*args)

def shapecustom_SweptToElementary(*args) -> "TopoDS_Shape":
    """
    * Returns a new shape with all surfaces of revolution and linear extrusion convert to elementary periodic surfaces
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: TopoDS_Shape
    """
    return _ShapeCustom.shapecustom_SweptToElementary(*args)

class ShapeCustom_Curve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConvertToPeriodic(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        * Tries to convert the Curve to the Periodic form Returns the resulting curve Works only if the Curve is BSpline and is closed with Precision::Confusion() Else, or in case of failure, returns a Null Handle
        	:param substitute:
        	:type substitute: bool
        	:param preci: default value is -1
        	:type preci: float
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _ShapeCustom.ShapeCustom_Curve_ConvertToPeriodic(self, *args)


    def Init(self, *args) -> "void":
        """
        :param C:
        	:type C: Geom_Curve
        	:rtype: None
        """
        return _ShapeCustom.ShapeCustom_Curve_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param C:
        	:type C: Geom_Curve
        	:rtype: None
        """
        _ShapeCustom.ShapeCustom_Curve_swiginit(self, _ShapeCustom.new_ShapeCustom_Curve(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeCustom.delete_ShapeCustom_Curve
ShapeCustom_Curve.ConvertToPeriodic = new_instancemethod(_ShapeCustom.ShapeCustom_Curve_ConvertToPeriodic, None, ShapeCustom_Curve)
ShapeCustom_Curve.Init = new_instancemethod(_ShapeCustom.ShapeCustom_Curve_Init, None, ShapeCustom_Curve)
ShapeCustom_Curve_swigregister = _ShapeCustom.ShapeCustom_Curve_swigregister
ShapeCustom_Curve_swigregister(ShapeCustom_Curve)

class ShapeCustom_Curve2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConvertToLine2d(*args) -> "Standard_Real &, Standard_Real &, Standard_Real &":
        """
        * Try to convert BSpline2d or Bezier2d to line 2d only if it is linear. Recalculate first and last parameters. Returns line2d or null curve2d.
        	:param theCurve:
        	:type theCurve: Geom2d_Curve
        	:param theFirstIn:
        	:type theFirstIn: float
        	:param theLastIn:
        	:type theLastIn: float
        	:param theTolerance:
        	:type theTolerance: float
        	:param theNewFirst:
        	:type theNewFirst: float
        	:param theNewLast:
        	:type theNewLast: float
        	:param theDeviation:
        	:type theDeviation: float
        	:rtype: opencascade::handle<Geom2d_Line>
        """
        return _ShapeCustom.ShapeCustom_Curve2d_ConvertToLine2d(*args)

    ConvertToLine2d = staticmethod(ConvertToLine2d)

    def IsLinear(*args) -> "Standard_Real &":
        """
        * Check if poleses is in the plane with given precision Returns false if no.
        	:param thePoles:
        	:type thePoles: TColgp_Array1OfPnt2d
        	:param theTolerance:
        	:type theTolerance: float
        	:param theDeviation:
        	:type theDeviation: float
        	:rtype: bool
        """
        return _ShapeCustom.ShapeCustom_Curve2d_IsLinear(*args)

    IsLinear = staticmethod(IsLinear)

    def SimplifyBSpline2d(*args) -> "Standard_Boolean":
        """
        * Try to remove knots from bspline where local derivatives are the same. Remove knots with given precision. Returns false if Bsplien was not modified
        	:param theBSpline2d:
        	:type theBSpline2d: Geom2d_BSplineCurve
        	:param theTolerance:
        	:type theTolerance: float
        	:rtype: bool
        """
        return _ShapeCustom.ShapeCustom_Curve2d_SimplifyBSpline2d(*args)

    SimplifyBSpline2d = staticmethod(SimplifyBSpline2d)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeCustom.ShapeCustom_Curve2d_swiginit(self, _ShapeCustom.new_ShapeCustom_Curve2d())
    __swig_destroy__ = _ShapeCustom.delete_ShapeCustom_Curve2d
ShapeCustom_Curve2d_swigregister = _ShapeCustom.ShapeCustom_Curve2d_swigregister
ShapeCustom_Curve2d_swigregister(ShapeCustom_Curve2d)

def ShapeCustom_Curve2d_ConvertToLine2d(*args) -> "Standard_Real &, Standard_Real &, Standard_Real &":
    """
    * Try to convert BSpline2d or Bezier2d to line 2d only if it is linear. Recalculate first and last parameters. Returns line2d or null curve2d.
    	:param theCurve:
    	:type theCurve: Geom2d_Curve
    	:param theFirstIn:
    	:type theFirstIn: float
    	:param theLastIn:
    	:type theLastIn: float
    	:param theTolerance:
    	:type theTolerance: float
    	:param theNewFirst:
    	:type theNewFirst: float
    	:param theNewLast:
    	:type theNewLast: float
    	:param theDeviation:
    	:type theDeviation: float
    	:rtype: opencascade::handle<Geom2d_Line>
    """
    return _ShapeCustom.ShapeCustom_Curve2d_ConvertToLine2d(*args)

def ShapeCustom_Curve2d_IsLinear(*args) -> "Standard_Real &":
    """
    * Check if poleses is in the plane with given precision Returns false if no.
    	:param thePoles:
    	:type thePoles: TColgp_Array1OfPnt2d
    	:param theTolerance:
    	:type theTolerance: float
    	:param theDeviation:
    	:type theDeviation: float
    	:rtype: bool
    """
    return _ShapeCustom.ShapeCustom_Curve2d_IsLinear(*args)

def ShapeCustom_Curve2d_SimplifyBSpline2d(*args) -> "Standard_Boolean":
    """
    * Try to remove knots from bspline where local derivatives are the same. Remove knots with given precision. Returns false if Bsplien was not modified
    	:param theBSpline2d:
    	:type theBSpline2d: Geom2d_BSplineCurve
    	:param theTolerance:
    	:type theTolerance: float
    	:rtype: bool
    """
    return _ShapeCustom.ShapeCustom_Curve2d_SimplifyBSpline2d(*args)

class ShapeCustom_Modification(OCC.Core.BRepTools.BRepTools_Modification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def MsgRegistrator(self, *args) -> "opencascade::handle< ShapeExtend_BasicMsgRegistrator >":
        """
        * Returns message registrator
        	:rtype: opencascade::handle<ShapeExtend_BasicMsgRegistrator>
        """
        return _ShapeCustom.ShapeCustom_Modification_MsgRegistrator(self, *args)


    def SendMsg(self, *args) -> "void":
        """
        * Sends a message to be attached to the shape. Calls corresponding message of message registrator.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param message:
        	:type message: Message_Msg
        	:param gravity: default value is Message_Info
        	:type gravity: Message_Gravity
        	:rtype: None
        """
        return _ShapeCustom.ShapeCustom_Modification_SendMsg(self, *args)


    def SetMsgRegistrator(self, *args) -> "void":
        """
        * Sets message registrator
        	:param msgreg:
        	:type msgreg: ShapeExtend_BasicMsgRegistrator
        	:rtype: void
        """
        return _ShapeCustom.ShapeCustom_Modification_SetMsgRegistrator(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeCustom_Modification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeCustom.delete_ShapeCustom_Modification
ShapeCustom_Modification.MsgRegistrator = new_instancemethod(_ShapeCustom.ShapeCustom_Modification_MsgRegistrator, None, ShapeCustom_Modification)
ShapeCustom_Modification.SendMsg = new_instancemethod(_ShapeCustom.ShapeCustom_Modification_SendMsg, None, ShapeCustom_Modification)
ShapeCustom_Modification.SetMsgRegistrator = new_instancemethod(_ShapeCustom.ShapeCustom_Modification_SetMsgRegistrator, None, ShapeCustom_Modification)
ShapeCustom_Modification_swigregister = _ShapeCustom.ShapeCustom_Modification_swigregister
ShapeCustom_Modification_swigregister(ShapeCustom_Modification)

class ShapeCustom_RestrictionParameters(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetConvertBezierSurf(self) -> "Standard_Boolean":
        """GetConvertBezierSurf(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertBezierSurf(self)


    def SetConvertBezierSurf(self, value: 'Standard_Boolean') -> "void":
        """SetConvertBezierSurf(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertBezierSurf(self, value)


    def GetConvertConicalSurf(self) -> "Standard_Boolean":
        """GetConvertConicalSurf(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertConicalSurf(self)


    def SetConvertConicalSurf(self, value: 'Standard_Boolean') -> "void":
        """SetConvertConicalSurf(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertConicalSurf(self, value)


    def GetConvertCurve2d(self) -> "Standard_Boolean":
        """GetConvertCurve2d(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertCurve2d(self)


    def SetConvertCurve2d(self, value: 'Standard_Boolean') -> "void":
        """SetConvertCurve2d(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertCurve2d(self, value)


    def GetConvertCurve3d(self) -> "Standard_Boolean":
        """GetConvertCurve3d(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertCurve3d(self)


    def SetConvertCurve3d(self, value: 'Standard_Boolean') -> "void":
        """SetConvertCurve3d(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertCurve3d(self, value)


    def GetConvertCylindricalSurf(self) -> "Standard_Boolean":
        """GetConvertCylindricalSurf(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertCylindricalSurf(self)


    def SetConvertCylindricalSurf(self, value: 'Standard_Boolean') -> "void":
        """SetConvertCylindricalSurf(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertCylindricalSurf(self, value)


    def GetConvertExtrusionSurf(self) -> "Standard_Boolean":
        """GetConvertExtrusionSurf(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertExtrusionSurf(self)


    def SetConvertExtrusionSurf(self, value: 'Standard_Boolean') -> "void":
        """SetConvertExtrusionSurf(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertExtrusionSurf(self, value)


    def GetConvertOffsetCurv2d(self) -> "Standard_Boolean":
        """GetConvertOffsetCurv2d(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertOffsetCurv2d(self)


    def SetConvertOffsetCurv2d(self, value: 'Standard_Boolean') -> "void":
        """SetConvertOffsetCurv2d(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertOffsetCurv2d(self, value)


    def GetConvertOffsetCurv3d(self) -> "Standard_Boolean":
        """GetConvertOffsetCurv3d(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertOffsetCurv3d(self)


    def SetConvertOffsetCurv3d(self, value: 'Standard_Boolean') -> "void":
        """SetConvertOffsetCurv3d(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertOffsetCurv3d(self, value)


    def GetConvertOffsetSurf(self) -> "Standard_Boolean":
        """GetConvertOffsetSurf(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertOffsetSurf(self)


    def SetConvertOffsetSurf(self, value: 'Standard_Boolean') -> "void":
        """SetConvertOffsetSurf(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertOffsetSurf(self, value)


    def GetConvertPlane(self) -> "Standard_Boolean":
        """GetConvertPlane(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertPlane(self)


    def SetConvertPlane(self, value: 'Standard_Boolean') -> "void":
        """SetConvertPlane(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertPlane(self, value)


    def GetConvertRevolutionSurf(self) -> "Standard_Boolean":
        """GetConvertRevolutionSurf(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertRevolutionSurf(self)


    def SetConvertRevolutionSurf(self, value: 'Standard_Boolean') -> "void":
        """SetConvertRevolutionSurf(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertRevolutionSurf(self, value)


    def GetConvertSphericalSurf(self) -> "Standard_Boolean":
        """GetConvertSphericalSurf(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertSphericalSurf(self)


    def SetConvertSphericalSurf(self, value: 'Standard_Boolean') -> "void":
        """SetConvertSphericalSurf(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertSphericalSurf(self, value)


    def GetConvertToroidalSurf(self) -> "Standard_Boolean":
        """GetConvertToroidalSurf(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertToroidalSurf(self)


    def SetConvertToroidalSurf(self, value: 'Standard_Boolean') -> "void":
        """SetConvertToroidalSurf(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertToroidalSurf(self, value)


    def GetGMaxDegree(self) -> "Standard_Integer":
        """GetGMaxDegree(ShapeCustom_RestrictionParameters self) -> Standard_Integer"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetGMaxDegree(self)


    def SetGMaxDegree(self, value: 'Standard_Integer') -> "void":
        """SetGMaxDegree(ShapeCustom_RestrictionParameters self, Standard_Integer value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetGMaxDegree(self, value)


    def GetGMaxSeg(self) -> "Standard_Integer":
        """GetGMaxSeg(ShapeCustom_RestrictionParameters self) -> Standard_Integer"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetGMaxSeg(self)


    def SetGMaxSeg(self, value: 'Standard_Integer') -> "void":
        """SetGMaxSeg(ShapeCustom_RestrictionParameters self, Standard_Integer value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetGMaxSeg(self, value)


    def GetSegmentSurfaceMode(self) -> "Standard_Boolean":
        """GetSegmentSurfaceMode(ShapeCustom_RestrictionParameters self) -> Standard_Boolean"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_GetSegmentSurfaceMode(self)


    def SetSegmentSurfaceMode(self, value: 'Standard_Boolean') -> "void":
        """SetSegmentSurfaceMode(ShapeCustom_RestrictionParameters self, Standard_Boolean value)"""
        return _ShapeCustom.ShapeCustom_RestrictionParameters_SetSegmentSurfaceMode(self, value)


    def __init__(self, *args):
        """
        * Sets default parameters.
        	:rtype: None
        """
        _ShapeCustom.ShapeCustom_RestrictionParameters_swiginit(self, _ShapeCustom.new_ShapeCustom_RestrictionParameters(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeCustom_RestrictionParameters_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeCustom.delete_ShapeCustom_RestrictionParameters
ShapeCustom_RestrictionParameters.GetConvertBezierSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertBezierSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertBezierSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertBezierSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertConicalSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertConicalSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertConicalSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertConicalSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertCurve2d = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertCurve2d, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertCurve2d = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertCurve2d, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertCurve3d = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertCurve3d, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertCurve3d = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertCurve3d, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertCylindricalSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertCylindricalSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertCylindricalSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertCylindricalSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertExtrusionSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertExtrusionSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertExtrusionSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertExtrusionSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertOffsetCurv2d = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertOffsetCurv2d, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertOffsetCurv2d = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertOffsetCurv2d, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertOffsetCurv3d = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertOffsetCurv3d, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertOffsetCurv3d = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertOffsetCurv3d, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertOffsetSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertOffsetSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertOffsetSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertOffsetSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertPlane = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertPlane, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertPlane = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertPlane, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertRevolutionSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertRevolutionSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertRevolutionSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertRevolutionSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertSphericalSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertSphericalSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertSphericalSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertSphericalSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetConvertToroidalSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetConvertToroidalSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetConvertToroidalSurf = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetConvertToroidalSurf, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetGMaxDegree = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetGMaxDegree, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetGMaxDegree = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetGMaxDegree, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetGMaxSeg = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetGMaxSeg, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetGMaxSeg = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetGMaxSeg, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.GetSegmentSurfaceMode = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_GetSegmentSurfaceMode, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters.SetSegmentSurfaceMode = new_instancemethod(_ShapeCustom.ShapeCustom_RestrictionParameters_SetSegmentSurfaceMode, None, ShapeCustom_RestrictionParameters)
ShapeCustom_RestrictionParameters_swigregister = _ShapeCustom.ShapeCustom_RestrictionParameters_swigregister
ShapeCustom_RestrictionParameters_swigregister(ShapeCustom_RestrictionParameters)

class ShapeCustom_Surface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConvertToAnalytical(self, *args) -> "opencascade::handle< Geom_Surface >":
        """
        * Tries to convert the Surface to an Analytic form Returns the result Works only if the Surface is BSpline or Bezier. Else, or in case of failure, returns a Null Handle //! If <substitute> is True, the new surface replaces the actual one in <self> //! It works by analysing the case which can apply, creating the corresponding analytic surface, then checking coincidence Warning: Parameter laws are not kept, hence PCurves should be redone
        	:param tol:
        	:type tol: float
        	:param substitute:
        	:type substitute: bool
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _ShapeCustom.ShapeCustom_Surface_ConvertToAnalytical(self, *args)


    def ConvertToPeriodic(self, *args) -> "opencascade::handle< Geom_Surface >":
        """
        * Tries to convert the Surface to the Periodic form Returns the resulting surface Works only if the Surface is BSpline and is closed with Precision::Confusion() Else, or in case of failure, returns a Null Handle
        	:param substitute:
        	:type substitute: bool
        	:param preci: default value is -1
        	:type preci: float
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _ShapeCustom.ShapeCustom_Surface_ConvertToPeriodic(self, *args)


    def Gap(self, *args) -> "Standard_Real":
        """
        * Returns maximal deviation of converted surface from the original one computed by last call to ConvertToAnalytical
        	:rtype: float
        """
        return _ShapeCustom.ShapeCustom_Surface_Gap(self, *args)


    def Init(self, *args) -> "void":
        """
        :param S:
        	:type S: Geom_Surface
        	:rtype: None
        """
        return _ShapeCustom.ShapeCustom_Surface_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: Geom_Surface
        	:rtype: None
        """
        _ShapeCustom.ShapeCustom_Surface_swiginit(self, _ShapeCustom.new_ShapeCustom_Surface(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeCustom.delete_ShapeCustom_Surface
ShapeCustom_Surface.ConvertToAnalytical = new_instancemethod(_ShapeCustom.ShapeCustom_Surface_ConvertToAnalytical, None, ShapeCustom_Surface)
ShapeCustom_Surface.ConvertToPeriodic = new_instancemethod(_ShapeCustom.ShapeCustom_Surface_ConvertToPeriodic, None, ShapeCustom_Surface)
ShapeCustom_Surface.Gap = new_instancemethod(_ShapeCustom.ShapeCustom_Surface_Gap, None, ShapeCustom_Surface)
ShapeCustom_Surface.Init = new_instancemethod(_ShapeCustom.ShapeCustom_Surface_Init, None, ShapeCustom_Surface)
ShapeCustom_Surface_swigregister = _ShapeCustom.ShapeCustom_Surface_swigregister
ShapeCustom_Surface_swigregister(ShapeCustom_Surface)

class ShapeCustom_TrsfModification(OCC.Core.BRepTools.BRepTools_TrsfModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:param T:
        	:type T: gp_Trsf
        	:rtype: None
        """
        _ShapeCustom.ShapeCustom_TrsfModification_swiginit(self, _ShapeCustom.new_ShapeCustom_TrsfModification(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeCustom_TrsfModification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeCustom.delete_ShapeCustom_TrsfModification
ShapeCustom_TrsfModification_swigregister = _ShapeCustom.ShapeCustom_TrsfModification_swigregister
ShapeCustom_TrsfModification_swigregister(ShapeCustom_TrsfModification)

class ShapeCustom_ConvertToBSpline(ShapeCustom_Modification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetExtrusionMode(self, *args) -> "void":
        """
        * Sets mode for convertion of Surfaces of Linear extrusion.
        	:param extrMode:
        	:type extrMode: bool
        	:rtype: None
        """
        return _ShapeCustom.ShapeCustom_ConvertToBSpline_SetExtrusionMode(self, *args)


    def SetOffsetMode(self, *args) -> "void":
        """
        * Sets mode for convertion of Offset surfaces.
        	:param offsetMode:
        	:type offsetMode: bool
        	:rtype: None
        """
        return _ShapeCustom.ShapeCustom_ConvertToBSpline_SetOffsetMode(self, *args)


    def SetPlaneMode(self, *args) -> "void":
        """
        * Sets mode for convertion of Plane surfaces.
        	:param planeMode:
        	:type planeMode: bool
        	:rtype: None
        """
        return _ShapeCustom.ShapeCustom_ConvertToBSpline_SetPlaneMode(self, *args)


    def SetRevolutionMode(self, *args) -> "void":
        """
        * Sets mode for convertion of Surfaces of Revolution.
        	:param revolMode:
        	:type revolMode: bool
        	:rtype: None
        """
        return _ShapeCustom.ShapeCustom_ConvertToBSpline_SetRevolutionMode(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _ShapeCustom.ShapeCustom_ConvertToBSpline_swiginit(self, _ShapeCustom.new_ShapeCustom_ConvertToBSpline(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeCustom_ConvertToBSpline_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeCustom.delete_ShapeCustom_ConvertToBSpline
ShapeCustom_ConvertToBSpline.SetExtrusionMode = new_instancemethod(_ShapeCustom.ShapeCustom_ConvertToBSpline_SetExtrusionMode, None, ShapeCustom_ConvertToBSpline)
ShapeCustom_ConvertToBSpline.SetOffsetMode = new_instancemethod(_ShapeCustom.ShapeCustom_ConvertToBSpline_SetOffsetMode, None, ShapeCustom_ConvertToBSpline)
ShapeCustom_ConvertToBSpline.SetPlaneMode = new_instancemethod(_ShapeCustom.ShapeCustom_ConvertToBSpline_SetPlaneMode, None, ShapeCustom_ConvertToBSpline)
ShapeCustom_ConvertToBSpline.SetRevolutionMode = new_instancemethod(_ShapeCustom.ShapeCustom_ConvertToBSpline_SetRevolutionMode, None, ShapeCustom_ConvertToBSpline)
ShapeCustom_ConvertToBSpline_swigregister = _ShapeCustom.ShapeCustom_ConvertToBSpline_swigregister
ShapeCustom_ConvertToBSpline_swigregister(ShapeCustom_ConvertToBSpline)

class ShapeCustom_DirectModification(ShapeCustom_Modification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _ShapeCustom.ShapeCustom_DirectModification_swiginit(self, _ShapeCustom.new_ShapeCustom_DirectModification(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeCustom_DirectModification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeCustom.delete_ShapeCustom_DirectModification
ShapeCustom_DirectModification_swigregister = _ShapeCustom.ShapeCustom_DirectModification_swigregister
ShapeCustom_DirectModification_swigregister(ShapeCustom_DirectModification)



