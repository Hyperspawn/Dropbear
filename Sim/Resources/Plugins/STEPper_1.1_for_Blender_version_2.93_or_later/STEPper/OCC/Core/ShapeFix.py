# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ShapeFix module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_shapefix.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ShapeFix.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ShapeFix')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ShapeFix')
    _ShapeFix = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeFix', [dirname(__file__)])
        except ImportError:
            import _ShapeFix
            return _ShapeFix
        try:
            _mod = imp.load_module('_ShapeFix', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ShapeFix = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeFix
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeFix.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ShapeFix.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ShapeFix.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ShapeFix.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ShapeFix.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ShapeFix.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ShapeFix.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ShapeFix.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ShapeFix.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ShapeFix.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ShapeFix.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ShapeFix.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ShapeFix.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ShapeFix.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ShapeFix.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ShapeFix.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ShapeFix.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ShapeFix.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ShapeFix.process_exception(error, method_name, class_name)
process_exception = _ShapeFix.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.ShapeBuild
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom2d
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.ShapeAnalysis
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.IntRes2d
import OCC.Core.ShapeConstruct
import OCC.Core.BRepBuilderAPI

def Handle_ShapeFix_Edge_Create() -> "opencascade::handle< ShapeFix_Edge >":
    return _ShapeFix.Handle_ShapeFix_Edge_Create()
Handle_ShapeFix_Edge_Create = _ShapeFix.Handle_ShapeFix_Edge_Create

def Handle_ShapeFix_Edge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_Edge >":
    return _ShapeFix.Handle_ShapeFix_Edge_DownCast(t)
Handle_ShapeFix_Edge_DownCast = _ShapeFix.Handle_ShapeFix_Edge_DownCast

def Handle_ShapeFix_Edge_IsNull(t: 'opencascade::handle< ShapeFix_Edge > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_Edge_IsNull(t)
Handle_ShapeFix_Edge_IsNull = _ShapeFix.Handle_ShapeFix_Edge_IsNull

def Handle_ShapeFix_EdgeProjAux_Create() -> "opencascade::handle< ShapeFix_EdgeProjAux >":
    return _ShapeFix.Handle_ShapeFix_EdgeProjAux_Create()
Handle_ShapeFix_EdgeProjAux_Create = _ShapeFix.Handle_ShapeFix_EdgeProjAux_Create

def Handle_ShapeFix_EdgeProjAux_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_EdgeProjAux >":
    return _ShapeFix.Handle_ShapeFix_EdgeProjAux_DownCast(t)
Handle_ShapeFix_EdgeProjAux_DownCast = _ShapeFix.Handle_ShapeFix_EdgeProjAux_DownCast

def Handle_ShapeFix_EdgeProjAux_IsNull(t: 'opencascade::handle< ShapeFix_EdgeProjAux > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_EdgeProjAux_IsNull(t)
Handle_ShapeFix_EdgeProjAux_IsNull = _ShapeFix.Handle_ShapeFix_EdgeProjAux_IsNull

def Handle_ShapeFix_Root_Create() -> "opencascade::handle< ShapeFix_Root >":
    return _ShapeFix.Handle_ShapeFix_Root_Create()
Handle_ShapeFix_Root_Create = _ShapeFix.Handle_ShapeFix_Root_Create

def Handle_ShapeFix_Root_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_Root >":
    return _ShapeFix.Handle_ShapeFix_Root_DownCast(t)
Handle_ShapeFix_Root_DownCast = _ShapeFix.Handle_ShapeFix_Root_DownCast

def Handle_ShapeFix_Root_IsNull(t: 'opencascade::handle< ShapeFix_Root > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_Root_IsNull(t)
Handle_ShapeFix_Root_IsNull = _ShapeFix.Handle_ShapeFix_Root_IsNull

def Handle_ShapeFix_ComposeShell_Create() -> "opencascade::handle< ShapeFix_ComposeShell >":
    return _ShapeFix.Handle_ShapeFix_ComposeShell_Create()
Handle_ShapeFix_ComposeShell_Create = _ShapeFix.Handle_ShapeFix_ComposeShell_Create

def Handle_ShapeFix_ComposeShell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_ComposeShell >":
    return _ShapeFix.Handle_ShapeFix_ComposeShell_DownCast(t)
Handle_ShapeFix_ComposeShell_DownCast = _ShapeFix.Handle_ShapeFix_ComposeShell_DownCast

def Handle_ShapeFix_ComposeShell_IsNull(t: 'opencascade::handle< ShapeFix_ComposeShell > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_ComposeShell_IsNull(t)
Handle_ShapeFix_ComposeShell_IsNull = _ShapeFix.Handle_ShapeFix_ComposeShell_IsNull

def Handle_ShapeFix_Face_Create() -> "opencascade::handle< ShapeFix_Face >":
    return _ShapeFix.Handle_ShapeFix_Face_Create()
Handle_ShapeFix_Face_Create = _ShapeFix.Handle_ShapeFix_Face_Create

def Handle_ShapeFix_Face_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_Face >":
    return _ShapeFix.Handle_ShapeFix_Face_DownCast(t)
Handle_ShapeFix_Face_DownCast = _ShapeFix.Handle_ShapeFix_Face_DownCast

def Handle_ShapeFix_Face_IsNull(t: 'opencascade::handle< ShapeFix_Face > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_Face_IsNull(t)
Handle_ShapeFix_Face_IsNull = _ShapeFix.Handle_ShapeFix_Face_IsNull

def Handle_ShapeFix_FixSmallFace_Create() -> "opencascade::handle< ShapeFix_FixSmallFace >":
    return _ShapeFix.Handle_ShapeFix_FixSmallFace_Create()
Handle_ShapeFix_FixSmallFace_Create = _ShapeFix.Handle_ShapeFix_FixSmallFace_Create

def Handle_ShapeFix_FixSmallFace_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_FixSmallFace >":
    return _ShapeFix.Handle_ShapeFix_FixSmallFace_DownCast(t)
Handle_ShapeFix_FixSmallFace_DownCast = _ShapeFix.Handle_ShapeFix_FixSmallFace_DownCast

def Handle_ShapeFix_FixSmallFace_IsNull(t: 'opencascade::handle< ShapeFix_FixSmallFace > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_FixSmallFace_IsNull(t)
Handle_ShapeFix_FixSmallFace_IsNull = _ShapeFix.Handle_ShapeFix_FixSmallFace_IsNull

def Handle_ShapeFix_FixSmallSolid_Create() -> "opencascade::handle< ShapeFix_FixSmallSolid >":
    return _ShapeFix.Handle_ShapeFix_FixSmallSolid_Create()
Handle_ShapeFix_FixSmallSolid_Create = _ShapeFix.Handle_ShapeFix_FixSmallSolid_Create

def Handle_ShapeFix_FixSmallSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_FixSmallSolid >":
    return _ShapeFix.Handle_ShapeFix_FixSmallSolid_DownCast(t)
Handle_ShapeFix_FixSmallSolid_DownCast = _ShapeFix.Handle_ShapeFix_FixSmallSolid_DownCast

def Handle_ShapeFix_FixSmallSolid_IsNull(t: 'opencascade::handle< ShapeFix_FixSmallSolid > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_FixSmallSolid_IsNull(t)
Handle_ShapeFix_FixSmallSolid_IsNull = _ShapeFix.Handle_ShapeFix_FixSmallSolid_IsNull

def Handle_ShapeFix_Shape_Create() -> "opencascade::handle< ShapeFix_Shape >":
    return _ShapeFix.Handle_ShapeFix_Shape_Create()
Handle_ShapeFix_Shape_Create = _ShapeFix.Handle_ShapeFix_Shape_Create

def Handle_ShapeFix_Shape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_Shape >":
    return _ShapeFix.Handle_ShapeFix_Shape_DownCast(t)
Handle_ShapeFix_Shape_DownCast = _ShapeFix.Handle_ShapeFix_Shape_DownCast

def Handle_ShapeFix_Shape_IsNull(t: 'opencascade::handle< ShapeFix_Shape > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_Shape_IsNull(t)
Handle_ShapeFix_Shape_IsNull = _ShapeFix.Handle_ShapeFix_Shape_IsNull

def Handle_ShapeFix_Shell_Create() -> "opencascade::handle< ShapeFix_Shell >":
    return _ShapeFix.Handle_ShapeFix_Shell_Create()
Handle_ShapeFix_Shell_Create = _ShapeFix.Handle_ShapeFix_Shell_Create

def Handle_ShapeFix_Shell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_Shell >":
    return _ShapeFix.Handle_ShapeFix_Shell_DownCast(t)
Handle_ShapeFix_Shell_DownCast = _ShapeFix.Handle_ShapeFix_Shell_DownCast

def Handle_ShapeFix_Shell_IsNull(t: 'opencascade::handle< ShapeFix_Shell > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_Shell_IsNull(t)
Handle_ShapeFix_Shell_IsNull = _ShapeFix.Handle_ShapeFix_Shell_IsNull

def Handle_ShapeFix_Solid_Create() -> "opencascade::handle< ShapeFix_Solid >":
    return _ShapeFix.Handle_ShapeFix_Solid_Create()
Handle_ShapeFix_Solid_Create = _ShapeFix.Handle_ShapeFix_Solid_Create

def Handle_ShapeFix_Solid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_Solid >":
    return _ShapeFix.Handle_ShapeFix_Solid_DownCast(t)
Handle_ShapeFix_Solid_DownCast = _ShapeFix.Handle_ShapeFix_Solid_DownCast

def Handle_ShapeFix_Solid_IsNull(t: 'opencascade::handle< ShapeFix_Solid > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_Solid_IsNull(t)
Handle_ShapeFix_Solid_IsNull = _ShapeFix.Handle_ShapeFix_Solid_IsNull

def Handle_ShapeFix_SplitCommonVertex_Create() -> "opencascade::handle< ShapeFix_SplitCommonVertex >":
    return _ShapeFix.Handle_ShapeFix_SplitCommonVertex_Create()
Handle_ShapeFix_SplitCommonVertex_Create = _ShapeFix.Handle_ShapeFix_SplitCommonVertex_Create

def Handle_ShapeFix_SplitCommonVertex_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_SplitCommonVertex >":
    return _ShapeFix.Handle_ShapeFix_SplitCommonVertex_DownCast(t)
Handle_ShapeFix_SplitCommonVertex_DownCast = _ShapeFix.Handle_ShapeFix_SplitCommonVertex_DownCast

def Handle_ShapeFix_SplitCommonVertex_IsNull(t: 'opencascade::handle< ShapeFix_SplitCommonVertex > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_SplitCommonVertex_IsNull(t)
Handle_ShapeFix_SplitCommonVertex_IsNull = _ShapeFix.Handle_ShapeFix_SplitCommonVertex_IsNull

def Handle_ShapeFix_Wire_Create() -> "opencascade::handle< ShapeFix_Wire >":
    return _ShapeFix.Handle_ShapeFix_Wire_Create()
Handle_ShapeFix_Wire_Create = _ShapeFix.Handle_ShapeFix_Wire_Create

def Handle_ShapeFix_Wire_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_Wire >":
    return _ShapeFix.Handle_ShapeFix_Wire_DownCast(t)
Handle_ShapeFix_Wire_DownCast = _ShapeFix.Handle_ShapeFix_Wire_DownCast

def Handle_ShapeFix_Wire_IsNull(t: 'opencascade::handle< ShapeFix_Wire > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_Wire_IsNull(t)
Handle_ShapeFix_Wire_IsNull = _ShapeFix.Handle_ShapeFix_Wire_IsNull

def Handle_ShapeFix_Wireframe_Create() -> "opencascade::handle< ShapeFix_Wireframe >":
    return _ShapeFix.Handle_ShapeFix_Wireframe_Create()
Handle_ShapeFix_Wireframe_Create = _ShapeFix.Handle_ShapeFix_Wireframe_Create

def Handle_ShapeFix_Wireframe_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeFix_Wireframe >":
    return _ShapeFix.Handle_ShapeFix_Wireframe_DownCast(t)
Handle_ShapeFix_Wireframe_DownCast = _ShapeFix.Handle_ShapeFix_Wireframe_DownCast

def Handle_ShapeFix_Wireframe_IsNull(t: 'opencascade::handle< ShapeFix_Wireframe > const &') -> "bool":
    return _ShapeFix.Handle_ShapeFix_Wireframe_IsNull(t)
Handle_ShapeFix_Wireframe_IsNull = _ShapeFix.Handle_ShapeFix_Wireframe_IsNull
class ShapeFix_DataMapOfShapeBox2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeFix.ShapeFix_DataMapOfShapeBox2d_swiginit(self, _ShapeFix.new_ShapeFix_DataMapOfShapeBox2d(*args))
    __swig_destroy__ = _ShapeFix.delete_ShapeFix_DataMapOfShapeBox2d
ShapeFix_DataMapOfShapeBox2d.begin = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_begin, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.end = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_end, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.cbegin = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_cbegin, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.cend = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_cend, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.Exchange = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_Exchange, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.Assign = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_Assign, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.Set = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_Set, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.ReSize = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_ReSize, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.Bind = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_Bind, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.Bound = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_Bound, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.IsBound = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_IsBound, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.UnBind = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_UnBind, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.Seek = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_Seek, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.Find = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_Find, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.ChangeSeek = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_ChangeSeek, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.ChangeFind = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_ChangeFind, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.__call__ = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d___call__, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.Clear = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_Clear, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d.Size = new_instancemethod(_ShapeFix.ShapeFix_DataMapOfShapeBox2d_Size, None, ShapeFix_DataMapOfShapeBox2d)
ShapeFix_DataMapOfShapeBox2d_swigregister = _ShapeFix.ShapeFix_DataMapOfShapeBox2d_swigregister
ShapeFix_DataMapOfShapeBox2d_swigregister(ShapeFix_DataMapOfShapeBox2d)

class ShapeFix_SequenceOfWireSegment(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeFix.ShapeFix_SequenceOfWireSegment_swiginit(self, _ShapeFix.new_ShapeFix_SequenceOfWireSegment(*args))
    delNode = staticmethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_delNode)
    __swig_destroy__ = _ShapeFix.delete_ShapeFix_SequenceOfWireSegment
ShapeFix_SequenceOfWireSegment.begin = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_begin, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.end = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_end, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.cbegin = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_cbegin, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.cend = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_cend, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Size = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Size, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Length = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Length, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Lower = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Lower, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Upper = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Upper, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.IsEmpty = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_IsEmpty, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Reverse = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Reverse, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Exchange = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Exchange, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Clear = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Clear, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Assign = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Assign, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Set = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Set, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Remove = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Remove, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Append = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Append, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Prepend = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Prepend, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.InsertBefore = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_InsertBefore, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.InsertAfter = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_InsertAfter, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Split = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Split, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.First = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_First, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.ChangeFirst = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_ChangeFirst, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Last = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Last, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.ChangeLast = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_ChangeLast, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.Value = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_Value, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.ChangeValue = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_ChangeValue, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.__call__ = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment___call__, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment.SetValue = new_instancemethod(_ShapeFix.ShapeFix_SequenceOfWireSegment_SetValue, None, ShapeFix_SequenceOfWireSegment)
ShapeFix_SequenceOfWireSegment_swigregister = _ShapeFix.ShapeFix_SequenceOfWireSegment_swigregister
ShapeFix_SequenceOfWireSegment_swigregister(ShapeFix_SequenceOfWireSegment)

def ShapeFix_SequenceOfWireSegment_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _ShapeFix.ShapeFix_SequenceOfWireSegment_delNode(theNode, theAl)
ShapeFix_SequenceOfWireSegment_delNode = _ShapeFix.ShapeFix_SequenceOfWireSegment_delNode

class shapefix(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def EncodeRegularity(*args) -> "void":
        """
        * Runs EncodeRegularity from BRepLib taking into account shared components of assemblies, so that each component is processed only once
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param tolang: default value is 1.0e-10
        	:type tolang: float
        	:rtype: void
        """
        return _ShapeFix.shapefix_EncodeRegularity(*args)

    EncodeRegularity = staticmethod(EncodeRegularity)

    def FixVertexPosition(*args) -> "Standard_Boolean":
        """
        * Fix position of the vertices having tolerance more tnan specified one.;
        	:param theshape:
        	:type theshape: TopoDS_Shape
        	:param theTolerance:
        	:type theTolerance: float
        	:param thecontext:
        	:type thecontext: ShapeBuild_ReShape
        	:rtype: bool
        """
        return _ShapeFix.shapefix_FixVertexPosition(*args)

    FixVertexPosition = staticmethod(FixVertexPosition)

    def LeastEdgeSize(*args) -> "Standard_Real":
        """
        * Calculate size of least edge;
        	:param theshape:
        	:type theshape: TopoDS_Shape
        	:rtype: float
        """
        return _ShapeFix.shapefix_LeastEdgeSize(*args)

    LeastEdgeSize = staticmethod(LeastEdgeSize)

    def RemoveSmallEdges(*args) -> "TopoDS_Shape":
        """
        * Removes edges which are less than given tolerance from shape with help of ShapeFix_Wire::FixSmall()
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param Tolerance:
        	:type Tolerance: float
        	:param context:
        	:type context: ShapeBuild_ReShape
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.shapefix_RemoveSmallEdges(*args)

    RemoveSmallEdges = staticmethod(RemoveSmallEdges)

    def SameParameter(*args) -> "Standard_Boolean":
        """
        * Runs SameParameter from BRepLib with these adaptations : <enforce> forces computations, else they are made only on Edges with flag SameParameter false <preci>, if not precised, is taken for each EDge as its own Tolerance Returns True when done, False if an exception has been raised In case of exception anyway, as many edges as possible have been processed. The passed progress indicator allows user to consult the current progress stage and abort algorithm if needed.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param enforce:
        	:type enforce: bool
        	:param preci: default value is 0.0
        	:type preci: float
        	:param theProgress: default value is 0
        	:type theProgress: Message_ProgressIndicator
        	:param theMsgReg: default value is 0
        	:type theMsgReg: ShapeExtend_BasicMsgRegistrator
        	:rtype: bool
        """
        return _ShapeFix.shapefix_SameParameter(*args)

    SameParameter = staticmethod(SameParameter)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeFix.shapefix_swiginit(self, _ShapeFix.new_shapefix())
    __swig_destroy__ = _ShapeFix.delete_shapefix
shapefix_swigregister = _ShapeFix.shapefix_swigregister
shapefix_swigregister(shapefix)

def shapefix_EncodeRegularity(*args) -> "void":
    """
    * Runs EncodeRegularity from BRepLib taking into account shared components of assemblies, so that each component is processed only once
    	:param shape:
    	:type shape: TopoDS_Shape
    	:param tolang: default value is 1.0e-10
    	:type tolang: float
    	:rtype: void
    """
    return _ShapeFix.shapefix_EncodeRegularity(*args)

def shapefix_FixVertexPosition(*args) -> "Standard_Boolean":
    """
    * Fix position of the vertices having tolerance more tnan specified one.;
    	:param theshape:
    	:type theshape: TopoDS_Shape
    	:param theTolerance:
    	:type theTolerance: float
    	:param thecontext:
    	:type thecontext: ShapeBuild_ReShape
    	:rtype: bool
    """
    return _ShapeFix.shapefix_FixVertexPosition(*args)

def shapefix_LeastEdgeSize(*args) -> "Standard_Real":
    """
    * Calculate size of least edge;
    	:param theshape:
    	:type theshape: TopoDS_Shape
    	:rtype: float
    """
    return _ShapeFix.shapefix_LeastEdgeSize(*args)

def shapefix_RemoveSmallEdges(*args) -> "TopoDS_Shape":
    """
    * Removes edges which are less than given tolerance from shape with help of ShapeFix_Wire::FixSmall()
    	:param shape:
    	:type shape: TopoDS_Shape
    	:param Tolerance:
    	:type Tolerance: float
    	:param context:
    	:type context: ShapeBuild_ReShape
    	:rtype: TopoDS_Shape
    """
    return _ShapeFix.shapefix_RemoveSmallEdges(*args)

def shapefix_SameParameter(*args) -> "Standard_Boolean":
    """
    * Runs SameParameter from BRepLib with these adaptations : <enforce> forces computations, else they are made only on Edges with flag SameParameter false <preci>, if not precised, is taken for each EDge as its own Tolerance Returns True when done, False if an exception has been raised In case of exception anyway, as many edges as possible have been processed. The passed progress indicator allows user to consult the current progress stage and abort algorithm if needed.
    	:param shape:
    	:type shape: TopoDS_Shape
    	:param enforce:
    	:type enforce: bool
    	:param preci: default value is 0.0
    	:type preci: float
    	:param theProgress: default value is 0
    	:type theProgress: Message_ProgressIndicator
    	:param theMsgReg: default value is 0
    	:type theMsgReg: ShapeExtend_BasicMsgRegistrator
    	:rtype: bool
    """
    return _ShapeFix.shapefix_SameParameter(*args)

class ShapeFix_Edge(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FixAddCurve3d(self, *args) -> "Standard_Boolean":
        """
        * Tries to build 3d curve of the edge if missing Use : It is to be called after FixRemoveCurve3d (if removed) or in any case when edge can have no 3d curve Returns: True if 3d curve was added, else False Status : OK : 3d curve exists FAIL1: BRepLib::BuildCurve3d() has failed DONE1: 3d curve was added
        	:param edge:
        	:type edge: TopoDS_Edge
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Edge_FixAddCurve3d(self, *args)


    def FixAddPCurve(self, *args) -> "Standard_Boolean":
        """
        * See method below for information
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param face:
        	:type face: TopoDS_Face
        	:param isSeam:
        	:type isSeam: bool
        	:param prec: default value is 0.0
        	:type prec: float
        	:rtype: bool
        * See method below for information
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param surface:
        	:type surface: Geom_Surface
        	:param location:
        	:type location: TopLoc_Location
        	:param isSeam:
        	:type isSeam: bool
        	:param prec: default value is 0.0
        	:type prec: float
        	:rtype: bool
        * See method below for information
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param face:
        	:type face: TopoDS_Face
        	:param isSeam:
        	:type isSeam: bool
        	:param surfana:
        	:type surfana: ShapeAnalysis_Surface
        	:param prec: default value is 0.0
        	:type prec: float
        	:rtype: bool
        * Adds pcurve(s) of the edge if missing (by projecting 3d curve) Parameter isSeam indicates if the edge is a seam. The parameter <prec> defines the precision for calculations. If it is 0 (default), the tolerance of the edge is taken. Remark : This method is rather for internal use since it accepts parameter <surfana> for optimization of computations Use : It is to be called after FixRemovePCurve (if removed) or in any case when edge can have no pcurve Returns: True if pcurve was added, else False Status : OK : Pcurve exists FAIL1: No 3d curve FAIL2: fail during projecting DONE1: Pcurve was added DONE2: specific case of pcurve going through degenerated point on sphere encountered during projection (see class ShapeConstruct_ProjectCurveOnSurface for more info)
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param surface:
        	:type surface: Geom_Surface
        	:param location:
        	:type location: TopLoc_Location
        	:param isSeam:
        	:type isSeam: bool
        	:param surfana:
        	:type surfana: ShapeAnalysis_Surface
        	:param prec: default value is 0.0
        	:type prec: float
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Edge_FixAddPCurve(self, *args)


    def FixRemoveCurve3d(self, *args) -> "Standard_Boolean":
        """
        * Removes 3d curve of the edge if it does not match the vertices Returns: True, if does not match, removed (status DONE) False, (status OK) if matches or (status FAIL) if no 3d curve, nothing done
        	:param edge:
        	:type edge: TopoDS_Edge
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Edge_FixRemoveCurve3d(self, *args)


    def FixRemovePCurve(self, *args) -> "Standard_Boolean":
        """
        :param edge:
        	:type edge: TopoDS_Edge
        	:param face:
        	:type face: TopoDS_Face
        	:rtype: bool
        * Removes the pcurve(s) of the edge if it does not match the vertices Check is done Use : It is to be called when pcurve of an edge can be wrong (e.g., after import from IGES) Returns: True, if does not match, removed (status DONE) False, (status OK) if matches or (status FAIL) if no pcurve, nothing done
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param surface:
        	:type surface: Geom_Surface
        	:param location:
        	:type location: TopLoc_Location
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Edge_FixRemovePCurve(self, *args)


    def FixReversed2d(self, *args) -> "Standard_Boolean":
        """
        :param edge:
        	:type edge: TopoDS_Edge
        	:param face:
        	:type face: TopoDS_Face
        	:rtype: bool
        * Fixes edge if pcurve is directed opposite to 3d curve Check is done by call to the function ShapeAnalysis_Edge::CheckCurve3dWithPCurve() Warning: For seam edge this method will check and fix the pcurve in only one direction. Hence, it should be called twice for seam edge: once with edge orientation FORWARD and once with REVERSED. Returns: False if nothing done, True if reversed (status DONE) Status: OK - pcurve OK, nothing done FAIL1 - no pcurve FAIL2 - no 3d curve DONE1 - pcurve was reversed
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param surface:
        	:type surface: Geom_Surface
        	:param location:
        	:type location: TopLoc_Location
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Edge_FixReversed2d(self, *args)


    def FixSameParameter(self, *args) -> "Standard_Boolean":
        """
        * Tries to make edge SameParameter and sets corresponding tolerance and SameParameter flag. First, it makes edge same range if SameRange flag is not set. //! If flag SameParameter is set, this method calls the function ShapeAnalysis_Edge::CheckSameParameter() that calculates the maximal deviation of pcurves of the edge from its 3d curve. If deviation > tolerance, the tolerance of edge is increased to a value of deviation. If deviation < tolerance nothing happens. //! If flag SameParameter is not set, this method chooses the best variant (one that has minimal tolerance), either a. only after computing deviation (as above) or b. after calling standard procedure BRepLib::SameParameter and computing deviation (as above). If <tolerance> > 0, it is used as parameter for BRepLib::SameParameter, otherwise, tolerance of the edge is used. //! Use : Is to be called after all pcurves and 3d curve of the edge are correctly computed Remark : SameParameter flag is always set to True after this method Returns: True, if something done, else False Status : OK - edge was initially SameParameter, nothing is done FAIL1 - computation of deviation of pcurves from 3d curve has failed FAIL2 - BRepLib::SameParameter() has failed DONE1 - tolerance of the edge was increased DONE2 - flag SameParameter was set to True (only if BRepLib::SameParameter() did not set it) DONE3 - edge was modified by BRepLib::SameParameter() to SameParameter DONE4 - not used anymore DONE5 - if the edge resulting from BRepLib has been chosen, i.e. variant b. above (only for edges with not set SameParameter)
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param tolerance: default value is 0.0
        	:type tolerance: float
        	:rtype: bool
        * Tries to make edge SameParameter and sets corresponding tolerance and SameParameter flag. First, it makes edge same range if SameRange flag is not set. //! If flag SameParameter is set, this method calls the function ShapeAnalysis_Edge::CheckSameParameter() that calculates the maximal deviation of pcurves of the edge from its 3d curve. If deviation > tolerance, the tolerance of edge is increased to a value of deviation. If deviation < tolerance nothing happens. //! If flag SameParameter is not set, this method chooses the best variant (one that has minimal tolerance), either a. only after computing deviation (as above) or b. after calling standard procedure BRepLib::SameParameter and computing deviation (as above). If <tolerance> > 0, it is used as parameter for BRepLib::SameParameter, otherwise, tolerance of the edge is used. //! Use : Is to be called after all pcurves and 3d curve of the edge are correctly computed Remark : SameParameter flag is always set to True after this method Returns: True, if something done, else False Status : OK - edge was initially SameParameter, nothing is done FAIL1 - computation of deviation of pcurves from 3d curve has failed FAIL2 - BRepLib::SameParameter() has failed DONE1 - tolerance of the edge was increased DONE2 - flag SameParameter was set to True (only if BRepLib::SameParameter() did not set it) DONE3 - edge was modified by BRepLib::SameParameter() to SameParameter DONE4 - not used anymore DONE5 - if the edge resulting from BRepLib has been chosen, i.e. variant b. above (only for edges with not set SameParameter)
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param face:
        	:type face: TopoDS_Face
        	:param tolerance: default value is 0.0
        	:type tolerance: float
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Edge_FixSameParameter(self, *args)


    def FixVertexTolerance(self, *args) -> "Standard_Boolean":
        """
        :param edge:
        	:type edge: TopoDS_Edge
        	:param face:
        	:type face: TopoDS_Face
        	:rtype: bool
        * Increases the tolerances of the edge vertices to comprise the ends of 3d curve and pcurve on the given face (first method) or all pcurves stored in an edge (second one) Returns: True, if tolerances have been increased, otherwise False Status: OK : the original tolerances have not been changed DONE1: the tolerance of first vertex has been increased DONE2: the tolerance of last vertex has been increased
        	:param edge:
        	:type edge: TopoDS_Edge
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Edge_FixVertexTolerance(self, *args)


    def Projector(self, *args) -> "opencascade::handle< ShapeConstruct_ProjectCurveOnSurface >":
        """
        * Returns the projector used for recomputing missing pcurves Can be used for adjusting parameters of projector
        	:rtype: opencascade::handle<ShapeConstruct_ProjectCurveOnSurface>
        """
        return _ShapeFix.ShapeFix_Edge_Projector(self, *args)


    def SetContext(self, *args) -> "void":
        """
        * Sets context
        	:param context:
        	:type context: ShapeBuild_ReShape
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Edge_SetContext(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _ShapeFix.ShapeFix_Edge_swiginit(self, _ShapeFix.new_ShapeFix_Edge(*args))

    def Status(self, *args) -> "Standard_Boolean":
        """
        * Returns the status (in the form of True/False) of last Fix
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Edge_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_Edge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_Edge
ShapeFix_Edge.FixAddCurve3d = new_instancemethod(_ShapeFix.ShapeFix_Edge_FixAddCurve3d, None, ShapeFix_Edge)
ShapeFix_Edge.FixAddPCurve = new_instancemethod(_ShapeFix.ShapeFix_Edge_FixAddPCurve, None, ShapeFix_Edge)
ShapeFix_Edge.FixRemoveCurve3d = new_instancemethod(_ShapeFix.ShapeFix_Edge_FixRemoveCurve3d, None, ShapeFix_Edge)
ShapeFix_Edge.FixRemovePCurve = new_instancemethod(_ShapeFix.ShapeFix_Edge_FixRemovePCurve, None, ShapeFix_Edge)
ShapeFix_Edge.FixReversed2d = new_instancemethod(_ShapeFix.ShapeFix_Edge_FixReversed2d, None, ShapeFix_Edge)
ShapeFix_Edge.FixSameParameter = new_instancemethod(_ShapeFix.ShapeFix_Edge_FixSameParameter, None, ShapeFix_Edge)
ShapeFix_Edge.FixVertexTolerance = new_instancemethod(_ShapeFix.ShapeFix_Edge_FixVertexTolerance, None, ShapeFix_Edge)
ShapeFix_Edge.Projector = new_instancemethod(_ShapeFix.ShapeFix_Edge_Projector, None, ShapeFix_Edge)
ShapeFix_Edge.SetContext = new_instancemethod(_ShapeFix.ShapeFix_Edge_SetContext, None, ShapeFix_Edge)
ShapeFix_Edge.Status = new_instancemethod(_ShapeFix.ShapeFix_Edge_Status, None, ShapeFix_Edge)
ShapeFix_Edge_swigregister = _ShapeFix.ShapeFix_Edge_swigregister
ShapeFix_Edge_swigregister(ShapeFix_Edge)

class ShapeFix_EdgeConnect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Adds information on connectivity between start vertex of second edge and end vertex of first edge, taking edges orientation into account
        	:param aFirst:
        	:type aFirst: TopoDS_Edge
        	:param aSecond:
        	:type aSecond: TopoDS_Edge
        	:rtype: None
        * Adds connectivity information for the whole shape. Note: edges in wires must be well ordered Note: flag Closed should be set for closed wires
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_EdgeConnect_Add(self, *args)


    def Build(self, *args) -> "void":
        """
        * Builds shared vertices, updates their positions and tolerances
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_EdgeConnect_Build(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears internal data structure
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_EdgeConnect_Clear(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _ShapeFix.ShapeFix_EdgeConnect_swiginit(self, _ShapeFix.new_ShapeFix_EdgeConnect(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_EdgeConnect
ShapeFix_EdgeConnect.Add = new_instancemethod(_ShapeFix.ShapeFix_EdgeConnect_Add, None, ShapeFix_EdgeConnect)
ShapeFix_EdgeConnect.Build = new_instancemethod(_ShapeFix.ShapeFix_EdgeConnect_Build, None, ShapeFix_EdgeConnect)
ShapeFix_EdgeConnect.Clear = new_instancemethod(_ShapeFix.ShapeFix_EdgeConnect_Clear, None, ShapeFix_EdgeConnect)
ShapeFix_EdgeConnect_swigregister = _ShapeFix.ShapeFix_EdgeConnect_swigregister
ShapeFix_EdgeConnect_swigregister(ShapeFix_EdgeConnect)

class ShapeFix_EdgeProjAux(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Compute(self, *args) -> "void":
        """
        :param preci:
        	:type preci: float
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_EdgeProjAux_Compute(self, *args)


    def FirstParam(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _ShapeFix.ShapeFix_EdgeProjAux_FirstParam(self, *args)


    def Init(self, *args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_EdgeProjAux_Init(self, *args)


    def IsFirstDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ShapeFix.ShapeFix_EdgeProjAux_IsFirstDone(self, *args)


    def IsIso(self, *args) -> "Standard_Boolean":
        """
        :param C:
        	:type C: Geom2d_Curve
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_EdgeProjAux_IsIso(self, *args)


    def IsLastDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ShapeFix.ShapeFix_EdgeProjAux_IsLastDone(self, *args)


    def LastParam(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _ShapeFix.ShapeFix_EdgeProjAux_LastParam(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param F:
        	:type F: TopoDS_Face
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        _ShapeFix.ShapeFix_EdgeProjAux_swiginit(self, _ShapeFix.new_ShapeFix_EdgeProjAux(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_EdgeProjAux_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_EdgeProjAux
ShapeFix_EdgeProjAux.Compute = new_instancemethod(_ShapeFix.ShapeFix_EdgeProjAux_Compute, None, ShapeFix_EdgeProjAux)
ShapeFix_EdgeProjAux.FirstParam = new_instancemethod(_ShapeFix.ShapeFix_EdgeProjAux_FirstParam, None, ShapeFix_EdgeProjAux)
ShapeFix_EdgeProjAux.Init = new_instancemethod(_ShapeFix.ShapeFix_EdgeProjAux_Init, None, ShapeFix_EdgeProjAux)
ShapeFix_EdgeProjAux.IsFirstDone = new_instancemethod(_ShapeFix.ShapeFix_EdgeProjAux_IsFirstDone, None, ShapeFix_EdgeProjAux)
ShapeFix_EdgeProjAux.IsIso = new_instancemethod(_ShapeFix.ShapeFix_EdgeProjAux_IsIso, None, ShapeFix_EdgeProjAux)
ShapeFix_EdgeProjAux.IsLastDone = new_instancemethod(_ShapeFix.ShapeFix_EdgeProjAux_IsLastDone, None, ShapeFix_EdgeProjAux)
ShapeFix_EdgeProjAux.LastParam = new_instancemethod(_ShapeFix.ShapeFix_EdgeProjAux_LastParam, None, ShapeFix_EdgeProjAux)
ShapeFix_EdgeProjAux_swigregister = _ShapeFix.ShapeFix_EdgeProjAux_swigregister
ShapeFix_EdgeProjAux_swigregister(ShapeFix_EdgeProjAux)

class ShapeFix_FaceConnect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Standard_Boolean":
        """
        :param aFirst:
        	:type aFirst: TopoDS_Face
        	:param aSecond:
        	:type aSecond: TopoDS_Face
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_FaceConnect_Add(self, *args)


    def Build(self, *args) -> "TopoDS_Shell":
        """
        :param shell:
        	:type shell: TopoDS_Shell
        	:param sewtoler:
        	:type sewtoler: float
        	:param fixtoler:
        	:type fixtoler: float
        	:rtype: TopoDS_Shell
        """
        return _ShapeFix.ShapeFix_FaceConnect_Build(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears internal data structure
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_FaceConnect_Clear(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _ShapeFix.ShapeFix_FaceConnect_swiginit(self, _ShapeFix.new_ShapeFix_FaceConnect(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_FaceConnect
ShapeFix_FaceConnect.Add = new_instancemethod(_ShapeFix.ShapeFix_FaceConnect_Add, None, ShapeFix_FaceConnect)
ShapeFix_FaceConnect.Build = new_instancemethod(_ShapeFix.ShapeFix_FaceConnect_Build, None, ShapeFix_FaceConnect)
ShapeFix_FaceConnect.Clear = new_instancemethod(_ShapeFix.ShapeFix_FaceConnect_Clear, None, ShapeFix_FaceConnect)
ShapeFix_FaceConnect_swigregister = _ShapeFix.ShapeFix_FaceConnect_swigregister
ShapeFix_FaceConnect_swigregister(ShapeFix_FaceConnect)

class ShapeFix_FreeBounds(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetClosedWires(self, *args) -> "TopoDS_Compound const":
        """
        * Returns compound of closed wires out of free edges.
        	:rtype: TopoDS_Compound
        """
        return _ShapeFix.ShapeFix_FreeBounds_GetClosedWires(self, *args)


    def GetOpenWires(self, *args) -> "TopoDS_Compound const":
        """
        * Returns compound of open wires out of free edges.
        	:rtype: TopoDS_Compound
        """
        return _ShapeFix.ShapeFix_FreeBounds_GetOpenWires(self, *args)


    def GetShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns modified source shape.
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_FreeBounds_GetShape(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Builds forecasting free bounds of the <shape> and connects open wires with tolerance <closetoler>. <shape> should be a compound of faces. Tolerance <closetoler> should be greater than tolerance <sewtoler> used for initializing sewing analyzer, otherwise connection of open wires is not performed.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param sewtoler:
        	:type sewtoler: float
        	:param closetoler:
        	:type closetoler: float
        	:param splitclosed:
        	:type splitclosed: bool
        	:param splitopen:
        	:type splitopen: bool
        	:rtype: None
        * Builds actual free bounds of the <shape> and connects open wires with tolerance <closetoler>. <shape> should be a compound of shells.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param closetoler:
        	:type closetoler: float
        	:param splitclosed:
        	:type splitclosed: bool
        	:param splitopen:
        	:type splitopen: bool
        	:rtype: None
        """
        _ShapeFix.ShapeFix_FreeBounds_swiginit(self, _ShapeFix.new_ShapeFix_FreeBounds(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_FreeBounds
ShapeFix_FreeBounds.GetClosedWires = new_instancemethod(_ShapeFix.ShapeFix_FreeBounds_GetClosedWires, None, ShapeFix_FreeBounds)
ShapeFix_FreeBounds.GetOpenWires = new_instancemethod(_ShapeFix.ShapeFix_FreeBounds_GetOpenWires, None, ShapeFix_FreeBounds)
ShapeFix_FreeBounds.GetShape = new_instancemethod(_ShapeFix.ShapeFix_FreeBounds_GetShape, None, ShapeFix_FreeBounds)
ShapeFix_FreeBounds_swigregister = _ShapeFix.ShapeFix_FreeBounds_swigregister
ShapeFix_FreeBounds_swigregister(ShapeFix_FreeBounds)

class ShapeFix_IntersectionTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Context(self, *args) -> "opencascade::handle< ShapeBuild_ReShape >":
        """
        * Returns context
        	:rtype: opencascade::handle<ShapeBuild_ReShape>
        """
        return _ShapeFix.ShapeFix_IntersectionTool_Context(self, *args)


    def CutEdge(self, *args) -> "Standard_Boolean":
        """
        * Cut edge by parameters pend and cut
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param pend:
        	:type pend: float
        	:param cut:
        	:type cut: float
        	:param face:
        	:type face: TopoDS_Face
        	:param iscutline:
        	:type iscutline: bool
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_IntersectionTool_CutEdge(self, *args)


    def FixIntersectingWires(self, *args) -> "Standard_Boolean":
        """
        :param face:
        	:type face: TopoDS_Face
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_IntersectionTool_FixIntersectingWires(self, *args)


    def FixSelfIntersectWire(self, *args) -> "Standard_Boolean":
        """
        :param sewd:
        	:type sewd: ShapeExtend_WireData
        	:param face:
        	:type face: TopoDS_Face
        	:param NbSplit:
        	:type NbSplit: int
        	:param NbCut:
        	:type NbCut: int
        	:param NbRemoved:
        	:type NbRemoved: int
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_IntersectionTool_FixSelfIntersectWire(self, *args)


    def __init__(self, *args):
        """
        * Constructor
        	:param context:
        	:type context: ShapeBuild_ReShape
        	:param preci:
        	:type preci: float
        	:param maxtol: default value is 1.0
        	:type maxtol: float
        	:rtype: None
        """
        _ShapeFix.ShapeFix_IntersectionTool_swiginit(self, _ShapeFix.new_ShapeFix_IntersectionTool(*args))

    def SplitEdge(self, *args) -> "Standard_Boolean":
        """
        * Split edge on two new edges using new vertex 'vert' and 'param' - parameter for splitting The 'face' is necessary for pcurves and using TransferParameterProj
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param param:
        	:type param: float
        	:param vert:
        	:type vert: TopoDS_Vertex
        	:param face:
        	:type face: TopoDS_Face
        	:param newE1:
        	:type newE1: TopoDS_Edge
        	:param newE2:
        	:type newE2: TopoDS_Edge
        	:param preci:
        	:type preci: float
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_IntersectionTool_SplitEdge(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_IntersectionTool
ShapeFix_IntersectionTool.Context = new_instancemethod(_ShapeFix.ShapeFix_IntersectionTool_Context, None, ShapeFix_IntersectionTool)
ShapeFix_IntersectionTool.CutEdge = new_instancemethod(_ShapeFix.ShapeFix_IntersectionTool_CutEdge, None, ShapeFix_IntersectionTool)
ShapeFix_IntersectionTool.FixIntersectingWires = new_instancemethod(_ShapeFix.ShapeFix_IntersectionTool_FixIntersectingWires, None, ShapeFix_IntersectionTool)
ShapeFix_IntersectionTool.FixSelfIntersectWire = new_instancemethod(_ShapeFix.ShapeFix_IntersectionTool_FixSelfIntersectWire, None, ShapeFix_IntersectionTool)
ShapeFix_IntersectionTool.SplitEdge = new_instancemethod(_ShapeFix.ShapeFix_IntersectionTool_SplitEdge, None, ShapeFix_IntersectionTool)
ShapeFix_IntersectionTool_swigregister = _ShapeFix.ShapeFix_IntersectionTool_swigregister
ShapeFix_IntersectionTool_swigregister(ShapeFix_IntersectionTool)

class ShapeFix_Root(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Context(self, *args) -> "opencascade::handle< ShapeBuild_ReShape >":
        """
        * Returns context
        	:rtype: opencascade::handle<ShapeBuild_ReShape>
        """
        return _ShapeFix.ShapeFix_Root_Context(self, *args)


    def LimitTolerance(self, *args) -> "Standard_Real":
        """
        * Returns tolerance limited by [myMinTol,myMaxTol]
        	:param toler:
        	:type toler: float
        	:rtype: float
        """
        return _ShapeFix.ShapeFix_Root_LimitTolerance(self, *args)


    def MaxTolerance(self, *args) -> "Standard_Real":
        """
        * Returns maximal allowed tolerance
        	:rtype: float
        """
        return _ShapeFix.ShapeFix_Root_MaxTolerance(self, *args)


    def MinTolerance(self, *args) -> "Standard_Real":
        """
        * Returns minimal allowed tolerance
        	:rtype: float
        """
        return _ShapeFix.ShapeFix_Root_MinTolerance(self, *args)


    def MsgRegistrator(self, *args) -> "opencascade::handle< ShapeExtend_BasicMsgRegistrator >":
        """
        * Returns message registrator
        	:rtype: opencascade::handle<ShapeExtend_BasicMsgRegistrator>
        """
        return _ShapeFix.ShapeFix_Root_MsgRegistrator(self, *args)


    def Precision(self, *args) -> "Standard_Real":
        """
        * Returns basic precision value
        	:rtype: float
        """
        return _ShapeFix.ShapeFix_Root_Precision(self, *args)


    def SendFail(self, *args) -> "void":
        """
        * Sends a fail to be attached to the shape. Calls SendMsg with gravity set to Message_Fail.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param message:
        	:type message: Message_Msg
        	:rtype: None
        * Calls previous method for myShape.
        	:param message:
        	:type message: Message_Msg
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Root_SendFail(self, *args)


    def SendMsg(self, *args) -> "void":
        """
        * Sends a message to be attached to the shape. Calls corresponding message of message registrator.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param message:
        	:type message: Message_Msg
        	:param gravity: default value is Message_Info
        	:type gravity: Message_Gravity
        	:rtype: None
        * Sends a message to be attached to myShape. Calls previous method.
        	:param message:
        	:type message: Message_Msg
        	:param gravity: default value is Message_Info
        	:type gravity: Message_Gravity
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Root_SendMsg(self, *args)


    def SendWarning(self, *args) -> "void":
        """
        * Sends a warning to be attached to the shape. Calls SendMsg with gravity set to Message_Warning.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param message:
        	:type message: Message_Msg
        	:rtype: None
        * Calls previous method for myShape.
        	:param message:
        	:type message: Message_Msg
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Root_SendWarning(self, *args)


    def Set(self, *args) -> "void":
        """
        * Copy all fields from another Root object
        	:param Root:
        	:type Root: ShapeFix_Root
        	:rtype: void
        """
        return _ShapeFix.ShapeFix_Root_Set(self, *args)


    def SetContext(self, *args) -> "void":
        """
        * Sets context
        	:param context:
        	:type context: ShapeBuild_ReShape
        	:rtype: void
        """
        return _ShapeFix.ShapeFix_Root_SetContext(self, *args)


    def SetMaxTolerance(self, *args) -> "void":
        """
        * Sets maximal allowed tolerance
        	:param maxtol:
        	:type maxtol: float
        	:rtype: void
        """
        return _ShapeFix.ShapeFix_Root_SetMaxTolerance(self, *args)


    def SetMinTolerance(self, *args) -> "void":
        """
        * Sets minimal allowed tolerance
        	:param mintol:
        	:type mintol: float
        	:rtype: void
        """
        return _ShapeFix.ShapeFix_Root_SetMinTolerance(self, *args)


    def SetMsgRegistrator(self, *args) -> "void":
        """
        * Sets message registrator
        	:param msgreg:
        	:type msgreg: ShapeExtend_BasicMsgRegistrator
        	:rtype: void
        """
        return _ShapeFix.ShapeFix_Root_SetMsgRegistrator(self, *args)


    def SetPrecision(self, *args) -> "void":
        """
        * Sets basic precision value
        	:param preci:
        	:type preci: float
        	:rtype: void
        """
        return _ShapeFix.ShapeFix_Root_SetPrecision(self, *args)


    def __init__(self, *args):
        """
        * Empty Constructor (no context is created)
        	:rtype: None
        """
        _ShapeFix.ShapeFix_Root_swiginit(self, _ShapeFix.new_ShapeFix_Root(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_Root_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_Root
ShapeFix_Root.Context = new_instancemethod(_ShapeFix.ShapeFix_Root_Context, None, ShapeFix_Root)
ShapeFix_Root.LimitTolerance = new_instancemethod(_ShapeFix.ShapeFix_Root_LimitTolerance, None, ShapeFix_Root)
ShapeFix_Root.MaxTolerance = new_instancemethod(_ShapeFix.ShapeFix_Root_MaxTolerance, None, ShapeFix_Root)
ShapeFix_Root.MinTolerance = new_instancemethod(_ShapeFix.ShapeFix_Root_MinTolerance, None, ShapeFix_Root)
ShapeFix_Root.MsgRegistrator = new_instancemethod(_ShapeFix.ShapeFix_Root_MsgRegistrator, None, ShapeFix_Root)
ShapeFix_Root.Precision = new_instancemethod(_ShapeFix.ShapeFix_Root_Precision, None, ShapeFix_Root)
ShapeFix_Root.SendFail = new_instancemethod(_ShapeFix.ShapeFix_Root_SendFail, None, ShapeFix_Root)
ShapeFix_Root.SendMsg = new_instancemethod(_ShapeFix.ShapeFix_Root_SendMsg, None, ShapeFix_Root)
ShapeFix_Root.SendWarning = new_instancemethod(_ShapeFix.ShapeFix_Root_SendWarning, None, ShapeFix_Root)
ShapeFix_Root.Set = new_instancemethod(_ShapeFix.ShapeFix_Root_Set, None, ShapeFix_Root)
ShapeFix_Root.SetContext = new_instancemethod(_ShapeFix.ShapeFix_Root_SetContext, None, ShapeFix_Root)
ShapeFix_Root.SetMaxTolerance = new_instancemethod(_ShapeFix.ShapeFix_Root_SetMaxTolerance, None, ShapeFix_Root)
ShapeFix_Root.SetMinTolerance = new_instancemethod(_ShapeFix.ShapeFix_Root_SetMinTolerance, None, ShapeFix_Root)
ShapeFix_Root.SetMsgRegistrator = new_instancemethod(_ShapeFix.ShapeFix_Root_SetMsgRegistrator, None, ShapeFix_Root)
ShapeFix_Root.SetPrecision = new_instancemethod(_ShapeFix.ShapeFix_Root_SetPrecision, None, ShapeFix_Root)
ShapeFix_Root_swigregister = _ShapeFix.ShapeFix_Root_swigregister
ShapeFix_Root_swigregister(ShapeFix_Root)

class ShapeFix_ShapeTolerance(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def LimitTolerance(self, *args) -> "Standard_Boolean":
        """
        * Limits tolerances in a shape as follows : tmin = tmax -> as SetTolerance (forces) tmin = 0 -> maximum tolerance will be <tmax> tmax = 0 or not given (more generally, tmax < tmin) -> <tmax> ignored, minimum will be <tmin> else, maximum will be <max> and minimum will be <min> styp = VERTEX : only vertices are set styp = EDGE : only edges are set styp = FACE : only faces are set styp = WIRE : to have edges and their vertices set styp = other value : all (vertices,edges,faces) are set Returns True if at least one tolerance of the sub-shape has been modified
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param tmin:
        	:type tmin: float
        	:param tmax: default value is 0.0
        	:type tmax: float
        	:param styp: default value is TopAbs_SHAPE
        	:type styp: TopAbs_ShapeEnum
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_ShapeTolerance_LimitTolerance(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * Sets (enforces) tolerances in a shape to the given value styp = VERTEX : only vertices are set styp = EDGE : only edges are set styp = FACE : only faces are set styp = WIRE : to have edges and their vertices set styp = other value : all (vertices,edges,faces) are set
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param preci:
        	:type preci: float
        	:param styp: default value is TopAbs_SHAPE
        	:type styp: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_ShapeTolerance_SetTolerance(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _ShapeFix.ShapeFix_ShapeTolerance_swiginit(self, _ShapeFix.new_ShapeFix_ShapeTolerance(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_ShapeTolerance
ShapeFix_ShapeTolerance.LimitTolerance = new_instancemethod(_ShapeFix.ShapeFix_ShapeTolerance_LimitTolerance, None, ShapeFix_ShapeTolerance)
ShapeFix_ShapeTolerance.SetTolerance = new_instancemethod(_ShapeFix.ShapeFix_ShapeTolerance_SetTolerance, None, ShapeFix_ShapeTolerance)
ShapeFix_ShapeTolerance_swigregister = _ShapeFix.ShapeFix_ShapeTolerance_swigregister
ShapeFix_ShapeTolerance_swigregister(ShapeFix_ShapeTolerance)

class ShapeFix_SplitTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CutEdge(self, *args) -> "Standard_Boolean":
        """
        * Cut edge by parameters pend and cut
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param pend:
        	:type pend: float
        	:param cut:
        	:type cut: float
        	:param face:
        	:type face: TopoDS_Face
        	:param iscutline:
        	:type iscutline: bool
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_SplitTool_CutEdge(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _ShapeFix.ShapeFix_SplitTool_swiginit(self, _ShapeFix.new_ShapeFix_SplitTool(*args))

    def SplitEdge(self, *args) -> "Standard_Boolean":
        """
        * Split edge on two new edges using new vertex 'vert' and 'param' - parameter for splitting The 'face' is necessary for pcurves and using TransferParameterProj
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param param:
        	:type param: float
        	:param vert:
        	:type vert: TopoDS_Vertex
        	:param face:
        	:type face: TopoDS_Face
        	:param newE1:
        	:type newE1: TopoDS_Edge
        	:param newE2:
        	:type newE2: TopoDS_Edge
        	:param tol3d:
        	:type tol3d: float
        	:param tol2d:
        	:type tol2d: float
        	:rtype: bool
        * Split edge on two new edges using new vertex 'vert' and 'param1' and 'param2' - parameter for splitting and cutting The 'face' is necessary for pcurves and using TransferParameterProj
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param param1:
        	:type param1: float
        	:param param2:
        	:type param2: float
        	:param vert:
        	:type vert: TopoDS_Vertex
        	:param face:
        	:type face: TopoDS_Face
        	:param newE1:
        	:type newE1: TopoDS_Edge
        	:param newE2:
        	:type newE2: TopoDS_Edge
        	:param tol3d:
        	:type tol3d: float
        	:param tol2d:
        	:type tol2d: float
        	:rtype: bool
        * Split edge on two new edges using two new vertex V1 and V2 and two parameters for splitting - fp and lp correspondingly The 'face' is necessary for pcurves and using TransferParameterProj aNum - number of edge in SeqE which corresponding to [fp,lp]
        	:param edge:
        	:type edge: TopoDS_Edge
        	:param fp:
        	:type fp: float
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param lp:
        	:type lp: float
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param face:
        	:type face: TopoDS_Face
        	:param SeqE:
        	:type SeqE: TopTools_SequenceOfShape
        	:param aNum:
        	:type aNum: int
        	:param context:
        	:type context: ShapeBuild_ReShape
        	:param tol3d:
        	:type tol3d: float
        	:param tol2d:
        	:type tol2d: float
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_SplitTool_SplitEdge(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_SplitTool
ShapeFix_SplitTool.CutEdge = new_instancemethod(_ShapeFix.ShapeFix_SplitTool_CutEdge, None, ShapeFix_SplitTool)
ShapeFix_SplitTool.SplitEdge = new_instancemethod(_ShapeFix.ShapeFix_SplitTool_SplitEdge, None, ShapeFix_SplitTool)
ShapeFix_SplitTool_swigregister = _ShapeFix.ShapeFix_SplitTool_swigregister
ShapeFix_SplitTool_swigregister(ShapeFix_SplitTool)

class ShapeFix_WireVertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Analyzer(self, *args) -> "ShapeAnalysis_WireVertex const &":
        """
        * returns internal analyzer
        	:rtype: ShapeAnalysis_WireVertex
        """
        return _ShapeFix.ShapeFix_WireVertex_Analyzer(self, *args)


    def Fix(self, *args) -> "Standard_Integer":
        """
        * Fixes all statuses except 'Disjoined', i.e. the cases in which a common value has been set, with or without changing parameters Returns the count of fixed vertices, 0 if none
        	:rtype: int
        """
        return _ShapeFix.ShapeFix_WireVertex_Fix(self, *args)


    def FixSame(self, *args) -> "Standard_Integer":
        """
        * Fixes 'Same' or 'Close' status (same vertex may be set, without changing parameters) Returns the count of fixed vertices, 0 if none
        	:rtype: int
        """
        return _ShapeFix.ShapeFix_WireVertex_FixSame(self, *args)


    def Init(self, *args) -> "void":
        """
        * Loads the wire, ininializes internal analyzer (ShapeAnalysis_WireVertex) with the given precision, and performs analysis
        	:param wire:
        	:type wire: TopoDS_Wire
        	:param preci:
        	:type preci: float
        	:rtype: None
        * Loads the wire, ininializes internal analyzer (ShapeAnalysis_WireVertex) with the given precision, and performs analysis
        	:param sbwd:
        	:type sbwd: ShapeExtend_WireData
        	:param preci:
        	:type preci: float
        	:rtype: None
        * Loads all the data on wire, already analysed by ShapeAnalysis_WireVertex
        	:param sawv:
        	:type sawv: ShapeAnalysis_WireVertex
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_WireVertex_Init(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _ShapeFix.ShapeFix_WireVertex_swiginit(self, _ShapeFix.new_ShapeFix_WireVertex(*args))

    def Wire(self, *args) -> "TopoDS_Wire":
        """
        * returns resulting wire (fixed)
        	:rtype: TopoDS_Wire
        """
        return _ShapeFix.ShapeFix_WireVertex_Wire(self, *args)


    def WireData(self, *args) -> "opencascade::handle< ShapeExtend_WireData > const &":
        """
        * returns data on wire (fixed)
        	:rtype: opencascade::handle<ShapeExtend_WireData>
        """
        return _ShapeFix.ShapeFix_WireVertex_WireData(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_WireVertex
ShapeFix_WireVertex.Analyzer = new_instancemethod(_ShapeFix.ShapeFix_WireVertex_Analyzer, None, ShapeFix_WireVertex)
ShapeFix_WireVertex.Fix = new_instancemethod(_ShapeFix.ShapeFix_WireVertex_Fix, None, ShapeFix_WireVertex)
ShapeFix_WireVertex.FixSame = new_instancemethod(_ShapeFix.ShapeFix_WireVertex_FixSame, None, ShapeFix_WireVertex)
ShapeFix_WireVertex.Init = new_instancemethod(_ShapeFix.ShapeFix_WireVertex_Init, None, ShapeFix_WireVertex)
ShapeFix_WireVertex.Wire = new_instancemethod(_ShapeFix.ShapeFix_WireVertex_Wire, None, ShapeFix_WireVertex)
ShapeFix_WireVertex.WireData = new_instancemethod(_ShapeFix.ShapeFix_WireVertex_WireData, None, ShapeFix_WireVertex)
ShapeFix_WireVertex_swigregister = _ShapeFix.ShapeFix_WireVertex_swigregister
ShapeFix_WireVertex_swigregister(ShapeFix_WireVertex)

class ShapeFix_ComposeShell(ShapeFix_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetClosedMode(self) -> "Standard_Boolean":
        """GetClosedMode(ShapeFix_ComposeShell self) -> Standard_Boolean"""
        return _ShapeFix.ShapeFix_ComposeShell_GetClosedMode(self)


    def SetClosedMode(self, value: 'Standard_Boolean') -> "void":
        """SetClosedMode(ShapeFix_ComposeShell self, Standard_Boolean value)"""
        return _ShapeFix.ShapeFix_ComposeShell_SetClosedMode(self, value)


    def DispatchWires(self, *args) -> "void":
        """
        * Creates new faces from the set of (closed) wires. Each wire is put on corresponding patch in the composite surface, and all pcurves on the initial (pseudo)face are reassigned to that surface. If several wires are one inside another, single face is created.
        	:param faces:
        	:type faces: TopTools_SequenceOfShape
        	:param wires:
        	:type wires: ShapeFix_SequenceOfWireSegment
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_ComposeShell_DispatchWires(self, *args)


    def GetTransferParamTool(self, *args) -> "opencascade::handle< ShapeAnalysis_TransferParameters >":
        """
        * Gets tool for transfer parameters from 3d to 2d and vice versa.
        	:rtype: opencascade::handle<ShapeAnalysis_TransferParameters>
        """
        return _ShapeFix.ShapeFix_ComposeShell_GetTransferParamTool(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes with composite surface, face and precision. Here face defines both set of wires and way of getting pcurves. Precision is used (together with tolerance of edges) for handling subtle cases, such as tangential intersections.
        	:param Grid:
        	:type Grid: ShapeExtend_CompositeSurface
        	:param L:
        	:type L: TopLoc_Location
        	:param Face:
        	:type Face: TopoDS_Face
        	:param Prec:
        	:type Prec: float
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_ComposeShell_Init(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        * Performs the work on already loaded data.
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_ComposeShell_Perform(self, *args)


    def Result(self, *args) -> "TopoDS_Shape const":
        """
        * Returns resulting shell or face (or Null shape if not done)
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_ComposeShell_Result(self, *args)


    def SetTransferParamTool(self, *args) -> "void":
        """
        * Sets tool for transfer parameters from 3d to 2d and vice versa.
        	:param TransferParam:
        	:type TransferParam: ShapeAnalysis_TransferParameters
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_ComposeShell_SetTransferParamTool(self, *args)


    def __init__(self, *args):
        """
        * Creates empty tool.
        	:rtype: None
        """
        _ShapeFix.ShapeFix_ComposeShell_swiginit(self, _ShapeFix.new_ShapeFix_ComposeShell(*args))

    def SplitEdges(self, *args) -> "void":
        """
        * Splits edges in the original shape by grid. This is a part of Perform() which does not produce any resulting shape; the only result is filled context where splittings are recorded. //! NOTE: If edge is splitted, it is replaced by wire, and order of edges in the wire corresponds to FORWARD orientation of the edge.
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_ComposeShell_SplitEdges(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        * Queries status of last call to Perform() OK : nothing done (some kind of error) DONE1: splitting is done, at least one new face created DONE2: splitting is done, several new faces obtained FAIL1: misoriented wire encountered (handled) FAIL2: recoverable parity error FAIL3: edge with no pcurve on supporting face FAIL4: unrecoverable algorithm error (parity check)
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_ComposeShell_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_ComposeShell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_ComposeShell
ShapeFix_ComposeShell.GetClosedMode = new_instancemethod(_ShapeFix.ShapeFix_ComposeShell_GetClosedMode, None, ShapeFix_ComposeShell)
ShapeFix_ComposeShell.SetClosedMode = new_instancemethod(_ShapeFix.ShapeFix_ComposeShell_SetClosedMode, None, ShapeFix_ComposeShell)
ShapeFix_ComposeShell.DispatchWires = new_instancemethod(_ShapeFix.ShapeFix_ComposeShell_DispatchWires, None, ShapeFix_ComposeShell)
ShapeFix_ComposeShell.GetTransferParamTool = new_instancemethod(_ShapeFix.ShapeFix_ComposeShell_GetTransferParamTool, None, ShapeFix_ComposeShell)
ShapeFix_ComposeShell.Init = new_instancemethod(_ShapeFix.ShapeFix_ComposeShell_Init, None, ShapeFix_ComposeShell)
ShapeFix_ComposeShell.Perform = new_instancemethod(_ShapeFix.ShapeFix_ComposeShell_Perform, None, ShapeFix_ComposeShell)
ShapeFix_ComposeShell.Result = new_instancemethod(_ShapeFix.ShapeFix_ComposeShell_Result, None, ShapeFix_ComposeShell)
ShapeFix_ComposeShell.SetTransferParamTool = new_instancemethod(_ShapeFix.ShapeFix_ComposeShell_SetTransferParamTool, None, ShapeFix_ComposeShell)
ShapeFix_ComposeShell.SplitEdges = new_instancemethod(_ShapeFix.ShapeFix_ComposeShell_SplitEdges, None, ShapeFix_ComposeShell)
ShapeFix_ComposeShell.Status = new_instancemethod(_ShapeFix.ShapeFix_ComposeShell_Status, None, ShapeFix_ComposeShell)
ShapeFix_ComposeShell_swigregister = _ShapeFix.ShapeFix_ComposeShell_swigregister
ShapeFix_ComposeShell_swigregister(ShapeFix_ComposeShell)

class ShapeFix_Face(ShapeFix_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Add a wire to current face using BRep_Builder. Wire is added without taking into account orientation of face (as if face were FORWARD).
        	:param wire:
        	:type wire: TopoDS_Wire
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Face_Add(self, *args)


    def GetAutoCorrectPrecisionMode(self) -> "Standard_Integer":
        """GetAutoCorrectPrecisionMode(ShapeFix_Face self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Face_GetAutoCorrectPrecisionMode(self)


    def SetAutoCorrectPrecisionMode(self, value: 'Standard_Integer') -> "void":
        """SetAutoCorrectPrecisionMode(ShapeFix_Face self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Face_SetAutoCorrectPrecisionMode(self, value)


    def ClearModes(self, *args) -> "void":
        """
        * Sets all modes to default
        	:rtype: void
        """
        return _ShapeFix.ShapeFix_Face_ClearModes(self, *args)


    def Face(self, *args) -> "TopoDS_Face":
        """
        * Returns a face which corresponds to the current state Warning: The finally produced face may be another one ... but with the same support
        	:rtype: TopoDS_Face
        """
        return _ShapeFix.ShapeFix_Face_Face(self, *args)


    def FixAddNaturalBound(self, *args) -> "Standard_Boolean":
        """
        * Adds natural boundary on face if it is missing. Two cases are supported: - face has no wires - face lies on geometrically double-closed surface (sphere or torus) and none of wires is left-oriented Returns True if natural boundary was added
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Face_FixAddNaturalBound(self, *args)


    def GetFixAddNaturalBoundMode(self) -> "Standard_Integer":
        """GetFixAddNaturalBoundMode(ShapeFix_Face self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Face_GetFixAddNaturalBoundMode(self)


    def SetFixAddNaturalBoundMode(self, value: 'Standard_Integer') -> "void":
        """SetFixAddNaturalBoundMode(ShapeFix_Face self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Face_SetFixAddNaturalBoundMode(self, value)


    def FixIntersectingWires(self, *args) -> "Standard_Boolean":
        """
        * Detects and fixes the special case when face has more than one wire and this wires have intersection point
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Face_FixIntersectingWires(self, *args)


    def GetFixIntersectingWiresMode(self) -> "Standard_Integer":
        """GetFixIntersectingWiresMode(ShapeFix_Face self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Face_GetFixIntersectingWiresMode(self)


    def SetFixIntersectingWiresMode(self, value: 'Standard_Integer') -> "void":
        """SetFixIntersectingWiresMode(ShapeFix_Face self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Face_SetFixIntersectingWiresMode(self, value)


    def FixLoopWire(self, *args) -> "Standard_Boolean":
        """
        * Detects if wire has a loop and fixes this situation by splitting on the few parts. if wire has a loops and it was splitted Status was set to value ShapeExtend_DONE6.
        	:param aResWires:
        	:type aResWires: TopTools_SequenceOfShape
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Face_FixLoopWire(self, *args)


    def GetFixLoopWiresMode(self) -> "Standard_Integer":
        """GetFixLoopWiresMode(ShapeFix_Face self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Face_GetFixLoopWiresMode(self)


    def SetFixLoopWiresMode(self, value: 'Standard_Integer') -> "void":
        """SetFixLoopWiresMode(ShapeFix_Face self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Face_SetFixLoopWiresMode(self, value)


    def FixMissingSeam(self, *args) -> "Standard_Boolean":
        """
        * Detects and fixes the special case when face on a closed surface is given by two wires closed in 3d but with gap in 2d. In that case it creates a new wire from the two, and adds a missing seam edge Returns True if missing seam was added
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Face_FixMissingSeam(self, *args)


    def GetFixMissingSeamMode(self) -> "Standard_Integer":
        """GetFixMissingSeamMode(ShapeFix_Face self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Face_GetFixMissingSeamMode(self)


    def SetFixMissingSeamMode(self, value: 'Standard_Integer') -> "void":
        """SetFixMissingSeamMode(ShapeFix_Face self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Face_SetFixMissingSeamMode(self, value)


    def FixOrientation(self, *args) -> "Standard_Boolean":
        """
        * Fixes orientation of wires on the face It tries to make all wires lie outside all others (according to orientation) by reversing orientation of some of them. If face lying on sphere or torus has single wire and AddNaturalBoundMode is True, that wire is not reversed in any case (supposing that natural bound will be added). Returns True if wires were reversed
        	:rtype: bool
        * Fixes orientation of wires on the face It tries to make all wires lie outside all others (according to orientation) by reversing orientation of some of them. If face lying on sphere or torus has single wire and AddNaturalBoundMode is True, that wire is not reversed in any case (supposing that natural bound will be added). Returns True if wires were reversed OutWires return information about out wires + list of internal wires for each (for performing split face).
        	:param MapWires:
        	:type MapWires: TopTools_DataMapOfShapeListOfShape
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Face_FixOrientation(self, *args)


    def GetFixOrientationMode(self) -> "Standard_Integer":
        """GetFixOrientationMode(ShapeFix_Face self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Face_GetFixOrientationMode(self)


    def SetFixOrientationMode(self, value: 'Standard_Integer') -> "void":
        """SetFixOrientationMode(ShapeFix_Face self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Face_SetFixOrientationMode(self, value)


    def FixPeriodicDegenerated(self, *args) -> "Standard_Boolean":
        """
        * Fixes topology for a specific case when face is composed by a single wire belting a periodic surface. In that case a degenerated edge is reconstructed in the degenerated pole of the surface. Initial wire gets consistent orientation. Must be used in couple and before FixMissingSeam routine
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Face_FixPeriodicDegenerated(self, *args)


    def GetFixPeriodicDegeneratedMode(self) -> "Standard_Integer":
        """GetFixPeriodicDegeneratedMode(ShapeFix_Face self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Face_GetFixPeriodicDegeneratedMode(self)


    def SetFixPeriodicDegeneratedMode(self, value: 'Standard_Integer') -> "void":
        """SetFixPeriodicDegeneratedMode(ShapeFix_Face self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Face_SetFixPeriodicDegeneratedMode(self, value)


    def FixSmallAreaWire(self, *args) -> "Standard_Boolean":
        """
        * Detects wires with small area (that is less than 100*Precision::PConfusion(). Removes these wires if they are internal. Returns : True if at least one small wire removed, False if does nothing.
        	:param theIsRemoveSmallFace:
        	:type theIsRemoveSmallFace: bool
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Face_FixSmallAreaWire(self, *args)


    def GetFixSmallAreaWireMode(self) -> "Standard_Integer":
        """GetFixSmallAreaWireMode(ShapeFix_Face self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Face_GetFixSmallAreaWireMode(self)


    def SetFixSmallAreaWireMode(self, value: 'Standard_Integer') -> "void":
        """SetFixSmallAreaWireMode(ShapeFix_Face self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Face_SetFixSmallAreaWireMode(self, value)


    def FixSplitFace(self, *args) -> "Standard_Boolean":
        """
        * Split face if there are more than one out wire using inrormation after FixOrientation()
        	:param MapWires:
        	:type MapWires: TopTools_DataMapOfShapeListOfShape
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Face_FixSplitFace(self, *args)


    def GetFixSplitFaceMode(self) -> "Standard_Integer":
        """GetFixSplitFaceMode(ShapeFix_Face self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Face_GetFixSplitFaceMode(self)


    def SetFixSplitFaceMode(self, value: 'Standard_Integer') -> "void":
        """SetFixSplitFaceMode(ShapeFix_Face self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Face_SetFixSplitFaceMode(self, value)


    def GetFixWireMode(self) -> "Standard_Integer":
        """GetFixWireMode(ShapeFix_Face self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Face_GetFixWireMode(self)


    def SetFixWireMode(self, value: 'Standard_Integer') -> "void":
        """SetFixWireMode(ShapeFix_Face self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Face_SetFixWireMode(self, value)


    def FixWireTool(self, *args) -> "opencascade::handle< ShapeFix_Wire >":
        """
        * Returns tool for fixing wires.
        	:rtype: opencascade::handle<ShapeFix_Wire>
        """
        return _ShapeFix.ShapeFix_Face_FixWireTool(self, *args)


    def FixWiresTwoCoincEdges(self, *args) -> "Standard_Boolean":
        """
        * If wire contains two coincidence edges it must be removed Queries on status after Perform()
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Face_FixWiresTwoCoincEdges(self, *args)


    def Init(self, *args) -> "void":
        """
        * Loads a whole face already created, with its wires, sense and location
        	:param face:
        	:type face: TopoDS_Face
        	:rtype: None
        * Starts the creation of the face By default it will be FORWARD, or REVERSED if <fwd> is False
        	:param surf:
        	:type surf: Geom_Surface
        	:param preci:
        	:type preci: float
        	:param fwd: default value is Standard_True
        	:type fwd: bool
        	:rtype: None
        * Starts the creation of the face By default it will be FORWARD, or REVERSED if <fwd> is False
        	:param surf:
        	:type surf: ShapeAnalysis_Surface
        	:param preci:
        	:type preci: float
        	:param fwd: default value is Standard_True
        	:type fwd: bool
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Face_Init(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        * Performs all the fixes, depending on modes Function Status returns the status of last call to Perform() ShapeExtend_OK : face was OK, nothing done ShapeExtend_DONE1: some wires are fixed ShapeExtend_DONE2: orientation of wires fixed ShapeExtend_DONE3: missing seam added ShapeExtend_DONE4: small area wire removed ShapeExtend_DONE5: natural bounds added ShapeExtend_FAIL1: some fails during fixing wires ShapeExtend_FAIL2: cannot fix orientation of wires ShapeExtend_FAIL3: cannot add missing seam ShapeExtend_FAIL4: cannot remove small area wire
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Face_Perform(self, *args)


    def GetRemoveSmallAreaFaceMode(self) -> "Standard_Integer":
        """GetRemoveSmallAreaFaceMode(ShapeFix_Face self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Face_GetRemoveSmallAreaFaceMode(self)


    def SetRemoveSmallAreaFaceMode(self, value: 'Standard_Integer') -> "void":
        """SetRemoveSmallAreaFaceMode(ShapeFix_Face self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Face_SetRemoveSmallAreaFaceMode(self, value)


    def Result(self, *args) -> "TopoDS_Shape":
        """
        * Returns resulting shape (Face or Shell if splitted) To be used instead of Face() if FixMissingSeam involved
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_Face_Result(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty tool
        	:rtype: None
        * Creates a tool and loads a face
        	:param face:
        	:type face: TopoDS_Face
        	:rtype: None
        """
        _ShapeFix.ShapeFix_Face_swiginit(self, _ShapeFix.new_ShapeFix_Face(*args))

    def Status(self, *args) -> "Standard_Boolean":
        """
        * Returns the status of last call to Perform() ShapeExtend_OK : face was OK, nothing done ShapeExtend_DONE1: some wires are fixed ShapeExtend_DONE2: orientation of wires fixed ShapeExtend_DONE3: missing seam added ShapeExtend_DONE4: small area wire removed ShapeExtend_DONE5: natural bounds added ShapeExtend_DONE8: face may be splited ShapeExtend_FAIL1: some fails during fixing wires ShapeExtend_FAIL2: cannot fix orientation of wires ShapeExtend_FAIL3: cannot add missing seam ShapeExtend_FAIL4: cannot remove small area wire
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Face_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_Face_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_Face
ShapeFix_Face.Add = new_instancemethod(_ShapeFix.ShapeFix_Face_Add, None, ShapeFix_Face)
ShapeFix_Face.GetAutoCorrectPrecisionMode = new_instancemethod(_ShapeFix.ShapeFix_Face_GetAutoCorrectPrecisionMode, None, ShapeFix_Face)
ShapeFix_Face.SetAutoCorrectPrecisionMode = new_instancemethod(_ShapeFix.ShapeFix_Face_SetAutoCorrectPrecisionMode, None, ShapeFix_Face)
ShapeFix_Face.ClearModes = new_instancemethod(_ShapeFix.ShapeFix_Face_ClearModes, None, ShapeFix_Face)
ShapeFix_Face.Face = new_instancemethod(_ShapeFix.ShapeFix_Face_Face, None, ShapeFix_Face)
ShapeFix_Face.FixAddNaturalBound = new_instancemethod(_ShapeFix.ShapeFix_Face_FixAddNaturalBound, None, ShapeFix_Face)
ShapeFix_Face.GetFixAddNaturalBoundMode = new_instancemethod(_ShapeFix.ShapeFix_Face_GetFixAddNaturalBoundMode, None, ShapeFix_Face)
ShapeFix_Face.SetFixAddNaturalBoundMode = new_instancemethod(_ShapeFix.ShapeFix_Face_SetFixAddNaturalBoundMode, None, ShapeFix_Face)
ShapeFix_Face.FixIntersectingWires = new_instancemethod(_ShapeFix.ShapeFix_Face_FixIntersectingWires, None, ShapeFix_Face)
ShapeFix_Face.GetFixIntersectingWiresMode = new_instancemethod(_ShapeFix.ShapeFix_Face_GetFixIntersectingWiresMode, None, ShapeFix_Face)
ShapeFix_Face.SetFixIntersectingWiresMode = new_instancemethod(_ShapeFix.ShapeFix_Face_SetFixIntersectingWiresMode, None, ShapeFix_Face)
ShapeFix_Face.FixLoopWire = new_instancemethod(_ShapeFix.ShapeFix_Face_FixLoopWire, None, ShapeFix_Face)
ShapeFix_Face.GetFixLoopWiresMode = new_instancemethod(_ShapeFix.ShapeFix_Face_GetFixLoopWiresMode, None, ShapeFix_Face)
ShapeFix_Face.SetFixLoopWiresMode = new_instancemethod(_ShapeFix.ShapeFix_Face_SetFixLoopWiresMode, None, ShapeFix_Face)
ShapeFix_Face.FixMissingSeam = new_instancemethod(_ShapeFix.ShapeFix_Face_FixMissingSeam, None, ShapeFix_Face)
ShapeFix_Face.GetFixMissingSeamMode = new_instancemethod(_ShapeFix.ShapeFix_Face_GetFixMissingSeamMode, None, ShapeFix_Face)
ShapeFix_Face.SetFixMissingSeamMode = new_instancemethod(_ShapeFix.ShapeFix_Face_SetFixMissingSeamMode, None, ShapeFix_Face)
ShapeFix_Face.FixOrientation = new_instancemethod(_ShapeFix.ShapeFix_Face_FixOrientation, None, ShapeFix_Face)
ShapeFix_Face.GetFixOrientationMode = new_instancemethod(_ShapeFix.ShapeFix_Face_GetFixOrientationMode, None, ShapeFix_Face)
ShapeFix_Face.SetFixOrientationMode = new_instancemethod(_ShapeFix.ShapeFix_Face_SetFixOrientationMode, None, ShapeFix_Face)
ShapeFix_Face.FixPeriodicDegenerated = new_instancemethod(_ShapeFix.ShapeFix_Face_FixPeriodicDegenerated, None, ShapeFix_Face)
ShapeFix_Face.GetFixPeriodicDegeneratedMode = new_instancemethod(_ShapeFix.ShapeFix_Face_GetFixPeriodicDegeneratedMode, None, ShapeFix_Face)
ShapeFix_Face.SetFixPeriodicDegeneratedMode = new_instancemethod(_ShapeFix.ShapeFix_Face_SetFixPeriodicDegeneratedMode, None, ShapeFix_Face)
ShapeFix_Face.FixSmallAreaWire = new_instancemethod(_ShapeFix.ShapeFix_Face_FixSmallAreaWire, None, ShapeFix_Face)
ShapeFix_Face.GetFixSmallAreaWireMode = new_instancemethod(_ShapeFix.ShapeFix_Face_GetFixSmallAreaWireMode, None, ShapeFix_Face)
ShapeFix_Face.SetFixSmallAreaWireMode = new_instancemethod(_ShapeFix.ShapeFix_Face_SetFixSmallAreaWireMode, None, ShapeFix_Face)
ShapeFix_Face.FixSplitFace = new_instancemethod(_ShapeFix.ShapeFix_Face_FixSplitFace, None, ShapeFix_Face)
ShapeFix_Face.GetFixSplitFaceMode = new_instancemethod(_ShapeFix.ShapeFix_Face_GetFixSplitFaceMode, None, ShapeFix_Face)
ShapeFix_Face.SetFixSplitFaceMode = new_instancemethod(_ShapeFix.ShapeFix_Face_SetFixSplitFaceMode, None, ShapeFix_Face)
ShapeFix_Face.GetFixWireMode = new_instancemethod(_ShapeFix.ShapeFix_Face_GetFixWireMode, None, ShapeFix_Face)
ShapeFix_Face.SetFixWireMode = new_instancemethod(_ShapeFix.ShapeFix_Face_SetFixWireMode, None, ShapeFix_Face)
ShapeFix_Face.FixWireTool = new_instancemethod(_ShapeFix.ShapeFix_Face_FixWireTool, None, ShapeFix_Face)
ShapeFix_Face.FixWiresTwoCoincEdges = new_instancemethod(_ShapeFix.ShapeFix_Face_FixWiresTwoCoincEdges, None, ShapeFix_Face)
ShapeFix_Face.Init = new_instancemethod(_ShapeFix.ShapeFix_Face_Init, None, ShapeFix_Face)
ShapeFix_Face.Perform = new_instancemethod(_ShapeFix.ShapeFix_Face_Perform, None, ShapeFix_Face)
ShapeFix_Face.GetRemoveSmallAreaFaceMode = new_instancemethod(_ShapeFix.ShapeFix_Face_GetRemoveSmallAreaFaceMode, None, ShapeFix_Face)
ShapeFix_Face.SetRemoveSmallAreaFaceMode = new_instancemethod(_ShapeFix.ShapeFix_Face_SetRemoveSmallAreaFaceMode, None, ShapeFix_Face)
ShapeFix_Face.Result = new_instancemethod(_ShapeFix.ShapeFix_Face_Result, None, ShapeFix_Face)
ShapeFix_Face.Status = new_instancemethod(_ShapeFix.ShapeFix_Face_Status, None, ShapeFix_Face)
ShapeFix_Face_swigregister = _ShapeFix.ShapeFix_Face_swigregister
ShapeFix_Face_swigregister(ShapeFix_Face)

class ShapeFix_FixSmallFace(ShapeFix_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ComputeSharedEdgeForStripFace(self, *args) -> "TopoDS_Edge":
        """
        * Compute average edge for strip face
        	:param F:
        	:type F: TopoDS_Face
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:param F1:
        	:type F1: TopoDS_Face
        	:param tol:
        	:type tol: float
        	:rtype: TopoDS_Edge
        """
        return _ShapeFix.ShapeFix_FixSmallFace_ComputeSharedEdgeForStripFace(self, *args)


    def FixFace(self, *args) -> "TopoDS_Face":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: TopoDS_Face
        """
        return _ShapeFix.ShapeFix_FixSmallFace_FixFace(self, *args)


    def FixPinFace(self, *args) -> "Standard_Boolean":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_FixSmallFace_FixPinFace(self, *args)


    def FixShape(self, *args) -> "TopoDS_Shape":
        """:rtype: TopoDS_Shape"""
        return _ShapeFix.ShapeFix_FixSmallFace_FixShape(self, *args)


    def FixSplitFace(self, *args) -> "TopoDS_Shape":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_FixSmallFace_FixSplitFace(self, *args)


    def FixSpotFace(self, *args) -> "TopoDS_Shape":
        """
        * Fixing case of spot face, if tol = -1 used local tolerance.
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_FixSmallFace_FixSpotFace(self, *args)


    def FixStripFace(self, *args) -> "TopoDS_Shape":
        """
        * Fixing case of strip face, if tol = -1 used local tolerance
        	:param wasdone: default value is Standard_False
        	:type wasdone: bool
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_FixSmallFace_FixStripFace(self, *args)


    def Init(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_FixSmallFace_Init(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Fixing case of spot face
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_FixSmallFace_Perform(self, *args)


    def RemoveFacesInCaseOfSpot(self, *args) -> "Standard_Boolean":
        """
        * Remove spot face from compound
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_FixSmallFace_RemoveFacesInCaseOfSpot(self, *args)


    def RemoveFacesInCaseOfStrip(self, *args) -> "Standard_Boolean":
        """
        * Remove strip face from compound.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_FixSmallFace_RemoveFacesInCaseOfStrip(self, *args)


    def ReplaceInCaseOfStrip(self, *args) -> "Standard_Boolean":
        """
        * Replace veretces and edges.
        	:param F:
        	:type F: TopoDS_Face
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:param tol:
        	:type tol: float
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_FixSmallFace_ReplaceInCaseOfStrip(self, *args)


    def ReplaceVerticesInCaseOfSpot(self, *args) -> "Standard_Boolean":
        """
        * Compute average vertex and replacing vertices by new one.
        	:param F:
        	:type F: TopoDS_Face
        	:param tol:
        	:type tol: float
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_FixSmallFace_ReplaceVerticesInCaseOfSpot(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """:rtype: TopoDS_Shape"""
        return _ShapeFix.ShapeFix_FixSmallFace_Shape(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _ShapeFix.ShapeFix_FixSmallFace_swiginit(self, _ShapeFix.new_ShapeFix_FixSmallFace(*args))

    def SplitOneFace(self, *args) -> "Standard_Boolean":
        """
        * Compute data for face splitting.
        	:param F:
        	:type F: TopoDS_Face
        	:param theSplittedFaces:
        	:type theSplittedFaces: TopoDS_Compound
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_FixSmallFace_SplitOneFace(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_FixSmallFace_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_FixSmallFace
ShapeFix_FixSmallFace.ComputeSharedEdgeForStripFace = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_ComputeSharedEdgeForStripFace, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.FixFace = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_FixFace, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.FixPinFace = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_FixPinFace, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.FixShape = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_FixShape, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.FixSplitFace = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_FixSplitFace, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.FixSpotFace = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_FixSpotFace, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.FixStripFace = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_FixStripFace, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.Init = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_Init, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.Perform = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_Perform, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.RemoveFacesInCaseOfSpot = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_RemoveFacesInCaseOfSpot, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.RemoveFacesInCaseOfStrip = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_RemoveFacesInCaseOfStrip, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.ReplaceInCaseOfStrip = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_ReplaceInCaseOfStrip, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.ReplaceVerticesInCaseOfSpot = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_ReplaceVerticesInCaseOfSpot, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.Shape = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_Shape, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace.SplitOneFace = new_instancemethod(_ShapeFix.ShapeFix_FixSmallFace_SplitOneFace, None, ShapeFix_FixSmallFace)
ShapeFix_FixSmallFace_swigregister = _ShapeFix.ShapeFix_FixSmallFace_swigregister
ShapeFix_FixSmallFace_swigregister(ShapeFix_FixSmallFace)

class ShapeFix_FixSmallSolid(ShapeFix_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Merge(self, *args) -> "TopoDS_Shape":
        """
        * Merge small solids in the given shape to adjacent non-small ones
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theContext:
        	:type theContext: ShapeBuild_ReShape
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_FixSmallSolid_Merge(self, *args)


    def Remove(self, *args) -> "TopoDS_Shape":
        """
        * Remove small solids from the given shape
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theContext:
        	:type theContext: ShapeBuild_ReShape
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_FixSmallSolid_Remove(self, *args)


    def SetFixMode(self, *args) -> "void":
        """
        * Set working mode for operator: - theMode = 0 use both WidthFactorThreshold and VolumeThreshold parameters - theMode = 1 use only WidthFactorThreshold parameter - theMode = 2 use only VolumeThreshold parameter
        	:param theMode:
        	:type theMode: int
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_FixSmallSolid_SetFixMode(self, *args)


    def SetVolumeThreshold(self, *args) -> "void":
        """
        * Set or clear volume threshold for small solids
        	:param theThreshold: default value is -1.0
        	:type theThreshold: float
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_FixSmallSolid_SetVolumeThreshold(self, *args)


    def SetWidthFactorThreshold(self, *args) -> "void":
        """
        * Set or clear width factor threshold for small solids
        	:param theThreshold: default value is -1.0
        	:type theThreshold: float
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_FixSmallSolid_SetWidthFactorThreshold(self, *args)


    def __init__(self, *args):
        """
        * Construct
        	:rtype: None
        """
        _ShapeFix.ShapeFix_FixSmallSolid_swiginit(self, _ShapeFix.new_ShapeFix_FixSmallSolid(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_FixSmallSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_FixSmallSolid
ShapeFix_FixSmallSolid.Merge = new_instancemethod(_ShapeFix.ShapeFix_FixSmallSolid_Merge, None, ShapeFix_FixSmallSolid)
ShapeFix_FixSmallSolid.Remove = new_instancemethod(_ShapeFix.ShapeFix_FixSmallSolid_Remove, None, ShapeFix_FixSmallSolid)
ShapeFix_FixSmallSolid.SetFixMode = new_instancemethod(_ShapeFix.ShapeFix_FixSmallSolid_SetFixMode, None, ShapeFix_FixSmallSolid)
ShapeFix_FixSmallSolid.SetVolumeThreshold = new_instancemethod(_ShapeFix.ShapeFix_FixSmallSolid_SetVolumeThreshold, None, ShapeFix_FixSmallSolid)
ShapeFix_FixSmallSolid.SetWidthFactorThreshold = new_instancemethod(_ShapeFix.ShapeFix_FixSmallSolid_SetWidthFactorThreshold, None, ShapeFix_FixSmallSolid)
ShapeFix_FixSmallSolid_swigregister = _ShapeFix.ShapeFix_FixSmallSolid_swigregister
ShapeFix_FixSmallSolid_swigregister(ShapeFix_FixSmallSolid)

class ShapeFix_Shape(ShapeFix_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FixEdgeTool(self, *args) -> "opencascade::handle< ShapeFix_Edge >":
        """
        * Returns tool for fixing edges.
        	:rtype: opencascade::handle<ShapeFix_Edge>
        """
        return _ShapeFix.ShapeFix_Shape_FixEdgeTool(self, *args)


    def FixFaceTool(self, *args) -> "opencascade::handle< ShapeFix_Face >":
        """
        * Returns tool for fixing faces.
        	:rtype: opencascade::handle<ShapeFix_Face>
        """
        return _ShapeFix.ShapeFix_Shape_FixFaceTool(self, *args)


    def GetFixFreeFaceMode(self) -> "Standard_Integer":
        """GetFixFreeFaceMode(ShapeFix_Shape self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Shape_GetFixFreeFaceMode(self)


    def SetFixFreeFaceMode(self, value: 'Standard_Integer') -> "void":
        """SetFixFreeFaceMode(ShapeFix_Shape self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Shape_SetFixFreeFaceMode(self, value)


    def GetFixFreeShellMode(self) -> "Standard_Integer":
        """GetFixFreeShellMode(ShapeFix_Shape self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Shape_GetFixFreeShellMode(self)


    def SetFixFreeShellMode(self, value: 'Standard_Integer') -> "void":
        """SetFixFreeShellMode(ShapeFix_Shape self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Shape_SetFixFreeShellMode(self, value)


    def GetFixFreeWireMode(self) -> "Standard_Integer":
        """GetFixFreeWireMode(ShapeFix_Shape self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Shape_GetFixFreeWireMode(self)


    def SetFixFreeWireMode(self, value: 'Standard_Integer') -> "void":
        """SetFixFreeWireMode(ShapeFix_Shape self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Shape_SetFixFreeWireMode(self, value)


    def GetFixSameParameterMode(self) -> "Standard_Integer":
        """GetFixSameParameterMode(ShapeFix_Shape self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Shape_GetFixSameParameterMode(self)


    def SetFixSameParameterMode(self, value: 'Standard_Integer') -> "void":
        """SetFixSameParameterMode(ShapeFix_Shape self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Shape_SetFixSameParameterMode(self, value)


    def FixShellTool(self, *args) -> "opencascade::handle< ShapeFix_Shell >":
        """
        * Returns tool for fixing shells.
        	:rtype: opencascade::handle<ShapeFix_Shell>
        """
        return _ShapeFix.ShapeFix_Shape_FixShellTool(self, *args)


    def GetFixSolidMode(self) -> "Standard_Integer":
        """GetFixSolidMode(ShapeFix_Shape self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Shape_GetFixSolidMode(self)


    def SetFixSolidMode(self, value: 'Standard_Integer') -> "void":
        """SetFixSolidMode(ShapeFix_Shape self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Shape_SetFixSolidMode(self, value)


    def FixSolidTool(self, *args) -> "opencascade::handle< ShapeFix_Solid >":
        """
        * Returns tool for fixing solids.
        	:rtype: opencascade::handle<ShapeFix_Solid>
        """
        return _ShapeFix.ShapeFix_Shape_FixSolidTool(self, *args)


    def GetFixVertexPositionMode(self) -> "Standard_Integer":
        """GetFixVertexPositionMode(ShapeFix_Shape self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Shape_GetFixVertexPositionMode(self)


    def SetFixVertexPositionMode(self, value: 'Standard_Integer') -> "void":
        """SetFixVertexPositionMode(ShapeFix_Shape self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Shape_SetFixVertexPositionMode(self, value)


    def GetFixVertexTolMode(self) -> "Standard_Integer":
        """GetFixVertexTolMode(ShapeFix_Shape self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Shape_GetFixVertexTolMode(self)


    def SetFixVertexTolMode(self, value: 'Standard_Integer') -> "void":
        """SetFixVertexTolMode(ShapeFix_Shape self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Shape_SetFixVertexTolMode(self, value)


    def FixWireTool(self, *args) -> "opencascade::handle< ShapeFix_Wire >":
        """
        * Returns tool for fixing wires.
        	:rtype: opencascade::handle<ShapeFix_Wire>
        """
        return _ShapeFix.ShapeFix_Shape_FixWireTool(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initislises by shape.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Shape_Init(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        * Iterates on sub- shape and performs fixes
        	:param theProgress: default value is 0
        	:type theProgress: Message_ProgressIndicator
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Shape_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * Returns resulting shape
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_Shape_Shape(self, *args)


    def __init__(self, *args):
        """
        * Empty Constructor
        	:rtype: None
        * Initislises by shape.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: None
        """
        _ShapeFix.ShapeFix_Shape_swiginit(self, _ShapeFix.new_ShapeFix_Shape(*args))

    def Status(self, *args) -> "Standard_Boolean":
        """
        * Returns the status of the last Fix. This can be a combination of the following flags: ShapeExtend_DONE1: some free edges were fixed ShapeExtend_DONE2: some free wires were fixed ShapeExtend_DONE3: some free faces were fixed ShapeExtend_DONE4: some free shells were fixed ShapeExtend_DONE5: some free solids were fixed ShapeExtend_DONE6: shapes in compound(s) were fixed
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Shape_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_Shape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_Shape
ShapeFix_Shape.FixEdgeTool = new_instancemethod(_ShapeFix.ShapeFix_Shape_FixEdgeTool, None, ShapeFix_Shape)
ShapeFix_Shape.FixFaceTool = new_instancemethod(_ShapeFix.ShapeFix_Shape_FixFaceTool, None, ShapeFix_Shape)
ShapeFix_Shape.GetFixFreeFaceMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_GetFixFreeFaceMode, None, ShapeFix_Shape)
ShapeFix_Shape.SetFixFreeFaceMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_SetFixFreeFaceMode, None, ShapeFix_Shape)
ShapeFix_Shape.GetFixFreeShellMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_GetFixFreeShellMode, None, ShapeFix_Shape)
ShapeFix_Shape.SetFixFreeShellMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_SetFixFreeShellMode, None, ShapeFix_Shape)
ShapeFix_Shape.GetFixFreeWireMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_GetFixFreeWireMode, None, ShapeFix_Shape)
ShapeFix_Shape.SetFixFreeWireMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_SetFixFreeWireMode, None, ShapeFix_Shape)
ShapeFix_Shape.GetFixSameParameterMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_GetFixSameParameterMode, None, ShapeFix_Shape)
ShapeFix_Shape.SetFixSameParameterMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_SetFixSameParameterMode, None, ShapeFix_Shape)
ShapeFix_Shape.FixShellTool = new_instancemethod(_ShapeFix.ShapeFix_Shape_FixShellTool, None, ShapeFix_Shape)
ShapeFix_Shape.GetFixSolidMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_GetFixSolidMode, None, ShapeFix_Shape)
ShapeFix_Shape.SetFixSolidMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_SetFixSolidMode, None, ShapeFix_Shape)
ShapeFix_Shape.FixSolidTool = new_instancemethod(_ShapeFix.ShapeFix_Shape_FixSolidTool, None, ShapeFix_Shape)
ShapeFix_Shape.GetFixVertexPositionMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_GetFixVertexPositionMode, None, ShapeFix_Shape)
ShapeFix_Shape.SetFixVertexPositionMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_SetFixVertexPositionMode, None, ShapeFix_Shape)
ShapeFix_Shape.GetFixVertexTolMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_GetFixVertexTolMode, None, ShapeFix_Shape)
ShapeFix_Shape.SetFixVertexTolMode = new_instancemethod(_ShapeFix.ShapeFix_Shape_SetFixVertexTolMode, None, ShapeFix_Shape)
ShapeFix_Shape.FixWireTool = new_instancemethod(_ShapeFix.ShapeFix_Shape_FixWireTool, None, ShapeFix_Shape)
ShapeFix_Shape.Init = new_instancemethod(_ShapeFix.ShapeFix_Shape_Init, None, ShapeFix_Shape)
ShapeFix_Shape.Perform = new_instancemethod(_ShapeFix.ShapeFix_Shape_Perform, None, ShapeFix_Shape)
ShapeFix_Shape.Shape = new_instancemethod(_ShapeFix.ShapeFix_Shape_Shape, None, ShapeFix_Shape)
ShapeFix_Shape.Status = new_instancemethod(_ShapeFix.ShapeFix_Shape_Status, None, ShapeFix_Shape)
ShapeFix_Shape_swigregister = _ShapeFix.ShapeFix_Shape_swigregister
ShapeFix_Shape_swigregister(ShapeFix_Shape)

class ShapeFix_Shell(ShapeFix_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ErrorFaces(self, *args) -> "TopoDS_Compound":
        """
        * Returns not oriented subset of faces.
        	:rtype: TopoDS_Compound
        """
        return _ShapeFix.ShapeFix_Shell_ErrorFaces(self, *args)


    def GetFixFaceMode(self) -> "Standard_Integer":
        """GetFixFaceMode(ShapeFix_Shell self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Shell_GetFixFaceMode(self)


    def SetFixFaceMode(self, value: 'Standard_Integer') -> "void":
        """SetFixFaceMode(ShapeFix_Shell self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Shell_SetFixFaceMode(self, value)


    def FixFaceOrientation(self, *args) -> "Standard_Boolean":
        """
        * Fixes orientation of faces in shell. Changes orientation of face in the shell, if it is oriented opposite to neigbouring faces. If it is not possible to orient all faces in the shell (like in case of mebious band), this method orients only subset of faces. Other faces are stored in Error compound. Modes : isAccountMultiConex - mode for account cases of multiconnexity. If this mode is equal to Standard_True, separate shells will be created in the cases of multiconnexity. If this mode is equal to Standard_False, one shell will be created without account of multiconnexity.By defautt - Standard_True; NonManifold - mode for creation of non-manifold shells. If this mode is equal to Standard_True one non-manifold will be created from shell contains multishared edges. Else if this mode is equal to Standard_False only manifold shells will be created. By default - Standard_False.
        	:param shell:
        	:type shell: TopoDS_Shell
        	:param isAccountMultiConex: default value is Standard_True
        	:type isAccountMultiConex: bool
        	:param NonManifold: default value is Standard_False
        	:type NonManifold: bool
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Shell_FixFaceOrientation(self, *args)


    def FixFaceTool(self, *args) -> "opencascade::handle< ShapeFix_Face >":
        """
        * Returns tool for fixing faces.
        	:rtype: opencascade::handle<ShapeFix_Face>
        """
        return _ShapeFix.ShapeFix_Shell_FixFaceTool(self, *args)


    def GetFixOrientationMode(self) -> "Standard_Integer":
        """GetFixOrientationMode(ShapeFix_Shell self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Shell_GetFixOrientationMode(self)


    def SetFixOrientationMode(self, value: 'Standard_Integer') -> "void":
        """SetFixOrientationMode(ShapeFix_Shell self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Shell_SetFixOrientationMode(self, value)


    def Init(self, *args) -> "void":
        """
        * Initializes by shell.
        	:param shell:
        	:type shell: TopoDS_Shell
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Shell_Init(self, *args)


    def NbShells(self, *args) -> "Standard_Integer":
        """
        * Returns Number of obtainrd shells;
        	:rtype: int
        """
        return _ShapeFix.ShapeFix_Shell_NbShells(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        * Iterates on subshapes and performs fixes (for each face calls ShapeFix_Face::Perform and then calls FixFaceOrientation). The passed progress indicator allows user to consult the current progress stage and abort algorithm if needed.
        	:param theProgress: default value is 0
        	:type theProgress: Message_ProgressIndicator
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Shell_Perform(self, *args)


    def SetNonManifoldFlag(self, *args) -> "void":
        """
        * Sets NonManifold flag
        	:param isNonManifold:
        	:type isNonManifold: bool
        	:rtype: void
        """
        return _ShapeFix.ShapeFix_Shell_SetNonManifoldFlag(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * In case of multiconnexity returns compound of fixed shells else returns one shell..
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_Shell_Shape(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Initializes by shell.
        	:param shape:
        	:type shape: TopoDS_Shell
        	:rtype: None
        """
        _ShapeFix.ShapeFix_Shell_swiginit(self, _ShapeFix.new_ShapeFix_Shell(*args))

    def Shell(self, *args) -> "TopoDS_Shell":
        """
        * Returns fixed shell (or subset of oriented faces).
        	:rtype: TopoDS_Shell
        """
        return _ShapeFix.ShapeFix_Shell_Shell(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        * Returns the status of the last Fix.
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Shell_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_Shell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_Shell
ShapeFix_Shell.ErrorFaces = new_instancemethod(_ShapeFix.ShapeFix_Shell_ErrorFaces, None, ShapeFix_Shell)
ShapeFix_Shell.GetFixFaceMode = new_instancemethod(_ShapeFix.ShapeFix_Shell_GetFixFaceMode, None, ShapeFix_Shell)
ShapeFix_Shell.SetFixFaceMode = new_instancemethod(_ShapeFix.ShapeFix_Shell_SetFixFaceMode, None, ShapeFix_Shell)
ShapeFix_Shell.FixFaceOrientation = new_instancemethod(_ShapeFix.ShapeFix_Shell_FixFaceOrientation, None, ShapeFix_Shell)
ShapeFix_Shell.FixFaceTool = new_instancemethod(_ShapeFix.ShapeFix_Shell_FixFaceTool, None, ShapeFix_Shell)
ShapeFix_Shell.GetFixOrientationMode = new_instancemethod(_ShapeFix.ShapeFix_Shell_GetFixOrientationMode, None, ShapeFix_Shell)
ShapeFix_Shell.SetFixOrientationMode = new_instancemethod(_ShapeFix.ShapeFix_Shell_SetFixOrientationMode, None, ShapeFix_Shell)
ShapeFix_Shell.Init = new_instancemethod(_ShapeFix.ShapeFix_Shell_Init, None, ShapeFix_Shell)
ShapeFix_Shell.NbShells = new_instancemethod(_ShapeFix.ShapeFix_Shell_NbShells, None, ShapeFix_Shell)
ShapeFix_Shell.Perform = new_instancemethod(_ShapeFix.ShapeFix_Shell_Perform, None, ShapeFix_Shell)
ShapeFix_Shell.SetNonManifoldFlag = new_instancemethod(_ShapeFix.ShapeFix_Shell_SetNonManifoldFlag, None, ShapeFix_Shell)
ShapeFix_Shell.Shape = new_instancemethod(_ShapeFix.ShapeFix_Shell_Shape, None, ShapeFix_Shell)
ShapeFix_Shell.Shell = new_instancemethod(_ShapeFix.ShapeFix_Shell_Shell, None, ShapeFix_Shell)
ShapeFix_Shell.Status = new_instancemethod(_ShapeFix.ShapeFix_Shell_Status, None, ShapeFix_Shell)
ShapeFix_Shell_swigregister = _ShapeFix.ShapeFix_Shell_swigregister
ShapeFix_Shell_swigregister(ShapeFix_Shell)

class ShapeFix_Solid(ShapeFix_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetCreateOpenSolidMode(self) -> "Standard_Boolean":
        """GetCreateOpenSolidMode(ShapeFix_Solid self) -> Standard_Boolean"""
        return _ShapeFix.ShapeFix_Solid_GetCreateOpenSolidMode(self)


    def SetCreateOpenSolidMode(self, value: 'Standard_Boolean') -> "void":
        """SetCreateOpenSolidMode(ShapeFix_Solid self, Standard_Boolean value)"""
        return _ShapeFix.ShapeFix_Solid_SetCreateOpenSolidMode(self, value)


    def GetFixShellMode(self) -> "Standard_Integer":
        """GetFixShellMode(ShapeFix_Solid self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Solid_GetFixShellMode(self)


    def SetFixShellMode(self, value: 'Standard_Integer') -> "void":
        """SetFixShellMode(ShapeFix_Solid self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Solid_SetFixShellMode(self, value)


    def GetFixShellOrientationMode(self) -> "Standard_Integer":
        """GetFixShellOrientationMode(ShapeFix_Solid self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Solid_GetFixShellOrientationMode(self)


    def SetFixShellOrientationMode(self, value: 'Standard_Integer') -> "void":
        """SetFixShellOrientationMode(ShapeFix_Solid self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Solid_SetFixShellOrientationMode(self, value)


    def FixShellTool(self, *args) -> "opencascade::handle< ShapeFix_Shell >":
        """
        * Returns tool for fixing shells.
        	:rtype: opencascade::handle<ShapeFix_Shell>
        """
        return _ShapeFix.ShapeFix_Solid_FixShellTool(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes by solid .
        	:param solid:
        	:type solid: TopoDS_Solid
        	:rtype: void
        """
        return _ShapeFix.ShapeFix_Solid_Init(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        * Iterates on shells and performs fixes (calls ShapeFix_Shell for each subshell). The passed progress indicator allows user to consult the current progress stage and abort algorithm if needed.
        	:param theProgress: default value is 0
        	:type theProgress: Message_ProgressIndicator
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Solid_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * In case of multiconnexity returns compound of fixed solids else returns one solid.
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_Solid_Shape(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor;
        	:rtype: None
        * Initializes by solid.
        	:param solid:
        	:type solid: TopoDS_Solid
        	:rtype: None
        """
        _ShapeFix.ShapeFix_Solid_swiginit(self, _ShapeFix.new_ShapeFix_Solid(*args))

    def Solid(self, *args) -> "TopoDS_Shape":
        """
        * Returns resulting solid.
        	:rtype: TopoDS_Shape
        """
        return _ShapeFix.ShapeFix_Solid_Solid(self, *args)


    def SolidFromShell(self, *args) -> "TopoDS_Solid":
        """
        * Calls MakeSolid and orients the solid to be 'not infinite'
        	:param shell:
        	:type shell: TopoDS_Shell
        	:rtype: TopoDS_Solid
        """
        return _ShapeFix.ShapeFix_Solid_SolidFromShell(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        * Returns the status of the last Fix.
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Solid_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_Solid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_Solid
ShapeFix_Solid.GetCreateOpenSolidMode = new_instancemethod(_ShapeFix.ShapeFix_Solid_GetCreateOpenSolidMode, None, ShapeFix_Solid)
ShapeFix_Solid.SetCreateOpenSolidMode = new_instancemethod(_ShapeFix.ShapeFix_Solid_SetCreateOpenSolidMode, None, ShapeFix_Solid)
ShapeFix_Solid.GetFixShellMode = new_instancemethod(_ShapeFix.ShapeFix_Solid_GetFixShellMode, None, ShapeFix_Solid)
ShapeFix_Solid.SetFixShellMode = new_instancemethod(_ShapeFix.ShapeFix_Solid_SetFixShellMode, None, ShapeFix_Solid)
ShapeFix_Solid.GetFixShellOrientationMode = new_instancemethod(_ShapeFix.ShapeFix_Solid_GetFixShellOrientationMode, None, ShapeFix_Solid)
ShapeFix_Solid.SetFixShellOrientationMode = new_instancemethod(_ShapeFix.ShapeFix_Solid_SetFixShellOrientationMode, None, ShapeFix_Solid)
ShapeFix_Solid.FixShellTool = new_instancemethod(_ShapeFix.ShapeFix_Solid_FixShellTool, None, ShapeFix_Solid)
ShapeFix_Solid.Init = new_instancemethod(_ShapeFix.ShapeFix_Solid_Init, None, ShapeFix_Solid)
ShapeFix_Solid.Perform = new_instancemethod(_ShapeFix.ShapeFix_Solid_Perform, None, ShapeFix_Solid)
ShapeFix_Solid.Shape = new_instancemethod(_ShapeFix.ShapeFix_Solid_Shape, None, ShapeFix_Solid)
ShapeFix_Solid.Solid = new_instancemethod(_ShapeFix.ShapeFix_Solid_Solid, None, ShapeFix_Solid)
ShapeFix_Solid.SolidFromShell = new_instancemethod(_ShapeFix.ShapeFix_Solid_SolidFromShell, None, ShapeFix_Solid)
ShapeFix_Solid.Status = new_instancemethod(_ShapeFix.ShapeFix_Solid_Status, None, ShapeFix_Solid)
ShapeFix_Solid_swigregister = _ShapeFix.ShapeFix_Solid_swigregister
ShapeFix_Solid_swigregister(ShapeFix_Solid)

class ShapeFix_SplitCommonVertex(ShapeFix_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_SplitCommonVertex_Init(self, *args)


    def Perform(self, *args) -> "void":
        """:rtype: None"""
        return _ShapeFix.ShapeFix_SplitCommonVertex_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """:rtype: TopoDS_Shape"""
        return _ShapeFix.ShapeFix_SplitCommonVertex_Shape(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _ShapeFix.ShapeFix_SplitCommonVertex_swiginit(self, _ShapeFix.new_ShapeFix_SplitCommonVertex(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_SplitCommonVertex_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_SplitCommonVertex
ShapeFix_SplitCommonVertex.Init = new_instancemethod(_ShapeFix.ShapeFix_SplitCommonVertex_Init, None, ShapeFix_SplitCommonVertex)
ShapeFix_SplitCommonVertex.Perform = new_instancemethod(_ShapeFix.ShapeFix_SplitCommonVertex_Perform, None, ShapeFix_SplitCommonVertex)
ShapeFix_SplitCommonVertex.Shape = new_instancemethod(_ShapeFix.ShapeFix_SplitCommonVertex_Shape, None, ShapeFix_SplitCommonVertex)
ShapeFix_SplitCommonVertex_swigregister = _ShapeFix.ShapeFix_SplitCommonVertex_swigregister
ShapeFix_SplitCommonVertex_swigregister(ShapeFix_SplitCommonVertex)

class ShapeFix_Wire(ShapeFix_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Analyzer(self, *args) -> "opencascade::handle< ShapeAnalysis_Wire >":
        """
        * returns field Analyzer (working tool)
        	:rtype: opencascade::handle<ShapeAnalysis_Wire>
        """
        return _ShapeFix.ShapeFix_Wire_Analyzer(self, *args)


    def ClearModes(self, *args) -> "void":
        """
        * Sets all modes to default
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Wire_ClearModes(self, *args)


    def ClearStatuses(self, *args) -> "void":
        """
        * Clears all statuses
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Wire_ClearStatuses(self, *args)


    def GetClosedWireMode(self) -> "Standard_Boolean":
        """GetClosedWireMode(ShapeFix_Wire self) -> Standard_Boolean"""
        return _ShapeFix.ShapeFix_Wire_GetClosedWireMode(self)


    def SetClosedWireMode(self, value: 'Standard_Boolean') -> "void":
        """SetClosedWireMode(ShapeFix_Wire self, Standard_Boolean value)"""
        return _ShapeFix.ShapeFix_Wire_SetClosedWireMode(self, value)


    def Face(self, *args) -> "TopoDS_Face const":
        """
        * returns working face (Analyzer.Face())
        	:rtype: TopoDS_Face
        """
        return _ShapeFix.ShapeFix_Wire_Face(self, *args)


    def GetFixAddCurve3dMode(self) -> "Standard_Integer":
        """GetFixAddCurve3dMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixAddCurve3dMode(self)


    def SetFixAddCurve3dMode(self, value: 'Standard_Integer') -> "void":
        """SetFixAddCurve3dMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixAddCurve3dMode(self, value)


    def GetFixAddPCurveMode(self) -> "Standard_Integer":
        """GetFixAddPCurveMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixAddPCurveMode(self)


    def SetFixAddPCurveMode(self, value: 'Standard_Integer') -> "void":
        """SetFixAddPCurveMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixAddPCurveMode(self, value)


    def FixClosed(self, *args) -> "Standard_Boolean":
        """
        * Fixes a wire to be well closed It performs FixConnected, FixDegenerated and FixLacking between last and first edges (independingly on flag ClosedMode and modes for these fixings) If <prec> is -1 then MaxTolerance() is taken.
        	:param prec: default value is -1.0
        	:type prec: float
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixClosed(self, *args)


    def FixConnected(self, *args) -> "Standard_Boolean":
        """
        * Applies FixConnected(num) to all edges in the wire Connection between first and last edges is treated only if flag ClosedMode is True If <prec> is -1 then MaxTolerance() is taken.
        	:param prec: default value is -1.0
        	:type prec: float
        	:rtype: bool
        * Fixes connected edges (preceeding and current) Forces Vertices (end of preceeding-begin of current) to be the same one Tests with starting preci or, if given greater, <prec> If <prec> is -1 then MaxTolerance() is taken.
        	:param num:
        	:type num: int
        	:param prec:
        	:type prec: float
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixConnected(self, *args)


    def GetFixConnectedMode(self) -> "Standard_Integer":
        """GetFixConnectedMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixConnectedMode(self)


    def SetFixConnectedMode(self, value: 'Standard_Integer') -> "void":
        """SetFixConnectedMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixConnectedMode(self, value)


    def FixDegenerated(self, *args) -> "Standard_Boolean":
        """
        * Applies FixDegenerated(num) to all edges in the wire Connection between first and last edges is treated only if flag ClosedMode is True
        	:rtype: bool
        * Fixes Degenerated Edge Checks an <num-th> edge or a point between <num>th-1 and <num>th edges for a singularity on a supporting surface. If singularity is detected, either adds new degenerated edge (before <num>th), or makes <num>th edge to be degenerated.
        	:param num:
        	:type num: int
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixDegenerated(self, *args)


    def GetFixDegeneratedMode(self) -> "Standard_Integer":
        """GetFixDegeneratedMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixDegeneratedMode(self)


    def SetFixDegeneratedMode(self, value: 'Standard_Integer') -> "void":
        """SetFixDegeneratedMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixDegeneratedMode(self, value)


    def FixEdgeCurves(self, *args) -> "Standard_Boolean":
        """
        * Groups the fixes dealing with 3d and pcurves of the edges. The order of the fixes and the default behaviour are: ShapeFix_Edge::FixReversed2d ShapeFix_Edge::FixRemovePCurve (only if forced) ShapeFix_Edge::FixAddPCurve ShapeFix_Edge::FixRemoveCurve3d (only if forced) ShapeFix_Edge::FixAddCurve3d FixSeam, FixShifted, ShapeFix_Edge::FixSameParameter
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixEdgeCurves(self, *args)


    def GetFixEdgeCurvesMode(self) -> "Standard_Integer":
        """GetFixEdgeCurvesMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixEdgeCurvesMode(self)


    def SetFixEdgeCurvesMode(self, value: 'Standard_Integer') -> "void":
        """SetFixEdgeCurvesMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixEdgeCurvesMode(self, value)


    def FixEdgeTool(self, *args) -> "opencascade::handle< ShapeFix_Edge >":
        """
        * Returns tool for fixing wires.
        	:rtype: opencascade::handle<ShapeFix_Edge>
        """
        return _ShapeFix.ShapeFix_Wire_FixEdgeTool(self, *args)


    def FixGap2d(self, *args) -> "Standard_Boolean":
        """
        * Fixes gap between ends of pcurves on num-1 and num-th edges. myPrecision is used to detect the gap. If convert is True, converts pcurves to bsplines to bend.
        	:param num:
        	:type num: int
        	:param convert: default value is Standard_False
        	:type convert: bool
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixGap2d(self, *args)


    def FixGap3d(self, *args) -> "Standard_Boolean":
        """
        * Fixes gap between ends of 3d curves on num-1 and num-th edges. myPrecision is used to detect the gap. If convert is True, converts curves to bsplines to bend.
        	:param num:
        	:type num: int
        	:param convert: default value is Standard_False
        	:type convert: bool
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixGap3d(self, *args)


    def FixGaps2d(self, *args) -> "Standard_Boolean":
        """
        * Fixes gaps between ends of pcurves on adjacent edges myPrecision is used to detect the gaps.
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixGaps2d(self, *args)


    def GetFixGaps2dMode(self) -> "Standard_Integer":
        """GetFixGaps2dMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixGaps2dMode(self)


    def SetFixGaps2dMode(self, value: 'Standard_Integer') -> "void":
        """SetFixGaps2dMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixGaps2dMode(self, value)


    def FixGaps3d(self, *args) -> "Standard_Boolean":
        """
        * Fixes gaps between ends of 3d curves on adjacent edges myPrecision is used to detect the gaps.
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixGaps3d(self, *args)


    def GetFixGaps3dMode(self) -> "Standard_Integer":
        """GetFixGaps3dMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixGaps3dMode(self)


    def SetFixGaps3dMode(self, value: 'Standard_Integer') -> "void":
        """SetFixGaps3dMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixGaps3dMode(self, value)


    def GetFixGapsByRangesMode(self) -> "Standard_Boolean":
        """GetFixGapsByRangesMode(ShapeFix_Wire self) -> Standard_Boolean"""
        return _ShapeFix.ShapeFix_Wire_GetFixGapsByRangesMode(self)


    def SetFixGapsByRangesMode(self, value: 'Standard_Boolean') -> "void":
        """SetFixGapsByRangesMode(ShapeFix_Wire self, Standard_Boolean value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixGapsByRangesMode(self, value)


    def GetFixIntersectingEdgesMode(self) -> "Standard_Integer":
        """GetFixIntersectingEdgesMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixIntersectingEdgesMode(self)


    def SetFixIntersectingEdgesMode(self, value: 'Standard_Integer') -> "void":
        """SetFixIntersectingEdgesMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixIntersectingEdgesMode(self, value)


    def FixLacking(self, *args) -> "Standard_Boolean":
        """
        * Applies FixLacking(num) to all edges in the wire Connection between first and last edges is treated only if flag ClosedMode is True If <force> is False (default), test for connectness is done with precision of vertex between edges, else it is done with minimal value of vertex tolerance and Analyzer.Precision(). Hence, <force> will lead to inserting lacking edges in replacement of vertices which have big tolerances.
        	:param force: default value is Standard_False
        	:type force: bool
        	:rtype: bool
        * Fixes Lacking Edge Test if two adjucent edges are disconnected in 2d (while connected in 3d), and in that case either increase tolerance of the vertex or add a new edge (straight in 2d space), in order to close wire in 2d. Returns True if edge was added or tolerance was increased.
        	:param num:
        	:type num: int
        	:param force: default value is Standard_False
        	:type force: bool
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixLacking(self, *args)


    def GetFixLackingMode(self) -> "Standard_Integer":
        """GetFixLackingMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixLackingMode(self)


    def SetFixLackingMode(self, value: 'Standard_Integer') -> "void":
        """SetFixLackingMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixLackingMode(self, value)


    def GetFixNonAdjacentIntersectingEdgesMode(self) -> "Standard_Integer":
        """GetFixNonAdjacentIntersectingEdgesMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixNonAdjacentIntersectingEdgesMode(self)


    def SetFixNonAdjacentIntersectingEdgesMode(self, value: 'Standard_Integer') -> "void":
        """SetFixNonAdjacentIntersectingEdgesMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixNonAdjacentIntersectingEdgesMode(self, value)


    def FixNotchedEdges(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ShapeFix.ShapeFix_Wire_FixNotchedEdges(self, *args)


    def GetFixNotchedEdgesMode(self) -> "Standard_Integer":
        """GetFixNotchedEdgesMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixNotchedEdgesMode(self)


    def SetFixNotchedEdgesMode(self, value: 'Standard_Integer') -> "void":
        """SetFixNotchedEdgesMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixNotchedEdgesMode(self, value)


    def GetFixRemoveCurve3dMode(self) -> "Standard_Integer":
        """GetFixRemoveCurve3dMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixRemoveCurve3dMode(self)


    def SetFixRemoveCurve3dMode(self, value: 'Standard_Integer') -> "void":
        """SetFixRemoveCurve3dMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixRemoveCurve3dMode(self, value)


    def GetFixRemovePCurveMode(self) -> "Standard_Integer":
        """GetFixRemovePCurveMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixRemovePCurveMode(self)


    def SetFixRemovePCurveMode(self, value: 'Standard_Integer') -> "void":
        """SetFixRemovePCurveMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixRemovePCurveMode(self, value)


    def FixReorder(self, *args) -> "Standard_Boolean":
        """
        * Performs an analysis and reorders edges in the wire using class WireOrder
        	:rtype: bool
        * Reorder edges in the wire as determined by WireOrder that should be filled and computed before
        	:param wi:
        	:type wi: ShapeAnalysis_WireOrder
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixReorder(self, *args)


    def GetFixReorderMode(self) -> "Standard_Integer":
        """GetFixReorderMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixReorderMode(self)


    def SetFixReorderMode(self, value: 'Standard_Integer') -> "void":
        """SetFixReorderMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixReorderMode(self, value)


    def GetFixReversed2dMode(self) -> "Standard_Integer":
        """GetFixReversed2dMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixReversed2dMode(self)


    def SetFixReversed2dMode(self, value: 'Standard_Integer') -> "void":
        """SetFixReversed2dMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixReversed2dMode(self, value)


    def GetFixSameParameterMode(self) -> "Standard_Integer":
        """GetFixSameParameterMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixSameParameterMode(self)


    def SetFixSameParameterMode(self, value: 'Standard_Integer') -> "void":
        """SetFixSameParameterMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixSameParameterMode(self, value)


    def FixSeam(self, *args) -> "Standard_Boolean":
        """
        * Fixes a seam edge A Seam edge has two pcurves, one for forward. one for reversed The forward pcurve must be set as first //! NOTE that correct order of pcurves in the seam edge depends on its orientation (i.e., on orientation of the wire, method of exploration of edges etc.). Since wire represented by the ShapeExtend_WireData is always forward (orientation is accounted by edges), it will work correct if: 1. Wire created from ShapeExtend_WireData with methods ShapeExtend_WireData::Wire..() is added into the FORWARD face (orientation can be applied later) 2. Wire is extracted from the face with orientation not composed with orientation of the face
        	:param num:
        	:type num: int
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixSeam(self, *args)


    def GetFixSeamMode(self) -> "Standard_Integer":
        """GetFixSeamMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixSeamMode(self)


    def SetFixSeamMode(self, value: 'Standard_Integer') -> "void":
        """SetFixSeamMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixSeamMode(self, value)


    def GetFixSelfIntersectingEdgeMode(self) -> "Standard_Integer":
        """GetFixSelfIntersectingEdgeMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixSelfIntersectingEdgeMode(self)


    def SetFixSelfIntersectingEdgeMode(self, value: 'Standard_Integer') -> "void":
        """SetFixSelfIntersectingEdgeMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixSelfIntersectingEdgeMode(self, value)


    def FixSelfIntersection(self, *args) -> "Standard_Boolean":
        """
        * Applies FixSelfIntersectingEdge(num) and FixIntersectingEdges(num) to all edges in the wire and FixIntersectingEdges(num1, num2) for all pairs num1 and num2 such that num2 >= num1 + 2 and removes wrong edges if any
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixSelfIntersection(self, *args)


    def GetFixSelfIntersectionMode(self) -> "Standard_Integer":
        """GetFixSelfIntersectionMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixSelfIntersectionMode(self)


    def SetFixSelfIntersectionMode(self, value: 'Standard_Integer') -> "void":
        """SetFixSelfIntersectionMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixSelfIntersectionMode(self, value)


    def FixShifted(self, *args) -> "Standard_Boolean":
        """
        * Fixes edges which have pcurves shifted by whole parameter range on the closed surface (the case may occur if pcurve of edge was computed by projecting 3d curve, which goes along the seam). It compares each two consequent edges and tries to connect them if distance between ends is near to range of the surface. It also can detect and fix the case if all pcurves are connected, but lie out of parametric bounds of the surface. In addition to FixShifted from ShapeFix_Wire, more sophisticated check of degenerate points is performed, and special cases like sphere given by two meridians are treated.
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixShifted(self, *args)


    def GetFixShiftedMode(self) -> "Standard_Integer":
        """GetFixShiftedMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixShiftedMode(self)


    def SetFixShiftedMode(self, value: 'Standard_Integer') -> "void":
        """SetFixShiftedMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixShiftedMode(self, value)


    def FixSmall(self, *args) -> "Standard_Boolean":
        """
        * Applies FixSmall(num) to all edges in the wire
        	:param lockvtx:
        	:type lockvtx: bool
        	:param precsmall: default value is 0.0
        	:type precsmall: float
        	:rtype: int
        * Fixes Null Length Edge to be removed If an Edge has Null Length (regarding preci, or <precsmall> - what is smaller), it should be removed It can be with no problem if its two vertices are the same Else, if lockvtx is False, it is removed and its end vertex is put on the preceeding edge But if lockvtx is True, this edge must be kept ...
        	:param num:
        	:type num: int
        	:param lockvtx:
        	:type lockvtx: bool
        	:param precsmall:
        	:type precsmall: float
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_FixSmall(self, *args)


    def GetFixSmallMode(self) -> "Standard_Integer":
        """GetFixSmallMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixSmallMode(self)


    def SetFixSmallMode(self, value: 'Standard_Integer') -> "void":
        """SetFixSmallMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixSmallMode(self, value)


    def GetFixTailMode(self) -> "Standard_Integer":
        """GetFixTailMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixTailMode(self)


    def SetFixTailMode(self, value: 'Standard_Integer') -> "void":
        """SetFixTailMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixTailMode(self, value)


    def FixTails(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ShapeFix.ShapeFix_Wire_FixTails(self, *args)


    def GetFixVertexToleranceMode(self) -> "Standard_Integer":
        """GetFixVertexToleranceMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetFixVertexToleranceMode(self)


    def SetFixVertexToleranceMode(self, value: 'Standard_Integer') -> "void":
        """SetFixVertexToleranceMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetFixVertexToleranceMode(self, value)


    def Init(self, *args) -> "void":
        """
        * Load analyzer with all the data for the wire and face and drops all fixing statuses
        	:param wire:
        	:type wire: TopoDS_Wire
        	:param face:
        	:type face: TopoDS_Face
        	:param prec:
        	:type prec: float
        	:rtype: None
        * Load analyzer with all the data already prepared and drops all fixing statuses If analyzer contains face, there is no need to set it by SetFace or SetSurface
        	:param saw:
        	:type saw: ShapeAnalysis_Wire
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Wire_Init(self, *args)


    def IsLoaded(self, *args) -> "Standard_Boolean":
        """
        * Tells if the wire is loaded
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_IsLoaded(self, *args)


    def IsReady(self, *args) -> "Standard_Boolean":
        """
        * Tells if the wire and face are loaded
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_IsReady(self, *args)


    def LastFixStatus(self, *args) -> "Standard_Boolean":
        """
        * Queries the status of last call to methods Fix... of advanced level For details see corresponding methods; universal statuses are: OK : problem not detected; nothing done DONE: problem was detected and successfully fixed FAIL: problem cannot be fixed
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_LastFixStatus(self, *args)


    def Load(self, *args) -> "void":
        """
        * Load data for the wire, and drops all fixing statuses
        	:param wire:
        	:type wire: TopoDS_Wire
        	:rtype: None
        * Load data for the wire, and drops all fixing statuses
        	:param sbwd:
        	:type sbwd: ShapeExtend_WireData
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Wire_Load(self, *args)


    def GetModifyGeometryMode(self) -> "Standard_Boolean":
        """GetModifyGeometryMode(ShapeFix_Wire self) -> Standard_Boolean"""
        return _ShapeFix.ShapeFix_Wire_GetModifyGeometryMode(self)


    def SetModifyGeometryMode(self, value: 'Standard_Boolean') -> "void":
        """SetModifyGeometryMode(ShapeFix_Wire self, Standard_Boolean value)"""
        return _ShapeFix.ShapeFix_Wire_SetModifyGeometryMode(self, value)


    def GetModifyRemoveLoopMode(self) -> "Standard_Integer":
        """GetModifyRemoveLoopMode(ShapeFix_Wire self) -> Standard_Integer"""
        return _ShapeFix.ShapeFix_Wire_GetModifyRemoveLoopMode(self)


    def SetModifyRemoveLoopMode(self, value: 'Standard_Integer') -> "void":
        """SetModifyRemoveLoopMode(ShapeFix_Wire self, Standard_Integer value)"""
        return _ShapeFix.ShapeFix_Wire_SetModifyRemoveLoopMode(self, value)


    def GetModifyTopologyMode(self) -> "Standard_Boolean":
        """GetModifyTopologyMode(ShapeFix_Wire self) -> Standard_Boolean"""
        return _ShapeFix.ShapeFix_Wire_GetModifyTopologyMode(self)


    def SetModifyTopologyMode(self, value: 'Standard_Boolean') -> "void":
        """SetModifyTopologyMode(ShapeFix_Wire self, Standard_Boolean value)"""
        return _ShapeFix.ShapeFix_Wire_SetModifyTopologyMode(self, value)


    def NbEdges(self, *args) -> "Standard_Integer":
        """
        * returns number of edges in the working wire
        	:rtype: int
        """
        return _ShapeFix.ShapeFix_Wire_NbEdges(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        * This method performs all the available fixes. If some fix is turned on or off explicitly by the Fix..Mode() flag, this fix is either called or not depending on that flag. Else (i.e. if flag is default) fix is called depending on the situation: some fixes are not called or are limited if order of edges in the wire is not OK, or depending on modes //! The order of the fixes and default behaviour of Perform() are: FixReorder FixSmall (with lockvtx true if ! TopoMode or if wire is not ordered) FixConnected (if wire is ordered) FixEdgeCurves (without FixShifted if wire is not ordered) FixDegenerated (if wire is ordered) FixSelfIntersection (if wire is ordered and ClosedMode is True) FixLacking (if wire is ordered)
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_Perform(self, *args)


    def GetPreferencePCurveMode(self) -> "Standard_Boolean":
        """GetPreferencePCurveMode(ShapeFix_Wire self) -> Standard_Boolean"""
        return _ShapeFix.ShapeFix_Wire_GetPreferencePCurveMode(self)


    def SetPreferencePCurveMode(self, value: 'Standard_Boolean') -> "void":
        """SetPreferencePCurveMode(ShapeFix_Wire self, Standard_Boolean value)"""
        return _ShapeFix.ShapeFix_Wire_SetPreferencePCurveMode(self, value)


    def SetFace(self, *args) -> "void":
        """
        * Set working face for the wire
        	:param face:
        	:type face: TopoDS_Face
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Wire_SetFace(self, *args)


    def SetMaxTailAngle(self, *args) -> "void":
        """
        * Sets the maximal allowed angle of the tails in radians.
        	:param theMaxTailAngle:
        	:type theMaxTailAngle: float
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Wire_SetMaxTailAngle(self, *args)


    def SetMaxTailWidth(self, *args) -> "void":
        """
        * Sets the maximal allowed width of the tails.
        	:param theMaxTailWidth:
        	:type theMaxTailWidth: float
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Wire_SetMaxTailWidth(self, *args)


    def SetSurface(self, *args) -> "void":
        """
        * Set surface for the wire
        	:param surf:
        	:type surf: Geom_Surface
        	:rtype: None
        * Set surface for the wire
        	:param surf:
        	:type surf: Geom_Surface
        	:param loc:
        	:type loc: TopLoc_Location
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Wire_SetSurface(self, *args)


    def __init__(self, *args):
        """
        * Empty Constructor, creates clear object with default flags
        	:rtype: None
        * Create new object with default flags and prepare it for use (Loads analyzer with all the data for the wire and face)
        	:param wire:
        	:type wire: TopoDS_Wire
        	:param face:
        	:type face: TopoDS_Face
        	:param prec:
        	:type prec: float
        	:rtype: None
        """
        _ShapeFix.ShapeFix_Wire_swiginit(self, _ShapeFix.new_ShapeFix_Wire(*args))

    def StatusClosed(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusClosed(self, *args)


    def StatusConnected(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusConnected(self, *args)


    def StatusDegenerated(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusDegenerated(self, *args)


    def StatusEdgeCurves(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusEdgeCurves(self, *args)


    def StatusFixTails(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusFixTails(self, *args)


    def StatusGaps2d(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusGaps2d(self, *args)


    def StatusGaps3d(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusGaps3d(self, *args)


    def StatusLacking(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusLacking(self, *args)


    def StatusNotches(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusNotches(self, *args)


    def StatusRemovedSegment(self, *args) -> "Standard_Boolean":
        """
        * Querying the status of perfomed API fixing procedures Each Status..() methods gives information about the last call to the corresponding Fix..() method of API level: OK : no problems detected; nothing done DONE: some problem(s) was(were) detected and successfully fixed FAIL: some problem(s) cannot be fixed
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusRemovedSegment(self, *args)


    def StatusReorder(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusReorder(self, *args)


    def StatusSelfIntersection(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusSelfIntersection(self, *args)


    def StatusSmall(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wire_StatusSmall(self, *args)


    def Wire(self, *args) -> "TopoDS_Wire":
        """
        * Makes the resulting Wire (by basic Brep_Builder)
        	:rtype: TopoDS_Wire
        """
        return _ShapeFix.ShapeFix_Wire_Wire(self, *args)


    def WireAPIMake(self, *args) -> "TopoDS_Wire":
        """
        * Makes the resulting Wire (by BRepAPI_MakeWire)
        	:rtype: TopoDS_Wire
        """
        return _ShapeFix.ShapeFix_Wire_WireAPIMake(self, *args)


    def WireData(self, *args) -> "opencascade::handle< ShapeExtend_WireData > const &":
        """
        * returns working wire
        	:rtype: opencascade::handle<ShapeExtend_WireData>
        """
        return _ShapeFix.ShapeFix_Wire_WireData(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_Wire_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_Wire
ShapeFix_Wire.Analyzer = new_instancemethod(_ShapeFix.ShapeFix_Wire_Analyzer, None, ShapeFix_Wire)
ShapeFix_Wire.ClearModes = new_instancemethod(_ShapeFix.ShapeFix_Wire_ClearModes, None, ShapeFix_Wire)
ShapeFix_Wire.ClearStatuses = new_instancemethod(_ShapeFix.ShapeFix_Wire_ClearStatuses, None, ShapeFix_Wire)
ShapeFix_Wire.GetClosedWireMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetClosedWireMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetClosedWireMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetClosedWireMode, None, ShapeFix_Wire)
ShapeFix_Wire.Face = new_instancemethod(_ShapeFix.ShapeFix_Wire_Face, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixAddCurve3dMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixAddCurve3dMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixAddCurve3dMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixAddCurve3dMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixAddPCurveMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixAddPCurveMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixAddPCurveMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixAddPCurveMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixClosed = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixClosed, None, ShapeFix_Wire)
ShapeFix_Wire.FixConnected = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixConnected, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixConnectedMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixConnectedMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixConnectedMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixConnectedMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixDegenerated = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixDegenerated, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixDegeneratedMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixDegeneratedMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixDegeneratedMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixDegeneratedMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixEdgeCurves = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixEdgeCurves, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixEdgeCurvesMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixEdgeCurvesMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixEdgeCurvesMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixEdgeCurvesMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixEdgeTool = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixEdgeTool, None, ShapeFix_Wire)
ShapeFix_Wire.FixGap2d = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixGap2d, None, ShapeFix_Wire)
ShapeFix_Wire.FixGap3d = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixGap3d, None, ShapeFix_Wire)
ShapeFix_Wire.FixGaps2d = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixGaps2d, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixGaps2dMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixGaps2dMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixGaps2dMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixGaps2dMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixGaps3d = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixGaps3d, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixGaps3dMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixGaps3dMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixGaps3dMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixGaps3dMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixGapsByRangesMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixGapsByRangesMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixGapsByRangesMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixGapsByRangesMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixIntersectingEdgesMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixIntersectingEdgesMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixIntersectingEdgesMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixIntersectingEdgesMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixLacking = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixLacking, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixLackingMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixLackingMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixLackingMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixLackingMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixNonAdjacentIntersectingEdgesMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixNonAdjacentIntersectingEdgesMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixNonAdjacentIntersectingEdgesMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixNonAdjacentIntersectingEdgesMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixNotchedEdges = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixNotchedEdges, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixNotchedEdgesMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixNotchedEdgesMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixNotchedEdgesMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixNotchedEdgesMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixRemoveCurve3dMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixRemoveCurve3dMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixRemoveCurve3dMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixRemoveCurve3dMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixRemovePCurveMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixRemovePCurveMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixRemovePCurveMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixRemovePCurveMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixReorder = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixReorder, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixReorderMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixReorderMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixReorderMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixReorderMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixReversed2dMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixReversed2dMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixReversed2dMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixReversed2dMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixSameParameterMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixSameParameterMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixSameParameterMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixSameParameterMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixSeam = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixSeam, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixSeamMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixSeamMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixSeamMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixSeamMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixSelfIntersectingEdgeMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixSelfIntersectingEdgeMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixSelfIntersectingEdgeMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixSelfIntersectingEdgeMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixSelfIntersection = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixSelfIntersection, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixSelfIntersectionMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixSelfIntersectionMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixSelfIntersectionMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixSelfIntersectionMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixShifted = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixShifted, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixShiftedMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixShiftedMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixShiftedMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixShiftedMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixSmall = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixSmall, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixSmallMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixSmallMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixSmallMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixSmallMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixTailMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixTailMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixTailMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixTailMode, None, ShapeFix_Wire)
ShapeFix_Wire.FixTails = new_instancemethod(_ShapeFix.ShapeFix_Wire_FixTails, None, ShapeFix_Wire)
ShapeFix_Wire.GetFixVertexToleranceMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetFixVertexToleranceMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFixVertexToleranceMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFixVertexToleranceMode, None, ShapeFix_Wire)
ShapeFix_Wire.Init = new_instancemethod(_ShapeFix.ShapeFix_Wire_Init, None, ShapeFix_Wire)
ShapeFix_Wire.IsLoaded = new_instancemethod(_ShapeFix.ShapeFix_Wire_IsLoaded, None, ShapeFix_Wire)
ShapeFix_Wire.IsReady = new_instancemethod(_ShapeFix.ShapeFix_Wire_IsReady, None, ShapeFix_Wire)
ShapeFix_Wire.LastFixStatus = new_instancemethod(_ShapeFix.ShapeFix_Wire_LastFixStatus, None, ShapeFix_Wire)
ShapeFix_Wire.Load = new_instancemethod(_ShapeFix.ShapeFix_Wire_Load, None, ShapeFix_Wire)
ShapeFix_Wire.GetModifyGeometryMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetModifyGeometryMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetModifyGeometryMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetModifyGeometryMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetModifyRemoveLoopMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetModifyRemoveLoopMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetModifyRemoveLoopMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetModifyRemoveLoopMode, None, ShapeFix_Wire)
ShapeFix_Wire.GetModifyTopologyMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetModifyTopologyMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetModifyTopologyMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetModifyTopologyMode, None, ShapeFix_Wire)
ShapeFix_Wire.NbEdges = new_instancemethod(_ShapeFix.ShapeFix_Wire_NbEdges, None, ShapeFix_Wire)
ShapeFix_Wire.Perform = new_instancemethod(_ShapeFix.ShapeFix_Wire_Perform, None, ShapeFix_Wire)
ShapeFix_Wire.GetPreferencePCurveMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_GetPreferencePCurveMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetPreferencePCurveMode = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetPreferencePCurveMode, None, ShapeFix_Wire)
ShapeFix_Wire.SetFace = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetFace, None, ShapeFix_Wire)
ShapeFix_Wire.SetMaxTailAngle = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetMaxTailAngle, None, ShapeFix_Wire)
ShapeFix_Wire.SetMaxTailWidth = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetMaxTailWidth, None, ShapeFix_Wire)
ShapeFix_Wire.SetSurface = new_instancemethod(_ShapeFix.ShapeFix_Wire_SetSurface, None, ShapeFix_Wire)
ShapeFix_Wire.StatusClosed = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusClosed, None, ShapeFix_Wire)
ShapeFix_Wire.StatusConnected = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusConnected, None, ShapeFix_Wire)
ShapeFix_Wire.StatusDegenerated = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusDegenerated, None, ShapeFix_Wire)
ShapeFix_Wire.StatusEdgeCurves = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusEdgeCurves, None, ShapeFix_Wire)
ShapeFix_Wire.StatusFixTails = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusFixTails, None, ShapeFix_Wire)
ShapeFix_Wire.StatusGaps2d = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusGaps2d, None, ShapeFix_Wire)
ShapeFix_Wire.StatusGaps3d = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusGaps3d, None, ShapeFix_Wire)
ShapeFix_Wire.StatusLacking = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusLacking, None, ShapeFix_Wire)
ShapeFix_Wire.StatusNotches = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusNotches, None, ShapeFix_Wire)
ShapeFix_Wire.StatusRemovedSegment = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusRemovedSegment, None, ShapeFix_Wire)
ShapeFix_Wire.StatusReorder = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusReorder, None, ShapeFix_Wire)
ShapeFix_Wire.StatusSelfIntersection = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusSelfIntersection, None, ShapeFix_Wire)
ShapeFix_Wire.StatusSmall = new_instancemethod(_ShapeFix.ShapeFix_Wire_StatusSmall, None, ShapeFix_Wire)
ShapeFix_Wire.Wire = new_instancemethod(_ShapeFix.ShapeFix_Wire_Wire, None, ShapeFix_Wire)
ShapeFix_Wire.WireAPIMake = new_instancemethod(_ShapeFix.ShapeFix_Wire_WireAPIMake, None, ShapeFix_Wire)
ShapeFix_Wire.WireData = new_instancemethod(_ShapeFix.ShapeFix_Wire_WireData, None, ShapeFix_Wire)
ShapeFix_Wire_swigregister = _ShapeFix.ShapeFix_Wire_swigregister
ShapeFix_Wire_swigregister(ShapeFix_Wire)

class ShapeFix_Wireframe(ShapeFix_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CheckSmallEdges(self, *args) -> "Standard_Boolean":
        """
        * Auxiliary tool for FixSmallEdges which checks for small edges and fills the maps. Returns True if at least one small edge has been found.
        	:param theSmallEdges:
        	:type theSmallEdges: TopTools_MapOfShape
        	:param theEdgeToFaces:
        	:type theEdgeToFaces: TopTools_DataMapOfShapeListOfShape
        	:param theFaceWithSmall:
        	:type theFaceWithSmall: TopTools_DataMapOfShapeListOfShape
        	:param theMultyEdges:
        	:type theMultyEdges: TopTools_MapOfShape
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wireframe_CheckSmallEdges(self, *args)


    def ClearStatuses(self, *args) -> "void":
        """
        * Clears all statuses
        	:rtype: void
        """
        return _ShapeFix.ShapeFix_Wireframe_ClearStatuses(self, *args)


    def FixSmallEdges(self, *args) -> "Standard_Boolean":
        """
        * Fixes small edges in shape by merging adjacent edges If precision is 0.0, uses Precision::Confusion().
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wireframe_FixSmallEdges(self, *args)


    def FixWireGaps(self, *args) -> "Standard_Boolean":
        """
        * Fixes gaps between ends of curves of adjacent edges (both 3d and pcurves) in wires If precision is 0.0, uses Precision::Confusion().
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wireframe_FixWireGaps(self, *args)


    def LimitAngle(self, *args) -> "Standard_Real":
        """
        * Get limit angle for merging edges.
        	:rtype: float
        """
        return _ShapeFix.ShapeFix_Wireframe_LimitAngle(self, *args)


    def Load(self, *args) -> "void":
        """
        * Loads a shape, resets statuses
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Wireframe_Load(self, *args)


    def MergeSmallEdges(self, *args) -> "Standard_Boolean":
        """
        * Auxiliary tool for FixSmallEdges which merges small edges. If theModeDrop is equal to Standard_True then small edges, which cannot be connected with adjacent edges are dropped. Otherwise they are kept. theLimitAngle specifies maximum allowed tangency discontinuity between adjacent edges. If theLimitAngle is equal to -1, this angle is not taken into account.
        	:param theSmallEdges:
        	:type theSmallEdges: TopTools_MapOfShape
        	:param theEdgeToFaces:
        	:type theEdgeToFaces: TopTools_DataMapOfShapeListOfShape
        	:param theFaceWithSmall:
        	:type theFaceWithSmall: TopTools_DataMapOfShapeListOfShape
        	:param theMultyEdges:
        	:type theMultyEdges: TopTools_MapOfShape
        	:param theModeDrop: default value is Standard_False
        	:type theModeDrop: bool
        	:param theLimitAngle: default value is -1
        	:type theLimitAngle: float
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wireframe_MergeSmallEdges(self, *args)


    def GetModeDropSmallEdges(self) -> "Standard_Boolean":
        """GetModeDropSmallEdges(ShapeFix_Wireframe self) -> Standard_Boolean"""
        return _ShapeFix.ShapeFix_Wireframe_GetModeDropSmallEdges(self)


    def SetModeDropSmallEdges(self, value: 'Standard_Boolean') -> "void":
        """SetModeDropSmallEdges(ShapeFix_Wireframe self, Standard_Boolean value)"""
        return _ShapeFix.ShapeFix_Wireframe_SetModeDropSmallEdges(self, value)


    def SetLimitAngle(self, *args) -> "void":
        """
        * Set limit angle for merging edges.
        	:param theLimitAngle:
        	:type theLimitAngle: float
        	:rtype: None
        """
        return _ShapeFix.ShapeFix_Wireframe_SetLimitAngle(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """:rtype: TopoDS_Shape"""
        return _ShapeFix.ShapeFix_Wireframe_Shape(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param shape:
        	:type shape: TopoDS_Shape
        	:rtype: None
        """
        _ShapeFix.ShapeFix_Wireframe_swiginit(self, _ShapeFix.new_ShapeFix_Wireframe(*args))

    def StatusSmallEdges(self, *args) -> "Standard_Boolean":
        """
        * Decodes the status of the last FixSmallEdges. OK - No small edges were found DONE1 - Some small edges were fixed FAIL1 - Failed to fix some small edges
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wireframe_StatusSmallEdges(self, *args)


    def StatusWireGaps(self, *args) -> "Standard_Boolean":
        """
        * Decodes the status of the last FixWireGaps. OK - No gaps were found DONE1 - Some gaps in 3D were fixed DONE2 - Some gaps in 2D were fixed FAIL1 - Failed to fix some gaps in 3D FAIL2 - Failed to fix some gaps in 2D
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeFix.ShapeFix_Wireframe_StatusWireGaps(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeFix_Wireframe_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeFix.delete_ShapeFix_Wireframe
ShapeFix_Wireframe.CheckSmallEdges = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_CheckSmallEdges, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.ClearStatuses = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_ClearStatuses, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.FixSmallEdges = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_FixSmallEdges, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.FixWireGaps = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_FixWireGaps, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.LimitAngle = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_LimitAngle, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.Load = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_Load, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.MergeSmallEdges = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_MergeSmallEdges, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.GetModeDropSmallEdges = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_GetModeDropSmallEdges, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.SetModeDropSmallEdges = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_SetModeDropSmallEdges, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.SetLimitAngle = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_SetLimitAngle, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.Shape = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_Shape, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.StatusSmallEdges = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_StatusSmallEdges, None, ShapeFix_Wireframe)
ShapeFix_Wireframe.StatusWireGaps = new_instancemethod(_ShapeFix.ShapeFix_Wireframe_StatusWireGaps, None, ShapeFix_Wireframe)
ShapeFix_Wireframe_swigregister = _ShapeFix.ShapeFix_Wireframe_swigregister
ShapeFix_Wireframe_swigregister(ShapeFix_Wireframe)



