# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepToTopoDS module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_steptotopods.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StepToTopoDS.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepToTopoDS')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepToTopoDS')
    _StepToTopoDS = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepToTopoDS', [dirname(__file__)])
        except ImportError:
            import _StepToTopoDS
            return _StepToTopoDS
        try:
            _mod = imp.load_module('_StepToTopoDS', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepToTopoDS = swig_import_helper()
    del swig_import_helper
else:
    import _StepToTopoDS
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepToTopoDS.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_StepToTopoDS.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_StepToTopoDS.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_StepToTopoDS.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_StepToTopoDS.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_StepToTopoDS.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_StepToTopoDS.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_StepToTopoDS.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_StepToTopoDS.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_StepToTopoDS.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_StepToTopoDS.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _StepToTopoDS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StepToTopoDS.process_exception(error, method_name, class_name)
process_exception = _StepToTopoDS.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepRepr
import OCC.Core.TCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.StepBasic
import OCC.Core.StepGeom
import OCC.Core.StepShape
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Transfer
import OCC.Core.Geom2d
StepToTopoDS_GeometricToolDone = _StepToTopoDS.StepToTopoDS_GeometricToolDone
StepToTopoDS_GeometricToolIsDegenerated = _StepToTopoDS.StepToTopoDS_GeometricToolIsDegenerated
StepToTopoDS_GeometricToolHasNoPCurve = _StepToTopoDS.StepToTopoDS_GeometricToolHasNoPCurve
StepToTopoDS_GeometricToolWrong3dParameters = _StepToTopoDS.StepToTopoDS_GeometricToolWrong3dParameters
StepToTopoDS_GeometricToolNoProjectiOnCurve = _StepToTopoDS.StepToTopoDS_GeometricToolNoProjectiOnCurve
StepToTopoDS_GeometricToolOther = _StepToTopoDS.StepToTopoDS_GeometricToolOther
StepToTopoDS_TranslateShellDone = _StepToTopoDS.StepToTopoDS_TranslateShellDone
StepToTopoDS_TranslateShellOther = _StepToTopoDS.StepToTopoDS_TranslateShellOther
StepToTopoDS_TranslatePolyLoopDone = _StepToTopoDS.StepToTopoDS_TranslatePolyLoopDone
StepToTopoDS_TranslatePolyLoopOther = _StepToTopoDS.StepToTopoDS_TranslatePolyLoopOther
StepToTopoDS_TranslateEdgeDone = _StepToTopoDS.StepToTopoDS_TranslateEdgeDone
StepToTopoDS_TranslateEdgeOther = _StepToTopoDS.StepToTopoDS_TranslateEdgeOther
StepToTopoDS_BuilderDone = _StepToTopoDS.StepToTopoDS_BuilderDone
StepToTopoDS_BuilderOther = _StepToTopoDS.StepToTopoDS_BuilderOther
StepToTopoDS_TranslateFaceDone = _StepToTopoDS.StepToTopoDS_TranslateFaceDone
StepToTopoDS_TranslateFaceOther = _StepToTopoDS.StepToTopoDS_TranslateFaceOther
StepToTopoDS_TranslateVertexLoopDone = _StepToTopoDS.StepToTopoDS_TranslateVertexLoopDone
StepToTopoDS_TranslateVertexLoopOther = _StepToTopoDS.StepToTopoDS_TranslateVertexLoopOther
StepToTopoDS_TranslateEdgeLoopDone = _StepToTopoDS.StepToTopoDS_TranslateEdgeLoopDone
StepToTopoDS_TranslateEdgeLoopOther = _StepToTopoDS.StepToTopoDS_TranslateEdgeLoopOther
StepToTopoDS_TranslateVertexDone = _StepToTopoDS.StepToTopoDS_TranslateVertexDone
StepToTopoDS_TranslateVertexOther = _StepToTopoDS.StepToTopoDS_TranslateVertexOther
class StepToTopoDS_PointEdgeMap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepToTopoDS.StepToTopoDS_PointEdgeMap_swiginit(self, _StepToTopoDS.new_StepToTopoDS_PointEdgeMap(*args))
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointEdgeMap
StepToTopoDS_PointEdgeMap.begin = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_begin, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.end = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_end, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.cbegin = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_cbegin, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.cend = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_cend, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.Exchange = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Exchange, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.Assign = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Assign, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.Set = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Set, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.ReSize = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_ReSize, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.Bind = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Bind, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.Bound = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Bound, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.IsBound = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_IsBound, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.UnBind = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_UnBind, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.Seek = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Seek, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.Find = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Find, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.ChangeSeek = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_ChangeSeek, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.ChangeFind = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_ChangeFind, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.__call__ = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap___call__, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.Clear = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Clear, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap.Size = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Size, None, StepToTopoDS_PointEdgeMap)
StepToTopoDS_PointEdgeMap_swigregister = _StepToTopoDS.StepToTopoDS_PointEdgeMap_swigregister
StepToTopoDS_PointEdgeMap_swigregister(StepToTopoDS_PointEdgeMap)

class StepToTopoDS_DataMapOfRI(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepToTopoDS.StepToTopoDS_DataMapOfRI_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapOfRI(*args))
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapOfRI
StepToTopoDS_DataMapOfRI.begin = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_begin, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.end = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_end, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.cbegin = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_cbegin, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.cend = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_cend, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.Exchange = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Exchange, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.Assign = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Assign, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.Set = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Set, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.ReSize = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_ReSize, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.Bind = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Bind, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.Bound = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Bound, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.IsBound = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_IsBound, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.UnBind = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_UnBind, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.Seek = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Seek, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.Find = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Find, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.ChangeSeek = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_ChangeSeek, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.ChangeFind = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_ChangeFind, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.__call__ = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI___call__, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.Clear = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Clear, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI.Size = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Size, None, StepToTopoDS_DataMapOfRI)
StepToTopoDS_DataMapOfRI_swigregister = _StepToTopoDS.StepToTopoDS_DataMapOfRI_swigregister
StepToTopoDS_DataMapOfRI_swigregister(StepToTopoDS_DataMapOfRI)

class StepToTopoDS_PointVertexMap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepToTopoDS.StepToTopoDS_PointVertexMap_swiginit(self, _StepToTopoDS.new_StepToTopoDS_PointVertexMap(*args))
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointVertexMap
StepToTopoDS_PointVertexMap.begin = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_begin, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.end = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_end, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.cbegin = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_cbegin, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.cend = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_cend, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.Exchange = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_Exchange, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.Assign = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_Assign, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.Set = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_Set, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.ReSize = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_ReSize, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.Bind = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_Bind, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.Bound = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_Bound, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.IsBound = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_IsBound, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.UnBind = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_UnBind, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.Seek = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_Seek, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.Find = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_Find, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.ChangeSeek = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_ChangeSeek, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.ChangeFind = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_ChangeFind, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.__call__ = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap___call__, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.Clear = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_Clear, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap.Size = new_instancemethod(_StepToTopoDS.StepToTopoDS_PointVertexMap_Size, None, StepToTopoDS_PointVertexMap)
StepToTopoDS_PointVertexMap_swigregister = _StepToTopoDS.StepToTopoDS_PointVertexMap_swigregister
StepToTopoDS_PointVertexMap_swigregister(StepToTopoDS_PointVertexMap)

class StepToTopoDS_DataMapOfRINames(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepToTopoDS.StepToTopoDS_DataMapOfRINames_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapOfRINames(*args))
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapOfRINames
StepToTopoDS_DataMapOfRINames.begin = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_begin, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.end = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_end, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.cbegin = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_cbegin, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.cend = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_cend, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.Exchange = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Exchange, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.Assign = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Assign, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.Set = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Set, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.ReSize = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_ReSize, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.Bind = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Bind, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.Bound = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Bound, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.IsBound = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_IsBound, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.UnBind = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_UnBind, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.Seek = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Seek, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.Find = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Find, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.ChangeSeek = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_ChangeSeek, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.ChangeFind = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_ChangeFind, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.__call__ = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames___call__, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.Clear = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Clear, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames.Size = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Size, None, StepToTopoDS_DataMapOfRINames)
StepToTopoDS_DataMapOfRINames_swigregister = _StepToTopoDS.StepToTopoDS_DataMapOfRINames_swigregister
StepToTopoDS_DataMapOfRINames_swigregister(StepToTopoDS_DataMapOfRINames)

class StepToTopoDS_DataMapOfTRI(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepToTopoDS.StepToTopoDS_DataMapOfTRI_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapOfTRI(*args))
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapOfTRI
StepToTopoDS_DataMapOfTRI.begin = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_begin, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.end = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_end, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.cbegin = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_cbegin, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.cend = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_cend, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.Exchange = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Exchange, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.Assign = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Assign, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.Set = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Set, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.ReSize = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_ReSize, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.Bind = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Bind, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.Bound = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Bound, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.IsBound = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_IsBound, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.UnBind = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_UnBind, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.Seek = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Seek, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.Find = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Find, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.ChangeSeek = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_ChangeSeek, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.ChangeFind = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_ChangeFind, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.__call__ = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI___call__, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.Clear = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Clear, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI.Size = new_instancemethod(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Size, None, StepToTopoDS_DataMapOfTRI)
StepToTopoDS_DataMapOfTRI_swigregister = _StepToTopoDS.StepToTopoDS_DataMapOfTRI_swigregister
StepToTopoDS_DataMapOfTRI_swigregister(StepToTopoDS_DataMapOfTRI)

class steptotopods(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DecodeBuilderError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param Error:
        	:type Error: StepToTopoDS_BuilderError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _StepToTopoDS.steptotopods_DecodeBuilderError(*args)

    DecodeBuilderError = staticmethod(DecodeBuilderError)

    def DecodeEdgeError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param Error:
        	:type Error: StepToTopoDS_TranslateEdgeError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _StepToTopoDS.steptotopods_DecodeEdgeError(*args)

    DecodeEdgeError = staticmethod(DecodeEdgeError)

    def DecodeFaceError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param Error:
        	:type Error: StepToTopoDS_TranslateFaceError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _StepToTopoDS.steptotopods_DecodeFaceError(*args)

    DecodeFaceError = staticmethod(DecodeFaceError)

    def DecodeGeometricToolError(*args) -> "char const *":
        """
        :param Error:
        	:type Error: StepToTopoDS_GeometricToolError
        	:rtype: char *
        """
        return _StepToTopoDS.steptotopods_DecodeGeometricToolError(*args)

    DecodeGeometricToolError = staticmethod(DecodeGeometricToolError)

    def DecodePolyLoopError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param Error:
        	:type Error: StepToTopoDS_TranslatePolyLoopError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _StepToTopoDS.steptotopods_DecodePolyLoopError(*args)

    DecodePolyLoopError = staticmethod(DecodePolyLoopError)

    def DecodeShellError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param Error:
        	:type Error: StepToTopoDS_TranslateShellError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _StepToTopoDS.steptotopods_DecodeShellError(*args)

    DecodeShellError = staticmethod(DecodeShellError)

    def DecodeVertexError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param Error:
        	:type Error: StepToTopoDS_TranslateVertexError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _StepToTopoDS.steptotopods_DecodeVertexError(*args)

    DecodeVertexError = staticmethod(DecodeVertexError)

    def DecodeVertexLoopError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param Error:
        	:type Error: StepToTopoDS_TranslateVertexLoopError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _StepToTopoDS.steptotopods_DecodeVertexLoopError(*args)

    DecodeVertexLoopError = staticmethod(DecodeVertexLoopError)

    __repr__ = _dumps_object


    def __init__(self):
        _StepToTopoDS.steptotopods_swiginit(self, _StepToTopoDS.new_steptotopods())
    __swig_destroy__ = _StepToTopoDS.delete_steptotopods
steptotopods_swigregister = _StepToTopoDS.steptotopods_swigregister
steptotopods_swigregister(steptotopods)

def steptotopods_DecodeBuilderError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param Error:
    	:type Error: StepToTopoDS_BuilderError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _StepToTopoDS.steptotopods_DecodeBuilderError(*args)

def steptotopods_DecodeEdgeError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param Error:
    	:type Error: StepToTopoDS_TranslateEdgeError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _StepToTopoDS.steptotopods_DecodeEdgeError(*args)

def steptotopods_DecodeFaceError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param Error:
    	:type Error: StepToTopoDS_TranslateFaceError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _StepToTopoDS.steptotopods_DecodeFaceError(*args)

def steptotopods_DecodeGeometricToolError(*args) -> "char const *":
    """
    :param Error:
    	:type Error: StepToTopoDS_GeometricToolError
    	:rtype: char *
    """
    return _StepToTopoDS.steptotopods_DecodeGeometricToolError(*args)

def steptotopods_DecodePolyLoopError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param Error:
    	:type Error: StepToTopoDS_TranslatePolyLoopError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _StepToTopoDS.steptotopods_DecodePolyLoopError(*args)

def steptotopods_DecodeShellError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param Error:
    	:type Error: StepToTopoDS_TranslateShellError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _StepToTopoDS.steptotopods_DecodeShellError(*args)

def steptotopods_DecodeVertexError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param Error:
    	:type Error: StepToTopoDS_TranslateVertexError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _StepToTopoDS.steptotopods_DecodeVertexError(*args)

def steptotopods_DecodeVertexLoopError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param Error:
    	:type Error: StepToTopoDS_TranslateVertexLoopError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _StepToTopoDS.steptotopods_DecodeVertexLoopError(*args)

class StepToTopoDS_CartesianPointHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        * Computes a hash code for the cartesian point, in the range [1, theUpperBound] @param theCartesianPoint the cartesian point which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param theCartesianPoint:
        	:type theCartesianPoint: StepGeom_CartesianPoint
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        * Returns True when the two CartesianPoint are the same
        	:param K1:
        	:type K1: StepGeom_CartesianPoint
        	:param K2:
        	:type K2: StepGeom_CartesianPoint
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _StepToTopoDS.StepToTopoDS_CartesianPointHasher_swiginit(self, _StepToTopoDS.new_StepToTopoDS_CartesianPointHasher())
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_CartesianPointHasher
StepToTopoDS_CartesianPointHasher_swigregister = _StepToTopoDS.StepToTopoDS_CartesianPointHasher_swigregister
StepToTopoDS_CartesianPointHasher_swigregister(StepToTopoDS_CartesianPointHasher)

def StepToTopoDS_CartesianPointHasher_HashCode(*args) -> "Standard_Integer":
    """
    * Computes a hash code for the cartesian point, in the range [1, theUpperBound] @param theCartesianPoint the cartesian point which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
    	:param theCartesianPoint:
    	:type theCartesianPoint: StepGeom_CartesianPoint
    	:param theUpperBound:
    	:type theUpperBound: int
    	:rtype: int
    """
    return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_HashCode(*args)

def StepToTopoDS_CartesianPointHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    * Returns True when the two CartesianPoint are the same
    	:param K1:
    	:type K1: StepGeom_CartesianPoint
    	:param K2:
    	:type K2: StepGeom_CartesianPoint
    	:rtype: bool
    """
    return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_IsEqual(*args)

class StepToTopoDS_GeometricTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsLikeSeam(*args) -> "Standard_Boolean":
        """
        :param SC:
        	:type SC: StepGeom_SurfaceCurve
        	:param S:
        	:type S: StepGeom_Surface
        	:param E:
        	:type E: StepShape_Edge
        	:param EL:
        	:type EL: StepShape_EdgeLoop
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_IsLikeSeam(*args)

    IsLikeSeam = staticmethod(IsLikeSeam)

    def IsSeamCurve(*args) -> "Standard_Boolean":
        """
        :param SC:
        	:type SC: StepGeom_SurfaceCurve
        	:param S:
        	:type S: StepGeom_Surface
        	:param E:
        	:type E: StepShape_Edge
        	:param EL:
        	:type EL: StepShape_EdgeLoop
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_IsSeamCurve(*args)

    IsSeamCurve = staticmethod(IsSeamCurve)

    def PCurve(*args) -> "Standard_Integer":
        """
        :param SC:
        	:type SC: StepGeom_SurfaceCurve
        	:param S:
        	:type S: StepGeom_Surface
        	:param PC:
        	:type PC: StepGeom_Pcurve
        	:param last: default value is 0
        	:type last: int
        	:rtype: int
        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_PCurve(*args)

    PCurve = staticmethod(PCurve)

    def UpdateParam3d(*args) -> "Standard_Real &, Standard_Real &":
        """
        :param C:
        	:type C: Geom_Curve
        	:param w1:
        	:type w1: float
        	:param w2:
        	:type w2: float
        	:param preci:
        	:type preci: float
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_UpdateParam3d(*args)

    UpdateParam3d = staticmethod(UpdateParam3d)

    __repr__ = _dumps_object


    def __init__(self):
        _StepToTopoDS.StepToTopoDS_GeometricTool_swiginit(self, _StepToTopoDS.new_StepToTopoDS_GeometricTool())
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_GeometricTool
StepToTopoDS_GeometricTool_swigregister = _StepToTopoDS.StepToTopoDS_GeometricTool_swigregister
StepToTopoDS_GeometricTool_swigregister(StepToTopoDS_GeometricTool)

def StepToTopoDS_GeometricTool_IsLikeSeam(*args) -> "Standard_Boolean":
    """
    :param SC:
    	:type SC: StepGeom_SurfaceCurve
    	:param S:
    	:type S: StepGeom_Surface
    	:param E:
    	:type E: StepShape_Edge
    	:param EL:
    	:type EL: StepShape_EdgeLoop
    	:rtype: bool
    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_IsLikeSeam(*args)

def StepToTopoDS_GeometricTool_IsSeamCurve(*args) -> "Standard_Boolean":
    """
    :param SC:
    	:type SC: StepGeom_SurfaceCurve
    	:param S:
    	:type S: StepGeom_Surface
    	:param E:
    	:type E: StepShape_Edge
    	:param EL:
    	:type EL: StepShape_EdgeLoop
    	:rtype: bool
    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_IsSeamCurve(*args)

def StepToTopoDS_GeometricTool_PCurve(*args) -> "Standard_Integer":
    """
    :param SC:
    	:type SC: StepGeom_SurfaceCurve
    	:param S:
    	:type S: StepGeom_Surface
    	:param PC:
    	:type PC: StepGeom_Pcurve
    	:param last: default value is 0
    	:type last: int
    	:rtype: int
    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_PCurve(*args)

def StepToTopoDS_GeometricTool_UpdateParam3d(*args) -> "Standard_Real &, Standard_Real &":
    """
    :param C:
    	:type C: Geom_Curve
    	:param w1:
    	:type w1: float
    	:param w2:
    	:type w2: float
    	:param preci:
    	:type preci: float
    	:rtype: bool
    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_UpdateParam3d(*args)

class StepToTopoDS_NMTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Bind(self, *args) -> "void":
        """
        :param RI:
        	:type RI: StepRepr_RepresentationItem
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        :param RIName:
        	:type RIName: TCollection_AsciiString
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_NMTool_Bind(self, *args)


    def CleanUp(self, *args) -> "void":
        """:rtype: None"""
        return _StepToTopoDS.StepToTopoDS_NMTool_CleanUp(self, *args)


    def Find(self, *args) -> "TopoDS_Shape const":
        """
        :param RI:
        	:type RI: StepRepr_RepresentationItem
        	:rtype: TopoDS_Shape
        :param RIName:
        	:type RIName: TCollection_AsciiString
        	:rtype: TopoDS_Shape
        """
        return _StepToTopoDS.StepToTopoDS_NMTool_Find(self, *args)


    def Init(self, *args) -> "void":
        """
        :param MapOfRI:
        	:type MapOfRI: StepToTopoDS_DataMapOfRI
        	:param MapOfRINames:
        	:type MapOfRINames: StepToTopoDS_DataMapOfRINames
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_NMTool_Init(self, *args)


    def IsActive(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _StepToTopoDS.StepToTopoDS_NMTool_IsActive(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param RI:
        	:type RI: StepRepr_RepresentationItem
        	:rtype: bool
        :param RIName:
        	:type RIName: TCollection_AsciiString
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsBound(self, *args)


    def IsIDEASCase(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _StepToTopoDS.StepToTopoDS_NMTool_IsIDEASCase(self, *args)


    def IsPureNMShell(self, *args) -> "Standard_Boolean":
        """
        :param Shell:
        	:type Shell: TopoDS_Shape
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsPureNMShell(self, *args)


    def IsSuspectedAsClosing(self, *args) -> "Standard_Boolean":
        """
        :param BaseShell:
        	:type BaseShell: TopoDS_Shape
        	:param SuspectedShell:
        	:type SuspectedShell: TopoDS_Shape
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsSuspectedAsClosing(self, *args)


    def RegisterNMEdge(self, *args) -> "void":
        """
        :param Edge:
        	:type Edge: TopoDS_Shape
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_NMTool_RegisterNMEdge(self, *args)


    def SetActive(self, *args) -> "void":
        """
        :param isActive:
        	:type isActive: bool
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_NMTool_SetActive(self, *args)


    def SetIDEASCase(self, *args) -> "void":
        """
        :param IDEASCase:
        	:type IDEASCase: bool
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_NMTool_SetIDEASCase(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param MapOfRI:
        	:type MapOfRI: StepToTopoDS_DataMapOfRI
        	:param MapOfRINames:
        	:type MapOfRINames: StepToTopoDS_DataMapOfRINames
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_NMTool_swiginit(self, _StepToTopoDS.new_StepToTopoDS_NMTool(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_NMTool
StepToTopoDS_NMTool.Bind = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_Bind, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.CleanUp = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_CleanUp, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.Find = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_Find, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_Init, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.IsActive = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_IsActive, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.IsBound = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_IsBound, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.IsIDEASCase = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_IsIDEASCase, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.IsPureNMShell = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_IsPureNMShell, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.IsSuspectedAsClosing = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_IsSuspectedAsClosing, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.RegisterNMEdge = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_RegisterNMEdge, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.SetActive = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_SetActive, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool.SetIDEASCase = new_instancemethod(_StepToTopoDS.StepToTopoDS_NMTool_SetIDEASCase, None, StepToTopoDS_NMTool)
StepToTopoDS_NMTool_swigregister = _StepToTopoDS.StepToTopoDS_NMTool_swigregister
StepToTopoDS_NMTool_swigregister(StepToTopoDS_NMTool)

class StepToTopoDS_PointPair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P1:
        	:type P1: StepGeom_CartesianPoint
        	:param P2:
        	:type P2: StepGeom_CartesianPoint
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_PointPair_swiginit(self, _StepToTopoDS.new_StepToTopoDS_PointPair(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointPair
StepToTopoDS_PointPair_swigregister = _StepToTopoDS.StepToTopoDS_PointPair_swigregister
StepToTopoDS_PointPair_swigregister(StepToTopoDS_PointPair)

class StepToTopoDS_PointPairHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        * Computes a hash code for the point pair, in the range [1, theUpperBound] @param thePointPair the point pair which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param thePointPair:
        	:type thePointPair: StepToTopoDS_PointPair
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _StepToTopoDS.StepToTopoDS_PointPairHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        * Returns True when the two PointPair are the same
        	:param K1:
        	:type K1: StepToTopoDS_PointPair
        	:param K2:
        	:type K2: StepToTopoDS_PointPair
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_PointPairHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _StepToTopoDS.StepToTopoDS_PointPairHasher_swiginit(self, _StepToTopoDS.new_StepToTopoDS_PointPairHasher())
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointPairHasher
StepToTopoDS_PointPairHasher_swigregister = _StepToTopoDS.StepToTopoDS_PointPairHasher_swigregister
StepToTopoDS_PointPairHasher_swigregister(StepToTopoDS_PointPairHasher)

def StepToTopoDS_PointPairHasher_HashCode(*args) -> "Standard_Integer":
    """
    * Computes a hash code for the point pair, in the range [1, theUpperBound] @param thePointPair the point pair which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
    	:param thePointPair:
    	:type thePointPair: StepToTopoDS_PointPair
    	:param theUpperBound:
    	:type theUpperBound: int
    	:rtype: int
    """
    return _StepToTopoDS.StepToTopoDS_PointPairHasher_HashCode(*args)

def StepToTopoDS_PointPairHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    * Returns True when the two PointPair are the same
    	:param K1:
    	:type K1: StepToTopoDS_PointPair
    	:param K2:
    	:type K2: StepToTopoDS_PointPair
    	:rtype: bool
    """
    return _StepToTopoDS.StepToTopoDS_PointPairHasher_IsEqual(*args)

class StepToTopoDS_Root(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _StepToTopoDS.StepToTopoDS_Root_IsDone(self, *args)


    def MaxTol(self, *args) -> "Standard_Real":
        """
        * Returns the value of 'MaxTol'
        	:rtype: float
        """
        return _StepToTopoDS.StepToTopoDS_Root_MaxTol(self, *args)


    def Precision(self, *args) -> "Standard_Real":
        """
        * Returns the value of 'MyPrecision'
        	:rtype: float
        """
        return _StepToTopoDS.StepToTopoDS_Root_Precision(self, *args)


    def SetMaxTol(self, *args) -> "void":
        """
        * Sets the value of MaxTol
        	:param maxpreci:
        	:type maxpreci: float
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_Root_SetMaxTol(self, *args)


    def SetPrecision(self, *args) -> "void":
        """
        * Sets the value of 'MyPrecision'
        	:param preci:
        	:type preci: float
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_Root_SetPrecision(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_Root
StepToTopoDS_Root.IsDone = new_instancemethod(_StepToTopoDS.StepToTopoDS_Root_IsDone, None, StepToTopoDS_Root)
StepToTopoDS_Root.MaxTol = new_instancemethod(_StepToTopoDS.StepToTopoDS_Root_MaxTol, None, StepToTopoDS_Root)
StepToTopoDS_Root.Precision = new_instancemethod(_StepToTopoDS.StepToTopoDS_Root_Precision, None, StepToTopoDS_Root)
StepToTopoDS_Root.SetMaxTol = new_instancemethod(_StepToTopoDS.StepToTopoDS_Root_SetMaxTol, None, StepToTopoDS_Root)
StepToTopoDS_Root.SetPrecision = new_instancemethod(_StepToTopoDS.StepToTopoDS_Root_SetPrecision, None, StepToTopoDS_Root)
StepToTopoDS_Root_swigregister = _StepToTopoDS.StepToTopoDS_Root_swigregister
StepToTopoDS_Root_swigregister(StepToTopoDS_Root)

class StepToTopoDS_MakeTransformed(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Compute(self, *args) -> "Standard_Boolean":
        """
        * Computes a transformation to pass from an Origin placement to a Target placement. Returns True when done If not done, the transformation will by Identity
        	:param Origin:
        	:type Origin: StepGeom_Axis2Placement3d
        	:param Target:
        	:type Target: StepGeom_Axis2Placement3d
        	:rtype: bool
        * Computes a transformation defined by an operator 3D
        	:param Operator:
        	:type Operator: StepGeom_CartesianTransformationOperator3d
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_Compute(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _StepToTopoDS.StepToTopoDS_MakeTransformed_swiginit(self, _StepToTopoDS.new_StepToTopoDS_MakeTransformed(*args))

    def Transform(self, *args) -> "Standard_Boolean":
        """
        * Applies the computed transformation to a shape Returns False if the transformation is Identity
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_Transform(self, *args)


    def Transformation(self, *args) -> "gp_Trsf const":
        """
        * Returns the computed transformation (Identity if not yet or if failed)
        	:rtype: gp_Trsf
        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_Transformation(self, *args)


    def TranslateMappedItem(self, *args) -> "TopoDS_Shape":
        """
        * Translates a MappedItem. More precisely A MappedItem has a MappingSource and a MappingTarget MappingSource has a MappedRepresentation and a MappingOrigin MappedRepresentation is the basic item to be instanced MappingOrigin is the starting placement MappingTarget is the final placement //! Hence, the transformation from MappingOrigin and MappingTarget is computed, the MappedRepr. is converted to a Shape, then transformed as an instance of this Shape
        	:param mapit:
        	:type mapit: StepRepr_MappedItem
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:rtype: TopoDS_Shape
        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_TranslateMappedItem(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_MakeTransformed
StepToTopoDS_MakeTransformed.Compute = new_instancemethod(_StepToTopoDS.StepToTopoDS_MakeTransformed_Compute, None, StepToTopoDS_MakeTransformed)
StepToTopoDS_MakeTransformed.Transform = new_instancemethod(_StepToTopoDS.StepToTopoDS_MakeTransformed_Transform, None, StepToTopoDS_MakeTransformed)
StepToTopoDS_MakeTransformed.Transformation = new_instancemethod(_StepToTopoDS.StepToTopoDS_MakeTransformed_Transformation, None, StepToTopoDS_MakeTransformed)
StepToTopoDS_MakeTransformed.TranslateMappedItem = new_instancemethod(_StepToTopoDS.StepToTopoDS_MakeTransformed_TranslateMappedItem, None, StepToTopoDS_MakeTransformed)
StepToTopoDS_MakeTransformed_swigregister = _StepToTopoDS.StepToTopoDS_MakeTransformed_swigregister
StepToTopoDS_MakeTransformed_swigregister(StepToTopoDS_MakeTransformed)

class StepToTopoDS_TranslateCompositeCurve(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(self, *args) -> "Standard_Boolean":
        """
        * Translates standalone composite_curve
        	:param CC:
        	:type CC: StepGeom_CompositeCurve
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:rtype: bool
        * Translates composite_curve lying on surface
        	:param CC:
        	:type CC: StepGeom_CompositeCurve
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:param S:
        	:type S: StepGeom_Surface
        	:param Surf:
        	:type Surf: Geom_Surface
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Init(self, *args)


    def IsInfiniteSegment(self, *args) -> "Standard_Boolean":
        """
        * Returns True if composite_curve contains a segment with infinite parameters.
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_IsInfiniteSegment(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Translates standalone composite_curve
        	:param CC:
        	:type CC: StepGeom_CompositeCurve
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:rtype: None
        * Translates composite_curve lying on surface
        	:param CC:
        	:type CC: StepGeom_CompositeCurve
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:param S:
        	:type S: StepGeom_Surface
        	:param Surf:
        	:type Surf: Geom_Surface
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateCompositeCurve(*args))

    def Value(self, *args) -> "TopoDS_Wire const":
        """
        * Returns result of last translation or null wire if failed.
        	:rtype: TopoDS_Wire
        """
        return _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateCompositeCurve
StepToTopoDS_TranslateCompositeCurve.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Init, None, StepToTopoDS_TranslateCompositeCurve)
StepToTopoDS_TranslateCompositeCurve.IsInfiniteSegment = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_IsInfiniteSegment, None, StepToTopoDS_TranslateCompositeCurve)
StepToTopoDS_TranslateCompositeCurve.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Value, None, StepToTopoDS_TranslateCompositeCurve)
StepToTopoDS_TranslateCompositeCurve_swigregister = _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_swigregister
StepToTopoDS_TranslateCompositeCurve_swigregister(StepToTopoDS_TranslateCompositeCurve)

class StepToTopoDS_TranslateCurveBoundedSurface(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(self, *args) -> "Standard_Boolean":
        """
        * Translate surface
        	:param CBS:
        	:type CBS: StepGeom_CurveBoundedSurface
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:rtype: bool
        """
        return _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Init(self, *args)


    def __init__(self, *args):
        """
        * Create empty tool
        	:rtype: None
        * Translate surface
        	:param CBS:
        	:type CBS: StepGeom_CurveBoundedSurface
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateCurveBoundedSurface(*args))

    def Value(self, *args) -> "TopoDS_Face const":
        """
        * Returns result of last translation or null wire if failed.
        	:rtype: TopoDS_Face
        """
        return _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateCurveBoundedSurface
StepToTopoDS_TranslateCurveBoundedSurface.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Init, None, StepToTopoDS_TranslateCurveBoundedSurface)
StepToTopoDS_TranslateCurveBoundedSurface.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Value, None, StepToTopoDS_TranslateCurveBoundedSurface)
StepToTopoDS_TranslateCurveBoundedSurface_swigregister = _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_swigregister
StepToTopoDS_TranslateCurveBoundedSurface_swigregister(StepToTopoDS_TranslateCurveBoundedSurface)

class StepToTopoDS_TranslateEdge(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "StepToTopoDS_TranslateEdgeError":
        """:rtype: StepToTopoDS_TranslateEdgeError"""
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param E:
        	:type E: StepShape_Edge
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_Init(self, *args)


    def MakeFromCurve3D(self, *args) -> "void":
        """
        * Warning! C3D is assumed to be a Curve 3D ... other cases to checked before calling this
        	:param C3D:
        	:type C3D: StepGeom_Curve
        	:param EC:
        	:type EC: StepShape_EdgeCurve
        	:param Vend:
        	:type Vend: StepShape_Vertex
        	:param preci:
        	:type preci: float
        	:param E:
        	:type E: TopoDS_Edge
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_MakeFromCurve3D(self, *args)


    def MakePCurve(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        :param PCU:
        	:type PCU: StepGeom_Pcurve
        	:param ConvSurf:
        	:type ConvSurf: Geom_Surface
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_MakePCurve(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param E:
        	:type E: StepShape_Edge
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateEdge_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateEdge(*args))

    def Value(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateEdge
StepToTopoDS_TranslateEdge.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdge_Error, None, StepToTopoDS_TranslateEdge)
StepToTopoDS_TranslateEdge.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdge_Init, None, StepToTopoDS_TranslateEdge)
StepToTopoDS_TranslateEdge.MakeFromCurve3D = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdge_MakeFromCurve3D, None, StepToTopoDS_TranslateEdge)
StepToTopoDS_TranslateEdge.MakePCurve = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdge_MakePCurve, None, StepToTopoDS_TranslateEdge)
StepToTopoDS_TranslateEdge.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdge_Value, None, StepToTopoDS_TranslateEdge)
StepToTopoDS_TranslateEdge_swigregister = _StepToTopoDS.StepToTopoDS_TranslateEdge_swigregister
StepToTopoDS_TranslateEdge_swigregister(StepToTopoDS_TranslateEdge)

class StepToTopoDS_TranslateEdgeLoop(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "StepToTopoDS_TranslateEdgeLoopError":
        """:rtype: StepToTopoDS_TranslateEdgeLoopError"""
        return _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param FB:
        	:type FB: StepShape_FaceBound
        	:param F:
        	:type F: TopoDS_Face
        	:param S:
        	:type S: Geom_Surface
        	:param SS:
        	:type SS: StepGeom_Surface
        	:param ss:
        	:type ss: bool
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param FB:
        	:type FB: StepShape_FaceBound
        	:param F:
        	:type F: TopoDS_Face
        	:param S:
        	:type S: Geom_Surface
        	:param SS:
        	:type SS: StepGeom_Surface
        	:param ss:
        	:type ss: bool
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateEdgeLoop(*args))

    def Value(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateEdgeLoop
StepToTopoDS_TranslateEdgeLoop.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Error, None, StepToTopoDS_TranslateEdgeLoop)
StepToTopoDS_TranslateEdgeLoop.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Init, None, StepToTopoDS_TranslateEdgeLoop)
StepToTopoDS_TranslateEdgeLoop.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Value, None, StepToTopoDS_TranslateEdgeLoop)
StepToTopoDS_TranslateEdgeLoop_swigregister = _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_swigregister
StepToTopoDS_TranslateEdgeLoop_swigregister(StepToTopoDS_TranslateEdgeLoop)

class StepToTopoDS_TranslateFace(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "StepToTopoDS_TranslateFaceError":
        """:rtype: StepToTopoDS_TranslateFaceError"""
        return _StepToTopoDS.StepToTopoDS_TranslateFace_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param FS:
        	:type FS: StepShape_FaceSurface
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_TranslateFace_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param FS:
        	:type FS: StepShape_FaceSurface
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateFace_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateFace(*args))

    def Value(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _StepToTopoDS.StepToTopoDS_TranslateFace_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateFace
StepToTopoDS_TranslateFace.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateFace_Error, None, StepToTopoDS_TranslateFace)
StepToTopoDS_TranslateFace.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateFace_Init, None, StepToTopoDS_TranslateFace)
StepToTopoDS_TranslateFace.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateFace_Value, None, StepToTopoDS_TranslateFace)
StepToTopoDS_TranslateFace_swigregister = _StepToTopoDS.StepToTopoDS_TranslateFace_swigregister
StepToTopoDS_TranslateFace_swigregister(StepToTopoDS_TranslateFace)

class StepToTopoDS_TranslatePolyLoop(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "StepToTopoDS_TranslatePolyLoopError":
        """:rtype: StepToTopoDS_TranslatePolyLoopError"""
        return _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param PL:
        	:type PL: StepShape_PolyLoop
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param S:
        	:type S: Geom_Surface
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param PL:
        	:type PL: StepShape_PolyLoop
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param S:
        	:type S: Geom_Surface
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslatePolyLoop(*args))

    def Value(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslatePolyLoop
StepToTopoDS_TranslatePolyLoop.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Error, None, StepToTopoDS_TranslatePolyLoop)
StepToTopoDS_TranslatePolyLoop.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Init, None, StepToTopoDS_TranslatePolyLoop)
StepToTopoDS_TranslatePolyLoop.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Value, None, StepToTopoDS_TranslatePolyLoop)
StepToTopoDS_TranslatePolyLoop_swigregister = _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_swigregister
StepToTopoDS_TranslatePolyLoop_swigregister(StepToTopoDS_TranslatePolyLoop)

class StepToTopoDS_TranslateShell(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "StepToTopoDS_TranslateShellError":
        """:rtype: StepToTopoDS_TranslateShellError"""
        return _StepToTopoDS.StepToTopoDS_TranslateShell_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param CFS:
        	:type CFS: StepShape_ConnectedFaceSet
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_TranslateShell_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param CFS:
        	:type CFS: StepShape_ConnectedFaceSet
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateShell_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateShell(*args))

    def Value(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _StepToTopoDS.StepToTopoDS_TranslateShell_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateShell
StepToTopoDS_TranslateShell.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateShell_Error, None, StepToTopoDS_TranslateShell)
StepToTopoDS_TranslateShell.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateShell_Init, None, StepToTopoDS_TranslateShell)
StepToTopoDS_TranslateShell.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateShell_Value, None, StepToTopoDS_TranslateShell)
StepToTopoDS_TranslateShell_swigregister = _StepToTopoDS.StepToTopoDS_TranslateShell_swigregister
StepToTopoDS_TranslateShell_swigregister(StepToTopoDS_TranslateShell)

class StepToTopoDS_TranslateVertex(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "StepToTopoDS_TranslateVertexError":
        """:rtype: StepToTopoDS_TranslateVertexError"""
        return _StepToTopoDS.StepToTopoDS_TranslateVertex_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param V:
        	:type V: StepShape_Vertex
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertex_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param V:
        	:type V: StepShape_Vertex
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateVertex_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateVertex(*args))

    def Value(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _StepToTopoDS.StepToTopoDS_TranslateVertex_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateVertex
StepToTopoDS_TranslateVertex.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertex_Error, None, StepToTopoDS_TranslateVertex)
StepToTopoDS_TranslateVertex.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertex_Init, None, StepToTopoDS_TranslateVertex)
StepToTopoDS_TranslateVertex.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertex_Value, None, StepToTopoDS_TranslateVertex)
StepToTopoDS_TranslateVertex_swigregister = _StepToTopoDS.StepToTopoDS_TranslateVertex_swigregister
StepToTopoDS_TranslateVertex_swigregister(StepToTopoDS_TranslateVertex)

class StepToTopoDS_TranslateVertexLoop(StepToTopoDS_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "StepToTopoDS_TranslateVertexLoopError":
        """:rtype: StepToTopoDS_TranslateVertexLoopError"""
        return _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param VL:
        	:type VL: StepShape_VertexLoop
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param VL:
        	:type VL: StepShape_VertexLoop
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateVertexLoop(*args))

    def Value(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateVertexLoop
StepToTopoDS_TranslateVertexLoop.Error = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Error, None, StepToTopoDS_TranslateVertexLoop)
StepToTopoDS_TranslateVertexLoop.Init = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Init, None, StepToTopoDS_TranslateVertexLoop)
StepToTopoDS_TranslateVertexLoop.Value = new_instancemethod(_StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Value, None, StepToTopoDS_TranslateVertexLoop)
StepToTopoDS_TranslateVertexLoop_swigregister = _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_swigregister
StepToTopoDS_TranslateVertexLoop_swigregister(StepToTopoDS_TranslateVertexLoop)



