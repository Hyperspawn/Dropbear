# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TDataXtd module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tdataxtd.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TDataXtd.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TDataXtd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TDataXtd')
    _TDataXtd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TDataXtd', [dirname(__file__)])
        except ImportError:
            import _TDataXtd
            return _TDataXtd
        try:
            _mod = imp.load_module('_TDataXtd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TDataXtd = swig_import_helper()
    del swig_import_helper
else:
    import _TDataXtd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TDataXtd.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TDataXtd.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TDataXtd.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TDataXtd.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TDataXtd.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TDataXtd.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TDataXtd.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TDataXtd.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TDataXtd.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TDataXtd.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TDataXtd.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TDataXtd.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TDataXtd.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TDataXtd.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TDataXtd.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TDataXtd.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TDataXtd.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TDataXtd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TDataXtd.process_exception(error, method_name, class_name)
process_exception = _TDataXtd.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.gp
import OCC.Core.TNaming
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.TDataStd
import OCC.Core.Quantity
import OCC.Core.Poly
import OCC.Core.TColgp
import OCC.Core.TShort
TDataXtd_RADIUS = _TDataXtd.TDataXtd_RADIUS
TDataXtd_DIAMETER = _TDataXtd.TDataXtd_DIAMETER
TDataXtd_MINOR_RADIUS = _TDataXtd.TDataXtd_MINOR_RADIUS
TDataXtd_MAJOR_RADIUS = _TDataXtd.TDataXtd_MAJOR_RADIUS
TDataXtd_TANGENT = _TDataXtd.TDataXtd_TANGENT
TDataXtd_PARALLEL = _TDataXtd.TDataXtd_PARALLEL
TDataXtd_PERPENDICULAR = _TDataXtd.TDataXtd_PERPENDICULAR
TDataXtd_CONCENTRIC = _TDataXtd.TDataXtd_CONCENTRIC
TDataXtd_COINCIDENT = _TDataXtd.TDataXtd_COINCIDENT
TDataXtd_DISTANCE = _TDataXtd.TDataXtd_DISTANCE
TDataXtd_ANGLE = _TDataXtd.TDataXtd_ANGLE
TDataXtd_EQUAL_RADIUS = _TDataXtd.TDataXtd_EQUAL_RADIUS
TDataXtd_SYMMETRY = _TDataXtd.TDataXtd_SYMMETRY
TDataXtd_MIDPOINT = _TDataXtd.TDataXtd_MIDPOINT
TDataXtd_EQUAL_DISTANCE = _TDataXtd.TDataXtd_EQUAL_DISTANCE
TDataXtd_FIX = _TDataXtd.TDataXtd_FIX
TDataXtd_RIGID = _TDataXtd.TDataXtd_RIGID
TDataXtd_FROM = _TDataXtd.TDataXtd_FROM
TDataXtd_AXIS = _TDataXtd.TDataXtd_AXIS
TDataXtd_MATE = _TDataXtd.TDataXtd_MATE
TDataXtd_ALIGN_FACES = _TDataXtd.TDataXtd_ALIGN_FACES
TDataXtd_ALIGN_AXES = _TDataXtd.TDataXtd_ALIGN_AXES
TDataXtd_AXES_ANGLE = _TDataXtd.TDataXtd_AXES_ANGLE
TDataXtd_FACES_ANGLE = _TDataXtd.TDataXtd_FACES_ANGLE
TDataXtd_ROUND = _TDataXtd.TDataXtd_ROUND
TDataXtd_OFFSET = _TDataXtd.TDataXtd_OFFSET
TDataXtd_ANY_GEOM = _TDataXtd.TDataXtd_ANY_GEOM
TDataXtd_POINT = _TDataXtd.TDataXtd_POINT
TDataXtd_LINE = _TDataXtd.TDataXtd_LINE
TDataXtd_CIRCLE = _TDataXtd.TDataXtd_CIRCLE
TDataXtd_ELLIPSE = _TDataXtd.TDataXtd_ELLIPSE
TDataXtd_SPLINE = _TDataXtd.TDataXtd_SPLINE
TDataXtd_PLANE = _TDataXtd.TDataXtd_PLANE
TDataXtd_CYLINDER = _TDataXtd.TDataXtd_CYLINDER

def Handle_TDataXtd_Axis_Create() -> "opencascade::handle< TDataXtd_Axis >":
    return _TDataXtd.Handle_TDataXtd_Axis_Create()
Handle_TDataXtd_Axis_Create = _TDataXtd.Handle_TDataXtd_Axis_Create

def Handle_TDataXtd_Axis_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_Axis >":
    return _TDataXtd.Handle_TDataXtd_Axis_DownCast(t)
Handle_TDataXtd_Axis_DownCast = _TDataXtd.Handle_TDataXtd_Axis_DownCast

def Handle_TDataXtd_Axis_IsNull(t: 'opencascade::handle< TDataXtd_Axis > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_Axis_IsNull(t)
Handle_TDataXtd_Axis_IsNull = _TDataXtd.Handle_TDataXtd_Axis_IsNull

def Handle_TDataXtd_Constraint_Create() -> "opencascade::handle< TDataXtd_Constraint >":
    return _TDataXtd.Handle_TDataXtd_Constraint_Create()
Handle_TDataXtd_Constraint_Create = _TDataXtd.Handle_TDataXtd_Constraint_Create

def Handle_TDataXtd_Constraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_Constraint >":
    return _TDataXtd.Handle_TDataXtd_Constraint_DownCast(t)
Handle_TDataXtd_Constraint_DownCast = _TDataXtd.Handle_TDataXtd_Constraint_DownCast

def Handle_TDataXtd_Constraint_IsNull(t: 'opencascade::handle< TDataXtd_Constraint > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_Constraint_IsNull(t)
Handle_TDataXtd_Constraint_IsNull = _TDataXtd.Handle_TDataXtd_Constraint_IsNull

def Handle_TDataXtd_Geometry_Create() -> "opencascade::handle< TDataXtd_Geometry >":
    return _TDataXtd.Handle_TDataXtd_Geometry_Create()
Handle_TDataXtd_Geometry_Create = _TDataXtd.Handle_TDataXtd_Geometry_Create

def Handle_TDataXtd_Geometry_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_Geometry >":
    return _TDataXtd.Handle_TDataXtd_Geometry_DownCast(t)
Handle_TDataXtd_Geometry_DownCast = _TDataXtd.Handle_TDataXtd_Geometry_DownCast

def Handle_TDataXtd_Geometry_IsNull(t: 'opencascade::handle< TDataXtd_Geometry > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_Geometry_IsNull(t)
Handle_TDataXtd_Geometry_IsNull = _TDataXtd.Handle_TDataXtd_Geometry_IsNull

def Handle_TDataXtd_Pattern_Create() -> "opencascade::handle< TDataXtd_Pattern >":
    return _TDataXtd.Handle_TDataXtd_Pattern_Create()
Handle_TDataXtd_Pattern_Create = _TDataXtd.Handle_TDataXtd_Pattern_Create

def Handle_TDataXtd_Pattern_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_Pattern >":
    return _TDataXtd.Handle_TDataXtd_Pattern_DownCast(t)
Handle_TDataXtd_Pattern_DownCast = _TDataXtd.Handle_TDataXtd_Pattern_DownCast

def Handle_TDataXtd_Pattern_IsNull(t: 'opencascade::handle< TDataXtd_Pattern > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_Pattern_IsNull(t)
Handle_TDataXtd_Pattern_IsNull = _TDataXtd.Handle_TDataXtd_Pattern_IsNull

def Handle_TDataXtd_Placement_Create() -> "opencascade::handle< TDataXtd_Placement >":
    return _TDataXtd.Handle_TDataXtd_Placement_Create()
Handle_TDataXtd_Placement_Create = _TDataXtd.Handle_TDataXtd_Placement_Create

def Handle_TDataXtd_Placement_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_Placement >":
    return _TDataXtd.Handle_TDataXtd_Placement_DownCast(t)
Handle_TDataXtd_Placement_DownCast = _TDataXtd.Handle_TDataXtd_Placement_DownCast

def Handle_TDataXtd_Placement_IsNull(t: 'opencascade::handle< TDataXtd_Placement > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_Placement_IsNull(t)
Handle_TDataXtd_Placement_IsNull = _TDataXtd.Handle_TDataXtd_Placement_IsNull

def Handle_TDataXtd_Plane_Create() -> "opencascade::handle< TDataXtd_Plane >":
    return _TDataXtd.Handle_TDataXtd_Plane_Create()
Handle_TDataXtd_Plane_Create = _TDataXtd.Handle_TDataXtd_Plane_Create

def Handle_TDataXtd_Plane_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_Plane >":
    return _TDataXtd.Handle_TDataXtd_Plane_DownCast(t)
Handle_TDataXtd_Plane_DownCast = _TDataXtd.Handle_TDataXtd_Plane_DownCast

def Handle_TDataXtd_Plane_IsNull(t: 'opencascade::handle< TDataXtd_Plane > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_Plane_IsNull(t)
Handle_TDataXtd_Plane_IsNull = _TDataXtd.Handle_TDataXtd_Plane_IsNull

def Handle_TDataXtd_Point_Create() -> "opencascade::handle< TDataXtd_Point >":
    return _TDataXtd.Handle_TDataXtd_Point_Create()
Handle_TDataXtd_Point_Create = _TDataXtd.Handle_TDataXtd_Point_Create

def Handle_TDataXtd_Point_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_Point >":
    return _TDataXtd.Handle_TDataXtd_Point_DownCast(t)
Handle_TDataXtd_Point_DownCast = _TDataXtd.Handle_TDataXtd_Point_DownCast

def Handle_TDataXtd_Point_IsNull(t: 'opencascade::handle< TDataXtd_Point > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_Point_IsNull(t)
Handle_TDataXtd_Point_IsNull = _TDataXtd.Handle_TDataXtd_Point_IsNull

def Handle_TDataXtd_Position_Create() -> "opencascade::handle< TDataXtd_Position >":
    return _TDataXtd.Handle_TDataXtd_Position_Create()
Handle_TDataXtd_Position_Create = _TDataXtd.Handle_TDataXtd_Position_Create

def Handle_TDataXtd_Position_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_Position >":
    return _TDataXtd.Handle_TDataXtd_Position_DownCast(t)
Handle_TDataXtd_Position_DownCast = _TDataXtd.Handle_TDataXtd_Position_DownCast

def Handle_TDataXtd_Position_IsNull(t: 'opencascade::handle< TDataXtd_Position > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_Position_IsNull(t)
Handle_TDataXtd_Position_IsNull = _TDataXtd.Handle_TDataXtd_Position_IsNull

def Handle_TDataXtd_Presentation_Create() -> "opencascade::handle< TDataXtd_Presentation >":
    return _TDataXtd.Handle_TDataXtd_Presentation_Create()
Handle_TDataXtd_Presentation_Create = _TDataXtd.Handle_TDataXtd_Presentation_Create

def Handle_TDataXtd_Presentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_Presentation >":
    return _TDataXtd.Handle_TDataXtd_Presentation_DownCast(t)
Handle_TDataXtd_Presentation_DownCast = _TDataXtd.Handle_TDataXtd_Presentation_DownCast

def Handle_TDataXtd_Presentation_IsNull(t: 'opencascade::handle< TDataXtd_Presentation > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_Presentation_IsNull(t)
Handle_TDataXtd_Presentation_IsNull = _TDataXtd.Handle_TDataXtd_Presentation_IsNull

def Handle_TDataXtd_Shape_Create() -> "opencascade::handle< TDataXtd_Shape >":
    return _TDataXtd.Handle_TDataXtd_Shape_Create()
Handle_TDataXtd_Shape_Create = _TDataXtd.Handle_TDataXtd_Shape_Create

def Handle_TDataXtd_Shape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_Shape >":
    return _TDataXtd.Handle_TDataXtd_Shape_DownCast(t)
Handle_TDataXtd_Shape_DownCast = _TDataXtd.Handle_TDataXtd_Shape_DownCast

def Handle_TDataXtd_Shape_IsNull(t: 'opencascade::handle< TDataXtd_Shape > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_Shape_IsNull(t)
Handle_TDataXtd_Shape_IsNull = _TDataXtd.Handle_TDataXtd_Shape_IsNull

def Handle_TDataXtd_Triangulation_Create() -> "opencascade::handle< TDataXtd_Triangulation >":
    return _TDataXtd.Handle_TDataXtd_Triangulation_Create()
Handle_TDataXtd_Triangulation_Create = _TDataXtd.Handle_TDataXtd_Triangulation_Create

def Handle_TDataXtd_Triangulation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_Triangulation >":
    return _TDataXtd.Handle_TDataXtd_Triangulation_DownCast(t)
Handle_TDataXtd_Triangulation_DownCast = _TDataXtd.Handle_TDataXtd_Triangulation_DownCast

def Handle_TDataXtd_Triangulation_IsNull(t: 'opencascade::handle< TDataXtd_Triangulation > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_Triangulation_IsNull(t)
Handle_TDataXtd_Triangulation_IsNull = _TDataXtd.Handle_TDataXtd_Triangulation_IsNull

def Handle_TDataXtd_PatternStd_Create() -> "opencascade::handle< TDataXtd_PatternStd >":
    return _TDataXtd.Handle_TDataXtd_PatternStd_Create()
Handle_TDataXtd_PatternStd_Create = _TDataXtd.Handle_TDataXtd_PatternStd_Create

def Handle_TDataXtd_PatternStd_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_PatternStd >":
    return _TDataXtd.Handle_TDataXtd_PatternStd_DownCast(t)
Handle_TDataXtd_PatternStd_DownCast = _TDataXtd.Handle_TDataXtd_PatternStd_DownCast

def Handle_TDataXtd_PatternStd_IsNull(t: 'opencascade::handle< TDataXtd_PatternStd > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_PatternStd_IsNull(t)
Handle_TDataXtd_PatternStd_IsNull = _TDataXtd.Handle_TDataXtd_PatternStd_IsNull

def Handle_TDataXtd_HArray1OfTrsf_Create() -> "opencascade::handle< TDataXtd_HArray1OfTrsf >":
    return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_Create()
Handle_TDataXtd_HArray1OfTrsf_Create = _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_Create

def Handle_TDataXtd_HArray1OfTrsf_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataXtd_HArray1OfTrsf >":
    return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_DownCast(t)
Handle_TDataXtd_HArray1OfTrsf_DownCast = _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_DownCast

def Handle_TDataXtd_HArray1OfTrsf_IsNull(t: 'opencascade::handle< TDataXtd_HArray1OfTrsf > const &') -> "bool":
    return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_IsNull(t)
Handle_TDataXtd_HArray1OfTrsf_IsNull = _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_IsNull
class TDataXtd_Array1OfTrsf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.TDataXtd_Array1OfTrsf_swiginit(self, _TDataXtd.new_TDataXtd_Array1OfTrsf(*args))
    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Array1OfTrsf

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TDataXtd_Array1OfTrsf.begin = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_begin, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.end = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_end, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.cbegin = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_cbegin, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.cend = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_cend, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Init = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Init, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Size = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Size, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Length = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Length, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.IsEmpty = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_IsEmpty, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Lower = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Lower, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Upper = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Upper, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.IsDeletable = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_IsDeletable, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.IsAllocated = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_IsAllocated, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Assign = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Assign, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Move = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Move, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Set = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Set, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.First = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_First, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.ChangeFirst = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_ChangeFirst, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Last = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Last, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.ChangeLast = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_ChangeLast, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Value = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Value, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.ChangeValue = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_ChangeValue, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.__call__ = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf___call__, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.SetValue = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_SetValue, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf.Resize = new_instancemethod(_TDataXtd.TDataXtd_Array1OfTrsf_Resize, None, TDataXtd_Array1OfTrsf)
TDataXtd_Array1OfTrsf_swigregister = _TDataXtd.TDataXtd_Array1OfTrsf_swigregister
TDataXtd_Array1OfTrsf_swigregister(TDataXtd_Array1OfTrsf)

class tdataxtd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IDList(*args) -> "void":
        """
        * Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use. Print of TDataExt enumeration =============================
        	:param anIDList:
        	:type anIDList: TDF_IDList
        	:rtype: void
        """
        return _TDataXtd.tdataxtd_IDList(*args)

    IDList = staticmethod(IDList)

    def Print(*args) -> "Standard_OStream &":
        """
        * Prints the name of the geometry dimension <GEO> as a String on the Stream <S> and returns <S>.
        	:param GEO:
        	:type GEO: TDataXtd_GeometryEnum
        	:param S:
        	:type S: Standard_OStream
        	:rtype: Standard_OStream
        * Prints the name of the constraint <CTR> as a String on the Stream <S> and returns <S>.
        	:param CTR:
        	:type CTR: TDataXtd_ConstraintEnum
        	:param S:
        	:type S: Standard_OStream
        	:rtype: Standard_OStream
        """
        return _TDataXtd.tdataxtd_Print(*args)

    Print = staticmethod(Print)

    __repr__ = _dumps_object


    def __init__(self):
        _TDataXtd.tdataxtd_swiginit(self, _TDataXtd.new_tdataxtd())
    __swig_destroy__ = _TDataXtd.delete_tdataxtd
tdataxtd_swigregister = _TDataXtd.tdataxtd_swigregister
tdataxtd_swigregister(tdataxtd)

def tdataxtd_IDList(*args) -> "void":
    """
    * Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use. Print of TDataExt enumeration =============================
    	:param anIDList:
    	:type anIDList: TDF_IDList
    	:rtype: void
    """
    return _TDataXtd.tdataxtd_IDList(*args)

def tdataxtd_Print(*args) -> "Standard_OStream &":
    """
    * Prints the name of the geometry dimension <GEO> as a String on the Stream <S> and returns <S>.
    	:param GEO:
    	:type GEO: TDataXtd_GeometryEnum
    	:param S:
    	:type S: Standard_OStream
    	:rtype: Standard_OStream
    * Prints the name of the constraint <CTR> as a String on the Stream <S> and returns <S>.
    	:param CTR:
    	:type CTR: TDataXtd_ConstraintEnum
    	:param S:
    	:type S: Standard_OStream
    	:rtype: Standard_OStream
    """
    return _TDataXtd.tdataxtd_Print(*args)

class TDataXtd_Axis(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataXtd_Axis self) -> std::string"""
        return _TDataXtd.TDataXtd_Axis_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * class methods ============= Returns the GUID for an axis.
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Axis_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args) -> "opencascade::handle< TDataXtd_Axis >":
        """
        * Finds or creates an axis attribute defined by the label. In the case of a creation of an axis, a compatible named shape should already be associated with label. Exceptions Standard_NullObject if no compatible named shape is associated with the label.
        	:param label:
        	:type label: TDF_Label
        	:rtype: opencascade::handle<TDataXtd_Axis>
        * Find, or create, an Axis attribute and set <P> as generated in the associated NamedShape. Axis methods ============
        	:param label:
        	:type label: TDF_Label
        	:param L:
        	:type L: gp_Lin
        	:rtype: opencascade::handle<TDataXtd_Axis>
        """
        return _TDataXtd.TDataXtd_Axis_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """:rtype: None"""
        _TDataXtd.TDataXtd_Axis_swiginit(self, _TDataXtd.new_TDataXtd_Axis(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Axis_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Axis
TDataXtd_Axis.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Axis_DumpToString, None, TDataXtd_Axis)
TDataXtd_Axis_swigregister = _TDataXtd.TDataXtd_Axis_swigregister
TDataXtd_Axis_swigregister(TDataXtd_Axis)

def TDataXtd_Axis_GetID(*args) -> "Standard_GUID const &":
    """
    * class methods ============= Returns the GUID for an axis.
    	:rtype: Standard_GUID
    """
    return _TDataXtd.TDataXtd_Axis_GetID(*args)

def TDataXtd_Axis_Set(*args) -> "opencascade::handle< TDataXtd_Axis >":
    """
    * Finds or creates an axis attribute defined by the label. In the case of a creation of an axis, a compatible named shape should already be associated with label. Exceptions Standard_NullObject if no compatible named shape is associated with the label.
    	:param label:
    	:type label: TDF_Label
    	:rtype: opencascade::handle<TDataXtd_Axis>
    * Find, or create, an Axis attribute and set <P> as generated in the associated NamedShape. Axis methods ============
    	:param label:
    	:type label: TDF_Label
    	:param L:
    	:type L: gp_Lin
    	:rtype: opencascade::handle<TDataXtd_Axis>
    """
    return _TDataXtd.TDataXtd_Axis_Set(*args)

class TDataXtd_Constraint(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ClearGeometries(self, *args) -> "void":
        """
        * Removes the geometries involved in the constraint or dimension from the array of topological attributes where they are stored.
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Constraint_ClearGeometries(self, *args)


    def CollectChildConstraints(*args) -> "void":
        """
        * collects constraints on Childs for label <aLabel>
        	:param aLabel:
        	:type aLabel: TDF_Label
        	:param TheList:
        	:type TheList: TDF_LabelList
        	:rtype: void
        """
        return _TDataXtd.TDataXtd_Constraint_CollectChildConstraints(*args)

    CollectChildConstraints = staticmethod(CollectChildConstraints)

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataXtd_Constraint self) -> std::string"""
        return _TDataXtd.TDataXtd_Constraint_DumpToString(self)


    def GetGeometry(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """
        * Returns the integer index Index used to access the array of the constraint or stored geometries of a dimension Index has a value between 1 and 4. methods to write constraint fields (use builder) ==================================
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<TNaming_NamedShape>
        """
        return _TDataXtd.TDataXtd_Constraint_GetGeometry(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns the GUID for constraints.
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Constraint_GetID(*args)

    GetID = staticmethod(GetID)

    def GetPlane(self, *args) -> "opencascade::handle< TNaming_NamedShape > const &":
        """
        * Returns the topological attribute of the plane used for planar - i.e., 2D - constraints. This plane is attached to another label. If the constraint is not planar, in other words, 3D, this function will return a null handle.
        	:rtype: opencascade::handle<TNaming_NamedShape>
        """
        return _TDataXtd.TDataXtd_Constraint_GetPlane(self, *args)


    def GetType(self, *args) -> "TDataXtd_ConstraintEnum":
        """
        * Returns the type of constraint. This will be an element of the TDataXtd_ConstraintEnum enumeration.
        	:rtype: TDataXtd_ConstraintEnum
        """
        return _TDataXtd.TDataXtd_Constraint_GetType(self, *args)


    def GetValue(self, *args) -> "opencascade::handle< TDataStd_Real > const &":
        """
        * Returns the value of a dimension. This value is a reference to a TDataStd_Real attribute. If the attribute is not a dimension, this value will be 0. Use IsDimension to test this condition.
        	:rtype: opencascade::handle<TDataStd_Real>
        """
        return _TDataXtd.TDataXtd_Constraint_GetValue(self, *args)


    def Inverted(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: bool
        	:rtype: None
        :rtype: bool
        """
        return _TDataXtd.TDataXtd_Constraint_Inverted(self, *args)


    def IsDimension(self, *args) -> "Standard_Boolean":
        """
        * Returns true if this constraint attribute is a dimension, and therefore has a value.
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Constraint_IsDimension(self, *args)


    def IsPlanar(self, *args) -> "Standard_Boolean":
        """
        * Returns true if this constraint attribute is two-dimensional.
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Constraint_IsPlanar(self, *args)


    def NbGeometries(self, *args) -> "Standard_Integer":
        """
        * Returns the number of geometry attributes in this constraint attribute. This number will be between 1 and 4.
        	:rtype: int
        """
        return _TDataXtd.TDataXtd_Constraint_NbGeometries(self, *args)


    def Reversed(self, *args) -> "Standard_Boolean":
        """
        :param status:
        	:type status: bool
        	:rtype: None
        :rtype: bool
        """
        return _TDataXtd.TDataXtd_Constraint_Reversed(self, *args)


    def Set(self, *args) -> "void":
        """
        * Finds or creates the 2D constraint attribute defined by the planar topological attribute plane and the label label. Constraint methods ==================
        	:param label:
        	:type label: TDF_Label
        	:rtype: opencascade::handle<TDataXtd_Constraint>
        * Finds or creates the constraint attribute defined by the topological attribute G1 and the constraint type type.
        	:param type:
        	:type type: TDataXtd_ConstraintEnum
        	:param G1:
        	:type G1: TNaming_NamedShape
        	:rtype: None
        * Finds or creates the constraint attribute defined by the topological attributes G1 and G2, and by the constraint type type.
        	:param type:
        	:type type: TDataXtd_ConstraintEnum
        	:param G1:
        	:type G1: TNaming_NamedShape
        	:param G2:
        	:type G2: TNaming_NamedShape
        	:rtype: None
        * Finds or creates the constraint attribute defined by the topological attributes G1, G2 and G3, and by the constraint type type.
        	:param type:
        	:type type: TDataXtd_ConstraintEnum
        	:param G1:
        	:type G1: TNaming_NamedShape
        	:param G2:
        	:type G2: TNaming_NamedShape
        	:param G3:
        	:type G3: TNaming_NamedShape
        	:rtype: None
        * Finds or creates the constraint attribute defined by the topological attributes G1, G2, G3 and G4, and by the constraint type type. methods to read constraint fields =================================
        	:param type:
        	:type type: TDataXtd_ConstraintEnum
        	:param G1:
        	:type G1: TNaming_NamedShape
        	:param G2:
        	:type G2: TNaming_NamedShape
        	:param G3:
        	:type G3: TNaming_NamedShape
        	:param G4:
        	:type G4: TNaming_NamedShape
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Constraint_Set(self, *args)


    def SetGeometry(self, *args) -> "void":
        """
        * Finds or creates the underlying geometry of the constraint defined by the topological attribute G and the integer index Index.
        	:param Index:
        	:type Index: int
        	:param G:
        	:type G: TNaming_NamedShape
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Constraint_SetGeometry(self, *args)


    def SetPlane(self, *args) -> "void":
        """
        * Finds or creates the plane of the 2D constraint attribute, defined by the planar topological attribute plane.
        	:param plane:
        	:type plane: TNaming_NamedShape
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Constraint_SetPlane(self, *args)


    def SetType(self, *args) -> "void":
        """
        * Finds or creates the type of constraint CTR.
        	:param CTR:
        	:type CTR: TDataXtd_ConstraintEnum
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Constraint_SetType(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Finds or creates the real number value V of the dimension constraint attribute.
        	:param V:
        	:type V: TDataStd_Real
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Constraint_SetValue(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TDataXtd.TDataXtd_Constraint_swiginit(self, _TDataXtd.new_TDataXtd_Constraint(*args))

    def Verified(self, *args) -> "void":
        """
        * Returns true if this constraint attribute is valid. By default, true is returned. When the value of a dimension is changed or when a geometry is moved, false is returned until the solver sets it back to true.
        	:rtype: bool
        * Returns true if this constraint attribute defined by status is valid. By default, true is returned. When the value of a dimension is changed or when a geometry is moved, false is returned until the solver sets it back to true. If status is false, Verified is set to false.
        	:param status:
        	:type status: bool
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Constraint_Verified(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Constraint
TDataXtd_Constraint.ClearGeometries = new_instancemethod(_TDataXtd.TDataXtd_Constraint_ClearGeometries, None, TDataXtd_Constraint)
TDataXtd_Constraint.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Constraint_DumpToString, None, TDataXtd_Constraint)
TDataXtd_Constraint.GetGeometry = new_instancemethod(_TDataXtd.TDataXtd_Constraint_GetGeometry, None, TDataXtd_Constraint)
TDataXtd_Constraint.GetPlane = new_instancemethod(_TDataXtd.TDataXtd_Constraint_GetPlane, None, TDataXtd_Constraint)
TDataXtd_Constraint.GetType = new_instancemethod(_TDataXtd.TDataXtd_Constraint_GetType, None, TDataXtd_Constraint)
TDataXtd_Constraint.GetValue = new_instancemethod(_TDataXtd.TDataXtd_Constraint_GetValue, None, TDataXtd_Constraint)
TDataXtd_Constraint.Inverted = new_instancemethod(_TDataXtd.TDataXtd_Constraint_Inverted, None, TDataXtd_Constraint)
TDataXtd_Constraint.IsDimension = new_instancemethod(_TDataXtd.TDataXtd_Constraint_IsDimension, None, TDataXtd_Constraint)
TDataXtd_Constraint.IsPlanar = new_instancemethod(_TDataXtd.TDataXtd_Constraint_IsPlanar, None, TDataXtd_Constraint)
TDataXtd_Constraint.NbGeometries = new_instancemethod(_TDataXtd.TDataXtd_Constraint_NbGeometries, None, TDataXtd_Constraint)
TDataXtd_Constraint.Reversed = new_instancemethod(_TDataXtd.TDataXtd_Constraint_Reversed, None, TDataXtd_Constraint)
TDataXtd_Constraint.Set = new_instancemethod(_TDataXtd.TDataXtd_Constraint_Set, None, TDataXtd_Constraint)
TDataXtd_Constraint.SetGeometry = new_instancemethod(_TDataXtd.TDataXtd_Constraint_SetGeometry, None, TDataXtd_Constraint)
TDataXtd_Constraint.SetPlane = new_instancemethod(_TDataXtd.TDataXtd_Constraint_SetPlane, None, TDataXtd_Constraint)
TDataXtd_Constraint.SetType = new_instancemethod(_TDataXtd.TDataXtd_Constraint_SetType, None, TDataXtd_Constraint)
TDataXtd_Constraint.SetValue = new_instancemethod(_TDataXtd.TDataXtd_Constraint_SetValue, None, TDataXtd_Constraint)
TDataXtd_Constraint.Verified = new_instancemethod(_TDataXtd.TDataXtd_Constraint_Verified, None, TDataXtd_Constraint)
TDataXtd_Constraint_swigregister = _TDataXtd.TDataXtd_Constraint_swigregister
TDataXtd_Constraint_swigregister(TDataXtd_Constraint)

def TDataXtd_Constraint_CollectChildConstraints(*args) -> "void":
    """
    * collects constraints on Childs for label <aLabel>
    	:param aLabel:
    	:type aLabel: TDF_Label
    	:param TheList:
    	:type TheList: TDF_LabelList
    	:rtype: void
    """
    return _TDataXtd.TDataXtd_Constraint_CollectChildConstraints(*args)

def TDataXtd_Constraint_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns the GUID for constraints.
    	:rtype: Standard_GUID
    """
    return _TDataXtd.TDataXtd_Constraint_GetID(*args)

class TDataXtd_Geometry(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Axis(*args) -> "Standard_Boolean":
        """
        * Returns the axis attribute defined by the label L and the axis G.
        	:param L:
        	:type L: TDF_Label
        	:param G:
        	:type G: gp_Ax1
        	:rtype: bool
        * Returns the axis attribute defined by the topological attribute S and the axis G.
        	:param S:
        	:type S: TNaming_NamedShape
        	:param G:
        	:type G: gp_Ax1
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Geometry_Axis(*args)

    Axis = staticmethod(Axis)

    def Circle(*args) -> "Standard_Boolean":
        """
        * Returns the circle attribute defined by the label L and the circle G.
        	:param L:
        	:type L: TDF_Label
        	:param G:
        	:type G: gp_Circ
        	:rtype: bool
        * Returns the circle attribute defined by the topological attribute S and the circle G.
        	:param S:
        	:type S: TNaming_NamedShape
        	:param G:
        	:type G: gp_Circ
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Geometry_Circle(*args)

    Circle = staticmethod(Circle)

    def Cylinder(*args) -> "Standard_Boolean":
        """
        * Returns the cylinder attribute defined by the label L and the cylinder G.
        	:param L:
        	:type L: TDF_Label
        	:param G:
        	:type G: gp_Cylinder
        	:rtype: bool
        * Returns the cylinder attribute defined by the topological attribute S and the cylinder G.
        	:param S:
        	:type S: TNaming_NamedShape
        	:param G:
        	:type G: gp_Cylinder
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Geometry_Cylinder(*args)

    Cylinder = staticmethod(Cylinder)

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataXtd_Geometry self) -> std::string"""
        return _TDataXtd.TDataXtd_Geometry_DumpToString(self)


    def Ellipse(*args) -> "Standard_Boolean":
        """
        * Returns the ellipse attribute defined by the label L and the ellipse G.
        	:param L:
        	:type L: TDF_Label
        	:param G:
        	:type G: gp_Elips
        	:rtype: bool
        * Returns the ellipse attribute defined by the topological attribute S and the ellipse G.
        	:param S:
        	:type S: TNaming_NamedShape
        	:param G:
        	:type G: gp_Elips
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Geometry_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns the GUID for geometry attributes.
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Geometry_GetID(*args)

    GetID = staticmethod(GetID)

    def GetType(self, *args) -> "TDataXtd_GeometryEnum":
        """
        * Returns the type of geometric construction.
        	:rtype: TDataXtd_GeometryEnum
        """
        return _TDataXtd.TDataXtd_Geometry_GetType(self, *args)


    def Line(*args) -> "Standard_Boolean":
        """
        * Returns the line attribute defined by the label L and the line G.
        	:param L:
        	:type L: TDF_Label
        	:param G:
        	:type G: gp_Lin
        	:rtype: bool
        * Returns the line attribute defined by the topological attribute S and the line G.
        	:param S:
        	:type S: TNaming_NamedShape
        	:param G:
        	:type G: gp_Lin
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Geometry_Line(*args)

    Line = staticmethod(Line)

    def Plane(*args) -> "Standard_Boolean":
        """
        * Returns the plane attribute defined by the label L and the plane G.
        	:param L:
        	:type L: TDF_Label
        	:param G:
        	:type G: gp_Pln
        	:rtype: bool
        * Returns the plane attribute defined by the topological attribute S and the plane G.
        	:param S:
        	:type S: TNaming_NamedShape
        	:param G:
        	:type G: gp_Pln
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Geometry_Plane(*args)

    Plane = staticmethod(Plane)

    def Point(*args) -> "Standard_Boolean":
        """
        * Returns the point attribute defined by the label L and the point G.
        	:param L:
        	:type L: TDF_Label
        	:param G:
        	:type G: gp_Pnt
        	:rtype: bool
        * Returns the point attribute defined by the topological attribute S and the point G.
        	:param S:
        	:type S: TNaming_NamedShape
        	:param G:
        	:type G: gp_Pnt
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Geometry_Point(*args)

    Point = staticmethod(Point)

    def Set(*args) -> "opencascade::handle< TDataXtd_Geometry >":
        """
        * API class methods ================= Finds, or creates, a Geometry attribute defined by the label label. The default type of geometry is the value ANY_GEOM of the enumeration TDataXtd_GeometryEnum. To specify another value of this enumeration, use the function SetType.
        	:param label:
        	:type label: TDF_Label
        	:rtype: opencascade::handle<TDataXtd_Geometry>
        """
        return _TDataXtd.TDataXtd_Geometry_Set(*args)

    Set = staticmethod(Set)

    def SetType(self, *args) -> "void":
        """
        * Returns the type of geometric construction T of this attribute. T will be a value of the enumeration TDataXtd_GeometryEnum.
        	:param T:
        	:type T: TDataXtd_GeometryEnum
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Geometry_SetType(self, *args)


    def __init__(self, *args):
        """
        * This and the next methods are used to retrieve underlying geometry of the NamedShape, even if noone Geometry Attribute is associated . if not found or not compliant geometry return False.
        	:rtype: None
        """
        _TDataXtd.TDataXtd_Geometry_swiginit(self, _TDataXtd.new_TDataXtd_Geometry(*args))

    def Type(*args) -> "TDataXtd_GeometryEnum":
        """
        * Returns the label L used to define the type of geometric construction for the geometry attribute.
        	:param L:
        	:type L: TDF_Label
        	:rtype: TDataXtd_GeometryEnum
        * Returns the topological attribute S used to define the type of geometric construction for the geometry attribute.
        	:param S:
        	:type S: TNaming_NamedShape
        	:rtype: TDataXtd_GeometryEnum
        """
        return _TDataXtd.TDataXtd_Geometry_Type(*args)

    Type = staticmethod(Type)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Geometry_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Geometry
TDataXtd_Geometry.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Geometry_DumpToString, None, TDataXtd_Geometry)
TDataXtd_Geometry.GetType = new_instancemethod(_TDataXtd.TDataXtd_Geometry_GetType, None, TDataXtd_Geometry)
TDataXtd_Geometry.SetType = new_instancemethod(_TDataXtd.TDataXtd_Geometry_SetType, None, TDataXtd_Geometry)
TDataXtd_Geometry_swigregister = _TDataXtd.TDataXtd_Geometry_swigregister
TDataXtd_Geometry_swigregister(TDataXtd_Geometry)

def TDataXtd_Geometry_Axis(*args) -> "Standard_Boolean":
    """
    * Returns the axis attribute defined by the label L and the axis G.
    	:param L:
    	:type L: TDF_Label
    	:param G:
    	:type G: gp_Ax1
    	:rtype: bool
    * Returns the axis attribute defined by the topological attribute S and the axis G.
    	:param S:
    	:type S: TNaming_NamedShape
    	:param G:
    	:type G: gp_Ax1
    	:rtype: bool
    """
    return _TDataXtd.TDataXtd_Geometry_Axis(*args)

def TDataXtd_Geometry_Circle(*args) -> "Standard_Boolean":
    """
    * Returns the circle attribute defined by the label L and the circle G.
    	:param L:
    	:type L: TDF_Label
    	:param G:
    	:type G: gp_Circ
    	:rtype: bool
    * Returns the circle attribute defined by the topological attribute S and the circle G.
    	:param S:
    	:type S: TNaming_NamedShape
    	:param G:
    	:type G: gp_Circ
    	:rtype: bool
    """
    return _TDataXtd.TDataXtd_Geometry_Circle(*args)

def TDataXtd_Geometry_Cylinder(*args) -> "Standard_Boolean":
    """
    * Returns the cylinder attribute defined by the label L and the cylinder G.
    	:param L:
    	:type L: TDF_Label
    	:param G:
    	:type G: gp_Cylinder
    	:rtype: bool
    * Returns the cylinder attribute defined by the topological attribute S and the cylinder G.
    	:param S:
    	:type S: TNaming_NamedShape
    	:param G:
    	:type G: gp_Cylinder
    	:rtype: bool
    """
    return _TDataXtd.TDataXtd_Geometry_Cylinder(*args)

def TDataXtd_Geometry_Ellipse(*args) -> "Standard_Boolean":
    """
    * Returns the ellipse attribute defined by the label L and the ellipse G.
    	:param L:
    	:type L: TDF_Label
    	:param G:
    	:type G: gp_Elips
    	:rtype: bool
    * Returns the ellipse attribute defined by the topological attribute S and the ellipse G.
    	:param S:
    	:type S: TNaming_NamedShape
    	:param G:
    	:type G: gp_Elips
    	:rtype: bool
    """
    return _TDataXtd.TDataXtd_Geometry_Ellipse(*args)

def TDataXtd_Geometry_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns the GUID for geometry attributes.
    	:rtype: Standard_GUID
    """
    return _TDataXtd.TDataXtd_Geometry_GetID(*args)

def TDataXtd_Geometry_Line(*args) -> "Standard_Boolean":
    """
    * Returns the line attribute defined by the label L and the line G.
    	:param L:
    	:type L: TDF_Label
    	:param G:
    	:type G: gp_Lin
    	:rtype: bool
    * Returns the line attribute defined by the topological attribute S and the line G.
    	:param S:
    	:type S: TNaming_NamedShape
    	:param G:
    	:type G: gp_Lin
    	:rtype: bool
    """
    return _TDataXtd.TDataXtd_Geometry_Line(*args)

def TDataXtd_Geometry_Plane(*args) -> "Standard_Boolean":
    """
    * Returns the plane attribute defined by the label L and the plane G.
    	:param L:
    	:type L: TDF_Label
    	:param G:
    	:type G: gp_Pln
    	:rtype: bool
    * Returns the plane attribute defined by the topological attribute S and the plane G.
    	:param S:
    	:type S: TNaming_NamedShape
    	:param G:
    	:type G: gp_Pln
    	:rtype: bool
    """
    return _TDataXtd.TDataXtd_Geometry_Plane(*args)

def TDataXtd_Geometry_Point(*args) -> "Standard_Boolean":
    """
    * Returns the point attribute defined by the label L and the point G.
    	:param L:
    	:type L: TDF_Label
    	:param G:
    	:type G: gp_Pnt
    	:rtype: bool
    * Returns the point attribute defined by the topological attribute S and the point G.
    	:param S:
    	:type S: TNaming_NamedShape
    	:param G:
    	:type G: gp_Pnt
    	:rtype: bool
    """
    return _TDataXtd.TDataXtd_Geometry_Point(*args)

def TDataXtd_Geometry_Set(*args) -> "opencascade::handle< TDataXtd_Geometry >":
    """
    * API class methods ================= Finds, or creates, a Geometry attribute defined by the label label. The default type of geometry is the value ANY_GEOM of the enumeration TDataXtd_GeometryEnum. To specify another value of this enumeration, use the function SetType.
    	:param label:
    	:type label: TDF_Label
    	:rtype: opencascade::handle<TDataXtd_Geometry>
    """
    return _TDataXtd.TDataXtd_Geometry_Set(*args)

def TDataXtd_Geometry_Type(*args) -> "TDataXtd_GeometryEnum":
    """
    * Returns the label L used to define the type of geometric construction for the geometry attribute.
    	:param L:
    	:type L: TDF_Label
    	:rtype: TDataXtd_GeometryEnum
    * Returns the topological attribute S used to define the type of geometric construction for the geometry attribute.
    	:param S:
    	:type S: TNaming_NamedShape
    	:rtype: TDataXtd_GeometryEnum
    """
    return _TDataXtd.TDataXtd_Geometry_Type(*args)

class TDataXtd_Pattern(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ComputeTrsfs(self, *args) -> "void":
        """
        * Give the transformations
        	:param Trsfs:
        	:type Trsfs: TDataXtd_Array1OfTrsf
        	:rtype: void
        """
        return _TDataXtd.TDataXtd_Pattern_ComputeTrsfs(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _TDataXtd.TDataXtd_Pattern_GetID(*args)

    GetID = staticmethod(GetID)

    def NbTrsfs(self, *args) -> "Standard_Integer":
        """
        * Give the number of transformation
        	:rtype: int
        """
        return _TDataXtd.TDataXtd_Pattern_NbTrsfs(self, *args)


    def PatternID(self, *args) -> "Standard_GUID const &":
        """
        * Returns the ID of the attribute.
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Pattern_PatternID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Pattern_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Pattern
TDataXtd_Pattern.ComputeTrsfs = new_instancemethod(_TDataXtd.TDataXtd_Pattern_ComputeTrsfs, None, TDataXtd_Pattern)
TDataXtd_Pattern.NbTrsfs = new_instancemethod(_TDataXtd.TDataXtd_Pattern_NbTrsfs, None, TDataXtd_Pattern)
TDataXtd_Pattern.PatternID = new_instancemethod(_TDataXtd.TDataXtd_Pattern_PatternID, None, TDataXtd_Pattern)
TDataXtd_Pattern_swigregister = _TDataXtd.TDataXtd_Pattern_swigregister
TDataXtd_Pattern_swigregister(TDataXtd_Pattern)

def TDataXtd_Pattern_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _TDataXtd.TDataXtd_Pattern_GetID(*args)

class TDataXtd_Placement(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataXtd_Placement self) -> std::string"""
        return _TDataXtd.TDataXtd_Placement_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * class methods =============
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Placement_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args) -> "opencascade::handle< TDataXtd_Placement >":
        """
        * Find, or create, an Placement attribute. the Placement attribute is returned. Placement methods =================
        	:param label:
        	:type label: TDF_Label
        	:rtype: opencascade::handle<TDataXtd_Placement>
        """
        return _TDataXtd.TDataXtd_Placement_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """:rtype: None"""
        _TDataXtd.TDataXtd_Placement_swiginit(self, _TDataXtd.new_TDataXtd_Placement(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Placement_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Placement
TDataXtd_Placement.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Placement_DumpToString, None, TDataXtd_Placement)
TDataXtd_Placement_swigregister = _TDataXtd.TDataXtd_Placement_swigregister
TDataXtd_Placement_swigregister(TDataXtd_Placement)

def TDataXtd_Placement_GetID(*args) -> "Standard_GUID const &":
    """
    * class methods =============
    	:rtype: Standard_GUID
    """
    return _TDataXtd.TDataXtd_Placement_GetID(*args)

def TDataXtd_Placement_Set(*args) -> "opencascade::handle< TDataXtd_Placement >":
    """
    * Find, or create, an Placement attribute. the Placement attribute is returned. Placement methods =================
    	:param label:
    	:type label: TDF_Label
    	:rtype: opencascade::handle<TDataXtd_Placement>
    """
    return _TDataXtd.TDataXtd_Placement_Set(*args)

class TDataXtd_Plane(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataXtd_Plane self) -> std::string"""
        return _TDataXtd.TDataXtd_Plane_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * class methods ============= //! Returns the GUID for plane attributes.
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Plane_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args) -> "opencascade::handle< TDataXtd_Plane >":
        """
        * Finds or creates the plane attribute defined by the label label. Warning If you are creating the attribute with this syntax, a planar face should already be associated with label.
        	:param label:
        	:type label: TDF_Label
        	:rtype: opencascade::handle<TDataXtd_Plane>
        * Finds, or creates, a Plane attribute and sets <P> as generated the associated NamedShape. Plane methods =============
        	:param label:
        	:type label: TDF_Label
        	:param P:
        	:type P: gp_Pln
        	:rtype: opencascade::handle<TDataXtd_Plane>
        """
        return _TDataXtd.TDataXtd_Plane_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """:rtype: None"""
        _TDataXtd.TDataXtd_Plane_swiginit(self, _TDataXtd.new_TDataXtd_Plane(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Plane_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Plane
TDataXtd_Plane.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Plane_DumpToString, None, TDataXtd_Plane)
TDataXtd_Plane_swigregister = _TDataXtd.TDataXtd_Plane_swigregister
TDataXtd_Plane_swigregister(TDataXtd_Plane)

def TDataXtd_Plane_GetID(*args) -> "Standard_GUID const &":
    """
    * class methods ============= //! Returns the GUID for plane attributes.
    	:rtype: Standard_GUID
    """
    return _TDataXtd.TDataXtd_Plane_GetID(*args)

def TDataXtd_Plane_Set(*args) -> "opencascade::handle< TDataXtd_Plane >":
    """
    * Finds or creates the plane attribute defined by the label label. Warning If you are creating the attribute with this syntax, a planar face should already be associated with label.
    	:param label:
    	:type label: TDF_Label
    	:rtype: opencascade::handle<TDataXtd_Plane>
    * Finds, or creates, a Plane attribute and sets <P> as generated the associated NamedShape. Plane methods =============
    	:param label:
    	:type label: TDF_Label
    	:param P:
    	:type P: gp_Pln
    	:rtype: opencascade::handle<TDataXtd_Plane>
    """
    return _TDataXtd.TDataXtd_Plane_Set(*args)

class TDataXtd_Point(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataXtd_Point self) -> std::string"""
        return _TDataXtd.TDataXtd_Point_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * class methods ============= //! Returns the GUID for point attributes.
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Point_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args) -> "opencascade::handle< TDataXtd_Point >":
        """
        * Sets the label Label as a point attribute. If no object is found, a point attribute is created.
        	:param label:
        	:type label: TDF_Label
        	:rtype: opencascade::handle<TDataXtd_Point>
        * Sets the label Label as a point attribute containing the point P. If no object is found, a point attribute is created. Point methods =============
        	:param label:
        	:type label: TDF_Label
        	:param P:
        	:type P: gp_Pnt
        	:rtype: opencascade::handle<TDataXtd_Point>
        """
        return _TDataXtd.TDataXtd_Point_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """:rtype: None"""
        _TDataXtd.TDataXtd_Point_swiginit(self, _TDataXtd.new_TDataXtd_Point(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Point_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Point
TDataXtd_Point.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Point_DumpToString, None, TDataXtd_Point)
TDataXtd_Point_swigregister = _TDataXtd.TDataXtd_Point_swigregister
TDataXtd_Point_swigregister(TDataXtd_Point)

def TDataXtd_Point_GetID(*args) -> "Standard_GUID const &":
    """
    * class methods ============= //! Returns the GUID for point attributes.
    	:rtype: Standard_GUID
    """
    return _TDataXtd.TDataXtd_Point_GetID(*args)

def TDataXtd_Point_Set(*args) -> "opencascade::handle< TDataXtd_Point >":
    """
    * Sets the label Label as a point attribute. If no object is found, a point attribute is created.
    	:param label:
    	:type label: TDF_Label
    	:rtype: opencascade::handle<TDataXtd_Point>
    * Sets the label Label as a point attribute containing the point P. If no object is found, a point attribute is created. Point methods =============
    	:param label:
    	:type label: TDF_Label
    	:param P:
    	:type P: gp_Pnt
    	:rtype: opencascade::handle<TDataXtd_Point>
    """
    return _TDataXtd.TDataXtd_Point_Set(*args)

class TDataXtd_Position(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Get(*args) -> "Standard_Boolean":
        """
        * Search label <aLabel) for the TDataXtd_Position attribute and get its position if found returns True
        	:param aLabel:
        	:type aLabel: TDF_Label
        	:param aPos:
        	:type aPos: gp_Pnt
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Position_Get(*args)

    Get = staticmethod(Get)

    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns the ID of the attribute.
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Position_GetID(*args)

    GetID = staticmethod(GetID)

    def GetPosition(self, *args) -> "gp_Pnt const":
        """:rtype: gp_Pnt"""
        return _TDataXtd.TDataXtd_Position_GetPosition(self, *args)


    def Set(*args) -> "opencascade::handle< TDataXtd_Position >":
        """
        * Create if not found the TDataXtd_Position attribute set its position to <aPos>
        	:param aLabel:
        	:type aLabel: TDF_Label
        	:param aPos:
        	:type aPos: gp_Pnt
        	:rtype: void
        * Find an existing, or create an empty, Position. the Position attribute is returned.
        	:param aLabel:
        	:type aLabel: TDF_Label
        	:rtype: opencascade::handle<TDataXtd_Position>
        """
        return _TDataXtd.TDataXtd_Position_Set(*args)

    Set = staticmethod(Set)

    def SetPosition(self, *args) -> "void":
        """
        :param aPos:
        	:type aPos: gp_Pnt
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Position_SetPosition(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TDataXtd.TDataXtd_Position_swiginit(self, _TDataXtd.new_TDataXtd_Position(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Position_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Position
TDataXtd_Position.GetPosition = new_instancemethod(_TDataXtd.TDataXtd_Position_GetPosition, None, TDataXtd_Position)
TDataXtd_Position.SetPosition = new_instancemethod(_TDataXtd.TDataXtd_Position_SetPosition, None, TDataXtd_Position)
TDataXtd_Position_swigregister = _TDataXtd.TDataXtd_Position_swigregister
TDataXtd_Position_swigregister(TDataXtd_Position)

def TDataXtd_Position_Get(*args) -> "Standard_Boolean":
    """
    * Search label <aLabel) for the TDataXtd_Position attribute and get its position if found returns True
    	:param aLabel:
    	:type aLabel: TDF_Label
    	:param aPos:
    	:type aPos: gp_Pnt
    	:rtype: bool
    """
    return _TDataXtd.TDataXtd_Position_Get(*args)

def TDataXtd_Position_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns the ID of the attribute.
    	:rtype: Standard_GUID
    """
    return _TDataXtd.TDataXtd_Position_GetID(*args)

def TDataXtd_Position_Set(*args) -> "opencascade::handle< TDataXtd_Position >":
    """
    * Create if not found the TDataXtd_Position attribute set its position to <aPos>
    	:param aLabel:
    	:type aLabel: TDF_Label
    	:param aPos:
    	:type aPos: gp_Pnt
    	:rtype: void
    * Find an existing, or create an empty, Position. the Position attribute is returned.
    	:param aLabel:
    	:type aLabel: TDF_Label
    	:rtype: opencascade::handle<TDataXtd_Position>
    """
    return _TDataXtd.TDataXtd_Position_Set(*args)

class TDataXtd_Presentation(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddSelectionMode(self, *args) -> "void":
        """
        :param theSelectionMode:
        	:type theSelectionMode: int
        	:param theTransaction: default value is Standard_True
        	:type theTransaction: bool
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Presentation_AddSelectionMode(self, *args)


    def Color(self, *args) -> "Quantity_NameOfColor":
        """:rtype: Quantity_NameOfColor"""
        return _TDataXtd.TDataXtd_Presentation_Color(self, *args)


    def GetDriverGUID(self, *args) -> "Standard_GUID":
        """
        * //!@name Access to data Returns the GUID of the driver managing display of associated AIS object
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Presentation_GetDriverGUID(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns the ID of the attribute.
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Presentation_GetID(*args)

    GetID = staticmethod(GetID)

    def GetNbSelectionModes(self, *args) -> "Standard_Integer":
        """
        * Returns the number of selection modes of the attribute. It starts with 1 .. GetNbSelectionModes().
        	:rtype: int
        """
        return _TDataXtd.TDataXtd_Presentation_GetNbSelectionModes(self, *args)


    def HasOwnColor(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TDataXtd.TDataXtd_Presentation_HasOwnColor(self, *args)


    def HasOwnMaterial(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TDataXtd.TDataXtd_Presentation_HasOwnMaterial(self, *args)


    def HasOwnMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TDataXtd.TDataXtd_Presentation_HasOwnMode(self, *args)


    def HasOwnSelectionMode(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TDataXtd.TDataXtd_Presentation_HasOwnSelectionMode(self, *args)


    def HasOwnTransparency(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TDataXtd.TDataXtd_Presentation_HasOwnTransparency(self, *args)


    def HasOwnWidth(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TDataXtd.TDataXtd_Presentation_HasOwnWidth(self, *args)


    def IsDisplayed(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TDataXtd.TDataXtd_Presentation_IsDisplayed(self, *args)


    def MaterialIndex(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TDataXtd.TDataXtd_Presentation_MaterialIndex(self, *args)


    def Mode(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TDataXtd.TDataXtd_Presentation_Mode(self, *args)


    def SelectionMode(self, *args) -> "Standard_Integer":
        """
        :param index: default value is 1
        	:type index: int
        	:rtype: int
        """
        return _TDataXtd.TDataXtd_Presentation_SelectionMode(self, *args)


    def Set(*args) -> "opencascade::handle< TDataXtd_Presentation >":
        """
        * Create if not found the TDataXtd_Presentation attribute and set its driver GUID
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theDriverId:
        	:type theDriverId: Standard_GUID
        	:rtype: opencascade::handle<TDataXtd_Presentation>
        """
        return _TDataXtd.TDataXtd_Presentation_Set(*args)

    Set = staticmethod(Set)

    def SetColor(self, *args) -> "void":
        """
        :param theColor:
        	:type theColor: Quantity_NameOfColor
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Presentation_SetColor(self, *args)


    def SetDisplayed(self, *args) -> "void":
        """
        :param theIsDisplayed:
        	:type theIsDisplayed: bool
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Presentation_SetDisplayed(self, *args)


    def SetDriverGUID(self, *args) -> "void":
        """
        * Sets the GUID of the driver managing display of associated AIS object
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Presentation_SetDriverGUID(self, *args)


    def SetMaterialIndex(self, *args) -> "void":
        """
        :param theMaterialIndex:
        	:type theMaterialIndex: int
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Presentation_SetMaterialIndex(self, *args)


    def SetMode(self, *args) -> "void":
        """
        :param theMode:
        	:type theMode: int
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Presentation_SetMode(self, *args)


    def SetSelectionMode(self, *args) -> "void":
        """
        * Sets selection mode. If 'theTransaction' flag is OFF, modification of the attribute doesn't influence the transaction mechanism (the attribute doesn't participate in undo/redo because of this modification). Certainly, if any other data of the attribute is modified (display mode, color, ...), the attribute will be included into undo/redo.
        	:param theSelectionMode:
        	:type theSelectionMode: int
        	:param theTransaction: default value is Standard_True
        	:type theTransaction: bool
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Presentation_SetSelectionMode(self, *args)


    def SetTransparency(self, *args) -> "void":
        """
        :param theValue:
        	:type theValue: float
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Presentation_SetTransparency(self, *args)


    def SetWidth(self, *args) -> "void":
        """
        :param theWidth:
        	:type theWidth: float
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Presentation_SetWidth(self, *args)


    def __init__(self, *args):
        """
        * //!@name Attribute mechanics Empty constructor
        	:rtype: None
        """
        _TDataXtd.TDataXtd_Presentation_swiginit(self, _TDataXtd.new_TDataXtd_Presentation(*args))

    def Transparency(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TDataXtd.TDataXtd_Presentation_Transparency(self, *args)


    def Unset(*args) -> "void":
        """
        * Remove attribute of this type from the label
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: void
        """
        return _TDataXtd.TDataXtd_Presentation_Unset(*args)

    Unset = staticmethod(Unset)

    def UnsetColor(self, *args) -> "void":
        """:rtype: None"""
        return _TDataXtd.TDataXtd_Presentation_UnsetColor(self, *args)


    def UnsetMaterial(self, *args) -> "void":
        """:rtype: None"""
        return _TDataXtd.TDataXtd_Presentation_UnsetMaterial(self, *args)


    def UnsetMode(self, *args) -> "void":
        """:rtype: None"""
        return _TDataXtd.TDataXtd_Presentation_UnsetMode(self, *args)


    def UnsetSelectionMode(self, *args) -> "void":
        """:rtype: None"""
        return _TDataXtd.TDataXtd_Presentation_UnsetSelectionMode(self, *args)


    def UnsetTransparency(self, *args) -> "void":
        """:rtype: None"""
        return _TDataXtd.TDataXtd_Presentation_UnsetTransparency(self, *args)


    def UnsetWidth(self, *args) -> "void":
        """:rtype: None"""
        return _TDataXtd.TDataXtd_Presentation_UnsetWidth(self, *args)


    def Width(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TDataXtd.TDataXtd_Presentation_Width(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Presentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Presentation
TDataXtd_Presentation.AddSelectionMode = new_instancemethod(_TDataXtd.TDataXtd_Presentation_AddSelectionMode, None, TDataXtd_Presentation)
TDataXtd_Presentation.Color = new_instancemethod(_TDataXtd.TDataXtd_Presentation_Color, None, TDataXtd_Presentation)
TDataXtd_Presentation.GetDriverGUID = new_instancemethod(_TDataXtd.TDataXtd_Presentation_GetDriverGUID, None, TDataXtd_Presentation)
TDataXtd_Presentation.GetNbSelectionModes = new_instancemethod(_TDataXtd.TDataXtd_Presentation_GetNbSelectionModes, None, TDataXtd_Presentation)
TDataXtd_Presentation.HasOwnColor = new_instancemethod(_TDataXtd.TDataXtd_Presentation_HasOwnColor, None, TDataXtd_Presentation)
TDataXtd_Presentation.HasOwnMaterial = new_instancemethod(_TDataXtd.TDataXtd_Presentation_HasOwnMaterial, None, TDataXtd_Presentation)
TDataXtd_Presentation.HasOwnMode = new_instancemethod(_TDataXtd.TDataXtd_Presentation_HasOwnMode, None, TDataXtd_Presentation)
TDataXtd_Presentation.HasOwnSelectionMode = new_instancemethod(_TDataXtd.TDataXtd_Presentation_HasOwnSelectionMode, None, TDataXtd_Presentation)
TDataXtd_Presentation.HasOwnTransparency = new_instancemethod(_TDataXtd.TDataXtd_Presentation_HasOwnTransparency, None, TDataXtd_Presentation)
TDataXtd_Presentation.HasOwnWidth = new_instancemethod(_TDataXtd.TDataXtd_Presentation_HasOwnWidth, None, TDataXtd_Presentation)
TDataXtd_Presentation.IsDisplayed = new_instancemethod(_TDataXtd.TDataXtd_Presentation_IsDisplayed, None, TDataXtd_Presentation)
TDataXtd_Presentation.MaterialIndex = new_instancemethod(_TDataXtd.TDataXtd_Presentation_MaterialIndex, None, TDataXtd_Presentation)
TDataXtd_Presentation.Mode = new_instancemethod(_TDataXtd.TDataXtd_Presentation_Mode, None, TDataXtd_Presentation)
TDataXtd_Presentation.SelectionMode = new_instancemethod(_TDataXtd.TDataXtd_Presentation_SelectionMode, None, TDataXtd_Presentation)
TDataXtd_Presentation.SetColor = new_instancemethod(_TDataXtd.TDataXtd_Presentation_SetColor, None, TDataXtd_Presentation)
TDataXtd_Presentation.SetDisplayed = new_instancemethod(_TDataXtd.TDataXtd_Presentation_SetDisplayed, None, TDataXtd_Presentation)
TDataXtd_Presentation.SetDriverGUID = new_instancemethod(_TDataXtd.TDataXtd_Presentation_SetDriverGUID, None, TDataXtd_Presentation)
TDataXtd_Presentation.SetMaterialIndex = new_instancemethod(_TDataXtd.TDataXtd_Presentation_SetMaterialIndex, None, TDataXtd_Presentation)
TDataXtd_Presentation.SetMode = new_instancemethod(_TDataXtd.TDataXtd_Presentation_SetMode, None, TDataXtd_Presentation)
TDataXtd_Presentation.SetSelectionMode = new_instancemethod(_TDataXtd.TDataXtd_Presentation_SetSelectionMode, None, TDataXtd_Presentation)
TDataXtd_Presentation.SetTransparency = new_instancemethod(_TDataXtd.TDataXtd_Presentation_SetTransparency, None, TDataXtd_Presentation)
TDataXtd_Presentation.SetWidth = new_instancemethod(_TDataXtd.TDataXtd_Presentation_SetWidth, None, TDataXtd_Presentation)
TDataXtd_Presentation.Transparency = new_instancemethod(_TDataXtd.TDataXtd_Presentation_Transparency, None, TDataXtd_Presentation)
TDataXtd_Presentation.UnsetColor = new_instancemethod(_TDataXtd.TDataXtd_Presentation_UnsetColor, None, TDataXtd_Presentation)
TDataXtd_Presentation.UnsetMaterial = new_instancemethod(_TDataXtd.TDataXtd_Presentation_UnsetMaterial, None, TDataXtd_Presentation)
TDataXtd_Presentation.UnsetMode = new_instancemethod(_TDataXtd.TDataXtd_Presentation_UnsetMode, None, TDataXtd_Presentation)
TDataXtd_Presentation.UnsetSelectionMode = new_instancemethod(_TDataXtd.TDataXtd_Presentation_UnsetSelectionMode, None, TDataXtd_Presentation)
TDataXtd_Presentation.UnsetTransparency = new_instancemethod(_TDataXtd.TDataXtd_Presentation_UnsetTransparency, None, TDataXtd_Presentation)
TDataXtd_Presentation.UnsetWidth = new_instancemethod(_TDataXtd.TDataXtd_Presentation_UnsetWidth, None, TDataXtd_Presentation)
TDataXtd_Presentation.Width = new_instancemethod(_TDataXtd.TDataXtd_Presentation_Width, None, TDataXtd_Presentation)
TDataXtd_Presentation_swigregister = _TDataXtd.TDataXtd_Presentation_swigregister
TDataXtd_Presentation_swigregister(TDataXtd_Presentation)

def TDataXtd_Presentation_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns the ID of the attribute.
    	:rtype: Standard_GUID
    """
    return _TDataXtd.TDataXtd_Presentation_GetID(*args)

def TDataXtd_Presentation_Set(*args) -> "opencascade::handle< TDataXtd_Presentation >":
    """
    * Create if not found the TDataXtd_Presentation attribute and set its driver GUID
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:param theDriverId:
    	:type theDriverId: Standard_GUID
    	:rtype: opencascade::handle<TDataXtd_Presentation>
    """
    return _TDataXtd.TDataXtd_Presentation_Set(*args)

def TDataXtd_Presentation_Unset(*args) -> "void":
    """
    * Remove attribute of this type from the label
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: void
    """
    return _TDataXtd.TDataXtd_Presentation_Unset(*args)

class TDataXtd_Shape(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataXtd_Shape self) -> std::string"""
        return _TDataXtd.TDataXtd_Shape_DumpToString(self)


    def Find(*args) -> "Standard_Boolean":
        """
        * class methods ============= try to retrieve a Shape attribute at <current> label or in fathers label of <current>. Returns True if found and set <S>.
        	:param current:
        	:type current: TDF_Label
        	:param S:
        	:type S: TDataXtd_Shape
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Shape_Find(*args)

    Find = staticmethod(Find)

    def Get(*args) -> "TopoDS_Shape":
        """
        * the Shape from associated NamedShape attribute is returned.
        	:param label:
        	:type label: TDF_Label
        	:rtype: TopoDS_Shape
        """
        return _TDataXtd.TDataXtd_Shape_Get(*args)

    Get = staticmethod(Get)

    def GetID(*args) -> "Standard_GUID const &":
        """
        * Shape methods ============
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Shape_GetID(*args)

    GetID = staticmethod(GetID)

    def New(*args) -> "opencascade::handle< TDataXtd_Shape >":
        """
        * Find, or create, a Shape attribute. the Shape attribute is returned. Raises if <label> has attribute.
        	:param label:
        	:type label: TDF_Label
        	:rtype: opencascade::handle<TDataXtd_Shape>
        """
        return _TDataXtd.TDataXtd_Shape_New(*args)

    New = staticmethod(New)

    def Set(*args) -> "opencascade::handle< TDataXtd_Shape >":
        """
        * Create or update associated NamedShape attribute. the Shape attribute is returned.
        	:param label:
        	:type label: TDF_Label
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: opencascade::handle<TDataXtd_Shape>
        """
        return _TDataXtd.TDataXtd_Shape_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """:rtype: None"""
        _TDataXtd.TDataXtd_Shape_swiginit(self, _TDataXtd.new_TDataXtd_Shape(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Shape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Shape
TDataXtd_Shape.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Shape_DumpToString, None, TDataXtd_Shape)
TDataXtd_Shape_swigregister = _TDataXtd.TDataXtd_Shape_swigregister
TDataXtd_Shape_swigregister(TDataXtd_Shape)

def TDataXtd_Shape_Find(*args) -> "Standard_Boolean":
    """
    * class methods ============= try to retrieve a Shape attribute at <current> label or in fathers label of <current>. Returns True if found and set <S>.
    	:param current:
    	:type current: TDF_Label
    	:param S:
    	:type S: TDataXtd_Shape
    	:rtype: bool
    """
    return _TDataXtd.TDataXtd_Shape_Find(*args)

def TDataXtd_Shape_Get(*args) -> "TopoDS_Shape":
    """
    * the Shape from associated NamedShape attribute is returned.
    	:param label:
    	:type label: TDF_Label
    	:rtype: TopoDS_Shape
    """
    return _TDataXtd.TDataXtd_Shape_Get(*args)

def TDataXtd_Shape_GetID(*args) -> "Standard_GUID const &":
    """
    * Shape methods ============
    	:rtype: Standard_GUID
    """
    return _TDataXtd.TDataXtd_Shape_GetID(*args)

def TDataXtd_Shape_New(*args) -> "opencascade::handle< TDataXtd_Shape >":
    """
    * Find, or create, a Shape attribute. the Shape attribute is returned. Raises if <label> has attribute.
    	:param label:
    	:type label: TDF_Label
    	:rtype: opencascade::handle<TDataXtd_Shape>
    """
    return _TDataXtd.TDataXtd_Shape_New(*args)

def TDataXtd_Shape_Set(*args) -> "opencascade::handle< TDataXtd_Shape >":
    """
    * Create or update associated NamedShape attribute. the Shape attribute is returned.
    	:param label:
    	:type label: TDF_Label
    	:param shape:
    	:type shape: TopoDS_Shape
    	:rtype: opencascade::handle<TDataXtd_Shape>
    """
    return _TDataXtd.TDataXtd_Shape_Set(*args)

class TDataXtd_Triangulation(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Deflection(self, *args) -> "void":
        """
        * Poly_Triangulation methods The methods are 'covered' by this attribute to prevent direct modification of the mesh. There is no performance problem to call Poly_Triangulation method through this attribute. The most of the methods are considered as 'inline' by the compiler in release mode. Returns the deflection of this triangulation.
        	:rtype: float
        * Sets the deflection of this triangulation to theDeflection. See more on deflection in Polygon2D
        	:param theDeflection:
        	:type theDeflection: float
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Triangulation_Deflection(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataXtd_Triangulation self) -> std::string"""
        return _TDataXtd.TDataXtd_Triangulation_DumpToString(self)


    def Get(self, *args) -> "opencascade::handle< Poly_Triangulation > const &":
        """
        * Returns the underlying triangulation.
        	:rtype: opencascade::handle<Poly_Triangulation>
        """
        return _TDataXtd.TDataXtd_Triangulation_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Static methods Returns the ID of the triangulation attribute.
        	:rtype: Standard_GUID
        """
        return _TDataXtd.TDataXtd_Triangulation_GetID(*args)

    GetID = staticmethod(GetID)

    def HasNormals(self, *args) -> "Standard_Boolean":
        """
        * Returns Standard_True if nodal normals are defined.
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Triangulation_HasNormals(self, *args)


    def HasUVNodes(self, *args) -> "Standard_Boolean":
        """
        * returns Standard_True if 2D nodes are associated with 3D nodes for this triangulation.
        	:rtype: bool
        """
        return _TDataXtd.TDataXtd_Triangulation_HasUVNodes(self, *args)


    def NbNodes(self, *args) -> "Standard_Integer":
        """
        * returns the number of nodes for this triangulation.
        	:rtype: int
        """
        return _TDataXtd.TDataXtd_Triangulation_NbNodes(self, *args)


    def NbTriangles(self, *args) -> "Standard_Integer":
        """
        * returns the number of triangles for this triangulation.
        	:rtype: int
        """
        return _TDataXtd.TDataXtd_Triangulation_NbTriangles(self, *args)


    def Node(self, *args) -> "gp_Pnt const":
        """
        * returns node at the given index. Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: gp_Pnt
        """
        return _TDataXtd.TDataXtd_Triangulation_Node(self, *args)


    def Normal(self, *args) -> "gp_Dir const":
        """
        * returns normal at the given index. Raises Standard_OutOfRange exception.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: gp_Dir
        """
        return _TDataXtd.TDataXtd_Triangulation_Normal(self, *args)


    def RemoveUVNodes(self, *args) -> "void":
        """
        * Deallocates the UV nodes.
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Triangulation_RemoveUVNodes(self, *args)


    def Set(self, *args) -> "void":
        """
        * Finds or creates a triangulation attribute.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<TDataXtd_Triangulation>
        * Finds or creates a triangulation attribute. Initializes the attribute by a Poly_Triangulation object.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theTriangulation:
        	:type theTriangulation: Poly_Triangulation
        	:rtype: opencascade::handle<TDataXtd_Triangulation>
        * Sets the triangulation.
        	:param theTriangulation:
        	:type theTriangulation: Poly_Triangulation
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Triangulation_Set(self, *args)


    def SetNode(self, *args) -> "void":
        """
        * The method differs from Poly_Triangulation! Sets a node at the given index. Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.
        	:param theIndex:
        	:type theIndex: int
        	:param theNode:
        	:type theNode: gp_Pnt
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Triangulation_SetNode(self, *args)


    def SetNormal(self, *args) -> "void":
        """
        * Changes normal at the given index. Raises Standard_OutOfRange exception.
        	:param theIndex:
        	:type theIndex: int
        	:param theNormal:
        	:type theNormal: gp_Dir
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Triangulation_SetNormal(self, *args)


    def SetNormals(self, *args) -> "void":
        """
        * Sets the table of node normals. Raises exception if length of theNormals != 3 * NbNodes
        	:param theNormals:
        	:type theNormals: TShort_HArray1OfShortReal
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Triangulation_SetNormals(self, *args)


    def SetTriangle(self, *args) -> "void":
        """
        * The method differs from Poly_Triangulation! Sets a triangle at the given index. Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbTriangles.
        	:param theIndex:
        	:type theIndex: int
        	:param theTriangle:
        	:type theTriangle: Poly_Triangle
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Triangulation_SetTriangle(self, *args)


    def SetUVNode(self, *args) -> "void":
        """
        * The method differs from Poly_Triangulation! Sets a UVNode at the given index. Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.
        	:param theIndex:
        	:type theIndex: int
        	:param theUVNode:
        	:type theUVNode: gp_Pnt2d
        	:rtype: None
        """
        return _TDataXtd.TDataXtd_Triangulation_SetUVNode(self, *args)


    def __init__(self, *args):
        """
        * Object methods A constructor. Don't use it directly, use please the static method Set(), which returns the attribute attached to a label.
        	:rtype: None
        """
        _TDataXtd.TDataXtd_Triangulation_swiginit(self, _TDataXtd.new_TDataXtd_Triangulation(*args))

    def Triangle(self, *args) -> "Poly_Triangle const &":
        """
        * returns triangle at the given index. Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbTriangles.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: Poly_Triangle
        """
        return _TDataXtd.TDataXtd_Triangulation_Triangle(self, *args)


    def UVNode(self, *args) -> "gp_Pnt2d const":
        """
        * returns UVNode at the given index. Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.
        	:param theIndex:
        	:type theIndex: int
        	:rtype: gp_Pnt2d
        """
        return _TDataXtd.TDataXtd_Triangulation_UVNode(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Triangulation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Triangulation
TDataXtd_Triangulation.Deflection = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_Deflection, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_DumpToString, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.Get = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_Get, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.HasNormals = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_HasNormals, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.HasUVNodes = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_HasUVNodes, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.NbNodes = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_NbNodes, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.NbTriangles = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_NbTriangles, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.Node = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_Node, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.Normal = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_Normal, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.RemoveUVNodes = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_RemoveUVNodes, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.Set = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_Set, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.SetNode = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_SetNode, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.SetNormal = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_SetNormal, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.SetNormals = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_SetNormals, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.SetTriangle = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_SetTriangle, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.SetUVNode = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_SetUVNode, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.Triangle = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_Triangle, None, TDataXtd_Triangulation)
TDataXtd_Triangulation.UVNode = new_instancemethod(_TDataXtd.TDataXtd_Triangulation_UVNode, None, TDataXtd_Triangulation)
TDataXtd_Triangulation_swigregister = _TDataXtd.TDataXtd_Triangulation_swigregister
TDataXtd_Triangulation_swigregister(TDataXtd_Triangulation)

def TDataXtd_Triangulation_GetID(*args) -> "Standard_GUID const &":
    """
    * Static methods Returns the ID of the triangulation attribute.
    	:rtype: Standard_GUID
    """
    return _TDataXtd.TDataXtd_Triangulation_GetID(*args)

class TDataXtd_PatternStd(TDataXtd_Pattern):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Axis1(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """
        :param Axis1:
        	:type Axis1: TNaming_NamedShape
        	:rtype: None
        :rtype: opencascade::handle<TNaming_NamedShape>
        """
        return _TDataXtd.TDataXtd_PatternStd_Axis1(self, *args)


    def Axis1Reversed(self, *args) -> "Standard_Boolean":
        """
        :param Axis1Reversed:
        	:type Axis1Reversed: bool
        	:rtype: None
        :rtype: bool
        """
        return _TDataXtd.TDataXtd_PatternStd_Axis1Reversed(self, *args)


    def Axis2(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """
        :param Axis2:
        	:type Axis2: TNaming_NamedShape
        	:rtype: None
        :rtype: opencascade::handle<TNaming_NamedShape>
        """
        return _TDataXtd.TDataXtd_PatternStd_Axis2(self, *args)


    def Axis2Reversed(self, *args) -> "Standard_Boolean":
        """
        :param Axis2Reversed:
        	:type Axis2Reversed: bool
        	:rtype: None
        :rtype: bool
        """
        return _TDataXtd.TDataXtd_PatternStd_Axis2Reversed(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataXtd_PatternStd self) -> std::string"""
        return _TDataXtd.TDataXtd_PatternStd_DumpToString(self)


    def GetPatternID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _TDataXtd.TDataXtd_PatternStd_GetPatternID(*args)

    GetPatternID = staticmethod(GetPatternID)

    def Mirror(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """
        :param plane:
        	:type plane: TNaming_NamedShape
        	:rtype: None
        :rtype: opencascade::handle<TNaming_NamedShape>
        """
        return _TDataXtd.TDataXtd_PatternStd_Mirror(self, *args)


    def NbInstances1(self, *args) -> "opencascade::handle< TDataStd_Integer >":
        """
        :param NbInstances1:
        	:type NbInstances1: TDataStd_Integer
        	:rtype: None
        :rtype: opencascade::handle<TDataStd_Integer>
        """
        return _TDataXtd.TDataXtd_PatternStd_NbInstances1(self, *args)


    def NbInstances2(self, *args) -> "opencascade::handle< TDataStd_Integer >":
        """
        :param NbInstances2:
        	:type NbInstances2: TDataStd_Integer
        	:rtype: None
        :rtype: opencascade::handle<TDataStd_Integer>
        """
        return _TDataXtd.TDataXtd_PatternStd_NbInstances2(self, *args)


    def Set(*args) -> "opencascade::handle< TDataXtd_PatternStd >":
        """
        * Find, or create, a PatternStd attribute
        	:param label:
        	:type label: TDF_Label
        	:rtype: opencascade::handle<TDataXtd_PatternStd>
        """
        return _TDataXtd.TDataXtd_PatternStd_Set(*args)

    Set = staticmethod(Set)

    def Signature(self, *args) -> "Standard_Integer":
        """
        :param signature:
        	:type signature: int
        	:rtype: None
        :rtype: int
        """
        return _TDataXtd.TDataXtd_PatternStd_Signature(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TDataXtd.TDataXtd_PatternStd_swiginit(self, _TDataXtd.new_TDataXtd_PatternStd(*args))

    def Value1(self, *args) -> "opencascade::handle< TDataStd_Real >":
        """
        :param value:
        	:type value: TDataStd_Real
        	:rtype: None
        :rtype: opencascade::handle<TDataStd_Real>
        """
        return _TDataXtd.TDataXtd_PatternStd_Value1(self, *args)


    def Value2(self, *args) -> "opencascade::handle< TDataStd_Real >":
        """
        :param value:
        	:type value: TDataStd_Real
        	:rtype: None
        :rtype: opencascade::handle<TDataStd_Real>
        """
        return _TDataXtd.TDataXtd_PatternStd_Value2(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_PatternStd_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_PatternStd
TDataXtd_PatternStd.Axis1 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Axis1, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Axis1Reversed = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Axis1Reversed, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Axis2 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Axis2, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Axis2Reversed = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Axis2Reversed, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.DumpToString = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_DumpToString, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Mirror = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Mirror, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.NbInstances1 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_NbInstances1, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.NbInstances2 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_NbInstances2, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Signature = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Signature, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Value1 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Value1, None, TDataXtd_PatternStd)
TDataXtd_PatternStd.Value2 = new_instancemethod(_TDataXtd.TDataXtd_PatternStd_Value2, None, TDataXtd_PatternStd)
TDataXtd_PatternStd_swigregister = _TDataXtd.TDataXtd_PatternStd_swigregister
TDataXtd_PatternStd_swigregister(TDataXtd_PatternStd)

def TDataXtd_PatternStd_GetPatternID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _TDataXtd.TDataXtd_PatternStd_GetPatternID(*args)

def TDataXtd_PatternStd_Set(*args) -> "opencascade::handle< TDataXtd_PatternStd >":
    """
    * Find, or create, a PatternStd attribute
    	:param label:
    	:type label: TDF_Label
    	:rtype: opencascade::handle<TDataXtd_PatternStd>
    """
    return _TDataXtd.TDataXtd_PatternStd_Set(*args)

class TDataXtd_HArray1OfTrsf(TDataXtd_Array1OfTrsf, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.TDataXtd_HArray1OfTrsf_swiginit(self, _TDataXtd.new_TDataXtd_HArray1OfTrsf(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_HArray1OfTrsf_DownCast(t)

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_HArray1OfTrsf
TDataXtd_HArray1OfTrsf.Array1 = new_instancemethod(_TDataXtd.TDataXtd_HArray1OfTrsf_Array1, None, TDataXtd_HArray1OfTrsf)
TDataXtd_HArray1OfTrsf.ChangeArray1 = new_instancemethod(_TDataXtd.TDataXtd_HArray1OfTrsf_ChangeArray1, None, TDataXtd_HArray1OfTrsf)
TDataXtd_HArray1OfTrsf_swigregister = _TDataXtd.TDataXtd_HArray1OfTrsf_swigregister
TDataXtd_HArray1OfTrsf_swigregister(TDataXtd_HArray1OfTrsf)



