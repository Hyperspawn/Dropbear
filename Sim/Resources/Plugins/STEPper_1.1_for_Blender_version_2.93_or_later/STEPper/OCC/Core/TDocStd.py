# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TDocStd module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tdocstd.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TDocStd.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TDocStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TDocStd')
    _TDocStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TDocStd', [dirname(__file__)])
        except ImportError:
            import _TDocStd
            return _TDocStd
        try:
            _mod = imp.load_module('_TDocStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TDocStd = swig_import_helper()
    del swig_import_helper
else:
    import _TDocStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TDocStd.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TDocStd.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TDocStd.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TDocStd.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TDocStd.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TDocStd.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TDocStd.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TDocStd.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TDocStd.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TDocStd.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TDocStd.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TDocStd.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TDocStd.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TDocStd.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TDocStd.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TDocStd.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TDocStd.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TDocStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TDocStd.process_exception(error, method_name, class_name)
process_exception = _TDocStd.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Message
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage

def Handle_TDocStd_Application_Create() -> "opencascade::handle< TDocStd_Application >":
    return _TDocStd.Handle_TDocStd_Application_Create()
Handle_TDocStd_Application_Create = _TDocStd.Handle_TDocStd_Application_Create

def Handle_TDocStd_Application_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDocStd_Application >":
    return _TDocStd.Handle_TDocStd_Application_DownCast(t)
Handle_TDocStd_Application_DownCast = _TDocStd.Handle_TDocStd_Application_DownCast

def Handle_TDocStd_Application_IsNull(t: 'opencascade::handle< TDocStd_Application > const &') -> "bool":
    return _TDocStd.Handle_TDocStd_Application_IsNull(t)
Handle_TDocStd_Application_IsNull = _TDocStd.Handle_TDocStd_Application_IsNull

def Handle_TDocStd_ApplicationDelta_Create() -> "opencascade::handle< TDocStd_ApplicationDelta >":
    return _TDocStd.Handle_TDocStd_ApplicationDelta_Create()
Handle_TDocStd_ApplicationDelta_Create = _TDocStd.Handle_TDocStd_ApplicationDelta_Create

def Handle_TDocStd_ApplicationDelta_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDocStd_ApplicationDelta >":
    return _TDocStd.Handle_TDocStd_ApplicationDelta_DownCast(t)
Handle_TDocStd_ApplicationDelta_DownCast = _TDocStd.Handle_TDocStd_ApplicationDelta_DownCast

def Handle_TDocStd_ApplicationDelta_IsNull(t: 'opencascade::handle< TDocStd_ApplicationDelta > const &') -> "bool":
    return _TDocStd.Handle_TDocStd_ApplicationDelta_IsNull(t)
Handle_TDocStd_ApplicationDelta_IsNull = _TDocStd.Handle_TDocStd_ApplicationDelta_IsNull

def Handle_TDocStd_CompoundDelta_Create() -> "opencascade::handle< TDocStd_CompoundDelta >":
    return _TDocStd.Handle_TDocStd_CompoundDelta_Create()
Handle_TDocStd_CompoundDelta_Create = _TDocStd.Handle_TDocStd_CompoundDelta_Create

def Handle_TDocStd_CompoundDelta_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDocStd_CompoundDelta >":
    return _TDocStd.Handle_TDocStd_CompoundDelta_DownCast(t)
Handle_TDocStd_CompoundDelta_DownCast = _TDocStd.Handle_TDocStd_CompoundDelta_DownCast

def Handle_TDocStd_CompoundDelta_IsNull(t: 'opencascade::handle< TDocStd_CompoundDelta > const &') -> "bool":
    return _TDocStd.Handle_TDocStd_CompoundDelta_IsNull(t)
Handle_TDocStd_CompoundDelta_IsNull = _TDocStd.Handle_TDocStd_CompoundDelta_IsNull

def Handle_TDocStd_Document_Create() -> "opencascade::handle< TDocStd_Document >":
    return _TDocStd.Handle_TDocStd_Document_Create()
Handle_TDocStd_Document_Create = _TDocStd.Handle_TDocStd_Document_Create

def Handle_TDocStd_Document_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDocStd_Document >":
    return _TDocStd.Handle_TDocStd_Document_DownCast(t)
Handle_TDocStd_Document_DownCast = _TDocStd.Handle_TDocStd_Document_DownCast

def Handle_TDocStd_Document_IsNull(t: 'opencascade::handle< TDocStd_Document > const &') -> "bool":
    return _TDocStd.Handle_TDocStd_Document_IsNull(t)
Handle_TDocStd_Document_IsNull = _TDocStd.Handle_TDocStd_Document_IsNull

def Handle_TDocStd_Modified_Create() -> "opencascade::handle< TDocStd_Modified >":
    return _TDocStd.Handle_TDocStd_Modified_Create()
Handle_TDocStd_Modified_Create = _TDocStd.Handle_TDocStd_Modified_Create

def Handle_TDocStd_Modified_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDocStd_Modified >":
    return _TDocStd.Handle_TDocStd_Modified_DownCast(t)
Handle_TDocStd_Modified_DownCast = _TDocStd.Handle_TDocStd_Modified_DownCast

def Handle_TDocStd_Modified_IsNull(t: 'opencascade::handle< TDocStd_Modified > const &') -> "bool":
    return _TDocStd.Handle_TDocStd_Modified_IsNull(t)
Handle_TDocStd_Modified_IsNull = _TDocStd.Handle_TDocStd_Modified_IsNull

def Handle_TDocStd_MultiTransactionManager_Create() -> "opencascade::handle< TDocStd_MultiTransactionManager >":
    return _TDocStd.Handle_TDocStd_MultiTransactionManager_Create()
Handle_TDocStd_MultiTransactionManager_Create = _TDocStd.Handle_TDocStd_MultiTransactionManager_Create

def Handle_TDocStd_MultiTransactionManager_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDocStd_MultiTransactionManager >":
    return _TDocStd.Handle_TDocStd_MultiTransactionManager_DownCast(t)
Handle_TDocStd_MultiTransactionManager_DownCast = _TDocStd.Handle_TDocStd_MultiTransactionManager_DownCast

def Handle_TDocStd_MultiTransactionManager_IsNull(t: 'opencascade::handle< TDocStd_MultiTransactionManager > const &') -> "bool":
    return _TDocStd.Handle_TDocStd_MultiTransactionManager_IsNull(t)
Handle_TDocStd_MultiTransactionManager_IsNull = _TDocStd.Handle_TDocStd_MultiTransactionManager_IsNull

def Handle_TDocStd_Owner_Create() -> "opencascade::handle< TDocStd_Owner >":
    return _TDocStd.Handle_TDocStd_Owner_Create()
Handle_TDocStd_Owner_Create = _TDocStd.Handle_TDocStd_Owner_Create

def Handle_TDocStd_Owner_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDocStd_Owner >":
    return _TDocStd.Handle_TDocStd_Owner_DownCast(t)
Handle_TDocStd_Owner_DownCast = _TDocStd.Handle_TDocStd_Owner_DownCast

def Handle_TDocStd_Owner_IsNull(t: 'opencascade::handle< TDocStd_Owner > const &') -> "bool":
    return _TDocStd.Handle_TDocStd_Owner_IsNull(t)
Handle_TDocStd_Owner_IsNull = _TDocStd.Handle_TDocStd_Owner_IsNull

def Handle_TDocStd_XLink_Create() -> "opencascade::handle< TDocStd_XLink >":
    return _TDocStd.Handle_TDocStd_XLink_Create()
Handle_TDocStd_XLink_Create = _TDocStd.Handle_TDocStd_XLink_Create

def Handle_TDocStd_XLink_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDocStd_XLink >":
    return _TDocStd.Handle_TDocStd_XLink_DownCast(t)
Handle_TDocStd_XLink_DownCast = _TDocStd.Handle_TDocStd_XLink_DownCast

def Handle_TDocStd_XLink_IsNull(t: 'opencascade::handle< TDocStd_XLink > const &') -> "bool":
    return _TDocStd.Handle_TDocStd_XLink_IsNull(t)
Handle_TDocStd_XLink_IsNull = _TDocStd.Handle_TDocStd_XLink_IsNull

def Handle_TDocStd_XLinkRoot_Create() -> "opencascade::handle< TDocStd_XLinkRoot >":
    return _TDocStd.Handle_TDocStd_XLinkRoot_Create()
Handle_TDocStd_XLinkRoot_Create = _TDocStd.Handle_TDocStd_XLinkRoot_Create

def Handle_TDocStd_XLinkRoot_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDocStd_XLinkRoot >":
    return _TDocStd.Handle_TDocStd_XLinkRoot_DownCast(t)
Handle_TDocStd_XLinkRoot_DownCast = _TDocStd.Handle_TDocStd_XLinkRoot_DownCast

def Handle_TDocStd_XLinkRoot_IsNull(t: 'opencascade::handle< TDocStd_XLinkRoot > const &') -> "bool":
    return _TDocStd.Handle_TDocStd_XLinkRoot_IsNull(t)
Handle_TDocStd_XLinkRoot_IsNull = _TDocStd.Handle_TDocStd_XLinkRoot_IsNull
class TDocStd_LabelIDMapDataMap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDocStd.TDocStd_LabelIDMapDataMap_swiginit(self, _TDocStd.new_TDocStd_LabelIDMapDataMap(*args))
    __swig_destroy__ = _TDocStd.delete_TDocStd_LabelIDMapDataMap
TDocStd_LabelIDMapDataMap.begin = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_begin, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.end = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_end, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.cbegin = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_cbegin, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.cend = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_cend, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Exchange = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Exchange, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Assign = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Assign, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Set = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Set, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.ReSize = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_ReSize, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Bind = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Bind, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Bound = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Bound, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.IsBound = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_IsBound, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.UnBind = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_UnBind, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Seek = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Seek, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Find = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Find, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.ChangeSeek = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_ChangeSeek, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.ChangeFind = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_ChangeFind, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.__call__ = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap___call__, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Clear = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Clear, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap.Size = new_instancemethod(_TDocStd.TDocStd_LabelIDMapDataMap_Size, None, TDocStd_LabelIDMapDataMap)
TDocStd_LabelIDMapDataMap_swigregister = _TDocStd.TDocStd_LabelIDMapDataMap_swigregister
TDocStd_LabelIDMapDataMap_swigregister(TDocStd_LabelIDMapDataMap)

class TDocStd_SequenceOfApplicationDelta(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDocStd.TDocStd_SequenceOfApplicationDelta_swiginit(self, _TDocStd.new_TDocStd_SequenceOfApplicationDelta(*args))
    delNode = staticmethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_delNode)
    __swig_destroy__ = _TDocStd.delete_TDocStd_SequenceOfApplicationDelta
TDocStd_SequenceOfApplicationDelta.begin = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_begin, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.end = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_end, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.cbegin = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_cbegin, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.cend = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_cend, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Size = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Size, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Length = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Length, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Lower = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Lower, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Upper = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Upper, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.IsEmpty = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_IsEmpty, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Reverse = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Reverse, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Exchange = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Exchange, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Clear = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Clear, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Assign = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Assign, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Set = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Set, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Remove = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Remove, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Append = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Append, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Prepend = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Prepend, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.InsertBefore = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_InsertBefore, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.InsertAfter = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_InsertAfter, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Split = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Split, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.First = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_First, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.ChangeFirst = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_ChangeFirst, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Last = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Last, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.ChangeLast = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_ChangeLast, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.Value = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_Value, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.ChangeValue = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_ChangeValue, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.__call__ = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta___call__, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta.SetValue = new_instancemethod(_TDocStd.TDocStd_SequenceOfApplicationDelta_SetValue, None, TDocStd_SequenceOfApplicationDelta)
TDocStd_SequenceOfApplicationDelta_swigregister = _TDocStd.TDocStd_SequenceOfApplicationDelta_swigregister
TDocStd_SequenceOfApplicationDelta_swigregister(TDocStd_SequenceOfApplicationDelta)

def TDocStd_SequenceOfApplicationDelta_delNode(theNode: 'NCollection_SeqNode *', theAl: 'TDF_HAllocator') -> "void":
    return _TDocStd.TDocStd_SequenceOfApplicationDelta_delNode(theNode, theAl)
TDocStd_SequenceOfApplicationDelta_delNode = _TDocStd.TDocStd_SequenceOfApplicationDelta_delNode

class TDocStd_SequenceOfDocument(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDocStd.TDocStd_SequenceOfDocument_swiginit(self, _TDocStd.new_TDocStd_SequenceOfDocument(*args))
    delNode = staticmethod(_TDocStd.TDocStd_SequenceOfDocument_delNode)
    __swig_destroy__ = _TDocStd.delete_TDocStd_SequenceOfDocument
TDocStd_SequenceOfDocument.begin = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_begin, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.end = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_end, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.cbegin = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_cbegin, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.cend = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_cend, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Size = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Size, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Length = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Length, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Lower = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Lower, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Upper = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Upper, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.IsEmpty = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_IsEmpty, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Reverse = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Reverse, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Exchange = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Exchange, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Clear = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Clear, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Assign = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Assign, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Set = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Set, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Remove = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Remove, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Append = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Append, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Prepend = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Prepend, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.InsertBefore = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_InsertBefore, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.InsertAfter = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_InsertAfter, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Split = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Split, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.First = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_First, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.ChangeFirst = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_ChangeFirst, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Last = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Last, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.ChangeLast = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_ChangeLast, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.Value = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_Value, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.ChangeValue = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_ChangeValue, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.__call__ = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument___call__, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument.SetValue = new_instancemethod(_TDocStd.TDocStd_SequenceOfDocument_SetValue, None, TDocStd_SequenceOfDocument)
TDocStd_SequenceOfDocument_swigregister = _TDocStd.TDocStd_SequenceOfDocument_swigregister
TDocStd_SequenceOfDocument_swigregister(TDocStd_SequenceOfDocument)

def TDocStd_SequenceOfDocument_delNode(theNode: 'NCollection_SeqNode *', theAl: 'TDF_HAllocator') -> "void":
    return _TDocStd.TDocStd_SequenceOfDocument_delNode(theNode, theAl)
TDocStd_SequenceOfDocument_delNode = _TDocStd.TDocStd_SequenceOfDocument_delNode

class tdocstd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IDList(*args) -> "void":
        """
        * specific GUID of this package ============================= Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use.
        	:param anIDList:
        	:type anIDList: TDF_IDList
        	:rtype: void
        """
        return _TDocStd.tdocstd_IDList(*args)

    IDList = staticmethod(IDList)

    __repr__ = _dumps_object


    def __init__(self):
        _TDocStd.tdocstd_swiginit(self, _TDocStd.new_tdocstd())
    __swig_destroy__ = _TDocStd.delete_tdocstd
tdocstd_swigregister = _TDocStd.tdocstd_swigregister
tdocstd_swigregister(tdocstd)

def tdocstd_IDList(*args) -> "void":
    """
    * specific GUID of this package ============================= Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use.
    	:param anIDList:
    	:type anIDList: TDF_IDList
    	:rtype: void
    """
    return _TDocStd.tdocstd_IDList(*args)

class TDocStd_Application(OCC.Core.CDF.CDF_Application):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Close(self, *args) -> "void":
        """
        * Close the given document. the document is not any more handled by the applicative session.
        	:param aDoc:
        	:type aDoc: TDocStd_Document
        	:rtype: None
        """
        return _TDocStd.TDocStd_Application_Close(self, *args)


    def DefineFormat(self, *args) -> "void":
        """
        * Sets up resources and registers read and storage drivers for the specified format. @param theFormat - unique name for the format, used to identify it. @param theDescription - textual description of the format. @param theExtension - extension of the files in that format. The same extension can be used by several formats. @param theReader - instance of the read driver for the format.  Null value is allowed (no possibility to read). @param theWriter - instance of the write driver for the format.  Null value is allowed (no possibility to write).
        	:param theFormat:
        	:type theFormat: TCollection_AsciiString
        	:param theDescription:
        	:type theDescription: TCollection_AsciiString
        	:param theExtension:
        	:type theExtension: TCollection_AsciiString
        	:param theReader:
        	:type theReader: PCDM_RetrievalDriver
        	:param theWriter:
        	:type theWriter: PCDM_StorageDriver
        	:rtype: None
        """
        return _TDocStd.TDocStd_Application_DefineFormat(self, *args)


    def GetDocument(self, *args) -> "void":
        """
        * Constructs the new document aDoc. aDoc is identified by the index index which is any integer between 1 and n where n is the number of documents returned by NbDocument. Example opencascade::handle<TDocStd_Application> anApp; if (!CafTest::Find(A)) return 1; opencascade::handle<TDocStd> aDoc; Standard_Integer nbdoc = anApp->NbDocuments(); for (Standard_Integer i = 1; i <= nbdoc; i++) { aApp->GetDocument(i,aDoc);
        	:param index:
        	:type index: int
        	:param aDoc:
        	:type aDoc: TDocStd_Document
        	:rtype: None
        """
        return _TDocStd.TDocStd_Application_GetDocument(self, *args)


    def InitDocument(self, *args) -> "void":
        """
        * Initialize the document aDoc for the applicative session. This virtual function is called by NewDocument and is to be redefined for each specific application. Modified flag (different of disk version) ============= to open/save a document =======================
        	:param aDoc:
        	:type aDoc: TDocStd_Document
        	:rtype: void
        """
        return _TDocStd.TDocStd_Application_InitDocument(self, *args)


    def IsDriverLoaded(self, *args) -> "Standard_Boolean":
        """
        * Check if meta data driver was successfully loaded by the application constructor
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Application_IsDriverLoaded(self, *args)


    def IsInSession(self, *args) -> "Standard_Integer":
        """
        * Returns an index for the document found in the path path in this applicative session. If the returned value is 0, the document is not present in the applicative session. This method can be used for the interactive part of an application. For instance, on a call to Open, the document to be opened may already be in memory. IsInSession checks to see if this is the case. Open can be made to depend on the value of the index returned: if IsInSession returns 0, the document is opened; if it returns another value, a message is displayed asking the user if he wants to override the version of the document in memory. Example: Standard_Integer insession = A->IsInSession(aDoc); if (insession > 0) { std::cout << 'document ' << insession << ' is already in session' << std::endl; return 0; }
        	:param path:
        	:type path: TCollection_ExtendedString
        	:rtype: int
        """
        return _TDocStd.TDocStd_Application_IsInSession(self, *args)


    def NbDocuments(self, *args) -> "Standard_Integer":
        """
        * returns the number of documents handled by the current applicative session.
        	:rtype: int
        """
        return _TDocStd.TDocStd_Application_NbDocuments(self, *args)


    def NewDocument(self, *args) -> "void":
        """
        * Constructs the empty new document aDoc. This document will have the format format. If InitDocument is redefined for a specific application, the new document is handled by the applicative session.
        	:param format:
        	:type format: TCollection_ExtendedString
        	:param aDoc:
        	:type aDoc: TDocStd_Document
        	:rtype: void
        """
        return _TDocStd.TDocStd_Application_NewDocument(self, *args)


    def OnAbortTransaction(self, *args) -> "void":
        """
        * Notification that is fired at each AbortTransaction event.
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:rtype: void
        """
        return _TDocStd.TDocStd_Application_OnAbortTransaction(self, *args)


    def OnCommitTransaction(self, *args) -> "void":
        """
        * Notification that is fired at each CommitTransaction event.
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:rtype: void
        """
        return _TDocStd.TDocStd_Application_OnCommitTransaction(self, *args)


    def OnOpenTransaction(self, *args) -> "void":
        """
        * Notification that is fired at each OpenTransaction event.
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:rtype: void
        """
        return _TDocStd.TDocStd_Application_OnOpenTransaction(self, *args)


    def Open(self, *args) -> "PCDM_ReaderStatus":
        """
        * Retrieves the document aDoc stored under the name aName in the directory directory. In order not to override a version of aDoc which is already in memory, this method can be made to depend on the value returned by IsInSession.
        	:param path:
        	:type path: TCollection_ExtendedString
        	:param aDoc:
        	:type aDoc: TDocStd_Document
        	:rtype: PCDM_ReaderStatus
        * Retrieves aDoc from standard SEEKABLE stream theIStream. the stream should support SEEK fuctionality
        	:param theIStream:
        	:type theIStream: Standard_IStream
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:rtype: PCDM_ReaderStatus
        """
        return _TDocStd.TDocStd_Application_Open(self, *args)


    def ReadingFormats(self, *args) -> "void":
        """
        * Returns the sequence of reading formats supported by the application. //! @param theFormats - sequence of reading formats. Output parameter.
        	:param theFormats:
        	:type theFormats: TColStd_SequenceOfAsciiString
        	:rtype: None
        """
        return _TDocStd.TDocStd_Application_ReadingFormats(self, *args)


    def ResourcesName(self, *args) -> "char const *":
        """
        * Returns the name of the file containing the resources of this application, for support of legacy method of loading formats data from resource files. //! Method DefineFormat() can be used to define all necessary parameters explicitly without actually using resource files. //! In a resource file, the application associates the schema name of the document with the storage and retrieval plug-ins that are to be loaded for each document. On retrieval, the application reads the schema name in the heading of the CSF file and loads the plug-in indicated in the resource file. This plug-in instantiates the actual driver for transient-persistent conversion. Your application can bring this process into play by defining a class which inherits CDF_Application and redefines the function which returns the appropriate resources file. At this point, the function Retrieve and the class CDF_Store can be called. This allows you to deal with storage and retrieval of - as well as copying and pasting - documents. To implement a class like this, several virtual functions should be redefined. In particular, you must redefine the abstract function Resources inherited from the superclass CDM_Application. //! Default implementation returns empty string.
        	:rtype: char *
        """
        return _TDocStd.TDocStd_Application_ResourcesName(self, *args)


    def Save(self, *args) -> "PCDM_StoreStatus":
        """
        * Save aDoc active document. Exceptions: Standard_NotImplemented if the document was not retrieved in the applicative session by using Open.
        	:param aDoc:
        	:type aDoc: TDocStd_Document
        	:rtype: PCDM_StoreStatus
        * Save the document overwriting the previous file
        	:param aDoc:
        	:type aDoc: TDocStd_Document
        	:param theStatusMessage:
        	:type theStatusMessage: TCollection_ExtendedString
        	:rtype: PCDM_StoreStatus
        """
        return _TDocStd.TDocStd_Application_Save(self, *args)


    def SaveAs(self, *args) -> "PCDM_StoreStatus":
        """
        * Save the active document in the file <name> in the path <path> ; o verwrites the file if it already exists.
        	:param aDoc:
        	:type aDoc: TDocStd_Document
        	:param path:
        	:type path: TCollection_ExtendedString
        	:rtype: PCDM_StoreStatus
        * Save theDoc to standard SEEKABLE stream theOStream. the stream should support SEEK fuctionality
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:param theOStream:
        	:type theOStream: Standard_OStream
        	:rtype: PCDM_StoreStatus
        * Save the active document in the file <name> in the path <path> . overwrite the file if it already exist.
        	:param aDoc:
        	:type aDoc: TDocStd_Document
        	:param path:
        	:type path: TCollection_ExtendedString
        	:param theStatusMessage:
        	:type theStatusMessage: TCollection_ExtendedString
        	:rtype: PCDM_StoreStatus
        * Save theDoc TO standard SEEKABLE stream theOStream. the stream should support SEEK fuctionality
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:param theOStream:
        	:type theOStream: Standard_OStream
        	:param theStatusMessage:
        	:type theStatusMessage: TCollection_ExtendedString
        	:rtype: PCDM_StoreStatus
        """
        return _TDocStd.TDocStd_Application_SaveAs(self, *args)


    def __init__(self, *args):
        """
        * Constructs the new instance and registers it in CDM_Session
        	:rtype: None
        """
        _TDocStd.TDocStd_Application_swiginit(self, _TDocStd.new_TDocStd_Application(*args))

    def WritingFormats(self, *args) -> "void":
        """
        * Returns the sequence of writing formats supported by the application. //! @param theFormats - sequence of writing formats. Output parameter.
        	:param theFormats:
        	:type theFormats: TColStd_SequenceOfAsciiString
        	:rtype: None
        """
        return _TDocStd.TDocStd_Application_WritingFormats(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDocStd_Application_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_Application
TDocStd_Application.Close = new_instancemethod(_TDocStd.TDocStd_Application_Close, None, TDocStd_Application)
TDocStd_Application.DefineFormat = new_instancemethod(_TDocStd.TDocStd_Application_DefineFormat, None, TDocStd_Application)
TDocStd_Application.GetDocument = new_instancemethod(_TDocStd.TDocStd_Application_GetDocument, None, TDocStd_Application)
TDocStd_Application.InitDocument = new_instancemethod(_TDocStd.TDocStd_Application_InitDocument, None, TDocStd_Application)
TDocStd_Application.IsDriverLoaded = new_instancemethod(_TDocStd.TDocStd_Application_IsDriverLoaded, None, TDocStd_Application)
TDocStd_Application.IsInSession = new_instancemethod(_TDocStd.TDocStd_Application_IsInSession, None, TDocStd_Application)
TDocStd_Application.NbDocuments = new_instancemethod(_TDocStd.TDocStd_Application_NbDocuments, None, TDocStd_Application)
TDocStd_Application.NewDocument = new_instancemethod(_TDocStd.TDocStd_Application_NewDocument, None, TDocStd_Application)
TDocStd_Application.OnAbortTransaction = new_instancemethod(_TDocStd.TDocStd_Application_OnAbortTransaction, None, TDocStd_Application)
TDocStd_Application.OnCommitTransaction = new_instancemethod(_TDocStd.TDocStd_Application_OnCommitTransaction, None, TDocStd_Application)
TDocStd_Application.OnOpenTransaction = new_instancemethod(_TDocStd.TDocStd_Application_OnOpenTransaction, None, TDocStd_Application)
TDocStd_Application.Open = new_instancemethod(_TDocStd.TDocStd_Application_Open, None, TDocStd_Application)
TDocStd_Application.ReadingFormats = new_instancemethod(_TDocStd.TDocStd_Application_ReadingFormats, None, TDocStd_Application)
TDocStd_Application.ResourcesName = new_instancemethod(_TDocStd.TDocStd_Application_ResourcesName, None, TDocStd_Application)
TDocStd_Application.Save = new_instancemethod(_TDocStd.TDocStd_Application_Save, None, TDocStd_Application)
TDocStd_Application.SaveAs = new_instancemethod(_TDocStd.TDocStd_Application_SaveAs, None, TDocStd_Application)
TDocStd_Application.WritingFormats = new_instancemethod(_TDocStd.TDocStd_Application_WritingFormats, None, TDocStd_Application)
TDocStd_Application_swigregister = _TDocStd.TDocStd_Application_swigregister
TDocStd_Application_swigregister(TDocStd_Application)

class TDocStd_ApplicationDelta(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(TDocStd_ApplicationDelta self) -> std::string"""
        return _TDocStd.TDocStd_ApplicationDelta_DumpToString(self)


    def GetDocuments(self, *args) -> "TDocStd_SequenceOfDocument &":
        """:rtype: TDocStd_SequenceOfDocument"""
        return _TDocStd.TDocStd_ApplicationDelta_GetDocuments(self, *args)


    def GetName(self, *args) -> "TCollection_ExtendedString const &":
        """:rtype: TCollection_ExtendedString"""
        return _TDocStd.TDocStd_ApplicationDelta_GetName(self, *args)


    def SetName(self, *args) -> "void":
        """
        :param theName:
        	:type theName: TCollection_ExtendedString
        	:rtype: None
        """
        return _TDocStd.TDocStd_ApplicationDelta_SetName(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TDocStd.TDocStd_ApplicationDelta_swiginit(self, _TDocStd.new_TDocStd_ApplicationDelta(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TDocStd_ApplicationDelta_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_ApplicationDelta
TDocStd_ApplicationDelta.DumpToString = new_instancemethod(_TDocStd.TDocStd_ApplicationDelta_DumpToString, None, TDocStd_ApplicationDelta)
TDocStd_ApplicationDelta.GetDocuments = new_instancemethod(_TDocStd.TDocStd_ApplicationDelta_GetDocuments, None, TDocStd_ApplicationDelta)
TDocStd_ApplicationDelta.GetName = new_instancemethod(_TDocStd.TDocStd_ApplicationDelta_GetName, None, TDocStd_ApplicationDelta)
TDocStd_ApplicationDelta.SetName = new_instancemethod(_TDocStd.TDocStd_ApplicationDelta_SetName, None, TDocStd_ApplicationDelta)
TDocStd_ApplicationDelta_swigregister = _TDocStd.TDocStd_ApplicationDelta_swigregister
TDocStd_ApplicationDelta_swigregister(TDocStd_ApplicationDelta)

class TDocStd_CompoundDelta(OCC.Core.TDF.TDF_Delta):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a compound delta. Validates <self> at <aBeginTime>. If applied, it restores the TDF_Data in the state it was at <anEndTime>. Reserved to TDF_Data.
        	:rtype: None
        """
        _TDocStd.TDocStd_CompoundDelta_swiginit(self, _TDocStd.new_TDocStd_CompoundDelta(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TDocStd_CompoundDelta_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_CompoundDelta
TDocStd_CompoundDelta_swigregister = _TDocStd.TDocStd_CompoundDelta_swigregister
TDocStd_CompoundDelta_swigregister(TDocStd_CompoundDelta)

class TDocStd_Context(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ModifiedReferences(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TDocStd.TDocStd_Context_ModifiedReferences(self, *args)


    def SetModifiedReferences(self, *args) -> "void":
        """
        :param Mod:
        	:type Mod: bool
        	:rtype: None
        """
        return _TDocStd.TDocStd_Context_SetModifiedReferences(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TDocStd.TDocStd_Context_swiginit(self, _TDocStd.new_TDocStd_Context(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_Context
TDocStd_Context.ModifiedReferences = new_instancemethod(_TDocStd.TDocStd_Context_ModifiedReferences, None, TDocStd_Context)
TDocStd_Context.SetModifiedReferences = new_instancemethod(_TDocStd.TDocStd_Context_SetModifiedReferences, None, TDocStd_Context)
TDocStd_Context_swigregister = _TDocStd.TDocStd_Context_swigregister
TDocStd_Context_swigregister(TDocStd_Context)

class TDocStd_Document(OCC.Core.CDM.CDM_Document):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AbortCommand(self, *args) -> "void":
        """
        * Abort the Command transaction. Does nothing If there is no Command transaction open.
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_AbortCommand(self, *args)


    def BeforeClose(self, *args) -> "void":
        """
        * Prepares document for closing
        	:rtype: void
        """
        return _TDocStd.TDocStd_Document_BeforeClose(self, *args)


    def ChangeStorageFormat(self, *args) -> "void":
        """
        * methods for the nested transaction mode
        	:param newStorageFormat:
        	:type newStorageFormat: TCollection_ExtendedString
        	:rtype: void
        """
        return _TDocStd.TDocStd_Document_ChangeStorageFormat(self, *args)


    def ClearRedos(self, *args) -> "void":
        """
        * Remove all stored Redos
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_ClearRedos(self, *args)


    def ClearUndos(self, *args) -> "void":
        """
        * Remove all stored Undos and Redos
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_ClearUndos(self, *args)


    def CommitCommand(self, *args) -> "Standard_Boolean":
        """
        * Commits documents transactions and fills the transaction manager with documents that have been changed during the transaction. If no command transaction is open, nothing is done. Returns True if a new delta has been added to myUndos.
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_CommitCommand(self, *args)


    def EmptyLabelsSavingMode(self, *args) -> "Standard_Boolean":
        """
        * Returns saving mode for empty labels.
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_EmptyLabelsSavingMode(self, *args)


    def Get(*args) -> "opencascade::handle< TDocStd_Document >":
        """
        * Will Abort any execution, clear fields returns the document which contains <L>. raises an exception if the document is not found.
        	:param L:
        	:type L: TDF_Label
        	:rtype: opencascade::handle<TDocStd_Document>
        """
        return _TDocStd.TDocStd_Document_Get(*args)

    Get = staticmethod(Get)

    def GetAvailableRedos(self, *args) -> "Standard_Integer":
        """
        * Returns the number of redos stored in this document. If this figure is greater than 0, the method Redo can be used.
        	:rtype: int
        """
        return _TDocStd.TDocStd_Document_GetAvailableRedos(self, *args)


    def GetAvailableUndos(self, *args) -> "Standard_Integer":
        """
        * Returns the number of undos stored in this document. If this figure is greater than 0, the method Undo can be used.
        	:rtype: int
        """
        return _TDocStd.TDocStd_Document_GetAvailableUndos(self, *args)


    def GetData(self, *args) -> "opencascade::handle< TDF_Data >":
        """:rtype: opencascade::handle<TDF_Data>"""
        return _TDocStd.TDocStd_Document_GetData(self, *args)


    def GetModified(self, *args) -> "TDF_LabelMap const &":
        """
        * Returns the labels which have been modified in this document.
        	:rtype: TDF_LabelMap
        """
        return _TDocStd.TDocStd_Document_GetModified(self, *args)


    def GetName(self, *args) -> "TCollection_ExtendedString":
        """
        * raise if <self> is not saved.
        	:rtype: TCollection_ExtendedString
        """
        return _TDocStd.TDocStd_Document_GetName(self, *args)


    def GetPath(self, *args) -> "TCollection_ExtendedString":
        """
        * returns the OS path of the file, in wich one <self> is saved. Raise an exception if <self> is not saved.
        	:rtype: TCollection_ExtendedString
        """
        return _TDocStd.TDocStd_Document_GetPath(self, *args)


    def GetRedos(self, *args) -> "TDF_DeltaList const &":
        """:rtype: TDF_DeltaList"""
        return _TDocStd.TDocStd_Document_GetRedos(self, *args)


    def GetSavedTime(self, *args) -> "Standard_Integer":
        """
        * Returns value of <mySavedTime> to be used later in SetSavedTime()
        	:rtype: int
        """
        return _TDocStd.TDocStd_Document_GetSavedTime(self, *args)


    def GetUndoLimit(self, *args) -> "Standard_Integer":
        """
        * The current limit on the number of undos
        	:rtype: int
        """
        return _TDocStd.TDocStd_Document_GetUndoLimit(self, *args)


    def GetUndos(self, *args) -> "TDF_DeltaList const &":
        """:rtype: TDF_DeltaList"""
        return _TDocStd.TDocStd_Document_GetUndos(self, *args)


    def HasOpenCommand(self, *args) -> "Standard_Boolean":
        """
        * returns True if a Command transaction is open in the curret .
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_HasOpenCommand(self, *args)


    def InitDeltaCompaction(self, *args) -> "Standard_Boolean":
        """
        * Initializes the procedure of delta compaction Returns false if there is no delta to compact Marks the last delta as a 'from' delta
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_InitDeltaCompaction(self, *args)


    def IsChanged(self, *args) -> "Standard_Boolean":
        """
        * returns True if document differs from the state of last saving. this method have to be called only wroking in the transaction mode
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_IsChanged(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the main label has no attributes
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_IsEmpty(self, *args)


    def IsNestedTransactionMode(self, *args) -> "Standard_Boolean":
        """
        * Returns Standard_True if mode is set
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_IsNestedTransactionMode(self, *args)


    def IsSaved(self, *args) -> "Standard_Boolean":
        """
        * the document is saved in a file.
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_IsSaved(self, *args)


    def IsValid(self, *args) -> "Standard_Boolean":
        """
        * Returns False if the document has been modified but not recomputed.
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_IsValid(self, *args)


    def Main(self, *args) -> "TDF_Label":
        """
        * Returns the main label in this data framework. By definition, this is the label with the entry 0:1.
        	:rtype: TDF_Label
        """
        return _TDocStd.TDocStd_Document_Main(self, *args)


    def ModificationMode(self, *args) -> "Standard_Boolean":
        """
        * returns True if changes allowed only inside transactions
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_ModificationMode(self, *args)


    def NewCommand(self, *args) -> "void":
        """
        * Launches a new command. This command may be undone.
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_NewCommand(self, *args)


    def OpenCommand(self, *args) -> "void":
        """
        * Opens a new command transaction in this document. You can use HasOpenCommand to see whether a command is already open. Exceptions Standard_DomainError if a command is already open in this document.
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_OpenCommand(self, *args)


    def PerformDeltaCompaction(self, *args) -> "Standard_Boolean":
        """
        * Performs the procedure of delta compaction Makes all deltas starting from 'from' delta till the last one to be one delta.
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_PerformDeltaCompaction(self, *args)


    def PurgeModified(self, *args) -> "void":
        """
        * Remove all modifications. After this call The document becomesagain Valid.
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_PurgeModified(self, *args)


    def Recompute(self, *args) -> "void":
        """
        * Recompute if the document was not valid and propagate the reccorded modification.
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_Recompute(self, *args)


    def Redo(self, *args) -> "Standard_Boolean":
        """
        * Will REDO one step, returns False if no redo was done (Redos == 0). Otherwise, true is returned, and one step in the list of redoes is done again.
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_Redo(self, *args)


    def RemoveFirstUndo(self, *args) -> "void":
        """
        * Removes the first undo in the list of document undos. It is used in the application when the undo limit is exceed.
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_RemoveFirstUndo(self, *args)


    def SetData(self, *args) -> "void":
        """
        :param data:
        	:type data: TDF_Data
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_SetData(self, *args)


    def SetEmptyLabelsSavingMode(self, *args) -> "void":
        """
        * Sets saving mode for empty labels. If Standard_True, empty labels will be saved.
        	:param isAllowed:
        	:type isAllowed: bool
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_SetEmptyLabelsSavingMode(self, *args)


    def SetModificationMode(self, *args) -> "void":
        """
        * if theTransactionOnly is True changes is denied outside transactions
        	:param theTransactionOnly:
        	:type theTransactionOnly: bool
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_SetModificationMode(self, *args)


    def SetModified(self, *args) -> "void":
        """
        * Notify the label as modified, the Document becomes UnValid. returns True if <L> has been notified as modified.
        	:param L:
        	:type L: TDF_Label
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_SetModified(self, *args)


    def SetNestedTransactionMode(self, *args) -> "void":
        """
        * Sets nested transaction mode if isAllowed == Standard_True
        	:param isAllowed: default value is Standard_True
        	:type isAllowed: bool
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_SetNestedTransactionMode(self, *args)


    def SetSaved(self, *args) -> "void":
        """
        * This method have to be called to show document that it has been saved
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_SetSaved(self, *args)


    def SetSavedTime(self, *args) -> "void":
        """
        * Say to document what it is not saved. Use value, returned earlier by GetSavedTime().
        	:param theTime:
        	:type theTime: int
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_SetSavedTime(self, *args)


    def SetUndoLimit(self, *args) -> "void":
        """
        * Set the limit on the number of Undo Delta stored 0 will disable Undo on the document A negative value means no limit. Note that by default Undo is disabled. Enabling it will take effect with the next call to NewCommand. Of course this limit is the same for Redo
        	:param L:
        	:type L: int
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_SetUndoLimit(self, *args)


    def __init__(self, *args):
        """
        * Constructs a document object defined by the string astorageformat.
        	:param astorageformat:
        	:type astorageformat: TCollection_ExtendedString
        	:rtype: None
        """
        _TDocStd.TDocStd_Document_swiginit(self, _TDocStd.new_TDocStd_Document(*args))

    def Undo(self, *args) -> "Standard_Boolean":
        """
        * Will UNDO one step, returns False if no undo was done (Undos == 0). Otherwise, true is returned and one step in the list of undoes is undone.
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Document_Undo(self, *args)


    def UpdateReferences(self, *args) -> "void":
        """
        * Set modifications on labels impacted by external references to the entry. The document becomes invalid and must be recomputed.
        	:param aDocEntry:
        	:type aDocEntry: TCollection_AsciiString
        	:rtype: None
        """
        return _TDocStd.TDocStd_Document_UpdateReferences(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDocStd_Document_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_Document
TDocStd_Document.AbortCommand = new_instancemethod(_TDocStd.TDocStd_Document_AbortCommand, None, TDocStd_Document)
TDocStd_Document.BeforeClose = new_instancemethod(_TDocStd.TDocStd_Document_BeforeClose, None, TDocStd_Document)
TDocStd_Document.ChangeStorageFormat = new_instancemethod(_TDocStd.TDocStd_Document_ChangeStorageFormat, None, TDocStd_Document)
TDocStd_Document.ClearRedos = new_instancemethod(_TDocStd.TDocStd_Document_ClearRedos, None, TDocStd_Document)
TDocStd_Document.ClearUndos = new_instancemethod(_TDocStd.TDocStd_Document_ClearUndos, None, TDocStd_Document)
TDocStd_Document.CommitCommand = new_instancemethod(_TDocStd.TDocStd_Document_CommitCommand, None, TDocStd_Document)
TDocStd_Document.EmptyLabelsSavingMode = new_instancemethod(_TDocStd.TDocStd_Document_EmptyLabelsSavingMode, None, TDocStd_Document)
TDocStd_Document.GetAvailableRedos = new_instancemethod(_TDocStd.TDocStd_Document_GetAvailableRedos, None, TDocStd_Document)
TDocStd_Document.GetAvailableUndos = new_instancemethod(_TDocStd.TDocStd_Document_GetAvailableUndos, None, TDocStd_Document)
TDocStd_Document.GetData = new_instancemethod(_TDocStd.TDocStd_Document_GetData, None, TDocStd_Document)
TDocStd_Document.GetModified = new_instancemethod(_TDocStd.TDocStd_Document_GetModified, None, TDocStd_Document)
TDocStd_Document.GetName = new_instancemethod(_TDocStd.TDocStd_Document_GetName, None, TDocStd_Document)
TDocStd_Document.GetPath = new_instancemethod(_TDocStd.TDocStd_Document_GetPath, None, TDocStd_Document)
TDocStd_Document.GetRedos = new_instancemethod(_TDocStd.TDocStd_Document_GetRedos, None, TDocStd_Document)
TDocStd_Document.GetSavedTime = new_instancemethod(_TDocStd.TDocStd_Document_GetSavedTime, None, TDocStd_Document)
TDocStd_Document.GetUndoLimit = new_instancemethod(_TDocStd.TDocStd_Document_GetUndoLimit, None, TDocStd_Document)
TDocStd_Document.GetUndos = new_instancemethod(_TDocStd.TDocStd_Document_GetUndos, None, TDocStd_Document)
TDocStd_Document.HasOpenCommand = new_instancemethod(_TDocStd.TDocStd_Document_HasOpenCommand, None, TDocStd_Document)
TDocStd_Document.InitDeltaCompaction = new_instancemethod(_TDocStd.TDocStd_Document_InitDeltaCompaction, None, TDocStd_Document)
TDocStd_Document.IsChanged = new_instancemethod(_TDocStd.TDocStd_Document_IsChanged, None, TDocStd_Document)
TDocStd_Document.IsEmpty = new_instancemethod(_TDocStd.TDocStd_Document_IsEmpty, None, TDocStd_Document)
TDocStd_Document.IsNestedTransactionMode = new_instancemethod(_TDocStd.TDocStd_Document_IsNestedTransactionMode, None, TDocStd_Document)
TDocStd_Document.IsSaved = new_instancemethod(_TDocStd.TDocStd_Document_IsSaved, None, TDocStd_Document)
TDocStd_Document.IsValid = new_instancemethod(_TDocStd.TDocStd_Document_IsValid, None, TDocStd_Document)
TDocStd_Document.Main = new_instancemethod(_TDocStd.TDocStd_Document_Main, None, TDocStd_Document)
TDocStd_Document.ModificationMode = new_instancemethod(_TDocStd.TDocStd_Document_ModificationMode, None, TDocStd_Document)
TDocStd_Document.NewCommand = new_instancemethod(_TDocStd.TDocStd_Document_NewCommand, None, TDocStd_Document)
TDocStd_Document.OpenCommand = new_instancemethod(_TDocStd.TDocStd_Document_OpenCommand, None, TDocStd_Document)
TDocStd_Document.PerformDeltaCompaction = new_instancemethod(_TDocStd.TDocStd_Document_PerformDeltaCompaction, None, TDocStd_Document)
TDocStd_Document.PurgeModified = new_instancemethod(_TDocStd.TDocStd_Document_PurgeModified, None, TDocStd_Document)
TDocStd_Document.Recompute = new_instancemethod(_TDocStd.TDocStd_Document_Recompute, None, TDocStd_Document)
TDocStd_Document.Redo = new_instancemethod(_TDocStd.TDocStd_Document_Redo, None, TDocStd_Document)
TDocStd_Document.RemoveFirstUndo = new_instancemethod(_TDocStd.TDocStd_Document_RemoveFirstUndo, None, TDocStd_Document)
TDocStd_Document.SetData = new_instancemethod(_TDocStd.TDocStd_Document_SetData, None, TDocStd_Document)
TDocStd_Document.SetEmptyLabelsSavingMode = new_instancemethod(_TDocStd.TDocStd_Document_SetEmptyLabelsSavingMode, None, TDocStd_Document)
TDocStd_Document.SetModificationMode = new_instancemethod(_TDocStd.TDocStd_Document_SetModificationMode, None, TDocStd_Document)
TDocStd_Document.SetModified = new_instancemethod(_TDocStd.TDocStd_Document_SetModified, None, TDocStd_Document)
TDocStd_Document.SetNestedTransactionMode = new_instancemethod(_TDocStd.TDocStd_Document_SetNestedTransactionMode, None, TDocStd_Document)
TDocStd_Document.SetSaved = new_instancemethod(_TDocStd.TDocStd_Document_SetSaved, None, TDocStd_Document)
TDocStd_Document.SetSavedTime = new_instancemethod(_TDocStd.TDocStd_Document_SetSavedTime, None, TDocStd_Document)
TDocStd_Document.SetUndoLimit = new_instancemethod(_TDocStd.TDocStd_Document_SetUndoLimit, None, TDocStd_Document)
TDocStd_Document.Undo = new_instancemethod(_TDocStd.TDocStd_Document_Undo, None, TDocStd_Document)
TDocStd_Document.UpdateReferences = new_instancemethod(_TDocStd.TDocStd_Document_UpdateReferences, None, TDocStd_Document)
TDocStd_Document_swigregister = _TDocStd.TDocStd_Document_swigregister
TDocStd_Document_swigregister(TDocStd_Document)

def TDocStd_Document_Get(*args) -> "opencascade::handle< TDocStd_Document >":
    """
    * Will Abort any execution, clear fields returns the document which contains <L>. raises an exception if the document is not found.
    	:param L:
    	:type L: TDF_Label
    	:rtype: opencascade::handle<TDocStd_Document>
    """
    return _TDocStd.TDocStd_Document_Get(*args)

class TDocStd_Modified(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args) -> "Standard_Boolean":
        """
        :param alabel:
        	:type alabel: TDF_Label
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Modified_Add(*args)

    Add = staticmethod(Add)

    def AddLabel(self, *args) -> "Standard_Boolean":
        """
        * add <L> as modified
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Modified_AddLabel(self, *args)


    def Clear(self, *args) -> "void":
        """
        * remove all modified labels. becomes empty
        	:param access:
        	:type access: TDF_Label
        	:rtype: void
        :rtype: None
        """
        return _TDocStd.TDocStd_Modified_Clear(self, *args)


    def Contains(*args) -> "Standard_Boolean":
        """
        :param alabel:
        	:type alabel: TDF_Label
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Modified_Contains(*args)

    Contains = staticmethod(Contains)

    def DumpToString(self) -> "std::string":
        """DumpToString(TDocStd_Modified self) -> std::string"""
        return _TDocStd.TDocStd_Modified_DumpToString(self)


    def Get(self, *args) -> "TDF_LabelMap const &":
        """
        * if <IsEmpty> raise an exception.
        	:param access:
        	:type access: TDF_Label
        	:rtype: TDF_LabelMap
        * returns modified label map
        	:rtype: TDF_LabelMap
        """
        return _TDocStd.TDocStd_Modified_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Modified methods ================
        	:rtype: Standard_GUID
        """
        return _TDocStd.TDocStd_Modified_GetID(*args)

    GetID = staticmethod(GetID)

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * API class methods =================
        	:param access:
        	:type access: TDF_Label
        	:rtype: bool
        :rtype: bool
        """
        return _TDocStd.TDocStd_Modified_IsEmpty(self, *args)


    def Remove(*args) -> "Standard_Boolean":
        """
        :param alabel:
        	:type alabel: TDF_Label
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Modified_Remove(*args)

    Remove = staticmethod(Remove)

    def RemoveLabel(self, *args) -> "Standard_Boolean":
        """
        * remove <L> as modified
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _TDocStd.TDocStd_Modified_RemoveLabel(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TDocStd.TDocStd_Modified_swiginit(self, _TDocStd.new_TDocStd_Modified(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TDocStd_Modified_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_Modified
TDocStd_Modified.AddLabel = new_instancemethod(_TDocStd.TDocStd_Modified_AddLabel, None, TDocStd_Modified)
TDocStd_Modified.Clear = new_instancemethod(_TDocStd.TDocStd_Modified_Clear, None, TDocStd_Modified)
TDocStd_Modified.DumpToString = new_instancemethod(_TDocStd.TDocStd_Modified_DumpToString, None, TDocStd_Modified)
TDocStd_Modified.Get = new_instancemethod(_TDocStd.TDocStd_Modified_Get, None, TDocStd_Modified)
TDocStd_Modified.IsEmpty = new_instancemethod(_TDocStd.TDocStd_Modified_IsEmpty, None, TDocStd_Modified)
TDocStd_Modified.RemoveLabel = new_instancemethod(_TDocStd.TDocStd_Modified_RemoveLabel, None, TDocStd_Modified)
TDocStd_Modified_swigregister = _TDocStd.TDocStd_Modified_swigregister
TDocStd_Modified_swigregister(TDocStd_Modified)

def TDocStd_Modified_Add(*args) -> "Standard_Boolean":
    """
    :param alabel:
    	:type alabel: TDF_Label
    	:rtype: bool
    """
    return _TDocStd.TDocStd_Modified_Add(*args)

def TDocStd_Modified_Contains(*args) -> "Standard_Boolean":
    """
    :param alabel:
    	:type alabel: TDF_Label
    	:rtype: bool
    """
    return _TDocStd.TDocStd_Modified_Contains(*args)

def TDocStd_Modified_GetID(*args) -> "Standard_GUID const &":
    """
    * Modified methods ================
    	:rtype: Standard_GUID
    """
    return _TDocStd.TDocStd_Modified_GetID(*args)

def TDocStd_Modified_Remove(*args) -> "Standard_Boolean":
    """
    :param alabel:
    	:type alabel: TDF_Label
    	:rtype: bool
    """
    return _TDocStd.TDocStd_Modified_Remove(*args)

class TDocStd_MultiTransactionManager(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AbortCommand(self, *args) -> "void":
        """
        * Unsets the flag of started manager transaction and aborts transaction in each document.
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_AbortCommand(self, *args)


    def AddDocument(self, *args) -> "void":
        """
        * Adds the document to the transaction manager and checks if it has been already added
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_AddDocument(self, *args)


    def ClearRedos(self, *args) -> "void":
        """
        * Clears redos in the manager and in documents.
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_ClearRedos(self, *args)


    def ClearUndos(self, *args) -> "void":
        """
        * Clears undos in the manager and in documents.
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_ClearUndos(self, *args)


    def CommitCommand(self, *args) -> "Standard_Boolean":
        """
        * Commits transaction in all documents and fills the transaction manager with the documents that have been changed during the transaction. Returns True if new data has been added to myUndos. NOTE: All nested transactions in the documents will be commited.
        	:rtype: bool
        * Makes the same steps as the previous function but defines the name for transaction. Returns True if new data has been added to myUndos.
        	:param theName:
        	:type theName: TCollection_ExtendedString
        	:rtype: bool
        """
        return _TDocStd.TDocStd_MultiTransactionManager_CommitCommand(self, *args)


    def Documents(self, *args) -> "TDocStd_SequenceOfDocument const &":
        """
        * Returns the added documents to the transaction manager.
        	:rtype: TDocStd_SequenceOfDocument
        """
        return _TDocStd.TDocStd_MultiTransactionManager_Documents(self, *args)


    def DumpTransactionToString(self) -> "std::string":
        """DumpTransactionToString(TDocStd_MultiTransactionManager self) -> std::string"""
        return _TDocStd.TDocStd_MultiTransactionManager_DumpTransactionToString(self)


    def GetAvailableRedos(self, *args) -> "TDocStd_SequenceOfApplicationDelta const &":
        """
        * Returns available manager redos.
        	:rtype: TDocStd_SequenceOfApplicationDelta
        """
        return _TDocStd.TDocStd_MultiTransactionManager_GetAvailableRedos(self, *args)


    def GetAvailableUndos(self, *args) -> "TDocStd_SequenceOfApplicationDelta const &":
        """
        * Returns available manager undos.
        	:rtype: TDocStd_SequenceOfApplicationDelta
        """
        return _TDocStd.TDocStd_MultiTransactionManager_GetAvailableUndos(self, *args)


    def GetUndoLimit(self, *args) -> "Standard_Integer":
        """
        * Returns undo limit for the manager.
        	:rtype: int
        """
        return _TDocStd.TDocStd_MultiTransactionManager_GetUndoLimit(self, *args)


    def HasOpenCommand(self, *args) -> "Standard_Boolean":
        """
        * Returns true if a transaction is opened.
        	:rtype: bool
        """
        return _TDocStd.TDocStd_MultiTransactionManager_HasOpenCommand(self, *args)


    def IsNestedTransactionMode(self, *args) -> "Standard_Boolean":
        """
        * Returns Standard_True if NestedTransaction mode is set. Methods for protection of changes outside transactions
        	:rtype: bool
        """
        return _TDocStd.TDocStd_MultiTransactionManager_IsNestedTransactionMode(self, *args)


    def ModificationMode(self, *args) -> "Standard_Boolean":
        """
        * Returns True if changes are allowed only inside transactions.
        	:rtype: bool
        """
        return _TDocStd.TDocStd_MultiTransactionManager_ModificationMode(self, *args)


    def OpenCommand(self, *args) -> "void":
        """
        * Opens transaction in each document and sets the flag that transaction is opened. If there are already opened transactions in the documents, these transactions will be aborted before openning new ones.
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_OpenCommand(self, *args)


    def Redo(self, *args) -> "void":
        """
        * Redoes the current transaction of the application. It calls the Redo () method of the document being on top of the manager list of redos (list.First()) and moves the list item to the top of the list of manager undos (list.Prepend(item)).
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_Redo(self, *args)


    def RemoveDocument(self, *args) -> "void":
        """
        * Removes the document from the transaction manager.
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_RemoveDocument(self, *args)


    def RemoveLastUndo(self, *args) -> "void":
        """
        * Removes undo information from the list of undos of the manager and all documents which have been modified during the transaction.
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_RemoveLastUndo(self, *args)


    def SetModificationMode(self, *args) -> "void":
        """
        * If theTransactionOnly is True, denies all changes outside transactions.
        	:param theTransactionOnly:
        	:type theTransactionOnly: bool
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_SetModificationMode(self, *args)


    def SetNestedTransactionMode(self, *args) -> "void":
        """
        * Sets nested transaction mode if isAllowed == Standard_True NOTE: field myIsNestedTransactionMode exists only for synchronization between several documents and has no effect on transactions of multitransaction manager.
        	:param isAllowed: default value is Standard_True
        	:type isAllowed: bool
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_SetNestedTransactionMode(self, *args)


    def SetUndoLimit(self, *args) -> "void":
        """
        * Sets undo limit for the manager and all documents.
        	:param theLimit:
        	:type theLimit: int
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_SetUndoLimit(self, *args)


    def __init__(self, *args):
        """
        * Constructor
        	:rtype: None
        """
        _TDocStd.TDocStd_MultiTransactionManager_swiginit(self, _TDocStd.new_TDocStd_MultiTransactionManager(*args))

    def Undo(self, *args) -> "void":
        """
        * Undoes the current transaction of the manager. It calls the Undo () method of the document being on top of the manager list of undos (list.First()) and moves the list item to the top of the list of manager redos (list.Prepend(item)).
        	:rtype: None
        """
        return _TDocStd.TDocStd_MultiTransactionManager_Undo(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDocStd_MultiTransactionManager_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_MultiTransactionManager
TDocStd_MultiTransactionManager.AbortCommand = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_AbortCommand, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.AddDocument = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_AddDocument, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.ClearRedos = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_ClearRedos, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.ClearUndos = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_ClearUndos, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.CommitCommand = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_CommitCommand, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.Documents = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_Documents, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.DumpTransactionToString = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_DumpTransactionToString, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.GetAvailableRedos = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_GetAvailableRedos, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.GetAvailableUndos = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_GetAvailableUndos, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.GetUndoLimit = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_GetUndoLimit, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.HasOpenCommand = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_HasOpenCommand, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.IsNestedTransactionMode = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_IsNestedTransactionMode, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.ModificationMode = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_ModificationMode, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.OpenCommand = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_OpenCommand, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.Redo = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_Redo, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.RemoveDocument = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_RemoveDocument, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.RemoveLastUndo = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_RemoveLastUndo, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.SetModificationMode = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_SetModificationMode, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.SetNestedTransactionMode = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_SetNestedTransactionMode, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.SetUndoLimit = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_SetUndoLimit, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager.Undo = new_instancemethod(_TDocStd.TDocStd_MultiTransactionManager_Undo, None, TDocStd_MultiTransactionManager)
TDocStd_MultiTransactionManager_swigregister = _TDocStd.TDocStd_MultiTransactionManager_swigregister
TDocStd_MultiTransactionManager_swigregister(TDocStd_MultiTransactionManager)

class TDocStd_Owner(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(TDocStd_Owner self) -> std::string"""
        return _TDocStd.TDocStd_Owner_DumpToString(self)


    def GetDocument(self, *args) -> "opencascade::handle< TDocStd_Document >":
        """
        * Owner methods ===============
        	:param ofdata:
        	:type ofdata: TDF_Data
        	:rtype: opencascade::handle<TDocStd_Document>
        :rtype: opencascade::handle<TDocStd_Document>
        """
        return _TDocStd.TDocStd_Owner_GetDocument(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * class methods =============
        	:rtype: Standard_GUID
        """
        return _TDocStd.TDocStd_Owner_GetID(*args)

    GetID = staticmethod(GetID)

    def SetDocument(self, *args) -> "void":
        """
        :param indata:
        	:type indata: TDF_Data
        	:param doc:
        	:type doc: TDocStd_Document
        	:rtype: void
        :param document:
        	:type document: TDocStd_Document
        	:rtype: None
        """
        return _TDocStd.TDocStd_Owner_SetDocument(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TDocStd.TDocStd_Owner_swiginit(self, _TDocStd.new_TDocStd_Owner(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TDocStd_Owner_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_Owner
TDocStd_Owner.DumpToString = new_instancemethod(_TDocStd.TDocStd_Owner_DumpToString, None, TDocStd_Owner)
TDocStd_Owner.GetDocument = new_instancemethod(_TDocStd.TDocStd_Owner_GetDocument, None, TDocStd_Owner)
TDocStd_Owner.SetDocument = new_instancemethod(_TDocStd.TDocStd_Owner_SetDocument, None, TDocStd_Owner)
TDocStd_Owner_swigregister = _TDocStd.TDocStd_Owner_swigregister
TDocStd_Owner_swigregister(TDocStd_Owner)

def TDocStd_Owner_GetID(*args) -> "Standard_GUID const &":
    """
    * class methods =============
    	:rtype: Standard_GUID
    """
    return _TDocStd.TDocStd_Owner_GetID(*args)

class TDocStd_PathParser(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Extension(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _TDocStd.TDocStd_PathParser_Extension(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TDocStd.TDocStd_PathParser_Length(self, *args)


    def Name(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _TDocStd.TDocStd_PathParser_Name(self, *args)


    def Parse(self, *args) -> "void":
        """:rtype: None"""
        return _TDocStd.TDocStd_PathParser_Parse(self, *args)


    def Path(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _TDocStd.TDocStd_PathParser_Path(self, *args)


    def __init__(self, *args):
        """
        :param path:
        	:type path: TCollection_ExtendedString
        	:rtype: None
        """
        _TDocStd.TDocStd_PathParser_swiginit(self, _TDocStd.new_TDocStd_PathParser(*args))

    def Trek(self, *args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _TDocStd.TDocStd_PathParser_Trek(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_PathParser
TDocStd_PathParser.Extension = new_instancemethod(_TDocStd.TDocStd_PathParser_Extension, None, TDocStd_PathParser)
TDocStd_PathParser.Length = new_instancemethod(_TDocStd.TDocStd_PathParser_Length, None, TDocStd_PathParser)
TDocStd_PathParser.Name = new_instancemethod(_TDocStd.TDocStd_PathParser_Name, None, TDocStd_PathParser)
TDocStd_PathParser.Parse = new_instancemethod(_TDocStd.TDocStd_PathParser_Parse, None, TDocStd_PathParser)
TDocStd_PathParser.Path = new_instancemethod(_TDocStd.TDocStd_PathParser_Path, None, TDocStd_PathParser)
TDocStd_PathParser.Trek = new_instancemethod(_TDocStd.TDocStd_PathParser_Trek, None, TDocStd_PathParser)
TDocStd_PathParser_swigregister = _TDocStd.TDocStd_PathParser_swigregister
TDocStd_PathParser_swigregister(TDocStd_PathParser)

class TDocStd_XLink(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DocumentEntry(self, *args) -> "TCollection_AsciiString const &":
        """
        * Sets the name aDocEntry for the external document in this external link attribute.
        	:param aDocEntry:
        	:type aDocEntry: TCollection_AsciiString
        	:rtype: None
        * Returns the contents of the document identified by aDocEntry. aDocEntry provides external data to this external link attribute.
        	:rtype: TCollection_AsciiString
        """
        return _TDocStd.TDocStd_XLink_DocumentEntry(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDocStd_XLink self) -> std::string"""
        return _TDocStd.TDocStd_XLink_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns the GUID for external links.
        	:rtype: Standard_GUID
        """
        return _TDocStd.TDocStd_XLink_GetID(*args)

    GetID = staticmethod(GetID)

    def LabelEntry(self, *args) -> "TCollection_AsciiString const &":
        """
        * Sets the label entry for this external link attribute with the label aLabel. aLabel pilots the importation of data from the document entry.
        	:param aLabel:
        	:type aLabel: TDF_Label
        	:rtype: None
        * Sets the label entry for this external link attribute as a document identified by aLabEntry.
        	:param aLabEntry:
        	:type aLabEntry: TCollection_AsciiString
        	:rtype: None
        * Returns the contents of the field <myLabelEntry>.
        	:rtype: TCollection_AsciiString
        """
        return _TDocStd.TDocStd_XLink_LabelEntry(self, *args)


    def Set(*args) -> "opencascade::handle< TDocStd_XLink >":
        """
        * Sets an empty external reference, at the label aLabel.
        	:param atLabel:
        	:type atLabel: TDF_Label
        	:rtype: opencascade::handle<TDocStd_XLink>
        """
        return _TDocStd.TDocStd_XLink_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        * Initializes fields.
        	:rtype: None
        """
        _TDocStd.TDocStd_XLink_swiginit(self, _TDocStd.new_TDocStd_XLink(*args))

    def Update(self, *args) -> "opencascade::handle< TDF_Reference >":
        """
        * Updates the data referenced in this external link attribute.
        	:rtype: opencascade::handle<TDF_Reference>
        """
        return _TDocStd.TDocStd_XLink_Update(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDocStd_XLink_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_XLink
TDocStd_XLink.DocumentEntry = new_instancemethod(_TDocStd.TDocStd_XLink_DocumentEntry, None, TDocStd_XLink)
TDocStd_XLink.DumpToString = new_instancemethod(_TDocStd.TDocStd_XLink_DumpToString, None, TDocStd_XLink)
TDocStd_XLink.LabelEntry = new_instancemethod(_TDocStd.TDocStd_XLink_LabelEntry, None, TDocStd_XLink)
TDocStd_XLink.Update = new_instancemethod(_TDocStd.TDocStd_XLink_Update, None, TDocStd_XLink)
TDocStd_XLink_swigregister = _TDocStd.TDocStd_XLink_swigregister
TDocStd_XLink_swigregister(TDocStd_XLink)

def TDocStd_XLink_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns the GUID for external links.
    	:rtype: Standard_GUID
    """
    return _TDocStd.TDocStd_XLink_GetID(*args)

def TDocStd_XLink_Set(*args) -> "opencascade::handle< TDocStd_XLink >":
    """
    * Sets an empty external reference, at the label aLabel.
    	:param atLabel:
    	:type atLabel: TDF_Label
    	:rtype: opencascade::handle<TDocStd_XLink>
    """
    return _TDocStd.TDocStd_XLink_Set(*args)

class TDocStd_XLinkIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Initialize(self, *args) -> "void":
        """
        * Restarts an iteration with <D>.
        	:param D:
        	:type D: TDocStd_Document
        	:rtype: None
        """
        return _TDocStd.TDocStd_XLinkIterator_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a current Item in the iteration.
        	:rtype: bool
        """
        return _TDocStd.TDocStd_XLinkIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Move to the next item; raises if there is no more item.
        	:rtype: None
        """
        return _TDocStd.TDocStd_XLinkIterator_Next(self, *args)


    def __init__(self, *args):
        """
        * Returns an empty iterator;
        	:rtype: None
        * Creates an iterator on Reference of <D>.
        	:param D:
        	:type D: TDocStd_Document
        	:rtype: None
        """
        _TDocStd.TDocStd_XLinkIterator_swiginit(self, _TDocStd.new_TDocStd_XLinkIterator(*args))

    def Value(self, *args) -> "TDocStd_XLinkPtr":
        """
        * Returns the current item; a null handle if there is none.
        	:rtype: TDocStd_XLinkPtr
        """
        return _TDocStd.TDocStd_XLinkIterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_XLinkIterator
TDocStd_XLinkIterator.Initialize = new_instancemethod(_TDocStd.TDocStd_XLinkIterator_Initialize, None, TDocStd_XLinkIterator)
TDocStd_XLinkIterator.More = new_instancemethod(_TDocStd.TDocStd_XLinkIterator_More, None, TDocStd_XLinkIterator)
TDocStd_XLinkIterator.Next = new_instancemethod(_TDocStd.TDocStd_XLinkIterator_Next, None, TDocStd_XLinkIterator)
TDocStd_XLinkIterator.Value = new_instancemethod(_TDocStd.TDocStd_XLinkIterator_Value, None, TDocStd_XLinkIterator)
TDocStd_XLinkIterator_swigregister = _TDocStd.TDocStd_XLinkIterator_swigregister
TDocStd_XLinkIterator_swigregister(TDocStd_XLinkIterator)

class TDocStd_XLinkRoot(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(TDocStd_XLinkRoot self) -> std::string"""
        return _TDocStd.TDocStd_XLinkRoot_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns the ID: 2a96b61d-ec8b-11d0-bee7-080009dc3333
        	:rtype: Standard_GUID
        """
        return _TDocStd.TDocStd_XLinkRoot_GetID(*args)

    GetID = staticmethod(GetID)

    def Insert(*args) -> "void":
        """
        * Inserts <anXLinkPtr> at the beginning of the XLink chain.
        	:param anXLinkPtr:
        	:type anXLinkPtr: TDocStd_XLinkPtr
        	:rtype: void
        """
        return _TDocStd.TDocStd_XLinkRoot_Insert(*args)

    Insert = staticmethod(Insert)

    def Remove(*args) -> "void":
        """
        * Removes <anXLinkPtr> from the XLink chain, if it exists.
        	:param anXLinkPtr:
        	:type anXLinkPtr: TDocStd_XLinkPtr
        	:rtype: void
        """
        return _TDocStd.TDocStd_XLinkRoot_Remove(*args)

    Remove = staticmethod(Remove)

    def Set(*args) -> "opencascade::handle< TDocStd_XLinkRoot >":
        """
        * Sets an empty XLinkRoot to Root or gets the existing one. Only one attribute per TDF_Data.
        	:param aDF:
        	:type aDF: TDF_Data
        	:rtype: opencascade::handle<TDocStd_XLinkRoot>
        """
        return _TDocStd.TDocStd_XLinkRoot_Set(*args)

    Set = staticmethod(Set)


    @staticmethod
    def DownCast(t):
      return Handle_TDocStd_XLinkRoot_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_XLinkRoot
TDocStd_XLinkRoot.DumpToString = new_instancemethod(_TDocStd.TDocStd_XLinkRoot_DumpToString, None, TDocStd_XLinkRoot)
TDocStd_XLinkRoot_swigregister = _TDocStd.TDocStd_XLinkRoot_swigregister
TDocStd_XLinkRoot_swigregister(TDocStd_XLinkRoot)

def TDocStd_XLinkRoot_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns the ID: 2a96b61d-ec8b-11d0-bee7-080009dc3333
    	:rtype: Standard_GUID
    """
    return _TDocStd.TDocStd_XLinkRoot_GetID(*args)

def TDocStd_XLinkRoot_Insert(*args) -> "void":
    """
    * Inserts <anXLinkPtr> at the beginning of the XLink chain.
    	:param anXLinkPtr:
    	:type anXLinkPtr: TDocStd_XLinkPtr
    	:rtype: void
    """
    return _TDocStd.TDocStd_XLinkRoot_Insert(*args)

def TDocStd_XLinkRoot_Remove(*args) -> "void":
    """
    * Removes <anXLinkPtr> from the XLink chain, if it exists.
    	:param anXLinkPtr:
    	:type anXLinkPtr: TDocStd_XLinkPtr
    	:rtype: void
    """
    return _TDocStd.TDocStd_XLinkRoot_Remove(*args)

def TDocStd_XLinkRoot_Set(*args) -> "opencascade::handle< TDocStd_XLinkRoot >":
    """
    * Sets an empty XLinkRoot to Root or gets the existing one. Only one attribute per TDF_Data.
    	:param aDF:
    	:type aDF: TDF_Data
    	:rtype: opencascade::handle<TDocStd_XLinkRoot>
    """
    return _TDocStd.TDocStd_XLinkRoot_Set(*args)

class TDocStd_XLinkTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Copy(self, *args) -> "void":
        """
        * Copy the content of <fromsource> under <intarget>. Noone link is registred. noone check is done. Example opencascade::handle<TDocStd_Document> DOC, XDOC; TDF_Label L, XL; TDocStd_XLinkTool xlinktool; xlinktool.Copy(L,XL); Exceptions: Standard_DomainError if the contents of fromsource are not entirely in the scope of this label, in other words, are not self-contained. !!! ==> Warning: If the document manages shapes use the next way: TDocStd_XLinkTool xlinktool; xlinktool.Copy(L,XL); TopTools_DataMapOfShapeShape M; TNaming::ChangeShapes(target,M);
        	:param intarget:
        	:type intarget: TDF_Label
        	:param fromsource:
        	:type fromsource: TDF_Label
        	:rtype: void
        """
        return _TDocStd.TDocStd_XLinkTool_Copy(self, *args)


    def CopyWithLink(self, *args) -> "void":
        """
        * Copies the content of the label <fromsource> to the label <intarget>. The link is registred with an XLink attribute by <intarget> label. if the content of <fromsource> is not self-contained, and/or <intarget> has already an XLink attribute, an exception is raised.
        	:param intarget:
        	:type intarget: TDF_Label
        	:param fromsource:
        	:type fromsource: TDF_Label
        	:rtype: None
        """
        return _TDocStd.TDocStd_XLinkTool_CopyWithLink(self, *args)


    def DataSet(self, *args) -> "opencascade::handle< TDF_DataSet >":
        """:rtype: opencascade::handle<TDF_DataSet>"""
        return _TDocStd.TDocStd_XLinkTool_DataSet(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TDocStd.TDocStd_XLinkTool_IsDone(self, *args)


    def RelocationTable(self, *args) -> "opencascade::handle< TDF_RelocationTable >":
        """:rtype: opencascade::handle<TDF_RelocationTable>"""
        return _TDocStd.TDocStd_XLinkTool_RelocationTable(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TDocStd.TDocStd_XLinkTool_swiginit(self, _TDocStd.new_TDocStd_XLinkTool(*args))

    def UpdateLink(self, *args) -> "void":
        """
        * Update the external reference set at <L>. Example opencascade::handle<TDocStd_Document> aDoc; if (!OCAFTest::GetDocument(1,aDoc)) return 1; opencascade::handle<TDataStd_Reference> aRef; TDocStd_XLinkTool xlinktool; if (!OCAFTest::Find(aDoc,2),TDataStd_Reference::GetID(),aRef) return 1; xlinktool.UpdateLink(aRef->Label()); Exceptions Standard_DomainError if <L> has no XLink attribute.
        	:param L:
        	:type L: TDF_Label
        	:rtype: None
        """
        return _TDocStd.TDocStd_XLinkTool_UpdateLink(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDocStd.delete_TDocStd_XLinkTool
TDocStd_XLinkTool.Copy = new_instancemethod(_TDocStd.TDocStd_XLinkTool_Copy, None, TDocStd_XLinkTool)
TDocStd_XLinkTool.CopyWithLink = new_instancemethod(_TDocStd.TDocStd_XLinkTool_CopyWithLink, None, TDocStd_XLinkTool)
TDocStd_XLinkTool.DataSet = new_instancemethod(_TDocStd.TDocStd_XLinkTool_DataSet, None, TDocStd_XLinkTool)
TDocStd_XLinkTool.IsDone = new_instancemethod(_TDocStd.TDocStd_XLinkTool_IsDone, None, TDocStd_XLinkTool)
TDocStd_XLinkTool.RelocationTable = new_instancemethod(_TDocStd.TDocStd_XLinkTool_RelocationTable, None, TDocStd_XLinkTool)
TDocStd_XLinkTool.UpdateLink = new_instancemethod(_TDocStd.TDocStd_XLinkTool_UpdateLink, None, TDocStd_XLinkTool)
TDocStd_XLinkTool_swigregister = _TDocStd.TDocStd_XLinkTool_swigregister
TDocStd_XLinkTool_swigregister(TDocStd_XLinkTool)



