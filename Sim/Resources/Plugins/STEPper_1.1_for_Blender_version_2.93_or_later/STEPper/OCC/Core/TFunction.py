# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TFunction module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tfunction.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TFunction.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TFunction')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TFunction')
    _TFunction = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TFunction', [dirname(__file__)])
        except ImportError:
            import _TFunction
            return _TFunction
        try:
            _mod = imp.load_module('_TFunction', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TFunction = swig_import_helper()
    del swig_import_helper
else:
    import _TFunction
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TFunction.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TFunction.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TFunction.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TFunction.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TFunction.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TFunction.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TFunction.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TFunction.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TFunction.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TFunction.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TFunction.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TFunction.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TFunction.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TFunction.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TFunction.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TFunction.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TFunction.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TFunction.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TFunction.process_exception(error, method_name, class_name)
process_exception = _TFunction.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
TFunction_ES_WrongDefinition = _TFunction.TFunction_ES_WrongDefinition
TFunction_ES_NotExecuted = _TFunction.TFunction_ES_NotExecuted
TFunction_ES_Executing = _TFunction.TFunction_ES_Executing
TFunction_ES_Succeeded = _TFunction.TFunction_ES_Succeeded
TFunction_ES_Failed = _TFunction.TFunction_ES_Failed

def Handle_TFunction_Driver_Create() -> "opencascade::handle< TFunction_Driver >":
    return _TFunction.Handle_TFunction_Driver_Create()
Handle_TFunction_Driver_Create = _TFunction.Handle_TFunction_Driver_Create

def Handle_TFunction_Driver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TFunction_Driver >":
    return _TFunction.Handle_TFunction_Driver_DownCast(t)
Handle_TFunction_Driver_DownCast = _TFunction.Handle_TFunction_Driver_DownCast

def Handle_TFunction_Driver_IsNull(t: 'opencascade::handle< TFunction_Driver > const &') -> "bool":
    return _TFunction.Handle_TFunction_Driver_IsNull(t)
Handle_TFunction_Driver_IsNull = _TFunction.Handle_TFunction_Driver_IsNull

def Handle_TFunction_DriverTable_Create() -> "opencascade::handle< TFunction_DriverTable >":
    return _TFunction.Handle_TFunction_DriverTable_Create()
Handle_TFunction_DriverTable_Create = _TFunction.Handle_TFunction_DriverTable_Create

def Handle_TFunction_DriverTable_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TFunction_DriverTable >":
    return _TFunction.Handle_TFunction_DriverTable_DownCast(t)
Handle_TFunction_DriverTable_DownCast = _TFunction.Handle_TFunction_DriverTable_DownCast

def Handle_TFunction_DriverTable_IsNull(t: 'opencascade::handle< TFunction_DriverTable > const &') -> "bool":
    return _TFunction.Handle_TFunction_DriverTable_IsNull(t)
Handle_TFunction_DriverTable_IsNull = _TFunction.Handle_TFunction_DriverTable_IsNull

def Handle_TFunction_Function_Create() -> "opencascade::handle< TFunction_Function >":
    return _TFunction.Handle_TFunction_Function_Create()
Handle_TFunction_Function_Create = _TFunction.Handle_TFunction_Function_Create

def Handle_TFunction_Function_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TFunction_Function >":
    return _TFunction.Handle_TFunction_Function_DownCast(t)
Handle_TFunction_Function_DownCast = _TFunction.Handle_TFunction_Function_DownCast

def Handle_TFunction_Function_IsNull(t: 'opencascade::handle< TFunction_Function > const &') -> "bool":
    return _TFunction.Handle_TFunction_Function_IsNull(t)
Handle_TFunction_Function_IsNull = _TFunction.Handle_TFunction_Function_IsNull

def Handle_TFunction_GraphNode_Create() -> "opencascade::handle< TFunction_GraphNode >":
    return _TFunction.Handle_TFunction_GraphNode_Create()
Handle_TFunction_GraphNode_Create = _TFunction.Handle_TFunction_GraphNode_Create

def Handle_TFunction_GraphNode_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TFunction_GraphNode >":
    return _TFunction.Handle_TFunction_GraphNode_DownCast(t)
Handle_TFunction_GraphNode_DownCast = _TFunction.Handle_TFunction_GraphNode_DownCast

def Handle_TFunction_GraphNode_IsNull(t: 'opencascade::handle< TFunction_GraphNode > const &') -> "bool":
    return _TFunction.Handle_TFunction_GraphNode_IsNull(t)
Handle_TFunction_GraphNode_IsNull = _TFunction.Handle_TFunction_GraphNode_IsNull

def Handle_TFunction_Logbook_Create() -> "opencascade::handle< TFunction_Logbook >":
    return _TFunction.Handle_TFunction_Logbook_Create()
Handle_TFunction_Logbook_Create = _TFunction.Handle_TFunction_Logbook_Create

def Handle_TFunction_Logbook_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TFunction_Logbook >":
    return _TFunction.Handle_TFunction_Logbook_DownCast(t)
Handle_TFunction_Logbook_DownCast = _TFunction.Handle_TFunction_Logbook_DownCast

def Handle_TFunction_Logbook_IsNull(t: 'opencascade::handle< TFunction_Logbook > const &') -> "bool":
    return _TFunction.Handle_TFunction_Logbook_IsNull(t)
Handle_TFunction_Logbook_IsNull = _TFunction.Handle_TFunction_Logbook_IsNull

def Handle_TFunction_Scope_Create() -> "opencascade::handle< TFunction_Scope >":
    return _TFunction.Handle_TFunction_Scope_Create()
Handle_TFunction_Scope_Create = _TFunction.Handle_TFunction_Scope_Create

def Handle_TFunction_Scope_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TFunction_Scope >":
    return _TFunction.Handle_TFunction_Scope_DownCast(t)
Handle_TFunction_Scope_DownCast = _TFunction.Handle_TFunction_Scope_DownCast

def Handle_TFunction_Scope_IsNull(t: 'opencascade::handle< TFunction_Scope > const &') -> "bool":
    return _TFunction.Handle_TFunction_Scope_IsNull(t)
Handle_TFunction_Scope_IsNull = _TFunction.Handle_TFunction_Scope_IsNull

def Handle_TFunction_HArray1OfDataMapOfGUIDDriver_Create() -> "opencascade::handle< TFunction_HArray1OfDataMapOfGUIDDriver >":
    return _TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_Create()
Handle_TFunction_HArray1OfDataMapOfGUIDDriver_Create = _TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_Create

def Handle_TFunction_HArray1OfDataMapOfGUIDDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TFunction_HArray1OfDataMapOfGUIDDriver >":
    return _TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_DownCast(t)
Handle_TFunction_HArray1OfDataMapOfGUIDDriver_DownCast = _TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_DownCast

def Handle_TFunction_HArray1OfDataMapOfGUIDDriver_IsNull(t: 'opencascade::handle< TFunction_HArray1OfDataMapOfGUIDDriver > const &') -> "bool":
    return _TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_IsNull(t)
Handle_TFunction_HArray1OfDataMapOfGUIDDriver_IsNull = _TFunction.Handle_TFunction_HArray1OfDataMapOfGUIDDriver_IsNull
class TFunction_Array1OfDataMapOfGUIDDriver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_swiginit(self, _TFunction.new_TFunction_Array1OfDataMapOfGUIDDriver(*args))
    __swig_destroy__ = _TFunction.delete_TFunction_Array1OfDataMapOfGUIDDriver

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TFunction_Array1OfDataMapOfGUIDDriver.begin = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_begin, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.end = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_end, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.cbegin = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_cbegin, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.cend = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_cend, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Init = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Init, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Size = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Size, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Length = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Length, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.IsEmpty = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_IsEmpty, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Lower = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Lower, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Upper = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Upper, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.IsDeletable = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_IsDeletable, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.IsAllocated = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_IsAllocated, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Assign = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Assign, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Move = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Move, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Set = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Set, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.First = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_First, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.ChangeFirst = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_ChangeFirst, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Last = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Last, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.ChangeLast = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_ChangeLast, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Value = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Value, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.ChangeValue = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_ChangeValue, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.__call__ = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver___call__, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.SetValue = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_SetValue, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver.Resize = new_instancemethod(_TFunction.TFunction_Array1OfDataMapOfGUIDDriver_Resize, None, TFunction_Array1OfDataMapOfGUIDDriver)
TFunction_Array1OfDataMapOfGUIDDriver_swigregister = _TFunction.TFunction_Array1OfDataMapOfGUIDDriver_swigregister
TFunction_Array1OfDataMapOfGUIDDriver_swigregister(TFunction_Array1OfDataMapOfGUIDDriver)

class TFunction_DataMapOfGUIDDriver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.TFunction_DataMapOfGUIDDriver_swiginit(self, _TFunction.new_TFunction_DataMapOfGUIDDriver(*args))
    __swig_destroy__ = _TFunction.delete_TFunction_DataMapOfGUIDDriver
TFunction_DataMapOfGUIDDriver.begin = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_begin, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.end = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_end, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.cbegin = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_cbegin, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.cend = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_cend, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Exchange = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Exchange, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Assign = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Assign, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Set = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Set, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.ReSize = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_ReSize, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Bind = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Bind, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Bound = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Bound, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.IsBound = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_IsBound, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.UnBind = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_UnBind, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Seek = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Seek, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Find = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Find, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.ChangeSeek = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_ChangeSeek, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.ChangeFind = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_ChangeFind, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.__call__ = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver___call__, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Clear = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Clear, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver.Size = new_instancemethod(_TFunction.TFunction_DataMapOfGUIDDriver_Size, None, TFunction_DataMapOfGUIDDriver)
TFunction_DataMapOfGUIDDriver_swigregister = _TFunction.TFunction_DataMapOfGUIDDriver_swigregister
TFunction_DataMapOfGUIDDriver_swigregister(TFunction_DataMapOfGUIDDriver)

class TFunction_DoubleMapOfIntegerLabel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.TFunction_DoubleMapOfIntegerLabel_swiginit(self, _TFunction.new_TFunction_DoubleMapOfIntegerLabel(*args))
    __swig_destroy__ = _TFunction.delete_TFunction_DoubleMapOfIntegerLabel
TFunction_DoubleMapOfIntegerLabel.Exchange = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Exchange, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Assign = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Assign, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Set = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Set, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.ReSize = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_ReSize, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Bind = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Bind, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.AreBound = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_AreBound, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.IsBound1 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_IsBound1, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.IsBound2 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_IsBound2, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.UnBind1 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_UnBind1, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.UnBind2 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_UnBind2, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Find1 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Find1, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Seek1 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Seek1, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Find2 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Find2, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Seek2 = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Seek2, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Clear = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Clear, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel.Size = new_instancemethod(_TFunction.TFunction_DoubleMapOfIntegerLabel_Size, None, TFunction_DoubleMapOfIntegerLabel)
TFunction_DoubleMapOfIntegerLabel_swigregister = _TFunction.TFunction_DoubleMapOfIntegerLabel_swigregister
TFunction_DoubleMapOfIntegerLabel_swigregister(TFunction_DoubleMapOfIntegerLabel)

class TFunction_DataMapOfLabelListOfLabel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.TFunction_DataMapOfLabelListOfLabel_swiginit(self, _TFunction.new_TFunction_DataMapOfLabelListOfLabel(*args))
    __swig_destroy__ = _TFunction.delete_TFunction_DataMapOfLabelListOfLabel
TFunction_DataMapOfLabelListOfLabel.begin = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_begin, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.end = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_end, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.cbegin = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_cbegin, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.cend = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_cend, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Exchange = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Exchange, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Assign = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Assign, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Set = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Set, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.ReSize = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_ReSize, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Bind = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Bind, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Bound = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Bound, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.IsBound = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_IsBound, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.UnBind = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_UnBind, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Seek = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Seek, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Find = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Find, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.ChangeSeek = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_ChangeSeek, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.ChangeFind = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_ChangeFind, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.__call__ = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel___call__, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Clear = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Clear, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel.Size = new_instancemethod(_TFunction.TFunction_DataMapOfLabelListOfLabel_Size, None, TFunction_DataMapOfLabelListOfLabel)
TFunction_DataMapOfLabelListOfLabel_swigregister = _TFunction.TFunction_DataMapOfLabelListOfLabel_swigregister
TFunction_DataMapOfLabelListOfLabel_swigregister(TFunction_DataMapOfLabelListOfLabel)

class TFunction_Driver(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Arguments(self, *args) -> "void":
        """
        * The method fills-in the list by labels, where the arguments of the function are located.
        	:param args:
        	:type args: TDF_LabelList
        	:rtype: void
        """
        return _TFunction.TFunction_Driver_Arguments(self, *args)


    def Execute(self, *args) -> "Standard_Integer":
        """
        * Executes the function in this function driver and puts the impacted labels in the logbook log. arguments & results of functions ================================
        	:param log:
        	:type log: TFunction_Logbook
        	:rtype: int
        """
        return _TFunction.TFunction_Driver_Execute(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes the label L for this function prior to its execution.
        	:param L:
        	:type L: TDF_Label
        	:rtype: None
        """
        return _TFunction.TFunction_Driver_Init(self, *args)


    def Label(self, *args) -> "TDF_Label":
        """
        * Returns the label of the driver for this function.
        	:rtype: TDF_Label
        """
        return _TFunction.TFunction_Driver_Label(self, *args)


    def MustExecute(self, *args) -> "Standard_Boolean":
        """
        * Analyzes the labels in the logbook log. Returns true if attributes have been modified. If the function label itself has been modified, the function must be executed.
        	:param log:
        	:type log: TFunction_Logbook
        	:rtype: bool
        """
        return _TFunction.TFunction_Driver_MustExecute(self, *args)


    def Results(self, *args) -> "void":
        """
        * The method fills-in the list by labels, where the results of the function are located.
        	:param res:
        	:type res: TDF_LabelList
        	:rtype: void
        """
        return _TFunction.TFunction_Driver_Results(self, *args)


    def Validate(self, *args) -> "void":
        """
        * Validates labels of a function in <log>. This function is the one initialized in this function driver. Warning In regeneration mode, the solver must call this method even if the function is not executed. execution of function =====================
        	:param log:
        	:type log: TFunction_Logbook
        	:rtype: void
        """
        return _TFunction.TFunction_Driver_Validate(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TFunction_Driver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TFunction.delete_TFunction_Driver
TFunction_Driver.Arguments = new_instancemethod(_TFunction.TFunction_Driver_Arguments, None, TFunction_Driver)
TFunction_Driver.Execute = new_instancemethod(_TFunction.TFunction_Driver_Execute, None, TFunction_Driver)
TFunction_Driver.Init = new_instancemethod(_TFunction.TFunction_Driver_Init, None, TFunction_Driver)
TFunction_Driver.Label = new_instancemethod(_TFunction.TFunction_Driver_Label, None, TFunction_Driver)
TFunction_Driver.MustExecute = new_instancemethod(_TFunction.TFunction_Driver_MustExecute, None, TFunction_Driver)
TFunction_Driver.Results = new_instancemethod(_TFunction.TFunction_Driver_Results, None, TFunction_Driver)
TFunction_Driver.Validate = new_instancemethod(_TFunction.TFunction_Driver_Validate, None, TFunction_Driver)
TFunction_Driver_swigregister = _TFunction.TFunction_Driver_swigregister
TFunction_Driver_swigregister(TFunction_Driver)

class TFunction_DriverTable(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDriver(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the driver has been added successfully to the driver table.
        	:param guid:
        	:type guid: Standard_GUID
        	:param driver:
        	:type driver: TFunction_Driver
        	:param thread: default value is 0
        	:type thread: int
        	:rtype: bool
        """
        return _TFunction.TFunction_DriverTable_AddDriver(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Removes all drivers. Returns true if the driver has been removed successfully.
        	:rtype: None
        """
        return _TFunction.TFunction_DriverTable_Clear(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TFunction_DriverTable self) -> std::string"""
        return _TFunction.TFunction_DriverTable_DumpToString(self)


    def FindDriver(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the driver was found.
        	:param guid:
        	:type guid: Standard_GUID
        	:param driver:
        	:type driver: TFunction_Driver
        	:param thread: default value is 0
        	:type thread: int
        	:rtype: bool
        """
        return _TFunction.TFunction_DriverTable_FindDriver(self, *args)


    def Get(*args) -> "opencascade::handle< TFunction_DriverTable >":
        """
        * Returns the driver table. If a driver does not exist, creates it.
        	:rtype: opencascade::handle<TFunction_DriverTable>
        """
        return _TFunction.TFunction_DriverTable_Get(*args)

    Get = staticmethod(Get)

    def HasDriver(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the driver exists in the driver table.
        	:param guid:
        	:type guid: Standard_GUID
        	:param thread: default value is 0
        	:type thread: int
        	:rtype: bool
        """
        return _TFunction.TFunction_DriverTable_HasDriver(self, *args)


    def RemoveDriver(self, *args) -> "Standard_Boolean":
        """
        * Removes a driver with the given GUID. Returns true if the driver has been removed successfully.
        	:param guid:
        	:type guid: Standard_GUID
        	:param thread: default value is 0
        	:type thread: int
        	:rtype: bool
        """
        return _TFunction.TFunction_DriverTable_RemoveDriver(self, *args)


    def __init__(self, *args):
        """
        * Default constructor
        	:rtype: None
        """
        _TFunction.TFunction_DriverTable_swiginit(self, _TFunction.new_TFunction_DriverTable(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TFunction_DriverTable_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TFunction.delete_TFunction_DriverTable
TFunction_DriverTable.AddDriver = new_instancemethod(_TFunction.TFunction_DriverTable_AddDriver, None, TFunction_DriverTable)
TFunction_DriverTable.Clear = new_instancemethod(_TFunction.TFunction_DriverTable_Clear, None, TFunction_DriverTable)
TFunction_DriverTable.DumpToString = new_instancemethod(_TFunction.TFunction_DriverTable_DumpToString, None, TFunction_DriverTable)
TFunction_DriverTable.FindDriver = new_instancemethod(_TFunction.TFunction_DriverTable_FindDriver, None, TFunction_DriverTable)
TFunction_DriverTable.HasDriver = new_instancemethod(_TFunction.TFunction_DriverTable_HasDriver, None, TFunction_DriverTable)
TFunction_DriverTable.RemoveDriver = new_instancemethod(_TFunction.TFunction_DriverTable_RemoveDriver, None, TFunction_DriverTable)
TFunction_DriverTable_swigregister = _TFunction.TFunction_DriverTable_swigregister
TFunction_DriverTable_swigregister(TFunction_DriverTable)

def TFunction_DriverTable_Get(*args) -> "opencascade::handle< TFunction_DriverTable >":
    """
    * Returns the driver table. If a driver does not exist, creates it.
    	:rtype: opencascade::handle<TFunction_DriverTable>
    """
    return _TFunction.TFunction_DriverTable_Get(*args)

class TFunction_Function(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(TFunction_Function self) -> std::string"""
        return _TFunction.TFunction_Function_DumpToString(self)


    def Failed(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the execution failed
        	:rtype: bool
        """
        return _TFunction.TFunction_Function_Failed(self, *args)


    def GetDriverGUID(self, *args) -> "Standard_GUID const &":
        """
        * Returns the GUID for this function's driver.
        	:rtype: Standard_GUID
        """
        return _TFunction.TFunction_Function_GetDriverGUID(self, *args)


    def GetFailure(self, *args) -> "Standard_Integer":
        """
        * Returns an index of failure if the execution of this function failed. If this integer value is 0, no failure has occurred. Implementation of Attribute methods: ===================================
        	:rtype: int
        """
        return _TFunction.TFunction_Function_GetFailure(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns the GUID for functions. Returns a function found on the label. Instance methods: ================
        	:rtype: Standard_GUID
        """
        return _TFunction.TFunction_Function_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args) -> "opencascade::handle< TFunction_Function >":
        """
        * Static methods: ============== Finds or Creates a function attribute on the label <L>. Returns the function attribute.
        	:param L:
        	:type L: TDF_Label
        	:rtype: opencascade::handle<TFunction_Function>
        * Finds or Creates a function attribute on the label <L>. Sets a driver ID to the function. Returns the function attribute.
        	:param L:
        	:type L: TDF_Label
        	:param DriverID:
        	:type DriverID: Standard_GUID
        	:rtype: opencascade::handle<TFunction_Function>
        """
        return _TFunction.TFunction_Function_Set(*args)

    Set = staticmethod(Set)

    def SetDriverGUID(self, *args) -> "void":
        """
        * Sets the driver for this function as that indentified by the GUID guid.
        	:param guid:
        	:type guid: Standard_GUID
        	:rtype: None
        """
        return _TFunction.TFunction_Function_SetDriverGUID(self, *args)


    def SetFailure(self, *args) -> "void":
        """
        * Sets the failed index.
        	:param mode: default value is 0
        	:type mode: int
        	:rtype: None
        """
        return _TFunction.TFunction_Function_SetFailure(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TFunction.TFunction_Function_swiginit(self, _TFunction.new_TFunction_Function(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TFunction_Function_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TFunction.delete_TFunction_Function
TFunction_Function.DumpToString = new_instancemethod(_TFunction.TFunction_Function_DumpToString, None, TFunction_Function)
TFunction_Function.Failed = new_instancemethod(_TFunction.TFunction_Function_Failed, None, TFunction_Function)
TFunction_Function.GetDriverGUID = new_instancemethod(_TFunction.TFunction_Function_GetDriverGUID, None, TFunction_Function)
TFunction_Function.GetFailure = new_instancemethod(_TFunction.TFunction_Function_GetFailure, None, TFunction_Function)
TFunction_Function.SetDriverGUID = new_instancemethod(_TFunction.TFunction_Function_SetDriverGUID, None, TFunction_Function)
TFunction_Function.SetFailure = new_instancemethod(_TFunction.TFunction_Function_SetFailure, None, TFunction_Function)
TFunction_Function_swigregister = _TFunction.TFunction_Function_swigregister
TFunction_Function_swigregister(TFunction_Function)

def TFunction_Function_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns the GUID for functions. Returns a function found on the label. Instance methods: ================
    	:rtype: Standard_GUID
    """
    return _TFunction.TFunction_Function_GetID(*args)

def TFunction_Function_Set(*args) -> "opencascade::handle< TFunction_Function >":
    """
    * Static methods: ============== Finds or Creates a function attribute on the label <L>. Returns the function attribute.
    	:param L:
    	:type L: TDF_Label
    	:rtype: opencascade::handle<TFunction_Function>
    * Finds or Creates a function attribute on the label <L>. Sets a driver ID to the function. Returns the function attribute.
    	:param L:
    	:type L: TDF_Label
    	:param DriverID:
    	:type DriverID: Standard_GUID
    	:rtype: opencascade::handle<TFunction_Function>
    """
    return _TFunction.TFunction_Function_Set(*args)

class TFunction_GraphNode(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddNext(self, *args) -> "Standard_Boolean":
        """
        * Defines a reference to the function as a next one.
        	:param funcID:
        	:type funcID: int
        	:rtype: bool
        * Defines a reference to the function as a next one.
        	:param func:
        	:type func: TDF_Label
        	:rtype: bool
        """
        return _TFunction.TFunction_GraphNode_AddNext(self, *args)


    def AddPrevious(self, *args) -> "Standard_Boolean":
        """
        * Defines a reference to the function as a previous one.
        	:param funcID:
        	:type funcID: int
        	:rtype: bool
        * Defines a reference to the function as a previous one.
        	:param func:
        	:type func: TDF_Label
        	:rtype: bool
        """
        return _TFunction.TFunction_GraphNode_AddPrevious(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TFunction_GraphNode self) -> std::string"""
        return _TFunction.TFunction_GraphNode_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns the GUID for GraphNode attribute. Instant methods =============== Constructor (empty).
        	:rtype: Standard_GUID
        """
        return _TFunction.TFunction_GraphNode_GetID(*args)

    GetID = staticmethod(GetID)

    def GetNext(self, *args) -> "TColStd_MapOfInteger const &":
        """
        * Returns a map of next functions.
        	:rtype: TColStd_MapOfInteger
        """
        return _TFunction.TFunction_GraphNode_GetNext(self, *args)


    def GetPrevious(self, *args) -> "TColStd_MapOfInteger const &":
        """
        * Returns a map of previous functions.
        	:rtype: TColStd_MapOfInteger
        """
        return _TFunction.TFunction_GraphNode_GetPrevious(self, *args)


    def GetStatus(self, *args) -> "TFunction_ExecutionStatus":
        """
        * Returns the execution status of the function.
        	:rtype: TFunction_ExecutionStatus
        """
        return _TFunction.TFunction_GraphNode_GetStatus(self, *args)


    def RemoveAllNext(self, *args) -> "void":
        """
        * Clears a map of next functions.
        	:rtype: None
        """
        return _TFunction.TFunction_GraphNode_RemoveAllNext(self, *args)


    def RemoveAllPrevious(self, *args) -> "void":
        """
        * Clears a map of previous functions.
        	:rtype: None
        """
        return _TFunction.TFunction_GraphNode_RemoveAllPrevious(self, *args)


    def RemoveNext(self, *args) -> "Standard_Boolean":
        """
        * Removes a reference to the function as a next one.
        	:param funcID:
        	:type funcID: int
        	:rtype: bool
        * Removes a reference to the function as a next one.
        	:param func:
        	:type func: TDF_Label
        	:rtype: bool
        """
        return _TFunction.TFunction_GraphNode_RemoveNext(self, *args)


    def RemovePrevious(self, *args) -> "Standard_Boolean":
        """
        * Removes a reference to the function as a previous one.
        	:param funcID:
        	:type funcID: int
        	:rtype: bool
        * Removes a reference to the function as a previous one.
        	:param func:
        	:type func: TDF_Label
        	:rtype: bool
        """
        return _TFunction.TFunction_GraphNode_RemovePrevious(self, *args)


    def Set(*args) -> "opencascade::handle< TFunction_GraphNode >":
        """
        * Static methods ============== Finds or Creates a graph node attribute at the label <L>. Returns the attribute.
        	:param L:
        	:type L: TDF_Label
        	:rtype: opencascade::handle<TFunction_GraphNode>
        """
        return _TFunction.TFunction_GraphNode_Set(*args)

    Set = staticmethod(Set)

    def SetStatus(self, *args) -> "void":
        """
        * Defines an execution status for a function. Implementation of Attribute methods ===================================
        	:param status:
        	:type status: TFunction_ExecutionStatus
        	:rtype: None
        """
        return _TFunction.TFunction_GraphNode_SetStatus(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TFunction.TFunction_GraphNode_swiginit(self, _TFunction.new_TFunction_GraphNode(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TFunction_GraphNode_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TFunction.delete_TFunction_GraphNode
TFunction_GraphNode.AddNext = new_instancemethod(_TFunction.TFunction_GraphNode_AddNext, None, TFunction_GraphNode)
TFunction_GraphNode.AddPrevious = new_instancemethod(_TFunction.TFunction_GraphNode_AddPrevious, None, TFunction_GraphNode)
TFunction_GraphNode.DumpToString = new_instancemethod(_TFunction.TFunction_GraphNode_DumpToString, None, TFunction_GraphNode)
TFunction_GraphNode.GetNext = new_instancemethod(_TFunction.TFunction_GraphNode_GetNext, None, TFunction_GraphNode)
TFunction_GraphNode.GetPrevious = new_instancemethod(_TFunction.TFunction_GraphNode_GetPrevious, None, TFunction_GraphNode)
TFunction_GraphNode.GetStatus = new_instancemethod(_TFunction.TFunction_GraphNode_GetStatus, None, TFunction_GraphNode)
TFunction_GraphNode.RemoveAllNext = new_instancemethod(_TFunction.TFunction_GraphNode_RemoveAllNext, None, TFunction_GraphNode)
TFunction_GraphNode.RemoveAllPrevious = new_instancemethod(_TFunction.TFunction_GraphNode_RemoveAllPrevious, None, TFunction_GraphNode)
TFunction_GraphNode.RemoveNext = new_instancemethod(_TFunction.TFunction_GraphNode_RemoveNext, None, TFunction_GraphNode)
TFunction_GraphNode.RemovePrevious = new_instancemethod(_TFunction.TFunction_GraphNode_RemovePrevious, None, TFunction_GraphNode)
TFunction_GraphNode.SetStatus = new_instancemethod(_TFunction.TFunction_GraphNode_SetStatus, None, TFunction_GraphNode)
TFunction_GraphNode_swigregister = _TFunction.TFunction_GraphNode_swigregister
TFunction_GraphNode_swigregister(TFunction_GraphNode)

def TFunction_GraphNode_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns the GUID for GraphNode attribute. Instant methods =============== Constructor (empty).
    	:rtype: Standard_GUID
    """
    return _TFunction.TFunction_GraphNode_GetID(*args)

def TFunction_GraphNode_Set(*args) -> "opencascade::handle< TFunction_GraphNode >":
    """
    * Static methods ============== Finds or Creates a graph node attribute at the label <L>. Returns the attribute.
    	:param L:
    	:type L: TDF_Label
    	:rtype: opencascade::handle<TFunction_GraphNode>
    """
    return _TFunction.TFunction_GraphNode_Set(*args)

class TFunction_IFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Arguments(self, *args) -> "void":
        """
        * The method fills-in the list by labels, where the arguments of the function are located.
        	:param args:
        	:type args: TDF_LabelList
        	:rtype: None
        """
        return _TFunction.TFunction_IFunction_Arguments(self, *args)


    def DeleteFunction(*args) -> "Standard_Boolean":
        """
        * Deletes a function attached to a label <L>. It deletes a TFunction_Function attribute and a TFunction_GraphNode. It deletes the functions from the scope of function of this document.
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _TFunction.TFunction_IFunction_DeleteFunction(*args)

    DeleteFunction = staticmethod(DeleteFunction)

    def GetAllFunctions(self, *args) -> "TFunction_DoubleMapOfIntegerLabel const &":
        """
        * Returns the scope of all functions.
        	:rtype: TFunction_DoubleMapOfIntegerLabel
        """
        return _TFunction.TFunction_IFunction_GetAllFunctions(self, *args)


    def GetDriver(self, *args) -> "opencascade::handle< TFunction_Driver >":
        """
        * Returns a driver of the function.
        	:param thread: default value is 0
        	:type thread: int
        	:rtype: opencascade::handle<TFunction_Driver>
        """
        return _TFunction.TFunction_IFunction_GetDriver(self, *args)


    def GetGraphNode(self, *args) -> "opencascade::handle< TFunction_GraphNode >":
        """
        * Returns a graph node of the function.
        	:rtype: opencascade::handle<TFunction_GraphNode>
        """
        return _TFunction.TFunction_IFunction_GetGraphNode(self, *args)


    def GetLogbook(self, *args) -> "opencascade::handle< TFunction_Logbook >":
        """
        * Returns the Logbook - keeper of modifications.
        	:rtype: opencascade::handle<TFunction_Logbook>
        """
        return _TFunction.TFunction_IFunction_GetLogbook(self, *args)


    def GetNext(self, *args) -> "void":
        """
        * Returns a list of next functions.
        	:param prev:
        	:type prev: TDF_LabelList
        	:rtype: None
        """
        return _TFunction.TFunction_IFunction_GetNext(self, *args)


    def GetPrevious(self, *args) -> "void":
        """
        * Returns a list of previous functions.
        	:param prev:
        	:type prev: TDF_LabelList
        	:rtype: None
        """
        return _TFunction.TFunction_IFunction_GetPrevious(self, *args)


    def GetStatus(self, *args) -> "TFunction_ExecutionStatus":
        """
        * Returns the execution status of the function.
        	:rtype: TFunction_ExecutionStatus
        """
        return _TFunction.TFunction_IFunction_GetStatus(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes the interface by the label of function.
        	:param L:
        	:type L: TDF_Label
        	:rtype: None
        """
        return _TFunction.TFunction_IFunction_Init(self, *args)


    def Label(self, *args) -> "TDF_Label const &":
        """
        * Returns a label of the function.
        	:rtype: TDF_Label
        """
        return _TFunction.TFunction_IFunction_Label(self, *args)


    def NewFunction(*args) -> "Standard_Boolean":
        """
        * Sets a new function attached to a label <L> with <ID>. It creates a new TFunction_Function attribute initialized by the <ID>, a new TFunction_GraphNode with an empty list of dependencies and the status equal to TFunction_ES_WrongDefinition. It registers the function in the scope of functions for this document.
        	:param L:
        	:type L: TDF_Label
        	:param ID:
        	:type ID: Standard_GUID
        	:rtype: bool
        """
        return _TFunction.TFunction_IFunction_NewFunction(*args)

    NewFunction = staticmethod(NewFunction)

    def Results(self, *args) -> "void":
        """
        * The method fills-in the list by labels, where the results of the function are located.
        	:param res:
        	:type res: TDF_LabelList
        	:rtype: None
        """
        return _TFunction.TFunction_IFunction_Results(self, *args)


    def SetStatus(self, *args) -> "void":
        """
        * Defines an execution status for a function.
        	:param status:
        	:type status: TFunction_ExecutionStatus
        	:rtype: None
        """
        return _TFunction.TFunction_IFunction_SetStatus(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * A constructor. Initializes the interface by the label of function.
        	:param L:
        	:type L: TDF_Label
        	:rtype: None
        """
        _TFunction.TFunction_IFunction_swiginit(self, _TFunction.new_TFunction_IFunction(*args))

    def UpdateDependencies(self, *args) -> "Standard_Boolean":
        """
        * Updates dependencies for all functions of the scope. It returns false in case of an error. An empty constructor.
        	:param Access:
        	:type Access: TDF_Label
        	:rtype: bool
        * Updates the dependencies of this function only.
        	:rtype: bool
        """
        return _TFunction.TFunction_IFunction_UpdateDependencies(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TFunction.delete_TFunction_IFunction
TFunction_IFunction.Arguments = new_instancemethod(_TFunction.TFunction_IFunction_Arguments, None, TFunction_IFunction)
TFunction_IFunction.GetAllFunctions = new_instancemethod(_TFunction.TFunction_IFunction_GetAllFunctions, None, TFunction_IFunction)
TFunction_IFunction.GetDriver = new_instancemethod(_TFunction.TFunction_IFunction_GetDriver, None, TFunction_IFunction)
TFunction_IFunction.GetGraphNode = new_instancemethod(_TFunction.TFunction_IFunction_GetGraphNode, None, TFunction_IFunction)
TFunction_IFunction.GetLogbook = new_instancemethod(_TFunction.TFunction_IFunction_GetLogbook, None, TFunction_IFunction)
TFunction_IFunction.GetNext = new_instancemethod(_TFunction.TFunction_IFunction_GetNext, None, TFunction_IFunction)
TFunction_IFunction.GetPrevious = new_instancemethod(_TFunction.TFunction_IFunction_GetPrevious, None, TFunction_IFunction)
TFunction_IFunction.GetStatus = new_instancemethod(_TFunction.TFunction_IFunction_GetStatus, None, TFunction_IFunction)
TFunction_IFunction.Init = new_instancemethod(_TFunction.TFunction_IFunction_Init, None, TFunction_IFunction)
TFunction_IFunction.Label = new_instancemethod(_TFunction.TFunction_IFunction_Label, None, TFunction_IFunction)
TFunction_IFunction.Results = new_instancemethod(_TFunction.TFunction_IFunction_Results, None, TFunction_IFunction)
TFunction_IFunction.SetStatus = new_instancemethod(_TFunction.TFunction_IFunction_SetStatus, None, TFunction_IFunction)
TFunction_IFunction.UpdateDependencies = new_instancemethod(_TFunction.TFunction_IFunction_UpdateDependencies, None, TFunction_IFunction)
TFunction_IFunction_swigregister = _TFunction.TFunction_IFunction_swigregister
TFunction_IFunction_swigregister(TFunction_IFunction)

def TFunction_IFunction_DeleteFunction(*args) -> "Standard_Boolean":
    """
    * Deletes a function attached to a label <L>. It deletes a TFunction_Function attribute and a TFunction_GraphNode. It deletes the functions from the scope of function of this document.
    	:param L:
    	:type L: TDF_Label
    	:rtype: bool
    """
    return _TFunction.TFunction_IFunction_DeleteFunction(*args)

def TFunction_IFunction_NewFunction(*args) -> "Standard_Boolean":
    """
    * Sets a new function attached to a label <L> with <ID>. It creates a new TFunction_Function attribute initialized by the <ID>, a new TFunction_GraphNode with an empty list of dependencies and the status equal to TFunction_ES_WrongDefinition. It registers the function in the scope of functions for this document.
    	:param L:
    	:type L: TDF_Label
    	:param ID:
    	:type ID: Standard_GUID
    	:rtype: bool
    """
    return _TFunction.TFunction_IFunction_NewFunction(*args)

class TFunction_Iterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Current(self, *args) -> "TDF_LabelList const &":
        """
        * Returns the current list of functions. If the iterator uses the execution status, the returned list contains only the functions with 'not executed' status.
        	:rtype: TDF_LabelList
        """
        return _TFunction.TFunction_Iterator_Current(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TFunction_Iterator self) -> std::string"""
        return _TFunction.TFunction_Iterator_DumpToString(self)


    def GetMaxNbThreads(self, *args) -> "Standard_Integer":
        """
        * Analyses the graph of dependencies and returns maximum number of threads may be used to calculate the model.
        	:rtype: int
        """
        return _TFunction.TFunction_Iterator_GetMaxNbThreads(self, *args)


    def GetStatus(self, *args) -> "TFunction_ExecutionStatus":
        """
        * A help-function aimed to help the user to check the status of retrurned function. It calls TFunction_GraphNode::GetStatus() inside.
        	:param func:
        	:type func: TDF_Label
        	:rtype: TFunction_ExecutionStatus
        """
        return _TFunction.TFunction_Iterator_GetStatus(self, *args)


    def GetUsageOfExecutionStatus(self, *args) -> "Standard_Boolean":
        """
        * Returns usage of execution status by the iterator.
        	:rtype: bool
        """
        return _TFunction.TFunction_Iterator_GetUsageOfExecutionStatus(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes the Iterator.
        	:param Access:
        	:type Access: TDF_Label
        	:rtype: void
        """
        return _TFunction.TFunction_Iterator_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns false if the graph of functions is fully iterated.
        	:rtype: bool
        """
        return _TFunction.TFunction_Iterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Switches the iterator to the next list of current functions.
        	:rtype: void
        """
        return _TFunction.TFunction_Iterator_Next(self, *args)


    def SetStatus(self, *args) -> "void":
        """
        * A help-function aimed to help the user to change the execution status of a function. It calls TFunction_GraphNode::SetStatus() inside.
        	:param func:
        	:type func: TDF_Label
        	:param status:
        	:type status: TFunction_ExecutionStatus
        	:rtype: None
        """
        return _TFunction.TFunction_Iterator_SetStatus(self, *args)


    def SetUsageOfExecutionStatus(self, *args) -> "void":
        """
        * Defines the mode of iteration - usage or not of the execution status. If the iterator takes into account the execution status, the method ::Current() returns only 'not executed' functions while their status is not changed. If the iterator ignores the execution status, the method ::Current() returns the functions following their dependencies and ignoring the execution status.
        	:param usage:
        	:type usage: bool
        	:rtype: None
        """
        return _TFunction.TFunction_Iterator_SetUsageOfExecutionStatus(self, *args)


    def __init__(self, *args):
        """
        * An empty constructor.
        	:rtype: None
        * A constructor. Initializes the iterator.
        	:param Access:
        	:type Access: TDF_Label
        	:rtype: None
        """
        _TFunction.TFunction_Iterator_swiginit(self, _TFunction.new_TFunction_Iterator(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TFunction.delete_TFunction_Iterator
TFunction_Iterator.Current = new_instancemethod(_TFunction.TFunction_Iterator_Current, None, TFunction_Iterator)
TFunction_Iterator.DumpToString = new_instancemethod(_TFunction.TFunction_Iterator_DumpToString, None, TFunction_Iterator)
TFunction_Iterator.GetMaxNbThreads = new_instancemethod(_TFunction.TFunction_Iterator_GetMaxNbThreads, None, TFunction_Iterator)
TFunction_Iterator.GetStatus = new_instancemethod(_TFunction.TFunction_Iterator_GetStatus, None, TFunction_Iterator)
TFunction_Iterator.GetUsageOfExecutionStatus = new_instancemethod(_TFunction.TFunction_Iterator_GetUsageOfExecutionStatus, None, TFunction_Iterator)
TFunction_Iterator.Init = new_instancemethod(_TFunction.TFunction_Iterator_Init, None, TFunction_Iterator)
TFunction_Iterator.More = new_instancemethod(_TFunction.TFunction_Iterator_More, None, TFunction_Iterator)
TFunction_Iterator.Next = new_instancemethod(_TFunction.TFunction_Iterator_Next, None, TFunction_Iterator)
TFunction_Iterator.SetStatus = new_instancemethod(_TFunction.TFunction_Iterator_SetStatus, None, TFunction_Iterator)
TFunction_Iterator.SetUsageOfExecutionStatus = new_instancemethod(_TFunction.TFunction_Iterator_SetUsageOfExecutionStatus, None, TFunction_Iterator)
TFunction_Iterator_swigregister = _TFunction.TFunction_Iterator_swigregister
TFunction_Iterator_swigregister(TFunction_Iterator)

class TFunction_Logbook(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        * Clears this logbook to its default, empty state.
        	:rtype: None
        """
        return _TFunction.TFunction_Logbook_Clear(self, *args)


    def Done(self, *args) -> "void":
        """
        * Sets status of execution.
        	:param status:
        	:type status: bool
        	:rtype: None
        """
        return _TFunction.TFunction_Logbook_Done(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TFunction_Logbook self) -> std::string"""
        return _TFunction.TFunction_Logbook_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns the GUID for logbook attribute.
        	:rtype: Standard_GUID
        """
        return _TFunction.TFunction_Logbook_GetID(*args)

    GetID = staticmethod(GetID)

    def GetImpacted(self, *args) -> "TDF_LabelMap const &":
        """
        * Returns the map of impacted labels contained in this logbook.
        	:rtype: TDF_LabelMap
        """
        return _TFunction.TFunction_Logbook_GetImpacted(self, *args)


    def GetTouched(self, *args) -> "TDF_LabelMap const &":
        """
        * Returns the map of touched labels in this logbook. A touched label is the one modified by the end user.
        	:rtype: TDF_LabelMap
        """
        return _TFunction.TFunction_Logbook_GetTouched(self, *args)


    def GetValid(self, *args) -> "void":
        """
        * Returns the map of valid labels in this logbook.
        	:rtype: TDF_LabelMap
        :param Ls:
        	:type Ls: TDF_LabelMap
        	:rtype: None
        """
        return _TFunction.TFunction_Logbook_GetValid(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns status of execution.
        	:rtype: bool
        """
        return _TFunction.TFunction_Logbook_IsDone(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TFunction.TFunction_Logbook_IsEmpty(self, *args)


    def IsModified(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the label L is touched or impacted. This method is called by <TFunction_FunctionDriver::MustExecute>. If <WithChildren> is set to true, the method checks all the sublabels of <L> too.
        	:param L:
        	:type L: TDF_Label
        	:param WithChildren: default value is Standard_False
        	:type WithChildren: bool
        	:rtype: bool
        """
        return _TFunction.TFunction_Logbook_IsModified(self, *args)


    def Set(*args) -> "opencascade::handle< TFunction_Logbook >":
        """
        * Finds or Creates a TFunction_Logbook attribute at the root label accessed by <Access>. Returns the attribute.
        	:param Access:
        	:type Access: TDF_Label
        	:rtype: opencascade::handle<TFunction_Logbook>
        """
        return _TFunction.TFunction_Logbook_Set(*args)

    Set = staticmethod(Set)

    def SetImpacted(self, *args) -> "void":
        """
        * Sets the label L as an impacted label in this logbook. This method is called by execution of the function driver.
        	:param L:
        	:type L: TDF_Label
        	:param WithChildren: default value is Standard_False
        	:type WithChildren: bool
        	:rtype: None
        """
        return _TFunction.TFunction_Logbook_SetImpacted(self, *args)


    def SetTouched(self, *args) -> "void":
        """
        * Sets the label L as a touched label in this logbook. In other words, L is understood to have been modified by the end user.
        	:param L:
        	:type L: TDF_Label
        	:rtype: None
        """
        return _TFunction.TFunction_Logbook_SetTouched(self, *args)


    def SetValid(self, *args) -> "void":
        """
        * Sets the label L as a valid label in this logbook.
        	:param L:
        	:type L: TDF_Label
        	:param WithChildren: default value is Standard_False
        	:type WithChildren: bool
        	:rtype: None
        :param Ls:
        	:type Ls: TDF_LabelMap
        	:rtype: None
        """
        return _TFunction.TFunction_Logbook_SetValid(self, *args)


    def __init__(self, *args):
        """
        * The methods manipulating the data (touched, impacted and valid labels) Constructor (empty).
        	:rtype: None
        """
        _TFunction.TFunction_Logbook_swiginit(self, _TFunction.new_TFunction_Logbook(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TFunction_Logbook_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TFunction.delete_TFunction_Logbook
TFunction_Logbook.Clear = new_instancemethod(_TFunction.TFunction_Logbook_Clear, None, TFunction_Logbook)
TFunction_Logbook.Done = new_instancemethod(_TFunction.TFunction_Logbook_Done, None, TFunction_Logbook)
TFunction_Logbook.DumpToString = new_instancemethod(_TFunction.TFunction_Logbook_DumpToString, None, TFunction_Logbook)
TFunction_Logbook.GetImpacted = new_instancemethod(_TFunction.TFunction_Logbook_GetImpacted, None, TFunction_Logbook)
TFunction_Logbook.GetTouched = new_instancemethod(_TFunction.TFunction_Logbook_GetTouched, None, TFunction_Logbook)
TFunction_Logbook.GetValid = new_instancemethod(_TFunction.TFunction_Logbook_GetValid, None, TFunction_Logbook)
TFunction_Logbook.IsDone = new_instancemethod(_TFunction.TFunction_Logbook_IsDone, None, TFunction_Logbook)
TFunction_Logbook.IsEmpty = new_instancemethod(_TFunction.TFunction_Logbook_IsEmpty, None, TFunction_Logbook)
TFunction_Logbook.IsModified = new_instancemethod(_TFunction.TFunction_Logbook_IsModified, None, TFunction_Logbook)
TFunction_Logbook.SetImpacted = new_instancemethod(_TFunction.TFunction_Logbook_SetImpacted, None, TFunction_Logbook)
TFunction_Logbook.SetTouched = new_instancemethod(_TFunction.TFunction_Logbook_SetTouched, None, TFunction_Logbook)
TFunction_Logbook.SetValid = new_instancemethod(_TFunction.TFunction_Logbook_SetValid, None, TFunction_Logbook)
TFunction_Logbook_swigregister = _TFunction.TFunction_Logbook_swigregister
TFunction_Logbook_swigregister(TFunction_Logbook)

def TFunction_Logbook_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns the GUID for logbook attribute.
    	:rtype: Standard_GUID
    """
    return _TFunction.TFunction_Logbook_GetID(*args)

def TFunction_Logbook_Set(*args) -> "opencascade::handle< TFunction_Logbook >":
    """
    * Finds or Creates a TFunction_Logbook attribute at the root label accessed by <Access>. Returns the attribute.
    	:param Access:
    	:type Access: TDF_Label
    	:rtype: opencascade::handle<TFunction_Logbook>
    """
    return _TFunction.TFunction_Logbook_Set(*args)

class TFunction_Scope(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddFunction(self, *args) -> "Standard_Boolean":
        """
        * Adds a function to the scope of functions.
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _TFunction.TFunction_Scope_AddFunction(self, *args)


    def ChangeFunctions(self, *args) -> "TFunction_DoubleMapOfIntegerLabel &":
        """
        * Returns the scope of functions for modification. Warning: Don't use this method if You are not sure what You do!
        	:rtype: TFunction_DoubleMapOfIntegerLabel
        """
        return _TFunction.TFunction_Scope_ChangeFunctions(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TFunction_Scope self) -> std::string"""
        return _TFunction.TFunction_Scope_DumpToString(self)


    def GetFreeID(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TFunction.TFunction_Scope_GetFreeID(self, *args)


    def GetFunction(self, *args) -> "TDF_Label const &":
        """
        * Returns an ID of the function.
        	:param L:
        	:type L: TDF_Label
        	:rtype: int
        * Returns the label of the function with this ID.
        	:param ID:
        	:type ID: int
        	:rtype: TDF_Label
        """
        return _TFunction.TFunction_Scope_GetFunction(self, *args)


    def GetFunctions(self, *args) -> "TFunction_DoubleMapOfIntegerLabel const &":
        """
        * Returns the scope of functions.
        	:rtype: TFunction_DoubleMapOfIntegerLabel
        """
        return _TFunction.TFunction_Scope_GetFunctions(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns the GUID for Scope attribute. Instant methods =============== Constructor (empty).
        	:rtype: Standard_GUID
        """
        return _TFunction.TFunction_Scope_GetID(*args)

    GetID = staticmethod(GetID)

    def GetLogbook(self, *args) -> "opencascade::handle< TFunction_Logbook >":
        """
        * Returns the Logbook used in TFunction_Driver methods. Implementation of Attribute methods ===================================
        	:rtype: opencascade::handle<TFunction_Logbook>
        """
        return _TFunction.TFunction_Scope_GetLogbook(self, *args)


    def HasFunction(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the function exists with such an ID.
        	:param ID:
        	:type ID: int
        	:rtype: bool
        * Returns true if the label contains a function of this scope.
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _TFunction.TFunction_Scope_HasFunction(self, *args)


    def RemoveAllFunctions(self, *args) -> "void":
        """
        * Removes all functions from the scope of functions.
        	:rtype: None
        """
        return _TFunction.TFunction_Scope_RemoveAllFunctions(self, *args)


    def RemoveFunction(self, *args) -> "Standard_Boolean":
        """
        * Removes a function from the scope of functions.
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        * Removes a function from the scope of functions.
        	:param ID:
        	:type ID: int
        	:rtype: bool
        """
        return _TFunction.TFunction_Scope_RemoveFunction(self, *args)


    def Set(*args) -> "opencascade::handle< TFunction_Scope >":
        """
        * Static methods ============== Finds or Creates a TFunction_Scope attribute at the root label accessed by <Access>. Returns the attribute.
        	:param Access:
        	:type Access: TDF_Label
        	:rtype: opencascade::handle<TFunction_Scope>
        """
        return _TFunction.TFunction_Scope_Set(*args)

    Set = staticmethod(Set)

    def SetFreeID(self, *args) -> "void":
        """
        :param ID:
        	:type ID: int
        	:rtype: None
        """
        return _TFunction.TFunction_Scope_SetFreeID(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TFunction.TFunction_Scope_swiginit(self, _TFunction.new_TFunction_Scope(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TFunction_Scope_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TFunction.delete_TFunction_Scope
TFunction_Scope.AddFunction = new_instancemethod(_TFunction.TFunction_Scope_AddFunction, None, TFunction_Scope)
TFunction_Scope.ChangeFunctions = new_instancemethod(_TFunction.TFunction_Scope_ChangeFunctions, None, TFunction_Scope)
TFunction_Scope.DumpToString = new_instancemethod(_TFunction.TFunction_Scope_DumpToString, None, TFunction_Scope)
TFunction_Scope.GetFreeID = new_instancemethod(_TFunction.TFunction_Scope_GetFreeID, None, TFunction_Scope)
TFunction_Scope.GetFunction = new_instancemethod(_TFunction.TFunction_Scope_GetFunction, None, TFunction_Scope)
TFunction_Scope.GetFunctions = new_instancemethod(_TFunction.TFunction_Scope_GetFunctions, None, TFunction_Scope)
TFunction_Scope.GetLogbook = new_instancemethod(_TFunction.TFunction_Scope_GetLogbook, None, TFunction_Scope)
TFunction_Scope.HasFunction = new_instancemethod(_TFunction.TFunction_Scope_HasFunction, None, TFunction_Scope)
TFunction_Scope.RemoveAllFunctions = new_instancemethod(_TFunction.TFunction_Scope_RemoveAllFunctions, None, TFunction_Scope)
TFunction_Scope.RemoveFunction = new_instancemethod(_TFunction.TFunction_Scope_RemoveFunction, None, TFunction_Scope)
TFunction_Scope.SetFreeID = new_instancemethod(_TFunction.TFunction_Scope_SetFreeID, None, TFunction_Scope)
TFunction_Scope_swigregister = _TFunction.TFunction_Scope_swigregister
TFunction_Scope_swigregister(TFunction_Scope)

def TFunction_Scope_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns the GUID for Scope attribute. Instant methods =============== Constructor (empty).
    	:rtype: Standard_GUID
    """
    return _TFunction.TFunction_Scope_GetID(*args)

def TFunction_Scope_Set(*args) -> "opencascade::handle< TFunction_Scope >":
    """
    * Static methods ============== Finds or Creates a TFunction_Scope attribute at the root label accessed by <Access>. Returns the attribute.
    	:param Access:
    	:type Access: TDF_Label
    	:rtype: opencascade::handle<TFunction_Scope>
    """
    return _TFunction.TFunction_Scope_Set(*args)

class TFunction_HArray1OfDataMapOfGUIDDriver(TFunction_Array1OfDataMapOfGUIDDriver, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_swiginit(self, _TFunction.new_TFunction_HArray1OfDataMapOfGUIDDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TFunction_HArray1OfDataMapOfGUIDDriver_DownCast(t)

    __swig_destroy__ = _TFunction.delete_TFunction_HArray1OfDataMapOfGUIDDriver
TFunction_HArray1OfDataMapOfGUIDDriver.Array1 = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_Array1, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver.ChangeArray1 = new_instancemethod(_TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_ChangeArray1, None, TFunction_HArray1OfDataMapOfGUIDDriver)
TFunction_HArray1OfDataMapOfGUIDDriver_swigregister = _TFunction.TFunction_HArray1OfDataMapOfGUIDDriver_swigregister
TFunction_HArray1OfDataMapOfGUIDDriver_swigregister(TFunction_HArray1OfDataMapOfGUIDDriver)



