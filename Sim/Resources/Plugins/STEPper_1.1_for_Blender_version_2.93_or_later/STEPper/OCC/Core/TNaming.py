# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TNaming module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tnaming.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TNaming.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TNaming')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TNaming')
    _TNaming = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TNaming', [dirname(__file__)])
        except ImportError:
            import _TNaming
            return _TNaming
        try:
            _mod = imp.load_module('_TNaming', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TNaming = swig_import_helper()
    del swig_import_helper
else:
    import _TNaming
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TNaming.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TNaming.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TNaming.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TNaming.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TNaming.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TNaming.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TNaming.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TNaming.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TNaming.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TNaming.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TNaming.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TNaming.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TNaming.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TNaming.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TNaming.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TNaming.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TNaming.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TNaming.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TNaming.process_exception(error, method_name, class_name)
process_exception = _TNaming.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
TNaming_PRIMITIVE = _TNaming.TNaming_PRIMITIVE
TNaming_GENERATED = _TNaming.TNaming_GENERATED
TNaming_MODIFY = _TNaming.TNaming_MODIFY
TNaming_DELETE = _TNaming.TNaming_DELETE
TNaming_REPLACE = _TNaming.TNaming_REPLACE
TNaming_SELECTED = _TNaming.TNaming_SELECTED
TNaming_UNKNOWN = _TNaming.TNaming_UNKNOWN
TNaming_IDENTITY = _TNaming.TNaming_IDENTITY
TNaming_MODIFUNTIL = _TNaming.TNaming_MODIFUNTIL
TNaming_GENERATION = _TNaming.TNaming_GENERATION
TNaming_INTERSECTION = _TNaming.TNaming_INTERSECTION
TNaming_UNION = _TNaming.TNaming_UNION
TNaming_SUBSTRACTION = _TNaming.TNaming_SUBSTRACTION
TNaming_CONSTSHAPE = _TNaming.TNaming_CONSTSHAPE
TNaming_FILTERBYNEIGHBOURGS = _TNaming.TNaming_FILTERBYNEIGHBOURGS
TNaming_ORIENTATION = _TNaming.TNaming_ORIENTATION
TNaming_WIREIN = _TNaming.TNaming_WIREIN
TNaming_SHELLIN = _TNaming.TNaming_SHELLIN

def Handle_TNaming_DeltaOnModification_Create() -> "opencascade::handle< TNaming_DeltaOnModification >":
    return _TNaming.Handle_TNaming_DeltaOnModification_Create()
Handle_TNaming_DeltaOnModification_Create = _TNaming.Handle_TNaming_DeltaOnModification_Create

def Handle_TNaming_DeltaOnModification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TNaming_DeltaOnModification >":
    return _TNaming.Handle_TNaming_DeltaOnModification_DownCast(t)
Handle_TNaming_DeltaOnModification_DownCast = _TNaming.Handle_TNaming_DeltaOnModification_DownCast

def Handle_TNaming_DeltaOnModification_IsNull(t: 'opencascade::handle< TNaming_DeltaOnModification > const &') -> "bool":
    return _TNaming.Handle_TNaming_DeltaOnModification_IsNull(t)
Handle_TNaming_DeltaOnModification_IsNull = _TNaming.Handle_TNaming_DeltaOnModification_IsNull

def Handle_TNaming_DeltaOnRemoval_Create() -> "opencascade::handle< TNaming_DeltaOnRemoval >":
    return _TNaming.Handle_TNaming_DeltaOnRemoval_Create()
Handle_TNaming_DeltaOnRemoval_Create = _TNaming.Handle_TNaming_DeltaOnRemoval_Create

def Handle_TNaming_DeltaOnRemoval_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TNaming_DeltaOnRemoval >":
    return _TNaming.Handle_TNaming_DeltaOnRemoval_DownCast(t)
Handle_TNaming_DeltaOnRemoval_DownCast = _TNaming.Handle_TNaming_DeltaOnRemoval_DownCast

def Handle_TNaming_DeltaOnRemoval_IsNull(t: 'opencascade::handle< TNaming_DeltaOnRemoval > const &') -> "bool":
    return _TNaming.Handle_TNaming_DeltaOnRemoval_IsNull(t)
Handle_TNaming_DeltaOnRemoval_IsNull = _TNaming.Handle_TNaming_DeltaOnRemoval_IsNull

def Handle_TNaming_NamedShape_Create() -> "opencascade::handle< TNaming_NamedShape >":
    return _TNaming.Handle_TNaming_NamedShape_Create()
Handle_TNaming_NamedShape_Create = _TNaming.Handle_TNaming_NamedShape_Create

def Handle_TNaming_NamedShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TNaming_NamedShape >":
    return _TNaming.Handle_TNaming_NamedShape_DownCast(t)
Handle_TNaming_NamedShape_DownCast = _TNaming.Handle_TNaming_NamedShape_DownCast

def Handle_TNaming_NamedShape_IsNull(t: 'opencascade::handle< TNaming_NamedShape > const &') -> "bool":
    return _TNaming.Handle_TNaming_NamedShape_IsNull(t)
Handle_TNaming_NamedShape_IsNull = _TNaming.Handle_TNaming_NamedShape_IsNull

def Handle_TNaming_Naming_Create() -> "opencascade::handle< TNaming_Naming >":
    return _TNaming.Handle_TNaming_Naming_Create()
Handle_TNaming_Naming_Create = _TNaming.Handle_TNaming_Naming_Create

def Handle_TNaming_Naming_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TNaming_Naming >":
    return _TNaming.Handle_TNaming_Naming_DownCast(t)
Handle_TNaming_Naming_DownCast = _TNaming.Handle_TNaming_Naming_DownCast

def Handle_TNaming_Naming_IsNull(t: 'opencascade::handle< TNaming_Naming > const &') -> "bool":
    return _TNaming.Handle_TNaming_Naming_IsNull(t)
Handle_TNaming_Naming_IsNull = _TNaming.Handle_TNaming_Naming_IsNull

def Handle_TNaming_TranslateTool_Create() -> "opencascade::handle< TNaming_TranslateTool >":
    return _TNaming.Handle_TNaming_TranslateTool_Create()
Handle_TNaming_TranslateTool_Create = _TNaming.Handle_TNaming_TranslateTool_Create

def Handle_TNaming_TranslateTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TNaming_TranslateTool >":
    return _TNaming.Handle_TNaming_TranslateTool_DownCast(t)
Handle_TNaming_TranslateTool_DownCast = _TNaming.Handle_TNaming_TranslateTool_DownCast

def Handle_TNaming_TranslateTool_IsNull(t: 'opencascade::handle< TNaming_TranslateTool > const &') -> "bool":
    return _TNaming.Handle_TNaming_TranslateTool_IsNull(t)
Handle_TNaming_TranslateTool_IsNull = _TNaming.Handle_TNaming_TranslateTool_IsNull

def Handle_TNaming_UsedShapes_Create() -> "opencascade::handle< TNaming_UsedShapes >":
    return _TNaming.Handle_TNaming_UsedShapes_Create()
Handle_TNaming_UsedShapes_Create = _TNaming.Handle_TNaming_UsedShapes_Create

def Handle_TNaming_UsedShapes_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TNaming_UsedShapes >":
    return _TNaming.Handle_TNaming_UsedShapes_DownCast(t)
Handle_TNaming_UsedShapes_DownCast = _TNaming.Handle_TNaming_UsedShapes_DownCast

def Handle_TNaming_UsedShapes_IsNull(t: 'opencascade::handle< TNaming_UsedShapes > const &') -> "bool":
    return _TNaming.Handle_TNaming_UsedShapes_IsNull(t)
Handle_TNaming_UsedShapes_IsNull = _TNaming.Handle_TNaming_UsedShapes_IsNull
class TNaming_DataMapOfShapePtrRefShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.TNaming_DataMapOfShapePtrRefShape_swiginit(self, _TNaming.new_TNaming_DataMapOfShapePtrRefShape(*args))
    __swig_destroy__ = _TNaming.delete_TNaming_DataMapOfShapePtrRefShape
TNaming_DataMapOfShapePtrRefShape.begin = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_begin, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.end = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_end, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.cbegin = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_cbegin, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.cend = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_cend, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Exchange = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Exchange, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Assign = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Assign, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Set = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Set, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.ReSize = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_ReSize, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Bind = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Bind, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Bound = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Bound, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.IsBound = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_IsBound, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.UnBind = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_UnBind, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Seek = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Seek, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Find = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Find, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.ChangeSeek = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_ChangeSeek, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.ChangeFind = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_ChangeFind, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.__call__ = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape___call__, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Clear = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Clear, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape.Size = new_instancemethod(_TNaming.TNaming_DataMapOfShapePtrRefShape_Size, None, TNaming_DataMapOfShapePtrRefShape)
TNaming_DataMapOfShapePtrRefShape_swigregister = _TNaming.TNaming_DataMapOfShapePtrRefShape_swigregister
TNaming_DataMapOfShapePtrRefShape_swigregister(TNaming_DataMapOfShapePtrRefShape)

class TNaming_ListOfIndexedDataMapOfShapeListOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_swiginit(self, _TNaming.new_TNaming_ListOfIndexedDataMapOfShapeListOfShape(*args))
    __swig_destroy__ = _TNaming.delete_TNaming_ListOfIndexedDataMapOfShapeListOfShape
TNaming_ListOfIndexedDataMapOfShapeListOfShape.begin = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_begin, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.end = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_end, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.cbegin = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_cbegin, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.cend = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_cend, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Size = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Size, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Assign = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Assign, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Set = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Set, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Clear = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Clear, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.First = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_First, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Last = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Last, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Append = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Append, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Prepend = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Prepend, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.RemoveFirst = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_RemoveFirst, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Remove = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Remove, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.InsertBefore = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_InsertBefore, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.InsertAfter = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_InsertAfter, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape.Reverse = new_instancemethod(_TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_Reverse, None, TNaming_ListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListOfIndexedDataMapOfShapeListOfShape_swigregister = _TNaming.TNaming_ListOfIndexedDataMapOfShapeListOfShape_swigregister
TNaming_ListOfIndexedDataMapOfShapeListOfShape_swigregister(TNaming_ListOfIndexedDataMapOfShapeListOfShape)

class TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_swiginit(self, _TNaming.new_TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape(*args))
    __swig_destroy__ = _TNaming.delete_TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape.More = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_More, None, TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape.Next = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_Next, None, TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape.Value = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_Value, None, TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape.ChangeValue = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_ChangeValue, None, TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape)
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_swigregister = _TNaming.TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_swigregister
TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape_swigregister(TNaming_ListIteratorOfListOfIndexedDataMapOfShapeListOfShape)

class TNaming_NamedShapeHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashCode = staticmethod(_TNaming.TNaming_NamedShapeHasher_HashCode)
    IsEqual = staticmethod(_TNaming.TNaming_NamedShapeHasher_IsEqual)

    def __init__(self):
        _TNaming.TNaming_NamedShapeHasher_swiginit(self, _TNaming.new_TNaming_NamedShapeHasher())
    __swig_destroy__ = _TNaming.delete_TNaming_NamedShapeHasher
TNaming_NamedShapeHasher_swigregister = _TNaming.TNaming_NamedShapeHasher_swigregister
TNaming_NamedShapeHasher_swigregister(TNaming_NamedShapeHasher)

def TNaming_NamedShapeHasher_HashCode(theKey: 'opencascade::handle< TNaming_NamedShape > const &', theUpperBound: 'Standard_Integer const') -> "Standard_Integer":
    return _TNaming.TNaming_NamedShapeHasher_HashCode(theKey, theUpperBound)
TNaming_NamedShapeHasher_HashCode = _TNaming.TNaming_NamedShapeHasher_HashCode

def TNaming_NamedShapeHasher_IsEqual(theKey1: 'opencascade::handle< TNaming_NamedShape > const &', theKey2: 'opencascade::handle< TNaming_NamedShape > const &') -> "Standard_Boolean":
    return _TNaming.TNaming_NamedShapeHasher_IsEqual(theKey1, theKey2)
TNaming_NamedShapeHasher_IsEqual = _TNaming.TNaming_NamedShapeHasher_IsEqual

class TNaming_MapOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.TNaming_MapOfShape_swiginit(self, _TNaming.new_TNaming_MapOfShape(*args))
    __swig_destroy__ = _TNaming.delete_TNaming_MapOfShape
TNaming_MapOfShape.cbegin = new_instancemethod(_TNaming.TNaming_MapOfShape_cbegin, None, TNaming_MapOfShape)
TNaming_MapOfShape.cend = new_instancemethod(_TNaming.TNaming_MapOfShape_cend, None, TNaming_MapOfShape)
TNaming_MapOfShape.Exchange = new_instancemethod(_TNaming.TNaming_MapOfShape_Exchange, None, TNaming_MapOfShape)
TNaming_MapOfShape.Assign = new_instancemethod(_TNaming.TNaming_MapOfShape_Assign, None, TNaming_MapOfShape)
TNaming_MapOfShape.Set = new_instancemethod(_TNaming.TNaming_MapOfShape_Set, None, TNaming_MapOfShape)
TNaming_MapOfShape.ReSize = new_instancemethod(_TNaming.TNaming_MapOfShape_ReSize, None, TNaming_MapOfShape)
TNaming_MapOfShape.Add = new_instancemethod(_TNaming.TNaming_MapOfShape_Add, None, TNaming_MapOfShape)
TNaming_MapOfShape.Added = new_instancemethod(_TNaming.TNaming_MapOfShape_Added, None, TNaming_MapOfShape)
TNaming_MapOfShape.Remove = new_instancemethod(_TNaming.TNaming_MapOfShape_Remove, None, TNaming_MapOfShape)
TNaming_MapOfShape.Clear = new_instancemethod(_TNaming.TNaming_MapOfShape_Clear, None, TNaming_MapOfShape)
TNaming_MapOfShape.Size = new_instancemethod(_TNaming.TNaming_MapOfShape_Size, None, TNaming_MapOfShape)
TNaming_MapOfShape.IsEqual = new_instancemethod(_TNaming.TNaming_MapOfShape_IsEqual, None, TNaming_MapOfShape)
TNaming_MapOfShape.Contains = new_instancemethod(_TNaming.TNaming_MapOfShape_Contains, None, TNaming_MapOfShape)
TNaming_MapOfShape.Union = new_instancemethod(_TNaming.TNaming_MapOfShape_Union, None, TNaming_MapOfShape)
TNaming_MapOfShape.Unite = new_instancemethod(_TNaming.TNaming_MapOfShape_Unite, None, TNaming_MapOfShape)
TNaming_MapOfShape.HasIntersection = new_instancemethod(_TNaming.TNaming_MapOfShape_HasIntersection, None, TNaming_MapOfShape)
TNaming_MapOfShape.Intersection = new_instancemethod(_TNaming.TNaming_MapOfShape_Intersection, None, TNaming_MapOfShape)
TNaming_MapOfShape.Intersect = new_instancemethod(_TNaming.TNaming_MapOfShape_Intersect, None, TNaming_MapOfShape)
TNaming_MapOfShape.Subtraction = new_instancemethod(_TNaming.TNaming_MapOfShape_Subtraction, None, TNaming_MapOfShape)
TNaming_MapOfShape.Subtract = new_instancemethod(_TNaming.TNaming_MapOfShape_Subtract, None, TNaming_MapOfShape)
TNaming_MapOfShape.Difference = new_instancemethod(_TNaming.TNaming_MapOfShape_Difference, None, TNaming_MapOfShape)
TNaming_MapOfShape.Differ = new_instancemethod(_TNaming.TNaming_MapOfShape_Differ, None, TNaming_MapOfShape)
TNaming_MapOfShape_swigregister = _TNaming.TNaming_MapOfShape_swigregister
TNaming_MapOfShape_swigregister(TNaming_MapOfShape)

class TNaming_DataMapOfShapeMapOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.TNaming_DataMapOfShapeMapOfShape_swiginit(self, _TNaming.new_TNaming_DataMapOfShapeMapOfShape(*args))
    __swig_destroy__ = _TNaming.delete_TNaming_DataMapOfShapeMapOfShape
TNaming_DataMapOfShapeMapOfShape.begin = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_begin, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.end = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_end, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.cbegin = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_cbegin, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.cend = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_cend, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.Exchange = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_Exchange, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.Assign = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_Assign, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.Set = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_Set, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.ReSize = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_ReSize, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.Bind = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_Bind, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.Bound = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_Bound, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.IsBound = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_IsBound, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.UnBind = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_UnBind, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.Seek = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_Seek, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.Find = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_Find, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.ChangeSeek = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_ChangeSeek, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.ChangeFind = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_ChangeFind, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.__call__ = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape___call__, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.Clear = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_Clear, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape.Size = new_instancemethod(_TNaming.TNaming_DataMapOfShapeMapOfShape_Size, None, TNaming_DataMapOfShapeMapOfShape)
TNaming_DataMapOfShapeMapOfShape_swigregister = _TNaming.TNaming_DataMapOfShapeMapOfShape_swigregister
TNaming_DataMapOfShapeMapOfShape_swigregister(TNaming_DataMapOfShapeMapOfShape)

class TNaming_MapOfNamedShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.TNaming_MapOfNamedShape_swiginit(self, _TNaming.new_TNaming_MapOfNamedShape(*args))
    __swig_destroy__ = _TNaming.delete_TNaming_MapOfNamedShape
TNaming_MapOfNamedShape.cbegin = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_cbegin, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.cend = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_cend, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Exchange = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Exchange, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Assign = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Assign, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Set = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Set, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.ReSize = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_ReSize, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Add = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Add, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Added = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Added, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Remove = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Remove, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Clear = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Clear, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Size = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Size, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.IsEqual = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_IsEqual, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Contains = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Contains, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Union = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Union, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Unite = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Unite, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.HasIntersection = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_HasIntersection, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Intersection = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Intersection, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Intersect = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Intersect, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Subtraction = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Subtraction, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Subtract = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Subtract, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Difference = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Difference, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape.Differ = new_instancemethod(_TNaming.TNaming_MapOfNamedShape_Differ, None, TNaming_MapOfNamedShape)
TNaming_MapOfNamedShape_swigregister = _TNaming.TNaming_MapOfNamedShape_swigregister
TNaming_MapOfNamedShape_swigregister(TNaming_MapOfNamedShape)

class TNaming_ListOfNamedShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.TNaming_ListOfNamedShape_swiginit(self, _TNaming.new_TNaming_ListOfNamedShape(*args))
    __swig_destroy__ = _TNaming.delete_TNaming_ListOfNamedShape
TNaming_ListOfNamedShape.begin = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_begin, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.end = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_end, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.cbegin = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_cbegin, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.cend = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_cend, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Size = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Size, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Assign = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Assign, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Set = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Set, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Clear = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Clear, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.First = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_First, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Last = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Last, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Append = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Append, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Prepend = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Prepend, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.RemoveFirst = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_RemoveFirst, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Remove = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Remove, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.InsertBefore = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_InsertBefore, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.InsertAfter = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_InsertAfter, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape.Reverse = new_instancemethod(_TNaming.TNaming_ListOfNamedShape_Reverse, None, TNaming_ListOfNamedShape)
TNaming_ListOfNamedShape_swigregister = _TNaming.TNaming_ListOfNamedShape_swigregister
TNaming_ListOfNamedShape_swigregister(TNaming_ListOfNamedShape)

class TNaming_ListIteratorOfListOfNamedShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.TNaming_ListIteratorOfListOfNamedShape_swiginit(self, _TNaming.new_TNaming_ListIteratorOfListOfNamedShape(*args))
    __swig_destroy__ = _TNaming.delete_TNaming_ListIteratorOfListOfNamedShape
TNaming_ListIteratorOfListOfNamedShape.More = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfNamedShape_More, None, TNaming_ListIteratorOfListOfNamedShape)
TNaming_ListIteratorOfListOfNamedShape.Next = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfNamedShape_Next, None, TNaming_ListIteratorOfListOfNamedShape)
TNaming_ListIteratorOfListOfNamedShape.Value = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfNamedShape_Value, None, TNaming_ListIteratorOfListOfNamedShape)
TNaming_ListIteratorOfListOfNamedShape.ChangeValue = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfNamedShape_ChangeValue, None, TNaming_ListIteratorOfListOfNamedShape)
TNaming_ListIteratorOfListOfNamedShape_swigregister = _TNaming.TNaming_ListIteratorOfListOfNamedShape_swigregister
TNaming_ListIteratorOfListOfNamedShape_swigregister(TNaming_ListIteratorOfListOfNamedShape)

class TNaming_DataMapOfShapeShapesSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.TNaming_DataMapOfShapeShapesSet_swiginit(self, _TNaming.new_TNaming_DataMapOfShapeShapesSet(*args))
    __swig_destroy__ = _TNaming.delete_TNaming_DataMapOfShapeShapesSet
TNaming_DataMapOfShapeShapesSet.begin = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_begin, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.end = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_end, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.cbegin = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_cbegin, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.cend = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_cend, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Exchange = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Exchange, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Assign = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Assign, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Set = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Set, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.ReSize = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_ReSize, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Bind = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Bind, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Bound = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Bound, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.IsBound = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_IsBound, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.UnBind = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_UnBind, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Seek = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Seek, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Find = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Find, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.ChangeSeek = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_ChangeSeek, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.ChangeFind = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_ChangeFind, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.__call__ = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet___call__, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Clear = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Clear, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet.Size = new_instancemethod(_TNaming.TNaming_DataMapOfShapeShapesSet_Size, None, TNaming_DataMapOfShapeShapesSet)
TNaming_DataMapOfShapeShapesSet_swigregister = _TNaming.TNaming_DataMapOfShapeShapesSet_swigregister
TNaming_DataMapOfShapeShapesSet_swigregister(TNaming_DataMapOfShapeShapesSet)

class TNaming_ListOfMapOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.TNaming_ListOfMapOfShape_swiginit(self, _TNaming.new_TNaming_ListOfMapOfShape(*args))
    __swig_destroy__ = _TNaming.delete_TNaming_ListOfMapOfShape
TNaming_ListOfMapOfShape.begin = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_begin, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.end = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_end, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.cbegin = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_cbegin, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.cend = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_cend, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Size = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Size, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Assign = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Assign, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Set = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Set, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Clear = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Clear, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.First = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_First, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Last = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Last, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Append = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Append, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Prepend = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Prepend, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.RemoveFirst = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_RemoveFirst, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Remove = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Remove, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.InsertBefore = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_InsertBefore, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.InsertAfter = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_InsertAfter, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape.Reverse = new_instancemethod(_TNaming.TNaming_ListOfMapOfShape_Reverse, None, TNaming_ListOfMapOfShape)
TNaming_ListOfMapOfShape_swigregister = _TNaming.TNaming_ListOfMapOfShape_swigregister
TNaming_ListOfMapOfShape_swigregister(TNaming_ListOfMapOfShape)

class TNaming_ListIteratorOfListOfMapOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TNaming.TNaming_ListIteratorOfListOfMapOfShape_swiginit(self, _TNaming.new_TNaming_ListIteratorOfListOfMapOfShape(*args))
    __swig_destroy__ = _TNaming.delete_TNaming_ListIteratorOfListOfMapOfShape
TNaming_ListIteratorOfListOfMapOfShape.More = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfMapOfShape_More, None, TNaming_ListIteratorOfListOfMapOfShape)
TNaming_ListIteratorOfListOfMapOfShape.Next = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfMapOfShape_Next, None, TNaming_ListIteratorOfListOfMapOfShape)
TNaming_ListIteratorOfListOfMapOfShape.Value = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfMapOfShape_Value, None, TNaming_ListIteratorOfListOfMapOfShape)
TNaming_ListIteratorOfListOfMapOfShape.ChangeValue = new_instancemethod(_TNaming.TNaming_ListIteratorOfListOfMapOfShape_ChangeValue, None, TNaming_ListIteratorOfListOfMapOfShape)
TNaming_ListIteratorOfListOfMapOfShape_swigregister = _TNaming.TNaming_ListIteratorOfListOfMapOfShape_swigregister
TNaming_ListIteratorOfListOfMapOfShape_swigregister(TNaming_ListIteratorOfListOfMapOfShape)

class tnaming(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeShapes(*args) -> "void":
        """
        * Remplace les shapes du label et des sous-labels par des copies.
        	:param label:
        	:type label: TDF_Label
        	:param M:
        	:type M: TopTools_DataMapOfShapeShape
        	:rtype: void
        """
        return _TNaming.tnaming_ChangeShapes(*args)

    ChangeShapes = staticmethod(ChangeShapes)

    def Displace(*args) -> "void":
        """
        * Application de la Location sur les shapes du label et de ses sous labels.
        	:param label:
        	:type label: TDF_Label
        	:param aLocation:
        	:type aLocation: TopLoc_Location
        	:param WithOld: default value is Standard_True
        	:type WithOld: bool
        	:rtype: void
        """
        return _TNaming.tnaming_Displace(*args)

    Displace = staticmethod(Displace)

    def FindUniqueContext(*args) -> "TopoDS_Shape":
        """
        * Find unique context of shape <S>
        	:param S:
        	:type S: TopoDS_Shape
        	:param Context:
        	:type Context: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _TNaming.tnaming_FindUniqueContext(*args)

    FindUniqueContext = staticmethod(FindUniqueContext)

    def FindUniqueContextSet(*args) -> "TopoDS_Shape":
        """
        * Find unique context of shape <S>,which is pure concatenation of atomic shapes (Compound). The result is concatenation of single contexts
        	:param S:
        	:type S: TopoDS_Shape
        	:param Context:
        	:type Context: TopoDS_Shape
        	:param Arr:
        	:type Arr: TopTools_HArray1OfShape
        	:rtype: TopoDS_Shape
        """
        return _TNaming.tnaming_FindUniqueContextSet(*args)

    FindUniqueContextSet = staticmethod(FindUniqueContextSet)

    def IDList(*args) -> "void":
        """
        * Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use.
        	:param anIDList:
        	:type anIDList: TDF_IDList
        	:rtype: void
        """
        return _TNaming.tnaming_IDList(*args)

    IDList = staticmethod(IDList)

    def MakeShape(*args) -> "TopoDS_Shape":
        """
        * Builds shape from map content
        	:param MS:
        	:type MS: TopTools_MapOfShape
        	:rtype: TopoDS_Shape
        """
        return _TNaming.tnaming_MakeShape(*args)

    MakeShape = staticmethod(MakeShape)

    def OuterShell(*args) -> "Standard_Boolean":
        """
        * Returns True if outer Shell is found and the found shell in <theShell>. Print of TNaming enumeration =============================
        	:param theSolid:
        	:type theSolid: TopoDS_Solid
        	:param theShell:
        	:type theShell: TopoDS_Shell
        	:rtype: bool
        """
        return _TNaming.tnaming_OuterShell(*args)

    OuterShell = staticmethod(OuterShell)

    def OuterWire(*args) -> "Standard_Boolean":
        """
        * Returns True if outer wire is found and the found wire in <theWire>.
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theWire:
        	:type theWire: TopoDS_Wire
        	:rtype: bool
        """
        return _TNaming.tnaming_OuterWire(*args)

    OuterWire = staticmethod(OuterWire)

    def Print(*args) -> "Standard_OStream &":
        """
        * Prints the evolution <EVOL> as a String on the Stream <S> and returns <S>.
        	:param EVOL:
        	:type EVOL: TNaming_Evolution
        	:param S:
        	:type S: Standard_OStream
        	:rtype: Standard_OStream
        * Prints the name of name type <NAME> as a String on the Stream <S> and returns <S>.
        	:param NAME:
        	:type NAME: TNaming_NameType
        	:param S:
        	:type S: Standard_OStream
        	:rtype: Standard_OStream
        * Prints the content of UsedShapes private attribute as a String Table on the Stream <S> and returns <S>.
        	:param ACCESS:
        	:type ACCESS: TDF_Label
        	:param S:
        	:type S: Standard_OStream
        	:rtype: Standard_OStream
        """
        return _TNaming.tnaming_Print(*args)

    Print = staticmethod(Print)

    def Replicate(*args) -> "void":
        """
        * Replicates the named shape with the transformation <T> on the label <L> (and sub-labels if necessary) (TNaming_GENERATED is set)
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:param T:
        	:type T: gp_Trsf
        	:param L:
        	:type L: TDF_Label
        	:rtype: void
        * Replicates the shape with the transformation <T> on the label <L> (and sub-labels if necessary) (TNaming_GENERATED is set)
        	:param SH:
        	:type SH: TopoDS_Shape
        	:param T:
        	:type T: gp_Trsf
        	:param L:
        	:type L: TDF_Label
        	:rtype: void
        """
        return _TNaming.tnaming_Replicate(*args)

    Replicate = staticmethod(Replicate)

    def Substitute(*args) -> "void":
        """
        * Subtituter les shapes sur les structures de source vers cible
        	:param labelsource:
        	:type labelsource: TDF_Label
        	:param labelcible:
        	:type labelcible: TDF_Label
        	:param mapOldNew:
        	:type mapOldNew: TopTools_DataMapOfShapeShape
        	:rtype: void
        """
        return _TNaming.tnaming_Substitute(*args)

    Substitute = staticmethod(Substitute)

    def SubstituteSShape(*args) -> "Standard_Boolean":
        """
        * Subtitutes shape in source structure
        	:param accesslabel:
        	:type accesslabel: TDF_Label
        	:param From:
        	:type From: TopoDS_Shape
        	:param To:
        	:type To: TopoDS_Shape
        	:rtype: bool
        """
        return _TNaming.tnaming_SubstituteSShape(*args)

    SubstituteSShape = staticmethod(SubstituteSShape)

    def Transform(*args) -> "void":
        """
        * Application de la transformation sur les shapes du label et de ses sous labels. Warning: le remplacement du shape est fait dans tous les attributs qui le contiennent meme si ceux ci ne sont pas associees a des sous-labels de <Label>.
        	:param label:
        	:type label: TDF_Label
        	:param aTransformation:
        	:type aTransformation: gp_Trsf
        	:rtype: void
        """
        return _TNaming.tnaming_Transform(*args)

    Transform = staticmethod(Transform)

    def Update(*args) -> "void":
        """
        * Mise a jour des shapes du label et de ses fils en tenant compte des substitutions decrite par mapOldNew. //! Warning: le remplacement du shape est fait dans tous les attributs qui le contiennent meme si ceux ci ne sont pas associees a des sous-labels de <Label>.
        	:param label:
        	:type label: TDF_Label
        	:param mapOldNew:
        	:type mapOldNew: TopTools_DataMapOfShapeShape
        	:rtype: void
        """
        return _TNaming.tnaming_Update(*args)

    Update = staticmethod(Update)

    __repr__ = _dumps_object


    def __init__(self):
        _TNaming.tnaming_swiginit(self, _TNaming.new_tnaming())
    __swig_destroy__ = _TNaming.delete_tnaming
tnaming_swigregister = _TNaming.tnaming_swigregister
tnaming_swigregister(tnaming)

def tnaming_ChangeShapes(*args) -> "void":
    """
    * Remplace les shapes du label et des sous-labels par des copies.
    	:param label:
    	:type label: TDF_Label
    	:param M:
    	:type M: TopTools_DataMapOfShapeShape
    	:rtype: void
    """
    return _TNaming.tnaming_ChangeShapes(*args)

def tnaming_Displace(*args) -> "void":
    """
    * Application de la Location sur les shapes du label et de ses sous labels.
    	:param label:
    	:type label: TDF_Label
    	:param aLocation:
    	:type aLocation: TopLoc_Location
    	:param WithOld: default value is Standard_True
    	:type WithOld: bool
    	:rtype: void
    """
    return _TNaming.tnaming_Displace(*args)

def tnaming_FindUniqueContext(*args) -> "TopoDS_Shape":
    """
    * Find unique context of shape <S>
    	:param S:
    	:type S: TopoDS_Shape
    	:param Context:
    	:type Context: TopoDS_Shape
    	:rtype: TopoDS_Shape
    """
    return _TNaming.tnaming_FindUniqueContext(*args)

def tnaming_FindUniqueContextSet(*args) -> "TopoDS_Shape":
    """
    * Find unique context of shape <S>,which is pure concatenation of atomic shapes (Compound). The result is concatenation of single contexts
    	:param S:
    	:type S: TopoDS_Shape
    	:param Context:
    	:type Context: TopoDS_Shape
    	:param Arr:
    	:type Arr: TopTools_HArray1OfShape
    	:rtype: TopoDS_Shape
    """
    return _TNaming.tnaming_FindUniqueContextSet(*args)

def tnaming_IDList(*args) -> "void":
    """
    * Appends to <anIDList> the list of the attributes IDs of this package. CAUTION: <anIDList> is NOT cleared before use.
    	:param anIDList:
    	:type anIDList: TDF_IDList
    	:rtype: void
    """
    return _TNaming.tnaming_IDList(*args)

def tnaming_MakeShape(*args) -> "TopoDS_Shape":
    """
    * Builds shape from map content
    	:param MS:
    	:type MS: TopTools_MapOfShape
    	:rtype: TopoDS_Shape
    """
    return _TNaming.tnaming_MakeShape(*args)

def tnaming_OuterShell(*args) -> "Standard_Boolean":
    """
    * Returns True if outer Shell is found and the found shell in <theShell>. Print of TNaming enumeration =============================
    	:param theSolid:
    	:type theSolid: TopoDS_Solid
    	:param theShell:
    	:type theShell: TopoDS_Shell
    	:rtype: bool
    """
    return _TNaming.tnaming_OuterShell(*args)

def tnaming_OuterWire(*args) -> "Standard_Boolean":
    """
    * Returns True if outer wire is found and the found wire in <theWire>.
    	:param theFace:
    	:type theFace: TopoDS_Face
    	:param theWire:
    	:type theWire: TopoDS_Wire
    	:rtype: bool
    """
    return _TNaming.tnaming_OuterWire(*args)

def tnaming_Print(*args) -> "Standard_OStream &":
    """
    * Prints the evolution <EVOL> as a String on the Stream <S> and returns <S>.
    	:param EVOL:
    	:type EVOL: TNaming_Evolution
    	:param S:
    	:type S: Standard_OStream
    	:rtype: Standard_OStream
    * Prints the name of name type <NAME> as a String on the Stream <S> and returns <S>.
    	:param NAME:
    	:type NAME: TNaming_NameType
    	:param S:
    	:type S: Standard_OStream
    	:rtype: Standard_OStream
    * Prints the content of UsedShapes private attribute as a String Table on the Stream <S> and returns <S>.
    	:param ACCESS:
    	:type ACCESS: TDF_Label
    	:param S:
    	:type S: Standard_OStream
    	:rtype: Standard_OStream
    """
    return _TNaming.tnaming_Print(*args)

def tnaming_Replicate(*args) -> "void":
    """
    * Replicates the named shape with the transformation <T> on the label <L> (and sub-labels if necessary) (TNaming_GENERATED is set)
    	:param NS:
    	:type NS: TNaming_NamedShape
    	:param T:
    	:type T: gp_Trsf
    	:param L:
    	:type L: TDF_Label
    	:rtype: void
    * Replicates the shape with the transformation <T> on the label <L> (and sub-labels if necessary) (TNaming_GENERATED is set)
    	:param SH:
    	:type SH: TopoDS_Shape
    	:param T:
    	:type T: gp_Trsf
    	:param L:
    	:type L: TDF_Label
    	:rtype: void
    """
    return _TNaming.tnaming_Replicate(*args)

def tnaming_Substitute(*args) -> "void":
    """
    * Subtituter les shapes sur les structures de source vers cible
    	:param labelsource:
    	:type labelsource: TDF_Label
    	:param labelcible:
    	:type labelcible: TDF_Label
    	:param mapOldNew:
    	:type mapOldNew: TopTools_DataMapOfShapeShape
    	:rtype: void
    """
    return _TNaming.tnaming_Substitute(*args)

def tnaming_SubstituteSShape(*args) -> "Standard_Boolean":
    """
    * Subtitutes shape in source structure
    	:param accesslabel:
    	:type accesslabel: TDF_Label
    	:param From:
    	:type From: TopoDS_Shape
    	:param To:
    	:type To: TopoDS_Shape
    	:rtype: bool
    """
    return _TNaming.tnaming_SubstituteSShape(*args)

def tnaming_Transform(*args) -> "void":
    """
    * Application de la transformation sur les shapes du label et de ses sous labels. Warning: le remplacement du shape est fait dans tous les attributs qui le contiennent meme si ceux ci ne sont pas associees a des sous-labels de <Label>.
    	:param label:
    	:type label: TDF_Label
    	:param aTransformation:
    	:type aTransformation: gp_Trsf
    	:rtype: void
    """
    return _TNaming.tnaming_Transform(*args)

def tnaming_Update(*args) -> "void":
    """
    * Mise a jour des shapes du label et de ses fils en tenant compte des substitutions decrite par mapOldNew. //! Warning: le remplacement du shape est fait dans tous les attributs qui le contiennent meme si ceux ci ne sont pas associees a des sous-labels de <Label>.
    	:param label:
    	:type label: TDF_Label
    	:param mapOldNew:
    	:type mapOldNew: TopTools_DataMapOfShapeShape
    	:rtype: void
    """
    return _TNaming.tnaming_Update(*args)

class TNaming_Builder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Delete(self, *args) -> "void":
        """
        * Records the shape oldShape which was deleted from the current label. As an example, consider the case of a face removed by a Boolean operation.
        	:param oldShape:
        	:type oldShape: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_Builder_Delete(self, *args)


    def Generated(self, *args) -> "void":
        """
        * Records the shape newShape which was generated during a topological construction. As an example, consider the case of a face generated in construction of a box.
        	:param newShape:
        	:type newShape: TopoDS_Shape
        	:rtype: None
        * Records the shape newShape which was generated from the shape oldShape during a topological construction. As an example, consider the case of a face generated from an edge in construction of a prism.
        	:param oldShape:
        	:type oldShape: TopoDS_Shape
        	:param newShape:
        	:type newShape: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_Builder_Generated(self, *args)


    def Modify(self, *args) -> "void":
        """
        * Records the shape newShape which is a modification of the shape oldShape. As an example, consider the case of a face split or merged in a Boolean operation.
        	:param oldShape:
        	:type oldShape: TopoDS_Shape
        	:param newShape:
        	:type newShape: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_Builder_Modify(self, *args)


    def NamedShape(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """
        * Returns the NamedShape which has been built or is under construction.
        	:rtype: opencascade::handle<TNaming_NamedShape>
        """
        return _TNaming.TNaming_Builder_NamedShape(self, *args)


    def Select(self, *args) -> "void":
        """
        * Add a Shape to the current label , This Shape is unmodified. Used for example to define a set of shapes under a label.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param inShape:
        	:type inShape: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_Builder_Select(self, *args)


    def __init__(self, *args):
        """
        * Create an Builder. Warning: Before Addition copies the current Value, and clear
        	:param aLabel:
        	:type aLabel: TDF_Label
        	:rtype: None
        """
        _TNaming.TNaming_Builder_swiginit(self, _TNaming.new_TNaming_Builder(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_Builder
TNaming_Builder.Delete = new_instancemethod(_TNaming.TNaming_Builder_Delete, None, TNaming_Builder)
TNaming_Builder.Generated = new_instancemethod(_TNaming.TNaming_Builder_Generated, None, TNaming_Builder)
TNaming_Builder.Modify = new_instancemethod(_TNaming.TNaming_Builder_Modify, None, TNaming_Builder)
TNaming_Builder.NamedShape = new_instancemethod(_TNaming.TNaming_Builder_NamedShape, None, TNaming_Builder)
TNaming_Builder.Select = new_instancemethod(_TNaming.TNaming_Builder_Select, None, TNaming_Builder)
TNaming_Builder_swigregister = _TNaming.TNaming_Builder_swigregister
TNaming_Builder_swigregister(TNaming_Builder)

class TNaming_CopyShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CopyTool(*args) -> "void":
        """
        * Makes copy a set of shape(s), using the aMap
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aMap:
        	:type aMap: TColStd_IndexedDataMapOfTransientTransient
        	:param aResult:
        	:type aResult: TopoDS_Shape
        	:rtype: void
        """
        return _TNaming.TNaming_CopyShape_CopyTool(*args)

    CopyTool = staticmethod(CopyTool)

    def Translate(*args) -> "TopLoc_Location":
        """
        * Translates a Transient shape(s) to Transient
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aMap:
        	:type aMap: TColStd_IndexedDataMapOfTransientTransient
        	:param aResult:
        	:type aResult: TopoDS_Shape
        	:param TrTool:
        	:type TrTool: TNaming_TranslateTool
        	:rtype: void
        * Translates a Topological Location to an other Top. Location
        	:param L:
        	:type L: TopLoc_Location
        	:param aMap:
        	:type aMap: TColStd_IndexedDataMapOfTransientTransient
        	:rtype: TopLoc_Location
        """
        return _TNaming.TNaming_CopyShape_Translate(*args)

    Translate = staticmethod(Translate)

    __repr__ = _dumps_object


    def __init__(self):
        _TNaming.TNaming_CopyShape_swiginit(self, _TNaming.new_TNaming_CopyShape())
    __swig_destroy__ = _TNaming.delete_TNaming_CopyShape
TNaming_CopyShape_swigregister = _TNaming.TNaming_CopyShape_swigregister
TNaming_CopyShape_swigregister(TNaming_CopyShape)

def TNaming_CopyShape_CopyTool(*args) -> "void":
    """
    * Makes copy a set of shape(s), using the aMap
    	:param aShape:
    	:type aShape: TopoDS_Shape
    	:param aMap:
    	:type aMap: TColStd_IndexedDataMapOfTransientTransient
    	:param aResult:
    	:type aResult: TopoDS_Shape
    	:rtype: void
    """
    return _TNaming.TNaming_CopyShape_CopyTool(*args)

def TNaming_CopyShape_Translate(*args) -> "TopLoc_Location":
    """
    * Translates a Transient shape(s) to Transient
    	:param aShape:
    	:type aShape: TopoDS_Shape
    	:param aMap:
    	:type aMap: TColStd_IndexedDataMapOfTransientTransient
    	:param aResult:
    	:type aResult: TopoDS_Shape
    	:param TrTool:
    	:type TrTool: TNaming_TranslateTool
    	:rtype: void
    * Translates a Topological Location to an other Top. Location
    	:param L:
    	:type L: TopLoc_Location
    	:param aMap:
    	:type aMap: TColStd_IndexedDataMapOfTransientTransient
    	:rtype: TopLoc_Location
    """
    return _TNaming.TNaming_CopyShape_Translate(*args)

class TNaming_DeltaOnModification(OCC.Core.TDF.TDF_DeltaOnModification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a TDF_DeltaOnModification.
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:rtype: None
        """
        _TNaming.TNaming_DeltaOnModification_swiginit(self, _TNaming.new_TNaming_DeltaOnModification(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TNaming_DeltaOnModification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_DeltaOnModification
TNaming_DeltaOnModification_swigregister = _TNaming.TNaming_DeltaOnModification_swigregister
TNaming_DeltaOnModification_swigregister(TNaming_DeltaOnModification)

class TNaming_DeltaOnRemoval(OCC.Core.TDF.TDF_DeltaOnRemoval):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a TDF_DeltaOnModification.
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:rtype: None
        """
        _TNaming.TNaming_DeltaOnRemoval_swiginit(self, _TNaming.new_TNaming_DeltaOnRemoval(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TNaming_DeltaOnRemoval_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_DeltaOnRemoval
TNaming_DeltaOnRemoval_swigregister = _TNaming.TNaming_DeltaOnRemoval_swigregister
TNaming_DeltaOnRemoval_swigregister(TNaming_DeltaOnRemoval)

class TNaming_Identifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AncestorIdentification(self, *args) -> "void":
        """
        :param Localizer:
        	:type Localizer: TNaming_Localizer
        	:param Context:
        	:type Context: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_Identifier_AncestorIdentification(self, *args)


    def ArgIsFeature(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TNaming.TNaming_Identifier_ArgIsFeature(self, *args)


    def Feature(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """:rtype: opencascade::handle<TNaming_NamedShape>"""
        return _TNaming.TNaming_Identifier_Feature(self, *args)


    def FeatureArg(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """:rtype: opencascade::handle<TNaming_NamedShape>"""
        return _TNaming.TNaming_Identifier_FeatureArg(self, *args)


    def GeneratedIdentification(self, *args) -> "void":
        """
        :param Localizer:
        	:type Localizer: TNaming_Localizer
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:rtype: None
        """
        return _TNaming.TNaming_Identifier_GeneratedIdentification(self, *args)


    def Identification(self, *args) -> "void":
        """
        :param Localizer:
        	:type Localizer: TNaming_Localizer
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:rtype: None
        """
        return _TNaming.TNaming_Identifier_Identification(self, *args)


    def InitArgs(self, *args) -> "void":
        """:rtype: None"""
        return _TNaming.TNaming_Identifier_InitArgs(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TNaming.TNaming_Identifier_IsDone(self, *args)


    def IsFeature(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TNaming.TNaming_Identifier_IsFeature(self, *args)


    def MoreArgs(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TNaming.TNaming_Identifier_MoreArgs(self, *args)


    def NamedShapeOfGeneration(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """:rtype: opencascade::handle<TNaming_NamedShape>"""
        return _TNaming.TNaming_Identifier_NamedShapeOfGeneration(self, *args)


    def NextArg(self, *args) -> "void":
        """:rtype: None"""
        return _TNaming.TNaming_Identifier_NextArg(self, *args)


    def PrimitiveIdentification(self, *args) -> "void":
        """
        :param Localizer:
        	:type Localizer: TNaming_Localizer
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:rtype: None
        """
        return _TNaming.TNaming_Identifier_PrimitiveIdentification(self, *args)


    def ShapeArg(self, *args) -> "TopoDS_Shape":
        """:rtype: TopoDS_Shape"""
        return _TNaming.TNaming_Identifier_ShapeArg(self, *args)


    def ShapeContext(self, *args) -> "TopoDS_Shape":
        """:rtype: TopoDS_Shape"""
        return _TNaming.TNaming_Identifier_ShapeContext(self, *args)


    def __init__(self, *args):
        """
        :param Lab:
        	:type Lab: TDF_Label
        	:param S:
        	:type S: TopoDS_Shape
        	:param Context:
        	:type Context: TopoDS_Shape
        	:param Geom:
        	:type Geom: bool
        	:rtype: None
        :param Lab:
        	:type Lab: TDF_Label
        	:param S:
        	:type S: TopoDS_Shape
        	:param ContextNS:
        	:type ContextNS: TNaming_NamedShape
        	:param Geom:
        	:type Geom: bool
        	:rtype: None
        """
        _TNaming.TNaming_Identifier_swiginit(self, _TNaming.new_TNaming_Identifier(*args))

    def Type(self, *args) -> "TNaming_NameType":
        """:rtype: TNaming_NameType"""
        return _TNaming.TNaming_Identifier_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_Identifier
TNaming_Identifier.AncestorIdentification = new_instancemethod(_TNaming.TNaming_Identifier_AncestorIdentification, None, TNaming_Identifier)
TNaming_Identifier.ArgIsFeature = new_instancemethod(_TNaming.TNaming_Identifier_ArgIsFeature, None, TNaming_Identifier)
TNaming_Identifier.Feature = new_instancemethod(_TNaming.TNaming_Identifier_Feature, None, TNaming_Identifier)
TNaming_Identifier.FeatureArg = new_instancemethod(_TNaming.TNaming_Identifier_FeatureArg, None, TNaming_Identifier)
TNaming_Identifier.GeneratedIdentification = new_instancemethod(_TNaming.TNaming_Identifier_GeneratedIdentification, None, TNaming_Identifier)
TNaming_Identifier.Identification = new_instancemethod(_TNaming.TNaming_Identifier_Identification, None, TNaming_Identifier)
TNaming_Identifier.InitArgs = new_instancemethod(_TNaming.TNaming_Identifier_InitArgs, None, TNaming_Identifier)
TNaming_Identifier.IsDone = new_instancemethod(_TNaming.TNaming_Identifier_IsDone, None, TNaming_Identifier)
TNaming_Identifier.IsFeature = new_instancemethod(_TNaming.TNaming_Identifier_IsFeature, None, TNaming_Identifier)
TNaming_Identifier.MoreArgs = new_instancemethod(_TNaming.TNaming_Identifier_MoreArgs, None, TNaming_Identifier)
TNaming_Identifier.NamedShapeOfGeneration = new_instancemethod(_TNaming.TNaming_Identifier_NamedShapeOfGeneration, None, TNaming_Identifier)
TNaming_Identifier.NextArg = new_instancemethod(_TNaming.TNaming_Identifier_NextArg, None, TNaming_Identifier)
TNaming_Identifier.PrimitiveIdentification = new_instancemethod(_TNaming.TNaming_Identifier_PrimitiveIdentification, None, TNaming_Identifier)
TNaming_Identifier.ShapeArg = new_instancemethod(_TNaming.TNaming_Identifier_ShapeArg, None, TNaming_Identifier)
TNaming_Identifier.ShapeContext = new_instancemethod(_TNaming.TNaming_Identifier_ShapeContext, None, TNaming_Identifier)
TNaming_Identifier.Type = new_instancemethod(_TNaming.TNaming_Identifier_Type, None, TNaming_Identifier)
TNaming_Identifier_swigregister = _TNaming.TNaming_Identifier_swigregister
TNaming_Identifier_swigregister(TNaming_Identifier)

class TNaming_Iterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Evolution(self, *args) -> "TNaming_Evolution":
        """:rtype: TNaming_Evolution"""
        return _TNaming.TNaming_Iterator_Evolution(self, *args)


    def IsModification(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the new shape is a modification (split, fuse,etc...) of the old shape.
        	:rtype: bool
        """
        return _TNaming.TNaming_Iterator_IsModification(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a current Item in the iteration.
        	:rtype: bool
        """
        return _TNaming.TNaming_Iterator_More(self, *args)


    def NewShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the new shape in this iterator object.
        	:rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_Iterator_NewShape(self, *args)


    def Next(self, *args) -> "void":
        """
        * Moves the iteration to the next Item
        	:rtype: None
        """
        return _TNaming.TNaming_Iterator_Next(self, *args)


    def OldShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the old shape in this iterator object. This shape can be a null one.
        	:rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_Iterator_OldShape(self, *args)


    def __init__(self, *args):
        """
        * Iterates on all the history records in <anAtt>.
        	:param anAtt:
        	:type anAtt: TNaming_NamedShape
        	:rtype: None
        * Iterates on all the history records in the current transaction
        	:param aLabel:
        	:type aLabel: TDF_Label
        	:rtype: None
        * Iterates on all the history records in the transaction <aTrans>
        	:param aLabel:
        	:type aLabel: TDF_Label
        	:param aTrans:
        	:type aTrans: int
        	:rtype: None
        """
        _TNaming.TNaming_Iterator_swiginit(self, _TNaming.new_TNaming_Iterator(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_Iterator
TNaming_Iterator.Evolution = new_instancemethod(_TNaming.TNaming_Iterator_Evolution, None, TNaming_Iterator)
TNaming_Iterator.IsModification = new_instancemethod(_TNaming.TNaming_Iterator_IsModification, None, TNaming_Iterator)
TNaming_Iterator.More = new_instancemethod(_TNaming.TNaming_Iterator_More, None, TNaming_Iterator)
TNaming_Iterator.NewShape = new_instancemethod(_TNaming.TNaming_Iterator_NewShape, None, TNaming_Iterator)
TNaming_Iterator.Next = new_instancemethod(_TNaming.TNaming_Iterator_Next, None, TNaming_Iterator)
TNaming_Iterator.OldShape = new_instancemethod(_TNaming.TNaming_Iterator_OldShape, None, TNaming_Iterator)
TNaming_Iterator_swigregister = _TNaming.TNaming_Iterator_swigregister
TNaming_Iterator_swigregister(TNaming_Iterator)

class TNaming_IteratorOnShapesSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(self, *args) -> "void":
        """
        * Initialize the iteration
        	:param S:
        	:type S: TNaming_ShapesSet
        	:rtype: None
        """
        return _TNaming.TNaming_IteratorOnShapesSet_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a current Item in the iteration.
        	:rtype: bool
        """
        return _TNaming.TNaming_IteratorOnShapesSet_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Move to the next Item
        	:rtype: None
        """
        return _TNaming.TNaming_IteratorOnShapesSet_Next(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: TNaming_ShapesSet
        	:rtype: None
        """
        _TNaming.TNaming_IteratorOnShapesSet_swiginit(self, _TNaming.new_TNaming_IteratorOnShapesSet(*args))

    def Value(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _TNaming.TNaming_IteratorOnShapesSet_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_IteratorOnShapesSet
TNaming_IteratorOnShapesSet.Init = new_instancemethod(_TNaming.TNaming_IteratorOnShapesSet_Init, None, TNaming_IteratorOnShapesSet)
TNaming_IteratorOnShapesSet.More = new_instancemethod(_TNaming.TNaming_IteratorOnShapesSet_More, None, TNaming_IteratorOnShapesSet)
TNaming_IteratorOnShapesSet.Next = new_instancemethod(_TNaming.TNaming_IteratorOnShapesSet_Next, None, TNaming_IteratorOnShapesSet)
TNaming_IteratorOnShapesSet.Value = new_instancemethod(_TNaming.TNaming_IteratorOnShapesSet_Value, None, TNaming_IteratorOnShapesSet)
TNaming_IteratorOnShapesSet_swigregister = _TNaming.TNaming_IteratorOnShapesSet_swigregister
TNaming_IteratorOnShapesSet_swigregister(TNaming_IteratorOnShapesSet)

class TNaming_Localizer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Ancestors(self, *args) -> "TopTools_IndexedDataMapOfShapeListOfShape const &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param Type:
        	:type Type: TopAbs_ShapeEnum
        	:rtype: TopTools_IndexedDataMapOfShapeListOfShape
        """
        return _TNaming.TNaming_Localizer_Ancestors(self, *args)


    def Backward(self, *args) -> "void":
        """
        :param NS:
        	:type NS: TNaming_NamedShape
        	:param S:
        	:type S: TopoDS_Shape
        	:param Primitives:
        	:type Primitives: TNaming_MapOfNamedShape
        	:param ValidShapes:
        	:type ValidShapes: TopTools_MapOfShape
        	:rtype: None
        """
        return _TNaming.TNaming_Localizer_Backward(self, *args)


    def FindFeaturesInAncestors(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param In:
        	:type In: TopoDS_Shape
        	:param AncInFeatures:
        	:type AncInFeatures: TopTools_MapOfShape
        	:rtype: None
        """
        return _TNaming.TNaming_Localizer_FindFeaturesInAncestors(self, *args)


    def FindGenerator(*args) -> "void":
        """
        :param NS:
        	:type NS: TNaming_NamedShape
        	:param S:
        	:type S: TopoDS_Shape
        	:param theListOfGenerators:
        	:type theListOfGenerators: TopTools_ListOfShape
        	:rtype: void
        """
        return _TNaming.TNaming_Localizer_FindGenerator(*args)

    FindGenerator = staticmethod(FindGenerator)

    def FindNeighbourg(self, *args) -> "void":
        """
        :param Cont:
        	:type Cont: TopoDS_Shape
        	:param S:
        	:type S: TopoDS_Shape
        	:param Neighbourg:
        	:type Neighbourg: TopTools_MapOfShape
        	:rtype: None
        """
        return _TNaming.TNaming_Localizer_FindNeighbourg(self, *args)


    def FindShapeContext(*args) -> "void":
        """
        * Finds context of the shape <S>.
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:param theS:
        	:type theS: TopoDS_Shape
        	:param theSC:
        	:type theSC: TopoDS_Shape
        	:rtype: void
        """
        return _TNaming.TNaming_Localizer_FindShapeContext(*args)

    FindShapeContext = staticmethod(FindShapeContext)

    def GoBack(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param Lab:
        	:type Lab: TDF_Label
        	:param Evol:
        	:type Evol: TNaming_Evolution
        	:param OldS:
        	:type OldS: TopTools_ListOfShape
        	:param OldLab:
        	:type OldLab: TNaming_ListOfNamedShape
        	:rtype: None
        """
        return _TNaming.TNaming_Localizer_GoBack(self, *args)


    def Init(self, *args) -> "void":
        """
        :param US:
        	:type US: TNaming_UsedShapes
        	:param CurTrans:
        	:type CurTrans: int
        	:rtype: None
        """
        return _TNaming.TNaming_Localizer_Init(self, *args)


    def IsNew(*args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:rtype: bool
        """
        return _TNaming.TNaming_Localizer_IsNew(*args)

    IsNew = staticmethod(IsNew)

    def SubShapes(self, *args) -> "TopTools_MapOfShape const &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param Type:
        	:type Type: TopAbs_ShapeEnum
        	:rtype: TopTools_MapOfShape
        """
        return _TNaming.TNaming_Localizer_SubShapes(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TNaming.TNaming_Localizer_swiginit(self, _TNaming.new_TNaming_Localizer(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_Localizer
TNaming_Localizer.Ancestors = new_instancemethod(_TNaming.TNaming_Localizer_Ancestors, None, TNaming_Localizer)
TNaming_Localizer.Backward = new_instancemethod(_TNaming.TNaming_Localizer_Backward, None, TNaming_Localizer)
TNaming_Localizer.FindFeaturesInAncestors = new_instancemethod(_TNaming.TNaming_Localizer_FindFeaturesInAncestors, None, TNaming_Localizer)
TNaming_Localizer.FindNeighbourg = new_instancemethod(_TNaming.TNaming_Localizer_FindNeighbourg, None, TNaming_Localizer)
TNaming_Localizer.GoBack = new_instancemethod(_TNaming.TNaming_Localizer_GoBack, None, TNaming_Localizer)
TNaming_Localizer.Init = new_instancemethod(_TNaming.TNaming_Localizer_Init, None, TNaming_Localizer)
TNaming_Localizer.SubShapes = new_instancemethod(_TNaming.TNaming_Localizer_SubShapes, None, TNaming_Localizer)
TNaming_Localizer_swigregister = _TNaming.TNaming_Localizer_swigregister
TNaming_Localizer_swigregister(TNaming_Localizer)

def TNaming_Localizer_FindGenerator(*args) -> "void":
    """
    :param NS:
    	:type NS: TNaming_NamedShape
    	:param S:
    	:type S: TopoDS_Shape
    	:param theListOfGenerators:
    	:type theListOfGenerators: TopTools_ListOfShape
    	:rtype: void
    """
    return _TNaming.TNaming_Localizer_FindGenerator(*args)

def TNaming_Localizer_FindShapeContext(*args) -> "void":
    """
    * Finds context of the shape <S>.
    	:param NS:
    	:type NS: TNaming_NamedShape
    	:param theS:
    	:type theS: TopoDS_Shape
    	:param theSC:
    	:type theSC: TopoDS_Shape
    	:rtype: void
    """
    return _TNaming.TNaming_Localizer_FindShapeContext(*args)

def TNaming_Localizer_IsNew(*args) -> "Standard_Boolean":
    """
    :param S:
    	:type S: TopoDS_Shape
    	:param NS:
    	:type NS: TNaming_NamedShape
    	:rtype: bool
    """
    return _TNaming.TNaming_Localizer_IsNew(*args)

class TNaming_Name(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Append(self, *args) -> "void":
        """
        :param arg:
        	:type arg: TNaming_NamedShape
        	:rtype: None
        """
        return _TNaming.TNaming_Name_Append(self, *args)


    def Arguments(self, *args) -> "TNaming_ListOfNamedShape const &":
        """:rtype: TNaming_ListOfNamedShape"""
        return _TNaming.TNaming_Name_Arguments(self, *args)


    def ContextLabel(self, *args) -> "TDF_Label const &":
        """
        :param theLab:
        	:type theLab: TDF_Label
        	:rtype: None
        :rtype: TDF_Label
        """
        return _TNaming.TNaming_Name_ContextLabel(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        :param I:
        	:type I: int
        	:rtype: None
        :rtype: int
        """
        return _TNaming.TNaming_Name_Index(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        :param theOrientation:
        	:type theOrientation: TopAbs_Orientation
        	:rtype: None
        :rtype: TopAbs_Orientation
        """
        return _TNaming.TNaming_Name_Orientation(self, *args)


    def Paste(self, *args) -> "void":
        """
        :param into:
        	:type into: TNaming_Name
        	:param RT:
        	:type RT: TDF_RelocationTable
        	:rtype: None
        """
        return _TNaming.TNaming_Name_Paste(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        :param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        :rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_Name_Shape(self, *args)


    def ShapeType(self, *args) -> "TopAbs_ShapeEnum":
        """
        :param aType:
        	:type aType: TopAbs_ShapeEnum
        	:rtype: None
        :rtype: TopAbs_ShapeEnum
        """
        return _TNaming.TNaming_Name_ShapeType(self, *args)


    def Solve(self, *args) -> "Standard_Boolean":
        """
        :param aLab:
        	:type aLab: TDF_Label
        	:param Valid:
        	:type Valid: TDF_LabelMap
        	:rtype: bool
        """
        return _TNaming.TNaming_Name_Solve(self, *args)


    def StopNamedShape(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """
        :param arg:
        	:type arg: TNaming_NamedShape
        	:rtype: None
        :rtype: opencascade::handle<TNaming_NamedShape>
        """
        return _TNaming.TNaming_Name_StopNamedShape(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TNaming.TNaming_Name_swiginit(self, _TNaming.new_TNaming_Name(*args))

    def Type(self, *args) -> "TNaming_NameType":
        """
        :param aType:
        	:type aType: TNaming_NameType
        	:rtype: None
        :rtype: TNaming_NameType
        """
        return _TNaming.TNaming_Name_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_Name
TNaming_Name.Append = new_instancemethod(_TNaming.TNaming_Name_Append, None, TNaming_Name)
TNaming_Name.Arguments = new_instancemethod(_TNaming.TNaming_Name_Arguments, None, TNaming_Name)
TNaming_Name.ContextLabel = new_instancemethod(_TNaming.TNaming_Name_ContextLabel, None, TNaming_Name)
TNaming_Name.Index = new_instancemethod(_TNaming.TNaming_Name_Index, None, TNaming_Name)
TNaming_Name.Orientation = new_instancemethod(_TNaming.TNaming_Name_Orientation, None, TNaming_Name)
TNaming_Name.Paste = new_instancemethod(_TNaming.TNaming_Name_Paste, None, TNaming_Name)
TNaming_Name.Shape = new_instancemethod(_TNaming.TNaming_Name_Shape, None, TNaming_Name)
TNaming_Name.ShapeType = new_instancemethod(_TNaming.TNaming_Name_ShapeType, None, TNaming_Name)
TNaming_Name.Solve = new_instancemethod(_TNaming.TNaming_Name_Solve, None, TNaming_Name)
TNaming_Name.StopNamedShape = new_instancemethod(_TNaming.TNaming_Name_StopNamedShape, None, TNaming_Name)
TNaming_Name.Type = new_instancemethod(_TNaming.TNaming_Name_Type, None, TNaming_Name)
TNaming_Name_swigregister = _TNaming.TNaming_Name_swigregister
TNaming_Name_swigregister(TNaming_Name)

class TNaming_NamedShape(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _TNaming.TNaming_NamedShape_Clear(self, *args)


    def DeltaOnModification(self, *args) -> "void":
        """
        * Makes a DeltaOnModification between <self> and <anOldAttribute.
        	:param anOldAttribute:
        	:type anOldAttribute: TDF_Attribute
        	:rtype: opencascade::handle<TDF_DeltaOnModification>
        * Applies a DeltaOnModification to <self>.
        	:param aDelta:
        	:type aDelta: TDF_DeltaOnModification
        	:rtype: void
        """
        return _TNaming.TNaming_NamedShape_DeltaOnModification(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TNaming_NamedShape self) -> std::string"""
        return _TNaming.TNaming_NamedShape_DumpToString(self)


    def Evolution(self, *args) -> "TNaming_Evolution":
        """
        * Returns the Evolution of the attribute.
        	:rtype: TNaming_Evolution
        """
        return _TNaming.TNaming_NamedShape_Evolution(self, *args)


    def Get(self, *args) -> "TopoDS_Shape":
        """
        * Returns the shapes contained in <NS>. Returns a null shape if IsEmpty.
        	:rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_NamedShape_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * class method ============ Returns the GUID for named shapes.
        	:rtype: Standard_GUID
        """
        return _TNaming.TNaming_NamedShape_GetID(*args)

    GetID = staticmethod(GetID)

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TNaming.TNaming_NamedShape_IsEmpty(self, *args)


    def SetVersion(self, *args) -> "void":
        """
        * Set the Version of the attribute.
        	:param version:
        	:type version: int
        	:rtype: None
        """
        return _TNaming.TNaming_NamedShape_SetVersion(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TNaming.TNaming_NamedShape_swiginit(self, _TNaming.new_TNaming_NamedShape(*args))

    def Version(self, *args) -> "Standard_Integer":
        """
        * Returns the Version of the attribute.
        	:rtype: int
        """
        return _TNaming.TNaming_NamedShape_Version(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TNaming_NamedShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_NamedShape
TNaming_NamedShape.Clear = new_instancemethod(_TNaming.TNaming_NamedShape_Clear, None, TNaming_NamedShape)
TNaming_NamedShape.DeltaOnModification = new_instancemethod(_TNaming.TNaming_NamedShape_DeltaOnModification, None, TNaming_NamedShape)
TNaming_NamedShape.DumpToString = new_instancemethod(_TNaming.TNaming_NamedShape_DumpToString, None, TNaming_NamedShape)
TNaming_NamedShape.Evolution = new_instancemethod(_TNaming.TNaming_NamedShape_Evolution, None, TNaming_NamedShape)
TNaming_NamedShape.Get = new_instancemethod(_TNaming.TNaming_NamedShape_Get, None, TNaming_NamedShape)
TNaming_NamedShape.IsEmpty = new_instancemethod(_TNaming.TNaming_NamedShape_IsEmpty, None, TNaming_NamedShape)
TNaming_NamedShape.SetVersion = new_instancemethod(_TNaming.TNaming_NamedShape_SetVersion, None, TNaming_NamedShape)
TNaming_NamedShape.Version = new_instancemethod(_TNaming.TNaming_NamedShape_Version, None, TNaming_NamedShape)
TNaming_NamedShape_swigregister = _TNaming.TNaming_NamedShape_swigregister
TNaming_NamedShape_swigregister(TNaming_NamedShape)

def TNaming_NamedShape_GetID(*args) -> "Standard_GUID const &":
    """
    * class method ============ Returns the GUID for named shapes.
    	:rtype: Standard_GUID
    """
    return _TNaming.TNaming_NamedShape_GetID(*args)

class TNaming_Naming(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeName(self, *args) -> "TNaming_Name &":
        """:rtype: TNaming_Name"""
        return _TNaming.TNaming_Naming_ChangeName(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TNaming_Naming self) -> std::string"""
        return _TNaming.TNaming_Naming_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * following code from TDesignStd ==============================
        	:rtype: Standard_GUID
        """
        return _TNaming.TNaming_Naming_GetID(*args)

    GetID = staticmethod(GetID)

    def GetName(self, *args) -> "TNaming_Name const &":
        """:rtype: TNaming_Name"""
        return _TNaming.TNaming_Naming_GetName(self, *args)


    def Insert(*args) -> "opencascade::handle< TNaming_Naming >":
        """
        :param under:
        	:type under: TDF_Label
        	:rtype: opencascade::handle<TNaming_Naming>
        """
        return _TNaming.TNaming_Naming_Insert(*args)

    Insert = staticmethod(Insert)

    def IsDefined(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TNaming.TNaming_Naming_IsDefined(self, *args)


    def Name(*args) -> "opencascade::handle< TNaming_NamedShape >":
        """
        * Creates a Namimg attribute at label <where> to identify the shape <Selection>. Geometry is Standard_True if we are only interested by the underlying geometry (e.g. setting a constraint). <Context> is used to find neighbours of <S> when required by the naming. If KeepOrientation is True the Selection orientation is taken into account. BNproblem == True points out that Context sub-shapes in DF have orientation differences with Context shape itself. instance method ===============
        	:param where:
        	:type where: TDF_Label
        	:param Selection:
        	:type Selection: TopoDS_Shape
        	:param Context:
        	:type Context: TopoDS_Shape
        	:param Geometry: default value is Standard_False
        	:type Geometry: bool
        	:param KeepOrientation: default value is Standard_False
        	:type KeepOrientation: bool
        	:param BNproblem: default value is Standard_False
        	:type BNproblem: bool
        	:rtype: opencascade::handle<TNaming_NamedShape>
        """
        return _TNaming.TNaming_Naming_Name(*args)

    Name = staticmethod(Name)

    def Regenerate(self, *args) -> "Standard_Boolean":
        """
        * regenerate only the Name associated to me
        	:param scope:
        	:type scope: TDF_LabelMap
        	:rtype: bool
        """
        return _TNaming.TNaming_Naming_Regenerate(self, *args)


    def Solve(self, *args) -> "Standard_Boolean":
        """
        * Regenerate recursively the whole name with scope. If scope is empty it means that all the labels of the framework are valid.
        	:param scope:
        	:type scope: TDF_LabelMap
        	:rtype: bool
        """
        return _TNaming.TNaming_Naming_Solve(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TNaming.TNaming_Naming_swiginit(self, _TNaming.new_TNaming_Naming(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TNaming_Naming_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_Naming
TNaming_Naming.ChangeName = new_instancemethod(_TNaming.TNaming_Naming_ChangeName, None, TNaming_Naming)
TNaming_Naming.DumpToString = new_instancemethod(_TNaming.TNaming_Naming_DumpToString, None, TNaming_Naming)
TNaming_Naming.GetName = new_instancemethod(_TNaming.TNaming_Naming_GetName, None, TNaming_Naming)
TNaming_Naming.IsDefined = new_instancemethod(_TNaming.TNaming_Naming_IsDefined, None, TNaming_Naming)
TNaming_Naming.Regenerate = new_instancemethod(_TNaming.TNaming_Naming_Regenerate, None, TNaming_Naming)
TNaming_Naming.Solve = new_instancemethod(_TNaming.TNaming_Naming_Solve, None, TNaming_Naming)
TNaming_Naming_swigregister = _TNaming.TNaming_Naming_swigregister
TNaming_Naming_swigregister(TNaming_Naming)

def TNaming_Naming_GetID(*args) -> "Standard_GUID const &":
    """
    * following code from TDesignStd ==============================
    	:rtype: Standard_GUID
    """
    return _TNaming.TNaming_Naming_GetID(*args)

def TNaming_Naming_Insert(*args) -> "opencascade::handle< TNaming_Naming >":
    """
    :param under:
    	:type under: TDF_Label
    	:rtype: opencascade::handle<TNaming_Naming>
    """
    return _TNaming.TNaming_Naming_Insert(*args)

def TNaming_Naming_Name(*args) -> "opencascade::handle< TNaming_NamedShape >":
    """
    * Creates a Namimg attribute at label <where> to identify the shape <Selection>. Geometry is Standard_True if we are only interested by the underlying geometry (e.g. setting a constraint). <Context> is used to find neighbours of <S> when required by the naming. If KeepOrientation is True the Selection orientation is taken into account. BNproblem == True points out that Context sub-shapes in DF have orientation differences with Context shape itself. instance method ===============
    	:param where:
    	:type where: TDF_Label
    	:param Selection:
    	:type Selection: TopoDS_Shape
    	:param Context:
    	:type Context: TopoDS_Shape
    	:param Geometry: default value is Standard_False
    	:type Geometry: bool
    	:param KeepOrientation: default value is Standard_False
    	:type KeepOrientation: bool
    	:param BNproblem: default value is Standard_False
    	:type BNproblem: bool
    	:rtype: opencascade::handle<TNaming_NamedShape>
    """
    return _TNaming.TNaming_Naming_Name(*args)

class TNaming_NamingTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BuildDescendants(*args) -> "void":
        """
        :param NS:
        	:type NS: TNaming_NamedShape
        	:param Labels:
        	:type Labels: TDF_LabelMap
        	:rtype: void
        """
        return _TNaming.TNaming_NamingTool_BuildDescendants(*args)

    BuildDescendants = staticmethod(BuildDescendants)

    def CurrentShape(*args) -> "void":
        """
        :param Valid:
        	:type Valid: TDF_LabelMap
        	:param Forbiden:
        	:type Forbiden: TDF_LabelMap
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:param MS:
        	:type MS: TopTools_IndexedMapOfShape
        	:rtype: void
        """
        return _TNaming.TNaming_NamingTool_CurrentShape(*args)

    CurrentShape = staticmethod(CurrentShape)

    def CurrentShapeFromShape(*args) -> "void":
        """
        :param Valid:
        	:type Valid: TDF_LabelMap
        	:param Forbiden:
        	:type Forbiden: TDF_LabelMap
        	:param Acces:
        	:type Acces: TDF_Label
        	:param S:
        	:type S: TopoDS_Shape
        	:param MS:
        	:type MS: TopTools_IndexedMapOfShape
        	:rtype: void
        """
        return _TNaming.TNaming_NamingTool_CurrentShapeFromShape(*args)

    CurrentShapeFromShape = staticmethod(CurrentShapeFromShape)

    __repr__ = _dumps_object


    def __init__(self):
        _TNaming.TNaming_NamingTool_swiginit(self, _TNaming.new_TNaming_NamingTool())
    __swig_destroy__ = _TNaming.delete_TNaming_NamingTool
TNaming_NamingTool_swigregister = _TNaming.TNaming_NamingTool_swigregister
TNaming_NamingTool_swigregister(TNaming_NamingTool)

def TNaming_NamingTool_BuildDescendants(*args) -> "void":
    """
    :param NS:
    	:type NS: TNaming_NamedShape
    	:param Labels:
    	:type Labels: TDF_LabelMap
    	:rtype: void
    """
    return _TNaming.TNaming_NamingTool_BuildDescendants(*args)

def TNaming_NamingTool_CurrentShape(*args) -> "void":
    """
    :param Valid:
    	:type Valid: TDF_LabelMap
    	:param Forbiden:
    	:type Forbiden: TDF_LabelMap
    	:param NS:
    	:type NS: TNaming_NamedShape
    	:param MS:
    	:type MS: TopTools_IndexedMapOfShape
    	:rtype: void
    """
    return _TNaming.TNaming_NamingTool_CurrentShape(*args)

def TNaming_NamingTool_CurrentShapeFromShape(*args) -> "void":
    """
    :param Valid:
    	:type Valid: TDF_LabelMap
    	:param Forbiden:
    	:type Forbiden: TDF_LabelMap
    	:param Acces:
    	:type Acces: TDF_Label
    	:param S:
    	:type S: TopoDS_Shape
    	:param MS:
    	:type MS: TopTools_IndexedMapOfShape
    	:rtype: void
    """
    return _TNaming.TNaming_NamingTool_CurrentShapeFromShape(*args)

class TNaming_NewShapeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsModification(self, *args) -> "Standard_Boolean":
        """
        * True if the new shape is a modification (split, fuse,etc...) of the old shape.
        	:rtype: bool
        """
        return _TNaming.TNaming_NewShapeIterator_IsModification(self, *args)


    def Label(self, *args) -> "TDF_Label":
        """:rtype: TDF_Label"""
        return _TNaming.TNaming_NewShapeIterator_Label(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TNaming.TNaming_NewShapeIterator_More(self, *args)


    def NamedShape(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """:rtype: opencascade::handle<TNaming_NamedShape>"""
        return _TNaming.TNaming_NewShapeIterator_NamedShape(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _TNaming.TNaming_NewShapeIterator_Next(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * Warning! Can be a Null Shape if a descendant is deleted.
        	:rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_NewShapeIterator_Shape(self, *args)


    def __init__(self, *args):
        """
        :param aShape:
        	:type aShape: TopoDS_Shape
        	:param Transaction:
        	:type Transaction: int
        	:param access:
        	:type access: TDF_Label
        	:rtype: None
        :param aShape:
        	:type aShape: TopoDS_Shape
        	:param access:
        	:type access: TDF_Label
        	:rtype: None
        * Iterates from the current Shape in <anIterator>
        	:param anIterator:
        	:type anIterator: TNaming_NewShapeIterator
        	:rtype: None
        * Iterates from the current Shape in <anIterator>
        	:param anIterator:
        	:type anIterator: TNaming_Iterator
        	:rtype: None
        """
        _TNaming.TNaming_NewShapeIterator_swiginit(self, _TNaming.new_TNaming_NewShapeIterator(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_NewShapeIterator
TNaming_NewShapeIterator.IsModification = new_instancemethod(_TNaming.TNaming_NewShapeIterator_IsModification, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator.Label = new_instancemethod(_TNaming.TNaming_NewShapeIterator_Label, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator.More = new_instancemethod(_TNaming.TNaming_NewShapeIterator_More, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator.NamedShape = new_instancemethod(_TNaming.TNaming_NewShapeIterator_NamedShape, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator.Next = new_instancemethod(_TNaming.TNaming_NewShapeIterator_Next, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator.Shape = new_instancemethod(_TNaming.TNaming_NewShapeIterator_Shape, None, TNaming_NewShapeIterator)
TNaming_NewShapeIterator_swigregister = _TNaming.TNaming_NewShapeIterator_swigregister
TNaming_NewShapeIterator_swigregister(TNaming_NewShapeIterator)

class TNaming_OldShapeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsModification(self, *args) -> "Standard_Boolean":
        """
        * True if the new shape is a modification (split, fuse,etc...) of the old shape.
        	:rtype: bool
        """
        return _TNaming.TNaming_OldShapeIterator_IsModification(self, *args)


    def Label(self, *args) -> "TDF_Label":
        """:rtype: TDF_Label"""
        return _TNaming.TNaming_OldShapeIterator_Label(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TNaming.TNaming_OldShapeIterator_More(self, *args)


    def NamedShape(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """:rtype: opencascade::handle<TNaming_NamedShape>"""
        return _TNaming.TNaming_OldShapeIterator_NamedShape(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _TNaming.TNaming_OldShapeIterator_Next(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _TNaming.TNaming_OldShapeIterator_Shape(self, *args)


    def __init__(self, *args):
        """
        :param aShape:
        	:type aShape: TopoDS_Shape
        	:param Transaction:
        	:type Transaction: int
        	:param access:
        	:type access: TDF_Label
        	:rtype: None
        :param aShape:
        	:type aShape: TopoDS_Shape
        	:param access:
        	:type access: TDF_Label
        	:rtype: None
        * Iterates from the current Shape in <anIterator>
        	:param anIterator:
        	:type anIterator: TNaming_OldShapeIterator
        	:rtype: None
        * Iterates from the current Shape in <anIterator>
        	:param anIterator:
        	:type anIterator: TNaming_Iterator
        	:rtype: None
        """
        _TNaming.TNaming_OldShapeIterator_swiginit(self, _TNaming.new_TNaming_OldShapeIterator(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_OldShapeIterator
TNaming_OldShapeIterator.IsModification = new_instancemethod(_TNaming.TNaming_OldShapeIterator_IsModification, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator.Label = new_instancemethod(_TNaming.TNaming_OldShapeIterator_Label, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator.More = new_instancemethod(_TNaming.TNaming_OldShapeIterator_More, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator.NamedShape = new_instancemethod(_TNaming.TNaming_OldShapeIterator_NamedShape, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator.Next = new_instancemethod(_TNaming.TNaming_OldShapeIterator_Next, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator.Shape = new_instancemethod(_TNaming.TNaming_OldShapeIterator_Shape, None, TNaming_OldShapeIterator)
TNaming_OldShapeIterator_swigregister = _TNaming.TNaming_OldShapeIterator_swigregister
TNaming_OldShapeIterator_swigregister(TNaming_OldShapeIterator)

class TNaming_RefShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstUse(self, *args) -> "TNaming_PtrNode":
        """
        :param aPtr:
        	:type aPtr: TNaming_PtrNode
        	:rtype: None
        :rtype: TNaming_PtrNode
        """
        return _TNaming.TNaming_RefShape_FirstUse(self, *args)


    def Label(self, *args) -> "TDF_Label":
        """:rtype: TDF_Label"""
        return _TNaming.TNaming_RefShape_Label(self, *args)


    def NamedShape(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """:rtype: opencascade::handle<TNaming_NamedShape>"""
        return _TNaming.TNaming_RefShape_NamedShape(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        :rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_RefShape_Shape(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _TNaming.TNaming_RefShape_swiginit(self, _TNaming.new_TNaming_RefShape(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_RefShape
TNaming_RefShape.FirstUse = new_instancemethod(_TNaming.TNaming_RefShape_FirstUse, None, TNaming_RefShape)
TNaming_RefShape.Label = new_instancemethod(_TNaming.TNaming_RefShape_Label, None, TNaming_RefShape)
TNaming_RefShape.NamedShape = new_instancemethod(_TNaming.TNaming_RefShape_NamedShape, None, TNaming_RefShape)
TNaming_RefShape.Shape = new_instancemethod(_TNaming.TNaming_RefShape_Shape, None, TNaming_RefShape)
TNaming_RefShape_swigregister = _TNaming.TNaming_RefShape_swigregister
TNaming_RefShape_swigregister(TNaming_RefShape)

class TNaming_SameShapeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Label(self, *args) -> "TDF_Label":
        """:rtype: TDF_Label"""
        return _TNaming.TNaming_SameShapeIterator_Label(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TNaming.TNaming_SameShapeIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _TNaming.TNaming_SameShapeIterator_Next(self, *args)


    def __init__(self, *args):
        """
        :param aShape:
        	:type aShape: TopoDS_Shape
        	:param access:
        	:type access: TDF_Label
        	:rtype: None
        """
        _TNaming.TNaming_SameShapeIterator_swiginit(self, _TNaming.new_TNaming_SameShapeIterator(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_SameShapeIterator
TNaming_SameShapeIterator.Label = new_instancemethod(_TNaming.TNaming_SameShapeIterator_Label, None, TNaming_SameShapeIterator)
TNaming_SameShapeIterator.More = new_instancemethod(_TNaming.TNaming_SameShapeIterator_More, None, TNaming_SameShapeIterator)
TNaming_SameShapeIterator.Next = new_instancemethod(_TNaming.TNaming_SameShapeIterator_Next, None, TNaming_SameShapeIterator)
TNaming_SameShapeIterator_swigregister = _TNaming.TNaming_SameShapeIterator_swigregister
TNaming_SameShapeIterator_swigregister(TNaming_SameShapeIterator)

class TNaming_Scope(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeValid(self, *args) -> "TDF_LabelMap &":
        """:rtype: TDF_LabelMap"""
        return _TNaming.TNaming_Scope_ChangeValid(self, *args)


    def ClearValid(self, *args) -> "void":
        """:rtype: None"""
        return _TNaming.TNaming_Scope_ClearValid(self, *args)


    def CurrentShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the current value of <NS> according to the Valid Scope.
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_Scope_CurrentShape(self, *args)


    def GetValid(self, *args) -> "TDF_LabelMap const &":
        """:rtype: TDF_LabelMap"""
        return _TNaming.TNaming_Scope_GetValid(self, *args)


    def IsValid(self, *args) -> "Standard_Boolean":
        """
        :param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _TNaming.TNaming_Scope_IsValid(self, *args)


    def __init__(self, *args):
        """
        * WithValid = False
        	:rtype: None
        * if <WithValid> the scope is defined by the map. If not on the whole framework.
        	:param WithValid:
        	:type WithValid: bool
        	:rtype: None
        * create a scope with a map. WithValid = True.
        	:param valid:
        	:type valid: TDF_LabelMap
        	:rtype: None
        """
        _TNaming.TNaming_Scope_swiginit(self, _TNaming.new_TNaming_Scope(*args))

    def Unvalid(self, *args) -> "void":
        """
        :param L:
        	:type L: TDF_Label
        	:rtype: None
        """
        return _TNaming.TNaming_Scope_Unvalid(self, *args)


    def UnvalidChildren(self, *args) -> "void":
        """
        :param L:
        	:type L: TDF_Label
        	:param withroot: default value is Standard_True
        	:type withroot: bool
        	:rtype: None
        """
        return _TNaming.TNaming_Scope_UnvalidChildren(self, *args)


    def Valid(self, *args) -> "void":
        """
        :param L:
        	:type L: TDF_Label
        	:rtype: None
        """
        return _TNaming.TNaming_Scope_Valid(self, *args)


    def ValidChildren(self, *args) -> "void":
        """
        :param L:
        	:type L: TDF_Label
        	:param withroot: default value is Standard_True
        	:type withroot: bool
        	:rtype: None
        """
        return _TNaming.TNaming_Scope_ValidChildren(self, *args)


    def WithValid(self, *args) -> "void":
        """
        :rtype: bool
        :param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _TNaming.TNaming_Scope_WithValid(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_Scope
TNaming_Scope.ChangeValid = new_instancemethod(_TNaming.TNaming_Scope_ChangeValid, None, TNaming_Scope)
TNaming_Scope.ClearValid = new_instancemethod(_TNaming.TNaming_Scope_ClearValid, None, TNaming_Scope)
TNaming_Scope.CurrentShape = new_instancemethod(_TNaming.TNaming_Scope_CurrentShape, None, TNaming_Scope)
TNaming_Scope.GetValid = new_instancemethod(_TNaming.TNaming_Scope_GetValid, None, TNaming_Scope)
TNaming_Scope.IsValid = new_instancemethod(_TNaming.TNaming_Scope_IsValid, None, TNaming_Scope)
TNaming_Scope.Unvalid = new_instancemethod(_TNaming.TNaming_Scope_Unvalid, None, TNaming_Scope)
TNaming_Scope.UnvalidChildren = new_instancemethod(_TNaming.TNaming_Scope_UnvalidChildren, None, TNaming_Scope)
TNaming_Scope.Valid = new_instancemethod(_TNaming.TNaming_Scope_Valid, None, TNaming_Scope)
TNaming_Scope.ValidChildren = new_instancemethod(_TNaming.TNaming_Scope_ValidChildren, None, TNaming_Scope)
TNaming_Scope.WithValid = new_instancemethod(_TNaming.TNaming_Scope_WithValid, None, TNaming_Scope)
TNaming_Scope_swigregister = _TNaming.TNaming_Scope_swigregister
TNaming_Scope_swigregister(TNaming_Scope)

class TNaming_Selector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Arguments(self, *args) -> "void":
        """
        * Returns the attribute list args. This list contains the named shape on which the topological naming was built.
        	:param args:
        	:type args: TDF_AttributeMap
        	:rtype: None
        """
        return _TNaming.TNaming_Selector_Arguments(self, *args)


    def IsIdentified(*args) -> "Standard_Boolean":
        """
        * To know if a shape is already identified (not selected) ======================================================= //! The label access defines the point of access to the data framework. selection is the shape for which we want to know whether it is identified or not. If true, NS is returned as the identity of selection. If Geometry is true, NS will be the named shape containing the first appearance of selection and not any other shape. In other words, selection must be the only shape stored in NS.
        	:param access:
        	:type access: TDF_Label
        	:param selection:
        	:type selection: TopoDS_Shape
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:param Geometry: default value is Standard_False
        	:type Geometry: bool
        	:rtype: bool
        """
        return _TNaming.TNaming_Selector_IsIdentified(*args)

    IsIdentified = staticmethod(IsIdentified)

    def NamedShape(self, *args) -> "opencascade::handle< TNaming_NamedShape >":
        """
        * Returns the NamedShape build or under construction, which contains the topological naming..
        	:rtype: opencascade::handle<TNaming_NamedShape>
        """
        return _TNaming.TNaming_Selector_NamedShape(self, *args)


    def Select(self, *args) -> "Standard_Boolean":
        """
        * Creates a topological naming on the label aLabel given as an argument at construction time. If successful, the shape Selection - found in the shape Context - is now identified in the named shape returned in NamedShape. If Geometry is true, NamedShape contains the first appearance of Selection. This syntax is more robust than the previous syntax for this method.
        	:param Selection:
        	:type Selection: TopoDS_Shape
        	:param Context:
        	:type Context: TopoDS_Shape
        	:param Geometry: default value is Standard_False
        	:type Geometry: bool
        	:param KeepOrientatation: default value is Standard_False
        	:type KeepOrientatation: bool
        	:rtype: bool
        * Creates a topological naming on the label aLabel given as an argument at construction time. If successful, the shape Selection is now identified in the named shape returned in NamedShape. If Geometry is true, NamedShape contains the first appearance of Selection.
        	:param Selection:
        	:type Selection: TopoDS_Shape
        	:param Geometry: default value is Standard_False
        	:type Geometry: bool
        	:param KeepOrientatation: default value is Standard_False
        	:type KeepOrientatation: bool
        	:rtype: bool
        """
        return _TNaming.TNaming_Selector_Select(self, *args)


    def Solve(self, *args) -> "Standard_Boolean":
        """
        * Updates the topological naming on the label aLabel given as an argument at construction time. The underlying shape returned in the method NamedShape is updated. To read this shape, use the method TNaming_Tool::GetShape
        	:param Valid:
        	:type Valid: TDF_LabelMap
        	:rtype: bool
        """
        return _TNaming.TNaming_Selector_Solve(self, *args)


    def __init__(self, *args):
        """
        * Create a selector on this label to select a shape. ==================
        	:param aLabel:
        	:type aLabel: TDF_Label
        	:rtype: None
        """
        _TNaming.TNaming_Selector_swiginit(self, _TNaming.new_TNaming_Selector(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_Selector
TNaming_Selector.Arguments = new_instancemethod(_TNaming.TNaming_Selector_Arguments, None, TNaming_Selector)
TNaming_Selector.NamedShape = new_instancemethod(_TNaming.TNaming_Selector_NamedShape, None, TNaming_Selector)
TNaming_Selector.Select = new_instancemethod(_TNaming.TNaming_Selector_Select, None, TNaming_Selector)
TNaming_Selector.Solve = new_instancemethod(_TNaming.TNaming_Selector_Solve, None, TNaming_Selector)
TNaming_Selector_swigregister = _TNaming.TNaming_Selector_swigregister
TNaming_Selector_swigregister(TNaming_Selector)

def TNaming_Selector_IsIdentified(*args) -> "Standard_Boolean":
    """
    * To know if a shape is already identified (not selected) ======================================================= //! The label access defines the point of access to the data framework. selection is the shape for which we want to know whether it is identified or not. If true, NS is returned as the identity of selection. If Geometry is true, NS will be the named shape containing the first appearance of selection and not any other shape. In other words, selection must be the only shape stored in NS.
    	:param access:
    	:type access: TDF_Label
    	:param selection:
    	:type selection: TopoDS_Shape
    	:param NS:
    	:type NS: TNaming_NamedShape
    	:param Geometry: default value is Standard_False
    	:type Geometry: bool
    	:rtype: bool
    """
    return _TNaming.TNaming_Selector_IsIdentified(*args)

class TNaming_ShapesSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Adds the Shape <S>
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        * Adds the shapes contained in <Shapes>.
        	:param Shapes:
        	:type Shapes: TNaming_ShapesSet
        	:rtype: None
        """
        return _TNaming.TNaming_ShapesSet_Add(self, *args)


    def ChangeMap(self, *args) -> "TopTools_MapOfShape &":
        """:rtype: TopTools_MapOfShape"""
        return _TNaming.TNaming_ShapesSet_ChangeMap(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Removes all Shapes
        	:rtype: None
        """
        return _TNaming.TNaming_ShapesSet_Clear(self, *args)


    def Contains(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <S> is in <self>
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _TNaming.TNaming_ShapesSet_Contains(self, *args)


    def Filter(self, *args) -> "void":
        """
        * Erases in <self> the shapes not contained in <Shapes>
        	:param Shapes:
        	:type Shapes: TNaming_ShapesSet
        	:rtype: None
        """
        return _TNaming.TNaming_ShapesSet_Filter(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TNaming.TNaming_ShapesSet_IsEmpty(self, *args)


    def Map(self, *args) -> "TopTools_MapOfShape const &":
        """:rtype: TopTools_MapOfShape"""
        return _TNaming.TNaming_ShapesSet_Map(self, *args)


    def NbShapes(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TNaming.TNaming_ShapesSet_NbShapes(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Removes <S> in <self>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        * Removes in <self> the shapes contained in <Shapes>
        	:param Shapes:
        	:type Shapes: TNaming_ShapesSet
        	:rtype: None
        """
        return _TNaming.TNaming_ShapesSet_Remove(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: TopoDS_Shape
        	:param Type: default value is TopAbs_SHAPE
        	:type Type: TopAbs_ShapeEnum
        	:rtype: None
        """
        _TNaming.TNaming_ShapesSet_swiginit(self, _TNaming.new_TNaming_ShapesSet(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_ShapesSet
TNaming_ShapesSet.Add = new_instancemethod(_TNaming.TNaming_ShapesSet_Add, None, TNaming_ShapesSet)
TNaming_ShapesSet.ChangeMap = new_instancemethod(_TNaming.TNaming_ShapesSet_ChangeMap, None, TNaming_ShapesSet)
TNaming_ShapesSet.Clear = new_instancemethod(_TNaming.TNaming_ShapesSet_Clear, None, TNaming_ShapesSet)
TNaming_ShapesSet.Contains = new_instancemethod(_TNaming.TNaming_ShapesSet_Contains, None, TNaming_ShapesSet)
TNaming_ShapesSet.Filter = new_instancemethod(_TNaming.TNaming_ShapesSet_Filter, None, TNaming_ShapesSet)
TNaming_ShapesSet.IsEmpty = new_instancemethod(_TNaming.TNaming_ShapesSet_IsEmpty, None, TNaming_ShapesSet)
TNaming_ShapesSet.Map = new_instancemethod(_TNaming.TNaming_ShapesSet_Map, None, TNaming_ShapesSet)
TNaming_ShapesSet.NbShapes = new_instancemethod(_TNaming.TNaming_ShapesSet_NbShapes, None, TNaming_ShapesSet)
TNaming_ShapesSet.Remove = new_instancemethod(_TNaming.TNaming_ShapesSet_Remove, None, TNaming_ShapesSet)
TNaming_ShapesSet_swigregister = _TNaming.TNaming_ShapesSet_swigregister
TNaming_ShapesSet_swigregister(TNaming_ShapesSet)

class TNaming_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Collect(*args) -> "void":
        """
        :param NS:
        	:type NS: TNaming_NamedShape
        	:param Labels:
        	:type Labels: TNaming_MapOfNamedShape
        	:param OnlyModif: default value is Standard_True
        	:type OnlyModif: bool
        	:rtype: void
        """
        return _TNaming.TNaming_Tool_Collect(*args)

    Collect = staticmethod(Collect)

    def CurrentNamedShape(*args) -> "opencascade::handle< TNaming_NamedShape >":
        """
        * Returns the NamedShape of the last Modification of <NS>. This shape is identified by a label.
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:param Updated:
        	:type Updated: TDF_LabelMap
        	:rtype: opencascade::handle<TNaming_NamedShape>
        * Returns NamedShape the last Modification of <NS>.
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:rtype: opencascade::handle<TNaming_NamedShape>
        """
        return _TNaming.TNaming_Tool_CurrentNamedShape(*args)

    CurrentNamedShape = staticmethod(CurrentNamedShape)

    def CurrentShape(*args) -> "TopoDS_Shape":
        """
        * Returns the last Modification of <NS>. Returns the shape CurrentShape contained in the named shape attribute NS. CurrentShape is the current state of the entities if they have been modified in other attributes of the same data structure. Each call to this function creates a new compound.
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:rtype: TopoDS_Shape
        * Returns the shape CurrentShape contained in the named shape attribute NS, and present in the updated attribute map Updated. CurrentShape is the current state of the entities if they have been modified in other attributes of the same data structure. Each call to this function creates a new compound. Warning Only the contents of Updated are searched.R
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:param Updated:
        	:type Updated: TDF_LabelMap
        	:rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_Tool_CurrentShape(*args)

    CurrentShape = staticmethod(CurrentShape)

    def FindShape(*args) -> "void":
        """
        * Returns the current shape (a Wire or a Shell) built (in the data framework) from the the shapes of the argument named shape. It is used for IDENTITY name type computation.
        	:param Valid:
        	:type Valid: TDF_LabelMap
        	:param Forbiden:
        	:type Forbiden: TDF_LabelMap
        	:param Arg:
        	:type Arg: TNaming_NamedShape
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: void
        """
        return _TNaming.TNaming_Tool_FindShape(*args)

    FindShape = staticmethod(FindShape)

    def GeneratedShape(*args) -> "TopoDS_Shape":
        """
        * Returns the shape generated from S or by a modification of S and contained in the named shape Generation.
        	:param S:
        	:type S: TopoDS_Shape
        	:param Generation:
        	:type Generation: TNaming_NamedShape
        	:rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_Tool_GeneratedShape(*args)

    GeneratedShape = staticmethod(GeneratedShape)

    def GetShape(*args) -> "TopoDS_Shape":
        """
        * Returns the entities stored in the named shape attribute NS. If there is only one old-new pair, the new shape is returned. Otherwise, a Compound is returned. This compound is made out of all the new shapes found. Each call to this function creates a new compound.
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_Tool_GetShape(*args)

    GetShape = staticmethod(GetShape)

    def HasLabel(*args) -> "Standard_Boolean":
        """
        * Returns True if <aShape> appears under a label.(DP)
        	:param access:
        	:type access: TDF_Label
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: bool
        """
        return _TNaming.TNaming_Tool_HasLabel(*args)

    HasLabel = staticmethod(HasLabel)

    def InitialShape(*args) -> "TopoDS_Shape":
        """
        * Returns the shape created from the shape aShape contained in the attribute anAcces.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param anAcces:
        	:type anAcces: TDF_Label
        	:param Labels:
        	:type Labels: TDF_LabelList
        	:rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_Tool_InitialShape(*args)

    InitialShape = staticmethod(InitialShape)

    def Label(*args) -> "Standard_Integer &":
        """
        * Returns the label of the first apparition of <aShape>. Transdef is a value of the transaction of the first apparition of <aShape>.
        	:param access:
        	:type access: TDF_Label
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param TransDef:
        	:type TransDef: int
        	:rtype: TDF_Label
        """
        return _TNaming.TNaming_Tool_Label(*args)

    Label = staticmethod(Label)

    def NamedShape(*args) -> "opencascade::handle< TNaming_NamedShape >":
        """
        * Returns the named shape attribute defined by the shape aShape and the label anAccess. This attribute is returned as a new shape. You call this function, if you need to create a topological attribute for existing data. Example class MyPkg_MyClass { public: Standard_Boolean SameEdge(const opencascade::handle<OCafTest_Line>& , const opencascade::handle<CafTest_Line>& ); }; //! Standard_Boolean MyPkg_MyClass::SameEdge (const opencascade::handle<OCafTest_Line>& L1 const opencascade::handle<OCafTest_Line>& L2) { opencascade::handle<TNaming_NamedShape> NS1 = L1->NamedShape(); opencascade::handle<TNaming_NamedShape> NS2 = L2->NamedShape(); //! return BRepTools::Compare(NS1->Get(),NS2->Get()); } In the example above, the function SameEdge is created to compare the edges having two lines for geometric supports. If these edges are found by BRepTools::Compare to be within the same tolerance, they are considered to be the same. Warning To avoid sharing of names, a SELECTED attribute will not be returned. Sharing of names makes it harder to manage the data structure. When the user of the name is removed, for example, it is difficult to know whether the name should be destroyed.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param anAcces:
        	:type anAcces: TDF_Label
        	:rtype: opencascade::handle<TNaming_NamedShape>
        """
        return _TNaming.TNaming_Tool_NamedShape(*args)

    NamedShape = staticmethod(NamedShape)

    def OriginalShape(*args) -> "TopoDS_Shape":
        """
        * Returns the shape contained as OldShape in <NS>
        	:param NS:
        	:type NS: TNaming_NamedShape
        	:rtype: TopoDS_Shape
        """
        return _TNaming.TNaming_Tool_OriginalShape(*args)

    OriginalShape = staticmethod(OriginalShape)

    def ValidUntil(*args) -> "Standard_Integer":
        """
        * Returns the last transaction where the creation of S is valid.
        	:param access:
        	:type access: TDF_Label
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: int
        """
        return _TNaming.TNaming_Tool_ValidUntil(*args)

    ValidUntil = staticmethod(ValidUntil)

    __repr__ = _dumps_object


    def __init__(self):
        _TNaming.TNaming_Tool_swiginit(self, _TNaming.new_TNaming_Tool())
    __swig_destroy__ = _TNaming.delete_TNaming_Tool
TNaming_Tool_swigregister = _TNaming.TNaming_Tool_swigregister
TNaming_Tool_swigregister(TNaming_Tool)

def TNaming_Tool_Collect(*args) -> "void":
    """
    :param NS:
    	:type NS: TNaming_NamedShape
    	:param Labels:
    	:type Labels: TNaming_MapOfNamedShape
    	:param OnlyModif: default value is Standard_True
    	:type OnlyModif: bool
    	:rtype: void
    """
    return _TNaming.TNaming_Tool_Collect(*args)

def TNaming_Tool_CurrentNamedShape(*args) -> "opencascade::handle< TNaming_NamedShape >":
    """
    * Returns the NamedShape of the last Modification of <NS>. This shape is identified by a label.
    	:param NS:
    	:type NS: TNaming_NamedShape
    	:param Updated:
    	:type Updated: TDF_LabelMap
    	:rtype: opencascade::handle<TNaming_NamedShape>
    * Returns NamedShape the last Modification of <NS>.
    	:param NS:
    	:type NS: TNaming_NamedShape
    	:rtype: opencascade::handle<TNaming_NamedShape>
    """
    return _TNaming.TNaming_Tool_CurrentNamedShape(*args)

def TNaming_Tool_CurrentShape(*args) -> "TopoDS_Shape":
    """
    * Returns the last Modification of <NS>. Returns the shape CurrentShape contained in the named shape attribute NS. CurrentShape is the current state of the entities if they have been modified in other attributes of the same data structure. Each call to this function creates a new compound.
    	:param NS:
    	:type NS: TNaming_NamedShape
    	:rtype: TopoDS_Shape
    * Returns the shape CurrentShape contained in the named shape attribute NS, and present in the updated attribute map Updated. CurrentShape is the current state of the entities if they have been modified in other attributes of the same data structure. Each call to this function creates a new compound. Warning Only the contents of Updated are searched.R
    	:param NS:
    	:type NS: TNaming_NamedShape
    	:param Updated:
    	:type Updated: TDF_LabelMap
    	:rtype: TopoDS_Shape
    """
    return _TNaming.TNaming_Tool_CurrentShape(*args)

def TNaming_Tool_FindShape(*args) -> "void":
    """
    * Returns the current shape (a Wire or a Shell) built (in the data framework) from the the shapes of the argument named shape. It is used for IDENTITY name type computation.
    	:param Valid:
    	:type Valid: TDF_LabelMap
    	:param Forbiden:
    	:type Forbiden: TDF_LabelMap
    	:param Arg:
    	:type Arg: TNaming_NamedShape
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: void
    """
    return _TNaming.TNaming_Tool_FindShape(*args)

def TNaming_Tool_GeneratedShape(*args) -> "TopoDS_Shape":
    """
    * Returns the shape generated from S or by a modification of S and contained in the named shape Generation.
    	:param S:
    	:type S: TopoDS_Shape
    	:param Generation:
    	:type Generation: TNaming_NamedShape
    	:rtype: TopoDS_Shape
    """
    return _TNaming.TNaming_Tool_GeneratedShape(*args)

def TNaming_Tool_GetShape(*args) -> "TopoDS_Shape":
    """
    * Returns the entities stored in the named shape attribute NS. If there is only one old-new pair, the new shape is returned. Otherwise, a Compound is returned. This compound is made out of all the new shapes found. Each call to this function creates a new compound.
    	:param NS:
    	:type NS: TNaming_NamedShape
    	:rtype: TopoDS_Shape
    """
    return _TNaming.TNaming_Tool_GetShape(*args)

def TNaming_Tool_HasLabel(*args) -> "Standard_Boolean":
    """
    * Returns True if <aShape> appears under a label.(DP)
    	:param access:
    	:type access: TDF_Label
    	:param aShape:
    	:type aShape: TopoDS_Shape
    	:rtype: bool
    """
    return _TNaming.TNaming_Tool_HasLabel(*args)

def TNaming_Tool_InitialShape(*args) -> "TopoDS_Shape":
    """
    * Returns the shape created from the shape aShape contained in the attribute anAcces.
    	:param aShape:
    	:type aShape: TopoDS_Shape
    	:param anAcces:
    	:type anAcces: TDF_Label
    	:param Labels:
    	:type Labels: TDF_LabelList
    	:rtype: TopoDS_Shape
    """
    return _TNaming.TNaming_Tool_InitialShape(*args)

def TNaming_Tool_Label(*args) -> "Standard_Integer &":
    """
    * Returns the label of the first apparition of <aShape>. Transdef is a value of the transaction of the first apparition of <aShape>.
    	:param access:
    	:type access: TDF_Label
    	:param aShape:
    	:type aShape: TopoDS_Shape
    	:param TransDef:
    	:type TransDef: int
    	:rtype: TDF_Label
    """
    return _TNaming.TNaming_Tool_Label(*args)

def TNaming_Tool_NamedShape(*args) -> "opencascade::handle< TNaming_NamedShape >":
    """
    * Returns the named shape attribute defined by the shape aShape and the label anAccess. This attribute is returned as a new shape. You call this function, if you need to create a topological attribute for existing data. Example class MyPkg_MyClass { public: Standard_Boolean SameEdge(const opencascade::handle<OCafTest_Line>& , const opencascade::handle<CafTest_Line>& ); }; //! Standard_Boolean MyPkg_MyClass::SameEdge (const opencascade::handle<OCafTest_Line>& L1 const opencascade::handle<OCafTest_Line>& L2) { opencascade::handle<TNaming_NamedShape> NS1 = L1->NamedShape(); opencascade::handle<TNaming_NamedShape> NS2 = L2->NamedShape(); //! return BRepTools::Compare(NS1->Get(),NS2->Get()); } In the example above, the function SameEdge is created to compare the edges having two lines for geometric supports. If these edges are found by BRepTools::Compare to be within the same tolerance, they are considered to be the same. Warning To avoid sharing of names, a SELECTED attribute will not be returned. Sharing of names makes it harder to manage the data structure. When the user of the name is removed, for example, it is difficult to know whether the name should be destroyed.
    	:param aShape:
    	:type aShape: TopoDS_Shape
    	:param anAcces:
    	:type anAcces: TDF_Label
    	:rtype: opencascade::handle<TNaming_NamedShape>
    """
    return _TNaming.TNaming_Tool_NamedShape(*args)

def TNaming_Tool_OriginalShape(*args) -> "TopoDS_Shape":
    """
    * Returns the shape contained as OldShape in <NS>
    	:param NS:
    	:type NS: TNaming_NamedShape
    	:rtype: TopoDS_Shape
    """
    return _TNaming.TNaming_Tool_OriginalShape(*args)

def TNaming_Tool_ValidUntil(*args) -> "Standard_Integer":
    """
    * Returns the last transaction where the creation of S is valid.
    	:param access:
    	:type access: TDF_Label
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: int
    """
    return _TNaming.TNaming_Tool_ValidUntil(*args)

class TNaming_TranslateTool(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        :param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_Add(self, *args)


    def MakeCompSolid(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_MakeCompSolid(self, *args)


    def MakeCompound(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_MakeCompound(self, *args)


    def MakeEdge(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_MakeEdge(self, *args)


    def MakeFace(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_MakeFace(self, *args)


    def MakeShell(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_MakeShell(self, *args)


    def MakeSolid(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_MakeSolid(self, *args)


    def MakeVertex(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_MakeVertex(self, *args)


    def MakeWire(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_MakeWire(self, *args)


    def UpdateEdge(self, *args) -> "void":
        """
        :param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param M:
        	:type M: TColStd_IndexedDataMapOfTransientTransient
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_UpdateEdge(self, *args)


    def UpdateFace(self, *args) -> "void":
        """
        :param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param M:
        	:type M: TColStd_IndexedDataMapOfTransientTransient
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_UpdateFace(self, *args)


    def UpdateShape(self, *args) -> "void":
        """
        :param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_UpdateShape(self, *args)


    def UpdateVertex(self, *args) -> "void":
        """
        :param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param M:
        	:type M: TColStd_IndexedDataMapOfTransientTransient
        	:rtype: None
        """
        return _TNaming.TNaming_TranslateTool_UpdateVertex(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TNaming_TranslateTool_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        _TNaming.TNaming_TranslateTool_swiginit(self, _TNaming.new_TNaming_TranslateTool())
    __swig_destroy__ = _TNaming.delete_TNaming_TranslateTool
TNaming_TranslateTool.Add = new_instancemethod(_TNaming.TNaming_TranslateTool_Add, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeCompSolid = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeCompSolid, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeCompound = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeCompound, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeEdge = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeEdge, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeFace = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeFace, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeShell = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeShell, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeSolid = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeSolid, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeVertex = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeVertex, None, TNaming_TranslateTool)
TNaming_TranslateTool.MakeWire = new_instancemethod(_TNaming.TNaming_TranslateTool_MakeWire, None, TNaming_TranslateTool)
TNaming_TranslateTool.UpdateEdge = new_instancemethod(_TNaming.TNaming_TranslateTool_UpdateEdge, None, TNaming_TranslateTool)
TNaming_TranslateTool.UpdateFace = new_instancemethod(_TNaming.TNaming_TranslateTool_UpdateFace, None, TNaming_TranslateTool)
TNaming_TranslateTool.UpdateShape = new_instancemethod(_TNaming.TNaming_TranslateTool_UpdateShape, None, TNaming_TranslateTool)
TNaming_TranslateTool.UpdateVertex = new_instancemethod(_TNaming.TNaming_TranslateTool_UpdateVertex, None, TNaming_TranslateTool)
TNaming_TranslateTool_swigregister = _TNaming.TNaming_TranslateTool_swigregister
TNaming_TranslateTool_swigregister(TNaming_TranslateTool)

class TNaming_Translator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        :param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: None
        """
        return _TNaming.TNaming_Translator_Add(self, *args)


    def Copied(self, *args) -> "TopTools_DataMapOfShapeShape const &":
        """
        * returns copied shape
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: TopoDS_Shape
        * returns DataMap of results; (shape <-> copied shape)
        	:rtype: TopTools_DataMapOfShapeShape
        """
        return _TNaming.TNaming_Translator_Copied(self, *args)


    def DumpMap(self, *args) -> "void":
        """
        :param isWrite: default value is Standard_False
        	:type isWrite: bool
        	:rtype: None
        """
        return _TNaming.TNaming_Translator_DumpMap(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TNaming.TNaming_Translator_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """:rtype: None"""
        return _TNaming.TNaming_Translator_Perform(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TNaming.TNaming_Translator_swiginit(self, _TNaming.new_TNaming_Translator(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_Translator
TNaming_Translator.Add = new_instancemethod(_TNaming.TNaming_Translator_Add, None, TNaming_Translator)
TNaming_Translator.Copied = new_instancemethod(_TNaming.TNaming_Translator_Copied, None, TNaming_Translator)
TNaming_Translator.DumpMap = new_instancemethod(_TNaming.TNaming_Translator_DumpMap, None, TNaming_Translator)
TNaming_Translator.IsDone = new_instancemethod(_TNaming.TNaming_Translator_IsDone, None, TNaming_Translator)
TNaming_Translator.Perform = new_instancemethod(_TNaming.TNaming_Translator_Perform, None, TNaming_Translator)
TNaming_Translator_swigregister = _TNaming.TNaming_Translator_swigregister
TNaming_Translator_swigregister(TNaming_Translator)

class TNaming_UsedShapes(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Destroy(self, *args) -> "void":
        """:rtype: None"""
        return _TNaming.TNaming_UsedShapes_Destroy(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TNaming_UsedShapes self) -> std::string"""
        return _TNaming.TNaming_UsedShapes_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns the ID: 2a96b614-ec8b-11d0-bee7-080009dc3333.
        	:rtype: Standard_GUID
        """
        return _TNaming.TNaming_UsedShapes_GetID(*args)

    GetID = staticmethod(GetID)

    def Map(self, *args) -> "TNaming_DataMapOfShapePtrRefShape &":
        """:rtype: TNaming_DataMapOfShapePtrRefShape"""
        return _TNaming.TNaming_UsedShapes_Map(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TNaming_UsedShapes_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TNaming.delete_TNaming_UsedShapes
TNaming_UsedShapes.Destroy = new_instancemethod(_TNaming.TNaming_UsedShapes_Destroy, None, TNaming_UsedShapes)
TNaming_UsedShapes.DumpToString = new_instancemethod(_TNaming.TNaming_UsedShapes_DumpToString, None, TNaming_UsedShapes)
TNaming_UsedShapes.Map = new_instancemethod(_TNaming.TNaming_UsedShapes_Map, None, TNaming_UsedShapes)
TNaming_UsedShapes_swigregister = _TNaming.TNaming_UsedShapes_swigregister
TNaming_UsedShapes_swigregister(TNaming_UsedShapes)

def TNaming_UsedShapes_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns the ID: 2a96b614-ec8b-11d0-bee7-080009dc3333.
    	:rtype: Standard_GUID
    """
    return _TNaming.TNaming_UsedShapes_GetID(*args)



