# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TObj module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tobj.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TObj.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TObj')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TObj')
    _TObj = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TObj', [dirname(__file__)])
        except ImportError:
            import _TObj
            return _TObj
        try:
            _mod = imp.load_module('_TObj', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TObj = swig_import_helper()
    del swig_import_helper
else:
    import _TObj
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TObj.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TObj.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TObj.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TObj.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TObj.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TObj.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TObj.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TObj.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TObj.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TObj.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TObj.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TObj.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TObj.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TObj.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TObj.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TObj.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TObj.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TObj.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TObj.process_exception(error, method_name, class_name)
process_exception = _TObj.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.TDocStd
import OCC.Core.TDF
import OCC.Core.TColStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Message
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
import OCC.Core.gp
TObj_FreeOnly = _TObj.TObj_FreeOnly
TObj_KeepDepending = _TObj.TObj_KeepDepending
TObj_Forced = _TObj.TObj_Forced

def Handle_TObj_Application_Create() -> "opencascade::handle< TObj_Application >":
    return _TObj.Handle_TObj_Application_Create()
Handle_TObj_Application_Create = _TObj.Handle_TObj_Application_Create

def Handle_TObj_Application_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_Application >":
    return _TObj.Handle_TObj_Application_DownCast(t)
Handle_TObj_Application_DownCast = _TObj.Handle_TObj_Application_DownCast

def Handle_TObj_Application_IsNull(t: 'opencascade::handle< TObj_Application > const &') -> "bool":
    return _TObj.Handle_TObj_Application_IsNull(t)
Handle_TObj_Application_IsNull = _TObj.Handle_TObj_Application_IsNull

def Handle_TObj_CheckModel_Create() -> "opencascade::handle< TObj_CheckModel >":
    return _TObj.Handle_TObj_CheckModel_Create()
Handle_TObj_CheckModel_Create = _TObj.Handle_TObj_CheckModel_Create

def Handle_TObj_CheckModel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_CheckModel >":
    return _TObj.Handle_TObj_CheckModel_DownCast(t)
Handle_TObj_CheckModel_DownCast = _TObj.Handle_TObj_CheckModel_DownCast

def Handle_TObj_CheckModel_IsNull(t: 'opencascade::handle< TObj_CheckModel > const &') -> "bool":
    return _TObj.Handle_TObj_CheckModel_IsNull(t)
Handle_TObj_CheckModel_IsNull = _TObj.Handle_TObj_CheckModel_IsNull

def Handle_TObj_Model_Create() -> "opencascade::handle< TObj_Model >":
    return _TObj.Handle_TObj_Model_Create()
Handle_TObj_Model_Create = _TObj.Handle_TObj_Model_Create

def Handle_TObj_Model_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_Model >":
    return _TObj.Handle_TObj_Model_DownCast(t)
Handle_TObj_Model_DownCast = _TObj.Handle_TObj_Model_DownCast

def Handle_TObj_Model_IsNull(t: 'opencascade::handle< TObj_Model > const &') -> "bool":
    return _TObj.Handle_TObj_Model_IsNull(t)
Handle_TObj_Model_IsNull = _TObj.Handle_TObj_Model_IsNull

def Handle_TObj_Object_Create() -> "opencascade::handle< TObj_Object >":
    return _TObj.Handle_TObj_Object_Create()
Handle_TObj_Object_Create = _TObj.Handle_TObj_Object_Create

def Handle_TObj_Object_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_Object >":
    return _TObj.Handle_TObj_Object_DownCast(t)
Handle_TObj_Object_DownCast = _TObj.Handle_TObj_Object_DownCast

def Handle_TObj_Object_IsNull(t: 'opencascade::handle< TObj_Object > const &') -> "bool":
    return _TObj.Handle_TObj_Object_IsNull(t)
Handle_TObj_Object_IsNull = _TObj.Handle_TObj_Object_IsNull

def Handle_TObj_ObjectIterator_Create() -> "opencascade::handle< TObj_ObjectIterator >":
    return _TObj.Handle_TObj_ObjectIterator_Create()
Handle_TObj_ObjectIterator_Create = _TObj.Handle_TObj_ObjectIterator_Create

def Handle_TObj_ObjectIterator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_ObjectIterator >":
    return _TObj.Handle_TObj_ObjectIterator_DownCast(t)
Handle_TObj_ObjectIterator_DownCast = _TObj.Handle_TObj_ObjectIterator_DownCast

def Handle_TObj_ObjectIterator_IsNull(t: 'opencascade::handle< TObj_ObjectIterator > const &') -> "bool":
    return _TObj.Handle_TObj_ObjectIterator_IsNull(t)
Handle_TObj_ObjectIterator_IsNull = _TObj.Handle_TObj_ObjectIterator_IsNull

def Handle_TObj_TIntSparseArray_Create() -> "opencascade::handle< TObj_TIntSparseArray >":
    return _TObj.Handle_TObj_TIntSparseArray_Create()
Handle_TObj_TIntSparseArray_Create = _TObj.Handle_TObj_TIntSparseArray_Create

def Handle_TObj_TIntSparseArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_TIntSparseArray >":
    return _TObj.Handle_TObj_TIntSparseArray_DownCast(t)
Handle_TObj_TIntSparseArray_DownCast = _TObj.Handle_TObj_TIntSparseArray_DownCast

def Handle_TObj_TIntSparseArray_IsNull(t: 'opencascade::handle< TObj_TIntSparseArray > const &') -> "bool":
    return _TObj.Handle_TObj_TIntSparseArray_IsNull(t)
Handle_TObj_TIntSparseArray_IsNull = _TObj.Handle_TObj_TIntSparseArray_IsNull

def Handle_TObj_TModel_Create() -> "opencascade::handle< TObj_TModel >":
    return _TObj.Handle_TObj_TModel_Create()
Handle_TObj_TModel_Create = _TObj.Handle_TObj_TModel_Create

def Handle_TObj_TModel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_TModel >":
    return _TObj.Handle_TObj_TModel_DownCast(t)
Handle_TObj_TModel_DownCast = _TObj.Handle_TObj_TModel_DownCast

def Handle_TObj_TModel_IsNull(t: 'opencascade::handle< TObj_TModel > const &') -> "bool":
    return _TObj.Handle_TObj_TModel_IsNull(t)
Handle_TObj_TModel_IsNull = _TObj.Handle_TObj_TModel_IsNull

def Handle_TObj_TNameContainer_Create() -> "opencascade::handle< TObj_TNameContainer >":
    return _TObj.Handle_TObj_TNameContainer_Create()
Handle_TObj_TNameContainer_Create = _TObj.Handle_TObj_TNameContainer_Create

def Handle_TObj_TNameContainer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_TNameContainer >":
    return _TObj.Handle_TObj_TNameContainer_DownCast(t)
Handle_TObj_TNameContainer_DownCast = _TObj.Handle_TObj_TNameContainer_DownCast

def Handle_TObj_TNameContainer_IsNull(t: 'opencascade::handle< TObj_TNameContainer > const &') -> "bool":
    return _TObj.Handle_TObj_TNameContainer_IsNull(t)
Handle_TObj_TNameContainer_IsNull = _TObj.Handle_TObj_TNameContainer_IsNull

def Handle_TObj_TObject_Create() -> "opencascade::handle< TObj_TObject >":
    return _TObj.Handle_TObj_TObject_Create()
Handle_TObj_TObject_Create = _TObj.Handle_TObj_TObject_Create

def Handle_TObj_TObject_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_TObject >":
    return _TObj.Handle_TObj_TObject_DownCast(t)
Handle_TObj_TObject_DownCast = _TObj.Handle_TObj_TObject_DownCast

def Handle_TObj_TObject_IsNull(t: 'opencascade::handle< TObj_TObject > const &') -> "bool":
    return _TObj.Handle_TObj_TObject_IsNull(t)
Handle_TObj_TObject_IsNull = _TObj.Handle_TObj_TObject_IsNull

def Handle_TObj_TReference_Create() -> "opencascade::handle< TObj_TReference >":
    return _TObj.Handle_TObj_TReference_Create()
Handle_TObj_TReference_Create = _TObj.Handle_TObj_TReference_Create

def Handle_TObj_TReference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_TReference >":
    return _TObj.Handle_TObj_TReference_DownCast(t)
Handle_TObj_TReference_DownCast = _TObj.Handle_TObj_TReference_DownCast

def Handle_TObj_TReference_IsNull(t: 'opencascade::handle< TObj_TReference > const &') -> "bool":
    return _TObj.Handle_TObj_TReference_IsNull(t)
Handle_TObj_TReference_IsNull = _TObj.Handle_TObj_TReference_IsNull

def Handle_TObj_TXYZ_Create() -> "opencascade::handle< TObj_TXYZ >":
    return _TObj.Handle_TObj_TXYZ_Create()
Handle_TObj_TXYZ_Create = _TObj.Handle_TObj_TXYZ_Create

def Handle_TObj_TXYZ_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_TXYZ >":
    return _TObj.Handle_TObj_TXYZ_DownCast(t)
Handle_TObj_TXYZ_DownCast = _TObj.Handle_TObj_TXYZ_DownCast

def Handle_TObj_TXYZ_IsNull(t: 'opencascade::handle< TObj_TXYZ > const &') -> "bool":
    return _TObj.Handle_TObj_TXYZ_IsNull(t)
Handle_TObj_TXYZ_IsNull = _TObj.Handle_TObj_TXYZ_IsNull

def Handle_TObj_LabelIterator_Create() -> "opencascade::handle< TObj_LabelIterator >":
    return _TObj.Handle_TObj_LabelIterator_Create()
Handle_TObj_LabelIterator_Create = _TObj.Handle_TObj_LabelIterator_Create

def Handle_TObj_LabelIterator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_LabelIterator >":
    return _TObj.Handle_TObj_LabelIterator_DownCast(t)
Handle_TObj_LabelIterator_DownCast = _TObj.Handle_TObj_LabelIterator_DownCast

def Handle_TObj_LabelIterator_IsNull(t: 'opencascade::handle< TObj_LabelIterator > const &') -> "bool":
    return _TObj.Handle_TObj_LabelIterator_IsNull(t)
Handle_TObj_LabelIterator_IsNull = _TObj.Handle_TObj_LabelIterator_IsNull

def Handle_TObj_ModelIterator_Create() -> "opencascade::handle< TObj_ModelIterator >":
    return _TObj.Handle_TObj_ModelIterator_Create()
Handle_TObj_ModelIterator_Create = _TObj.Handle_TObj_ModelIterator_Create

def Handle_TObj_ModelIterator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_ModelIterator >":
    return _TObj.Handle_TObj_ModelIterator_DownCast(t)
Handle_TObj_ModelIterator_DownCast = _TObj.Handle_TObj_ModelIterator_DownCast

def Handle_TObj_ModelIterator_IsNull(t: 'opencascade::handle< TObj_ModelIterator > const &') -> "bool":
    return _TObj.Handle_TObj_ModelIterator_IsNull(t)
Handle_TObj_ModelIterator_IsNull = _TObj.Handle_TObj_ModelIterator_IsNull

def Handle_TObj_Partition_Create() -> "opencascade::handle< TObj_Partition >":
    return _TObj.Handle_TObj_Partition_Create()
Handle_TObj_Partition_Create = _TObj.Handle_TObj_Partition_Create

def Handle_TObj_Partition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_Partition >":
    return _TObj.Handle_TObj_Partition_DownCast(t)
Handle_TObj_Partition_DownCast = _TObj.Handle_TObj_Partition_DownCast

def Handle_TObj_Partition_IsNull(t: 'opencascade::handle< TObj_Partition > const &') -> "bool":
    return _TObj.Handle_TObj_Partition_IsNull(t)
Handle_TObj_Partition_IsNull = _TObj.Handle_TObj_Partition_IsNull

def Handle_TObj_SequenceIterator_Create() -> "opencascade::handle< TObj_SequenceIterator >":
    return _TObj.Handle_TObj_SequenceIterator_Create()
Handle_TObj_SequenceIterator_Create = _TObj.Handle_TObj_SequenceIterator_Create

def Handle_TObj_SequenceIterator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_SequenceIterator >":
    return _TObj.Handle_TObj_SequenceIterator_DownCast(t)
Handle_TObj_SequenceIterator_DownCast = _TObj.Handle_TObj_SequenceIterator_DownCast

def Handle_TObj_SequenceIterator_IsNull(t: 'opencascade::handle< TObj_SequenceIterator > const &') -> "bool":
    return _TObj.Handle_TObj_SequenceIterator_IsNull(t)
Handle_TObj_SequenceIterator_IsNull = _TObj.Handle_TObj_SequenceIterator_IsNull

def Handle_TObj_HiddenPartition_Create() -> "opencascade::handle< TObj_HiddenPartition >":
    return _TObj.Handle_TObj_HiddenPartition_Create()
Handle_TObj_HiddenPartition_Create = _TObj.Handle_TObj_HiddenPartition_Create

def Handle_TObj_HiddenPartition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_HiddenPartition >":
    return _TObj.Handle_TObj_HiddenPartition_DownCast(t)
Handle_TObj_HiddenPartition_DownCast = _TObj.Handle_TObj_HiddenPartition_DownCast

def Handle_TObj_HiddenPartition_IsNull(t: 'opencascade::handle< TObj_HiddenPartition > const &') -> "bool":
    return _TObj.Handle_TObj_HiddenPartition_IsNull(t)
Handle_TObj_HiddenPartition_IsNull = _TObj.Handle_TObj_HiddenPartition_IsNull

def Handle_TObj_OcafObjectIterator_Create() -> "opencascade::handle< TObj_OcafObjectIterator >":
    return _TObj.Handle_TObj_OcafObjectIterator_Create()
Handle_TObj_OcafObjectIterator_Create = _TObj.Handle_TObj_OcafObjectIterator_Create

def Handle_TObj_OcafObjectIterator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_OcafObjectIterator >":
    return _TObj.Handle_TObj_OcafObjectIterator_DownCast(t)
Handle_TObj_OcafObjectIterator_DownCast = _TObj.Handle_TObj_OcafObjectIterator_DownCast

def Handle_TObj_OcafObjectIterator_IsNull(t: 'opencascade::handle< TObj_OcafObjectIterator > const &') -> "bool":
    return _TObj.Handle_TObj_OcafObjectIterator_IsNull(t)
Handle_TObj_OcafObjectIterator_IsNull = _TObj.Handle_TObj_OcafObjectIterator_IsNull

def Handle_TObj_ReferenceIterator_Create() -> "opencascade::handle< TObj_ReferenceIterator >":
    return _TObj.Handle_TObj_ReferenceIterator_Create()
Handle_TObj_ReferenceIterator_Create = _TObj.Handle_TObj_ReferenceIterator_Create

def Handle_TObj_ReferenceIterator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_ReferenceIterator >":
    return _TObj.Handle_TObj_ReferenceIterator_DownCast(t)
Handle_TObj_ReferenceIterator_DownCast = _TObj.Handle_TObj_ReferenceIterator_DownCast

def Handle_TObj_ReferenceIterator_IsNull(t: 'opencascade::handle< TObj_ReferenceIterator > const &') -> "bool":
    return _TObj.Handle_TObj_ReferenceIterator_IsNull(t)
Handle_TObj_ReferenceIterator_IsNull = _TObj.Handle_TObj_ReferenceIterator_IsNull

def Handle_TObj_HSequenceOfObject_Create() -> "opencascade::handle< TObj_HSequenceOfObject >":
    return _TObj.Handle_TObj_HSequenceOfObject_Create()
Handle_TObj_HSequenceOfObject_Create = _TObj.Handle_TObj_HSequenceOfObject_Create

def Handle_TObj_HSequenceOfObject_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TObj_HSequenceOfObject >":
    return _TObj.Handle_TObj_HSequenceOfObject_DownCast(t)
Handle_TObj_HSequenceOfObject_DownCast = _TObj.Handle_TObj_HSequenceOfObject_DownCast

def Handle_TObj_HSequenceOfObject_IsNull(t: 'opencascade::handle< TObj_HSequenceOfObject > const &') -> "bool":
    return _TObj.Handle_TObj_HSequenceOfObject_IsNull(t)
Handle_TObj_HSequenceOfObject_IsNull = _TObj.Handle_TObj_HSequenceOfObject_IsNull
class TObj_TIntSparseArray_VecOfData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, theIncrement: 'Standard_Size'):
        _TObj.TObj_TIntSparseArray_VecOfData_swiginit(self, _TObj.new_TObj_TIntSparseArray_VecOfData(theIncrement))
    __swig_destroy__ = _TObj.delete_TObj_TIntSparseArray_VecOfData
TObj_TIntSparseArray_VecOfData.Assign = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_Assign, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.Exchange = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_Exchange, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.Value = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_Value, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.ChangeValue = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_ChangeValue, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.__call__ = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData___call__, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.SetValue = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_SetValue, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.Extent = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_Extent, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.IsEmpty = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_IsEmpty, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.Find = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_Find, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.ChangeFind = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_ChangeFind, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.Bind = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_Bind, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.IsBound = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_IsBound, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData.UnBind = new_instancemethod(_TObj.TObj_TIntSparseArray_VecOfData_UnBind, None, TObj_TIntSparseArray_VecOfData)
TObj_TIntSparseArray_VecOfData_swigregister = _TObj.TObj_TIntSparseArray_VecOfData_swigregister
TObj_TIntSparseArray_VecOfData_swigregister(TObj_TIntSparseArray_VecOfData)

class TObj_TIntSparseArray_MapOfData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, theIncrement: 'Standard_Size'):
        _TObj.TObj_TIntSparseArray_MapOfData_swiginit(self, _TObj.new_TObj_TIntSparseArray_MapOfData(theIncrement))
    __swig_destroy__ = _TObj.delete_TObj_TIntSparseArray_MapOfData
TObj_TIntSparseArray_MapOfData.Assign = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_Assign, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.Exchange = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_Exchange, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.Value = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_Value, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.ChangeValue = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_ChangeValue, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.__call__ = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData___call__, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.SetValue = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_SetValue, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.Extent = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_Extent, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.IsEmpty = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_IsEmpty, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.Find = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_Find, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.ChangeFind = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_ChangeFind, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.Bind = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_Bind, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.IsBound = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_IsBound, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData.UnBind = new_instancemethod(_TObj.TObj_TIntSparseArray_MapOfData_UnBind, None, TObj_TIntSparseArray_MapOfData)
TObj_TIntSparseArray_MapOfData_swigregister = _TObj.TObj_TIntSparseArray_MapOfData_swigregister
TObj_TIntSparseArray_MapOfData_swigregister(TObj_TIntSparseArray_MapOfData)

class TObj_DataMapOfNameLabel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TObj.TObj_DataMapOfNameLabel_swiginit(self, _TObj.new_TObj_DataMapOfNameLabel(*args))
    __swig_destroy__ = _TObj.delete_TObj_DataMapOfNameLabel
TObj_DataMapOfNameLabel.begin = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_begin, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.end = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_end, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.cbegin = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_cbegin, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.cend = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_cend, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.Exchange = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_Exchange, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.Assign = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_Assign, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.Set = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_Set, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.ReSize = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_ReSize, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.Bind = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_Bind, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.Bound = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_Bound, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.IsBound = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_IsBound, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.UnBind = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_UnBind, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.Seek = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_Seek, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.Find = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_Find, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.ChangeSeek = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_ChangeSeek, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.ChangeFind = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_ChangeFind, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.__call__ = new_instancemethod(_TObj.TObj_DataMapOfNameLabel___call__, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.Clear = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_Clear, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel.Size = new_instancemethod(_TObj.TObj_DataMapOfNameLabel_Size, None, TObj_DataMapOfNameLabel)
TObj_DataMapOfNameLabel_swigregister = _TObj.TObj_DataMapOfNameLabel_swigregister
TObj_DataMapOfNameLabel_swigregister(TObj_DataMapOfNameLabel)

class TObj_DataMapOfObjectHSequenceOcafObjects(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TObj.TObj_DataMapOfObjectHSequenceOcafObjects_swiginit(self, _TObj.new_TObj_DataMapOfObjectHSequenceOcafObjects(*args))
    __swig_destroy__ = _TObj.delete_TObj_DataMapOfObjectHSequenceOcafObjects
TObj_DataMapOfObjectHSequenceOcafObjects.begin = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_begin, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.end = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_end, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.cbegin = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_cbegin, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.cend = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_cend, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.Exchange = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_Exchange, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.Assign = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_Assign, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.Set = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_Set, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.ReSize = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_ReSize, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.Bind = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_Bind, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.Bound = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_Bound, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.IsBound = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_IsBound, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.UnBind = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_UnBind, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.Seek = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_Seek, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.Find = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_Find, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.ChangeSeek = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_ChangeSeek, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.ChangeFind = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_ChangeFind, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.__call__ = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects___call__, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.Clear = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_Clear, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects.Size = new_instancemethod(_TObj.TObj_DataMapOfObjectHSequenceOcafObjects_Size, None, TObj_DataMapOfObjectHSequenceOcafObjects)
TObj_DataMapOfObjectHSequenceOcafObjects_swigregister = _TObj.TObj_DataMapOfObjectHSequenceOcafObjects_swigregister
TObj_DataMapOfObjectHSequenceOcafObjects_swigregister(TObj_DataMapOfObjectHSequenceOcafObjects)

class TObj_DataMapOfStringPointer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TObj.TObj_DataMapOfStringPointer_swiginit(self, _TObj.new_TObj_DataMapOfStringPointer(*args))
    __swig_destroy__ = _TObj.delete_TObj_DataMapOfStringPointer
TObj_DataMapOfStringPointer.begin = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_begin, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.end = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_end, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.cbegin = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_cbegin, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.cend = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_cend, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.Exchange = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_Exchange, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.Assign = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_Assign, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.Set = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_Set, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.ReSize = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_ReSize, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.Bind = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_Bind, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.Bound = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_Bound, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.IsBound = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_IsBound, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.UnBind = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_UnBind, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.Seek = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_Seek, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.Find = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_Find, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.ChangeSeek = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_ChangeSeek, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.ChangeFind = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_ChangeFind, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.__call__ = new_instancemethod(_TObj.TObj_DataMapOfStringPointer___call__, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.Clear = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_Clear, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer.Size = new_instancemethod(_TObj.TObj_DataMapOfStringPointer_Size, None, TObj_DataMapOfStringPointer)
TObj_DataMapOfStringPointer_swigregister = _TObj.TObj_DataMapOfStringPointer_swigregister
TObj_DataMapOfStringPointer_swigregister(TObj_DataMapOfStringPointer)

class TObj_SequenceOfIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TObj.TObj_SequenceOfIterator_swiginit(self, _TObj.new_TObj_SequenceOfIterator(*args))
    delNode = staticmethod(_TObj.TObj_SequenceOfIterator_delNode)
    __swig_destroy__ = _TObj.delete_TObj_SequenceOfIterator
TObj_SequenceOfIterator.begin = new_instancemethod(_TObj.TObj_SequenceOfIterator_begin, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.end = new_instancemethod(_TObj.TObj_SequenceOfIterator_end, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.cbegin = new_instancemethod(_TObj.TObj_SequenceOfIterator_cbegin, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.cend = new_instancemethod(_TObj.TObj_SequenceOfIterator_cend, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Size = new_instancemethod(_TObj.TObj_SequenceOfIterator_Size, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Length = new_instancemethod(_TObj.TObj_SequenceOfIterator_Length, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Lower = new_instancemethod(_TObj.TObj_SequenceOfIterator_Lower, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Upper = new_instancemethod(_TObj.TObj_SequenceOfIterator_Upper, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.IsEmpty = new_instancemethod(_TObj.TObj_SequenceOfIterator_IsEmpty, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Reverse = new_instancemethod(_TObj.TObj_SequenceOfIterator_Reverse, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Exchange = new_instancemethod(_TObj.TObj_SequenceOfIterator_Exchange, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Clear = new_instancemethod(_TObj.TObj_SequenceOfIterator_Clear, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Assign = new_instancemethod(_TObj.TObj_SequenceOfIterator_Assign, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Set = new_instancemethod(_TObj.TObj_SequenceOfIterator_Set, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Remove = new_instancemethod(_TObj.TObj_SequenceOfIterator_Remove, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Append = new_instancemethod(_TObj.TObj_SequenceOfIterator_Append, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Prepend = new_instancemethod(_TObj.TObj_SequenceOfIterator_Prepend, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.InsertBefore = new_instancemethod(_TObj.TObj_SequenceOfIterator_InsertBefore, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.InsertAfter = new_instancemethod(_TObj.TObj_SequenceOfIterator_InsertAfter, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Split = new_instancemethod(_TObj.TObj_SequenceOfIterator_Split, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.First = new_instancemethod(_TObj.TObj_SequenceOfIterator_First, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.ChangeFirst = new_instancemethod(_TObj.TObj_SequenceOfIterator_ChangeFirst, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Last = new_instancemethod(_TObj.TObj_SequenceOfIterator_Last, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.ChangeLast = new_instancemethod(_TObj.TObj_SequenceOfIterator_ChangeLast, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.Value = new_instancemethod(_TObj.TObj_SequenceOfIterator_Value, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.ChangeValue = new_instancemethod(_TObj.TObj_SequenceOfIterator_ChangeValue, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.__call__ = new_instancemethod(_TObj.TObj_SequenceOfIterator___call__, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator.SetValue = new_instancemethod(_TObj.TObj_SequenceOfIterator_SetValue, None, TObj_SequenceOfIterator)
TObj_SequenceOfIterator_swigregister = _TObj.TObj_SequenceOfIterator_swigregister
TObj_SequenceOfIterator_swigregister(TObj_SequenceOfIterator)

def TObj_SequenceOfIterator_delNode(theNode: 'NCollection_SeqNode *', theAl: 'TDF_HAllocator') -> "void":
    return _TObj.TObj_SequenceOfIterator_delNode(theNode, theAl)
TObj_SequenceOfIterator_delNode = _TObj.TObj_SequenceOfIterator_delNode

class TObj_SequenceOfObject(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TObj.TObj_SequenceOfObject_swiginit(self, _TObj.new_TObj_SequenceOfObject(*args))
    delNode = staticmethod(_TObj.TObj_SequenceOfObject_delNode)
    __swig_destroy__ = _TObj.delete_TObj_SequenceOfObject
TObj_SequenceOfObject.begin = new_instancemethod(_TObj.TObj_SequenceOfObject_begin, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.end = new_instancemethod(_TObj.TObj_SequenceOfObject_end, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.cbegin = new_instancemethod(_TObj.TObj_SequenceOfObject_cbegin, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.cend = new_instancemethod(_TObj.TObj_SequenceOfObject_cend, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Size = new_instancemethod(_TObj.TObj_SequenceOfObject_Size, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Length = new_instancemethod(_TObj.TObj_SequenceOfObject_Length, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Lower = new_instancemethod(_TObj.TObj_SequenceOfObject_Lower, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Upper = new_instancemethod(_TObj.TObj_SequenceOfObject_Upper, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.IsEmpty = new_instancemethod(_TObj.TObj_SequenceOfObject_IsEmpty, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Reverse = new_instancemethod(_TObj.TObj_SequenceOfObject_Reverse, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Exchange = new_instancemethod(_TObj.TObj_SequenceOfObject_Exchange, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Clear = new_instancemethod(_TObj.TObj_SequenceOfObject_Clear, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Assign = new_instancemethod(_TObj.TObj_SequenceOfObject_Assign, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Set = new_instancemethod(_TObj.TObj_SequenceOfObject_Set, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Remove = new_instancemethod(_TObj.TObj_SequenceOfObject_Remove, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Append = new_instancemethod(_TObj.TObj_SequenceOfObject_Append, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Prepend = new_instancemethod(_TObj.TObj_SequenceOfObject_Prepend, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.InsertBefore = new_instancemethod(_TObj.TObj_SequenceOfObject_InsertBefore, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.InsertAfter = new_instancemethod(_TObj.TObj_SequenceOfObject_InsertAfter, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Split = new_instancemethod(_TObj.TObj_SequenceOfObject_Split, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.First = new_instancemethod(_TObj.TObj_SequenceOfObject_First, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.ChangeFirst = new_instancemethod(_TObj.TObj_SequenceOfObject_ChangeFirst, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Last = new_instancemethod(_TObj.TObj_SequenceOfObject_Last, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.ChangeLast = new_instancemethod(_TObj.TObj_SequenceOfObject_ChangeLast, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.Value = new_instancemethod(_TObj.TObj_SequenceOfObject_Value, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.ChangeValue = new_instancemethod(_TObj.TObj_SequenceOfObject_ChangeValue, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.__call__ = new_instancemethod(_TObj.TObj_SequenceOfObject___call__, None, TObj_SequenceOfObject)
TObj_SequenceOfObject.SetValue = new_instancemethod(_TObj.TObj_SequenceOfObject_SetValue, None, TObj_SequenceOfObject)
TObj_SequenceOfObject_swigregister = _TObj.TObj_SequenceOfObject_swigregister
TObj_SequenceOfObject_swigregister(TObj_SequenceOfObject)

def TObj_SequenceOfObject_delNode(theNode: 'NCollection_SeqNode *', theAl: 'TDF_HAllocator') -> "void":
    return _TObj.TObj_SequenceOfObject_delNode(theNode, theAl)
TObj_SequenceOfObject_delNode = _TObj.TObj_SequenceOfObject_delNode

class TObj_Application(OCC.Core.TDocStd.TDocStd_Application):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CreateNewDocument(self, *args) -> "Standard_Boolean":
        """
        * Create the OCAF document from scratch
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:param theFormat:
        	:type theFormat: TCollection_ExtendedString
        	:rtype: bool
        """
        return _TObj.TObj_Application_CreateNewDocument(self, *args)


    def ErrorMessage(self, *args) -> "void":
        """
        * Signal error during Load or Save Default imiplementation is empty
        	:param theMsg:
        	:type theMsg: TCollection_ExtendedString
        	:param theLevel:
        	:type theLevel: Message_Gravity
        	:rtype: None
        * Signal error during Load or Save Default imiplementation invoke previous declaration with 0
        	:param theMsg:
        	:type theMsg: TCollection_ExtendedString
        	:rtype: None
        """
        return _TObj.TObj_Application_ErrorMessage(self, *args)


    def GetInstance(*args) -> "opencascade::handle< TObj_Application >":
        """
        * Returns static instance of the application
        	:rtype: opencascade::handle<TObj_Application>
        """
        return _TObj.TObj_Application_GetInstance(*args)

    GetInstance = staticmethod(GetInstance)

    def IsVerbose(self, *args) -> "Standard_Boolean":
        """
        * Returns the verbose flag
        	:rtype: bool
        """
        return _TObj.TObj_Application_IsVerbose(self, *args)


    def LoadDocument(self, *args) -> "Standard_Boolean":
        """
        * Loading the OCAF document from a file
        	:param theSourceFile:
        	:type theSourceFile: TCollection_ExtendedString
        	:param theTargetDoc:
        	:type theTargetDoc: TDocStd_Document
        	:rtype: bool
        """
        return _TObj.TObj_Application_LoadDocument(self, *args)


    def Messenger(self, *args) -> "opencascade::handle< Message_Messenger > &":
        """
        * Returns reference to associated messenger handle
        	:rtype: opencascade::handle<Message_Messenger>
        """
        return _TObj.TObj_Application_Messenger(self, *args)


    def SaveDocument(self, *args) -> "Standard_Boolean":
        """
        * /** * Load/Save support */ Saving the OCAF document to a file
        	:param theSourceDoc:
        	:type theSourceDoc: TDocStd_Document
        	:param theTargetFile:
        	:type theTargetFile: TCollection_ExtendedString
        	:rtype: bool
        """
        return _TObj.TObj_Application_SaveDocument(self, *args)


    def SetVerbose(self, *args) -> "void":
        """
        * Sets the verbose flag, meaning that load/save models should show CPU and elapsed times
        	:param isVerbose:
        	:type isVerbose: bool
        	:rtype: None
        """
        return _TObj.TObj_Application_SetVerbose(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TObj_Application_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_Application
TObj_Application.CreateNewDocument = new_instancemethod(_TObj.TObj_Application_CreateNewDocument, None, TObj_Application)
TObj_Application.ErrorMessage = new_instancemethod(_TObj.TObj_Application_ErrorMessage, None, TObj_Application)
TObj_Application.IsVerbose = new_instancemethod(_TObj.TObj_Application_IsVerbose, None, TObj_Application)
TObj_Application.LoadDocument = new_instancemethod(_TObj.TObj_Application_LoadDocument, None, TObj_Application)
TObj_Application.Messenger = new_instancemethod(_TObj.TObj_Application_Messenger, None, TObj_Application)
TObj_Application.SaveDocument = new_instancemethod(_TObj.TObj_Application_SaveDocument, None, TObj_Application)
TObj_Application.SetVerbose = new_instancemethod(_TObj.TObj_Application_SetVerbose, None, TObj_Application)
TObj_Application_swigregister = _TObj.TObj_Application_swigregister
TObj_Application_swigregister(TObj_Application)

def TObj_Application_GetInstance(*args) -> "opencascade::handle< TObj_Application >":
    """
    * Returns static instance of the application
    	:rtype: opencascade::handle<TObj_Application>
    """
    return _TObj.TObj_Application_GetInstance(*args)

class TObj_Assistant(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BindModel(*args) -> "void":
        """
        * Binds model to the map
        	:param theModel:
        	:type theModel: TObj_Model
        	:rtype: None
        """
        return _TObj.TObj_Assistant_BindModel(*args)

    BindModel = staticmethod(BindModel)

    def BindType(*args) -> "Standard_Integer":
        """
        * Binds Standard_Type to the map; returns index of bound type
        	:param theType:
        	:type theType: Standard_Type
        	:rtype: int
        """
        return _TObj.TObj_Assistant_BindType(*args)

    BindType = staticmethod(BindType)

    def ClearModelMap(*args) -> "void":
        """
        * Clears all records from the model map
        	:rtype: None
        """
        return _TObj.TObj_Assistant_ClearModelMap(*args)

    ClearModelMap = staticmethod(ClearModelMap)

    def ClearTypeMap(*args) -> "void":
        """
        * Clears map of types
        	:rtype: None
        """
        return _TObj.TObj_Assistant_ClearTypeMap(*args)

    ClearTypeMap = staticmethod(ClearTypeMap)

    def FindModel(*args) -> "opencascade::handle< TObj_Model >":
        """
        * /** * Interface for DataMap of Modeller name */ Finds model by name
        	:param theName:
        	:type theName: char *
        	:rtype: opencascade::handle<TObj_Model>
        """
        return _TObj.TObj_Assistant_FindModel(*args)

    FindModel = staticmethod(FindModel)

    def FindType(*args) -> "opencascade::handle< Standard_Type >":
        """
        * /** * Interface for Map of Standard Types */ Finds Standard_Type by index; returns NULL handle if not found
        	:param theTypeIndex:
        	:type theTypeIndex: int
        	:rtype: opencascade::handle<Standard_Type>
        """
        return _TObj.TObj_Assistant_FindType(*args)

    FindType = staticmethod(FindType)

    def FindTypeIndex(*args) -> "Standard_Integer":
        """
        * Rinds index by Standard_Type; returns 0 if not found
        	:param theType:
        	:type theType: Standard_Type
        	:rtype: int
        """
        return _TObj.TObj_Assistant_FindTypeIndex(*args)

    FindTypeIndex = staticmethod(FindTypeIndex)

    def GetAppVersion(*args) -> "Standard_Integer":
        """
        * Returns the version of application which wrote the currently read document. Returns 0 if it has not been set yet for the current document.
        	:rtype: int
        """
        return _TObj.TObj_Assistant_GetAppVersion(*args)

    GetAppVersion = staticmethod(GetAppVersion)

    def GetCurrentModel(*args) -> "opencascade::handle< TObj_Model >":
        """
        * Returns current model
        	:rtype: opencascade::handle<TObj_Model>
        """
        return _TObj.TObj_Assistant_GetCurrentModel(*args)

    GetCurrentModel = staticmethod(GetCurrentModel)

    def SetCurrentModel(*args) -> "void":
        """
        * /** * Interface to the current model */ Sets current model
        	:param theModel:
        	:type theModel: TObj_Model
        	:rtype: None
        """
        return _TObj.TObj_Assistant_SetCurrentModel(*args)

    SetCurrentModel = staticmethod(SetCurrentModel)

    def UnSetCurrentModel(*args) -> "void":
        """
        * Unsets current model
        	:rtype: None
        """
        return _TObj.TObj_Assistant_UnSetCurrentModel(*args)

    UnSetCurrentModel = staticmethod(UnSetCurrentModel)

    __repr__ = _dumps_object


    def __init__(self):
        _TObj.TObj_Assistant_swiginit(self, _TObj.new_TObj_Assistant())
    __swig_destroy__ = _TObj.delete_TObj_Assistant
TObj_Assistant_swigregister = _TObj.TObj_Assistant_swigregister
TObj_Assistant_swigregister(TObj_Assistant)

def TObj_Assistant_BindModel(*args) -> "void":
    """
    * Binds model to the map
    	:param theModel:
    	:type theModel: TObj_Model
    	:rtype: None
    """
    return _TObj.TObj_Assistant_BindModel(*args)

def TObj_Assistant_BindType(*args) -> "Standard_Integer":
    """
    * Binds Standard_Type to the map; returns index of bound type
    	:param theType:
    	:type theType: Standard_Type
    	:rtype: int
    """
    return _TObj.TObj_Assistant_BindType(*args)

def TObj_Assistant_ClearModelMap(*args) -> "void":
    """
    * Clears all records from the model map
    	:rtype: None
    """
    return _TObj.TObj_Assistant_ClearModelMap(*args)

def TObj_Assistant_ClearTypeMap(*args) -> "void":
    """
    * Clears map of types
    	:rtype: None
    """
    return _TObj.TObj_Assistant_ClearTypeMap(*args)

def TObj_Assistant_FindModel(*args) -> "opencascade::handle< TObj_Model >":
    """
    * /** * Interface for DataMap of Modeller name */ Finds model by name
    	:param theName:
    	:type theName: char *
    	:rtype: opencascade::handle<TObj_Model>
    """
    return _TObj.TObj_Assistant_FindModel(*args)

def TObj_Assistant_FindType(*args) -> "opencascade::handle< Standard_Type >":
    """
    * /** * Interface for Map of Standard Types */ Finds Standard_Type by index; returns NULL handle if not found
    	:param theTypeIndex:
    	:type theTypeIndex: int
    	:rtype: opencascade::handle<Standard_Type>
    """
    return _TObj.TObj_Assistant_FindType(*args)

def TObj_Assistant_FindTypeIndex(*args) -> "Standard_Integer":
    """
    * Rinds index by Standard_Type; returns 0 if not found
    	:param theType:
    	:type theType: Standard_Type
    	:rtype: int
    """
    return _TObj.TObj_Assistant_FindTypeIndex(*args)

def TObj_Assistant_GetAppVersion(*args) -> "Standard_Integer":
    """
    * Returns the version of application which wrote the currently read document. Returns 0 if it has not been set yet for the current document.
    	:rtype: int
    """
    return _TObj.TObj_Assistant_GetAppVersion(*args)

def TObj_Assistant_GetCurrentModel(*args) -> "opencascade::handle< TObj_Model >":
    """
    * Returns current model
    	:rtype: opencascade::handle<TObj_Model>
    """
    return _TObj.TObj_Assistant_GetCurrentModel(*args)

def TObj_Assistant_SetCurrentModel(*args) -> "void":
    """
    * /** * Interface to the current model */ Sets current model
    	:param theModel:
    	:type theModel: TObj_Model
    	:rtype: None
    """
    return _TObj.TObj_Assistant_SetCurrentModel(*args)

def TObj_Assistant_UnSetCurrentModel(*args) -> "void":
    """
    * Unsets current model
    	:rtype: None
    """
    return _TObj.TObj_Assistant_UnSetCurrentModel(*args)

class TObj_CheckModel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetModel(self, *args) -> "opencascade::handle< TObj_Model > const &":
        """
        * Returns the checked model
        	:rtype: opencascade::handle<TObj_Model>
        """
        return _TObj.TObj_CheckModel_GetModel(self, *args)


    def IsToFix(self, *args) -> "Standard_Boolean":
        """
        * Returns true if it is allowed to fix inconsistencies
        	:rtype: bool
        """
        return _TObj.TObj_CheckModel_IsToFix(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        * Performs all checks. Descendants should call parent method before doing own checks. This implementation checks OCAF references and back references between objects of the model. Returns true if no inconsistencies found.
        	:rtype: bool
        """
        return _TObj.TObj_CheckModel_Perform(self, *args)


    def SetToFix(self, *args) -> "void":
        """
        * Sets flag allowing fixing inconsistencies
        	:param theToFix:
        	:type theToFix: bool
        	:rtype: None
        """
        return _TObj.TObj_CheckModel_SetToFix(self, *args)


    def __init__(self, *args):
        """
        * Initialize checker by model
        	:param theModel:
        	:type theModel: TObj_Model
        	:rtype: None
        """
        _TObj.TObj_CheckModel_swiginit(self, _TObj.new_TObj_CheckModel(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TObj_CheckModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_CheckModel
TObj_CheckModel.GetModel = new_instancemethod(_TObj.TObj_CheckModel_GetModel, None, TObj_CheckModel)
TObj_CheckModel.IsToFix = new_instancemethod(_TObj.TObj_CheckModel_IsToFix, None, TObj_CheckModel)
TObj_CheckModel.Perform = new_instancemethod(_TObj.TObj_CheckModel_Perform, None, TObj_CheckModel)
TObj_CheckModel.SetToFix = new_instancemethod(_TObj.TObj_CheckModel_SetToFix, None, TObj_CheckModel)
TObj_CheckModel_swigregister = _TObj.TObj_CheckModel_swigregister
TObj_CheckModel_swigregister(TObj_CheckModel)

class TObj_Model(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AbortCommand(self, *args) -> "void":
        """
        * Abort the Command transaction. Do nothing If there is no Command transaction open.
        	:rtype: None
        """
        return _TObj.TObj_Model_AbortCommand(self, *args)


    def Close(self, *args) -> "Standard_Boolean":
        """
        * /** * Work with document */ Close the model
        	:rtype: bool
        """
        return _TObj.TObj_Model_Close(self, *args)


    def CloseDocument(self, *args) -> "void":
        """
        * Close Free OCAF document
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:rtype: None
        """
        return _TObj.TObj_Model_CloseDocument(self, *args)


    def CommitCommand(self, *args) -> "void":
        """
        * Commit the Command transaction. Do nothing If there is no Command transaction open.
        	:rtype: None
        """
        return _TObj.TObj_Model_CommitCommand(self, *args)


    def CopyReferences(self, *args) -> "void":
        """
        * Copy references from me to the other
        	:param theTarget:
        	:type theTarget: TObj_Model
        	:param theRelocTable:
        	:type theRelocTable: TDF_RelocationTable
        	:rtype: None
        """
        return _TObj.TObj_Model_CopyReferences(self, *args)


    def FindObject(self, *args) -> "opencascade::handle< TObj_Object >":
        """
        * Returns an Object by given Name (or Null if not found).
        	:param theName:
        	:type theName: TCollection_HExtendedString
        	:param theDictionary:
        	:type theDictionary: TObj_TNameContainer
        	:rtype: opencascade::handle<TObj_Object>
        """
        return _TObj.TObj_Model_FindObject(self, *args)


    def GetApplication(self, *args) -> "opencascade::handle< TObj_Application > const":
        """
        * /** * Methods for obtaining application */ Returns handle to static instance of the relevant application class
        	:rtype: opencascade::handle<TObj_Application>
        """
        return _TObj.TObj_Model_GetApplication(self, *args)


    def GetChecker(self, *args) -> "opencascade::handle< TObj_CheckModel >":
        """
        * Returns the tool checking model consistency. Descendant may redefine it to return its own tool.
        	:rtype: opencascade::handle<TObj_CheckModel>
        """
        return _TObj.TObj_Model_GetChecker(self, *args)


    def GetChildren(self, *args) -> "opencascade::handle< TObj_ObjectIterator >":
        """
        * Returns an Iterator on objects in the main partition
        	:rtype: opencascade::handle<TObj_ObjectIterator>
        """
        return _TObj.TObj_Model_GetChildren(self, *args)


    def GetDictionary(self, *args) -> "opencascade::handle< TObj_TNameContainer >":
        """
        * /** * Internal methods */ Returns the map of names of the objects
        	:rtype: opencascade::handle<TObj_TNameContainer>
        """
        return _TObj.TObj_Model_GetDictionary(self, *args)


    def GetDocument(self, *args) -> "opencascade::handle< TDocStd_Document >":
        """
        * Returns OCAF document of Model
        	:rtype: opencascade::handle<TDocStd_Document>
        """
        return _TObj.TObj_Model_GetDocument(self, *args)


    def GetDocumentModel(*args) -> "opencascade::handle< TObj_Model >":
        """
        * Returns model which contains a document with the label, or NULL handle if label is NULL
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<TObj_Model>
        """
        return _TObj.TObj_Model_GetDocumentModel(*args)

    GetDocumentModel = staticmethod(GetDocumentModel)

    def GetFile(self, *args) -> "opencascade::handle< TCollection_HExtendedString >":
        """
        * Returns the full file name this model is to be saved to, or null if the model was not saved yet
        	:rtype: opencascade::handle<TCollection_HExtendedString>
        """
        return _TObj.TObj_Model_GetFile(self, *args)


    def GetFormat(self, *args) -> "TCollection_ExtendedString":
        """
        * /** * Methods for obtaining the version of Format */ Returns the format for save/restore. This implementation returns 'BinOcaf'. The method should be redefined for those models that should use another format.
        	:rtype: TCollection_ExtendedString
        """
        return _TObj.TObj_Model_GetFormat(self, *args)


    def GetFormatVersion(self, *args) -> "Standard_Integer":
        """
        * Returns the version of format stored in TObj file
        	:rtype: int
        """
        return _TObj.TObj_Model_GetFormatVersion(self, *args)


    def GetGUID(self, *args) -> "Standard_GUID":
        """
        * /** * Definition of interface GUID */ Defines interface GUID for TObj_Model
        	:rtype: Standard_GUID
        """
        return _TObj.TObj_Model_GetGUID(self, *args)


    def GetLabel(self, *args) -> "TDF_Label":
        """
        * /** * OCAF methods */ Returns OCAF label on which model data are stored.
        	:rtype: TDF_Label
        """
        return _TObj.TObj_Model_GetLabel(self, *args)


    def GetMainPartition(self, *args) -> "opencascade::handle< TObj_Partition >":
        """
        * Returns root object of model
        	:rtype: opencascade::handle<TObj_Partition>
        """
        return _TObj.TObj_Model_GetMainPartition(self, *args)


    def GetModelName(self, *args) -> "opencascade::handle< TCollection_HExtendedString >":
        """
        * /** * Methods for supporting unique naming of the objects in model */ Returns the name of the model
        	:rtype: opencascade::handle<TCollection_HExtendedString>
        """
        return _TObj.TObj_Model_GetModelName(self, *args)


    def GetObjects(self, *args) -> "opencascade::handle< TObj_ObjectIterator >":
        """
        * /** * Access to the objects in the model */ Returns an Iterator on all objects in the Model
        	:rtype: opencascade::handle<TObj_ObjectIterator>
        """
        return _TObj.TObj_Model_GetObjects(self, *args)


    def GetRoot(self, *args) -> "opencascade::handle< TObj_Object >":
        """
        * /** * Methods for iteration on the model */ Returns root object of model
        	:rtype: opencascade::handle<TObj_Object>
        """
        return _TObj.TObj_Model_GetRoot(self, *args)


    def HasOpenCommand(self, *args) -> "Standard_Boolean":
        """
        * /** * API for transaction mechanism */ Returns True if a Command transaction is open Starting, finishing the transaction
        	:rtype: bool
        """
        return _TObj.TObj_Model_HasOpenCommand(self, *args)


    def IsModified(self, *args) -> "Standard_Boolean":
        """
        * Modification status
        	:rtype: bool
        """
        return _TObj.TObj_Model_IsModified(self, *args)


    def IsRegisteredName(self, *args) -> "Standard_Boolean":
        """
        * Returns True is name is registered in the names map The input argument may be NULL handle, then model check in own global container
        	:param theName:
        	:type theName: TCollection_HExtendedString
        	:param theDictionary:
        	:type theDictionary: TObj_TNameContainer
        	:rtype: bool
        """
        return _TObj.TObj_Model_IsRegisteredName(self, *args)


    def Load(self, *args) -> "Standard_Boolean":
        """
        * /** * Implementation of Load/Save for OCAF based models */ Load the OCAF model from a file. If the filename is empty or file does not exists, it just initializes model by empty data.
        	:param theFile:
        	:type theFile: TCollection_ExtendedString
        	:rtype: bool
        """
        return _TObj.TObj_Model_Load(self, *args)


    def Messenger(self, *args) -> "opencascade::handle< Message_Messenger >":
        """
        * Get messenger used for messages output (by default, the messenger from application is used)
        	:rtype: opencascade::handle<Message_Messenger>
        """
        return _TObj.TObj_Model_Messenger(self, *args)


    def NewEmpty(self, *args) -> "opencascade::handle< TObj_Model >":
        """
        * This function have to create a new model with type like me
        	:rtype: opencascade::handle<TObj_Model>
        """
        return _TObj.TObj_Model_NewEmpty(self, *args)


    def OpenCommand(self, *args) -> "void":
        """
        * Open a new command transaction.
        	:rtype: None
        """
        return _TObj.TObj_Model_OpenCommand(self, *args)


    def Paste(self, *args) -> "Standard_Boolean":
        """
        * /** * Methods for clone model */ Pastes me to the new model references will not be copied if theRelocTable is not 0 if theRelocTable is not NULL theRelocTable is filled by objects
        	:param theModel:
        	:type theModel: TObj_Model
        	:param theRelocTable: default value is 0
        	:type theRelocTable: TDF_RelocationTable
        	:rtype: bool
        """
        return _TObj.TObj_Model_Paste(self, *args)


    def RegisterName(self, *args) -> "void":
        """
        * Register name in the map The input argument may be NULL handle, then model check in own global container
        	:param theName:
        	:type theName: TCollection_HExtendedString
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theDictionary:
        	:type theDictionary: TObj_TNameContainer
        	:rtype: None
        """
        return _TObj.TObj_Model_RegisterName(self, *args)


    def Save(self, *args) -> "Standard_Boolean":
        """
        * Save the model to the same file
        	:rtype: bool
        """
        return _TObj.TObj_Model_Save(self, *args)


    def SaveAs(self, *args) -> "Standard_Boolean":
        """
        * Save the model to a file
        	:param theFile:
        	:type theFile: TCollection_ExtendedString
        	:rtype: bool
        """
        return _TObj.TObj_Model_SaveAs(self, *args)


    def SetLabel(self, *args) -> "void":
        """
        * Sets OCAF label on which model data are stored. Used by persistence mechanism.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: None
        """
        return _TObj.TObj_Model_SetLabel(self, *args)


    def SetMessenger(self, *args) -> "void":
        """
        * /** * Messages mechanism */ Set messenger to use for messages output
        	:param theMsgr:
        	:type theMsgr: Message_Messenger
        	:rtype: None
        """
        return _TObj.TObj_Model_SetMessenger(self, *args)


    def SetModified(self, *args) -> "void":
        """
        * Sets modification status
        	:param theModified:
        	:type theModified: bool
        	:rtype: None
        """
        return _TObj.TObj_Model_SetModified(self, *args)


    def SetNewName(*args) -> "void":
        """
        * Sets new unique name for the object
        	:param theObject:
        	:type theObject: TObj_Object
        	:rtype: None
        """
        return _TObj.TObj_Model_SetNewName(*args)

    SetNewName = staticmethod(SetNewName)

    def UnRegisterName(self, *args) -> "void":
        """
        * Unregisters name from the map The input argument may be NULL handle, then model check in own global container
        	:param theName:
        	:type theName: TCollection_HExtendedString
        	:param theDictionary:
        	:type theDictionary: TObj_TNameContainer
        	:rtype: None
        """
        return _TObj.TObj_Model_UnRegisterName(self, *args)


    def Update(self, *args) -> "Standard_Boolean":
        """
        * /** * Methods for updating model */ this method is called before activating this model
        	:rtype: bool
        """
        return _TObj.TObj_Model_Update(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TObj_Model_DownCast(t)


    __repr__ = _dumps_object

TObj_Model.AbortCommand = new_instancemethod(_TObj.TObj_Model_AbortCommand, None, TObj_Model)
TObj_Model.Close = new_instancemethod(_TObj.TObj_Model_Close, None, TObj_Model)
TObj_Model.CloseDocument = new_instancemethod(_TObj.TObj_Model_CloseDocument, None, TObj_Model)
TObj_Model.CommitCommand = new_instancemethod(_TObj.TObj_Model_CommitCommand, None, TObj_Model)
TObj_Model.CopyReferences = new_instancemethod(_TObj.TObj_Model_CopyReferences, None, TObj_Model)
TObj_Model.FindObject = new_instancemethod(_TObj.TObj_Model_FindObject, None, TObj_Model)
TObj_Model.GetApplication = new_instancemethod(_TObj.TObj_Model_GetApplication, None, TObj_Model)
TObj_Model.GetChecker = new_instancemethod(_TObj.TObj_Model_GetChecker, None, TObj_Model)
TObj_Model.GetChildren = new_instancemethod(_TObj.TObj_Model_GetChildren, None, TObj_Model)
TObj_Model.GetDictionary = new_instancemethod(_TObj.TObj_Model_GetDictionary, None, TObj_Model)
TObj_Model.GetDocument = new_instancemethod(_TObj.TObj_Model_GetDocument, None, TObj_Model)
TObj_Model.GetFile = new_instancemethod(_TObj.TObj_Model_GetFile, None, TObj_Model)
TObj_Model.GetFormat = new_instancemethod(_TObj.TObj_Model_GetFormat, None, TObj_Model)
TObj_Model.GetFormatVersion = new_instancemethod(_TObj.TObj_Model_GetFormatVersion, None, TObj_Model)
TObj_Model.GetGUID = new_instancemethod(_TObj.TObj_Model_GetGUID, None, TObj_Model)
TObj_Model.GetLabel = new_instancemethod(_TObj.TObj_Model_GetLabel, None, TObj_Model)
TObj_Model.GetMainPartition = new_instancemethod(_TObj.TObj_Model_GetMainPartition, None, TObj_Model)
TObj_Model.GetModelName = new_instancemethod(_TObj.TObj_Model_GetModelName, None, TObj_Model)
TObj_Model.GetObjects = new_instancemethod(_TObj.TObj_Model_GetObjects, None, TObj_Model)
TObj_Model.GetRoot = new_instancemethod(_TObj.TObj_Model_GetRoot, None, TObj_Model)
TObj_Model.HasOpenCommand = new_instancemethod(_TObj.TObj_Model_HasOpenCommand, None, TObj_Model)
TObj_Model.IsModified = new_instancemethod(_TObj.TObj_Model_IsModified, None, TObj_Model)
TObj_Model.IsRegisteredName = new_instancemethod(_TObj.TObj_Model_IsRegisteredName, None, TObj_Model)
TObj_Model.Load = new_instancemethod(_TObj.TObj_Model_Load, None, TObj_Model)
TObj_Model.Messenger = new_instancemethod(_TObj.TObj_Model_Messenger, None, TObj_Model)
TObj_Model.NewEmpty = new_instancemethod(_TObj.TObj_Model_NewEmpty, None, TObj_Model)
TObj_Model.OpenCommand = new_instancemethod(_TObj.TObj_Model_OpenCommand, None, TObj_Model)
TObj_Model.Paste = new_instancemethod(_TObj.TObj_Model_Paste, None, TObj_Model)
TObj_Model.RegisterName = new_instancemethod(_TObj.TObj_Model_RegisterName, None, TObj_Model)
TObj_Model.Save = new_instancemethod(_TObj.TObj_Model_Save, None, TObj_Model)
TObj_Model.SaveAs = new_instancemethod(_TObj.TObj_Model_SaveAs, None, TObj_Model)
TObj_Model.SetLabel = new_instancemethod(_TObj.TObj_Model_SetLabel, None, TObj_Model)
TObj_Model.SetMessenger = new_instancemethod(_TObj.TObj_Model_SetMessenger, None, TObj_Model)
TObj_Model.SetModified = new_instancemethod(_TObj.TObj_Model_SetModified, None, TObj_Model)
TObj_Model.UnRegisterName = new_instancemethod(_TObj.TObj_Model_UnRegisterName, None, TObj_Model)
TObj_Model.Update = new_instancemethod(_TObj.TObj_Model_Update, None, TObj_Model)
TObj_Model_swigregister = _TObj.TObj_Model_swigregister
TObj_Model_swigregister(TObj_Model)

def TObj_Model_GetDocumentModel(*args) -> "opencascade::handle< TObj_Model >":
    """
    * Returns model which contains a document with the label, or NULL handle if label is NULL
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<TObj_Model>
    """
    return _TObj.TObj_Model_GetDocumentModel(*args)

def TObj_Model_SetNewName(*args) -> "void":
    """
    * Sets new unique name for the object
    	:param theObject:
    	:type theObject: TObj_Object
    	:rtype: None
    """
    return _TObj.TObj_Model_SetNewName(*args)

class TObj_Object(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Visible = _TObj.TObj_Object_Visible
    ObjectState_Hidden = _TObj.TObj_Object_ObjectState_Hidden
    ObjectState_Saved = _TObj.TObj_Object_ObjectState_Saved
    ObjectState_Imported = _TObj.TObj_Object_ObjectState_Imported
    ObjectState_ImportedByFile = _TObj.TObj_Object_ObjectState_ImportedByFile
    ObjectState_Ordered = _TObj.TObj_Object_ObjectState_Ordered

    def AddBackReference(self, *args) -> "void":
        """
        * Registers another object as being dependent on this one. Stores back references under sublabel 2 (purely transient data, not subject to persistency).
        	:param theObject:
        	:type theObject: TObj_Object
        	:rtype: None
        """
        return _TObj.TObj_Object_AddBackReference(self, *args)


    def AfterRetrieval(self, *args) -> "void":
        """
        * /** * Method for updating object afrer restoring */ Preforms updating the links and dependances of the object which are not stored in persistence. Should be redefined if necessary.
        	:rtype: None
        """
        return _TObj.TObj_Object_AfterRetrieval(self, *args)


    def BeforeForgetReference(self, *args) -> "void":
        """
        * Invokes from TObj_TReference::BeforeForget(). theLabel - label on that reference become removed Default implementation is empty
        	:param &:
        	:type &: TDF_Label
        	:rtype: None
        """
        return _TObj.TObj_Object_BeforeForgetReference(self, *args)


    def BeforeStoring(self, *args) -> "void":
        """
        * Preforms storing the objects transient fields in OCAF document which were outside transaction mechanism. Default implementation doesnot nothing
        	:rtype: None
        """
        return _TObj.TObj_Object_BeforeStoring(self, *args)


    def CanDetach(self, *args) -> "Standard_Boolean":
        """
        * /** * Methods for deleting the object */ Checks if object can be detached with specified mode
        	:param theMode: default value is TObj_FreeOnly
        	:type theMode: TObj_DeletingMode
        	:rtype: bool
        """
        return _TObj.TObj_Object_CanDetach(self, *args)


    def CanRemoveReference(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the referred object theObject can be deleted without deletion of this object. Default implementation does nothing and returns False.
        	:param theObject:
        	:type theObject: TObj_Object
        	:rtype: bool
        """
        return _TObj.TObj_Object_CanRemoveReference(self, *args)


    def ClearBackReferences(self, *args) -> "void":
        """
        * The default implementation just clear the back references container
        	:rtype: None
        """
        return _TObj.TObj_Object_ClearBackReferences(self, *args)


    def ClearFlags(self, *args) -> "void":
        """
        * clears flags by the mask.
        	:param theMask: default value is ~0
        	:type theMask: int
        	:rtype: None
        """
        return _TObj.TObj_Object_ClearFlags(self, *args)


    def Clone(self, *args) -> "opencascade::handle< TObj_Object >":
        """
        * /** * Cloning related methods */ Copy me to other label theTargetLabel New object will not have all the reference that has me. Coping object with data and childs, but change name by adding string '_copy' As result return handle of new object (null handle is something wrong) NOTE: BackReferences not coping. After clonning all objects it is neccessary to call copy references with the same relocation table
        	:param theTargetLabel:
        	:type theTargetLabel: TDF_Label
        	:param theRelocTable: default value is 0
        	:type theRelocTable: TDF_RelocationTable
        	:rtype: opencascade::handle<TObj_Object>
        """
        return _TObj.TObj_Object_Clone(self, *args)


    def CopyChildren(self, *args) -> "void":
        """
        * Coping the children from source label to the target.
        	:param theTargetLabel:
        	:type theTargetLabel: TDF_Label
        	:param theRelocTable:
        	:type theRelocTable: TDF_RelocationTable
        	:rtype: None
        """
        return _TObj.TObj_Object_CopyChildren(self, *args)


    def CopyReferences(self, *args) -> "void":
        """
        * Coping the references. return Standard_False is Target object is different type
        	:param theTargetObject:
        	:type theTargetObject: TObj_Object
        	:param theRelocTable:
        	:type theRelocTable: TDF_RelocationTable
        	:rtype: None
        """
        return _TObj.TObj_Object_CopyReferences(self, *args)


    def Detach(*args) -> "Standard_Boolean":
        """
        * Deletes the object from the model. The dependent objects are either deleted or modified when possible (see description of TObj_DeletingMode enumeration for more details) Returns True if deletion was successful. Checks if object can be deleted. Should be redefined for each specific kind of object
        	:param theMode: default value is TObj_FreeOnly
        	:type theMode: TObj_DeletingMode
        	:rtype: bool
        * Deletes the object from the label. Checks if object can be deleted. Finds object on the label and detaches it by calling previos method. Returns true if there is no object on the label after detaching
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theMode: default value is TObj_FreeOnly
        	:type theMode: TObj_DeletingMode
        	:rtype: bool
        """
        return _TObj.TObj_Object_Detach(*args)

    Detach = staticmethod(Detach)

    def GetBackReferences(self, *args) -> "opencascade::handle< TObj_ObjectIterator >":
        """
        * Returns iterator for the objects which depend on this one. These reffering objects may belong to other models. theType narrows a variety of iterated objects
        	:param theType: default value is NULL
        	:type theType: Standard_Type
        	:rtype: opencascade::handle<TObj_ObjectIterator>
        """
        return _TObj.TObj_Object_GetBackReferences(self, *args)


    def GetBadReference(self, *args) -> "Standard_Boolean":
        """
        * Return True if this refers to the model theRoot belongs to and a referred label is not a descendant of theRoot. In this case theBadReference returns the currently referred label.
        	:param theRoot:
        	:type theRoot: TDF_Label
        	:param theBadReference:
        	:type theBadReference: TDF_Label
        	:rtype: bool
        """
        return _TObj.TObj_Object_GetBadReference(self, *args)


    def GetChildLabel(self, *args) -> "TDF_Label":
        """
        * Returns the label under which children are stored
        	:rtype: TDF_Label
        """
        return _TObj.TObj_Object_GetChildLabel(self, *args)


    def GetChildren(self, *args) -> "opencascade::handle< TObj_ObjectIterator >":
        """
        * Returns iterator for the child objects. This method provides tree-like view of the objects hierarchy. The references to other objects are not considered as children. theType narrows a variety of iterated objects The default implementation search for children on 1 sublavel of the children sub label
        	:param theType: default value is NULL
        	:type theType: Standard_Type
        	:rtype: opencascade::handle<TObj_ObjectIterator>
        """
        return _TObj.TObj_Object_GetChildren(self, *args)


    def GetDataLabel(self, *args) -> "TDF_Label":
        """
        * Returns the label which is the root for data OCAF sub-tree
        	:rtype: TDF_Label
        """
        return _TObj.TObj_Object_GetDataLabel(self, *args)


    def GetDictionary(self, *args) -> "opencascade::handle< TObj_TNameContainer >":
        """
        * /** * Methods hanling name of the object */ Returns the map of names of the objects Default implementation returns global Dictionary of the model
        	:rtype: opencascade::handle<TObj_TNameContainer>
        """
        return _TObj.TObj_Object_GetDictionary(self, *args)


    def GetFatherObject(self, *args) -> "opencascade::handle< TObj_Object >":
        """
        * Returns the father object, which may be NULL theType gives type of father object to search
        	:param theType: default value is NULL
        	:type theType: Standard_Type
        	:rtype: opencascade::handle<TObj_Object>
        """
        return _TObj.TObj_Object_GetFatherObject(self, *args)


    def GetFlags(self, *args) -> "Standard_Integer":
        """
        * Returns mask of seted flags
        	:rtype: int
        """
        return _TObj.TObj_Object_GetFlags(self, *args)


    def GetLabel(self, *args) -> "TDF_Label":
        """
        * /** * Access to the OCAF-specific data */ Returns the OCAF label on which object`s data are stored
        	:rtype: TDF_Label
        """
        return _TObj.TObj_Object_GetLabel(self, *args)


    def GetModel(self, *args) -> "opencascade::handle< TObj_Model >":
        """
        * /** * Virtual methods */ Returns the model to which the object belongs
        	:rtype: opencascade::handle<TObj_Model>
        """
        return _TObj.TObj_Object_GetModel(self, *args)


    def GetName(self, *args) -> "Standard_Boolean":
        """
        * Returns the name of the object (empty string if object has no name)
        	:rtype: opencascade::handle<TCollection_HExtendedString>
        * Returns the Standard_True is object has name and returns name to theName
        	:param theName:
        	:type theName: TCollection_ExtendedString
        	:rtype: bool
        * Returns the Standard_True is object has name and returns name to theName
        	:param theName:
        	:type theName: TCollection_AsciiString
        	:rtype: bool
        """
        return _TObj.TObj_Object_GetName(self, *args)


    def GetNameForClone(self, *args) -> "opencascade::handle< TCollection_HExtendedString >":
        """
        * Returns name for copy default implementation returns the same name
        	:param &:
        	:type &: TObj_Object
        	:rtype: opencascade::handle<TCollection_HExtendedString>
        """
        return _TObj.TObj_Object_GetNameForClone(self, *args)


    def GetObj(*args) -> "Standard_Boolean":
        """
        * /** * methods for object retrieval */ Returns the Object attached to a given label. Returns False if no object of type TObj_Object is stored on the specified label. If isSuper is true tries to find on the super labels.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theResult:
        	:type theResult: TObj_Object
        	:param isSuper: default value is Standard_False
        	:type isSuper: bool
        	:rtype: bool
        """
        return _TObj.TObj_Object_GetObj(*args)

    GetObj = staticmethod(GetObj)

    def GetOrder(self, *args) -> "Standard_Integer":
        """
        * /** * Public methods to access order of object */ returns order of object (or tag of their label if order is not initialised)
        	:rtype: int
        """
        return _TObj.TObj_Object_GetOrder(self, *args)


    def GetReferenceLabel(self, *args) -> "TDF_Label":
        """
        * Returns the label which is the root for reference OCAF sub-tree
        	:rtype: TDF_Label
        """
        return _TObj.TObj_Object_GetReferenceLabel(self, *args)


    def GetReferences(self, *args) -> "opencascade::handle< TObj_ObjectIterator >":
        """
        * Returns an Iterator containing objects that compose the this one theType narrows a variety of iterated objects
        	:param theType: default value is NULL
        	:type theType: Standard_Type
        	:rtype: opencascade::handle<TObj_ObjectIterator>
        """
        return _TObj.TObj_Object_GetReferences(self, *args)


    def GetTypeFlags(self, *args) -> "Standard_Integer":
        """
        * /** * Access to object flags */ Returns flags (bitmask) that define properties of objects of that type By default returns flag Visible
        	:rtype: int
        """
        return _TObj.TObj_Object_GetTypeFlags(self, *args)


    def HasBackReferences(self, *args) -> "Standard_Boolean":
        """
        * Returns True if obejct has 1 or more back references
        	:rtype: bool
        """
        return _TObj.TObj_Object_HasBackReferences(self, *args)


    def HasReference(self, *args) -> "Standard_Boolean":
        """
        * /** * Analysis of dependencies on other objects */ Returns True if object has reference to indicated object
        	:param theObject:
        	:type theObject: TObj_Object
        	:rtype: bool
        """
        return _TObj.TObj_Object_HasReference(self, *args)


    def IsAlive(self, *args) -> "Standard_Boolean":
        """
        * /** * Methods for checking and Updating object */ Checks that object alive in model Default implementation checks that object has TObject attribute at own label.
        	:rtype: bool
        """
        return _TObj.TObj_Object_IsAlive(self, *args)


    def RelocateReferences(self, *args) -> "Standard_Boolean":
        """
        * Make that each reference pointing to a descendant label of theFromRoot to point to an equivalent label under theToRoot. Return False if a resulting reference does not point to an TObj_Object Example: a referred object label = 0:3:24:7:2:7 theFromRoot = 0:3:24 theToRoot = 0:2 a new referred label = 0:2:7:2:7
        	:param theFromRoot:
        	:type theFromRoot: TDF_Label
        	:param theToRoot:
        	:type theToRoot: TDF_Label
        	:param theUpdateBackRefs: default value is Standard_True
        	:type theUpdateBackRefs: bool
        	:rtype: bool
        """
        return _TObj.TObj_Object_RelocateReferences(self, *args)


    def RemoveAllReferences(self, *args) -> "void":
        """
        * Remove all references to other objects, by removing all reference attributes
        	:rtype: None
        """
        return _TObj.TObj_Object_RemoveAllReferences(self, *args)


    def RemoveBackReference(self, *args) -> "void":
        """
        * Removes information on dependent object (back reference). If theSingleOnly is true only the first back reference is removed in the case of duplicate items.
        	:param theObject:
        	:type theObject: TObj_Object
        	:param theSingleOnly: default value is Standard_True
        	:type theSingleOnly: bool
        	:rtype: None
        """
        return _TObj.TObj_Object_RemoveBackReference(self, *args)


    def RemoveBackReferences(self, *args) -> "Standard_Boolean":
        """
        * Removes all back reference by removing references from other to me.
        	:param theMode: default value is TObj_FreeOnly
        	:type theMode: TObj_DeletingMode
        	:rtype: bool
        """
        return _TObj.TObj_Object_RemoveBackReferences(self, *args)


    def RemoveReference(self, *args) -> "void":
        """
        * Removes reference to the object by replace reference to NULL object
        	:param theObject:
        	:type theObject: TObj_Object
        	:rtype: None
        """
        return _TObj.TObj_Object_RemoveReference(self, *args)


    def ReplaceReference(self, *args) -> "void":
        """
        * Replace reference from old object to new object. If it is not possible, may raise exception. If new object is null then simple remove reference to old object.
        	:param theOldObject:
        	:type theOldObject: TObj_Object
        	:param theNewObject:
        	:type theNewObject: TObj_Object
        	:rtype: None
        """
        return _TObj.TObj_Object_ReplaceReference(self, *args)


    def SetFlags(self, *args) -> "void":
        """
        * Sets flags with defined mask.
        	:param theMask:
        	:type theMask: int
        	:rtype: None
        """
        return _TObj.TObj_Object_SetFlags(self, *args)


    def SetName(self, *args) -> "Standard_Boolean":
        """
        * Sets name of the object. Returns False if theName is not unique.
        	:param theName:
        	:type theName: TCollection_HExtendedString
        	:rtype: bool
        * Sets name of the object. Returns False if theName is not unique.
        	:param theName:
        	:type theName: TCollection_HAsciiString
        	:rtype: bool
        * Sets name of the object. Returns False if theName is not unique.
        	:param name:
        	:type name: char *
        	:rtype: bool
        """
        return _TObj.TObj_Object_SetName(self, *args)


    def SetOrder(self, *args) -> "Standard_Boolean":
        """
        * sets order of object
        	:param theIndx:
        	:type theIndx: int
        	:rtype: bool
        """
        return _TObj.TObj_Object_SetOrder(self, *args)


    def TestFlags(self, *args) -> "Standard_Boolean":
        """
        * tests flags by the mask.
        	:param theMask:
        	:type theMask: int
        	:rtype: bool
        """
        return _TObj.TObj_Object_TestFlags(self, *args)


    def getChildLabel(self, *args) -> "TDF_Label":
        """
        * Returns the label for child with rank
        	:param theRank:
        	:type theRank: int
        	:rtype: TDF_Label
        """
        return _TObj.TObj_Object_getChildLabel(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TObj_Object_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_Object
TObj_Object.AddBackReference = new_instancemethod(_TObj.TObj_Object_AddBackReference, None, TObj_Object)
TObj_Object.AfterRetrieval = new_instancemethod(_TObj.TObj_Object_AfterRetrieval, None, TObj_Object)
TObj_Object.BeforeForgetReference = new_instancemethod(_TObj.TObj_Object_BeforeForgetReference, None, TObj_Object)
TObj_Object.BeforeStoring = new_instancemethod(_TObj.TObj_Object_BeforeStoring, None, TObj_Object)
TObj_Object.CanDetach = new_instancemethod(_TObj.TObj_Object_CanDetach, None, TObj_Object)
TObj_Object.CanRemoveReference = new_instancemethod(_TObj.TObj_Object_CanRemoveReference, None, TObj_Object)
TObj_Object.ClearBackReferences = new_instancemethod(_TObj.TObj_Object_ClearBackReferences, None, TObj_Object)
TObj_Object.ClearFlags = new_instancemethod(_TObj.TObj_Object_ClearFlags, None, TObj_Object)
TObj_Object.Clone = new_instancemethod(_TObj.TObj_Object_Clone, None, TObj_Object)
TObj_Object.CopyChildren = new_instancemethod(_TObj.TObj_Object_CopyChildren, None, TObj_Object)
TObj_Object.CopyReferences = new_instancemethod(_TObj.TObj_Object_CopyReferences, None, TObj_Object)
TObj_Object.GetBackReferences = new_instancemethod(_TObj.TObj_Object_GetBackReferences, None, TObj_Object)
TObj_Object.GetBadReference = new_instancemethod(_TObj.TObj_Object_GetBadReference, None, TObj_Object)
TObj_Object.GetChildLabel = new_instancemethod(_TObj.TObj_Object_GetChildLabel, None, TObj_Object)
TObj_Object.GetChildren = new_instancemethod(_TObj.TObj_Object_GetChildren, None, TObj_Object)
TObj_Object.GetDataLabel = new_instancemethod(_TObj.TObj_Object_GetDataLabel, None, TObj_Object)
TObj_Object.GetDictionary = new_instancemethod(_TObj.TObj_Object_GetDictionary, None, TObj_Object)
TObj_Object.GetFatherObject = new_instancemethod(_TObj.TObj_Object_GetFatherObject, None, TObj_Object)
TObj_Object.GetFlags = new_instancemethod(_TObj.TObj_Object_GetFlags, None, TObj_Object)
TObj_Object.GetLabel = new_instancemethod(_TObj.TObj_Object_GetLabel, None, TObj_Object)
TObj_Object.GetModel = new_instancemethod(_TObj.TObj_Object_GetModel, None, TObj_Object)
TObj_Object.GetName = new_instancemethod(_TObj.TObj_Object_GetName, None, TObj_Object)
TObj_Object.GetNameForClone = new_instancemethod(_TObj.TObj_Object_GetNameForClone, None, TObj_Object)
TObj_Object.GetOrder = new_instancemethod(_TObj.TObj_Object_GetOrder, None, TObj_Object)
TObj_Object.GetReferenceLabel = new_instancemethod(_TObj.TObj_Object_GetReferenceLabel, None, TObj_Object)
TObj_Object.GetReferences = new_instancemethod(_TObj.TObj_Object_GetReferences, None, TObj_Object)
TObj_Object.GetTypeFlags = new_instancemethod(_TObj.TObj_Object_GetTypeFlags, None, TObj_Object)
TObj_Object.HasBackReferences = new_instancemethod(_TObj.TObj_Object_HasBackReferences, None, TObj_Object)
TObj_Object.HasReference = new_instancemethod(_TObj.TObj_Object_HasReference, None, TObj_Object)
TObj_Object.IsAlive = new_instancemethod(_TObj.TObj_Object_IsAlive, None, TObj_Object)
TObj_Object.RelocateReferences = new_instancemethod(_TObj.TObj_Object_RelocateReferences, None, TObj_Object)
TObj_Object.RemoveAllReferences = new_instancemethod(_TObj.TObj_Object_RemoveAllReferences, None, TObj_Object)
TObj_Object.RemoveBackReference = new_instancemethod(_TObj.TObj_Object_RemoveBackReference, None, TObj_Object)
TObj_Object.RemoveBackReferences = new_instancemethod(_TObj.TObj_Object_RemoveBackReferences, None, TObj_Object)
TObj_Object.RemoveReference = new_instancemethod(_TObj.TObj_Object_RemoveReference, None, TObj_Object)
TObj_Object.ReplaceReference = new_instancemethod(_TObj.TObj_Object_ReplaceReference, None, TObj_Object)
TObj_Object.SetFlags = new_instancemethod(_TObj.TObj_Object_SetFlags, None, TObj_Object)
TObj_Object.SetName = new_instancemethod(_TObj.TObj_Object_SetName, None, TObj_Object)
TObj_Object.SetOrder = new_instancemethod(_TObj.TObj_Object_SetOrder, None, TObj_Object)
TObj_Object.TestFlags = new_instancemethod(_TObj.TObj_Object_TestFlags, None, TObj_Object)
TObj_Object.getChildLabel = new_instancemethod(_TObj.TObj_Object_getChildLabel, None, TObj_Object)
TObj_Object_swigregister = _TObj.TObj_Object_swigregister
TObj_Object_swigregister(TObj_Object)

def TObj_Object_Detach(*args) -> "Standard_Boolean":
    """
    * Deletes the object from the model. The dependent objects are either deleted or modified when possible (see description of TObj_DeletingMode enumeration for more details) Returns True if deletion was successful. Checks if object can be deleted. Should be redefined for each specific kind of object
    	:param theMode: default value is TObj_FreeOnly
    	:type theMode: TObj_DeletingMode
    	:rtype: bool
    * Deletes the object from the label. Checks if object can be deleted. Finds object on the label and detaches it by calling previos method. Returns true if there is no object on the label after detaching
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:param theMode: default value is TObj_FreeOnly
    	:type theMode: TObj_DeletingMode
    	:rtype: bool
    """
    return _TObj.TObj_Object_Detach(*args)

def TObj_Object_GetObj(*args) -> "Standard_Boolean":
    """
    * /** * methods for object retrieval */ Returns the Object attached to a given label. Returns False if no object of type TObj_Object is stored on the specified label. If isSuper is true tries to find on the super labels.
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:param theResult:
    	:type theResult: TObj_Object
    	:param isSuper: default value is Standard_False
    	:type isSuper: bool
    	:rtype: bool
    """
    return _TObj.TObj_Object_GetObj(*args)

class TObj_ObjectIterator(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns True if iteration is not finished and method Current() will give the object. Default implementation returns False
        	:rtype: bool
        """
        return _TObj.TObj_ObjectIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Iterates to the next object Default implementation does nothing
        	:rtype: None
        """
        return _TObj.TObj_ObjectIterator_Next(self, *args)


    def Value(self, *args) -> "opencascade::handle< TObj_Object >":
        """
        * Returns current object (or null if iteration has finished) Default implementation returns null handle
        	:rtype: opencascade::handle<TObj_Object>
        """
        return _TObj.TObj_ObjectIterator_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TObj_ObjectIterator_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        _TObj.TObj_ObjectIterator_swiginit(self, _TObj.new_TObj_ObjectIterator())
    __swig_destroy__ = _TObj.delete_TObj_ObjectIterator
TObj_ObjectIterator.More = new_instancemethod(_TObj.TObj_ObjectIterator_More, None, TObj_ObjectIterator)
TObj_ObjectIterator.Next = new_instancemethod(_TObj.TObj_ObjectIterator_Next, None, TObj_ObjectIterator)
TObj_ObjectIterator.Value = new_instancemethod(_TObj.TObj_ObjectIterator_Value, None, TObj_ObjectIterator)
TObj_ObjectIterator_swigregister = _TObj.TObj_ObjectIterator_swigregister
TObj_ObjectIterator_swigregister(TObj_ObjectIterator)

class TObj_Persistence(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CreateNewObject(*args) -> "opencascade::handle< TObj_Object >":
        """
        * /** * Public methods, to be called externally */ Creates and returns a new object of the registered type If the type is not registered, returns Null handle
        	:param theType:
        	:type theType: char *
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<TObj_Object>
        """
        return _TObj.TObj_Persistence_CreateNewObject(*args)

    CreateNewObject = staticmethod(CreateNewObject)

    def DumpTypesToString(self) -> "std::string":
        """DumpTypesToString(TObj_Persistence self) -> std::string"""
        return _TObj.TObj_Persistence_DumpTypesToString(self)


    __repr__ = _dumps_object

TObj_Persistence.DumpTypesToString = new_instancemethod(_TObj.TObj_Persistence_DumpTypesToString, None, TObj_Persistence)
TObj_Persistence_swigregister = _TObj.TObj_Persistence_swigregister
TObj_Persistence_swigregister(TObj_Persistence)

def TObj_Persistence_CreateNewObject(*args) -> "opencascade::handle< TObj_Object >":
    """
    * /** * Public methods, to be called externally */ Creates and returns a new object of the registered type If the type is not registered, returns Null handle
    	:param theType:
    	:type theType: char *
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<TObj_Object>
    """
    return _TObj.TObj_Persistence_CreateNewObject(*args)

class TObj_TIntSparseArray(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        * Clears the set
        	:rtype: None
        """
        return _TObj.TObj_TIntSparseArray_Clear(self, *args)


    def ClearDelta(self, *args) -> "void":
        """:rtype: None"""
        return _TObj.TObj_TIntSparseArray_ClearDelta(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * This method is used in implementation of ID()
        	:rtype: Standard_GUID
        """
        return _TObj.TObj_TIntSparseArray_GetID(*args)

    GetID = staticmethod(GetID)

    def GetIterator(self, *args) -> "TObj_TIntSparseArray::Iterator":
        """
        * Returns iterator on objects contained in the set
        	:rtype: Iterator
        """
        return _TObj.TObj_TIntSparseArray_GetIterator(self, *args)


    def HasValue(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the value with the given ID is present.
        	:param theId:
        	:type theId: Standard_Size
        	:rtype: bool
        """
        return _TObj.TObj_TIntSparseArray_HasValue(self, *args)


    def Set(*args) -> "opencascade::handle< TObj_TIntSparseArray >":
        """
        * Creates TObj_TIntSparseArray attribute on given label.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<TObj_TIntSparseArray>
        """
        return _TObj.TObj_TIntSparseArray_Set(*args)

    Set = staticmethod(Set)

    def SetDoBackup(self, *args) -> "void":
        """
        * Methods to handle the modification delta Sets the flag pointing to the necessity to maintain a modification delta. It is called by the retrieval driver
        	:param toDo:
        	:type toDo: bool
        	:rtype: None
        """
        return _TObj.TObj_TIntSparseArray_SetDoBackup(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Sets the value with the given ID. Raises an exception if theId is not positive
        	:param theId:
        	:type theId: Standard_Size
        	:param theValue:
        	:type theValue: int
        	:rtype: None
        """
        return _TObj.TObj_TIntSparseArray_SetValue(self, *args)


    def Size(self, *args) -> "Standard_Size":
        """
        * Methods for access to data Returns the number of stored values in the set
        	:rtype: Standard_Size
        """
        return _TObj.TObj_TIntSparseArray_Size(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _TObj.TObj_TIntSparseArray_swiginit(self, _TObj.new_TObj_TIntSparseArray(*args))

    def UnsetValue(self, *args) -> "void":
        """
        * Unsets the value with the given ID. Raises an exception if theId is not positive
        	:param theId:
        	:type theId: Standard_Size
        	:rtype: None
        """
        return _TObj.TObj_TIntSparseArray_UnsetValue(self, *args)


    def Value(self, *args) -> "Standard_Integer":
        """
        * Returns the value by its ID. Raises an exception if no value is stored with this ID
        	:param theId:
        	:type theId: Standard_Size
        	:rtype: int
        """
        return _TObj.TObj_TIntSparseArray_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TObj_TIntSparseArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_TIntSparseArray
TObj_TIntSparseArray.Clear = new_instancemethod(_TObj.TObj_TIntSparseArray_Clear, None, TObj_TIntSparseArray)
TObj_TIntSparseArray.ClearDelta = new_instancemethod(_TObj.TObj_TIntSparseArray_ClearDelta, None, TObj_TIntSparseArray)
TObj_TIntSparseArray.GetIterator = new_instancemethod(_TObj.TObj_TIntSparseArray_GetIterator, None, TObj_TIntSparseArray)
TObj_TIntSparseArray.HasValue = new_instancemethod(_TObj.TObj_TIntSparseArray_HasValue, None, TObj_TIntSparseArray)
TObj_TIntSparseArray.SetDoBackup = new_instancemethod(_TObj.TObj_TIntSparseArray_SetDoBackup, None, TObj_TIntSparseArray)
TObj_TIntSparseArray.SetValue = new_instancemethod(_TObj.TObj_TIntSparseArray_SetValue, None, TObj_TIntSparseArray)
TObj_TIntSparseArray.Size = new_instancemethod(_TObj.TObj_TIntSparseArray_Size, None, TObj_TIntSparseArray)
TObj_TIntSparseArray.UnsetValue = new_instancemethod(_TObj.TObj_TIntSparseArray_UnsetValue, None, TObj_TIntSparseArray)
TObj_TIntSparseArray.Value = new_instancemethod(_TObj.TObj_TIntSparseArray_Value, None, TObj_TIntSparseArray)
TObj_TIntSparseArray_swigregister = _TObj.TObj_TIntSparseArray_swigregister
TObj_TIntSparseArray_swigregister(TObj_TIntSparseArray)

def TObj_TIntSparseArray_GetID(*args) -> "Standard_GUID const &":
    """
    * This method is used in implementation of ID()
    	:rtype: Standard_GUID
    """
    return _TObj.TObj_TIntSparseArray_GetID(*args)

def TObj_TIntSparseArray_Set(*args) -> "opencascade::handle< TObj_TIntSparseArray >":
    """
    * Creates TObj_TIntSparseArray attribute on given label.
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<TObj_TIntSparseArray>
    """
    return _TObj.TObj_TIntSparseArray_Set(*args)

class TObj_TModel(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args) -> "Standard_GUID const &":
        """
        * This method is used in implementation of ID()
        	:rtype: Standard_GUID
        """
        return _TObj.TObj_TModel_GetID(*args)

    GetID = staticmethod(GetID)

    def Model(self, *args) -> "opencascade::handle< TObj_Model >":
        """
        * Returns the Model object
        	:rtype: opencascade::handle<TObj_Model>
        """
        return _TObj.TObj_TModel_Model(self, *args)


    def Set(self, *args) -> "void":
        """
        * Methods for setting and obtaining the Model object Sets the the Model object
        	:param theModel:
        	:type theModel: TObj_Model
        	:rtype: None
        """
        return _TObj.TObj_TModel_Set(self, *args)


    def __init__(self, *args):
        """
        * /** * Standard methods of attribute */ Empty constructor
        	:rtype: None
        """
        _TObj.TObj_TModel_swiginit(self, _TObj.new_TObj_TModel(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TObj_TModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_TModel
TObj_TModel.Model = new_instancemethod(_TObj.TObj_TModel_Model, None, TObj_TModel)
TObj_TModel.Set = new_instancemethod(_TObj.TObj_TModel_Set, None, TObj_TModel)
TObj_TModel_swigregister = _TObj.TObj_TModel_swigregister
TObj_TModel_swigregister(TObj_TModel)

def TObj_TModel_GetID(*args) -> "Standard_GUID const &":
    """
    * This method is used in implementation of ID()
    	:rtype: Standard_GUID
    """
    return _TObj.TObj_TModel_GetID(*args)

class TObj_TNameContainer(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        * Remove all names registered in container
        	:rtype: None
        """
        return _TObj.TObj_TNameContainer_Clear(self, *args)


    def Get(self, *args) -> "TObj_DataMapOfNameLabel const &":
        """
        * Returns the TObj_DataMapOfNameLabel object
        	:rtype: TObj_DataMapOfNameLabel
        """
        return _TObj.TObj_TNameContainer_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * This method is used in implementation of ID()
        	:rtype: Standard_GUID
        """
        return _TObj.TObj_TNameContainer_GetID(*args)

    GetID = staticmethod(GetID)

    def IsRegistered(self, *args) -> "Standard_Boolean":
        """
        * Return True is theName is registered in the Map
        	:param theName:
        	:type theName: TCollection_HExtendedString
        	:rtype: bool
        """
        return _TObj.TObj_TNameContainer_IsRegistered(self, *args)


    def RecordName(self, *args) -> "void":
        """
        * Methods for adding and removing names Records name with label attached
        	:param theName:
        	:type theName: TCollection_HExtendedString
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: None
        """
        return _TObj.TObj_TNameContainer_RecordName(self, *args)


    def RemoveName(self, *args) -> "void":
        """
        * Remove name from the map
        	:param theName:
        	:type theName: TCollection_HExtendedString
        	:rtype: None
        """
        return _TObj.TObj_TNameContainer_RemoveName(self, *args)


    def Set(self, *args) -> "void":
        """
        * Method for create TObj_TNameContainer object Creates TObj_DataMapOfNameLabel attribute on given label if not exist
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<TObj_TNameContainer>
        * Methods for setting and obtaining TObj_TNameContainer Sets the TObj_DataMapOfNameLabel object
        	:param theElem:
        	:type theElem: TObj_DataMapOfNameLabel
        	:rtype: None
        """
        return _TObj.TObj_TNameContainer_Set(self, *args)


    def __init__(self, *args):
        """
        * Standard methods of OCAF attribute Empty constructor
        	:rtype: None
        """
        _TObj.TObj_TNameContainer_swiginit(self, _TObj.new_TObj_TNameContainer(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TObj_TNameContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_TNameContainer
TObj_TNameContainer.Clear = new_instancemethod(_TObj.TObj_TNameContainer_Clear, None, TObj_TNameContainer)
TObj_TNameContainer.Get = new_instancemethod(_TObj.TObj_TNameContainer_Get, None, TObj_TNameContainer)
TObj_TNameContainer.IsRegistered = new_instancemethod(_TObj.TObj_TNameContainer_IsRegistered, None, TObj_TNameContainer)
TObj_TNameContainer.RecordName = new_instancemethod(_TObj.TObj_TNameContainer_RecordName, None, TObj_TNameContainer)
TObj_TNameContainer.RemoveName = new_instancemethod(_TObj.TObj_TNameContainer_RemoveName, None, TObj_TNameContainer)
TObj_TNameContainer.Set = new_instancemethod(_TObj.TObj_TNameContainer_Set, None, TObj_TNameContainer)
TObj_TNameContainer_swigregister = _TObj.TObj_TNameContainer_swigregister
TObj_TNameContainer_swigregister(TObj_TNameContainer)

def TObj_TNameContainer_GetID(*args) -> "Standard_GUID const &":
    """
    * This method is used in implementation of ID()
    	:rtype: Standard_GUID
    """
    return _TObj.TObj_TNameContainer_GetID(*args)

class TObj_TObject(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Get(self, *args) -> "opencascade::handle< TObj_Object >":
        """
        * Returns the TObj_Object object
        	:rtype: opencascade::handle<TObj_Object>
        """
        return _TObj.TObj_TObject_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * This method is used in implementation of ID()
        	:rtype: Standard_GUID
        """
        return _TObj.TObj_TObject_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args) -> "void":
        """
        * Method for create TObj_TObject object Creates TObj_TObject attribute on given label
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theElem:
        	:type theElem: TObj_Object
        	:rtype: opencascade::handle<TObj_TObject>
        * Methods for setting and obtaining TObj_Object Sets the TObj_Object object
        	:param theElem:
        	:type theElem: TObj_Object
        	:rtype: None
        """
        return _TObj.TObj_TObject_Set(self, *args)


    def __init__(self, *args):
        """
        * Standard methods of OCAF attribute Empty constructor
        	:rtype: None
        """
        _TObj.TObj_TObject_swiginit(self, _TObj.new_TObj_TObject(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TObj_TObject_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_TObject
TObj_TObject.Get = new_instancemethod(_TObj.TObj_TObject_Get, None, TObj_TObject)
TObj_TObject.Set = new_instancemethod(_TObj.TObj_TObject_Set, None, TObj_TObject)
TObj_TObject_swigregister = _TObj.TObj_TObject_swigregister
TObj_TObject_swigregister(TObj_TObject)

def TObj_TObject_GetID(*args) -> "Standard_GUID const &":
    """
    * This method is used in implementation of ID()
    	:rtype: Standard_GUID
    """
    return _TObj.TObj_TObject_GetID(*args)

class TObj_TReference(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Get(self, *args) -> "opencascade::handle< TObj_Object >":
        """
        * Returns the referenced theObject
        	:rtype: opencascade::handle<TObj_Object>
        """
        return _TObj.TObj_TReference_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * This method is used in implementation of ID()
        	:rtype: Standard_GUID
        """
        return _TObj.TObj_TReference_GetID(*args)

    GetID = staticmethod(GetID)

    def GetLabel(self, *args) -> "TDF_Label":
        """
        * Returns the referred label.
        	:rtype: TDF_Label
        """
        return _TObj.TObj_TReference_GetLabel(self, *args)


    def GetMasterLabel(self, *args) -> "TDF_Label":
        """
        * Returns the Label of master object.
        	:rtype: TDF_Label
        """
        return _TObj.TObj_TReference_GetMasterLabel(self, *args)


    def Set(self, *args) -> "void":
        """
        * Method for create TObj_TReference object Creates reference on TDF_Label <theLabel> to the object <theObject> and creates backreference from the object <theObject> to <theMaster> one.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theObject:
        	:type theObject: TObj_Object
        	:param theMaster:
        	:type theMaster: TObj_Object
        	:rtype: opencascade::handle<TObj_TReference>
        * Methods for setting and obtaining referenced object Sets the reference to the theObject
        	:param theObject:
        	:type theObject: TObj_Object
        	:param theMasterLabel:
        	:type theMasterLabel: TDF_Label
        	:rtype: None
        * Sets the reference to the theObject at indicated Label. It is method for persistent only. Don`t use anywhere else.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theMasterLabel:
        	:type theMasterLabel: TDF_Label
        	:rtype: None
        """
        return _TObj.TObj_TReference_Set(self, *args)


    def __init__(self, *args):
        """
        * Standard methods of OCAF attribute Empty constructor
        	:rtype: None
        """
        _TObj.TObj_TReference_swiginit(self, _TObj.new_TObj_TReference(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TObj_TReference_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_TReference
TObj_TReference.Get = new_instancemethod(_TObj.TObj_TReference_Get, None, TObj_TReference)
TObj_TReference.GetLabel = new_instancemethod(_TObj.TObj_TReference_GetLabel, None, TObj_TReference)
TObj_TReference.GetMasterLabel = new_instancemethod(_TObj.TObj_TReference_GetMasterLabel, None, TObj_TReference)
TObj_TReference.Set = new_instancemethod(_TObj.TObj_TReference_Set, None, TObj_TReference)
TObj_TReference_swigregister = _TObj.TObj_TReference_swigregister
TObj_TReference_swigregister(TObj_TReference)

def TObj_TReference_GetID(*args) -> "Standard_GUID const &":
    """
    * This method is used in implementation of ID()
    	:rtype: Standard_GUID
    """
    return _TObj.TObj_TReference_GetID(*args)

class TObj_TXYZ(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(TObj_TXYZ self) -> std::string"""
        return _TObj.TObj_TXYZ_DumpToString(self)


    def Get(self, *args) -> "gp_XYZ":
        """
        * Returns the XYZ
        	:rtype: gp_XYZ
        """
        return _TObj.TObj_TXYZ_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * This method is used in implementation of ID()
        	:rtype: Standard_GUID
        """
        return _TObj.TObj_TXYZ_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args) -> "void":
        """
        * Method for create TObj_TXYZ object Creates attribute and sets the XYZ
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theXYZ:
        	:type theXYZ: gp_XYZ
        	:rtype: opencascade::handle<TObj_TXYZ>
        * Methods for setting and obtaining XYZ Sets the XYZ
        	:param theXYZ:
        	:type theXYZ: gp_XYZ
        	:rtype: None
        """
        return _TObj.TObj_TXYZ_Set(self, *args)


    def __init__(self, *args):
        """
        * Standard methods of OCAF attribute Empty constructor
        	:rtype: None
        """
        _TObj.TObj_TXYZ_swiginit(self, _TObj.new_TObj_TXYZ(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TObj_TXYZ_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_TXYZ
TObj_TXYZ.DumpToString = new_instancemethod(_TObj.TObj_TXYZ_DumpToString, None, TObj_TXYZ)
TObj_TXYZ.Get = new_instancemethod(_TObj.TObj_TXYZ_Get, None, TObj_TXYZ)
TObj_TXYZ.Set = new_instancemethod(_TObj.TObj_TXYZ_Set, None, TObj_TXYZ)
TObj_TXYZ_swigregister = _TObj.TObj_TXYZ_swigregister
TObj_TXYZ_swigregister(TObj_TXYZ)

def TObj_TXYZ_GetID(*args) -> "Standard_GUID const &":
    """
    * This method is used in implementation of ID()
    	:rtype: Standard_GUID
    """
    return _TObj.TObj_TXYZ_GetID(*args)

class TObj_LabelIterator(TObj_ObjectIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def LabelValue(self, *args) -> "TDF_Label const &":
        """
        * Returns the label of the current item
        	:rtype: inline  TDF_Label
        """
        return _TObj.TObj_LabelIterator_LabelValue(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * /** * Redefined methods */ Returns True if there is a current Item in the iteration.
        	:rtype: bool
        """
        return _TObj.TObj_LabelIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Move to the next Item
        	:rtype: None
        """
        return _TObj.TObj_LabelIterator_Next(self, *args)


    def Value(self, *args) -> "opencascade::handle< TObj_Object >":
        """
        * Returns the current item
        	:rtype: opencascade::handle<TObj_Object>
        """
        return _TObj.TObj_LabelIterator_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TObj_LabelIterator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_LabelIterator
TObj_LabelIterator.LabelValue = new_instancemethod(_TObj.TObj_LabelIterator_LabelValue, None, TObj_LabelIterator)
TObj_LabelIterator.More = new_instancemethod(_TObj.TObj_LabelIterator_More, None, TObj_LabelIterator)
TObj_LabelIterator.Next = new_instancemethod(_TObj.TObj_LabelIterator_Next, None, TObj_LabelIterator)
TObj_LabelIterator.Value = new_instancemethod(_TObj.TObj_LabelIterator_Value, None, TObj_LabelIterator)
TObj_LabelIterator_swigregister = _TObj.TObj_LabelIterator_swigregister
TObj_LabelIterator_swigregister(TObj_LabelIterator)

class TObj_ModelIterator(TObj_ObjectIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def More(self, *args) -> "Standard_Boolean":
        """
        * /** * Methods to iterate on objects. */ Returns True if iteration is not finished and method Value() will give the object
        	:rtype: bool
        """
        return _TObj.TObj_ModelIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Iterates to the next object
        	:rtype: None
        """
        return _TObj.TObj_ModelIterator_Next(self, *args)


    def __init__(self, *args):
        """
        * /** * Constructor */ Creates Iterator and initialize it by Model`s label
        	:param theModel:
        	:type theModel: TObj_Model
        	:rtype: None
        """
        _TObj.TObj_ModelIterator_swiginit(self, _TObj.new_TObj_ModelIterator(*args))

    def Value(self, *args) -> "opencascade::handle< TObj_Object >":
        """
        * Returns current object (or MainObj of Model if iteration has finished)
        	:rtype: opencascade::handle<TObj_Object>
        """
        return _TObj.TObj_ModelIterator_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TObj_ModelIterator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_ModelIterator
TObj_ModelIterator.More = new_instancemethod(_TObj.TObj_ModelIterator_More, None, TObj_ModelIterator)
TObj_ModelIterator.Next = new_instancemethod(_TObj.TObj_ModelIterator_Next, None, TObj_ModelIterator)
TObj_ModelIterator.Value = new_instancemethod(_TObj.TObj_ModelIterator_Value, None, TObj_ModelIterator)
TObj_ModelIterator_swigregister = _TObj.TObj_ModelIterator_swigregister
TObj_ModelIterator_swigregister(TObj_ModelIterator)

class TObj_Partition(TObj_Object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AfterRetrieval(self, *args) -> "void":
        """
        * /** * Method for updating object afrer restoring */ Preforms updating the links and dependances of the object which are not stored in persistence. Does not register the partition name
        	:rtype: None
        """
        return _TObj.TObj_Partition_AfterRetrieval(self, *args)


    def Create(*args) -> "opencascade::handle< TObj_Partition >":
        """
        * /** * Method for create partition */ Creates a new partition on given label.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<TObj_Partition>
        """
        return _TObj.TObj_Partition_Create(*args)

    Create = staticmethod(Create)

    def GetLastIndex(self, *args) -> "Standard_Integer":
        """
        * Return Last index in partition (reserved);
        	:rtype: int
        """
        return _TObj.TObj_Partition_GetLastIndex(self, *args)


    def GetNamePrefix(self, *args) -> "opencascade::handle< TCollection_HExtendedString >":
        """
        * Returns prefix for names of the objects in partition.
        	:rtype: opencascade::handle<TCollection_HExtendedString>
        """
        return _TObj.TObj_Partition_GetNamePrefix(self, *args)


    def GetNewName(self, *args) -> "opencascade::handle< TCollection_HExtendedString >":
        """
        * Generates and returns name for new object in partition. if theIsToChangeCount is true partition icrease own counter to generate new name next time starting from new counter value
        	:param theIsToChangeCount: default value is Standard_True
        	:type theIsToChangeCount: bool
        	:rtype: opencascade::handle<TCollection_HExtendedString>
        """
        return _TObj.TObj_Partition_GetNewName(self, *args)


    def GetPartition(*args) -> "opencascade::handle< TObj_Partition >":
        """
        * /** * Methods to define partition by object */ Returns the partition in which object is stored. Null partition returned if not found
        	:param theObject:
        	:type theObject: TObj_Object
        	:rtype: opencascade::handle<TObj_Partition>
        """
        return _TObj.TObj_Partition_GetPartition(*args)

    GetPartition = staticmethod(GetPartition)

    def NewLabel(self, *args) -> "TDF_Label":
        """
        * /** * Methods handling of the objects in partition */ Creates and Returns label for new object in partition.
        	:rtype: TDF_Label
        """
        return _TObj.TObj_Partition_NewLabel(self, *args)


    def SetLastIndex(self, *args) -> "void":
        """
        * Sets Last index in partition (reserved);
        	:param theIndex:
        	:type theIndex: int
        	:rtype: None
        """
        return _TObj.TObj_Partition_SetLastIndex(self, *args)


    def SetName(self, *args) -> "Standard_Boolean":
        """
        * /** * Methods hanling name of the object */ Sets name of the object. partition does not check unique of own name
        	:param theName:
        	:type theName: TCollection_HExtendedString
        	:rtype: bool
        """
        return _TObj.TObj_Partition_SetName(self, *args)


    def SetNamePrefix(self, *args) -> "void":
        """
        * Sets prefix for names of the objects in partition.
        	:param thePrefix:
        	:type thePrefix: TCollection_HExtendedString
        	:rtype: None
        """
        return _TObj.TObj_Partition_SetNamePrefix(self, *args)


    def Update(self, *args) -> "Standard_Boolean":
        """
        * /** * Methods for updating the object */ Does nothing in the partition.
        	:rtype: bool
        """
        return _TObj.TObj_Partition_Update(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TObj_Partition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_Partition
TObj_Partition.AfterRetrieval = new_instancemethod(_TObj.TObj_Partition_AfterRetrieval, None, TObj_Partition)
TObj_Partition.GetLastIndex = new_instancemethod(_TObj.TObj_Partition_GetLastIndex, None, TObj_Partition)
TObj_Partition.GetNamePrefix = new_instancemethod(_TObj.TObj_Partition_GetNamePrefix, None, TObj_Partition)
TObj_Partition.GetNewName = new_instancemethod(_TObj.TObj_Partition_GetNewName, None, TObj_Partition)
TObj_Partition.NewLabel = new_instancemethod(_TObj.TObj_Partition_NewLabel, None, TObj_Partition)
TObj_Partition.SetLastIndex = new_instancemethod(_TObj.TObj_Partition_SetLastIndex, None, TObj_Partition)
TObj_Partition.SetName = new_instancemethod(_TObj.TObj_Partition_SetName, None, TObj_Partition)
TObj_Partition.SetNamePrefix = new_instancemethod(_TObj.TObj_Partition_SetNamePrefix, None, TObj_Partition)
TObj_Partition.Update = new_instancemethod(_TObj.TObj_Partition_Update, None, TObj_Partition)
TObj_Partition_swigregister = _TObj.TObj_Partition_swigregister
TObj_Partition_swigregister(TObj_Partition)

def TObj_Partition_Create(*args) -> "opencascade::handle< TObj_Partition >":
    """
    * /** * Method for create partition */ Creates a new partition on given label.
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<TObj_Partition>
    """
    return _TObj.TObj_Partition_Create(*args)

def TObj_Partition_GetPartition(*args) -> "opencascade::handle< TObj_Partition >":
    """
    * /** * Methods to define partition by object */ Returns the partition in which object is stored. Null partition returned if not found
    	:param theObject:
    	:type theObject: TObj_Object
    	:rtype: opencascade::handle<TObj_Partition>
    """
    return _TObj.TObj_Partition_GetPartition(*args)

class TObj_SequenceIterator(TObj_ObjectIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def More(self, *args) -> "Standard_Boolean":
        """
        * /** * Redefined methods */ Returns True if there is a current Item in the iteration.
        	:rtype: bool
        """
        return _TObj.TObj_SequenceIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Move to the next Item
        	:rtype: None
        """
        return _TObj.TObj_SequenceIterator_Next(self, *args)


    def __init__(self, *args):
        """
        * /** * Constructor */ Creates an iterator an initialize it by sequence of objects.
        	:param theObjects:
        	:type theObjects: TObj_HSequenceOfObject
        	:param theType: default value is NULL
        	:type theType: Standard_Type
        	:rtype: None
        """
        _TObj.TObj_SequenceIterator_swiginit(self, _TObj.new_TObj_SequenceIterator(*args))

    def Value(self, *args) -> "opencascade::handle< TObj_Object >":
        """
        * Returns the current item
        	:rtype: opencascade::handle<TObj_Object>
        """
        return _TObj.TObj_SequenceIterator_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TObj_SequenceIterator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_SequenceIterator
TObj_SequenceIterator.More = new_instancemethod(_TObj.TObj_SequenceIterator_More, None, TObj_SequenceIterator)
TObj_SequenceIterator.Next = new_instancemethod(_TObj.TObj_SequenceIterator_Next, None, TObj_SequenceIterator)
TObj_SequenceIterator.Value = new_instancemethod(_TObj.TObj_SequenceIterator_Value, None, TObj_SequenceIterator)
TObj_SequenceIterator_swigregister = _TObj.TObj_SequenceIterator_swigregister
TObj_SequenceIterator_swigregister(TObj_SequenceIterator)

class TObj_HiddenPartition(TObj_Partition):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetTypeFlags(self, *args) -> "Standard_Integer":
        """
        * Returns all flags of father except Visible
        	:rtype: int
        """
        return _TObj.TObj_HiddenPartition_GetTypeFlags(self, *args)


    def __init__(self, *args):
        """
        * constructor
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: None
        """
        _TObj.TObj_HiddenPartition_swiginit(self, _TObj.new_TObj_HiddenPartition(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TObj_HiddenPartition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_HiddenPartition
TObj_HiddenPartition.GetTypeFlags = new_instancemethod(_TObj.TObj_HiddenPartition_GetTypeFlags, None, TObj_HiddenPartition)
TObj_HiddenPartition_swigregister = _TObj.TObj_HiddenPartition_swigregister
TObj_HiddenPartition_swigregister(TObj_HiddenPartition)

class TObj_OcafObjectIterator(TObj_LabelIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /** * Constructor */ Creates the iterator on objects in the sub labels of theLabel theType narrows a variety of iterated objects
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theType: default value is NULL
        	:type theType: Standard_Type
        	:param theRecursive: default value is Standard_False
        	:type theRecursive: bool
        	:rtype: None
        """
        _TObj.TObj_OcafObjectIterator_swiginit(self, _TObj.new_TObj_OcafObjectIterator(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TObj_OcafObjectIterator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_OcafObjectIterator
TObj_OcafObjectIterator_swigregister = _TObj.TObj_OcafObjectIterator_swigregister
TObj_OcafObjectIterator_swigregister(TObj_OcafObjectIterator)

class TObj_ReferenceIterator(TObj_LabelIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates the iterator on references in partition theType narrows a variety of iterated objects
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theType: default value is NULL
        	:type theType: Standard_Type
        	:param theRecursive: default value is Standard_True
        	:type theRecursive: bool
        	:rtype: None
        """
        _TObj.TObj_ReferenceIterator_swiginit(self, _TObj.new_TObj_ReferenceIterator(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TObj_ReferenceIterator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TObj.delete_TObj_ReferenceIterator
TObj_ReferenceIterator_swigregister = _TObj.TObj_ReferenceIterator_swigregister
TObj_ReferenceIterator_swigregister(TObj_ReferenceIterator)

class TObj_HSequenceOfObject(TObj_SequenceOfObject, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TObj.TObj_HSequenceOfObject_swiginit(self, _TObj.new_TObj_HSequenceOfObject(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TObj_HSequenceOfObject_DownCast(t)

    __swig_destroy__ = _TObj.delete_TObj_HSequenceOfObject
TObj_HSequenceOfObject.Sequence = new_instancemethod(_TObj.TObj_HSequenceOfObject_Sequence, None, TObj_HSequenceOfObject)
TObj_HSequenceOfObject.Append = new_instancemethod(_TObj.TObj_HSequenceOfObject_Append, None, TObj_HSequenceOfObject)
TObj_HSequenceOfObject.ChangeSequence = new_instancemethod(_TObj.TObj_HSequenceOfObject_ChangeSequence, None, TObj_HSequenceOfObject)
TObj_HSequenceOfObject_swigregister = _TObj.TObj_HSequenceOfObject_swigregister
TObj_HSequenceOfObject_swigregister(TObj_HSequenceOfObject)



