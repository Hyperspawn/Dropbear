# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopoDS module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_topods.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TopoDS.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopoDS')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopoDS')
    _TopoDS = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopoDS', [dirname(__file__)])
        except ImportError:
            import _TopoDS
            return _TopoDS
        try:
            _mod = imp.load_module('_TopoDS', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopoDS = swig_import_helper()
    del swig_import_helper
else:
    import _TopoDS
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopoDS.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TopoDS.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TopoDS.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TopoDS.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TopoDS.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TopoDS.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TopoDS.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TopoDS.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TopoDS.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TopoDS.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TopoDS.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TopoDS.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TopoDS.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TopoDS.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TopoDS.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TopoDS.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TopoDS.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TopoDS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopoDS.process_exception(error, method_name, class_name)
process_exception = _TopoDS.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp

def Handle_TopoDS_HShape_Create() -> "opencascade::handle< TopoDS_HShape >":
    return _TopoDS.Handle_TopoDS_HShape_Create()
Handle_TopoDS_HShape_Create = _TopoDS.Handle_TopoDS_HShape_Create

def Handle_TopoDS_HShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_HShape >":
    return _TopoDS.Handle_TopoDS_HShape_DownCast(t)
Handle_TopoDS_HShape_DownCast = _TopoDS.Handle_TopoDS_HShape_DownCast

def Handle_TopoDS_HShape_IsNull(t: 'opencascade::handle< TopoDS_HShape > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_HShape_IsNull(t)
Handle_TopoDS_HShape_IsNull = _TopoDS.Handle_TopoDS_HShape_IsNull

def Handle_TopoDS_TShape_Create() -> "opencascade::handle< TopoDS_TShape >":
    return _TopoDS.Handle_TopoDS_TShape_Create()
Handle_TopoDS_TShape_Create = _TopoDS.Handle_TopoDS_TShape_Create

def Handle_TopoDS_TShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TShape >":
    return _TopoDS.Handle_TopoDS_TShape_DownCast(t)
Handle_TopoDS_TShape_DownCast = _TopoDS.Handle_TopoDS_TShape_DownCast

def Handle_TopoDS_TShape_IsNull(t: 'opencascade::handle< TopoDS_TShape > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TShape_IsNull(t)
Handle_TopoDS_TShape_IsNull = _TopoDS.Handle_TopoDS_TShape_IsNull

def Handle_TopoDS_TCompSolid_Create() -> "opencascade::handle< TopoDS_TCompSolid >":
    return _TopoDS.Handle_TopoDS_TCompSolid_Create()
Handle_TopoDS_TCompSolid_Create = _TopoDS.Handle_TopoDS_TCompSolid_Create

def Handle_TopoDS_TCompSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TCompSolid >":
    return _TopoDS.Handle_TopoDS_TCompSolid_DownCast(t)
Handle_TopoDS_TCompSolid_DownCast = _TopoDS.Handle_TopoDS_TCompSolid_DownCast

def Handle_TopoDS_TCompSolid_IsNull(t: 'opencascade::handle< TopoDS_TCompSolid > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TCompSolid_IsNull(t)
Handle_TopoDS_TCompSolid_IsNull = _TopoDS.Handle_TopoDS_TCompSolid_IsNull

def Handle_TopoDS_TCompound_Create() -> "opencascade::handle< TopoDS_TCompound >":
    return _TopoDS.Handle_TopoDS_TCompound_Create()
Handle_TopoDS_TCompound_Create = _TopoDS.Handle_TopoDS_TCompound_Create

def Handle_TopoDS_TCompound_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TCompound >":
    return _TopoDS.Handle_TopoDS_TCompound_DownCast(t)
Handle_TopoDS_TCompound_DownCast = _TopoDS.Handle_TopoDS_TCompound_DownCast

def Handle_TopoDS_TCompound_IsNull(t: 'opencascade::handle< TopoDS_TCompound > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TCompound_IsNull(t)
Handle_TopoDS_TCompound_IsNull = _TopoDS.Handle_TopoDS_TCompound_IsNull

def Handle_TopoDS_TEdge_Create() -> "opencascade::handle< TopoDS_TEdge >":
    return _TopoDS.Handle_TopoDS_TEdge_Create()
Handle_TopoDS_TEdge_Create = _TopoDS.Handle_TopoDS_TEdge_Create

def Handle_TopoDS_TEdge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TEdge >":
    return _TopoDS.Handle_TopoDS_TEdge_DownCast(t)
Handle_TopoDS_TEdge_DownCast = _TopoDS.Handle_TopoDS_TEdge_DownCast

def Handle_TopoDS_TEdge_IsNull(t: 'opencascade::handle< TopoDS_TEdge > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TEdge_IsNull(t)
Handle_TopoDS_TEdge_IsNull = _TopoDS.Handle_TopoDS_TEdge_IsNull

def Handle_TopoDS_TFace_Create() -> "opencascade::handle< TopoDS_TFace >":
    return _TopoDS.Handle_TopoDS_TFace_Create()
Handle_TopoDS_TFace_Create = _TopoDS.Handle_TopoDS_TFace_Create

def Handle_TopoDS_TFace_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TFace >":
    return _TopoDS.Handle_TopoDS_TFace_DownCast(t)
Handle_TopoDS_TFace_DownCast = _TopoDS.Handle_TopoDS_TFace_DownCast

def Handle_TopoDS_TFace_IsNull(t: 'opencascade::handle< TopoDS_TFace > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TFace_IsNull(t)
Handle_TopoDS_TFace_IsNull = _TopoDS.Handle_TopoDS_TFace_IsNull

def Handle_TopoDS_TShell_Create() -> "opencascade::handle< TopoDS_TShell >":
    return _TopoDS.Handle_TopoDS_TShell_Create()
Handle_TopoDS_TShell_Create = _TopoDS.Handle_TopoDS_TShell_Create

def Handle_TopoDS_TShell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TShell >":
    return _TopoDS.Handle_TopoDS_TShell_DownCast(t)
Handle_TopoDS_TShell_DownCast = _TopoDS.Handle_TopoDS_TShell_DownCast

def Handle_TopoDS_TShell_IsNull(t: 'opencascade::handle< TopoDS_TShell > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TShell_IsNull(t)
Handle_TopoDS_TShell_IsNull = _TopoDS.Handle_TopoDS_TShell_IsNull

def Handle_TopoDS_TSolid_Create() -> "opencascade::handle< TopoDS_TSolid >":
    return _TopoDS.Handle_TopoDS_TSolid_Create()
Handle_TopoDS_TSolid_Create = _TopoDS.Handle_TopoDS_TSolid_Create

def Handle_TopoDS_TSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TSolid >":
    return _TopoDS.Handle_TopoDS_TSolid_DownCast(t)
Handle_TopoDS_TSolid_DownCast = _TopoDS.Handle_TopoDS_TSolid_DownCast

def Handle_TopoDS_TSolid_IsNull(t: 'opencascade::handle< TopoDS_TSolid > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TSolid_IsNull(t)
Handle_TopoDS_TSolid_IsNull = _TopoDS.Handle_TopoDS_TSolid_IsNull

def Handle_TopoDS_TVertex_Create() -> "opencascade::handle< TopoDS_TVertex >":
    return _TopoDS.Handle_TopoDS_TVertex_Create()
Handle_TopoDS_TVertex_Create = _TopoDS.Handle_TopoDS_TVertex_Create

def Handle_TopoDS_TVertex_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TVertex >":
    return _TopoDS.Handle_TopoDS_TVertex_DownCast(t)
Handle_TopoDS_TVertex_DownCast = _TopoDS.Handle_TopoDS_TVertex_DownCast

def Handle_TopoDS_TVertex_IsNull(t: 'opencascade::handle< TopoDS_TVertex > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TVertex_IsNull(t)
Handle_TopoDS_TVertex_IsNull = _TopoDS.Handle_TopoDS_TVertex_IsNull

def Handle_TopoDS_TWire_Create() -> "opencascade::handle< TopoDS_TWire >":
    return _TopoDS.Handle_TopoDS_TWire_Create()
Handle_TopoDS_TWire_Create = _TopoDS.Handle_TopoDS_TWire_Create

def Handle_TopoDS_TWire_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TWire >":
    return _TopoDS.Handle_TopoDS_TWire_DownCast(t)
Handle_TopoDS_TWire_DownCast = _TopoDS.Handle_TopoDS_TWire_DownCast

def Handle_TopoDS_TWire_IsNull(t: 'opencascade::handle< TopoDS_TWire > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TWire_IsNull(t)
Handle_TopoDS_TWire_IsNull = _TopoDS.Handle_TopoDS_TWire_IsNull
class TopoDS_ListOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopoDS.TopoDS_ListOfShape_swiginit(self, _TopoDS.new_TopoDS_ListOfShape(*args))
    __swig_destroy__ = _TopoDS.delete_TopoDS_ListOfShape
TopoDS_ListOfShape.begin = new_instancemethod(_TopoDS.TopoDS_ListOfShape_begin, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.end = new_instancemethod(_TopoDS.TopoDS_ListOfShape_end, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.cbegin = new_instancemethod(_TopoDS.TopoDS_ListOfShape_cbegin, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.cend = new_instancemethod(_TopoDS.TopoDS_ListOfShape_cend, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.Size = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Size, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.Assign = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Assign, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.Set = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Set, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.Clear = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Clear, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.First = new_instancemethod(_TopoDS.TopoDS_ListOfShape_First, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.Last = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Last, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.Append = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Append, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.Prepend = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Prepend, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.RemoveFirst = new_instancemethod(_TopoDS.TopoDS_ListOfShape_RemoveFirst, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.Remove = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Remove, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.InsertBefore = new_instancemethod(_TopoDS.TopoDS_ListOfShape_InsertBefore, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.InsertAfter = new_instancemethod(_TopoDS.TopoDS_ListOfShape_InsertAfter, None, TopoDS_ListOfShape)
TopoDS_ListOfShape.Reverse = new_instancemethod(_TopoDS.TopoDS_ListOfShape_Reverse, None, TopoDS_ListOfShape)
TopoDS_ListOfShape_swigregister = _TopoDS.TopoDS_ListOfShape_swigregister
TopoDS_ListOfShape_swigregister(TopoDS_ListOfShape)

class TopoDS_ListIteratorOfListOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopoDS.TopoDS_ListIteratorOfListOfShape_swiginit(self, _TopoDS.new_TopoDS_ListIteratorOfListOfShape(*args))
    __swig_destroy__ = _TopoDS.delete_TopoDS_ListIteratorOfListOfShape
TopoDS_ListIteratorOfListOfShape.More = new_instancemethod(_TopoDS.TopoDS_ListIteratorOfListOfShape_More, None, TopoDS_ListIteratorOfListOfShape)
TopoDS_ListIteratorOfListOfShape.Next = new_instancemethod(_TopoDS.TopoDS_ListIteratorOfListOfShape_Next, None, TopoDS_ListIteratorOfListOfShape)
TopoDS_ListIteratorOfListOfShape.Value = new_instancemethod(_TopoDS.TopoDS_ListIteratorOfListOfShape_Value, None, TopoDS_ListIteratorOfListOfShape)
TopoDS_ListIteratorOfListOfShape.ChangeValue = new_instancemethod(_TopoDS.TopoDS_ListIteratorOfListOfShape_ChangeValue, None, TopoDS_ListIteratorOfListOfShape)
TopoDS_ListIteratorOfListOfShape_swigregister = _TopoDS.TopoDS_ListIteratorOfListOfShape_swigregister
TopoDS_ListIteratorOfListOfShape_swigregister(TopoDS_ListIteratorOfListOfShape)

class topods(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CompSolid(*args) -> "TopoDS_CompSolid":
        """
        * Casts shape S to the more specialized return type, CompSolid. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_CompSolid
        :param &:
        	:type &: TopoDS_Shape
        	:rtype: inline TopoDS_CompSolid
        """
        return _TopoDS.topods_CompSolid(*args)

    CompSolid = staticmethod(CompSolid)

    def Compound(*args) -> "TopoDS_Compound":
        """
        * Casts shape S to the more specialized return type, Compound. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Compound
        :param &:
        	:type &: TopoDS_Shape
        	:rtype: inline TopoDS_Compound
        """
        return _TopoDS.topods_Compound(*args)

    Compound = staticmethod(Compound)

    def Edge(*args) -> "TopoDS_Edge":
        """
        * Casts shape S to the more specialized return type, Edge Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Edge
        :param &:
        	:type &: TopoDS_Shape
        	:rtype: inline TopoDS_Edge
        """
        return _TopoDS.topods_Edge(*args)

    Edge = staticmethod(Edge)

    def Face(*args) -> "TopoDS_Face":
        """
        * Casts shape S to the more specialized return type, Face. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Face
        :param &:
        	:type &: TopoDS_Shape
        	:rtype: inline TopoDS_Face
        """
        return _TopoDS.topods_Face(*args)

    Face = staticmethod(Face)

    def Shell(*args) -> "TopoDS_Shell":
        """
        * Casts shape S to the more specialized return type, Shell. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Shell
        :param &:
        	:type &: TopoDS_Shape
        	:rtype: inline TopoDS_Shell
        """
        return _TopoDS.topods_Shell(*args)

    Shell = staticmethod(Shell)

    def Solid(*args) -> "TopoDS_Solid":
        """
        * Casts shape S to the more specialized return type, Solid. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Solid
        :param &:
        	:type &: TopoDS_Shape
        	:rtype: inline TopoDS_Solid
        """
        return _TopoDS.topods_Solid(*args)

    Solid = staticmethod(Solid)

    def Vertex(*args) -> "TopoDS_Vertex":
        """
        * Basic tool to access the data structure. Casts shape S to the more specialized return type, Vertex. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Vertex
        :param &:
        	:type &: TopoDS_Shape
        	:rtype: inline TopoDS_Vertex
        """
        return _TopoDS.topods_Vertex(*args)

    Vertex = staticmethod(Vertex)

    def Wire(*args) -> "TopoDS_Wire":
        """
        * Casts shape S to the more specialized return type, Wire. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: TopoDS_Wire
        :param &:
        	:type &: TopoDS_Shape
        	:rtype: inline TopoDS_Wire
        """
        return _TopoDS.topods_Wire(*args)

    Wire = staticmethod(Wire)

    __repr__ = _dumps_object


    def __init__(self):
        _TopoDS.topods_swiginit(self, _TopoDS.new_topods())
    __swig_destroy__ = _TopoDS.delete_topods
topods_swigregister = _TopoDS.topods_swigregister
topods_swigregister(topods)

def topods_CompSolid(*args) -> "TopoDS_CompSolid":
    """
    * Casts shape S to the more specialized return type, CompSolid. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: TopoDS_CompSolid
    :param &:
    	:type &: TopoDS_Shape
    	:rtype: inline TopoDS_CompSolid
    """
    return _TopoDS.topods_CompSolid(*args)

def topods_Compound(*args) -> "TopoDS_Compound":
    """
    * Casts shape S to the more specialized return type, Compound. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: TopoDS_Compound
    :param &:
    	:type &: TopoDS_Shape
    	:rtype: inline TopoDS_Compound
    """
    return _TopoDS.topods_Compound(*args)

def topods_Edge(*args) -> "TopoDS_Edge":
    """
    * Casts shape S to the more specialized return type, Edge Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: TopoDS_Edge
    :param &:
    	:type &: TopoDS_Shape
    	:rtype: inline TopoDS_Edge
    """
    return _TopoDS.topods_Edge(*args)

def topods_Face(*args) -> "TopoDS_Face":
    """
    * Casts shape S to the more specialized return type, Face. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: TopoDS_Face
    :param &:
    	:type &: TopoDS_Shape
    	:rtype: inline TopoDS_Face
    """
    return _TopoDS.topods_Face(*args)

def topods_Shell(*args) -> "TopoDS_Shell":
    """
    * Casts shape S to the more specialized return type, Shell. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: TopoDS_Shell
    :param &:
    	:type &: TopoDS_Shape
    	:rtype: inline TopoDS_Shell
    """
    return _TopoDS.topods_Shell(*args)

def topods_Solid(*args) -> "TopoDS_Solid":
    """
    * Casts shape S to the more specialized return type, Solid. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: TopoDS_Solid
    :param &:
    	:type &: TopoDS_Shape
    	:rtype: inline TopoDS_Solid
    """
    return _TopoDS.topods_Solid(*args)

def topods_Vertex(*args) -> "TopoDS_Vertex":
    """
    * Basic tool to access the data structure. Casts shape S to the more specialized return type, Vertex. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: TopoDS_Vertex
    :param &:
    	:type &: TopoDS_Shape
    	:rtype: inline TopoDS_Vertex
    """
    return _TopoDS.topods_Vertex(*args)

def topods_Wire(*args) -> "TopoDS_Wire":
    """
    * Casts shape S to the more specialized return type, Wire. Exceptions Standard_TypeMismatch if S cannot be cast to this return type.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: TopoDS_Wire
    :param &:
    	:type &: TopoDS_Shape
    	:rtype: inline TopoDS_Wire
    """
    return _TopoDS.topods_Wire(*args)

class TopoDS_AlertWithShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns contained shape
        	:rtype: TopoDS_Shape
        """
        return _TopoDS.TopoDS_AlertWithShape_GetShape(self, *args)


    def Merge(self, *args) -> "Standard_Boolean":
        """
        * Returns false.
        	:param theTarget:
        	:type theTarget: Message_Alert
        	:rtype: bool
        """
        return _TopoDS.TopoDS_AlertWithShape_Merge(self, *args)


    def SetShape(self, *args) -> "void":
        """
        * Sets the shape
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        return _TopoDS.TopoDS_AlertWithShape_SetShape(self, *args)


    def SupportsMerge(self, *args) -> "Standard_Boolean":
        """
        * Returns false.
        	:rtype: bool
        """
        return _TopoDS.TopoDS_AlertWithShape_SupportsMerge(self, *args)


    def __init__(self, *args):
        """
        * Constructor with shape argument
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        _TopoDS.TopoDS_AlertWithShape_swiginit(self, _TopoDS.new_TopoDS_AlertWithShape(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_AlertWithShape
TopoDS_AlertWithShape.GetShape = new_instancemethod(_TopoDS.TopoDS_AlertWithShape_GetShape, None, TopoDS_AlertWithShape)
TopoDS_AlertWithShape.Merge = new_instancemethod(_TopoDS.TopoDS_AlertWithShape_Merge, None, TopoDS_AlertWithShape)
TopoDS_AlertWithShape.SetShape = new_instancemethod(_TopoDS.TopoDS_AlertWithShape_SetShape, None, TopoDS_AlertWithShape)
TopoDS_AlertWithShape.SupportsMerge = new_instancemethod(_TopoDS.TopoDS_AlertWithShape_SupportsMerge, None, TopoDS_AlertWithShape)
TopoDS_AlertWithShape_swigregister = _TopoDS.TopoDS_AlertWithShape_swigregister
TopoDS_AlertWithShape_swigregister(TopoDS_AlertWithShape)

class TopoDS_Builder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Add the Shape C in the Shape S. Exceptions - TopoDS_FrozenShape if S is not free and cannot be modified. - TopoDS__UnCompatibleShapes if S and C are not compatible.
        	:param S:
        	:type S: TopoDS_Shape
        	:param C:
        	:type C: TopoDS_Shape
        	:rtype: None
        """
        return _TopoDS.TopoDS_Builder_Add(self, *args)


    def MakeCompSolid(self, *args) -> "void":
        """
        * Make an empty Composite Solid.
        	:param C:
        	:type C: TopoDS_CompSolid
        	:rtype: None
        """
        return _TopoDS.TopoDS_Builder_MakeCompSolid(self, *args)


    def MakeCompound(self, *args) -> "void":
        """
        * Make an empty Compound.
        	:param C:
        	:type C: TopoDS_Compound
        	:rtype: None
        """
        return _TopoDS.TopoDS_Builder_MakeCompound(self, *args)


    def MakeShell(self, *args) -> "void":
        """
        * Make an empty Shell.
        	:param S:
        	:type S: TopoDS_Shell
        	:rtype: None
        """
        return _TopoDS.TopoDS_Builder_MakeShell(self, *args)


    def MakeSolid(self, *args) -> "void":
        """
        * Make a Solid covering the whole 3D space.
        	:param S:
        	:type S: TopoDS_Solid
        	:rtype: None
        """
        return _TopoDS.TopoDS_Builder_MakeSolid(self, *args)


    def MakeWire(self, *args) -> "void":
        """
        * Make an empty Wire.
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        """
        return _TopoDS.TopoDS_Builder_MakeWire(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Remove the Shape C from the Shape S. Exceptions TopoDS_FrozenShape if S is frozen and cannot be modified.
        	:param S:
        	:type S: TopoDS_Shape
        	:param C:
        	:type C: TopoDS_Shape
        	:rtype: None
        """
        return _TopoDS.TopoDS_Builder_Remove(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        _TopoDS.TopoDS_Builder_swiginit(self, _TopoDS.new_TopoDS_Builder())
    __swig_destroy__ = _TopoDS.delete_TopoDS_Builder
TopoDS_Builder.Add = new_instancemethod(_TopoDS.TopoDS_Builder_Add, None, TopoDS_Builder)
TopoDS_Builder.MakeCompSolid = new_instancemethod(_TopoDS.TopoDS_Builder_MakeCompSolid, None, TopoDS_Builder)
TopoDS_Builder.MakeCompound = new_instancemethod(_TopoDS.TopoDS_Builder_MakeCompound, None, TopoDS_Builder)
TopoDS_Builder.MakeShell = new_instancemethod(_TopoDS.TopoDS_Builder_MakeShell, None, TopoDS_Builder)
TopoDS_Builder.MakeSolid = new_instancemethod(_TopoDS.TopoDS_Builder_MakeSolid, None, TopoDS_Builder)
TopoDS_Builder.MakeWire = new_instancemethod(_TopoDS.TopoDS_Builder_MakeWire, None, TopoDS_Builder)
TopoDS_Builder.Remove = new_instancemethod(_TopoDS.TopoDS_Builder_Remove, None, TopoDS_Builder)
TopoDS_Builder_swigregister = _TopoDS.TopoDS_Builder_swigregister
TopoDS_Builder_swigregister(TopoDS_Builder)

class TopoDS_HShape(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeShape(self, *args) -> "TopoDS_Shape":
        """
        * Exchanges the TopoDS_Shape object defining this shape for another one referencing the same underlying shape Accesses the list of shapes within the underlying shape referenced by the TopoDS_Shape object. Returns a reference to a TopoDS_Shape based on this shape. The TopoDS_Shape can be modified.
        	:rtype: TopoDS_Shape
        """
        return _TopoDS.TopoDS_HShape_ChangeShape(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * Loads this shape with the shape aShape
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: None
        * Returns a reference to a constant TopoDS_Shape based on this shape.
        	:rtype: TopoDS_Shape
        """
        return _TopoDS.TopoDS_HShape_Shape(self, *args)


    def __init__(self, *args):
        """
        * Constructs an empty shape object
        	:rtype: None
        * Constructs a shape object defined by the shape aShape.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: None
        """
        _TopoDS.TopoDS_HShape_swiginit(self, _TopoDS.new_TopoDS_HShape(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_HShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_HShape
TopoDS_HShape.ChangeShape = new_instancemethod(_TopoDS.TopoDS_HShape_ChangeShape, None, TopoDS_HShape)
TopoDS_HShape.Shape = new_instancemethod(_TopoDS.TopoDS_HShape_Shape, None, TopoDS_HShape)
TopoDS_HShape_swigregister = _TopoDS.TopoDS_HShape_swigregister
TopoDS_HShape_swigregister(TopoDS_HShape)

class TopoDS_Iterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Initialize(self, *args) -> "void":
        """
        * Initializes this iterator with shape S. Note: - If cumOri is true, the function composes all sub-shapes with the orientation of S. - If cumLoc is true, the function multiplies all sub-shapes by the location of S, i.e. it applies to each sub-shape the transformation that is associated with S.
        	:param S:
        	:type S: TopoDS_Shape
        	:param cumOri: default value is Standard_True
        	:type cumOri: bool
        	:param cumLoc: default value is Standard_True
        	:type cumLoc: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_Iterator_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns true if there is another sub-shape in the shape which this iterator is scanning.
        	:rtype: bool
        """
        return _TopoDS.TopoDS_Iterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Moves on to the next sub-shape in the shape which this iterator is scanning. Exceptions Standard_NoMoreObject if there are no more sub-shapes in the shape.
        	:rtype: None
        """
        return _TopoDS.TopoDS_Iterator_Next(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty Iterator.
        	:rtype: None
        * Creates an Iterator on <S> sub-shapes. Note: - If cumOri is true, the function composes all sub-shapes with the orientation of S. - If cumLoc is true, the function multiplies all sub-shapes by the location of S, i.e. it applies to each sub-shape the transformation that is associated with S.
        	:param S:
        	:type S: TopoDS_Shape
        	:param cumOri: default value is Standard_True
        	:type cumOri: bool
        	:param cumLoc: default value is Standard_True
        	:type cumLoc: bool
        	:rtype: None
        """
        _TopoDS.TopoDS_Iterator_swiginit(self, _TopoDS.new_TopoDS_Iterator(*args))

    def Value(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the current sub-shape in the shape which this iterator is scanning. Exceptions Standard_NoSuchObject if there is no current sub-shape.
        	:rtype: TopoDS_Shape
        """
        return _TopoDS.TopoDS_Iterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Iterator
TopoDS_Iterator.Initialize = new_instancemethod(_TopoDS.TopoDS_Iterator_Initialize, None, TopoDS_Iterator)
TopoDS_Iterator.More = new_instancemethod(_TopoDS.TopoDS_Iterator_More, None, TopoDS_Iterator)
TopoDS_Iterator.Next = new_instancemethod(_TopoDS.TopoDS_Iterator_Next, None, TopoDS_Iterator)
TopoDS_Iterator.Value = new_instancemethod(_TopoDS.TopoDS_Iterator_Value, None, TopoDS_Iterator)
TopoDS_Iterator_swigregister = _TopoDS.TopoDS_Iterator_swigregister
TopoDS_Iterator_swigregister(TopoDS_Iterator)

class TopoDS_Shape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Checked(self, *args) -> "void":
        """
        * Returns the checked flag.
        	:rtype: bool
        * Sets the checked flag.
        	:param theIsChecked:
        	:type theIsChecked: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Checked(self, *args)


    def Closed(self, *args) -> "void":
        """
        * Returns the closedness flag.
        	:rtype: bool
        * Sets the closedness flag.
        	:param theIsClosed:
        	:type theIsClosed: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Closed(self, *args)


    def Complement(self, *args) -> "void":
        """
        * Complements the orientation, using the Complement method from the TopAbs package.
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Complement(self, *args)


    def Complemented(self, *args) -> "TopoDS_Shape":
        """
        * Returns a shape similar to <self> with the orientation complemented, using the Complement method from the TopAbs package.
        	:rtype: TopoDS_Shape
        """
        return _TopoDS.TopoDS_Shape_Complemented(self, *args)


    def Compose(self, *args) -> "void":
        """
        * Updates the Shape Orientation by composition with theOrient, using the Compose method from the TopAbs package.
        	:param theOrient:
        	:type theOrient: TopAbs_Orientation
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Compose(self, *args)


    def Composed(self, *args) -> "TopoDS_Shape":
        """
        * Returns a shape similar to <self> with the orientation composed with theOrient, using the Compose method from the TopAbs package.
        	:param theOrient:
        	:type theOrient: TopAbs_Orientation
        	:rtype: TopoDS_Shape
        """
        return _TopoDS.TopoDS_Shape_Composed(self, *args)


    def Convex(self, *args) -> "void":
        """
        * Returns the convexness flag.
        	:rtype: bool
        * Sets the convexness flag.
        	:param theIsConvex:
        	:type theIsConvex: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Convex(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TopoDS_Shape self, int depth=-1) -> std::string
        DumpJsonToString(TopoDS_Shape self) -> std::string
        """
        return _TopoDS.TopoDS_Shape_DumpJsonToString(self, depth)


    def EmptyCopied(self, *args) -> "TopoDS_Shape":
        """
        * Returns a new Shape with the same Orientation and Location and a new TShape with the same geometry and no sub-shapes.
        	:rtype: TopoDS_Shape
        """
        return _TopoDS.TopoDS_Shape_EmptyCopied(self, *args)


    def EmptyCopy(self, *args) -> "void":
        """
        * Replace <self> by a new Shape with the same Orientation and Location and a new TShape with the same geometry and no sub-shapes.
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_EmptyCopy(self, *args)


    def Free(self, *args) -> "void":
        """
        * Returns the free flag.
        	:rtype: bool
        * Sets the free flag.
        	:param theIsFree:
        	:type theIsFree: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Free(self, *args)


    def HashCode(self, *args) -> "Standard_Integer":
        """
        * Returns a hashed value denoting <self>. This value is in the range [1, theUpperBound]. It is computed from the TShape and the Location. The Orientation is not used. @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _TopoDS.TopoDS_Shape_HashCode(self, *args)


    def __hash__(self) -> "Standard_Integer":
        """__hash__(TopoDS_Shape self) -> Standard_Integer"""
        return _TopoDS.TopoDS_Shape___hash__(self)


    def Infinite(self, *args) -> "void":
        """
        * Returns the infinity flag.
        	:rtype: bool
        * Sets the infinity flag.
        	:param theIsInfinite:
        	:type theIsInfinite: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Infinite(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        * Returns True if two shapes are equal, i.e. if they share the same TShape with the same Locations and Orientations.
        	:param theOther:
        	:type theOther: TopoDS_Shape
        	:rtype: bool
        """
        return _TopoDS.TopoDS_Shape_IsEqual(self, *args)


    def IsNotEqual(self, *args) -> "Standard_Boolean":
        """
        * Negation of the IsEqual method.
        	:param theOther:
        	:type theOther: TopoDS_Shape
        	:rtype: bool
        """
        return _TopoDS.TopoDS_Shape_IsNotEqual(self, *args)


    def IsNull(self, *args) -> "Standard_Boolean":
        """
        * Returns true if this shape is null. In other words, it references no underlying shape with the potential to be given a location and an orientation.
        	:rtype: bool
        """
        return _TopoDS.TopoDS_Shape_IsNull(self, *args)


    def IsPartner(self, *args) -> "Standard_Boolean":
        """
        * Returns True if two shapes are partners, i.e. if they share the same TShape. Locations and Orientations may differ.
        	:param theOther:
        	:type theOther: TopoDS_Shape
        	:rtype: bool
        """
        return _TopoDS.TopoDS_Shape_IsPartner(self, *args)


    def IsSame(self, *args) -> "Standard_Boolean":
        """
        * Returns True if two shapes are same, i.e. if they share the same TShape with the same Locations. Orientations may differ.
        	:param theOther:
        	:type theOther: TopoDS_Shape
        	:rtype: bool
        """
        return _TopoDS.TopoDS_Shape_IsSame(self, *args)


    def Located(self, *args) -> "TopoDS_Shape":
        """
        * Returns a shape similar to <self> with the local coordinate system set to <Loc>.
        	:param theLoc:
        	:type theLoc: TopLoc_Location
        	:rtype: TopoDS_Shape
        """
        return _TopoDS.TopoDS_Shape_Located(self, *args)


    def Location(self, *args) -> "void":
        """
        * Returns the shape local coordinate system.
        	:rtype: TopLoc_Location
        * Sets the shape local coordinate system.
        	:param theLoc:
        	:type theLoc: TopLoc_Location
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Location(self, *args)


    def Locked(self, *args) -> "void":
        """
        * Returns the locked flag.
        	:rtype: bool
        * Sets the locked flag.
        	:param theIsLocked:
        	:type theIsLocked: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Locked(self, *args)


    def Modified(self, *args) -> "void":
        """
        * Returns the modification flag.
        	:rtype: bool
        * Sets the modification flag.
        	:param theIsModified:
        	:type theIsModified: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Modified(self, *args)


    def Move(self, *args) -> "void":
        """
        * Multiplies the Shape location by thePosition.
        	:param thePosition:
        	:type thePosition: TopLoc_Location
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Move(self, *args)


    def Moved(self, *args) -> "TopoDS_Shape":
        """
        * Returns a shape similar to <self> with a location multiplied by thePosition.
        	:param thePosition:
        	:type thePosition: TopLoc_Location
        	:rtype: TopoDS_Shape
        """
        return _TopoDS.TopoDS_Shape_Moved(self, *args)


    def NbChildren(self, *args) -> "Standard_Integer":
        """
        * Returns the number of direct sub-shapes (children). @sa TopoDS_Iterator for accessing sub-shapes
        	:rtype: int
        """
        return _TopoDS.TopoDS_Shape_NbChildren(self, *args)


    def Nullify(self, *args) -> "void":
        """
        * Destroys the reference to the underlying shape stored in this shape. As a result, this shape becomes null.
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Nullify(self, *args)


    def Orientable(self, *args) -> "void":
        """
        * Returns the orientability flag.
        	:rtype: bool
        * Sets the orientability flag.
        	:param theIsOrientable:
        	:type theIsOrientable: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Orientable(self, *args)


    def Orientation(self, *args) -> "void":
        """
        * Returns the shape orientation.
        	:rtype: TopAbs_Orientation
        * Sets the shape orientation.
        	:param theOrient:
        	:type theOrient: TopAbs_Orientation
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Orientation(self, *args)


    def Oriented(self, *args) -> "TopoDS_Shape":
        """
        * Returns a shape similar to <self> with the orientation set to <Or>.
        	:param theOrient:
        	:type theOrient: TopAbs_Orientation
        	:rtype: TopoDS_Shape
        """
        return _TopoDS.TopoDS_Shape_Oriented(self, *args)


    def Reverse(self, *args) -> "void":
        """
        * Reverses the orientation, using the Reverse method from the TopAbs package.
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_Reverse(self, *args)


    def Reversed(self, *args) -> "TopoDS_Shape":
        """
        * Returns a shape similar to <self> with the orientation reversed, using the Reverse method from the TopAbs package.
        	:rtype: TopoDS_Shape
        """
        return _TopoDS.TopoDS_Shape_Reversed(self, *args)


    def ShapeType(self, *args) -> "TopAbs_ShapeEnum":
        """
        * Returns the value of the TopAbs_ShapeEnum enumeration that corresponds to this shape, for example VERTEX, EDGE, and so on. Exceptions Standard_NullObject if this shape is null.
        	:rtype: TopAbs_ShapeEnum
        """
        return _TopoDS.TopoDS_Shape_ShapeType(self, *args)


    def TShape(self, *args) -> "void":
        """
        * Returns a handle to the actual shape implementation.
        	:rtype: opencascade::handle<TopoDS_TShape>
        :param theTShape:
        	:type theTShape: TopoDS_TShape
        	:rtype: None
        """
        return _TopoDS.TopoDS_Shape_TShape(self, *args)


    def __init__(self, *args):
        """
        __init__(TopoDS_Shape self, TopoDS_Shape arg0) -> TopoDS_Shape
        * Creates a NULL Shape referring to nothing.
        	:rtype: None
        """
        _TopoDS.TopoDS_Shape_swiginit(self, _TopoDS.new_TopoDS_Shape(*args))

    def __eq_wrapper__(self, other: 'TopoDS_Shape') -> "bool":
        """__eq_wrapper__(TopoDS_Shape self, TopoDS_Shape other) -> bool"""
        return _TopoDS.TopoDS_Shape___eq_wrapper__(self, other)


    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def __getstate__(self):
    	from .BRepTools import BRepTools_ShapeSet
    	ss = BRepTools_ShapeSet()
    	ss.Add(self)
    	str_shape = ss.WriteToString()
    	indx = ss.Locations().Index(self.Location())
    	return str_shape, indx
    def __setstate__(self, state):
    	from .BRepTools import BRepTools_ShapeSet
    	topods_str, indx = state
    	ss = BRepTools_ShapeSet()
    	ss.ReadFromString(topods_str)
    	the_shape = ss.Shape(ss.NbShapes())
    	location = ss.Locations().Location(indx)
    	the_shape.Location(location)
    	self.this = the_shape.this


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Shape
TopoDS_Shape.Checked = new_instancemethod(_TopoDS.TopoDS_Shape_Checked, None, TopoDS_Shape)
TopoDS_Shape.Closed = new_instancemethod(_TopoDS.TopoDS_Shape_Closed, None, TopoDS_Shape)
TopoDS_Shape.Complement = new_instancemethod(_TopoDS.TopoDS_Shape_Complement, None, TopoDS_Shape)
TopoDS_Shape.Complemented = new_instancemethod(_TopoDS.TopoDS_Shape_Complemented, None, TopoDS_Shape)
TopoDS_Shape.Compose = new_instancemethod(_TopoDS.TopoDS_Shape_Compose, None, TopoDS_Shape)
TopoDS_Shape.Composed = new_instancemethod(_TopoDS.TopoDS_Shape_Composed, None, TopoDS_Shape)
TopoDS_Shape.Convex = new_instancemethod(_TopoDS.TopoDS_Shape_Convex, None, TopoDS_Shape)
TopoDS_Shape.DumpJsonToString = new_instancemethod(_TopoDS.TopoDS_Shape_DumpJsonToString, None, TopoDS_Shape)
TopoDS_Shape.EmptyCopied = new_instancemethod(_TopoDS.TopoDS_Shape_EmptyCopied, None, TopoDS_Shape)
TopoDS_Shape.EmptyCopy = new_instancemethod(_TopoDS.TopoDS_Shape_EmptyCopy, None, TopoDS_Shape)
TopoDS_Shape.Free = new_instancemethod(_TopoDS.TopoDS_Shape_Free, None, TopoDS_Shape)
TopoDS_Shape.HashCode = new_instancemethod(_TopoDS.TopoDS_Shape_HashCode, None, TopoDS_Shape)
TopoDS_Shape.__hash__ = new_instancemethod(_TopoDS.TopoDS_Shape___hash__, None, TopoDS_Shape)
TopoDS_Shape.Infinite = new_instancemethod(_TopoDS.TopoDS_Shape_Infinite, None, TopoDS_Shape)
TopoDS_Shape.IsEqual = new_instancemethod(_TopoDS.TopoDS_Shape_IsEqual, None, TopoDS_Shape)
TopoDS_Shape.IsNotEqual = new_instancemethod(_TopoDS.TopoDS_Shape_IsNotEqual, None, TopoDS_Shape)
TopoDS_Shape.IsNull = new_instancemethod(_TopoDS.TopoDS_Shape_IsNull, None, TopoDS_Shape)
TopoDS_Shape.IsPartner = new_instancemethod(_TopoDS.TopoDS_Shape_IsPartner, None, TopoDS_Shape)
TopoDS_Shape.IsSame = new_instancemethod(_TopoDS.TopoDS_Shape_IsSame, None, TopoDS_Shape)
TopoDS_Shape.Located = new_instancemethod(_TopoDS.TopoDS_Shape_Located, None, TopoDS_Shape)
TopoDS_Shape.Location = new_instancemethod(_TopoDS.TopoDS_Shape_Location, None, TopoDS_Shape)
TopoDS_Shape.Locked = new_instancemethod(_TopoDS.TopoDS_Shape_Locked, None, TopoDS_Shape)
TopoDS_Shape.Modified = new_instancemethod(_TopoDS.TopoDS_Shape_Modified, None, TopoDS_Shape)
TopoDS_Shape.Move = new_instancemethod(_TopoDS.TopoDS_Shape_Move, None, TopoDS_Shape)
TopoDS_Shape.Moved = new_instancemethod(_TopoDS.TopoDS_Shape_Moved, None, TopoDS_Shape)
TopoDS_Shape.NbChildren = new_instancemethod(_TopoDS.TopoDS_Shape_NbChildren, None, TopoDS_Shape)
TopoDS_Shape.Nullify = new_instancemethod(_TopoDS.TopoDS_Shape_Nullify, None, TopoDS_Shape)
TopoDS_Shape.Orientable = new_instancemethod(_TopoDS.TopoDS_Shape_Orientable, None, TopoDS_Shape)
TopoDS_Shape.Orientation = new_instancemethod(_TopoDS.TopoDS_Shape_Orientation, None, TopoDS_Shape)
TopoDS_Shape.Oriented = new_instancemethod(_TopoDS.TopoDS_Shape_Oriented, None, TopoDS_Shape)
TopoDS_Shape.Reverse = new_instancemethod(_TopoDS.TopoDS_Shape_Reverse, None, TopoDS_Shape)
TopoDS_Shape.Reversed = new_instancemethod(_TopoDS.TopoDS_Shape_Reversed, None, TopoDS_Shape)
TopoDS_Shape.ShapeType = new_instancemethod(_TopoDS.TopoDS_Shape_ShapeType, None, TopoDS_Shape)
TopoDS_Shape.TShape = new_instancemethod(_TopoDS.TopoDS_Shape_TShape, None, TopoDS_Shape)
TopoDS_Shape.__eq_wrapper__ = new_instancemethod(_TopoDS.TopoDS_Shape___eq_wrapper__, None, TopoDS_Shape)
TopoDS_Shape_swigregister = _TopoDS.TopoDS_Shape_swigregister
TopoDS_Shape_swigregister(TopoDS_Shape)

class TopoDS_TShape(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Checked(self, *args) -> "void":
        """
        * Returns the checked flag.
        	:rtype: bool
        * Sets the checked flag.
        	:param theIsChecked:
        	:type theIsChecked: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_TShape_Checked(self, *args)


    def Closed(self, *args) -> "void":
        """
        * Returns the closedness flag.
        	:rtype: bool
        * Sets the closedness flag.
        	:param theIsClosed:
        	:type theIsClosed: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_TShape_Closed(self, *args)


    def Convex(self, *args) -> "void":
        """
        * Returns the convexness flag.
        	:rtype: bool
        * Sets the convexness flag.
        	:param theIsConvex:
        	:type theIsConvex: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_TShape_Convex(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TopoDS_TShape self, int depth=-1) -> std::string
        DumpJsonToString(TopoDS_TShape self) -> std::string
        """
        return _TopoDS.TopoDS_TShape_DumpJsonToString(self, depth)


    def EmptyCopy(self, *args) -> "opencascade::handle< TopoDS_TShape >":
        """
        * Returns a copy of the TShape with no sub-shapes.
        	:rtype: opencascade::handle<TopoDS_TShape>
        """
        return _TopoDS.TopoDS_TShape_EmptyCopy(self, *args)


    def Free(self, *args) -> "void":
        """
        * Returns the free flag.
        	:rtype: bool
        * Sets the free flag.
        	:param theIsFree:
        	:type theIsFree: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_TShape_Free(self, *args)


    def Infinite(self, *args) -> "void":
        """
        * Returns the infinity flag.
        	:rtype: bool
        * Sets the infinity flag.
        	:param theIsInfinite:
        	:type theIsInfinite: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_TShape_Infinite(self, *args)


    def Locked(self, *args) -> "void":
        """
        * Returns the locked flag.
        	:rtype: bool
        * Sets the locked flag.
        	:param theIsLocked:
        	:type theIsLocked: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_TShape_Locked(self, *args)


    def Modified(self, *args) -> "void":
        """
        * Returns the modification flag.
        	:rtype: bool
        * Sets the modification flag.
        	:param theIsModified:
        	:type theIsModified: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_TShape_Modified(self, *args)


    def NbChildren(self, *args) -> "Standard_Integer":
        """
        * Returns the number of direct sub-shapes (children). @sa TopoDS_Iterator for accessing sub-shapes
        	:rtype: int
        """
        return _TopoDS.TopoDS_TShape_NbChildren(self, *args)


    def Orientable(self, *args) -> "void":
        """
        * Returns the orientability flag.
        	:rtype: bool
        * Sets the orientability flag.
        	:param theIsOrientable:
        	:type theIsOrientable: bool
        	:rtype: None
        """
        return _TopoDS.TopoDS_TShape_Orientable(self, *args)


    def ShapeType(self, *args) -> "TopAbs_ShapeEnum":
        """
        * Returns the type as a term of the ShapeEnum enum : VERTEX, EDGE, WIRE, FACE, ....
        	:rtype: TopAbs_ShapeEnum
        """
        return _TopoDS.TopoDS_TShape_ShapeType(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TShape
TopoDS_TShape.Checked = new_instancemethod(_TopoDS.TopoDS_TShape_Checked, None, TopoDS_TShape)
TopoDS_TShape.Closed = new_instancemethod(_TopoDS.TopoDS_TShape_Closed, None, TopoDS_TShape)
TopoDS_TShape.Convex = new_instancemethod(_TopoDS.TopoDS_TShape_Convex, None, TopoDS_TShape)
TopoDS_TShape.DumpJsonToString = new_instancemethod(_TopoDS.TopoDS_TShape_DumpJsonToString, None, TopoDS_TShape)
TopoDS_TShape.EmptyCopy = new_instancemethod(_TopoDS.TopoDS_TShape_EmptyCopy, None, TopoDS_TShape)
TopoDS_TShape.Free = new_instancemethod(_TopoDS.TopoDS_TShape_Free, None, TopoDS_TShape)
TopoDS_TShape.Infinite = new_instancemethod(_TopoDS.TopoDS_TShape_Infinite, None, TopoDS_TShape)
TopoDS_TShape.Locked = new_instancemethod(_TopoDS.TopoDS_TShape_Locked, None, TopoDS_TShape)
TopoDS_TShape.Modified = new_instancemethod(_TopoDS.TopoDS_TShape_Modified, None, TopoDS_TShape)
TopoDS_TShape.NbChildren = new_instancemethod(_TopoDS.TopoDS_TShape_NbChildren, None, TopoDS_TShape)
TopoDS_TShape.Orientable = new_instancemethod(_TopoDS.TopoDS_TShape_Orientable, None, TopoDS_TShape)
TopoDS_TShape.ShapeType = new_instancemethod(_TopoDS.TopoDS_TShape_ShapeType, None, TopoDS_TShape)
TopoDS_TShape_swigregister = _TopoDS.TopoDS_TShape_swigregister
TopoDS_TShape_swigregister(TopoDS_TShape)

class TopoDS_CompSolid(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an Undefined CompSolid.
        	:rtype: None
        """
        _TopoDS.TopoDS_CompSolid_swiginit(self, _TopoDS.new_TopoDS_CompSolid(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_CompSolid
TopoDS_CompSolid_swigregister = _TopoDS.TopoDS_CompSolid_swigregister
TopoDS_CompSolid_swigregister(TopoDS_CompSolid)

class TopoDS_Compound(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an Undefined Compound.
        	:rtype: None
        """
        _TopoDS.TopoDS_Compound_swiginit(self, _TopoDS.new_TopoDS_Compound(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Compound
TopoDS_Compound_swigregister = _TopoDS.TopoDS_Compound_swigregister
TopoDS_Compound_swigregister(TopoDS_Compound)

class TopoDS_Edge(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Undefined Edge.
        	:rtype: None
        """
        _TopoDS.TopoDS_Edge_swiginit(self, _TopoDS.new_TopoDS_Edge(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Edge
TopoDS_Edge_swigregister = _TopoDS.TopoDS_Edge_swigregister
TopoDS_Edge_swigregister(TopoDS_Edge)

class TopoDS_Face(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Undefined Face.
        	:rtype: None
        """
        _TopoDS.TopoDS_Face_swiginit(self, _TopoDS.new_TopoDS_Face(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Face
TopoDS_Face_swigregister = _TopoDS.TopoDS_Face_swigregister
TopoDS_Face_swigregister(TopoDS_Face)

class TopoDS_Shell(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an Undefined Shell.
        	:rtype: None
        """
        _TopoDS.TopoDS_Shell_swiginit(self, _TopoDS.new_TopoDS_Shell(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Shell
TopoDS_Shell_swigregister = _TopoDS.TopoDS_Shell_swigregister
TopoDS_Shell_swigregister(TopoDS_Shell)

class TopoDS_Solid(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an Undefined Solid.
        	:rtype: None
        """
        _TopoDS.TopoDS_Solid_swiginit(self, _TopoDS.new_TopoDS_Solid(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Solid
TopoDS_Solid_swigregister = _TopoDS.TopoDS_Solid_swigregister
TopoDS_Solid_swigregister(TopoDS_Solid)

class TopoDS_TCompSolid(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty TCompSolid.
        	:rtype: None
        """
        _TopoDS.TopoDS_TCompSolid_swiginit(self, _TopoDS.new_TopoDS_TCompSolid(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TCompSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TCompSolid
TopoDS_TCompSolid_swigregister = _TopoDS.TopoDS_TCompSolid_swigregister
TopoDS_TCompSolid_swigregister(TopoDS_TCompSolid)

class TopoDS_TCompound(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty TCompound.
        	:rtype: None
        """
        _TopoDS.TopoDS_TCompound_swiginit(self, _TopoDS.new_TopoDS_TCompound(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TCompound_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TCompound
TopoDS_TCompound_swigregister = _TopoDS.TopoDS_TCompound_swigregister
TopoDS_TCompound_swigregister(TopoDS_TCompound)

class TopoDS_TEdge(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TEdge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TEdge
TopoDS_TEdge_swigregister = _TopoDS.TopoDS_TEdge_swigregister
TopoDS_TEdge_swigregister(TopoDS_TEdge)

class TopoDS_TFace(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty TFace.
        	:rtype: None
        """
        _TopoDS.TopoDS_TFace_swiginit(self, _TopoDS.new_TopoDS_TFace(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TFace_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TFace
TopoDS_TFace_swigregister = _TopoDS.TopoDS_TFace_swigregister
TopoDS_TFace_swigregister(TopoDS_TFace)

class TopoDS_TShell(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty TShell.
        	:rtype: None
        """
        _TopoDS.TopoDS_TShell_swiginit(self, _TopoDS.new_TopoDS_TShell(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TShell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TShell
TopoDS_TShell_swigregister = _TopoDS.TopoDS_TShell_swigregister
TopoDS_TShell_swigregister(TopoDS_TShell)

class TopoDS_TSolid(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty TSolid.
        	:rtype: None
        """
        _TopoDS.TopoDS_TSolid_swiginit(self, _TopoDS.new_TopoDS_TSolid(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TSolid
TopoDS_TSolid_swigregister = _TopoDS.TopoDS_TSolid_swigregister
TopoDS_TSolid_swigregister(TopoDS_TSolid)

class TopoDS_TVertex(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TVertex_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TVertex
TopoDS_TVertex_swigregister = _TopoDS.TopoDS_TVertex_swigregister
TopoDS_TVertex_swigregister(TopoDS_TVertex)

class TopoDS_TWire(TopoDS_TShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty TWire.
        	:rtype: None
        """
        _TopoDS.TopoDS_TWire_swiginit(self, _TopoDS.new_TopoDS_TWire(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TWire_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TWire
TopoDS_TWire_swigregister = _TopoDS.TopoDS_TWire_swigregister
TopoDS_TWire_swigregister(TopoDS_TWire)

class TopoDS_Vertex(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDS_Vertex self, TopoDS_Vertex arg0) -> TopoDS_Vertex
        * Undefined Vertex.
        	:rtype: None
        """
        _TopoDS.TopoDS_Vertex_swiginit(self, _TopoDS.new_TopoDS_Vertex(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Vertex
TopoDS_Vertex_swigregister = _TopoDS.TopoDS_Vertex_swigregister
TopoDS_Vertex_swigregister(TopoDS_Vertex)

class TopoDS_Wire(TopoDS_Shape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Undefined Wire.
        	:rtype: None
        """
        _TopoDS.TopoDS_Wire_swiginit(self, _TopoDS.new_TopoDS_Wire(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Wire
TopoDS_Wire_swigregister = _TopoDS.TopoDS_Wire_swigregister
TopoDS_Wire_swigregister(TopoDS_Wire)



