# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TransferBRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_transferbrep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TransferBRep.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TransferBRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TransferBRep')
    _TransferBRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TransferBRep', [dirname(__file__)])
        except ImportError:
            import _TransferBRep
            return _TransferBRep
        try:
            _mod = imp.load_module('_TransferBRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TransferBRep = swig_import_helper()
    del swig_import_helper
else:
    import _TransferBRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TransferBRep.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TransferBRep.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TransferBRep.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TransferBRep.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TransferBRep.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TransferBRep.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TransferBRep.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TransferBRep.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TransferBRep.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TransferBRep.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TransferBRep.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TransferBRep.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TransferBRep.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TransferBRep.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TransferBRep.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TransferBRep.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TransferBRep.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TransferBRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TransferBRep.process_exception(error, method_name, class_name)
process_exception = _TransferBRep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.TopTools
import OCC.Core.Transfer

def Handle_TransferBRep_BinderOfShape_Create() -> "opencascade::handle< TransferBRep_BinderOfShape >":
    return _TransferBRep.Handle_TransferBRep_BinderOfShape_Create()
Handle_TransferBRep_BinderOfShape_Create = _TransferBRep.Handle_TransferBRep_BinderOfShape_Create

def Handle_TransferBRep_BinderOfShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TransferBRep_BinderOfShape >":
    return _TransferBRep.Handle_TransferBRep_BinderOfShape_DownCast(t)
Handle_TransferBRep_BinderOfShape_DownCast = _TransferBRep.Handle_TransferBRep_BinderOfShape_DownCast

def Handle_TransferBRep_BinderOfShape_IsNull(t: 'opencascade::handle< TransferBRep_BinderOfShape > const &') -> "bool":
    return _TransferBRep.Handle_TransferBRep_BinderOfShape_IsNull(t)
Handle_TransferBRep_BinderOfShape_IsNull = _TransferBRep.Handle_TransferBRep_BinderOfShape_IsNull

def Handle_TransferBRep_OrientedShapeMapper_Create() -> "opencascade::handle< TransferBRep_OrientedShapeMapper >":
    return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_Create()
Handle_TransferBRep_OrientedShapeMapper_Create = _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_Create

def Handle_TransferBRep_OrientedShapeMapper_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TransferBRep_OrientedShapeMapper >":
    return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_DownCast(t)
Handle_TransferBRep_OrientedShapeMapper_DownCast = _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_DownCast

def Handle_TransferBRep_OrientedShapeMapper_IsNull(t: 'opencascade::handle< TransferBRep_OrientedShapeMapper > const &') -> "bool":
    return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_IsNull(t)
Handle_TransferBRep_OrientedShapeMapper_IsNull = _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_IsNull

def Handle_TransferBRep_ShapeListBinder_Create() -> "opencascade::handle< TransferBRep_ShapeListBinder >":
    return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Create()
Handle_TransferBRep_ShapeListBinder_Create = _TransferBRep.Handle_TransferBRep_ShapeListBinder_Create

def Handle_TransferBRep_ShapeListBinder_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TransferBRep_ShapeListBinder >":
    return _TransferBRep.Handle_TransferBRep_ShapeListBinder_DownCast(t)
Handle_TransferBRep_ShapeListBinder_DownCast = _TransferBRep.Handle_TransferBRep_ShapeListBinder_DownCast

def Handle_TransferBRep_ShapeListBinder_IsNull(t: 'opencascade::handle< TransferBRep_ShapeListBinder > const &') -> "bool":
    return _TransferBRep.Handle_TransferBRep_ShapeListBinder_IsNull(t)
Handle_TransferBRep_ShapeListBinder_IsNull = _TransferBRep.Handle_TransferBRep_ShapeListBinder_IsNull

def Handle_TransferBRep_ShapeMapper_Create() -> "opencascade::handle< TransferBRep_ShapeMapper >":
    return _TransferBRep.Handle_TransferBRep_ShapeMapper_Create()
Handle_TransferBRep_ShapeMapper_Create = _TransferBRep.Handle_TransferBRep_ShapeMapper_Create

def Handle_TransferBRep_ShapeMapper_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TransferBRep_ShapeMapper >":
    return _TransferBRep.Handle_TransferBRep_ShapeMapper_DownCast(t)
Handle_TransferBRep_ShapeMapper_DownCast = _TransferBRep.Handle_TransferBRep_ShapeMapper_DownCast

def Handle_TransferBRep_ShapeMapper_IsNull(t: 'opencascade::handle< TransferBRep_ShapeMapper > const &') -> "bool":
    return _TransferBRep.Handle_TransferBRep_ShapeMapper_IsNull(t)
Handle_TransferBRep_ShapeMapper_IsNull = _TransferBRep.Handle_TransferBRep_ShapeMapper_IsNull

def Handle_TransferBRep_TransferResultInfo_Create() -> "opencascade::handle< TransferBRep_TransferResultInfo >":
    return _TransferBRep.Handle_TransferBRep_TransferResultInfo_Create()
Handle_TransferBRep_TransferResultInfo_Create = _TransferBRep.Handle_TransferBRep_TransferResultInfo_Create

def Handle_TransferBRep_TransferResultInfo_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TransferBRep_TransferResultInfo >":
    return _TransferBRep.Handle_TransferBRep_TransferResultInfo_DownCast(t)
Handle_TransferBRep_TransferResultInfo_DownCast = _TransferBRep.Handle_TransferBRep_TransferResultInfo_DownCast

def Handle_TransferBRep_TransferResultInfo_IsNull(t: 'opencascade::handle< TransferBRep_TransferResultInfo > const &') -> "bool":
    return _TransferBRep.Handle_TransferBRep_TransferResultInfo_IsNull(t)
Handle_TransferBRep_TransferResultInfo_IsNull = _TransferBRep.Handle_TransferBRep_TransferResultInfo_IsNull

def Handle_TransferBRep_ShapeBinder_Create() -> "opencascade::handle< TransferBRep_ShapeBinder >":
    return _TransferBRep.Handle_TransferBRep_ShapeBinder_Create()
Handle_TransferBRep_ShapeBinder_Create = _TransferBRep.Handle_TransferBRep_ShapeBinder_Create

def Handle_TransferBRep_ShapeBinder_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TransferBRep_ShapeBinder >":
    return _TransferBRep.Handle_TransferBRep_ShapeBinder_DownCast(t)
Handle_TransferBRep_ShapeBinder_DownCast = _TransferBRep.Handle_TransferBRep_ShapeBinder_DownCast

def Handle_TransferBRep_ShapeBinder_IsNull(t: 'opencascade::handle< TransferBRep_ShapeBinder > const &') -> "bool":
    return _TransferBRep.Handle_TransferBRep_ShapeBinder_IsNull(t)
Handle_TransferBRep_ShapeBinder_IsNull = _TransferBRep.Handle_TransferBRep_ShapeBinder_IsNull

def Handle_TransferBRep_HSequenceOfTransferResultInfo_Create() -> "opencascade::handle< TransferBRep_HSequenceOfTransferResultInfo >":
    return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_Create()
Handle_TransferBRep_HSequenceOfTransferResultInfo_Create = _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_Create

def Handle_TransferBRep_HSequenceOfTransferResultInfo_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TransferBRep_HSequenceOfTransferResultInfo >":
    return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_DownCast(t)
Handle_TransferBRep_HSequenceOfTransferResultInfo_DownCast = _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_DownCast

def Handle_TransferBRep_HSequenceOfTransferResultInfo_IsNull(t: 'opencascade::handle< TransferBRep_HSequenceOfTransferResultInfo > const &') -> "bool":
    return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_IsNull(t)
Handle_TransferBRep_HSequenceOfTransferResultInfo_IsNull = _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_IsNull
class TransferBRep_SequenceOfTransferResultInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TransferBRep.TransferBRep_SequenceOfTransferResultInfo_swiginit(self, _TransferBRep.new_TransferBRep_SequenceOfTransferResultInfo(*args))
    delNode = staticmethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_delNode)
    __swig_destroy__ = _TransferBRep.delete_TransferBRep_SequenceOfTransferResultInfo
TransferBRep_SequenceOfTransferResultInfo.begin = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_begin, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.end = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_end, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.cbegin = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_cbegin, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.cend = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_cend, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Size = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Size, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Length = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Length, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Lower = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Lower, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Upper = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Upper, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.IsEmpty = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_IsEmpty, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Reverse = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Reverse, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Exchange = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Exchange, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Clear = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Clear, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Assign = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Assign, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Set = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Set, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Remove = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Remove, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Append = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Append, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Prepend = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Prepend, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.InsertBefore = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_InsertBefore, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.InsertAfter = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_InsertAfter, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Split = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Split, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.First = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_First, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.ChangeFirst = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_ChangeFirst, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Last = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Last, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.ChangeLast = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_ChangeLast, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.Value = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_Value, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.ChangeValue = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_ChangeValue, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.__call__ = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo___call__, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo.SetValue = new_instancemethod(_TransferBRep.TransferBRep_SequenceOfTransferResultInfo_SetValue, None, TransferBRep_SequenceOfTransferResultInfo)
TransferBRep_SequenceOfTransferResultInfo_swigregister = _TransferBRep.TransferBRep_SequenceOfTransferResultInfo_swigregister
TransferBRep_SequenceOfTransferResultInfo_swigregister(TransferBRep_SequenceOfTransferResultInfo)

def TransferBRep_SequenceOfTransferResultInfo_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TransferBRep.TransferBRep_SequenceOfTransferResultInfo_delNode(theNode, theAl)
TransferBRep_SequenceOfTransferResultInfo_delNode = _TransferBRep.TransferBRep_SequenceOfTransferResultInfo_delNode

class transferbrep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CheckObject(*args) -> "Interface_CheckIterator":
        """
        * Returns the check-list bound to a given object, generally none (if OK) or one check. <obj> can be, either a true Transient object or entity, or a ShapeMapper, in that case the Shape is considered
        	:param chl:
        	:type chl: Interface_CheckIterator
        	:param obj:
        	:type obj: Standard_Transient
        	:rtype: Interface_CheckIterator
        """
        return _TransferBRep.transferbrep_CheckObject(*args)

    CheckObject = staticmethod(CheckObject)

    def Checked(*args) -> "opencascade::handle< TColStd_HSequenceOfTransient >":
        """
        * Returns the list of objects to which a non-empty Check is bound in a check-list. Objects are transients, they can then be either Imagine objects entities for an Interface Norm. <alsoshapes> commands Shapes to be returned too (as ShapeMapper), see also CheckedShapes
        	:param chl:
        	:type chl: Interface_CheckIterator
        	:param alsoshapes: default value is Standard_False
        	:type alsoshapes: bool
        	:rtype: opencascade::handle<TColStd_HSequenceOfTransient>
        """
        return _TransferBRep.transferbrep_Checked(*args)

    Checked = staticmethod(Checked)

    def CheckedShapes(*args) -> "opencascade::handle< TopTools_HSequenceOfShape >":
        """
        * Returns the list of shapes to which a non-empty Check is bound in a check-list
        	:param chl:
        	:type chl: Interface_CheckIterator
        	:rtype: opencascade::handle<TopTools_HSequenceOfShape>
        """
        return _TransferBRep.transferbrep_CheckedShapes(*args)

    CheckedShapes = staticmethod(CheckedShapes)

    def PrintResultInfo(*args) -> "void":
        """
        * Prints the results of transfer to given priner with given header.
        	:param Printer:
        	:type Printer: Message_Printer
        	:param Header:
        	:type Header: Message_Msg
        	:param ResultInfo:
        	:type ResultInfo: TransferBRep_TransferResultInfo
        	:param printEmpty: default value is Standard_True
        	:type printEmpty: bool
        	:rtype: void
        """
        return _TransferBRep.transferbrep_PrintResultInfo(*args)

    PrintResultInfo = staticmethod(PrintResultInfo)

    def ResultCheckList(*args) -> "Interface_CheckIterator":
        """
        * Takes a starting CheckIterator which brings checks bound with starting objects (Shapes, Transient from an Imagine appli ...) and converts it to a CheckIterator in which checks are bound with results in an InterfaceModel Mapping is recorded in the FinderProcess Starting objects for which no individual result is recorded remain in their state
        	:param chl:
        	:type chl: Interface_CheckIterator
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:param model:
        	:type model: Interface_InterfaceModel
        	:rtype: Interface_CheckIterator
        """
        return _TransferBRep.transferbrep_ResultCheckList(*args)

    ResultCheckList = staticmethod(ResultCheckList)

    def ResultFromShape(*args) -> "opencascade::handle< Transfer_Binder >":
        """
        * Returns the result (as a Binder) attached to a given Shape Null if none
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: opencascade::handle<Transfer_Binder>
        """
        return _TransferBRep.transferbrep_ResultFromShape(*args)

    ResultFromShape = staticmethod(ResultFromShape)

    def SetShapeResult(*args) -> "void":
        """
        * Sets a Shape as a result for a starting entity <ent> (reverse of ShapeResult) It simply creates a ShapeBinder then binds it to the entity
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:param ent:
        	:type ent: Standard_Transient
        	:param result:
        	:type result: TopoDS_Shape
        	:rtype: void
        """
        return _TransferBRep.transferbrep_SetShapeResult(*args)

    SetShapeResult = staticmethod(SetShapeResult)

    def SetTransientFromShape(*args) -> "void":
        """
        * Binds a Transient Result to a Shape in a FinderProcess (as first result if multiple : does not add it to existing one)
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param result:
        	:type result: Standard_Transient
        	:rtype: void
        """
        return _TransferBRep.transferbrep_SetTransientFromShape(*args)

    SetTransientFromShape = staticmethod(SetTransientFromShape)

    def ShapeMapper(*args) -> "opencascade::handle< TransferBRep_ShapeMapper >":
        """
        * Returns a ShapeMapper for a given Shape (location included) Either <shape> is already mapped, then its Mapper is returned Or it is not, then a new one is created then returned, BUT it is not mapped here (use Bind or FindElseBind to do this)
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: opencascade::handle<TransferBRep_ShapeMapper>
        """
        return _TransferBRep.transferbrep_ShapeMapper(*args)

    ShapeMapper = staticmethod(ShapeMapper)

    def ShapeResult(*args) -> "TopoDS_Shape":
        """
        * Get the Shape recorded in a Binder If the Binder brings a multiple result, search for the Shape
        	:param binder:
        	:type binder: Transfer_Binder
        	:rtype: TopoDS_Shape
        * Get the Shape recorded in a TransientProcess as result of the Transfer of an entity. I.E. in the binder bound to that Entity If no result or result not a single Shape, returns a Null Shape
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:param ent:
        	:type ent: Standard_Transient
        	:rtype: TopoDS_Shape
        """
        return _TransferBRep.transferbrep_ShapeResult(*args)

    ShapeResult = staticmethod(ShapeResult)

    def ShapeState(*args) -> "TopAbs_Orientation":
        """
        * Returns a Status regarding a Shape in a FinderProcess - FORWARD means bound with SAME Orientation - REVERSED means bound with REVERSE Orientation - EXTERNAL means NOT BOUND - INTERNAL is not used
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: TopAbs_Orientation
        """
        return _TransferBRep.transferbrep_ShapeState(*args)

    ShapeState = staticmethod(ShapeState)

    def Shapes(*args) -> "opencascade::handle< TopTools_HSequenceOfShape >":
        """
        * Gets the Shapes recorded in a TransientProcess as result of a Transfer, considers roots only or all results according <rootsonly>, returns them as a HSequence
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:param rootsonly: default value is Standard_True
        	:type rootsonly: bool
        	:rtype: opencascade::handle<TopTools_HSequenceOfShape>
        * Gets the Shapes recorded in a TransientProcess as result of a Transfer, for a given list of starting entities, returns the shapes as a HSequence
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:param list:
        	:type list: TColStd_HSequenceOfTransient
        	:rtype: opencascade::handle<TopTools_HSequenceOfShape>
        """
        return _TransferBRep.transferbrep_Shapes(*args)

    Shapes = staticmethod(Shapes)

    def TransferResultInfo(*args) -> "void":
        """
        * Fills sequence of TransferResultInfo for each type of entity given in the EntityTypes (entity are given as objects). Method IsKind applied to the entities in TP is used to compare with entities in EntityTypes. TopAbs_ShapeEnum).
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:param EntityTypes:
        	:type EntityTypes: TColStd_HSequenceOfTransient
        	:param InfoSeq:
        	:type InfoSeq: TransferBRep_HSequenceOfTransferResultInfo
        	:rtype: void
        * Fills sequence of TransferResultInfo for each type of shape given in the ShapeTypes (which are in fact considered as TopAbs_ShapeEnum). The Finders in the FP are considered as ShapeMappers.
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:param ShapeTypes:
        	:type ShapeTypes: TColStd_HSequenceOfInteger
        	:param InfoSeq:
        	:type InfoSeq: TransferBRep_HSequenceOfTransferResultInfo
        	:rtype: void
        """
        return _TransferBRep.transferbrep_TransferResultInfo(*args)

    TransferResultInfo = staticmethod(TransferResultInfo)

    def TransientFromShape(*args) -> "opencascade::handle< Standard_Transient >":
        """
        * Returns the result as pure Transient attached to a Shape first one if multiple result
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: opencascade::handle<Standard_Transient>
        """
        return _TransferBRep.transferbrep_TransientFromShape(*args)

    TransientFromShape = staticmethod(TransientFromShape)

    __repr__ = _dumps_object


    def __init__(self):
        _TransferBRep.transferbrep_swiginit(self, _TransferBRep.new_transferbrep())
    __swig_destroy__ = _TransferBRep.delete_transferbrep
transferbrep_swigregister = _TransferBRep.transferbrep_swigregister
transferbrep_swigregister(transferbrep)

def transferbrep_CheckObject(*args) -> "Interface_CheckIterator":
    """
    * Returns the check-list bound to a given object, generally none (if OK) or one check. <obj> can be, either a true Transient object or entity, or a ShapeMapper, in that case the Shape is considered
    	:param chl:
    	:type chl: Interface_CheckIterator
    	:param obj:
    	:type obj: Standard_Transient
    	:rtype: Interface_CheckIterator
    """
    return _TransferBRep.transferbrep_CheckObject(*args)

def transferbrep_Checked(*args) -> "opencascade::handle< TColStd_HSequenceOfTransient >":
    """
    * Returns the list of objects to which a non-empty Check is bound in a check-list. Objects are transients, they can then be either Imagine objects entities for an Interface Norm. <alsoshapes> commands Shapes to be returned too (as ShapeMapper), see also CheckedShapes
    	:param chl:
    	:type chl: Interface_CheckIterator
    	:param alsoshapes: default value is Standard_False
    	:type alsoshapes: bool
    	:rtype: opencascade::handle<TColStd_HSequenceOfTransient>
    """
    return _TransferBRep.transferbrep_Checked(*args)

def transferbrep_CheckedShapes(*args) -> "opencascade::handle< TopTools_HSequenceOfShape >":
    """
    * Returns the list of shapes to which a non-empty Check is bound in a check-list
    	:param chl:
    	:type chl: Interface_CheckIterator
    	:rtype: opencascade::handle<TopTools_HSequenceOfShape>
    """
    return _TransferBRep.transferbrep_CheckedShapes(*args)

def transferbrep_PrintResultInfo(*args) -> "void":
    """
    * Prints the results of transfer to given priner with given header.
    	:param Printer:
    	:type Printer: Message_Printer
    	:param Header:
    	:type Header: Message_Msg
    	:param ResultInfo:
    	:type ResultInfo: TransferBRep_TransferResultInfo
    	:param printEmpty: default value is Standard_True
    	:type printEmpty: bool
    	:rtype: void
    """
    return _TransferBRep.transferbrep_PrintResultInfo(*args)

def transferbrep_ResultCheckList(*args) -> "Interface_CheckIterator":
    """
    * Takes a starting CheckIterator which brings checks bound with starting objects (Shapes, Transient from an Imagine appli ...) and converts it to a CheckIterator in which checks are bound with results in an InterfaceModel Mapping is recorded in the FinderProcess Starting objects for which no individual result is recorded remain in their state
    	:param chl:
    	:type chl: Interface_CheckIterator
    	:param FP:
    	:type FP: Transfer_FinderProcess
    	:param model:
    	:type model: Interface_InterfaceModel
    	:rtype: Interface_CheckIterator
    """
    return _TransferBRep.transferbrep_ResultCheckList(*args)

def transferbrep_ResultFromShape(*args) -> "opencascade::handle< Transfer_Binder >":
    """
    * Returns the result (as a Binder) attached to a given Shape Null if none
    	:param FP:
    	:type FP: Transfer_FinderProcess
    	:param shape:
    	:type shape: TopoDS_Shape
    	:rtype: opencascade::handle<Transfer_Binder>
    """
    return _TransferBRep.transferbrep_ResultFromShape(*args)

def transferbrep_SetShapeResult(*args) -> "void":
    """
    * Sets a Shape as a result for a starting entity <ent> (reverse of ShapeResult) It simply creates a ShapeBinder then binds it to the entity
    	:param TP:
    	:type TP: Transfer_TransientProcess
    	:param ent:
    	:type ent: Standard_Transient
    	:param result:
    	:type result: TopoDS_Shape
    	:rtype: void
    """
    return _TransferBRep.transferbrep_SetShapeResult(*args)

def transferbrep_SetTransientFromShape(*args) -> "void":
    """
    * Binds a Transient Result to a Shape in a FinderProcess (as first result if multiple : does not add it to existing one)
    	:param FP:
    	:type FP: Transfer_FinderProcess
    	:param shape:
    	:type shape: TopoDS_Shape
    	:param result:
    	:type result: Standard_Transient
    	:rtype: void
    """
    return _TransferBRep.transferbrep_SetTransientFromShape(*args)

def transferbrep_ShapeMapper(*args) -> "opencascade::handle< TransferBRep_ShapeMapper >":
    """
    * Returns a ShapeMapper for a given Shape (location included) Either <shape> is already mapped, then its Mapper is returned Or it is not, then a new one is created then returned, BUT it is not mapped here (use Bind or FindElseBind to do this)
    	:param FP:
    	:type FP: Transfer_FinderProcess
    	:param shape:
    	:type shape: TopoDS_Shape
    	:rtype: opencascade::handle<TransferBRep_ShapeMapper>
    """
    return _TransferBRep.transferbrep_ShapeMapper(*args)

def transferbrep_ShapeResult(*args) -> "TopoDS_Shape":
    """
    * Get the Shape recorded in a Binder If the Binder brings a multiple result, search for the Shape
    	:param binder:
    	:type binder: Transfer_Binder
    	:rtype: TopoDS_Shape
    * Get the Shape recorded in a TransientProcess as result of the Transfer of an entity. I.E. in the binder bound to that Entity If no result or result not a single Shape, returns a Null Shape
    	:param TP:
    	:type TP: Transfer_TransientProcess
    	:param ent:
    	:type ent: Standard_Transient
    	:rtype: TopoDS_Shape
    """
    return _TransferBRep.transferbrep_ShapeResult(*args)

def transferbrep_ShapeState(*args) -> "TopAbs_Orientation":
    """
    * Returns a Status regarding a Shape in a FinderProcess - FORWARD means bound with SAME Orientation - REVERSED means bound with REVERSE Orientation - EXTERNAL means NOT BOUND - INTERNAL is not used
    	:param FP:
    	:type FP: Transfer_FinderProcess
    	:param shape:
    	:type shape: TopoDS_Shape
    	:rtype: TopAbs_Orientation
    """
    return _TransferBRep.transferbrep_ShapeState(*args)

def transferbrep_Shapes(*args) -> "opencascade::handle< TopTools_HSequenceOfShape >":
    """
    * Gets the Shapes recorded in a TransientProcess as result of a Transfer, considers roots only or all results according <rootsonly>, returns them as a HSequence
    	:param TP:
    	:type TP: Transfer_TransientProcess
    	:param rootsonly: default value is Standard_True
    	:type rootsonly: bool
    	:rtype: opencascade::handle<TopTools_HSequenceOfShape>
    * Gets the Shapes recorded in a TransientProcess as result of a Transfer, for a given list of starting entities, returns the shapes as a HSequence
    	:param TP:
    	:type TP: Transfer_TransientProcess
    	:param list:
    	:type list: TColStd_HSequenceOfTransient
    	:rtype: opencascade::handle<TopTools_HSequenceOfShape>
    """
    return _TransferBRep.transferbrep_Shapes(*args)

def transferbrep_TransferResultInfo(*args) -> "void":
    """
    * Fills sequence of TransferResultInfo for each type of entity given in the EntityTypes (entity are given as objects). Method IsKind applied to the entities in TP is used to compare with entities in EntityTypes. TopAbs_ShapeEnum).
    	:param TP:
    	:type TP: Transfer_TransientProcess
    	:param EntityTypes:
    	:type EntityTypes: TColStd_HSequenceOfTransient
    	:param InfoSeq:
    	:type InfoSeq: TransferBRep_HSequenceOfTransferResultInfo
    	:rtype: void
    * Fills sequence of TransferResultInfo for each type of shape given in the ShapeTypes (which are in fact considered as TopAbs_ShapeEnum). The Finders in the FP are considered as ShapeMappers.
    	:param FP:
    	:type FP: Transfer_FinderProcess
    	:param ShapeTypes:
    	:type ShapeTypes: TColStd_HSequenceOfInteger
    	:param InfoSeq:
    	:type InfoSeq: TransferBRep_HSequenceOfTransferResultInfo
    	:rtype: void
    """
    return _TransferBRep.transferbrep_TransferResultInfo(*args)

def transferbrep_TransientFromShape(*args) -> "opencascade::handle< Standard_Transient >":
    """
    * Returns the result as pure Transient attached to a Shape first one if multiple result
    	:param FP:
    	:type FP: Transfer_FinderProcess
    	:param shape:
    	:type shape: TopoDS_Shape
    	:rtype: opencascade::handle<Standard_Transient>
    """
    return _TransferBRep.transferbrep_TransientFromShape(*args)

class TransferBRep_BinderOfShape(OCC.Core.Transfer.Transfer_Binder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CResult(self, *args) -> "TopoDS_Shape":
        """
        * Returns the defined Result, if there is one, and allows to change it (avoids Result + SetResult). Admits that Result can be not yet defined Warning : a call to CResult causes Result to be known as defined
        	:rtype: TopoDS_Shape
        """
        return _TransferBRep.TransferBRep_BinderOfShape_CResult(self, *args)


    def Result(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the defined Result, if there is one
        	:rtype: TopoDS_Shape
        """
        return _TransferBRep.TransferBRep_BinderOfShape_Result(self, *args)


    def SetResult(self, *args) -> "void":
        """
        * Defines the Result
        	:param res:
        	:type res: TopoDS_Shape
        	:rtype: None
        """
        return _TransferBRep.TransferBRep_BinderOfShape_SetResult(self, *args)


    def __init__(self, *args):
        """
        * normal standard constructor, creates an empty BinderOfShape
        	:rtype: None
        * constructor which in the same time defines the result Returns True if a starting object is bound with SEVERAL results : Here, returns allways False But it can have next results
        	:param res:
        	:type res: TopoDS_Shape
        	:rtype: None
        """
        _TransferBRep.TransferBRep_BinderOfShape_swiginit(self, _TransferBRep.new_TransferBRep_BinderOfShape(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TransferBRep_BinderOfShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TransferBRep.delete_TransferBRep_BinderOfShape
TransferBRep_BinderOfShape.CResult = new_instancemethod(_TransferBRep.TransferBRep_BinderOfShape_CResult, None, TransferBRep_BinderOfShape)
TransferBRep_BinderOfShape.Result = new_instancemethod(_TransferBRep.TransferBRep_BinderOfShape_Result, None, TransferBRep_BinderOfShape)
TransferBRep_BinderOfShape.SetResult = new_instancemethod(_TransferBRep.TransferBRep_BinderOfShape_SetResult, None, TransferBRep_BinderOfShape)
TransferBRep_BinderOfShape_swigregister = _TransferBRep.TransferBRep_BinderOfShape_swigregister
TransferBRep_BinderOfShape_swigregister(TransferBRep_BinderOfShape)

class TransferBRep_OrientedShapeMapper(OCC.Core.Transfer.Transfer_Finder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a Mapper with a Value. This Value can then not be changed. It is used by the Hasher to compute the HashCode, which will then be stored for an immediate reading.
        	:param akey:
        	:type akey: TopoDS_Shape
        	:rtype: None
        """
        _TransferBRep.TransferBRep_OrientedShapeMapper_swiginit(self, _TransferBRep.new_TransferBRep_OrientedShapeMapper(*args))

    def Value(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the contained value
        	:rtype: TopoDS_Shape
        """
        return _TransferBRep.TransferBRep_OrientedShapeMapper_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TransferBRep_OrientedShapeMapper_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TransferBRep.delete_TransferBRep_OrientedShapeMapper
TransferBRep_OrientedShapeMapper.Value = new_instancemethod(_TransferBRep.TransferBRep_OrientedShapeMapper_Value, None, TransferBRep_OrientedShapeMapper)
TransferBRep_OrientedShapeMapper_swigregister = _TransferBRep.TransferBRep_OrientedShapeMapper_swigregister
TransferBRep_OrientedShapeMapper_swigregister(TransferBRep_OrientedShapeMapper)

class TransferBRep_Reader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Actor(self, *args) -> "opencascade::handle< Transfer_ActorOfTransientProcess >":
        """
        * Returns the recorded Actor
        	:rtype: opencascade::handle<Transfer_ActorOfTransientProcess>
        """
        return _TransferBRep.TransferBRep_Reader_Actor(self, *args)


    def BeginTransfer(self, *args) -> "Standard_Boolean":
        """
        * Initializes the Reader for a Transfer (one,roots, or list) Also calls PrepareTransfer Returns True when done, False if could not be done
        	:rtype: bool
        """
        return _TransferBRep.TransferBRep_Reader_BeginTransfer(self, *args)


    def CheckListModel(self, *args) -> "Interface_CheckIterator":
        """
        * Checks the Model (complete : syntax + semantic) and returns the produced Check List
        	:rtype: Interface_CheckIterator
        """
        return _TransferBRep.TransferBRep_Reader_CheckListModel(self, *args)


    def CheckListResult(self, *args) -> "Interface_CheckIterator":
        """
        * Checks the Result of last Transfer (individual or roots, no cumulation on several transfers) and returns the produced list
        	:rtype: Interface_CheckIterator
        """
        return _TransferBRep.TransferBRep_Reader_CheckListResult(self, *args)


    def CheckStatusModel(self, *args) -> "Standard_Boolean":
        """
        * Checks the Model. Returns True if there is NO FAIL at all (regardless Warnings) If <withprint> is True, also sends Checks on standard output
        	:param withprint:
        	:type withprint: bool
        	:rtype: bool
        """
        return _TransferBRep.TransferBRep_Reader_CheckStatusModel(self, *args)


    def CheckStatusResult(self, *args) -> "Standard_Boolean":
        """
        * Checks the Result of last Transfer (individual or roots, no cumulation on several transfers). Returns True if NO fail occured during Transfer (queries the TransientProcess)
        	:param withprints:
        	:type withprints: bool
        	:rtype: bool
        """
        return _TransferBRep.TransferBRep_Reader_CheckStatusResult(self, *args)


    def Clear(self, *args) -> "void":
        """
        * clears the result and Done status. But not the Model.
        	:rtype: None
        """
        return _TransferBRep.TransferBRep_Reader_Clear(self, *args)


    def EndTransfer(self, *args) -> "void":
        """
        * Ebds a Transfer (one, roots or list) by recording its result
        	:rtype: None
        """
        return _TransferBRep.TransferBRep_Reader_EndTransfer(self, *args)


    def FileNotFound(self, *args) -> "Standard_Boolean":
        """
        * Returns True if FileStatus is for FileNotFound
        	:rtype: bool
        """
        return _TransferBRep.TransferBRep_Reader_FileNotFound(self, *args)


    def FileStatus(self, *args) -> "Standard_Integer":
        """
        * Returns the File Status
        	:rtype: int
        """
        return _TransferBRep.TransferBRep_Reader_FileStatus(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the LAST Transfer/TransferRoots was a success
        	:rtype: bool
        """
        return _TransferBRep.TransferBRep_Reader_IsDone(self, *args)


    def GetModeNewTransfer(self) -> "Standard_Boolean":
        """GetModeNewTransfer(TransferBRep_Reader self) -> Standard_Boolean"""
        return _TransferBRep.TransferBRep_Reader_GetModeNewTransfer(self)


    def SetModeNewTransfer(self, value: 'Standard_Boolean') -> "void":
        """SetModeNewTransfer(TransferBRep_Reader self, Standard_Boolean value)"""
        return _TransferBRep.TransferBRep_Reader_SetModeNewTransfer(self, value)


    def Model(self, *args) -> "opencascade::handle< Interface_InterfaceModel >":
        """
        * Returns the Model to be worked on
        	:rtype: opencascade::handle<Interface_InterfaceModel>
        """
        return _TransferBRep.TransferBRep_Reader_Model(self, *args)


    def NbShapes(self, *args) -> "Standard_Integer":
        """
        * Returns the count of produced Shapes (roots)
        	:rtype: int
        """
        return _TransferBRep.TransferBRep_Reader_NbShapes(self, *args)


    def NbTransients(self, *args) -> "Standard_Integer":
        """
        * Returns the count of produced Transient Results (roots)
        	:rtype: int
        """
        return _TransferBRep.TransferBRep_Reader_NbTransients(self, *args)


    def OneShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns a unique Shape for the result : - a void Shape (type = SHAPE) if result is empty - a simple Shape if result has only one : returns this one - a Compound if result has more than one Shape
        	:rtype: TopoDS_Shape
        """
        return _TransferBRep.TransferBRep_Reader_OneShape(self, *args)


    def PrepareTransfer(self, *args) -> "void":
        """
        * Prepares the Transfer. Also can act on the Actor or change the TransientProcess if required. Should not set the Actor into the TransientProcess, it is done by caller. The provided default does nothing.
        	:rtype: void
        """
        return _TransferBRep.TransferBRep_Reader_PrepareTransfer(self, *args)


    def Protocol(self, *args) -> "opencascade::handle< Interface_Protocol >":
        """
        * Returns the recorded Protocol
        	:rtype: opencascade::handle<Interface_Protocol>
        """
        return _TransferBRep.TransferBRep_Reader_Protocol(self, *args)


    def SetActor(self, *args) -> "void":
        """
        * Records the actor to be used for transfers
        	:param actor:
        	:type actor: Transfer_ActorOfTransientProcess
        	:rtype: None
        """
        return _TransferBRep.TransferBRep_Reader_SetActor(self, *args)


    def SetFileStatus(self, *args) -> "void":
        """
        * Sets File Status to be interpreted as follows : = 0 OK < 0 file not found > 0 read error, no Model could be created
        	:param status:
        	:type status: int
        	:rtype: None
        """
        return _TransferBRep.TransferBRep_Reader_SetFileStatus(self, *args)


    def SetModel(self, *args) -> "void":
        """
        * Specifies a Model to work on Also clears the result and Done status
        	:param model:
        	:type model: Interface_InterfaceModel
        	:rtype: None
        """
        return _TransferBRep.TransferBRep_Reader_SetModel(self, *args)


    def SetProtocol(self, *args) -> "void":
        """
        * Records the protocol to be used for read and transfer roots
        	:param protocol:
        	:type protocol: Interface_Protocol
        	:rtype: None
        """
        return _TransferBRep.TransferBRep_Reader_SetProtocol(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns a Shape given its rank, by default the first one
        	:param num: default value is 1
        	:type num: int
        	:rtype: TopoDS_Shape
        """
        return _TransferBRep.TransferBRep_Reader_Shape(self, *args)


    def ShapeResult(self, *args) -> "TopoDS_Shape":
        """
        * Returns a Shape produced from a given entity (if it was individually transferred or if an intermediate result is known). If no Shape is bound with <ent>, returns a Null Shape Warning : Runs on the last call to Transfer,TransferRoots,TransferList
        	:param ent:
        	:type ent: Standard_Transient
        	:rtype: TopoDS_Shape
        """
        return _TransferBRep.TransferBRep_Reader_ShapeResult(self, *args)


    def Shapes(self, *args) -> "opencascade::handle< TopTools_HSequenceOfShape >":
        """
        * Returns the complete list of produced Shapes
        	:rtype: opencascade::handle<TopTools_HSequenceOfShape>
        """
        return _TransferBRep.TransferBRep_Reader_Shapes(self, *args)


    def SyntaxError(self, *args) -> "Standard_Boolean":
        """
        * Returns True if FileStatus is for Error during read (major error; for local error, see CheckModel)
        	:rtype: bool
        """
        return _TransferBRep.TransferBRep_Reader_SyntaxError(self, *args)


    def Transfer(self, *args) -> "Standard_Boolean":
        """
        * Transfers an Entity given its rank in the Model (Root or not) Returns True if it is recognized as Geom-Topol. (But it can have failed : see IsDone)
        	:param num:
        	:type num: int
        	:rtype: bool
        """
        return _TransferBRep.TransferBRep_Reader_Transfer(self, *args)


    def __init__(self, *args):
        """
        * Initializes a non-specialised Reader. Typically, for each norm or protocol, is will be required to define a specific Create to load a file and transfer it
        	:rtype: None
        """
        _TransferBRep.TransferBRep_Reader_swiginit(self, _TransferBRep.new_TransferBRep_Reader(*args))

    def TransferList(self, *args) -> "void":
        """
        * Transfers a list of Entities (only the ones also in the Model) Remark : former result is cleared
        	:param list:
        	:type list: TColStd_HSequenceOfTransient
        	:rtype: void
        """
        return _TransferBRep.TransferBRep_Reader_TransferList(self, *args)


    def TransferRoots(self, *args) -> "void":
        """
        * Transfers all Root Entities which are recognized as Geom-Topol The result will be a list of Shapes. This method calls user redefinable PrepareTransfer Remark : former result is cleared
        	:rtype: void
        """
        return _TransferBRep.TransferBRep_Reader_TransferRoots(self, *args)


    def Transient(self, *args) -> "opencascade::handle< Standard_Transient >":
        """
        * Returns a Transient Root Result, given its rank (by default the first one)
        	:param num: default value is 1
        	:type num: int
        	:rtype: opencascade::handle<Standard_Transient>
        """
        return _TransferBRep.TransferBRep_Reader_Transient(self, *args)


    def TransientProcess(self, *args) -> "opencascade::handle< Transfer_TransientProcess >":
        """
        * Returns the TransientProcess. It records informations about the very last transfer done. Null if no transfer yet done. Can be used for queries more accurate than the default ones.
        	:rtype: opencascade::handle<Transfer_TransientProcess>
        """
        return _TransferBRep.TransferBRep_Reader_TransientProcess(self, *args)


    def Transients(self, *args) -> "opencascade::handle< TColStd_HSequenceOfTransient >":
        """
        * Returns the complete list of produced Transient Results
        	:rtype: opencascade::handle<TColStd_HSequenceOfTransient>
        """
        return _TransferBRep.TransferBRep_Reader_Transients(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TransferBRep.delete_TransferBRep_Reader
TransferBRep_Reader.Actor = new_instancemethod(_TransferBRep.TransferBRep_Reader_Actor, None, TransferBRep_Reader)
TransferBRep_Reader.BeginTransfer = new_instancemethod(_TransferBRep.TransferBRep_Reader_BeginTransfer, None, TransferBRep_Reader)
TransferBRep_Reader.CheckListModel = new_instancemethod(_TransferBRep.TransferBRep_Reader_CheckListModel, None, TransferBRep_Reader)
TransferBRep_Reader.CheckListResult = new_instancemethod(_TransferBRep.TransferBRep_Reader_CheckListResult, None, TransferBRep_Reader)
TransferBRep_Reader.CheckStatusModel = new_instancemethod(_TransferBRep.TransferBRep_Reader_CheckStatusModel, None, TransferBRep_Reader)
TransferBRep_Reader.CheckStatusResult = new_instancemethod(_TransferBRep.TransferBRep_Reader_CheckStatusResult, None, TransferBRep_Reader)
TransferBRep_Reader.Clear = new_instancemethod(_TransferBRep.TransferBRep_Reader_Clear, None, TransferBRep_Reader)
TransferBRep_Reader.EndTransfer = new_instancemethod(_TransferBRep.TransferBRep_Reader_EndTransfer, None, TransferBRep_Reader)
TransferBRep_Reader.FileNotFound = new_instancemethod(_TransferBRep.TransferBRep_Reader_FileNotFound, None, TransferBRep_Reader)
TransferBRep_Reader.FileStatus = new_instancemethod(_TransferBRep.TransferBRep_Reader_FileStatus, None, TransferBRep_Reader)
TransferBRep_Reader.IsDone = new_instancemethod(_TransferBRep.TransferBRep_Reader_IsDone, None, TransferBRep_Reader)
TransferBRep_Reader.GetModeNewTransfer = new_instancemethod(_TransferBRep.TransferBRep_Reader_GetModeNewTransfer, None, TransferBRep_Reader)
TransferBRep_Reader.SetModeNewTransfer = new_instancemethod(_TransferBRep.TransferBRep_Reader_SetModeNewTransfer, None, TransferBRep_Reader)
TransferBRep_Reader.Model = new_instancemethod(_TransferBRep.TransferBRep_Reader_Model, None, TransferBRep_Reader)
TransferBRep_Reader.NbShapes = new_instancemethod(_TransferBRep.TransferBRep_Reader_NbShapes, None, TransferBRep_Reader)
TransferBRep_Reader.NbTransients = new_instancemethod(_TransferBRep.TransferBRep_Reader_NbTransients, None, TransferBRep_Reader)
TransferBRep_Reader.OneShape = new_instancemethod(_TransferBRep.TransferBRep_Reader_OneShape, None, TransferBRep_Reader)
TransferBRep_Reader.PrepareTransfer = new_instancemethod(_TransferBRep.TransferBRep_Reader_PrepareTransfer, None, TransferBRep_Reader)
TransferBRep_Reader.Protocol = new_instancemethod(_TransferBRep.TransferBRep_Reader_Protocol, None, TransferBRep_Reader)
TransferBRep_Reader.SetActor = new_instancemethod(_TransferBRep.TransferBRep_Reader_SetActor, None, TransferBRep_Reader)
TransferBRep_Reader.SetFileStatus = new_instancemethod(_TransferBRep.TransferBRep_Reader_SetFileStatus, None, TransferBRep_Reader)
TransferBRep_Reader.SetModel = new_instancemethod(_TransferBRep.TransferBRep_Reader_SetModel, None, TransferBRep_Reader)
TransferBRep_Reader.SetProtocol = new_instancemethod(_TransferBRep.TransferBRep_Reader_SetProtocol, None, TransferBRep_Reader)
TransferBRep_Reader.Shape = new_instancemethod(_TransferBRep.TransferBRep_Reader_Shape, None, TransferBRep_Reader)
TransferBRep_Reader.ShapeResult = new_instancemethod(_TransferBRep.TransferBRep_Reader_ShapeResult, None, TransferBRep_Reader)
TransferBRep_Reader.Shapes = new_instancemethod(_TransferBRep.TransferBRep_Reader_Shapes, None, TransferBRep_Reader)
TransferBRep_Reader.SyntaxError = new_instancemethod(_TransferBRep.TransferBRep_Reader_SyntaxError, None, TransferBRep_Reader)
TransferBRep_Reader.Transfer = new_instancemethod(_TransferBRep.TransferBRep_Reader_Transfer, None, TransferBRep_Reader)
TransferBRep_Reader.TransferList = new_instancemethod(_TransferBRep.TransferBRep_Reader_TransferList, None, TransferBRep_Reader)
TransferBRep_Reader.TransferRoots = new_instancemethod(_TransferBRep.TransferBRep_Reader_TransferRoots, None, TransferBRep_Reader)
TransferBRep_Reader.Transient = new_instancemethod(_TransferBRep.TransferBRep_Reader_Transient, None, TransferBRep_Reader)
TransferBRep_Reader.TransientProcess = new_instancemethod(_TransferBRep.TransferBRep_Reader_TransientProcess, None, TransferBRep_Reader)
TransferBRep_Reader.Transients = new_instancemethod(_TransferBRep.TransferBRep_Reader_Transients, None, TransferBRep_Reader)
TransferBRep_Reader_swigregister = _TransferBRep.TransferBRep_Reader_swigregister
TransferBRep_Reader_swigregister(TransferBRep_Reader)

class TransferBRep_ShapeInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Type(*args) -> "opencascade::handle< Standard_Type >":
        """
        * Returns the Type attached to an object Here, TShape (Shape has no Dynamic Type)
        	:param ent:
        	:type ent: TopoDS_Shape
        	:rtype: opencascade::handle<Standard_Type>
        """
        return _TransferBRep.TransferBRep_ShapeInfo_Type(*args)

    Type = staticmethod(Type)

    def TypeName(*args) -> "char const *":
        """
        * Returns Type Name (string) Here, the true name of the Type of a Shape
        	:param ent:
        	:type ent: TopoDS_Shape
        	:rtype: char *
        """
        return _TransferBRep.TransferBRep_ShapeInfo_TypeName(*args)

    TypeName = staticmethod(TypeName)

    __repr__ = _dumps_object


    def __init__(self):
        _TransferBRep.TransferBRep_ShapeInfo_swiginit(self, _TransferBRep.new_TransferBRep_ShapeInfo())
    __swig_destroy__ = _TransferBRep.delete_TransferBRep_ShapeInfo
TransferBRep_ShapeInfo_swigregister = _TransferBRep.TransferBRep_ShapeInfo_swigregister
TransferBRep_ShapeInfo_swigregister(TransferBRep_ShapeInfo)

def TransferBRep_ShapeInfo_Type(*args) -> "opencascade::handle< Standard_Type >":
    """
    * Returns the Type attached to an object Here, TShape (Shape has no Dynamic Type)
    	:param ent:
    	:type ent: TopoDS_Shape
    	:rtype: opencascade::handle<Standard_Type>
    """
    return _TransferBRep.TransferBRep_ShapeInfo_Type(*args)

def TransferBRep_ShapeInfo_TypeName(*args) -> "char const *":
    """
    * Returns Type Name (string) Here, the true name of the Type of a Shape
    	:param ent:
    	:type ent: TopoDS_Shape
    	:rtype: char *
    """
    return _TransferBRep.TransferBRep_ShapeInfo_TypeName(*args)

class TransferBRep_ShapeListBinder(OCC.Core.Transfer.Transfer_Binder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddResult(self, *args) -> "void":
        """
        * Adds an item to the result list
        	:param res:
        	:type res: TopoDS_Shape
        	:rtype: None
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_AddResult(self, *args)


    def CompSolid(self, *args) -> "TopoDS_CompSolid":
        """
        :param num:
        	:type num: int
        	:rtype: TopoDS_CompSolid
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_CompSolid(self, *args)


    def Compound(self, *args) -> "TopoDS_Compound":
        """
        :param num:
        	:type num: int
        	:rtype: TopoDS_Compound
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Compound(self, *args)


    def Edge(self, *args) -> "TopoDS_Edge":
        """
        :param num:
        	:type num: int
        	:rtype: TopoDS_Edge
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Edge(self, *args)


    def Face(self, *args) -> "TopoDS_Face":
        """
        :param num:
        	:type num: int
        	:rtype: TopoDS_Face
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Face(self, *args)


    def NbShapes(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TransferBRep.TransferBRep_ShapeListBinder_NbShapes(self, *args)


    def Result(self, *args) -> "opencascade::handle< TopTools_HSequenceOfShape >":
        """:rtype: opencascade::handle<TopTools_HSequenceOfShape>"""
        return _TransferBRep.TransferBRep_ShapeListBinder_Result(self, *args)


    def SetResult(self, *args) -> "void":
        """
        * Changes an already defined sub-result
        	:param num:
        	:type num: int
        	:param res:
        	:type res: TopoDS_Shape
        	:rtype: None
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_SetResult(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        :param num:
        	:type num: int
        	:rtype: TopoDS_Shape
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Shape(self, *args)


    def ShapeType(self, *args) -> "TopAbs_ShapeEnum":
        """
        :param num:
        	:type num: int
        	:rtype: TopAbs_ShapeEnum
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_ShapeType(self, *args)


    def Shell(self, *args) -> "TopoDS_Shell":
        """
        :param num:
        	:type num: int
        	:rtype: TopoDS_Shell
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Shell(self, *args)


    def Solid(self, *args) -> "TopoDS_Solid":
        """
        :param num:
        	:type num: int
        	:rtype: TopoDS_Solid
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Solid(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param list:
        	:type list: TopTools_HSequenceOfShape
        	:rtype: None
        """
        _TransferBRep.TransferBRep_ShapeListBinder_swiginit(self, _TransferBRep.new_TransferBRep_ShapeListBinder(*args))

    def Vertex(self, *args) -> "TopoDS_Vertex":
        """
        :param num:
        	:type num: int
        	:rtype: TopoDS_Vertex
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Vertex(self, *args)


    def Wire(self, *args) -> "TopoDS_Wire":
        """
        :param num:
        	:type num: int
        	:rtype: TopoDS_Wire
        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Wire(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TransferBRep_ShapeListBinder_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TransferBRep.delete_TransferBRep_ShapeListBinder
TransferBRep_ShapeListBinder.AddResult = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_AddResult, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.CompSolid = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_CompSolid, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.Compound = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_Compound, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.Edge = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_Edge, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.Face = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_Face, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.NbShapes = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_NbShapes, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.Result = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_Result, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.SetResult = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_SetResult, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.Shape = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_Shape, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.ShapeType = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_ShapeType, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.Shell = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_Shell, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.Solid = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_Solid, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.Vertex = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_Vertex, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder.Wire = new_instancemethod(_TransferBRep.TransferBRep_ShapeListBinder_Wire, None, TransferBRep_ShapeListBinder)
TransferBRep_ShapeListBinder_swigregister = _TransferBRep.TransferBRep_ShapeListBinder_swigregister
TransferBRep_ShapeListBinder_swigregister(TransferBRep_ShapeListBinder)

class TransferBRep_ShapeMapper(OCC.Core.Transfer.Transfer_Finder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a Mapper with a Value. This Value can then not be changed. It is used by the Hasher to compute the HashCode, which will then be stored for an immediate reading.
        	:param akey:
        	:type akey: TopoDS_Shape
        	:rtype: None
        """
        _TransferBRep.TransferBRep_ShapeMapper_swiginit(self, _TransferBRep.new_TransferBRep_ShapeMapper(*args))

    def Value(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the contained value
        	:rtype: TopoDS_Shape
        """
        return _TransferBRep.TransferBRep_ShapeMapper_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TransferBRep_ShapeMapper_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TransferBRep.delete_TransferBRep_ShapeMapper
TransferBRep_ShapeMapper.Value = new_instancemethod(_TransferBRep.TransferBRep_ShapeMapper_Value, None, TransferBRep_ShapeMapper)
TransferBRep_ShapeMapper_swigregister = _TransferBRep.TransferBRep_ShapeMapper_swigregister
TransferBRep_ShapeMapper_swigregister(TransferBRep_ShapeMapper)

class TransferBRep_TransferResultInfo(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        * Resets all the fields.
        	:rtype: None
        """
        return _TransferBRep.TransferBRep_TransferResultInfo_Clear(self, *args)


    def GetNoResult(self) -> "Standard_Integer":
        """GetNoResult(TransferBRep_TransferResultInfo self) -> Standard_Integer"""
        return _TransferBRep.TransferBRep_TransferResultInfo_GetNoResult(self)


    def SetNoResult(self, value: 'Standard_Integer') -> "void":
        """SetNoResult(TransferBRep_TransferResultInfo self, Standard_Integer value)"""
        return _TransferBRep.TransferBRep_TransferResultInfo_SetNoResult(self, value)


    def GetNoResultFail(self) -> "Standard_Integer":
        """GetNoResultFail(TransferBRep_TransferResultInfo self) -> Standard_Integer"""
        return _TransferBRep.TransferBRep_TransferResultInfo_GetNoResultFail(self)


    def SetNoResultFail(self, value: 'Standard_Integer') -> "void":
        """SetNoResultFail(TransferBRep_TransferResultInfo self, Standard_Integer value)"""
        return _TransferBRep.TransferBRep_TransferResultInfo_SetNoResultFail(self, value)


    def GetNoResultWarning(self) -> "Standard_Integer":
        """GetNoResultWarning(TransferBRep_TransferResultInfo self) -> Standard_Integer"""
        return _TransferBRep.TransferBRep_TransferResultInfo_GetNoResultWarning(self)


    def SetNoResultWarning(self, value: 'Standard_Integer') -> "void":
        """SetNoResultWarning(TransferBRep_TransferResultInfo self, Standard_Integer value)"""
        return _TransferBRep.TransferBRep_TransferResultInfo_SetNoResultWarning(self, value)


    def GetNoResultWarningFail(self) -> "Standard_Integer":
        """GetNoResultWarningFail(TransferBRep_TransferResultInfo self) -> Standard_Integer"""
        return _TransferBRep.TransferBRep_TransferResultInfo_GetNoResultWarningFail(self)


    def SetNoResultWarningFail(self, value: 'Standard_Integer') -> "void":
        """SetNoResultWarningFail(TransferBRep_TransferResultInfo self, Standard_Integer value)"""
        return _TransferBRep.TransferBRep_TransferResultInfo_SetNoResultWarningFail(self, value)


    def GetResult(self) -> "Standard_Integer":
        """GetResult(TransferBRep_TransferResultInfo self) -> Standard_Integer"""
        return _TransferBRep.TransferBRep_TransferResultInfo_GetResult(self)


    def SetResult(self, value: 'Standard_Integer') -> "void":
        """SetResult(TransferBRep_TransferResultInfo self, Standard_Integer value)"""
        return _TransferBRep.TransferBRep_TransferResultInfo_SetResult(self, value)


    def GetResultFail(self) -> "Standard_Integer":
        """GetResultFail(TransferBRep_TransferResultInfo self) -> Standard_Integer"""
        return _TransferBRep.TransferBRep_TransferResultInfo_GetResultFail(self)


    def SetResultFail(self, value: 'Standard_Integer') -> "void":
        """SetResultFail(TransferBRep_TransferResultInfo self, Standard_Integer value)"""
        return _TransferBRep.TransferBRep_TransferResultInfo_SetResultFail(self, value)


    def GetResultWarning(self) -> "Standard_Integer":
        """GetResultWarning(TransferBRep_TransferResultInfo self) -> Standard_Integer"""
        return _TransferBRep.TransferBRep_TransferResultInfo_GetResultWarning(self)


    def SetResultWarning(self, value: 'Standard_Integer') -> "void":
        """SetResultWarning(TransferBRep_TransferResultInfo self, Standard_Integer value)"""
        return _TransferBRep.TransferBRep_TransferResultInfo_SetResultWarning(self, value)


    def GetResultWarningFail(self) -> "Standard_Integer":
        """GetResultWarningFail(TransferBRep_TransferResultInfo self) -> Standard_Integer"""
        return _TransferBRep.TransferBRep_TransferResultInfo_GetResultWarningFail(self)


    def SetResultWarningFail(self, value: 'Standard_Integer') -> "void":
        """SetResultWarningFail(TransferBRep_TransferResultInfo self, Standard_Integer value)"""
        return _TransferBRep.TransferBRep_TransferResultInfo_SetResultWarningFail(self, value)


    def __init__(self, *args):
        """
        * Creates object with all fields nullified.
        	:rtype: None
        """
        _TransferBRep.TransferBRep_TransferResultInfo_swiginit(self, _TransferBRep.new_TransferBRep_TransferResultInfo(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TransferBRep_TransferResultInfo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TransferBRep.delete_TransferBRep_TransferResultInfo
TransferBRep_TransferResultInfo.Clear = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_Clear, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.GetNoResult = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_GetNoResult, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.SetNoResult = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_SetNoResult, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.GetNoResultFail = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_GetNoResultFail, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.SetNoResultFail = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_SetNoResultFail, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.GetNoResultWarning = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_GetNoResultWarning, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.SetNoResultWarning = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_SetNoResultWarning, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.GetNoResultWarningFail = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_GetNoResultWarningFail, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.SetNoResultWarningFail = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_SetNoResultWarningFail, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.GetResult = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_GetResult, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.SetResult = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_SetResult, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.GetResultFail = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_GetResultFail, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.SetResultFail = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_SetResultFail, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.GetResultWarning = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_GetResultWarning, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.SetResultWarning = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_SetResultWarning, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.GetResultWarningFail = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_GetResultWarningFail, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo.SetResultWarningFail = new_instancemethod(_TransferBRep.TransferBRep_TransferResultInfo_SetResultWarningFail, None, TransferBRep_TransferResultInfo)
TransferBRep_TransferResultInfo_swigregister = _TransferBRep.TransferBRep_TransferResultInfo_swigregister
TransferBRep_TransferResultInfo_swigregister(TransferBRep_TransferResultInfo)

class TransferBRep_ShapeBinder(TransferBRep_BinderOfShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CompSolid(self, *args) -> "TopoDS_CompSolid":
        """:rtype: TopoDS_CompSolid"""
        return _TransferBRep.TransferBRep_ShapeBinder_CompSolid(self, *args)


    def Compound(self, *args) -> "TopoDS_Compound":
        """:rtype: TopoDS_Compound"""
        return _TransferBRep.TransferBRep_ShapeBinder_Compound(self, *args)


    def Edge(self, *args) -> "TopoDS_Edge":
        """:rtype: TopoDS_Edge"""
        return _TransferBRep.TransferBRep_ShapeBinder_Edge(self, *args)


    def Face(self, *args) -> "TopoDS_Face":
        """:rtype: TopoDS_Face"""
        return _TransferBRep.TransferBRep_ShapeBinder_Face(self, *args)


    def ShapeType(self, *args) -> "TopAbs_ShapeEnum":
        """
        * Returns the Type of the Shape Result (under TopAbs form)
        	:rtype: TopAbs_ShapeEnum
        """
        return _TransferBRep.TransferBRep_ShapeBinder_ShapeType(self, *args)


    def Shell(self, *args) -> "TopoDS_Shell":
        """:rtype: TopoDS_Shell"""
        return _TransferBRep.TransferBRep_ShapeBinder_Shell(self, *args)


    def Solid(self, *args) -> "TopoDS_Solid":
        """:rtype: TopoDS_Solid"""
        return _TransferBRep.TransferBRep_ShapeBinder_Solid(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty ShapeBinder
        	:rtype: None
        * Creates a ShapeBinder with a result
        	:param res:
        	:type res: TopoDS_Shape
        	:rtype: None
        """
        _TransferBRep.TransferBRep_ShapeBinder_swiginit(self, _TransferBRep.new_TransferBRep_ShapeBinder(*args))

    def Vertex(self, *args) -> "TopoDS_Vertex":
        """:rtype: TopoDS_Vertex"""
        return _TransferBRep.TransferBRep_ShapeBinder_Vertex(self, *args)


    def Wire(self, *args) -> "TopoDS_Wire":
        """:rtype: TopoDS_Wire"""
        return _TransferBRep.TransferBRep_ShapeBinder_Wire(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TransferBRep_ShapeBinder_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TransferBRep.delete_TransferBRep_ShapeBinder
TransferBRep_ShapeBinder.CompSolid = new_instancemethod(_TransferBRep.TransferBRep_ShapeBinder_CompSolid, None, TransferBRep_ShapeBinder)
TransferBRep_ShapeBinder.Compound = new_instancemethod(_TransferBRep.TransferBRep_ShapeBinder_Compound, None, TransferBRep_ShapeBinder)
TransferBRep_ShapeBinder.Edge = new_instancemethod(_TransferBRep.TransferBRep_ShapeBinder_Edge, None, TransferBRep_ShapeBinder)
TransferBRep_ShapeBinder.Face = new_instancemethod(_TransferBRep.TransferBRep_ShapeBinder_Face, None, TransferBRep_ShapeBinder)
TransferBRep_ShapeBinder.ShapeType = new_instancemethod(_TransferBRep.TransferBRep_ShapeBinder_ShapeType, None, TransferBRep_ShapeBinder)
TransferBRep_ShapeBinder.Shell = new_instancemethod(_TransferBRep.TransferBRep_ShapeBinder_Shell, None, TransferBRep_ShapeBinder)
TransferBRep_ShapeBinder.Solid = new_instancemethod(_TransferBRep.TransferBRep_ShapeBinder_Solid, None, TransferBRep_ShapeBinder)
TransferBRep_ShapeBinder.Vertex = new_instancemethod(_TransferBRep.TransferBRep_ShapeBinder_Vertex, None, TransferBRep_ShapeBinder)
TransferBRep_ShapeBinder.Wire = new_instancemethod(_TransferBRep.TransferBRep_ShapeBinder_Wire, None, TransferBRep_ShapeBinder)
TransferBRep_ShapeBinder_swigregister = _TransferBRep.TransferBRep_ShapeBinder_swigregister
TransferBRep_ShapeBinder_swigregister(TransferBRep_ShapeBinder)

class TransferBRep_HSequenceOfTransferResultInfo(TransferBRep_SequenceOfTransferResultInfo, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_swiginit(self, _TransferBRep.new_TransferBRep_HSequenceOfTransferResultInfo(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TransferBRep_HSequenceOfTransferResultInfo_DownCast(t)

    __swig_destroy__ = _TransferBRep.delete_TransferBRep_HSequenceOfTransferResultInfo
TransferBRep_HSequenceOfTransferResultInfo.Sequence = new_instancemethod(_TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_Sequence, None, TransferBRep_HSequenceOfTransferResultInfo)
TransferBRep_HSequenceOfTransferResultInfo.Append = new_instancemethod(_TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_Append, None, TransferBRep_HSequenceOfTransferResultInfo)
TransferBRep_HSequenceOfTransferResultInfo.ChangeSequence = new_instancemethod(_TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_ChangeSequence, None, TransferBRep_HSequenceOfTransferResultInfo)
TransferBRep_HSequenceOfTransferResultInfo_swigregister = _TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_swigregister
TransferBRep_HSequenceOfTransferResultInfo_swigregister(TransferBRep_HSequenceOfTransferResultInfo)



