# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
UTL module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_utl.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _UTL.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_UTL')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_UTL')
    _UTL = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UTL', [dirname(__file__)])
        except ImportError:
            import _UTL
            return _UTL
        try:
            _mod = imp.load_module('_UTL', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _UTL = swig_import_helper()
    del swig_import_helper
else:
    import _UTL
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UTL.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_UTL.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_UTL.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_UTL.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_UTL.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_UTL.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_UTL.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_UTL.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_UTL.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_UTL.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_UTL.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_UTL.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_UTL.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_UTL.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_UTL.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_UTL.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_UTL.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _UTL.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _UTL.process_exception(error, method_name, class_name)
process_exception = _UTL.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Storage
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.Resource
class utl(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddToUserInfo(*args) -> "void":
        """
        :param aData:
        	:type aData: Storage_Data
        	:param anInfo:
        	:type anInfo: TCollection_ExtendedString
        	:rtype: void
        """
        return _UTL.utl_AddToUserInfo(*args)

    AddToUserInfo = staticmethod(AddToUserInfo)

    def CString(*args) -> "char const *":
        """
        :param anExtendedString:
        	:type anExtendedString: TCollection_ExtendedString
        	:rtype: char *
        """
        return _UTL.utl_CString(*args)

    CString = staticmethod(CString)

    def Disk(*args) -> "TCollection_ExtendedString":
        """
        :param aPath:
        	:type aPath: OSD_Path
        	:rtype: TCollection_ExtendedString
        """
        return _UTL.utl_Disk(*args)

    Disk = staticmethod(Disk)

    def ExtendedString(*args) -> "TCollection_ExtendedString":
        """
        :param anAsciiString:
        	:type anAsciiString: TCollection_AsciiString
        	:rtype: TCollection_ExtendedString
        """
        return _UTL.utl_ExtendedString(*args)

    ExtendedString = staticmethod(ExtendedString)

    def Extension(*args) -> "TCollection_ExtendedString":
        """
        :param aPath:
        	:type aPath: OSD_Path
        	:rtype: TCollection_ExtendedString
        :param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:rtype: TCollection_ExtendedString
        """
        return _UTL.utl_Extension(*args)

    Extension = staticmethod(Extension)

    def FileIterator(*args) -> "OSD_FileIterator":
        """
        :param aPath:
        	:type aPath: OSD_Path
        	:param aMask:
        	:type aMask: TCollection_ExtendedString
        	:rtype: OSD_FileIterator
        """
        return _UTL.utl_FileIterator(*args)

    FileIterator = staticmethod(FileIterator)

    def Find(*args) -> "Standard_Boolean":
        """
        :param aResourceManager:
        	:type aResourceManager: Resource_Manager
        	:param aResourceName:
        	:type aResourceName: TCollection_ExtendedString
        	:rtype: bool
        """
        return _UTL.utl_Find(*args)

    Find = staticmethod(Find)

    def GUID(*args) -> "Standard_GUID":
        """
        :param anXString:
        	:type anXString: TCollection_ExtendedString
        	:rtype: Standard_GUID
        """
        return _UTL.utl_GUID(*args)

    GUID = staticmethod(GUID)

    def IntegerValue(*args) -> "Standard_Integer":
        """
        :param anExtendedString:
        	:type anExtendedString: TCollection_ExtendedString
        	:rtype: int
        """
        return _UTL.utl_IntegerValue(*args)

    IntegerValue = staticmethod(IntegerValue)

    def IsReadOnly(*args) -> "Standard_Boolean":
        """
        :param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:rtype: bool
        """
        return _UTL.utl_IsReadOnly(*args)

    IsReadOnly = staticmethod(IsReadOnly)

    def LocalHost(*args) -> "TCollection_ExtendedString":
        """:rtype: TCollection_ExtendedString"""
        return _UTL.utl_LocalHost(*args)

    LocalHost = staticmethod(LocalHost)

    def Name(*args) -> "TCollection_ExtendedString":
        """
        :param aPath:
        	:type aPath: OSD_Path
        	:rtype: TCollection_ExtendedString
        """
        return _UTL.utl_Name(*args)

    Name = staticmethod(Name)

    def OpenFile(*args) -> "Storage_Error":
        """
        :param aFile:
        	:type aFile: Storage_BaseDriver
        	:param aName:
        	:type aName: TCollection_ExtendedString
        	:param aMode:
        	:type aMode: Storage_OpenMode
        	:rtype: Storage_Error
        """
        return _UTL.utl_OpenFile(*args)

    OpenFile = staticmethod(OpenFile)

    def Path(*args) -> "OSD_Path":
        """
        :param aFileName:
        	:type aFileName: TCollection_ExtendedString
        	:rtype: OSD_Path
        """
        return _UTL.utl_Path(*args)

    Path = staticmethod(Path)

    def Trek(*args) -> "TCollection_ExtendedString":
        """
        :param aPath:
        	:type aPath: OSD_Path
        	:rtype: TCollection_ExtendedString
        """
        return _UTL.utl_Trek(*args)

    Trek = staticmethod(Trek)

    def Value(*args) -> "TCollection_ExtendedString":
        """
        :param aResourceManager:
        	:type aResourceManager: Resource_Manager
        	:param aResourceName:
        	:type aResourceName: TCollection_ExtendedString
        	:rtype: TCollection_ExtendedString
        """
        return _UTL.utl_Value(*args)

    Value = staticmethod(Value)

    def xgetenv(*args) -> "TCollection_ExtendedString":
        """
        :param aCString:
        	:type aCString: char *
        	:rtype: TCollection_ExtendedString
        """
        return _UTL.utl_xgetenv(*args)

    xgetenv = staticmethod(xgetenv)

    __repr__ = _dumps_object


    def __init__(self):
        _UTL.utl_swiginit(self, _UTL.new_utl())
    __swig_destroy__ = _UTL.delete_utl
utl_swigregister = _UTL.utl_swigregister
utl_swigregister(utl)

def utl_AddToUserInfo(*args) -> "void":
    """
    :param aData:
    	:type aData: Storage_Data
    	:param anInfo:
    	:type anInfo: TCollection_ExtendedString
    	:rtype: void
    """
    return _UTL.utl_AddToUserInfo(*args)

def utl_CString(*args) -> "char const *":
    """
    :param anExtendedString:
    	:type anExtendedString: TCollection_ExtendedString
    	:rtype: char *
    """
    return _UTL.utl_CString(*args)

def utl_Disk(*args) -> "TCollection_ExtendedString":
    """
    :param aPath:
    	:type aPath: OSD_Path
    	:rtype: TCollection_ExtendedString
    """
    return _UTL.utl_Disk(*args)

def utl_ExtendedString(*args) -> "TCollection_ExtendedString":
    """
    :param anAsciiString:
    	:type anAsciiString: TCollection_AsciiString
    	:rtype: TCollection_ExtendedString
    """
    return _UTL.utl_ExtendedString(*args)

def utl_Extension(*args) -> "TCollection_ExtendedString":
    """
    :param aPath:
    	:type aPath: OSD_Path
    	:rtype: TCollection_ExtendedString
    :param aFileName:
    	:type aFileName: TCollection_ExtendedString
    	:rtype: TCollection_ExtendedString
    """
    return _UTL.utl_Extension(*args)

def utl_FileIterator(*args) -> "OSD_FileIterator":
    """
    :param aPath:
    	:type aPath: OSD_Path
    	:param aMask:
    	:type aMask: TCollection_ExtendedString
    	:rtype: OSD_FileIterator
    """
    return _UTL.utl_FileIterator(*args)

def utl_Find(*args) -> "Standard_Boolean":
    """
    :param aResourceManager:
    	:type aResourceManager: Resource_Manager
    	:param aResourceName:
    	:type aResourceName: TCollection_ExtendedString
    	:rtype: bool
    """
    return _UTL.utl_Find(*args)

def utl_GUID(*args) -> "Standard_GUID":
    """
    :param anXString:
    	:type anXString: TCollection_ExtendedString
    	:rtype: Standard_GUID
    """
    return _UTL.utl_GUID(*args)

def utl_IntegerValue(*args) -> "Standard_Integer":
    """
    :param anExtendedString:
    	:type anExtendedString: TCollection_ExtendedString
    	:rtype: int
    """
    return _UTL.utl_IntegerValue(*args)

def utl_IsReadOnly(*args) -> "Standard_Boolean":
    """
    :param aFileName:
    	:type aFileName: TCollection_ExtendedString
    	:rtype: bool
    """
    return _UTL.utl_IsReadOnly(*args)

def utl_LocalHost(*args) -> "TCollection_ExtendedString":
    """:rtype: TCollection_ExtendedString"""
    return _UTL.utl_LocalHost(*args)

def utl_Name(*args) -> "TCollection_ExtendedString":
    """
    :param aPath:
    	:type aPath: OSD_Path
    	:rtype: TCollection_ExtendedString
    """
    return _UTL.utl_Name(*args)

def utl_OpenFile(*args) -> "Storage_Error":
    """
    :param aFile:
    	:type aFile: Storage_BaseDriver
    	:param aName:
    	:type aName: TCollection_ExtendedString
    	:param aMode:
    	:type aMode: Storage_OpenMode
    	:rtype: Storage_Error
    """
    return _UTL.utl_OpenFile(*args)

def utl_Path(*args) -> "OSD_Path":
    """
    :param aFileName:
    	:type aFileName: TCollection_ExtendedString
    	:rtype: OSD_Path
    """
    return _UTL.utl_Path(*args)

def utl_Trek(*args) -> "TCollection_ExtendedString":
    """
    :param aPath:
    	:type aPath: OSD_Path
    	:rtype: TCollection_ExtendedString
    """
    return _UTL.utl_Trek(*args)

def utl_Value(*args) -> "TCollection_ExtendedString":
    """
    :param aResourceManager:
    	:type aResourceManager: Resource_Manager
    	:param aResourceName:
    	:type aResourceName: TCollection_ExtendedString
    	:rtype: TCollection_ExtendedString
    """
    return _UTL.utl_Value(*args)

def utl_xgetenv(*args) -> "TCollection_ExtendedString":
    """
    :param aCString:
    	:type aCString: char *
    	:rtype: TCollection_ExtendedString
    """
    return _UTL.utl_xgetenv(*args)



