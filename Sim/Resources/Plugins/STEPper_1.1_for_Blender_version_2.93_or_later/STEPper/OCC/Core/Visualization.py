# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Visualization
else:
    import _Visualization

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Visualization.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Visualization.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Visualization.delete_SwigPyIterator
    value = _swig_new_instance_method(_Visualization.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Visualization.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Visualization.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Visualization.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Visualization.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Visualization.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Visualization.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Visualization.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Visualization.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Visualization.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Visualization.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Visualization.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Visualization.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Visualization.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Visualization.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Visualization.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Visualization:
_Visualization.SwigPyIterator_swigregister(SwigPyIterator)

Handle_AIS_InteractiveContext_Create = _Visualization.Handle_AIS_InteractiveContext_Create
Handle_AIS_InteractiveContext_DownCast = _Visualization.Handle_AIS_InteractiveContext_DownCast
Handle_AIS_InteractiveContext_IsNull = _Visualization.Handle_AIS_InteractiveContext_IsNull
Handle_V3d_View_Create = _Visualization.Handle_V3d_View_Create
Handle_V3d_View_DownCast = _Visualization.Handle_V3d_View_DownCast
Handle_V3d_View_IsNull = _Visualization.Handle_V3d_View_IsNull
Handle_V3d_Viewer_Create = _Visualization.Handle_V3d_Viewer_Create
Handle_V3d_Viewer_DownCast = _Visualization.Handle_V3d_Viewer_DownCast
Handle_V3d_Viewer_IsNull = _Visualization.Handle_V3d_Viewer_IsNull
class vector_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Visualization.vector_float_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Visualization.vector_float___nonzero__)
    __bool__ = _swig_new_instance_method(_Visualization.vector_float___bool__)
    __len__ = _swig_new_instance_method(_Visualization.vector_float___len__)
    __getslice__ = _swig_new_instance_method(_Visualization.vector_float___getslice__)
    __setslice__ = _swig_new_instance_method(_Visualization.vector_float___setslice__)
    __delslice__ = _swig_new_instance_method(_Visualization.vector_float___delslice__)
    __delitem__ = _swig_new_instance_method(_Visualization.vector_float___delitem__)
    __getitem__ = _swig_new_instance_method(_Visualization.vector_float___getitem__)
    __setitem__ = _swig_new_instance_method(_Visualization.vector_float___setitem__)
    pop = _swig_new_instance_method(_Visualization.vector_float_pop)
    append = _swig_new_instance_method(_Visualization.vector_float_append)
    empty = _swig_new_instance_method(_Visualization.vector_float_empty)
    size = _swig_new_instance_method(_Visualization.vector_float_size)
    swap = _swig_new_instance_method(_Visualization.vector_float_swap)
    begin = _swig_new_instance_method(_Visualization.vector_float_begin)
    end = _swig_new_instance_method(_Visualization.vector_float_end)
    rbegin = _swig_new_instance_method(_Visualization.vector_float_rbegin)
    rend = _swig_new_instance_method(_Visualization.vector_float_rend)
    clear = _swig_new_instance_method(_Visualization.vector_float_clear)
    get_allocator = _swig_new_instance_method(_Visualization.vector_float_get_allocator)
    pop_back = _swig_new_instance_method(_Visualization.vector_float_pop_back)
    erase = _swig_new_instance_method(_Visualization.vector_float_erase)

    def __init__(self, *args):
        _Visualization.vector_float_swiginit(self, _Visualization.new_vector_float(*args))
    push_back = _swig_new_instance_method(_Visualization.vector_float_push_back)
    front = _swig_new_instance_method(_Visualization.vector_float_front)
    back = _swig_new_instance_method(_Visualization.vector_float_back)
    assign = _swig_new_instance_method(_Visualization.vector_float_assign)
    resize = _swig_new_instance_method(_Visualization.vector_float_resize)
    insert = _swig_new_instance_method(_Visualization.vector_float_insert)
    reserve = _swig_new_instance_method(_Visualization.vector_float_reserve)
    capacity = _swig_new_instance_method(_Visualization.vector_float_capacity)
    __swig_destroy__ = _Visualization.delete_vector_float

# Register vector_float in _Visualization:
_Visualization.vector_float_swigregister(vector_float)

atCube = _Visualization.atCube
atNormal = _Visualization.atNormal
atNormalAutoScale = _Visualization.atNormalAutoScale
class Tesselator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Tesselator self, TopoDS_Shape aShape, theTextureMappingRule aTxtMapType, float anAutoScaleSizeOnU, float anAutoScaleSizeOnV, float aDeviation, float aUOrigin, float aVOrigin, float aURepeat, float aVRepeat, float aScaleU, float aScaleV, float aRotationAngle) -> Tesselator
        __init__(Tesselator self, TopoDS_Shape aShape) -> Tesselator
        """
        _Visualization.Tesselator_swiginit(self, _Visualization.new_Tesselator(*args))
    __swig_destroy__ = _Visualization.delete_Tesselator
    Compute = _swig_new_instance_method(_Visualization.Tesselator_Compute)
    GetVertex = _swig_new_instance_method(_Visualization.Tesselator_GetVertex)
    GetNormal = _swig_new_instance_method(_Visualization.Tesselator_GetNormal)
    GetTriangleIndex = _swig_new_instance_method(_Visualization.Tesselator_GetTriangleIndex)
    GetEdgeVertex = _swig_new_instance_method(_Visualization.Tesselator_GetEdgeVertex)
    VerticesList = _swig_new_instance_method(_Visualization.Tesselator_VerticesList)
    ObjGetTriangleCount = _swig_new_instance_method(_Visualization.Tesselator_ObjGetTriangleCount)
    ObjGetVertexCount = _swig_new_instance_method(_Visualization.Tesselator_ObjGetVertexCount)
    ObjGetNormalCount = _swig_new_instance_method(_Visualization.Tesselator_ObjGetNormalCount)
    ObjGetEdgeCount = _swig_new_instance_method(_Visualization.Tesselator_ObjGetEdgeCount)
    ObjEdgeGetVertexCount = _swig_new_instance_method(_Visualization.Tesselator_ObjEdgeGetVertexCount)
    ExportShapeToX3DIndexedFaceSet = _swig_new_instance_method(_Visualization.Tesselator_ExportShapeToX3DIndexedFaceSet)
    ExportShapeToThreejsJSONString = _swig_new_instance_method(_Visualization.Tesselator_ExportShapeToThreejsJSONString)
    ExportShapeToX3D = _swig_new_instance_method(_Visualization.Tesselator_ExportShapeToX3D)
    GetVerticesPositionAsTuple = _swig_new_instance_method(_Visualization.Tesselator_GetVerticesPositionAsTuple)
    GetNormalsAsTuple = _swig_new_instance_method(_Visualization.Tesselator_GetNormalsAsTuple)

# Register Tesselator in _Visualization:
_Visualization.Tesselator_swigregister(Tesselator)

class Display3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Display3d self) -> Display3d"""
        _Visualization.Display3d_swiginit(self, _Visualization.new_Display3d())
    __swig_destroy__ = _Visualization.delete_Display3d
    Init = _swig_new_instance_method(_Visualization.Display3d_Init)
    SetAnaglyphMode = _swig_new_instance_method(_Visualization.Display3d_SetAnaglyphMode)
    ChangeRenderingParams = _swig_new_instance_method(_Visualization.Display3d_ChangeRenderingParams)
    EnableVBO = _swig_new_instance_method(_Visualization.Display3d_EnableVBO)
    DisableVBO = _swig_new_instance_method(_Visualization.Display3d_DisableVBO)
    GetView = _swig_new_instance_method(_Visualization.Display3d_GetView)
    GetViewer = _swig_new_instance_method(_Visualization.Display3d_GetViewer)
    GetContext = _swig_new_instance_method(_Visualization.Display3d_GetContext)
    Test = _swig_new_instance_method(_Visualization.Display3d_Test)
    InitOffscreen = _swig_new_instance_method(_Visualization.Display3d_InitOffscreen)
    SetSize = _swig_new_instance_method(_Visualization.Display3d_SetSize)
    IsOffscreen = _swig_new_instance_method(_Visualization.Display3d_IsOffscreen)
    GetImageData = _swig_new_instance_method(_Visualization.Display3d_GetImageData)
    GetSize = _swig_new_instance_method(_Visualization.Display3d_GetSize)

# Register Display3d in _Visualization:
_Visualization.Display3d_swigregister(Display3d)



