# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
VrmlConverter module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_vrmlconverter.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _VrmlConverter.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VrmlConverter')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VrmlConverter')
    _VrmlConverter = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VrmlConverter', [dirname(__file__)])
        except ImportError:
            import _VrmlConverter
            return _VrmlConverter
        try:
            _mod = imp.load_module('_VrmlConverter', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VrmlConverter = swig_import_helper()
    del swig_import_helper
else:
    import _VrmlConverter
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VrmlConverter.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_VrmlConverter.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_VrmlConverter.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_VrmlConverter.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_VrmlConverter.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_VrmlConverter.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_VrmlConverter.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_VrmlConverter.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_VrmlConverter.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_VrmlConverter.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_VrmlConverter.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_VrmlConverter.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_VrmlConverter.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_VrmlConverter.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_VrmlConverter.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_VrmlConverter.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_VrmlConverter.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _VrmlConverter.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _VrmlConverter.process_exception(error, method_name, class_name)
process_exception = _VrmlConverter.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.Aspect
import OCC.Core.Quantity
import OCC.Core.TopoDS
import OCC.Core.TopLoc
import OCC.Core.Vrml
import OCC.Core.HLRAlgo
import OCC.Core.TopTools
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
VrmlConverter_NoLight = _VrmlConverter.VrmlConverter_NoLight
VrmlConverter_DirectionLight = _VrmlConverter.VrmlConverter_DirectionLight
VrmlConverter_PointLight = _VrmlConverter.VrmlConverter_PointLight
VrmlConverter_SpotLight = _VrmlConverter.VrmlConverter_SpotLight
VrmlConverter_NoCamera = _VrmlConverter.VrmlConverter_NoCamera
VrmlConverter_PerspectiveCamera = _VrmlConverter.VrmlConverter_PerspectiveCamera
VrmlConverter_OrthographicCamera = _VrmlConverter.VrmlConverter_OrthographicCamera

def Handle_VrmlConverter_Drawer_Create() -> "opencascade::handle< VrmlConverter_Drawer >":
    return _VrmlConverter.Handle_VrmlConverter_Drawer_Create()
Handle_VrmlConverter_Drawer_Create = _VrmlConverter.Handle_VrmlConverter_Drawer_Create

def Handle_VrmlConverter_Drawer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< VrmlConverter_Drawer >":
    return _VrmlConverter.Handle_VrmlConverter_Drawer_DownCast(t)
Handle_VrmlConverter_Drawer_DownCast = _VrmlConverter.Handle_VrmlConverter_Drawer_DownCast

def Handle_VrmlConverter_Drawer_IsNull(t: 'opencascade::handle< VrmlConverter_Drawer > const &') -> "bool":
    return _VrmlConverter.Handle_VrmlConverter_Drawer_IsNull(t)
Handle_VrmlConverter_Drawer_IsNull = _VrmlConverter.Handle_VrmlConverter_Drawer_IsNull

def Handle_VrmlConverter_LineAspect_Create() -> "opencascade::handle< VrmlConverter_LineAspect >":
    return _VrmlConverter.Handle_VrmlConverter_LineAspect_Create()
Handle_VrmlConverter_LineAspect_Create = _VrmlConverter.Handle_VrmlConverter_LineAspect_Create

def Handle_VrmlConverter_LineAspect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< VrmlConverter_LineAspect >":
    return _VrmlConverter.Handle_VrmlConverter_LineAspect_DownCast(t)
Handle_VrmlConverter_LineAspect_DownCast = _VrmlConverter.Handle_VrmlConverter_LineAspect_DownCast

def Handle_VrmlConverter_LineAspect_IsNull(t: 'opencascade::handle< VrmlConverter_LineAspect > const &') -> "bool":
    return _VrmlConverter.Handle_VrmlConverter_LineAspect_IsNull(t)
Handle_VrmlConverter_LineAspect_IsNull = _VrmlConverter.Handle_VrmlConverter_LineAspect_IsNull

def Handle_VrmlConverter_PointAspect_Create() -> "opencascade::handle< VrmlConverter_PointAspect >":
    return _VrmlConverter.Handle_VrmlConverter_PointAspect_Create()
Handle_VrmlConverter_PointAspect_Create = _VrmlConverter.Handle_VrmlConverter_PointAspect_Create

def Handle_VrmlConverter_PointAspect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< VrmlConverter_PointAspect >":
    return _VrmlConverter.Handle_VrmlConverter_PointAspect_DownCast(t)
Handle_VrmlConverter_PointAspect_DownCast = _VrmlConverter.Handle_VrmlConverter_PointAspect_DownCast

def Handle_VrmlConverter_PointAspect_IsNull(t: 'opencascade::handle< VrmlConverter_PointAspect > const &') -> "bool":
    return _VrmlConverter.Handle_VrmlConverter_PointAspect_IsNull(t)
Handle_VrmlConverter_PointAspect_IsNull = _VrmlConverter.Handle_VrmlConverter_PointAspect_IsNull

def Handle_VrmlConverter_Projector_Create() -> "opencascade::handle< VrmlConverter_Projector >":
    return _VrmlConverter.Handle_VrmlConverter_Projector_Create()
Handle_VrmlConverter_Projector_Create = _VrmlConverter.Handle_VrmlConverter_Projector_Create

def Handle_VrmlConverter_Projector_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< VrmlConverter_Projector >":
    return _VrmlConverter.Handle_VrmlConverter_Projector_DownCast(t)
Handle_VrmlConverter_Projector_DownCast = _VrmlConverter.Handle_VrmlConverter_Projector_DownCast

def Handle_VrmlConverter_Projector_IsNull(t: 'opencascade::handle< VrmlConverter_Projector > const &') -> "bool":
    return _VrmlConverter.Handle_VrmlConverter_Projector_IsNull(t)
Handle_VrmlConverter_Projector_IsNull = _VrmlConverter.Handle_VrmlConverter_Projector_IsNull

def Handle_VrmlConverter_ShadingAspect_Create() -> "opencascade::handle< VrmlConverter_ShadingAspect >":
    return _VrmlConverter.Handle_VrmlConverter_ShadingAspect_Create()
Handle_VrmlConverter_ShadingAspect_Create = _VrmlConverter.Handle_VrmlConverter_ShadingAspect_Create

def Handle_VrmlConverter_ShadingAspect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< VrmlConverter_ShadingAspect >":
    return _VrmlConverter.Handle_VrmlConverter_ShadingAspect_DownCast(t)
Handle_VrmlConverter_ShadingAspect_DownCast = _VrmlConverter.Handle_VrmlConverter_ShadingAspect_DownCast

def Handle_VrmlConverter_ShadingAspect_IsNull(t: 'opencascade::handle< VrmlConverter_ShadingAspect > const &') -> "bool":
    return _VrmlConverter.Handle_VrmlConverter_ShadingAspect_IsNull(t)
Handle_VrmlConverter_ShadingAspect_IsNull = _VrmlConverter.Handle_VrmlConverter_ShadingAspect_IsNull

def Handle_VrmlConverter_IsoAspect_Create() -> "opencascade::handle< VrmlConverter_IsoAspect >":
    return _VrmlConverter.Handle_VrmlConverter_IsoAspect_Create()
Handle_VrmlConverter_IsoAspect_Create = _VrmlConverter.Handle_VrmlConverter_IsoAspect_Create

def Handle_VrmlConverter_IsoAspect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< VrmlConverter_IsoAspect >":
    return _VrmlConverter.Handle_VrmlConverter_IsoAspect_DownCast(t)
Handle_VrmlConverter_IsoAspect_DownCast = _VrmlConverter.Handle_VrmlConverter_IsoAspect_DownCast

def Handle_VrmlConverter_IsoAspect_IsNull(t: 'opencascade::handle< VrmlConverter_IsoAspect > const &') -> "bool":
    return _VrmlConverter.Handle_VrmlConverter_IsoAspect_IsNull(t)
Handle_VrmlConverter_IsoAspect_IsNull = _VrmlConverter.Handle_VrmlConverter_IsoAspect_IsNull
class VrmlConverter_Curve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args) -> "void":
        """
        * adds to the OStream the drawing of the curve aCurve. The aspect is defined by LineAspect in aDrawer.
        	:param aCurve:
        	:type aCurve: Adaptor3d_Curve
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:param anOStream:
        	:type anOStream: Standard_OStream
        	:rtype: void
        * adds to the OStream the drawing of the curve aCurve. The aspect is defined by LineAspect in aDrawer. The drawing will be limited between the points of parameter U1 and U2.
        	:param aCurve:
        	:type aCurve: Adaptor3d_Curve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:param anOStream:
        	:type anOStream: Standard_OStream
        	:rtype: void
        * adds to the OStream the drawing of the curve aCurve. The aspect is the current aspect. The drawing will be limited between the points of parameter U1 and U2. aNbPoints defines number of points on one interval.
        	:param aCurve:
        	:type aCurve: Adaptor3d_Curve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param anOStream:
        	:type anOStream: Standard_OStream
        	:param aNbPoints:
        	:type aNbPoints: int
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_Curve_Add(*args)

    Add = staticmethod(Add)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_Curve_swiginit(self, _VrmlConverter.new_VrmlConverter_Curve())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_Curve
VrmlConverter_Curve_swigregister = _VrmlConverter.VrmlConverter_Curve_swigregister
VrmlConverter_Curve_swigregister(VrmlConverter_Curve)

def VrmlConverter_Curve_Add(*args) -> "void":
    """
    * adds to the OStream the drawing of the curve aCurve. The aspect is defined by LineAspect in aDrawer.
    	:param aCurve:
    	:type aCurve: Adaptor3d_Curve
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:param anOStream:
    	:type anOStream: Standard_OStream
    	:rtype: void
    * adds to the OStream the drawing of the curve aCurve. The aspect is defined by LineAspect in aDrawer. The drawing will be limited between the points of parameter U1 and U2.
    	:param aCurve:
    	:type aCurve: Adaptor3d_Curve
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:param anOStream:
    	:type anOStream: Standard_OStream
    	:rtype: void
    * adds to the OStream the drawing of the curve aCurve. The aspect is the current aspect. The drawing will be limited between the points of parameter U1 and U2. aNbPoints defines number of points on one interval.
    	:param aCurve:
    	:type aCurve: Adaptor3d_Curve
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:param anOStream:
    	:type anOStream: Standard_OStream
    	:param aNbPoints:
    	:type aNbPoints: int
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_Curve_Add(*args)

class VrmlConverter_DeflectionCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args) -> "void":
        """
        * adds to the OStream the drawing of the curve aCurve with respect to the maximal chordial deviation defined by the drawer aDrawer. The aspect is defined by LineAspect in aDrawer.
        	:param anOStream:
        	:type anOStream: Standard_OStream
        	:param aCurve:
        	:type aCurve: Adaptor3d_Curve
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        * adds to the OStream the drawing of the curve aCurve with respect to the maximal chordial deviation defined by the drawer aDrawer. The aspect is defined by LineAspect in aDrawer. The drawing will be limited between the points of parameter U1 and U2.
        	:param anOStream:
        	:type anOStream: Standard_OStream
        	:param aCurve:
        	:type aCurve: Adaptor3d_Curve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        * adds to the OStream the drawing of the curve aCurve with respect to the maximal chordial deviation aDeflection. The aspect is the current aspect
        	:param anOStream:
        	:type anOStream: Standard_OStream
        	:param aCurve:
        	:type aCurve: Adaptor3d_Curve
        	:param aDeflection:
        	:type aDeflection: float
        	:param aLimit:
        	:type aLimit: float
        	:rtype: void
        * adds to the OStream the drawing of the curve aCurve with respect to the maximal chordial deviation aDeflection. The aspect is the current aspect
        	:param anOStream:
        	:type anOStream: Standard_OStream
        	:param aCurve:
        	:type aCurve: Adaptor3d_Curve
        	:param aDeflection:
        	:type aDeflection: float
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        * adds to the OStream the drawing of the curve aCurve with respect to the maximal chordial deviation aDeflection. The aspect is the current aspect The drawing will be limited between the points of parameter U1 and U2.
        	:param anOStream:
        	:type anOStream: Standard_OStream
        	:param aCurve:
        	:type aCurve: Adaptor3d_Curve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param aDeflection:
        	:type aDeflection: float
        	:rtype: void
        * adds to the OStream the drawing of the curve aCurve with the array of parameters to retrieve points on curve.
        	:param anOStream:
        	:type anOStream: Standard_OStream
        	:param aCurve:
        	:type aCurve: Adaptor3d_Curve
        	:param aParams:
        	:type aParams: TColStd_HArray1OfReal
        	:param aNbNodes:
        	:type aNbNodes: int
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_DeflectionCurve_Add(*args)

    Add = staticmethod(Add)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_DeflectionCurve_swiginit(self, _VrmlConverter.new_VrmlConverter_DeflectionCurve())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_DeflectionCurve
VrmlConverter_DeflectionCurve_swigregister = _VrmlConverter.VrmlConverter_DeflectionCurve_swigregister
VrmlConverter_DeflectionCurve_swigregister(VrmlConverter_DeflectionCurve)

def VrmlConverter_DeflectionCurve_Add(*args) -> "void":
    """
    * adds to the OStream the drawing of the curve aCurve with respect to the maximal chordial deviation defined by the drawer aDrawer. The aspect is defined by LineAspect in aDrawer.
    	:param anOStream:
    	:type anOStream: Standard_OStream
    	:param aCurve:
    	:type aCurve: Adaptor3d_Curve
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    * adds to the OStream the drawing of the curve aCurve with respect to the maximal chordial deviation defined by the drawer aDrawer. The aspect is defined by LineAspect in aDrawer. The drawing will be limited between the points of parameter U1 and U2.
    	:param anOStream:
    	:type anOStream: Standard_OStream
    	:param aCurve:
    	:type aCurve: Adaptor3d_Curve
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    * adds to the OStream the drawing of the curve aCurve with respect to the maximal chordial deviation aDeflection. The aspect is the current aspect
    	:param anOStream:
    	:type anOStream: Standard_OStream
    	:param aCurve:
    	:type aCurve: Adaptor3d_Curve
    	:param aDeflection:
    	:type aDeflection: float
    	:param aLimit:
    	:type aLimit: float
    	:rtype: void
    * adds to the OStream the drawing of the curve aCurve with respect to the maximal chordial deviation aDeflection. The aspect is the current aspect
    	:param anOStream:
    	:type anOStream: Standard_OStream
    	:param aCurve:
    	:type aCurve: Adaptor3d_Curve
    	:param aDeflection:
    	:type aDeflection: float
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    * adds to the OStream the drawing of the curve aCurve with respect to the maximal chordial deviation aDeflection. The aspect is the current aspect The drawing will be limited between the points of parameter U1 and U2.
    	:param anOStream:
    	:type anOStream: Standard_OStream
    	:param aCurve:
    	:type aCurve: Adaptor3d_Curve
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:param aDeflection:
    	:type aDeflection: float
    	:rtype: void
    * adds to the OStream the drawing of the curve aCurve with the array of parameters to retrieve points on curve.
    	:param anOStream:
    	:type anOStream: Standard_OStream
    	:param aCurve:
    	:type aCurve: Adaptor3d_Curve
    	:param aParams:
    	:type aParams: TColStd_HArray1OfReal
    	:param aNbNodes:
    	:type aNbNodes: int
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_DeflectionCurve_Add(*args)

class VrmlConverter_Drawer(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DeviationCoefficient(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _VrmlConverter.VrmlConverter_Drawer_DeviationCoefficient(self, *args)


    def DisableDrawHiddenLine(self, *args) -> "void":
        """
        * sets DrawHiddenLine = Standard_False - the hidden lines are not drawn.
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_DisableDrawHiddenLine(self, *args)


    def Discretisation(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _VrmlConverter.VrmlConverter_Drawer_Discretisation(self, *args)


    def DrawHiddenLine(self, *args) -> "Standard_Boolean":
        """
        * returns Standard_True if the hidden lines are to be drawn. By default the hidden lines are not drawn.
        	:rtype: bool
        """
        return _VrmlConverter.VrmlConverter_Drawer_DrawHiddenLine(self, *args)


    def EnableDrawHiddenLine(self, *args) -> "void":
        """
        * sets DrawHiddenLine = Standard_True - the hidden lines are drawn.
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_EnableDrawHiddenLine(self, *args)


    def FreeBoundaryAspect(self, *args) -> "opencascade::handle< VrmlConverter_LineAspect >":
        """
        * The default values are the same default values from Vrml package. These attributes are used by the following algorithms: VrmlConverter_WFShape VrmlConverter_WFDeflectionShape
        	:rtype: opencascade::handle<VrmlConverter_LineAspect>
        """
        return _VrmlConverter.VrmlConverter_Drawer_FreeBoundaryAspect(self, *args)


    def FreeBoundaryDraw(self, *args) -> "Standard_Boolean":
        """
        * returns True if the drawing of the free boundaries is enabled.
        	:rtype: bool
        """
        return _VrmlConverter.VrmlConverter_Drawer_FreeBoundaryDraw(self, *args)


    def HiddenLineAspect(self, *args) -> "opencascade::handle< VrmlConverter_LineAspect >":
        """
        * returns LineAspect for the hidden lines. The default values are the same default values from Vrml package.
        	:rtype: opencascade::handle<VrmlConverter_LineAspect>
        """
        return _VrmlConverter.VrmlConverter_Drawer_HiddenLineAspect(self, *args)


    def IsoOnPlane(self, *args) -> "Standard_Boolean":
        """
        * returns True if the drawing of isos on planes is enabled.
        	:rtype: bool
        """
        return _VrmlConverter.VrmlConverter_Drawer_IsoOnPlane(self, *args)


    def LineAspect(self, *args) -> "opencascade::handle< VrmlConverter_LineAspect >":
        """
        * The default values are the same default values from Vrml package.
        	:rtype: opencascade::handle<VrmlConverter_LineAspect>
        """
        return _VrmlConverter.VrmlConverter_Drawer_LineAspect(self, *args)


    def MaximalChordialDeviation(self, *args) -> "Standard_Real":
        """
        * returns the maximal chordial deviation. Default value: 0.1
        	:rtype: float
        """
        return _VrmlConverter.VrmlConverter_Drawer_MaximalChordialDeviation(self, *args)


    def MaximalParameterValue(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _VrmlConverter.VrmlConverter_Drawer_MaximalParameterValue(self, *args)


    def PointAspect(self, *args) -> "opencascade::handle< VrmlConverter_PointAspect >":
        """:rtype: opencascade::handle<VrmlConverter_PointAspect>"""
        return _VrmlConverter.VrmlConverter_Drawer_PointAspect(self, *args)


    def SeenLineAspect(self, *args) -> "opencascade::handle< VrmlConverter_LineAspect >":
        """
        * returns LineAspect for the seen lines. The default values are the same default values from Vrml package.
        	:rtype: opencascade::handle<VrmlConverter_LineAspect>
        """
        return _VrmlConverter.VrmlConverter_Drawer_SeenLineAspect(self, *args)


    def SetDeviationCoefficient(self, *args) -> "void":
        """
        * default 0.001
        	:param aCoefficient:
        	:type aCoefficient: float
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetDeviationCoefficient(self, *args)


    def SetDiscretisation(self, *args) -> "void":
        """
        * default: 17 points. Defines the Discretisation (myNbPoints) when drawing any curve; If this value is one of the obvious parameters of methods, current value from Drawer won't be used. This value is used by: //! VrmlConverter_Curve VrmlConverter_WFRestrictedFace VrmlConverter_WFShape
        	:param d:
        	:type d: int
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetDiscretisation(self, *args)


    def SetFreeBoundaryAspect(self, *args) -> "void":
        """
        :param anAspect:
        	:type anAspect: VrmlConverter_LineAspect
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetFreeBoundaryAspect(self, *args)


    def SetFreeBoundaryDraw(self, *args) -> "void":
        """
        * enables the drawing the free boundaries By default the free boundaries are drawn.
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetFreeBoundaryDraw(self, *args)


    def SetHiddenLineAspect(self, *args) -> "void":
        """
        * sets LineAspect for the hidden lines.
        	:param anAspect:
        	:type anAspect: VrmlConverter_LineAspect
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetHiddenLineAspect(self, *args)


    def SetIsoOnPlane(self, *args) -> "void":
        """
        * enables the drawing of isos on planes. By default there are no isos on planes.
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetIsoOnPlane(self, *args)


    def SetLineAspect(self, *args) -> "void":
        """
        :param anAspect:
        	:type anAspect: VrmlConverter_LineAspect
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetLineAspect(self, *args)


    def SetMaximalChordialDeviation(self, *args) -> "void":
        """
        * Defines the maximal chordial deviation when drawing any curve; If this value is one of the obvious parameters of methods, current value from Drawer won't be used. This value is used by: //! VrmlConverter_DeflectionCurve VrmlConverter_WFDeflectionRestrictedFace VrmlConverter_WFDeflectionShape
        	:param aChordialDeviation:
        	:type aChordialDeviation: float
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetMaximalChordialDeviation(self, *args)


    def SetMaximalParameterValue(self, *args) -> "void":
        """
        * defines the maximum value allowed for the first and last parameters of an infinite curve. Default value: 500. VrmlConverter_Curve VrmlConverter_WFRestrictedFace VrmlConverter_WFShape
        	:param Value:
        	:type Value: float
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetMaximalParameterValue(self, *args)


    def SetPointAspect(self, *args) -> "void":
        """
        :param anAspect:
        	:type anAspect: VrmlConverter_PointAspect
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetPointAspect(self, *args)


    def SetSeenLineAspect(self, *args) -> "void":
        """
        * sets LineAspect for the seen lines.
        	:param anAspect:
        	:type anAspect: VrmlConverter_LineAspect
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetSeenLineAspect(self, *args)


    def SetShadingAspect(self, *args) -> "void":
        """
        :param anAspect:
        	:type anAspect: VrmlConverter_ShadingAspect
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetShadingAspect(self, *args)


    def SetTypeOfDeflection(self, *args) -> "void":
        """
        * by default: TOD_Relative; however, except for the shapes, the drawing will be made using the absolute deviation.
        	:param aTypeOfDeflection:
        	:type aTypeOfDeflection: Aspect_TypeOfDeflection
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetTypeOfDeflection(self, *args)


    def SetUIsoAspect(self, *args) -> "void":
        """
        :param anAspect:
        	:type anAspect: VrmlConverter_IsoAspect
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetUIsoAspect(self, *args)


    def SetUnFreeBoundaryAspect(self, *args) -> "void":
        """
        :param anAspect:
        	:type anAspect: VrmlConverter_LineAspect
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetUnFreeBoundaryAspect(self, *args)


    def SetUnFreeBoundaryDraw(self, *args) -> "void":
        """
        * enables the drawing the unfree boundaries By default the unfree boundaries are drawn.
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetUnFreeBoundaryDraw(self, *args)


    def SetVIsoAspect(self, *args) -> "void":
        """
        :param anAspect:
        	:type anAspect: VrmlConverter_IsoAspect
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetVIsoAspect(self, *args)


    def SetWireAspect(self, *args) -> "void":
        """
        :param anAspect:
        	:type anAspect: VrmlConverter_LineAspect
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetWireAspect(self, *args)


    def SetWireDraw(self, *args) -> "void":
        """
        * enables the drawing the wire By default the wire are drawn.
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Drawer_SetWireDraw(self, *args)


    def ShadingAspect(self, *args) -> "opencascade::handle< VrmlConverter_ShadingAspect >":
        """
        * The default values are the same default values from Vrml package.
        	:rtype: opencascade::handle<VrmlConverter_ShadingAspect>
        """
        return _VrmlConverter.VrmlConverter_Drawer_ShadingAspect(self, *args)


    def TypeOfDeflection(self, *args) -> "Aspect_TypeOfDeflection":
        """:rtype: Aspect_TypeOfDeflection"""
        return _VrmlConverter.VrmlConverter_Drawer_TypeOfDeflection(self, *args)


    def UIsoAspect(self, *args) -> "opencascade::handle< VrmlConverter_IsoAspect >":
        """
        * Defines the attributes which are used when drawing an U isoparametric curve of a face. Defines the number of U isoparametric curves to be drawn for a single face. The default values are the same default values from Vrml package. //! These attributes are used by the following algorithms: VrmlConverter_WFRestrictedFace VrmlConverter_WFDeflectionRestrictedFace
        	:rtype: opencascade::handle<VrmlConverter_IsoAspect>
        """
        return _VrmlConverter.VrmlConverter_Drawer_UIsoAspect(self, *args)


    def UnFreeBoundaryAspect(self, *args) -> "opencascade::handle< VrmlConverter_LineAspect >":
        """
        * The default values are the same default values from Vrml package. These attributes are used by the following algorithms: VrmlConverter_WFShape VrmlConverter_WFDeflectionShape
        	:rtype: opencascade::handle<VrmlConverter_LineAspect>
        """
        return _VrmlConverter.VrmlConverter_Drawer_UnFreeBoundaryAspect(self, *args)


    def UnFreeBoundaryDraw(self, *args) -> "Standard_Boolean":
        """
        * returns True if the drawing of the unfree boundaries is enabled.
        	:rtype: bool
        """
        return _VrmlConverter.VrmlConverter_Drawer_UnFreeBoundaryDraw(self, *args)


    def VIsoAspect(self, *args) -> "opencascade::handle< VrmlConverter_IsoAspect >":
        """
        * Defines the attributes which are used when drawing an V isoparametric curve of a face. Defines the number of V isoparametric curves to be drawn for a single face. The default values are the same default values from Vrml package. //! These attributes are used by the following algorithms: VrmlConverter_WFRestrictedFace VrmlConverter_WFDeflectionRestrictedFace
        	:rtype: opencascade::handle<VrmlConverter_IsoAspect>
        """
        return _VrmlConverter.VrmlConverter_Drawer_VIsoAspect(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _VrmlConverter.VrmlConverter_Drawer_swiginit(self, _VrmlConverter.new_VrmlConverter_Drawer(*args))

    def WireAspect(self, *args) -> "opencascade::handle< VrmlConverter_LineAspect >":
        """
        * The default values are the same default values from Vrml package. These attributes are used by the following algorithms: VrmlConverter_WFShape VrmlConverter_WFDeflectionShape
        	:rtype: opencascade::handle<VrmlConverter_LineAspect>
        """
        return _VrmlConverter.VrmlConverter_Drawer_WireAspect(self, *args)


    def WireDraw(self, *args) -> "Standard_Boolean":
        """
        * returns True if the drawing of the wire is enabled.
        	:rtype: bool
        """
        return _VrmlConverter.VrmlConverter_Drawer_WireDraw(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_Drawer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_Drawer
VrmlConverter_Drawer.DeviationCoefficient = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_DeviationCoefficient, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.DisableDrawHiddenLine = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_DisableDrawHiddenLine, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.Discretisation = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_Discretisation, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.DrawHiddenLine = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_DrawHiddenLine, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.EnableDrawHiddenLine = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_EnableDrawHiddenLine, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.FreeBoundaryAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_FreeBoundaryAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.FreeBoundaryDraw = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_FreeBoundaryDraw, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.HiddenLineAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_HiddenLineAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.IsoOnPlane = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_IsoOnPlane, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.LineAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_LineAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.MaximalChordialDeviation = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_MaximalChordialDeviation, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.MaximalParameterValue = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_MaximalParameterValue, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.PointAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_PointAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SeenLineAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SeenLineAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetDeviationCoefficient = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetDeviationCoefficient, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetDiscretisation = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetDiscretisation, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetFreeBoundaryAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetFreeBoundaryAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetFreeBoundaryDraw = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetFreeBoundaryDraw, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetHiddenLineAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetHiddenLineAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetIsoOnPlane = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetIsoOnPlane, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetLineAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetLineAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetMaximalChordialDeviation = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetMaximalChordialDeviation, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetMaximalParameterValue = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetMaximalParameterValue, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetPointAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetPointAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetSeenLineAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetSeenLineAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetShadingAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetShadingAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetTypeOfDeflection = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetTypeOfDeflection, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetUIsoAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetUIsoAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetUnFreeBoundaryAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetUnFreeBoundaryAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetUnFreeBoundaryDraw = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetUnFreeBoundaryDraw, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetVIsoAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetVIsoAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetWireAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetWireAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.SetWireDraw = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_SetWireDraw, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.ShadingAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_ShadingAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.TypeOfDeflection = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_TypeOfDeflection, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.UIsoAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_UIsoAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.UnFreeBoundaryAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_UnFreeBoundaryAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.UnFreeBoundaryDraw = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_UnFreeBoundaryDraw, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.VIsoAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_VIsoAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.WireAspect = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_WireAspect, None, VrmlConverter_Drawer)
VrmlConverter_Drawer.WireDraw = new_instancemethod(_VrmlConverter.VrmlConverter_Drawer_WireDraw, None, VrmlConverter_Drawer)
VrmlConverter_Drawer_swigregister = _VrmlConverter.VrmlConverter_Drawer_swigregister
VrmlConverter_Drawer_swigregister(VrmlConverter_Drawer)

class VrmlConverter_HLRShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args) -> "void":
        """
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:param aProjector:
        	:type aProjector: VrmlConverter_Projector
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_HLRShape_Add(*args)

    Add = staticmethod(Add)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_HLRShape_swiginit(self, _VrmlConverter.new_VrmlConverter_HLRShape())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_HLRShape
VrmlConverter_HLRShape_swigregister = _VrmlConverter.VrmlConverter_HLRShape_swigregister
VrmlConverter_HLRShape_swigregister(VrmlConverter_HLRShape)

def VrmlConverter_HLRShape_Add(*args) -> "void":
    """
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aShape:
    	:type aShape: TopoDS_Shape
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:param aProjector:
    	:type aProjector: VrmlConverter_Projector
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_HLRShape_Add(*args)

class VrmlConverter_LineAspect(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HasMaterial(self, *args) -> "Standard_Boolean":
        """
        * returns True if the materials is writing into OStream.
        	:rtype: bool
        """
        return _VrmlConverter.VrmlConverter_LineAspect_HasMaterial(self, *args)


    def Material(self, *args) -> "opencascade::handle< Vrml_Material >":
        """:rtype: opencascade::handle<Vrml_Material>"""
        return _VrmlConverter.VrmlConverter_LineAspect_Material(self, *args)


    def SetHasMaterial(self, *args) -> "void":
        """
        * defines the necessary of writing own Material from Vrml into output OStream. By default False - the material is not writing into OStream, True - the material is writing.
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_LineAspect_SetHasMaterial(self, *args)


    def SetMaterial(self, *args) -> "void":
        """
        :param aMaterial:
        	:type aMaterial: Vrml_Material
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_LineAspect_SetMaterial(self, *args)


    def __init__(self, *args):
        """
        * create a default LineAspect. Default value: HasMaterial = False - a line hasn't own material (color)
        	:rtype: None
        :param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        _VrmlConverter.VrmlConverter_LineAspect_swiginit(self, _VrmlConverter.new_VrmlConverter_LineAspect(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_LineAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_LineAspect
VrmlConverter_LineAspect.HasMaterial = new_instancemethod(_VrmlConverter.VrmlConverter_LineAspect_HasMaterial, None, VrmlConverter_LineAspect)
VrmlConverter_LineAspect.Material = new_instancemethod(_VrmlConverter.VrmlConverter_LineAspect_Material, None, VrmlConverter_LineAspect)
VrmlConverter_LineAspect.SetHasMaterial = new_instancemethod(_VrmlConverter.VrmlConverter_LineAspect_SetHasMaterial, None, VrmlConverter_LineAspect)
VrmlConverter_LineAspect.SetMaterial = new_instancemethod(_VrmlConverter.VrmlConverter_LineAspect_SetMaterial, None, VrmlConverter_LineAspect)
VrmlConverter_LineAspect_swigregister = _VrmlConverter.VrmlConverter_LineAspect_swigregister
VrmlConverter_LineAspect_swigregister(VrmlConverter_LineAspect)

class VrmlConverter_PointAspect(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HasMaterial(self, *args) -> "Standard_Boolean":
        """
        * returns True if the materials is writing into OStream.
        	:rtype: bool
        """
        return _VrmlConverter.VrmlConverter_PointAspect_HasMaterial(self, *args)


    def Material(self, *args) -> "opencascade::handle< Vrml_Material >":
        """:rtype: opencascade::handle<Vrml_Material>"""
        return _VrmlConverter.VrmlConverter_PointAspect_Material(self, *args)


    def SetHasMaterial(self, *args) -> "void":
        """
        * defines the necessary of writing own Material from Vrml into output OStream. By default False - the material is not writing into OStream, True - the material is writing.
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_PointAspect_SetHasMaterial(self, *args)


    def SetMaterial(self, *args) -> "void":
        """
        :param aMaterial:
        	:type aMaterial: Vrml_Material
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_PointAspect_SetMaterial(self, *args)


    def __init__(self, *args):
        """
        * create a default PointAspect. Default value: HasMaterial = False - a line hasn't own material (color)
        	:rtype: None
        :param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        _VrmlConverter.VrmlConverter_PointAspect_swiginit(self, _VrmlConverter.new_VrmlConverter_PointAspect(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_PointAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_PointAspect
VrmlConverter_PointAspect.HasMaterial = new_instancemethod(_VrmlConverter.VrmlConverter_PointAspect_HasMaterial, None, VrmlConverter_PointAspect)
VrmlConverter_PointAspect.Material = new_instancemethod(_VrmlConverter.VrmlConverter_PointAspect_Material, None, VrmlConverter_PointAspect)
VrmlConverter_PointAspect.SetHasMaterial = new_instancemethod(_VrmlConverter.VrmlConverter_PointAspect_SetHasMaterial, None, VrmlConverter_PointAspect)
VrmlConverter_PointAspect.SetMaterial = new_instancemethod(_VrmlConverter.VrmlConverter_PointAspect_SetMaterial, None, VrmlConverter_PointAspect)
VrmlConverter_PointAspect_swigregister = _VrmlConverter.VrmlConverter_PointAspect_swigregister
VrmlConverter_PointAspect_swigregister(VrmlConverter_PointAspect)

class VrmlConverter_Projector(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddToString(self) -> "std::string":
        """AddToString(VrmlConverter_Projector self) -> std::string"""
        return _VrmlConverter.VrmlConverter_Projector_AddToString(self)


    def Camera(self, *args) -> "VrmlConverter_TypeOfCamera":
        """:rtype: VrmlConverter_TypeOfCamera"""
        return _VrmlConverter.VrmlConverter_Projector_Camera(self, *args)


    def Light(self, *args) -> "VrmlConverter_TypeOfLight":
        """:rtype: VrmlConverter_TypeOfLight"""
        return _VrmlConverter.VrmlConverter_Projector_Light(self, *args)


    def Projector(self, *args) -> "HLRAlgo_Projector":
        """:rtype: HLRAlgo_Projector"""
        return _VrmlConverter.VrmlConverter_Projector_Projector(self, *args)


    def SetCamera(self, *args) -> "void":
        """
        :param aCamera:
        	:type aCamera: VrmlConverter_TypeOfCamera
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Projector_SetCamera(self, *args)


    def SetLight(self, *args) -> "void":
        """
        :param aLight:
        	:type aLight: VrmlConverter_TypeOfLight
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_Projector_SetLight(self, *args)


    def __init__(self, *args):
        """
        :param Shapes:
        	:type Shapes: TopTools_Array1OfShape
        	:param Focus:
        	:type Focus: float
        	:param DX:
        	:type DX: float
        	:param DY:
        	:type DY: float
        	:param DZ:
        	:type DZ: float
        	:param XUp:
        	:type XUp: float
        	:param YUp:
        	:type YUp: float
        	:param ZUp:
        	:type ZUp: float
        	:param Camera: default value is VrmlConverter_NoCamera
        	:type Camera: VrmlConverter_TypeOfCamera
        	:param Light: default value is VrmlConverter_NoLight
        	:type Light: VrmlConverter_TypeOfLight
        	:rtype: None
        """
        _VrmlConverter.VrmlConverter_Projector_swiginit(self, _VrmlConverter.new_VrmlConverter_Projector(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_Projector_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_Projector
VrmlConverter_Projector.AddToString = new_instancemethod(_VrmlConverter.VrmlConverter_Projector_AddToString, None, VrmlConverter_Projector)
VrmlConverter_Projector.Camera = new_instancemethod(_VrmlConverter.VrmlConverter_Projector_Camera, None, VrmlConverter_Projector)
VrmlConverter_Projector.Light = new_instancemethod(_VrmlConverter.VrmlConverter_Projector_Light, None, VrmlConverter_Projector)
VrmlConverter_Projector.Projector = new_instancemethod(_VrmlConverter.VrmlConverter_Projector_Projector, None, VrmlConverter_Projector)
VrmlConverter_Projector.SetCamera = new_instancemethod(_VrmlConverter.VrmlConverter_Projector_SetCamera, None, VrmlConverter_Projector)
VrmlConverter_Projector.SetLight = new_instancemethod(_VrmlConverter.VrmlConverter_Projector_SetLight, None, VrmlConverter_Projector)
VrmlConverter_Projector_swigregister = _VrmlConverter.VrmlConverter_Projector_swigregister
VrmlConverter_Projector_swigregister(VrmlConverter_Projector)

class VrmlConverter_ShadedShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args) -> "void":
        """
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_ShadedShape_Add(*args)

    Add = staticmethod(Add)

    def ComputeNormal(*args) -> "void":
        """
        :param aFace:
        	:type aFace: TopoDS_Face
        	:param pc:
        	:type pc: Poly_Connect
        	:param Nor:
        	:type Nor: TColgp_Array1OfDir
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_ShadedShape_ComputeNormal(*args)

    ComputeNormal = staticmethod(ComputeNormal)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_ShadedShape_swiginit(self, _VrmlConverter.new_VrmlConverter_ShadedShape())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_ShadedShape
VrmlConverter_ShadedShape_swigregister = _VrmlConverter.VrmlConverter_ShadedShape_swigregister
VrmlConverter_ShadedShape_swigregister(VrmlConverter_ShadedShape)

def VrmlConverter_ShadedShape_Add(*args) -> "void":
    """
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aShape:
    	:type aShape: TopoDS_Shape
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_ShadedShape_Add(*args)

def VrmlConverter_ShadedShape_ComputeNormal(*args) -> "void":
    """
    :param aFace:
    	:type aFace: TopoDS_Face
    	:param pc:
    	:type pc: Poly_Connect
    	:param Nor:
    	:type Nor: TColgp_Array1OfDir
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_ShadedShape_ComputeNormal(*args)

class VrmlConverter_ShadingAspect(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FrontMaterial(self, *args) -> "opencascade::handle< Vrml_Material >":
        """:rtype: opencascade::handle<Vrml_Material>"""
        return _VrmlConverter.VrmlConverter_ShadingAspect_FrontMaterial(self, *args)


    def HasMaterial(self, *args) -> "Standard_Boolean":
        """
        * returns True if the materials is writing into OStream.
        	:rtype: bool
        """
        return _VrmlConverter.VrmlConverter_ShadingAspect_HasMaterial(self, *args)


    def HasNormals(self, *args) -> "Standard_Boolean":
        """
        * returns True if the normals are calculating
        	:rtype: bool
        """
        return _VrmlConverter.VrmlConverter_ShadingAspect_HasNormals(self, *args)


    def SetFrontMaterial(self, *args) -> "void":
        """
        :param aMaterial:
        	:type aMaterial: Vrml_Material
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_ShadingAspect_SetFrontMaterial(self, *args)


    def SetHasMaterial(self, *args) -> "void":
        """
        * defines necessary of writing Material from Vrml into output OStream. By default False - the material is not writing into OStream, True - the material is writing.
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_ShadingAspect_SetHasMaterial(self, *args)


    def SetHasNormals(self, *args) -> "void":
        """
        * defines necessary of a calculation of normals for ShadedShape to more accurately display curved surfaces, pacticularly when smoooth or phong shading is used in VRML viewer. By default False - the normals are not calculated, True - the normals are calculated. Warning: If normals are calculated the resulting VRML file will be substantially lager.
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_ShadingAspect_SetHasNormals(self, *args)


    def SetShapeHints(self, *args) -> "void":
        """
        :param aShapeHints:
        	:type aShapeHints: Vrml_ShapeHints
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_ShadingAspect_SetShapeHints(self, *args)


    def ShapeHints(self, *args) -> "Vrml_ShapeHints":
        """:rtype: Vrml_ShapeHints"""
        return _VrmlConverter.VrmlConverter_ShadingAspect_ShapeHints(self, *args)


    def __init__(self, *args):
        """
        * create a default ShadingAspect.
        	:rtype: None
        """
        _VrmlConverter.VrmlConverter_ShadingAspect_swiginit(self, _VrmlConverter.new_VrmlConverter_ShadingAspect(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_ShadingAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_ShadingAspect
VrmlConverter_ShadingAspect.FrontMaterial = new_instancemethod(_VrmlConverter.VrmlConverter_ShadingAspect_FrontMaterial, None, VrmlConverter_ShadingAspect)
VrmlConverter_ShadingAspect.HasMaterial = new_instancemethod(_VrmlConverter.VrmlConverter_ShadingAspect_HasMaterial, None, VrmlConverter_ShadingAspect)
VrmlConverter_ShadingAspect.HasNormals = new_instancemethod(_VrmlConverter.VrmlConverter_ShadingAspect_HasNormals, None, VrmlConverter_ShadingAspect)
VrmlConverter_ShadingAspect.SetFrontMaterial = new_instancemethod(_VrmlConverter.VrmlConverter_ShadingAspect_SetFrontMaterial, None, VrmlConverter_ShadingAspect)
VrmlConverter_ShadingAspect.SetHasMaterial = new_instancemethod(_VrmlConverter.VrmlConverter_ShadingAspect_SetHasMaterial, None, VrmlConverter_ShadingAspect)
VrmlConverter_ShadingAspect.SetHasNormals = new_instancemethod(_VrmlConverter.VrmlConverter_ShadingAspect_SetHasNormals, None, VrmlConverter_ShadingAspect)
VrmlConverter_ShadingAspect.SetShapeHints = new_instancemethod(_VrmlConverter.VrmlConverter_ShadingAspect_SetShapeHints, None, VrmlConverter_ShadingAspect)
VrmlConverter_ShadingAspect.ShapeHints = new_instancemethod(_VrmlConverter.VrmlConverter_ShadingAspect_ShapeHints, None, VrmlConverter_ShadingAspect)
VrmlConverter_ShadingAspect_swigregister = _VrmlConverter.VrmlConverter_ShadingAspect_swigregister
VrmlConverter_ShadingAspect_swigregister(VrmlConverter_ShadingAspect)

class VrmlConverter_WFDeflectionRestrictedFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args) -> "void":
        """
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aFace:
        	:type aFace: BRepAdaptor_HSurface
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aFace:
        	:type aFace: BRepAdaptor_HSurface
        	:param DrawUIso:
        	:type DrawUIso: bool
        	:param DrawVIso:
        	:type DrawVIso: bool
        	:param Deflection:
        	:type Deflection: float
        	:param NBUiso:
        	:type NBUiso: int
        	:param NBViso:
        	:type NBViso: int
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_Add(*args)

    Add = staticmethod(Add)

    def AddUIso(*args) -> "void":
        """
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aFace:
        	:type aFace: BRepAdaptor_HSurface
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_AddUIso(*args)

    AddUIso = staticmethod(AddUIso)

    def AddVIso(*args) -> "void":
        """
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aFace:
        	:type aFace: BRepAdaptor_HSurface
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_AddVIso(*args)

    AddVIso = staticmethod(AddVIso)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_swiginit(self, _VrmlConverter.new_VrmlConverter_WFDeflectionRestrictedFace())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_WFDeflectionRestrictedFace
VrmlConverter_WFDeflectionRestrictedFace_swigregister = _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_swigregister
VrmlConverter_WFDeflectionRestrictedFace_swigregister(VrmlConverter_WFDeflectionRestrictedFace)

def VrmlConverter_WFDeflectionRestrictedFace_Add(*args) -> "void":
    """
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aFace:
    	:type aFace: BRepAdaptor_HSurface
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aFace:
    	:type aFace: BRepAdaptor_HSurface
    	:param DrawUIso:
    	:type DrawUIso: bool
    	:param DrawVIso:
    	:type DrawVIso: bool
    	:param Deflection:
    	:type Deflection: float
    	:param NBUiso:
    	:type NBUiso: int
    	:param NBViso:
    	:type NBViso: int
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_Add(*args)

def VrmlConverter_WFDeflectionRestrictedFace_AddUIso(*args) -> "void":
    """
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aFace:
    	:type aFace: BRepAdaptor_HSurface
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_AddUIso(*args)

def VrmlConverter_WFDeflectionRestrictedFace_AddVIso(*args) -> "void":
    """
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aFace:
    	:type aFace: BRepAdaptor_HSurface
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_AddVIso(*args)

class VrmlConverter_WFDeflectionShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args) -> "void":
        """
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_WFDeflectionShape_Add(*args)

    Add = staticmethod(Add)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_WFDeflectionShape_swiginit(self, _VrmlConverter.new_VrmlConverter_WFDeflectionShape())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_WFDeflectionShape
VrmlConverter_WFDeflectionShape_swigregister = _VrmlConverter.VrmlConverter_WFDeflectionShape_swigregister
VrmlConverter_WFDeflectionShape_swigregister(VrmlConverter_WFDeflectionShape)

def VrmlConverter_WFDeflectionShape_Add(*args) -> "void":
    """
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aShape:
    	:type aShape: TopoDS_Shape
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_WFDeflectionShape_Add(*args)

class VrmlConverter_WFRestrictedFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args) -> "void":
        """
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aFace:
        	:type aFace: BRepAdaptor_HSurface
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aFace:
        	:type aFace: BRepAdaptor_HSurface
        	:param DrawUIso:
        	:type DrawUIso: bool
        	:param DrawVIso:
        	:type DrawVIso: bool
        	:param NBUiso:
        	:type NBUiso: int
        	:param NBViso:
        	:type NBViso: int
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_WFRestrictedFace_Add(*args)

    Add = staticmethod(Add)

    def AddUIso(*args) -> "void":
        """
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aFace:
        	:type aFace: BRepAdaptor_HSurface
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_WFRestrictedFace_AddUIso(*args)

    AddUIso = staticmethod(AddUIso)

    def AddVIso(*args) -> "void":
        """
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aFace:
        	:type aFace: BRepAdaptor_HSurface
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_WFRestrictedFace_AddVIso(*args)

    AddVIso = staticmethod(AddVIso)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_WFRestrictedFace_swiginit(self, _VrmlConverter.new_VrmlConverter_WFRestrictedFace())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_WFRestrictedFace
VrmlConverter_WFRestrictedFace_swigregister = _VrmlConverter.VrmlConverter_WFRestrictedFace_swigregister
VrmlConverter_WFRestrictedFace_swigregister(VrmlConverter_WFRestrictedFace)

def VrmlConverter_WFRestrictedFace_Add(*args) -> "void":
    """
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aFace:
    	:type aFace: BRepAdaptor_HSurface
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aFace:
    	:type aFace: BRepAdaptor_HSurface
    	:param DrawUIso:
    	:type DrawUIso: bool
    	:param DrawVIso:
    	:type DrawVIso: bool
    	:param NBUiso:
    	:type NBUiso: int
    	:param NBViso:
    	:type NBViso: int
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_WFRestrictedFace_Add(*args)

def VrmlConverter_WFRestrictedFace_AddUIso(*args) -> "void":
    """
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aFace:
    	:type aFace: BRepAdaptor_HSurface
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_WFRestrictedFace_AddUIso(*args)

def VrmlConverter_WFRestrictedFace_AddVIso(*args) -> "void":
    """
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aFace:
    	:type aFace: BRepAdaptor_HSurface
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_WFRestrictedFace_AddVIso(*args)

class VrmlConverter_WFShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args) -> "void":
        """
        :param anOStream:
        	:type anOStream: Standard_OStream
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aDrawer:
        	:type aDrawer: VrmlConverter_Drawer
        	:rtype: void
        """
        return _VrmlConverter.VrmlConverter_WFShape_Add(*args)

    Add = staticmethod(Add)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_WFShape_swiginit(self, _VrmlConverter.new_VrmlConverter_WFShape())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_WFShape
VrmlConverter_WFShape_swigregister = _VrmlConverter.VrmlConverter_WFShape_swigregister
VrmlConverter_WFShape_swigregister(VrmlConverter_WFShape)

def VrmlConverter_WFShape_Add(*args) -> "void":
    """
    :param anOStream:
    	:type anOStream: Standard_OStream
    	:param aShape:
    	:type aShape: TopoDS_Shape
    	:param aDrawer:
    	:type aDrawer: VrmlConverter_Drawer
    	:rtype: void
    """
    return _VrmlConverter.VrmlConverter_WFShape_Add(*args)

class VrmlConverter_IsoAspect(VrmlConverter_LineAspect):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Number(self, *args) -> "Standard_Integer":
        """
        * returns the number of U or V isoparametric curves drawn for a single face.
        	:rtype: int
        """
        return _VrmlConverter.VrmlConverter_IsoAspect_Number(self, *args)


    def SetNumber(self, *args) -> "void":
        """
        :param aNumber:
        	:type aNumber: int
        	:rtype: None
        """
        return _VrmlConverter.VrmlConverter_IsoAspect_SetNumber(self, *args)


    def __init__(self, *args):
        """
        * create a default IsoAspect. Default value: myNumber - 10.
        	:rtype: None
        :param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param OnOff:
        	:type OnOff: bool
        	:param aNumber:
        	:type aNumber: int
        	:rtype: None
        """
        _VrmlConverter.VrmlConverter_IsoAspect_swiginit(self, _VrmlConverter.new_VrmlConverter_IsoAspect(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_IsoAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_IsoAspect
VrmlConverter_IsoAspect.Number = new_instancemethod(_VrmlConverter.VrmlConverter_IsoAspect_Number, None, VrmlConverter_IsoAspect)
VrmlConverter_IsoAspect.SetNumber = new_instancemethod(_VrmlConverter.VrmlConverter_IsoAspect_SetNumber, None, VrmlConverter_IsoAspect)
VrmlConverter_IsoAspect_swigregister = _VrmlConverter.VrmlConverter_IsoAspect_swigregister
VrmlConverter_IsoAspect_swigregister(VrmlConverter_IsoAspect)



