# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XCAFPrs module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xcafprs.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _XCAFPrs.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XCAFPrs')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XCAFPrs')
    _XCAFPrs = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XCAFPrs', [dirname(__file__)])
        except ImportError:
            import _XCAFPrs
            return _XCAFPrs
        try:
            _mod = imp.load_module('_XCAFPrs', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XCAFPrs = swig_import_helper()
    del swig_import_helper
else:
    import _XCAFPrs
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XCAFPrs.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_XCAFPrs.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_XCAFPrs.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_XCAFPrs.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_XCAFPrs.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_XCAFPrs.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_XCAFPrs.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_XCAFPrs.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_XCAFPrs.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_XCAFPrs.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_XCAFPrs.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_XCAFPrs.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_XCAFPrs.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_XCAFPrs.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_XCAFPrs.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_XCAFPrs.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_XCAFPrs.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _XCAFPrs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XCAFPrs.process_exception(error, method_name, class_name)
process_exception = _XCAFPrs.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Quantity
import OCC.Core.AIS
import OCC.Core.SelectMgr
import OCC.Core.PrsMgr
import OCC.Core.Prs3d
import OCC.Core.TColgp
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Aspect
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Bnd
import OCC.Core.Image
import OCC.Core.OSD
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.HLRAlgo
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.TopTools
import OCC.Core.V3d
import OCC.Core.SelectBasics
import OCC.Core.Select3D
import OCC.Core.StdSelect
import OCC.Core.DsgPrs
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
import OCC.Core.TPrsStd
import OCC.Core.TDataXtd
import OCC.Core.TNaming
import OCC.Core.TDataStd
XCAFPrs_DocumentExplorerFlags_None = _XCAFPrs.XCAFPrs_DocumentExplorerFlags_None
XCAFPrs_DocumentExplorerFlags_OnlyLeafNodes = _XCAFPrs.XCAFPrs_DocumentExplorerFlags_OnlyLeafNodes
XCAFPrs_DocumentExplorerFlags_NoStyle = _XCAFPrs.XCAFPrs_DocumentExplorerFlags_NoStyle

def Handle_XCAFPrs_AISObject_Create() -> "opencascade::handle< XCAFPrs_AISObject >":
    return _XCAFPrs.Handle_XCAFPrs_AISObject_Create()
Handle_XCAFPrs_AISObject_Create = _XCAFPrs.Handle_XCAFPrs_AISObject_Create

def Handle_XCAFPrs_AISObject_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFPrs_AISObject >":
    return _XCAFPrs.Handle_XCAFPrs_AISObject_DownCast(t)
Handle_XCAFPrs_AISObject_DownCast = _XCAFPrs.Handle_XCAFPrs_AISObject_DownCast

def Handle_XCAFPrs_AISObject_IsNull(t: 'opencascade::handle< XCAFPrs_AISObject > const &') -> "bool":
    return _XCAFPrs.Handle_XCAFPrs_AISObject_IsNull(t)
Handle_XCAFPrs_AISObject_IsNull = _XCAFPrs.Handle_XCAFPrs_AISObject_IsNull

def Handle_XCAFPrs_Driver_Create() -> "opencascade::handle< XCAFPrs_Driver >":
    return _XCAFPrs.Handle_XCAFPrs_Driver_Create()
Handle_XCAFPrs_Driver_Create = _XCAFPrs.Handle_XCAFPrs_Driver_Create

def Handle_XCAFPrs_Driver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFPrs_Driver >":
    return _XCAFPrs.Handle_XCAFPrs_Driver_DownCast(t)
Handle_XCAFPrs_Driver_DownCast = _XCAFPrs.Handle_XCAFPrs_Driver_DownCast

def Handle_XCAFPrs_Driver_IsNull(t: 'opencascade::handle< XCAFPrs_Driver > const &') -> "bool":
    return _XCAFPrs.Handle_XCAFPrs_Driver_IsNull(t)
Handle_XCAFPrs_Driver_IsNull = _XCAFPrs.Handle_XCAFPrs_Driver_IsNull
class XCAFPrs_DataMapOfStyleShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _XCAFPrs.XCAFPrs_DataMapOfStyleShape_swiginit(self, _XCAFPrs.new_XCAFPrs_DataMapOfStyleShape(*args))
    __swig_destroy__ = _XCAFPrs.delete_XCAFPrs_DataMapOfStyleShape
XCAFPrs_DataMapOfStyleShape.begin = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_begin, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.end = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_end, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.cbegin = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_cbegin, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.cend = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_cend, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Exchange = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Exchange, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Assign = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Assign, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Set = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Set, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.ReSize = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_ReSize, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Bind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Bind, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Bound = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Bound, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.IsBound = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_IsBound, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.UnBind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_UnBind, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Seek = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Seek, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Find = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Find, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.ChangeSeek = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_ChangeSeek, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.ChangeFind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_ChangeFind, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.__call__ = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape___call__, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Clear = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Clear, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape.Size = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleShape_Size, None, XCAFPrs_DataMapOfStyleShape)
XCAFPrs_DataMapOfStyleShape_swigregister = _XCAFPrs.XCAFPrs_DataMapOfStyleShape_swigregister
XCAFPrs_DataMapOfStyleShape_swigregister(XCAFPrs_DataMapOfStyleShape)

class XCAFPrs_DataMapOfStyleTransient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_swiginit(self, _XCAFPrs.new_XCAFPrs_DataMapOfStyleTransient(*args))
    __swig_destroy__ = _XCAFPrs.delete_XCAFPrs_DataMapOfStyleTransient
XCAFPrs_DataMapOfStyleTransient.begin = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_begin, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.end = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_end, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.cbegin = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_cbegin, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.cend = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_cend, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Exchange = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Exchange, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Assign = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Assign, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Set = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Set, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.ReSize = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_ReSize, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Bind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Bind, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Bound = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Bound, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.IsBound = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_IsBound, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.UnBind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_UnBind, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Seek = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Seek, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Find = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Find, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.ChangeSeek = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_ChangeSeek, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.ChangeFind = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_ChangeFind, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.__call__ = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient___call__, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Clear = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Clear, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient.Size = new_instancemethod(_XCAFPrs.XCAFPrs_DataMapOfStyleTransient_Size, None, XCAFPrs_DataMapOfStyleTransient)
XCAFPrs_DataMapOfStyleTransient_swigregister = _XCAFPrs.XCAFPrs_DataMapOfStyleTransient_swigregister
XCAFPrs_DataMapOfStyleTransient_swigregister(XCAFPrs_DataMapOfStyleTransient)

class XCAFPrs_IndexedDataMapOfShapeStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_swiginit(self, _XCAFPrs.new_XCAFPrs_IndexedDataMapOfShapeStyle(*args))
    __swig_destroy__ = _XCAFPrs.delete_XCAFPrs_IndexedDataMapOfShapeStyle
XCAFPrs_IndexedDataMapOfShapeStyle.begin = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_begin, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.end = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_end, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.cbegin = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_cbegin, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.cend = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_cend, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.Exchange = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_Exchange, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.Assign = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_Assign, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.Set = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_Set, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.ReSize = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_ReSize, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.Add = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_Add, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.Contains = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_Contains, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.Substitute = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_Substitute, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.Swap = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_Swap, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.RemoveLast = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_RemoveLast, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.RemoveFromIndex = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_RemoveFromIndex, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.RemoveKey = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_RemoveKey, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.FindKey = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_FindKey, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.FindFromIndex = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_FindFromIndex, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.ChangeFromIndex = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_ChangeFromIndex, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.__call__ = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle___call__, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.FindIndex = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_FindIndex, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.ChangeFromKey = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_ChangeFromKey, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.Seek = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_Seek, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.ChangeSeek = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_ChangeSeek, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.FindFromKey = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_FindFromKey, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.Clear = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_Clear, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle.Size = new_instancemethod(_XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_Size, None, XCAFPrs_IndexedDataMapOfShapeStyle)
XCAFPrs_IndexedDataMapOfShapeStyle_swigregister = _XCAFPrs.XCAFPrs_IndexedDataMapOfShapeStyle_swigregister
XCAFPrs_IndexedDataMapOfShapeStyle_swigregister(XCAFPrs_IndexedDataMapOfShapeStyle)

class xcafprs(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CollectStyleSettings(*args) -> "void":
        """
        * Collect styles defined for shape on label L and its components and subshapes and fills a map of shape - style correspondence The location <loc> is for internal use, it should be Null location for external call
        	:param L:
        	:type L: TDF_Label
        	:param loc:
        	:type loc: TopLoc_Location
        	:param settings:
        	:type settings: XCAFPrs_IndexedDataMapOfShapeStyle
        	:param theLayerColor: default value is Quantity_ColorRGBA(Quantity_NOC_WHITE)
        	:type theLayerColor: Quantity_ColorRGBA
        	:rtype: void
        """
        return _XCAFPrs.xcafprs_CollectStyleSettings(*args)

    CollectStyleSettings = staticmethod(CollectStyleSettings)

    def GetViewNameMode(*args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _XCAFPrs.xcafprs_GetViewNameMode(*args)

    GetViewNameMode = staticmethod(GetViewNameMode)

    def SetViewNameMode(*args) -> "void":
        """
        * Set ViewNameMode for indicate display names or not.
        	:param viewNameMode:
        	:type viewNameMode: bool
        	:rtype: void
        """
        return _XCAFPrs.xcafprs_SetViewNameMode(*args)

    SetViewNameMode = staticmethod(SetViewNameMode)

    __repr__ = _dumps_object


    def __init__(self):
        _XCAFPrs.xcafprs_swiginit(self, _XCAFPrs.new_xcafprs())
    __swig_destroy__ = _XCAFPrs.delete_xcafprs
xcafprs_swigregister = _XCAFPrs.xcafprs_swigregister
xcafprs_swigregister(xcafprs)

def xcafprs_CollectStyleSettings(*args) -> "void":
    """
    * Collect styles defined for shape on label L and its components and subshapes and fills a map of shape - style correspondence The location <loc> is for internal use, it should be Null location for external call
    	:param L:
    	:type L: TDF_Label
    	:param loc:
    	:type loc: TopLoc_Location
    	:param settings:
    	:type settings: XCAFPrs_IndexedDataMapOfShapeStyle
    	:param theLayerColor: default value is Quantity_ColorRGBA(Quantity_NOC_WHITE)
    	:type theLayerColor: Quantity_ColorRGBA
    	:rtype: void
    """
    return _XCAFPrs.xcafprs_CollectStyleSettings(*args)

def xcafprs_GetViewNameMode(*args) -> "Standard_Boolean":
    """:rtype: bool"""
    return _XCAFPrs.xcafprs_GetViewNameMode(*args)

def xcafprs_SetViewNameMode(*args) -> "void":
    """
    * Set ViewNameMode for indicate display names or not.
    	:param viewNameMode:
    	:type viewNameMode: bool
    	:rtype: void
    """
    return _XCAFPrs.xcafprs_SetViewNameMode(*args)

class XCAFPrs_AISObject(OCC.Core.AIS.AIS_ColoredShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DispatchStyles(self, *args) -> "void":
        """
        * Fetch the Shape from associated Label and fill the map of sub-shapes styles. By default, this method is called implicitly within first ::Compute(). Application might call this method explicitly to manipulate styles afterwards. @param theToSyncStyles flag indicating if method ::Compute() should call this method again on first compute or re-compute
        	:param theToSyncStyles: default value is Standard_False
        	:type theToSyncStyles: bool
        	:rtype: void
        """
        return _XCAFPrs.XCAFPrs_AISObject_DispatchStyles(self, *args)


    def GetLabel(self, *args) -> "TDF_Label const &":
        """
        * Returns the label which was visualised by this presentation
        	:rtype: TDF_Label
        """
        return _XCAFPrs.XCAFPrs_AISObject_GetLabel(self, *args)


    def SetLabel(self, *args) -> "void":
        """
        * Assign the label to this presentation (but does not mark it outdated with SetToUpdate()).
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: None
        """
        return _XCAFPrs.XCAFPrs_AISObject_SetLabel(self, *args)


    def __init__(self, *args):
        """
        * Creates an object to visualise the shape label.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: None
        """
        _XCAFPrs.XCAFPrs_AISObject_swiginit(self, _XCAFPrs.new_XCAFPrs_AISObject(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFPrs_AISObject_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFPrs.delete_XCAFPrs_AISObject
XCAFPrs_AISObject.DispatchStyles = new_instancemethod(_XCAFPrs.XCAFPrs_AISObject_DispatchStyles, None, XCAFPrs_AISObject)
XCAFPrs_AISObject.GetLabel = new_instancemethod(_XCAFPrs.XCAFPrs_AISObject_GetLabel, None, XCAFPrs_AISObject)
XCAFPrs_AISObject.SetLabel = new_instancemethod(_XCAFPrs.XCAFPrs_AISObject_SetLabel, None, XCAFPrs_AISObject)
XCAFPrs_AISObject_swigregister = _XCAFPrs.XCAFPrs_AISObject_swigregister
XCAFPrs_AISObject_swigregister(XCAFPrs_AISObject)

class XCAFPrs_DocumentExplorer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeCurrent(self, *args) -> "XCAFPrs_DocumentNode &":
        """
        * Return current position.
        	:rtype: XCAFPrs_DocumentNode
        """
        return _XCAFPrs.XCAFPrs_DocumentExplorer_ChangeCurrent(self, *args)


    def Current(self, *args) -> "XCAFPrs_DocumentNode const &":
        """
        * Return current position.
        	:rtype: XCAFPrs_DocumentNode
        * Return current position within specified assembly depth.
        	:param theDepth:
        	:type theDepth: int
        	:rtype: XCAFPrs_DocumentNode
        """
        return _XCAFPrs.XCAFPrs_DocumentExplorer_Current(self, *args)


    def CurrentDepth(self, *args) -> "Standard_Integer":
        """
        * Return depth of the current node in hierarchy, starting from 0. Zero means Root label.
        	:rtype: int
        """
        return _XCAFPrs.XCAFPrs_DocumentExplorer_CurrentDepth(self, *args)


    def DefineChildId(*args) -> "TCollection_AsciiString":
        """
        * @name string identification tools Construct a unique string identifier for the given label. The identifier is a concatenation of label entries (TDF_Tool::Entry() with tailing '.') of hierarchy from parent to child joined via '/' and looking like this: @code 0:1:1:1./0:1:1:1:9./0:1:1:5:7. @endcode This generation scheme also allows finding originating labels using TDF_Tool::Label(). The tailing dot simplifies parent equality check. @param theLabel child label to define id @param theParentId parent string identifier defined by this method
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theParentId:
        	:type theParentId: TCollection_AsciiString
        	:rtype: TCollection_AsciiString
        """
        return _XCAFPrs.XCAFPrs_DocumentExplorer_DefineChildId(*args)

    DefineChildId = staticmethod(DefineChildId)

    def FindLabelFromPathId(*args) -> "TDF_Label":
        """
        * Find a shape entity based on a text identifier constructed from OCAF labels defining full path. @sa DefineChildId()
        	:param theDocument:
        	:type theDocument: TDocStd_Document
        	:param theId:
        	:type theId: TCollection_AsciiString
        	:param theParentLocation:
        	:type theParentLocation: TopLoc_Location
        	:param theLocation:
        	:type theLocation: TopLoc_Location
        	:rtype: TDF_Label
        * Find a shape entity based on a text identifier constructed from OCAF labels defining full path. @sa DefineChildId()
        	:param theDocument:
        	:type theDocument: TDocStd_Document
        	:param theId:
        	:type theId: TCollection_AsciiString
        	:param theLocation:
        	:type theLocation: TopLoc_Location
        	:rtype: TDF_Label
        """
        return _XCAFPrs.XCAFPrs_DocumentExplorer_FindLabelFromPathId(*args)

    FindLabelFromPathId = staticmethod(FindLabelFromPathId)

    def FindShapeFromPathId(*args) -> "TopoDS_Shape":
        """
        * Find a shape entity based on a text identifier constructed from OCAF labels defining full path. @sa DefineChildId()
        	:param theDocument:
        	:type theDocument: TDocStd_Document
        	:param theId:
        	:type theId: TCollection_AsciiString
        	:rtype: TopoDS_Shape
        """
        return _XCAFPrs.XCAFPrs_DocumentExplorer_FindShapeFromPathId(*args)

    FindShapeFromPathId = staticmethod(FindShapeFromPathId)

    def Init(self, *args) -> "void":
        """
        * Initialize the iterator from a single root shape in the document. @param theDocument document to explore @param theRoot single root label to explore within specified document @param theFlags iteration flags @param theDefStyle default style for nodes with undefined style
        	:param theDocument:
        	:type theDocument: TDocStd_Document
        	:param theRoot:
        	:type theRoot: TDF_Label
        	:param theFlags:
        	:type theFlags: int
        	:param theDefStyle: default value is XCAFPrs_Style()
        	:type theDefStyle: XCAFPrs_Style
        	:rtype: None
        * Initialize the iterator from the list of root shapes in the document. @param theDocument document to explore @param theRoots root labels to explore within specified document @param theFlags iteration flags @param theDefStyle default style for nodes with undefined style
        	:param theDocument:
        	:type theDocument: TDocStd_Document
        	:param theRoots:
        	:type theRoots: TDF_LabelSequence
        	:param theFlags:
        	:type theFlags: int
        	:param theDefStyle: default value is XCAFPrs_Style()
        	:type theDefStyle: XCAFPrs_Style
        	:rtype: None
        """
        return _XCAFPrs.XCAFPrs_DocumentExplorer_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Return True if iterator points to the valid node.
        	:rtype: bool
        """
        return _XCAFPrs.XCAFPrs_DocumentExplorer_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Go to the next node.
        	:rtype: None
        """
        return _XCAFPrs.XCAFPrs_DocumentExplorer_Next(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Constructor for exploring the whole document. @param theDocument document to explore @param theFlags iteration flags @param theDefStyle default style for nodes with undefined style
        	:param theDocument:
        	:type theDocument: TDocStd_Document
        	:param theFlags:
        	:type theFlags: int
        	:param theDefStyle: default value is XCAFPrs_Style()
        	:type theDefStyle: XCAFPrs_Style
        	:rtype: None
        * Constructor for exploring specified list of root shapes in the document. @param theDocument document to explore @param theRoots root labels to explore within specified document @param theFlags iteration flags @param theDefStyle default style for nodes with undefined style
        	:param theDocument:
        	:type theDocument: TDocStd_Document
        	:param theRoots:
        	:type theRoots: TDF_LabelSequence
        	:param theFlags:
        	:type theFlags: int
        	:param theDefStyle: default value is XCAFPrs_Style()
        	:type theDefStyle: XCAFPrs_Style
        	:rtype: None
        """
        _XCAFPrs.XCAFPrs_DocumentExplorer_swiginit(self, _XCAFPrs.new_XCAFPrs_DocumentExplorer(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFPrs.delete_XCAFPrs_DocumentExplorer
XCAFPrs_DocumentExplorer.ChangeCurrent = new_instancemethod(_XCAFPrs.XCAFPrs_DocumentExplorer_ChangeCurrent, None, XCAFPrs_DocumentExplorer)
XCAFPrs_DocumentExplorer.Current = new_instancemethod(_XCAFPrs.XCAFPrs_DocumentExplorer_Current, None, XCAFPrs_DocumentExplorer)
XCAFPrs_DocumentExplorer.CurrentDepth = new_instancemethod(_XCAFPrs.XCAFPrs_DocumentExplorer_CurrentDepth, None, XCAFPrs_DocumentExplorer)
XCAFPrs_DocumentExplorer.Init = new_instancemethod(_XCAFPrs.XCAFPrs_DocumentExplorer_Init, None, XCAFPrs_DocumentExplorer)
XCAFPrs_DocumentExplorer.More = new_instancemethod(_XCAFPrs.XCAFPrs_DocumentExplorer_More, None, XCAFPrs_DocumentExplorer)
XCAFPrs_DocumentExplorer.Next = new_instancemethod(_XCAFPrs.XCAFPrs_DocumentExplorer_Next, None, XCAFPrs_DocumentExplorer)
XCAFPrs_DocumentExplorer_swigregister = _XCAFPrs.XCAFPrs_DocumentExplorer_swigregister
XCAFPrs_DocumentExplorer_swigregister(XCAFPrs_DocumentExplorer)

def XCAFPrs_DocumentExplorer_DefineChildId(*args) -> "TCollection_AsciiString":
    """
    * @name string identification tools Construct a unique string identifier for the given label. The identifier is a concatenation of label entries (TDF_Tool::Entry() with tailing '.') of hierarchy from parent to child joined via '/' and looking like this: @code 0:1:1:1./0:1:1:1:9./0:1:1:5:7. @endcode This generation scheme also allows finding originating labels using TDF_Tool::Label(). The tailing dot simplifies parent equality check. @param theLabel child label to define id @param theParentId parent string identifier defined by this method
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:param theParentId:
    	:type theParentId: TCollection_AsciiString
    	:rtype: TCollection_AsciiString
    """
    return _XCAFPrs.XCAFPrs_DocumentExplorer_DefineChildId(*args)

def XCAFPrs_DocumentExplorer_FindLabelFromPathId(*args) -> "TDF_Label":
    """
    * Find a shape entity based on a text identifier constructed from OCAF labels defining full path. @sa DefineChildId()
    	:param theDocument:
    	:type theDocument: TDocStd_Document
    	:param theId:
    	:type theId: TCollection_AsciiString
    	:param theParentLocation:
    	:type theParentLocation: TopLoc_Location
    	:param theLocation:
    	:type theLocation: TopLoc_Location
    	:rtype: TDF_Label
    * Find a shape entity based on a text identifier constructed from OCAF labels defining full path. @sa DefineChildId()
    	:param theDocument:
    	:type theDocument: TDocStd_Document
    	:param theId:
    	:type theId: TCollection_AsciiString
    	:param theLocation:
    	:type theLocation: TopLoc_Location
    	:rtype: TDF_Label
    """
    return _XCAFPrs.XCAFPrs_DocumentExplorer_FindLabelFromPathId(*args)

def XCAFPrs_DocumentExplorer_FindShapeFromPathId(*args) -> "TopoDS_Shape":
    """
    * Find a shape entity based on a text identifier constructed from OCAF labels defining full path. @sa DefineChildId()
    	:param theDocument:
    	:type theDocument: TDocStd_Document
    	:param theId:
    	:type theId: TCollection_AsciiString
    	:rtype: TopoDS_Shape
    """
    return _XCAFPrs.XCAFPrs_DocumentExplorer_FindShapeFromPathId(*args)

class XCAFPrs_DocumentIdIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def More(self, *args) -> "bool":
        """
        * Return True if iterator points to a value.
        	:rtype: bool
        """
        return _XCAFPrs.XCAFPrs_DocumentIdIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Find the next value.
        	:rtype: None
        """
        return _XCAFPrs.XCAFPrs_DocumentIdIterator_Next(self, *args)


    def Value(self, *args) -> "TCollection_AsciiString const &":
        """
        * Return current value.
        	:rtype: TCollection_AsciiString
        """
        return _XCAFPrs.XCAFPrs_DocumentIdIterator_Value(self, *args)


    def __init__(self, *args):
        """
        * Main constructor.
        	:param thePath:
        	:type thePath: TCollection_AsciiString
        	:rtype: None
        """
        _XCAFPrs.XCAFPrs_DocumentIdIterator_swiginit(self, _XCAFPrs.new_XCAFPrs_DocumentIdIterator(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFPrs.delete_XCAFPrs_DocumentIdIterator
XCAFPrs_DocumentIdIterator.More = new_instancemethod(_XCAFPrs.XCAFPrs_DocumentIdIterator_More, None, XCAFPrs_DocumentIdIterator)
XCAFPrs_DocumentIdIterator.Next = new_instancemethod(_XCAFPrs.XCAFPrs_DocumentIdIterator_Next, None, XCAFPrs_DocumentIdIterator)
XCAFPrs_DocumentIdIterator.Value = new_instancemethod(_XCAFPrs.XCAFPrs_DocumentIdIterator_Value, None, XCAFPrs_DocumentIdIterator)
XCAFPrs_DocumentIdIterator_swigregister = _XCAFPrs.XCAFPrs_DocumentIdIterator_swigregister
XCAFPrs_DocumentIdIterator_swigregister(XCAFPrs_DocumentIdIterator)

class XCAFPrs_DocumentNode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Id = _swig_property(_XCAFPrs.XCAFPrs_DocumentNode_Id_get, _XCAFPrs.XCAFPrs_DocumentNode_Id_set)
    Label = _swig_property(_XCAFPrs.XCAFPrs_DocumentNode_Label_get, _XCAFPrs.XCAFPrs_DocumentNode_Label_set)
    RefLabel = _swig_property(_XCAFPrs.XCAFPrs_DocumentNode_RefLabel_get, _XCAFPrs.XCAFPrs_DocumentNode_RefLabel_set)
    Style = _swig_property(_XCAFPrs.XCAFPrs_DocumentNode_Style_get, _XCAFPrs.XCAFPrs_DocumentNode_Style_set)
    Location = _swig_property(_XCAFPrs.XCAFPrs_DocumentNode_Location_get, _XCAFPrs.XCAFPrs_DocumentNode_Location_set)
    LocalTrsf = _swig_property(_XCAFPrs.XCAFPrs_DocumentNode_LocalTrsf_get, _XCAFPrs.XCAFPrs_DocumentNode_LocalTrsf_set)
    ChildIter = _swig_property(_XCAFPrs.XCAFPrs_DocumentNode_ChildIter_get, _XCAFPrs.XCAFPrs_DocumentNode_ChildIter_set)
    IsAssembly = _swig_property(_XCAFPrs.XCAFPrs_DocumentNode_IsAssembly_get, _XCAFPrs.XCAFPrs_DocumentNode_IsAssembly_set)

    def __init__(self, *args):
        """
        * //!< flag indicating that this label is assembly
        	:rtype: None
        """
        _XCAFPrs.XCAFPrs_DocumentNode_swiginit(self, _XCAFPrs.new_XCAFPrs_DocumentNode(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFPrs.delete_XCAFPrs_DocumentNode
XCAFPrs_DocumentNode_swigregister = _XCAFPrs.XCAFPrs_DocumentNode_swigregister
XCAFPrs_DocumentNode_swigregister(XCAFPrs_DocumentNode)

class XCAFPrs_Driver(OCC.Core.TPrsStd.TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args) -> "Standard_GUID const &":
        """
        * returns GUID of the driver
        	:rtype: Standard_GUID
        """
        return _XCAFPrs.XCAFPrs_Driver_GetID(*args)

    GetID = staticmethod(GetID)


    @staticmethod
    def DownCast(t):
      return Handle_XCAFPrs_Driver_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        _XCAFPrs.XCAFPrs_Driver_swiginit(self, _XCAFPrs.new_XCAFPrs_Driver())
    __swig_destroy__ = _XCAFPrs.delete_XCAFPrs_Driver
XCAFPrs_Driver_swigregister = _XCAFPrs.XCAFPrs_Driver_swigregister
XCAFPrs_Driver_swigregister(XCAFPrs_Driver)

def XCAFPrs_Driver_GetID(*args) -> "Standard_GUID const &":
    """
    * returns GUID of the driver
    	:rtype: Standard_GUID
    """
    return _XCAFPrs.XCAFPrs_Driver_GetID(*args)

class XCAFPrs_Style(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(XCAFPrs_Style self, int depth=-1) -> std::string
        DumpJsonToString(XCAFPrs_Style self) -> std::string
        """
        return _XCAFPrs.XCAFPrs_Style_DumpJsonToString(self, depth)


    def GetColorCurv(self, *args) -> "Quantity_Color const &":
        """
        * Return curve color.
        	:rtype: Quantity_Color
        """
        return _XCAFPrs.XCAFPrs_Style_GetColorCurv(self, *args)


    def GetColorSurf(self, *args) -> "Quantity_Color const &":
        """
        * Return surface color.
        	:rtype: Quantity_Color
        """
        return _XCAFPrs.XCAFPrs_Style_GetColorSurf(self, *args)


    def GetColorSurfRGBA(self, *args) -> "Quantity_ColorRGBA const &":
        """
        * Return surface color.
        	:rtype: Quantity_ColorRGBA
        """
        return _XCAFPrs.XCAFPrs_Style_GetColorSurfRGBA(self, *args)


    def HashCode(*args) -> "Standard_Integer":
        """
        * Computes a hash code for the given set of styling settings, in the range [1, theUpperBound] @param theStyle the set of styling settings which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param theStyle:
        	:type theStyle: XCAFPrs_Style
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _XCAFPrs.XCAFPrs_Style_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        * Returns True if styles are the same Methods for using Style as key in maps
        	:param theOther:
        	:type theOther: XCAFPrs_Style
        	:rtype: bool
        * Returns True when the two keys are the same.
        	:param theS1:
        	:type theS1: XCAFPrs_Style
        	:param theS2:
        	:type theS2: XCAFPrs_Style
        	:rtype: bool
        """
        return _XCAFPrs.XCAFPrs_Style_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def IsSetColorCurv(self, *args) -> "Standard_Boolean":
        """
        * Return True if curve color has been defined.
        	:rtype: bool
        """
        return _XCAFPrs.XCAFPrs_Style_IsSetColorCurv(self, *args)


    def IsSetColorSurf(self, *args) -> "Standard_Boolean":
        """
        * Return True if surface color has been defined.
        	:rtype: bool
        """
        return _XCAFPrs.XCAFPrs_Style_IsSetColorSurf(self, *args)


    def IsVisible(self, *args) -> "Standard_Boolean":
        """
        * Manage visibility.
        	:rtype: bool
        """
        return _XCAFPrs.XCAFPrs_Style_IsVisible(self, *args)


    def SetColorCurv(self, *args) -> "void":
        """
        * Set curve color.
        	:param col:
        	:type col: Quantity_Color
        	:rtype: None
        """
        return _XCAFPrs.XCAFPrs_Style_SetColorCurv(self, *args)


    def SetColorSurf(self, *args) -> "void":
        """
        * Set surface color.
        	:param theColor:
        	:type theColor: Quantity_Color
        	:rtype: None
        * Set surface color.
        	:param theColor:
        	:type theColor: Quantity_ColorRGBA
        	:rtype: None
        """
        return _XCAFPrs.XCAFPrs_Style_SetColorSurf(self, *args)


    def SetVisibility(self, *args) -> "void":
        """
        * Assign visibility.
        	:param theVisibility:
        	:type theVisibility: bool
        	:rtype: None
        """
        return _XCAFPrs.XCAFPrs_Style_SetVisibility(self, *args)


    def UnSetColorCurv(self, *args) -> "void":
        """
        * Manage curve color setting
        	:rtype: None
        """
        return _XCAFPrs.XCAFPrs_Style_UnSetColorCurv(self, *args)


    def UnSetColorSurf(self, *args) -> "void":
        """
        * Manage surface color setting
        	:rtype: None
        """
        return _XCAFPrs.XCAFPrs_Style_UnSetColorSurf(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor - colors are unset, visibility is True.
        	:rtype: None
        """
        _XCAFPrs.XCAFPrs_Style_swiginit(self, _XCAFPrs.new_XCAFPrs_Style(*args))

    def __eq_wrapper__(self, other: 'XCAFPrs_Style') -> "bool":
        """__eq_wrapper__(XCAFPrs_Style self, XCAFPrs_Style other) -> bool"""
        return _XCAFPrs.XCAFPrs_Style___eq_wrapper__(self, other)


    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFPrs.delete_XCAFPrs_Style
XCAFPrs_Style.DumpJsonToString = new_instancemethod(_XCAFPrs.XCAFPrs_Style_DumpJsonToString, None, XCAFPrs_Style)
XCAFPrs_Style.GetColorCurv = new_instancemethod(_XCAFPrs.XCAFPrs_Style_GetColorCurv, None, XCAFPrs_Style)
XCAFPrs_Style.GetColorSurf = new_instancemethod(_XCAFPrs.XCAFPrs_Style_GetColorSurf, None, XCAFPrs_Style)
XCAFPrs_Style.GetColorSurfRGBA = new_instancemethod(_XCAFPrs.XCAFPrs_Style_GetColorSurfRGBA, None, XCAFPrs_Style)
XCAFPrs_Style.IsSetColorCurv = new_instancemethod(_XCAFPrs.XCAFPrs_Style_IsSetColorCurv, None, XCAFPrs_Style)
XCAFPrs_Style.IsSetColorSurf = new_instancemethod(_XCAFPrs.XCAFPrs_Style_IsSetColorSurf, None, XCAFPrs_Style)
XCAFPrs_Style.IsVisible = new_instancemethod(_XCAFPrs.XCAFPrs_Style_IsVisible, None, XCAFPrs_Style)
XCAFPrs_Style.SetColorCurv = new_instancemethod(_XCAFPrs.XCAFPrs_Style_SetColorCurv, None, XCAFPrs_Style)
XCAFPrs_Style.SetColorSurf = new_instancemethod(_XCAFPrs.XCAFPrs_Style_SetColorSurf, None, XCAFPrs_Style)
XCAFPrs_Style.SetVisibility = new_instancemethod(_XCAFPrs.XCAFPrs_Style_SetVisibility, None, XCAFPrs_Style)
XCAFPrs_Style.UnSetColorCurv = new_instancemethod(_XCAFPrs.XCAFPrs_Style_UnSetColorCurv, None, XCAFPrs_Style)
XCAFPrs_Style.UnSetColorSurf = new_instancemethod(_XCAFPrs.XCAFPrs_Style_UnSetColorSurf, None, XCAFPrs_Style)
XCAFPrs_Style.__eq_wrapper__ = new_instancemethod(_XCAFPrs.XCAFPrs_Style___eq_wrapper__, None, XCAFPrs_Style)
XCAFPrs_Style_swigregister = _XCAFPrs.XCAFPrs_Style_swigregister
XCAFPrs_Style_swigregister(XCAFPrs_Style)

def XCAFPrs_Style_HashCode(*args) -> "Standard_Integer":
    """
    * Computes a hash code for the given set of styling settings, in the range [1, theUpperBound] @param theStyle the set of styling settings which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
    	:param theStyle:
    	:type theStyle: XCAFPrs_Style
    	:param theUpperBound:
    	:type theUpperBound: int
    	:rtype: int
    """
    return _XCAFPrs.XCAFPrs_Style_HashCode(*args)

def XCAFPrs_Style_IsEqual(*args) -> "Standard_Boolean":
    """
    * Returns True if styles are the same Methods for using Style as key in maps
    	:param theOther:
    	:type theOther: XCAFPrs_Style
    	:rtype: bool
    * Returns True when the two keys are the same.
    	:param theS1:
    	:type theS1: XCAFPrs_Style
    	:param theS2:
    	:type theS2: XCAFPrs_Style
    	:rtype: bool
    """
    return _XCAFPrs.XCAFPrs_Style_IsEqual(*args)



