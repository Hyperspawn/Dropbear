# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XmlTObjDrivers module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xmltobjdrivers.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _XmlTObjDrivers.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlTObjDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlTObjDrivers')
    _XmlTObjDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlTObjDrivers', [dirname(__file__)])
        except ImportError:
            import _XmlTObjDrivers
            return _XmlTObjDrivers
        try:
            _mod = imp.load_module('_XmlTObjDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlTObjDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _XmlTObjDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlTObjDrivers.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_XmlTObjDrivers.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_XmlTObjDrivers.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_XmlTObjDrivers.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_XmlTObjDrivers.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_XmlTObjDrivers.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_XmlTObjDrivers.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_XmlTObjDrivers.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_XmlTObjDrivers.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_XmlTObjDrivers.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_XmlTObjDrivers.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_XmlTObjDrivers.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_XmlTObjDrivers.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_XmlTObjDrivers.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_XmlTObjDrivers.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_XmlTObjDrivers.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_XmlTObjDrivers.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _XmlTObjDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XmlTObjDrivers.process_exception(error, method_name, class_name)
process_exception = _XmlTObjDrivers.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.XmlMDF
import OCC.Core.Message
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.XmlLDrivers

def Handle_XmlTObjDrivers_DocumentRetrievalDriver_Create() -> "opencascade::handle< XmlTObjDrivers_DocumentRetrievalDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_Create()
Handle_XmlTObjDrivers_DocumentRetrievalDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_Create

def Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_DocumentRetrievalDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast(t)
Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast

def Handle_XmlTObjDrivers_DocumentRetrievalDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_DocumentRetrievalDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_IsNull(t)
Handle_XmlTObjDrivers_DocumentRetrievalDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_IsNull

def Handle_XmlTObjDrivers_DocumentStorageDriver_Create() -> "opencascade::handle< XmlTObjDrivers_DocumentStorageDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_Create()
Handle_XmlTObjDrivers_DocumentStorageDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_Create

def Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_DocumentStorageDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast(t)
Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast

def Handle_XmlTObjDrivers_DocumentStorageDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_DocumentStorageDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_IsNull(t)
Handle_XmlTObjDrivers_DocumentStorageDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_IsNull

def Handle_XmlTObjDrivers_IntSparseArrayDriver_Create() -> "opencascade::handle< XmlTObjDrivers_IntSparseArrayDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_Create()
Handle_XmlTObjDrivers_IntSparseArrayDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_Create

def Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_IntSparseArrayDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast(t)
Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast

def Handle_XmlTObjDrivers_IntSparseArrayDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_IntSparseArrayDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_IsNull(t)
Handle_XmlTObjDrivers_IntSparseArrayDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_IsNull

def Handle_XmlTObjDrivers_ModelDriver_Create() -> "opencascade::handle< XmlTObjDrivers_ModelDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_Create()
Handle_XmlTObjDrivers_ModelDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_Create

def Handle_XmlTObjDrivers_ModelDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_ModelDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_DownCast(t)
Handle_XmlTObjDrivers_ModelDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_DownCast

def Handle_XmlTObjDrivers_ModelDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_ModelDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_IsNull(t)
Handle_XmlTObjDrivers_ModelDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_IsNull

def Handle_XmlTObjDrivers_ObjectDriver_Create() -> "opencascade::handle< XmlTObjDrivers_ObjectDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_Create()
Handle_XmlTObjDrivers_ObjectDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_Create

def Handle_XmlTObjDrivers_ObjectDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_ObjectDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_DownCast(t)
Handle_XmlTObjDrivers_ObjectDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_DownCast

def Handle_XmlTObjDrivers_ObjectDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_ObjectDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_IsNull(t)
Handle_XmlTObjDrivers_ObjectDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_IsNull

def Handle_XmlTObjDrivers_ReferenceDriver_Create() -> "opencascade::handle< XmlTObjDrivers_ReferenceDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_Create()
Handle_XmlTObjDrivers_ReferenceDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_Create

def Handle_XmlTObjDrivers_ReferenceDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_ReferenceDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_DownCast(t)
Handle_XmlTObjDrivers_ReferenceDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_DownCast

def Handle_XmlTObjDrivers_ReferenceDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_ReferenceDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_IsNull(t)
Handle_XmlTObjDrivers_ReferenceDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_IsNull

def Handle_XmlTObjDrivers_XYZDriver_Create() -> "opencascade::handle< XmlTObjDrivers_XYZDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_Create()
Handle_XmlTObjDrivers_XYZDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_Create

def Handle_XmlTObjDrivers_XYZDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_XYZDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_DownCast(t)
Handle_XmlTObjDrivers_XYZDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_DownCast

def Handle_XmlTObjDrivers_XYZDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_XYZDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_IsNull(t)
Handle_XmlTObjDrivers_XYZDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_IsNull
class xmltobjdrivers(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args) -> "void":
        """
        :param aDriverTable:
        	:type aDriverTable: XmlMDF_ADriverTable
        	:param anMsgDrv:
        	:type anMsgDrv: Message_Messenger
        	:rtype: void
        """
        return _XmlTObjDrivers.xmltobjdrivers_AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def DefineFormat(*args) -> "void":
        """
        * Defines format 'TObjXml' and registers its read and write drivers in the specified application
        	:param theApp:
        	:type theApp: TDocStd_Application
        	:rtype: void
        """
        return _XmlTObjDrivers.xmltobjdrivers_DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
        """
        * Returns a driver corresponding to <aGUID>. Used for plugin.
        	:param aGUID:
        	:type aGUID: Standard_GUID
        	:rtype: opencascade::handle<Standard_Transient>
        """
        return _XmlTObjDrivers.xmltobjdrivers_Factory(*args)

    Factory = staticmethod(Factory)

    __repr__ = _dumps_object


    def __init__(self):
        _XmlTObjDrivers.xmltobjdrivers_swiginit(self, _XmlTObjDrivers.new_xmltobjdrivers())
    __swig_destroy__ = _XmlTObjDrivers.delete_xmltobjdrivers
xmltobjdrivers_swigregister = _XmlTObjDrivers.xmltobjdrivers_swigregister
xmltobjdrivers_swigregister(xmltobjdrivers)

def xmltobjdrivers_AddDrivers(*args) -> "void":
    """
    :param aDriverTable:
    	:type aDriverTable: XmlMDF_ADriverTable
    	:param anMsgDrv:
    	:type anMsgDrv: Message_Messenger
    	:rtype: void
    """
    return _XmlTObjDrivers.xmltobjdrivers_AddDrivers(*args)

def xmltobjdrivers_DefineFormat(*args) -> "void":
    """
    * Defines format 'TObjXml' and registers its read and write drivers in the specified application
    	:param theApp:
    	:type theApp: TDocStd_Application
    	:rtype: void
    """
    return _XmlTObjDrivers.xmltobjdrivers_DefineFormat(*args)

def xmltobjdrivers_Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
    """
    * Returns a driver corresponding to <aGUID>. Used for plugin.
    	:param aGUID:
    	:type aGUID: Standard_GUID
    	:rtype: opencascade::handle<Standard_Transient>
    """
    return _XmlTObjDrivers.xmltobjdrivers_Factory(*args)

class XmlTObjDrivers_DocumentRetrievalDriver(OCC.Core.XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _XmlTObjDrivers.XmlTObjDrivers_DocumentRetrievalDriver_swiginit(self, _XmlTObjDrivers.new_XmlTObjDrivers_DocumentRetrievalDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_DocumentRetrievalDriver
XmlTObjDrivers_DocumentRetrievalDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_DocumentRetrievalDriver_swigregister
XmlTObjDrivers_DocumentRetrievalDriver_swigregister(XmlTObjDrivers_DocumentRetrievalDriver)

class XmlTObjDrivers_DocumentStorageDriver(OCC.Core.XmlLDrivers.XmlLDrivers_DocumentStorageDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theCopyright:
        	:type theCopyright: TCollection_ExtendedString
        	:rtype: None
        """
        _XmlTObjDrivers.XmlTObjDrivers_DocumentStorageDriver_swiginit(self, _XmlTObjDrivers.new_XmlTObjDrivers_DocumentStorageDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_DocumentStorageDriver
XmlTObjDrivers_DocumentStorageDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_DocumentStorageDriver_swigregister
XmlTObjDrivers_DocumentStorageDriver_swigregister(XmlTObjDrivers_DocumentStorageDriver)

class XmlTObjDrivers_IntSparseArrayDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Paste(self, *args) -> "void":
        """
        :param theSource:
        	:type theSource: XmlObjMgt_Persistent
        	:param theTarget:
        	:type theTarget: TDF_Attribute
        	:param theRelocTable:
        	:type theRelocTable: XmlObjMgt_RRelocationTable
        	:rtype: bool
        :param theSource:
        	:type theSource: TDF_Attribute
        	:param theTarget:
        	:type theTarget: XmlObjMgt_Persistent
        	:param theRelocTable:
        	:type theRelocTable: XmlObjMgt_SRelocationTable
        	:rtype: None
        """
        return _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_Paste(self, *args)


    def __init__(self, *args):
        """
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_swiginit(self, _XmlTObjDrivers.new_XmlTObjDrivers_IntSparseArrayDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_IntSparseArrayDriver
XmlTObjDrivers_IntSparseArrayDriver.Paste = new_instancemethod(_XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_Paste, None, XmlTObjDrivers_IntSparseArrayDriver)
XmlTObjDrivers_IntSparseArrayDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_swigregister
XmlTObjDrivers_IntSparseArrayDriver_swigregister(XmlTObjDrivers_IntSparseArrayDriver)

class XmlTObjDrivers_ModelDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Paste(self, *args) -> "void":
        """
        :param Source:
        	:type Source: XmlObjMgt_Persistent
        	:param Target:
        	:type Target: TDF_Attribute
        	:param RelocTable:
        	:type RelocTable: XmlObjMgt_RRelocationTable
        	:rtype: bool
        :param Source:
        	:type Source: TDF_Attribute
        	:param Target:
        	:type Target: XmlObjMgt_Persistent
        	:param RelocTable:
        	:type RelocTable: XmlObjMgt_SRelocationTable
        	:rtype: None
        """
        return _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_Paste(self, *args)


    def __init__(self, *args):
        """
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_swiginit(self, _XmlTObjDrivers.new_XmlTObjDrivers_ModelDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_ModelDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_ModelDriver
XmlTObjDrivers_ModelDriver.Paste = new_instancemethod(_XmlTObjDrivers.XmlTObjDrivers_ModelDriver_Paste, None, XmlTObjDrivers_ModelDriver)
XmlTObjDrivers_ModelDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_swigregister
XmlTObjDrivers_ModelDriver_swigregister(XmlTObjDrivers_ModelDriver)

class XmlTObjDrivers_ObjectDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Paste(self, *args) -> "void":
        """
        :param Source:
        	:type Source: XmlObjMgt_Persistent
        	:param Target:
        	:type Target: TDF_Attribute
        	:param RelocTable:
        	:type RelocTable: XmlObjMgt_RRelocationTable
        	:rtype: bool
        :param Source:
        	:type Source: TDF_Attribute
        	:param Target:
        	:type Target: XmlObjMgt_Persistent
        	:param RelocTable:
        	:type RelocTable: XmlObjMgt_SRelocationTable
        	:rtype: None
        """
        return _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_Paste(self, *args)


    def __init__(self, *args):
        """
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_swiginit(self, _XmlTObjDrivers.new_XmlTObjDrivers_ObjectDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_ObjectDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_ObjectDriver
XmlTObjDrivers_ObjectDriver.Paste = new_instancemethod(_XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_Paste, None, XmlTObjDrivers_ObjectDriver)
XmlTObjDrivers_ObjectDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_swigregister
XmlTObjDrivers_ObjectDriver_swigregister(XmlTObjDrivers_ObjectDriver)

class XmlTObjDrivers_ReferenceDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Paste(self, *args) -> "void":
        """
        :param Source:
        	:type Source: XmlObjMgt_Persistent
        	:param Target:
        	:type Target: TDF_Attribute
        	:param RelocTable:
        	:type RelocTable: XmlObjMgt_RRelocationTable
        	:rtype: bool
        :param Source:
        	:type Source: TDF_Attribute
        	:param Target:
        	:type Target: XmlObjMgt_Persistent
        	:param RelocTable:
        	:type RelocTable: XmlObjMgt_SRelocationTable
        	:rtype: None
        """
        return _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_Paste(self, *args)


    def __init__(self, *args):
        """
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_swiginit(self, _XmlTObjDrivers.new_XmlTObjDrivers_ReferenceDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_ReferenceDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_ReferenceDriver
XmlTObjDrivers_ReferenceDriver.Paste = new_instancemethod(_XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_Paste, None, XmlTObjDrivers_ReferenceDriver)
XmlTObjDrivers_ReferenceDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_swigregister
XmlTObjDrivers_ReferenceDriver_swigregister(XmlTObjDrivers_ReferenceDriver)

class XmlTObjDrivers_XYZDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Paste(self, *args) -> "void":
        """
        :param Source:
        	:type Source: XmlObjMgt_Persistent
        	:param Target:
        	:type Target: TDF_Attribute
        	:param RelocTable:
        	:type RelocTable: XmlObjMgt_RRelocationTable
        	:rtype: bool
        :param Source:
        	:type Source: TDF_Attribute
        	:param Target:
        	:type Target: XmlObjMgt_Persistent
        	:param RelocTable:
        	:type RelocTable: XmlObjMgt_SRelocationTable
        	:rtype: None
        """
        return _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_Paste(self, *args)


    def __init__(self, *args):
        """
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_swiginit(self, _XmlTObjDrivers.new_XmlTObjDrivers_XYZDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_XYZDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_XYZDriver
XmlTObjDrivers_XYZDriver.Paste = new_instancemethod(_XmlTObjDrivers.XmlTObjDrivers_XYZDriver_Paste, None, XmlTObjDrivers_XYZDriver)
XmlTObjDrivers_XYZDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_swigregister
XmlTObjDrivers_XYZDriver_swigregister(XmlTObjDrivers_XYZDriver)



