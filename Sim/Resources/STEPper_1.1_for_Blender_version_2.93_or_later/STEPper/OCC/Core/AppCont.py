# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
AppCont module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_appcont.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _AppCont.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AppCont')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AppCont')
    _AppCont = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AppCont', [dirname(__file__)])
        except ImportError:
            import _AppCont
            return _AppCont
        try:
            _mod = imp.load_module('_AppCont', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AppCont = swig_import_helper()
    del swig_import_helper
else:
    import _AppCont
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AppCont.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_AppCont.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_AppCont.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_AppCont.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_AppCont.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_AppCont.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_AppCont.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_AppCont.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_AppCont.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_AppCont.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_AppCont.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_AppCont.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_AppCont.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_AppCont.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_AppCont.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_AppCont.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_AppCont.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _AppCont.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _AppCont.process_exception(error, method_name, class_name)
process_exception = _AppCont.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.AppParCurves
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.gp
import OCC.Core.TColgp
class AppCont_Function(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D1(self, *args) -> "Standard_Boolean":
        """
        * Returns the derivative at parameter <theU>.
        	:param theU:
        	:type theU: float
        	:param theVec2d:
        	:type theVec2d: NCollection_Array1<gp_Vec2d>
        	:param theVec:
        	:type theVec: NCollection_Array1<gp_Vec>
        	:rtype: bool
        """
        return _AppCont.AppCont_Function_D1(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        * Returns the first parameter of the function.
        	:rtype: float
        """
        return _AppCont.AppCont_Function_FirstParameter(self, *args)


    def GetNbOf2dPoints(self, *args) -> "Standard_Integer":
        """
        * Get number of 2d points returned by 'Value' and 'D1' functions.
        	:rtype: int
        """
        return _AppCont.AppCont_Function_GetNbOf2dPoints(self, *args)


    def GetNbOf3dPoints(self, *args) -> "Standard_Integer":
        """
        * Get number of 3d points returned by 'Value' and 'D1' functions.
        	:rtype: int
        """
        return _AppCont.AppCont_Function_GetNbOf3dPoints(self, *args)


    def GetNumberOfPoints(self, *args) -> "void":
        """
        * Get number of 3d and 2d points returned by 'Value' and 'D1' functions.
        	:param theNbPnt:
        	:type theNbPnt: int
        	:param theNbPnt2d:
        	:type theNbPnt2d: int
        	:rtype: None
        """
        return _AppCont.AppCont_Function_GetNumberOfPoints(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        * Returns the last parameter of the function.
        	:rtype: float
        """
        return _AppCont.AppCont_Function_LastParameter(self, *args)


    def PeriodInformation(self, *args) -> "void":
        """
        * Return information about peridicity in output paramateters space. @param theDimIdx Defines index in output parameters space. 1 <= theDimIdx <= 3 * myNbPnt + 2 * myNbPnt2d.
        	:param Standard_Integer:
        	:type Standard_Integer: 
        	:param IsPeriodic:
        	:type IsPeriodic: bool
        	:param thePeriod:
        	:type thePeriod: float
        	:rtype: None
        """
        return _AppCont.AppCont_Function_PeriodInformation(self, *args)


    def Value(self, *args) -> "Standard_Boolean":
        """
        * Returns the point at parameter <theU>.
        	:param theU:
        	:type theU: float
        	:param thePnt2d:
        	:type thePnt2d: NCollection_Array1<gp_Pnt2d>
        	:param thePnt:
        	:type thePnt: NCollection_Array1<gp_Pnt>
        	:rtype: bool
        """
        return _AppCont.AppCont_Function_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppCont.delete_AppCont_Function
AppCont_Function.D1 = new_instancemethod(_AppCont.AppCont_Function_D1, None, AppCont_Function)
AppCont_Function.FirstParameter = new_instancemethod(_AppCont.AppCont_Function_FirstParameter, None, AppCont_Function)
AppCont_Function.GetNbOf2dPoints = new_instancemethod(_AppCont.AppCont_Function_GetNbOf2dPoints, None, AppCont_Function)
AppCont_Function.GetNbOf3dPoints = new_instancemethod(_AppCont.AppCont_Function_GetNbOf3dPoints, None, AppCont_Function)
AppCont_Function.GetNumberOfPoints = new_instancemethod(_AppCont.AppCont_Function_GetNumberOfPoints, None, AppCont_Function)
AppCont_Function.LastParameter = new_instancemethod(_AppCont.AppCont_Function_LastParameter, None, AppCont_Function)
AppCont_Function.PeriodInformation = new_instancemethod(_AppCont.AppCont_Function_PeriodInformation, None, AppCont_Function)
AppCont_Function.Value = new_instancemethod(_AppCont.AppCont_Function_Value, None, AppCont_Function)
AppCont_Function_swigregister = _AppCont.AppCont_Function_swigregister
AppCont_Function_swigregister(AppCont_Function)

class AppCont_LeastSquare(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        	:type SSP: AppCont_Function
        	:param U0:
        	:type U0: float
        	:param U1:
        	:type U1: float
        	:param FirstCons:
        	:type FirstCons: AppParCurves_Constraint
        	:param LastCons:
        	:type LastCons: AppParCurves_Constraint
        	:param Deg:
        	:type Deg: int
        	:param NbPoints:
        	:type NbPoints: int
        	:rtype: None
        """
        _AppCont.AppCont_LeastSquare_swiginit(self, _AppCont.new_AppCont_LeastSquare(*args))

    def Error(self, *args) -> "void":
        """
        :param F:
        	:type F: float
        	:param MaxE3d:
        	:type MaxE3d: float
        	:param MaxE2d:
        	:type MaxE2d: float
        	:rtype: None
        """
        return _AppCont.AppCont_LeastSquare_Error(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _AppCont.AppCont_LeastSquare_IsDone(self, *args)


    def Value(self, *args) -> "AppParCurves_MultiCurve const &":
        """:rtype: AppParCurves_MultiCurve"""
        return _AppCont.AppCont_LeastSquare_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppCont.delete_AppCont_LeastSquare
AppCont_LeastSquare.Error = new_instancemethod(_AppCont.AppCont_LeastSquare_Error, None, AppCont_LeastSquare)
AppCont_LeastSquare.IsDone = new_instancemethod(_AppCont.AppCont_LeastSquare_IsDone, None, AppCont_LeastSquare)
AppCont_LeastSquare.Value = new_instancemethod(_AppCont.AppCont_LeastSquare_Value, None, AppCont_LeastSquare)
AppCont_LeastSquare_swigregister = _AppCont.AppCont_LeastSquare_swigregister
AppCont_LeastSquare_swigregister(AppCont_LeastSquare)



