# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRep.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRep')
    _BRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRep', [dirname(__file__)])
        except ImportError:
            import _BRep
            return _BRep
        try:
            _mod = imp.load_module('_BRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRep = swig_import_helper()
    del swig_import_helper
else:
    import _BRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRep.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRep.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRep.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRep.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRep.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRep.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRep.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRep.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRep.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRep.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRep.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRep.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRep.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRep.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRep.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRep.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRep.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRep.process_exception(error, method_name, class_name)
process_exception = _BRep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.Geom
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.Geom2d

def Handle_BRep_CurveRepresentation_Create() -> "opencascade::handle< BRep_CurveRepresentation >":
    return _BRep.Handle_BRep_CurveRepresentation_Create()
Handle_BRep_CurveRepresentation_Create = _BRep.Handle_BRep_CurveRepresentation_Create

def Handle_BRep_CurveRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_CurveRepresentation >":
    return _BRep.Handle_BRep_CurveRepresentation_DownCast(t)
Handle_BRep_CurveRepresentation_DownCast = _BRep.Handle_BRep_CurveRepresentation_DownCast

def Handle_BRep_CurveRepresentation_IsNull(t: 'opencascade::handle< BRep_CurveRepresentation > const &') -> "bool":
    return _BRep.Handle_BRep_CurveRepresentation_IsNull(t)
Handle_BRep_CurveRepresentation_IsNull = _BRep.Handle_BRep_CurveRepresentation_IsNull

def Handle_BRep_PointRepresentation_Create() -> "opencascade::handle< BRep_PointRepresentation >":
    return _BRep.Handle_BRep_PointRepresentation_Create()
Handle_BRep_PointRepresentation_Create = _BRep.Handle_BRep_PointRepresentation_Create

def Handle_BRep_PointRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PointRepresentation >":
    return _BRep.Handle_BRep_PointRepresentation_DownCast(t)
Handle_BRep_PointRepresentation_DownCast = _BRep.Handle_BRep_PointRepresentation_DownCast

def Handle_BRep_PointRepresentation_IsNull(t: 'opencascade::handle< BRep_PointRepresentation > const &') -> "bool":
    return _BRep.Handle_BRep_PointRepresentation_IsNull(t)
Handle_BRep_PointRepresentation_IsNull = _BRep.Handle_BRep_PointRepresentation_IsNull

def Handle_BRep_TEdge_Create() -> "opencascade::handle< BRep_TEdge >":
    return _BRep.Handle_BRep_TEdge_Create()
Handle_BRep_TEdge_Create = _BRep.Handle_BRep_TEdge_Create

def Handle_BRep_TEdge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_TEdge >":
    return _BRep.Handle_BRep_TEdge_DownCast(t)
Handle_BRep_TEdge_DownCast = _BRep.Handle_BRep_TEdge_DownCast

def Handle_BRep_TEdge_IsNull(t: 'opencascade::handle< BRep_TEdge > const &') -> "bool":
    return _BRep.Handle_BRep_TEdge_IsNull(t)
Handle_BRep_TEdge_IsNull = _BRep.Handle_BRep_TEdge_IsNull

def Handle_BRep_TFace_Create() -> "opencascade::handle< BRep_TFace >":
    return _BRep.Handle_BRep_TFace_Create()
Handle_BRep_TFace_Create = _BRep.Handle_BRep_TFace_Create

def Handle_BRep_TFace_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_TFace >":
    return _BRep.Handle_BRep_TFace_DownCast(t)
Handle_BRep_TFace_DownCast = _BRep.Handle_BRep_TFace_DownCast

def Handle_BRep_TFace_IsNull(t: 'opencascade::handle< BRep_TFace > const &') -> "bool":
    return _BRep.Handle_BRep_TFace_IsNull(t)
Handle_BRep_TFace_IsNull = _BRep.Handle_BRep_TFace_IsNull

def Handle_BRep_TVertex_Create() -> "opencascade::handle< BRep_TVertex >":
    return _BRep.Handle_BRep_TVertex_Create()
Handle_BRep_TVertex_Create = _BRep.Handle_BRep_TVertex_Create

def Handle_BRep_TVertex_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_TVertex >":
    return _BRep.Handle_BRep_TVertex_DownCast(t)
Handle_BRep_TVertex_DownCast = _BRep.Handle_BRep_TVertex_DownCast

def Handle_BRep_TVertex_IsNull(t: 'opencascade::handle< BRep_TVertex > const &') -> "bool":
    return _BRep.Handle_BRep_TVertex_IsNull(t)
Handle_BRep_TVertex_IsNull = _BRep.Handle_BRep_TVertex_IsNull

def Handle_BRep_CurveOn2Surfaces_Create() -> "opencascade::handle< BRep_CurveOn2Surfaces >":
    return _BRep.Handle_BRep_CurveOn2Surfaces_Create()
Handle_BRep_CurveOn2Surfaces_Create = _BRep.Handle_BRep_CurveOn2Surfaces_Create

def Handle_BRep_CurveOn2Surfaces_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_CurveOn2Surfaces >":
    return _BRep.Handle_BRep_CurveOn2Surfaces_DownCast(t)
Handle_BRep_CurveOn2Surfaces_DownCast = _BRep.Handle_BRep_CurveOn2Surfaces_DownCast

def Handle_BRep_CurveOn2Surfaces_IsNull(t: 'opencascade::handle< BRep_CurveOn2Surfaces > const &') -> "bool":
    return _BRep.Handle_BRep_CurveOn2Surfaces_IsNull(t)
Handle_BRep_CurveOn2Surfaces_IsNull = _BRep.Handle_BRep_CurveOn2Surfaces_IsNull

def Handle_BRep_GCurve_Create() -> "opencascade::handle< BRep_GCurve >":
    return _BRep.Handle_BRep_GCurve_Create()
Handle_BRep_GCurve_Create = _BRep.Handle_BRep_GCurve_Create

def Handle_BRep_GCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_GCurve >":
    return _BRep.Handle_BRep_GCurve_DownCast(t)
Handle_BRep_GCurve_DownCast = _BRep.Handle_BRep_GCurve_DownCast

def Handle_BRep_GCurve_IsNull(t: 'opencascade::handle< BRep_GCurve > const &') -> "bool":
    return _BRep.Handle_BRep_GCurve_IsNull(t)
Handle_BRep_GCurve_IsNull = _BRep.Handle_BRep_GCurve_IsNull

def Handle_BRep_PointOnCurve_Create() -> "opencascade::handle< BRep_PointOnCurve >":
    return _BRep.Handle_BRep_PointOnCurve_Create()
Handle_BRep_PointOnCurve_Create = _BRep.Handle_BRep_PointOnCurve_Create

def Handle_BRep_PointOnCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PointOnCurve >":
    return _BRep.Handle_BRep_PointOnCurve_DownCast(t)
Handle_BRep_PointOnCurve_DownCast = _BRep.Handle_BRep_PointOnCurve_DownCast

def Handle_BRep_PointOnCurve_IsNull(t: 'opencascade::handle< BRep_PointOnCurve > const &') -> "bool":
    return _BRep.Handle_BRep_PointOnCurve_IsNull(t)
Handle_BRep_PointOnCurve_IsNull = _BRep.Handle_BRep_PointOnCurve_IsNull

def Handle_BRep_PointsOnSurface_Create() -> "opencascade::handle< BRep_PointsOnSurface >":
    return _BRep.Handle_BRep_PointsOnSurface_Create()
Handle_BRep_PointsOnSurface_Create = _BRep.Handle_BRep_PointsOnSurface_Create

def Handle_BRep_PointsOnSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PointsOnSurface >":
    return _BRep.Handle_BRep_PointsOnSurface_DownCast(t)
Handle_BRep_PointsOnSurface_DownCast = _BRep.Handle_BRep_PointsOnSurface_DownCast

def Handle_BRep_PointsOnSurface_IsNull(t: 'opencascade::handle< BRep_PointsOnSurface > const &') -> "bool":
    return _BRep.Handle_BRep_PointsOnSurface_IsNull(t)
Handle_BRep_PointsOnSurface_IsNull = _BRep.Handle_BRep_PointsOnSurface_IsNull

def Handle_BRep_Polygon3D_Create() -> "opencascade::handle< BRep_Polygon3D >":
    return _BRep.Handle_BRep_Polygon3D_Create()
Handle_BRep_Polygon3D_Create = _BRep.Handle_BRep_Polygon3D_Create

def Handle_BRep_Polygon3D_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_Polygon3D >":
    return _BRep.Handle_BRep_Polygon3D_DownCast(t)
Handle_BRep_Polygon3D_DownCast = _BRep.Handle_BRep_Polygon3D_DownCast

def Handle_BRep_Polygon3D_IsNull(t: 'opencascade::handle< BRep_Polygon3D > const &') -> "bool":
    return _BRep.Handle_BRep_Polygon3D_IsNull(t)
Handle_BRep_Polygon3D_IsNull = _BRep.Handle_BRep_Polygon3D_IsNull

def Handle_BRep_PolygonOnSurface_Create() -> "opencascade::handle< BRep_PolygonOnSurface >":
    return _BRep.Handle_BRep_PolygonOnSurface_Create()
Handle_BRep_PolygonOnSurface_Create = _BRep.Handle_BRep_PolygonOnSurface_Create

def Handle_BRep_PolygonOnSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PolygonOnSurface >":
    return _BRep.Handle_BRep_PolygonOnSurface_DownCast(t)
Handle_BRep_PolygonOnSurface_DownCast = _BRep.Handle_BRep_PolygonOnSurface_DownCast

def Handle_BRep_PolygonOnSurface_IsNull(t: 'opencascade::handle< BRep_PolygonOnSurface > const &') -> "bool":
    return _BRep.Handle_BRep_PolygonOnSurface_IsNull(t)
Handle_BRep_PolygonOnSurface_IsNull = _BRep.Handle_BRep_PolygonOnSurface_IsNull

def Handle_BRep_PolygonOnTriangulation_Create() -> "opencascade::handle< BRep_PolygonOnTriangulation >":
    return _BRep.Handle_BRep_PolygonOnTriangulation_Create()
Handle_BRep_PolygonOnTriangulation_Create = _BRep.Handle_BRep_PolygonOnTriangulation_Create

def Handle_BRep_PolygonOnTriangulation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PolygonOnTriangulation >":
    return _BRep.Handle_BRep_PolygonOnTriangulation_DownCast(t)
Handle_BRep_PolygonOnTriangulation_DownCast = _BRep.Handle_BRep_PolygonOnTriangulation_DownCast

def Handle_BRep_PolygonOnTriangulation_IsNull(t: 'opencascade::handle< BRep_PolygonOnTriangulation > const &') -> "bool":
    return _BRep.Handle_BRep_PolygonOnTriangulation_IsNull(t)
Handle_BRep_PolygonOnTriangulation_IsNull = _BRep.Handle_BRep_PolygonOnTriangulation_IsNull

def Handle_BRep_Curve3D_Create() -> "opencascade::handle< BRep_Curve3D >":
    return _BRep.Handle_BRep_Curve3D_Create()
Handle_BRep_Curve3D_Create = _BRep.Handle_BRep_Curve3D_Create

def Handle_BRep_Curve3D_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_Curve3D >":
    return _BRep.Handle_BRep_Curve3D_DownCast(t)
Handle_BRep_Curve3D_DownCast = _BRep.Handle_BRep_Curve3D_DownCast

def Handle_BRep_Curve3D_IsNull(t: 'opencascade::handle< BRep_Curve3D > const &') -> "bool":
    return _BRep.Handle_BRep_Curve3D_IsNull(t)
Handle_BRep_Curve3D_IsNull = _BRep.Handle_BRep_Curve3D_IsNull

def Handle_BRep_CurveOnSurface_Create() -> "opencascade::handle< BRep_CurveOnSurface >":
    return _BRep.Handle_BRep_CurveOnSurface_Create()
Handle_BRep_CurveOnSurface_Create = _BRep.Handle_BRep_CurveOnSurface_Create

def Handle_BRep_CurveOnSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_CurveOnSurface >":
    return _BRep.Handle_BRep_CurveOnSurface_DownCast(t)
Handle_BRep_CurveOnSurface_DownCast = _BRep.Handle_BRep_CurveOnSurface_DownCast

def Handle_BRep_CurveOnSurface_IsNull(t: 'opencascade::handle< BRep_CurveOnSurface > const &') -> "bool":
    return _BRep.Handle_BRep_CurveOnSurface_IsNull(t)
Handle_BRep_CurveOnSurface_IsNull = _BRep.Handle_BRep_CurveOnSurface_IsNull

def Handle_BRep_PointOnCurveOnSurface_Create() -> "opencascade::handle< BRep_PointOnCurveOnSurface >":
    return _BRep.Handle_BRep_PointOnCurveOnSurface_Create()
Handle_BRep_PointOnCurveOnSurface_Create = _BRep.Handle_BRep_PointOnCurveOnSurface_Create

def Handle_BRep_PointOnCurveOnSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PointOnCurveOnSurface >":
    return _BRep.Handle_BRep_PointOnCurveOnSurface_DownCast(t)
Handle_BRep_PointOnCurveOnSurface_DownCast = _BRep.Handle_BRep_PointOnCurveOnSurface_DownCast

def Handle_BRep_PointOnCurveOnSurface_IsNull(t: 'opencascade::handle< BRep_PointOnCurveOnSurface > const &') -> "bool":
    return _BRep.Handle_BRep_PointOnCurveOnSurface_IsNull(t)
Handle_BRep_PointOnCurveOnSurface_IsNull = _BRep.Handle_BRep_PointOnCurveOnSurface_IsNull

def Handle_BRep_PointOnSurface_Create() -> "opencascade::handle< BRep_PointOnSurface >":
    return _BRep.Handle_BRep_PointOnSurface_Create()
Handle_BRep_PointOnSurface_Create = _BRep.Handle_BRep_PointOnSurface_Create

def Handle_BRep_PointOnSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PointOnSurface >":
    return _BRep.Handle_BRep_PointOnSurface_DownCast(t)
Handle_BRep_PointOnSurface_DownCast = _BRep.Handle_BRep_PointOnSurface_DownCast

def Handle_BRep_PointOnSurface_IsNull(t: 'opencascade::handle< BRep_PointOnSurface > const &') -> "bool":
    return _BRep.Handle_BRep_PointOnSurface_IsNull(t)
Handle_BRep_PointOnSurface_IsNull = _BRep.Handle_BRep_PointOnSurface_IsNull

def Handle_BRep_PolygonOnClosedSurface_Create() -> "opencascade::handle< BRep_PolygonOnClosedSurface >":
    return _BRep.Handle_BRep_PolygonOnClosedSurface_Create()
Handle_BRep_PolygonOnClosedSurface_Create = _BRep.Handle_BRep_PolygonOnClosedSurface_Create

def Handle_BRep_PolygonOnClosedSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PolygonOnClosedSurface >":
    return _BRep.Handle_BRep_PolygonOnClosedSurface_DownCast(t)
Handle_BRep_PolygonOnClosedSurface_DownCast = _BRep.Handle_BRep_PolygonOnClosedSurface_DownCast

def Handle_BRep_PolygonOnClosedSurface_IsNull(t: 'opencascade::handle< BRep_PolygonOnClosedSurface > const &') -> "bool":
    return _BRep.Handle_BRep_PolygonOnClosedSurface_IsNull(t)
Handle_BRep_PolygonOnClosedSurface_IsNull = _BRep.Handle_BRep_PolygonOnClosedSurface_IsNull

def Handle_BRep_PolygonOnClosedTriangulation_Create() -> "opencascade::handle< BRep_PolygonOnClosedTriangulation >":
    return _BRep.Handle_BRep_PolygonOnClosedTriangulation_Create()
Handle_BRep_PolygonOnClosedTriangulation_Create = _BRep.Handle_BRep_PolygonOnClosedTriangulation_Create

def Handle_BRep_PolygonOnClosedTriangulation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PolygonOnClosedTriangulation >":
    return _BRep.Handle_BRep_PolygonOnClosedTriangulation_DownCast(t)
Handle_BRep_PolygonOnClosedTriangulation_DownCast = _BRep.Handle_BRep_PolygonOnClosedTriangulation_DownCast

def Handle_BRep_PolygonOnClosedTriangulation_IsNull(t: 'opencascade::handle< BRep_PolygonOnClosedTriangulation > const &') -> "bool":
    return _BRep.Handle_BRep_PolygonOnClosedTriangulation_IsNull(t)
Handle_BRep_PolygonOnClosedTriangulation_IsNull = _BRep.Handle_BRep_PolygonOnClosedTriangulation_IsNull

def Handle_BRep_CurveOnClosedSurface_Create() -> "opencascade::handle< BRep_CurveOnClosedSurface >":
    return _BRep.Handle_BRep_CurveOnClosedSurface_Create()
Handle_BRep_CurveOnClosedSurface_Create = _BRep.Handle_BRep_CurveOnClosedSurface_Create

def Handle_BRep_CurveOnClosedSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_CurveOnClosedSurface >":
    return _BRep.Handle_BRep_CurveOnClosedSurface_DownCast(t)
Handle_BRep_CurveOnClosedSurface_DownCast = _BRep.Handle_BRep_CurveOnClosedSurface_DownCast

def Handle_BRep_CurveOnClosedSurface_IsNull(t: 'opencascade::handle< BRep_CurveOnClosedSurface > const &') -> "bool":
    return _BRep.Handle_BRep_CurveOnClosedSurface_IsNull(t)
Handle_BRep_CurveOnClosedSurface_IsNull = _BRep.Handle_BRep_CurveOnClosedSurface_IsNull
class BRep_ListOfPointRepresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRep.BRep_ListOfPointRepresentation_swiginit(self, _BRep.new_BRep_ListOfPointRepresentation(*args))
    __swig_destroy__ = _BRep.delete_BRep_ListOfPointRepresentation
BRep_ListOfPointRepresentation.begin = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_begin, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.end = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_end, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.cbegin = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_cbegin, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.cend = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_cend, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Size = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Size, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Assign = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Assign, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Set = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Set, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Clear = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Clear, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.First = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_First, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Last = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Last, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Append = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Append, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Prepend = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Prepend, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.RemoveFirst = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_RemoveFirst, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Remove = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Remove, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.InsertBefore = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_InsertBefore, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.InsertAfter = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_InsertAfter, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation.Reverse = new_instancemethod(_BRep.BRep_ListOfPointRepresentation_Reverse, None, BRep_ListOfPointRepresentation)
BRep_ListOfPointRepresentation_swigregister = _BRep.BRep_ListOfPointRepresentation_swigregister
BRep_ListOfPointRepresentation_swigregister(BRep_ListOfPointRepresentation)

class BRep_ListIteratorOfListOfPointRepresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRep.BRep_ListIteratorOfListOfPointRepresentation_swiginit(self, _BRep.new_BRep_ListIteratorOfListOfPointRepresentation(*args))
    __swig_destroy__ = _BRep.delete_BRep_ListIteratorOfListOfPointRepresentation
BRep_ListIteratorOfListOfPointRepresentation.More = new_instancemethod(_BRep.BRep_ListIteratorOfListOfPointRepresentation_More, None, BRep_ListIteratorOfListOfPointRepresentation)
BRep_ListIteratorOfListOfPointRepresentation.Next = new_instancemethod(_BRep.BRep_ListIteratorOfListOfPointRepresentation_Next, None, BRep_ListIteratorOfListOfPointRepresentation)
BRep_ListIteratorOfListOfPointRepresentation.Value = new_instancemethod(_BRep.BRep_ListIteratorOfListOfPointRepresentation_Value, None, BRep_ListIteratorOfListOfPointRepresentation)
BRep_ListIteratorOfListOfPointRepresentation.ChangeValue = new_instancemethod(_BRep.BRep_ListIteratorOfListOfPointRepresentation_ChangeValue, None, BRep_ListIteratorOfListOfPointRepresentation)
BRep_ListIteratorOfListOfPointRepresentation_swigregister = _BRep.BRep_ListIteratorOfListOfPointRepresentation_swigregister
BRep_ListIteratorOfListOfPointRepresentation_swigregister(BRep_ListIteratorOfListOfPointRepresentation)

class BRep_ListOfCurveRepresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRep.BRep_ListOfCurveRepresentation_swiginit(self, _BRep.new_BRep_ListOfCurveRepresentation(*args))
    __swig_destroy__ = _BRep.delete_BRep_ListOfCurveRepresentation
BRep_ListOfCurveRepresentation.begin = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_begin, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.end = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_end, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.cbegin = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_cbegin, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.cend = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_cend, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Size = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Size, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Assign = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Assign, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Set = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Set, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Clear = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Clear, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.First = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_First, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Last = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Last, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Append = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Append, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Prepend = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Prepend, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.RemoveFirst = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_RemoveFirst, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Remove = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Remove, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.InsertBefore = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_InsertBefore, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.InsertAfter = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_InsertAfter, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation.Reverse = new_instancemethod(_BRep.BRep_ListOfCurveRepresentation_Reverse, None, BRep_ListOfCurveRepresentation)
BRep_ListOfCurveRepresentation_swigregister = _BRep.BRep_ListOfCurveRepresentation_swigregister
BRep_ListOfCurveRepresentation_swigregister(BRep_ListOfCurveRepresentation)

class BRep_ListIteratorOfListOfCurveRepresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRep.BRep_ListIteratorOfListOfCurveRepresentation_swiginit(self, _BRep.new_BRep_ListIteratorOfListOfCurveRepresentation(*args))
    __swig_destroy__ = _BRep.delete_BRep_ListIteratorOfListOfCurveRepresentation
BRep_ListIteratorOfListOfCurveRepresentation.More = new_instancemethod(_BRep.BRep_ListIteratorOfListOfCurveRepresentation_More, None, BRep_ListIteratorOfListOfCurveRepresentation)
BRep_ListIteratorOfListOfCurveRepresentation.Next = new_instancemethod(_BRep.BRep_ListIteratorOfListOfCurveRepresentation_Next, None, BRep_ListIteratorOfListOfCurveRepresentation)
BRep_ListIteratorOfListOfCurveRepresentation.Value = new_instancemethod(_BRep.BRep_ListIteratorOfListOfCurveRepresentation_Value, None, BRep_ListIteratorOfListOfCurveRepresentation)
BRep_ListIteratorOfListOfCurveRepresentation.ChangeValue = new_instancemethod(_BRep.BRep_ListIteratorOfListOfCurveRepresentation_ChangeValue, None, BRep_ListIteratorOfListOfCurveRepresentation)
BRep_ListIteratorOfListOfCurveRepresentation_swigregister = _BRep.BRep_ListIteratorOfListOfCurveRepresentation_swigregister
BRep_ListIteratorOfListOfCurveRepresentation_swigregister(BRep_ListIteratorOfListOfCurveRepresentation)

class BRep_Builder(OCC.Core.TopoDS.TopoDS_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Continuity(self, *args) -> "void":
        """
        * Sets the geometric continuity on the edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:param C:
        	:type C: GeomAbs_Shape
        	:rtype: None
        * Sets the geometric continuity on the edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:param L1:
        	:type L1: TopLoc_Location
        	:param L2:
        	:type L2: TopLoc_Location
        	:param C:
        	:type C: GeomAbs_Shape
        	:rtype: None
        """
        return _BRep.BRep_Builder_Continuity(self, *args)


    def Degenerated(self, *args) -> "void":
        """
        * Sets the degenerated flag for the edge <E>.
        	:param E:
        	:type E: TopoDS_Edge
        	:param D:
        	:type D: bool
        	:rtype: None
        """
        return _BRep.BRep_Builder_Degenerated(self, *args)


    def MakeEdge(self, *args) -> "void":
        """
        * Makes an undefined Edge (no geometry).
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        * Makes an Edge with a curve.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Geom_Curve
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Makes an Edge with a curve and a location.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Geom_Curve
        	:param L:
        	:type L: TopLoc_Location
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Makes an Edge with a polygon 3d.
        	:param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: Poly_Polygon3D
        	:rtype: None
        * makes an Edge polygon on Triangulation.
        	:param E:
        	:type E: TopoDS_Edge
        	:param N:
        	:type N: Poly_PolygonOnTriangulation
        	:param T:
        	:type T: Poly_Triangulation
        	:rtype: None
        * makes an Edge polygon on Triangulation.
        	:param E:
        	:type E: TopoDS_Edge
        	:param N:
        	:type N: Poly_PolygonOnTriangulation
        	:param T:
        	:type T: Poly_Triangulation
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        return _BRep.BRep_Builder_MakeEdge(self, *args)


    def MakeFace(self, *args) -> "void":
        """
        * Makes an undefined Face.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        * Makes a Face with a surface.
        	:param F:
        	:type F: TopoDS_Face
        	:param S:
        	:type S: Geom_Surface
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Makes a Face with a surface and a location.
        	:param F:
        	:type F: TopoDS_Face
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Makes a Face with a triangulation. The triangulation is in the same reference system than the TFace.
        	:param F:
        	:type F: TopoDS_Face
        	:param T:
        	:type T: Poly_Triangulation
        	:rtype: None
        """
        return _BRep.BRep_Builder_MakeFace(self, *args)


    def MakeVertex(self, *args) -> "void":
        """
        * Makes an udefined vertex without geometry.
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        * Makes a vertex from a 3D point.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P:
        	:type P: gp_Pnt
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _BRep.BRep_Builder_MakeVertex(self, *args)


    def NaturalRestriction(self, *args) -> "void":
        """
        * Sets the NaturalRestriction flag of the face.
        	:param F:
        	:type F: TopoDS_Face
        	:param N:
        	:type N: bool
        	:rtype: None
        """
        return _BRep.BRep_Builder_NaturalRestriction(self, *args)


    def Range(self, *args) -> "void":
        """
        * Sets the range of the 3d curve if Only3d=True, otherwise sets the range to all the representations
        	:param E:
        	:type E: TopoDS_Edge
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Only3d: default value is Standard_False
        	:type Only3d: bool
        	:rtype: None
        * Sets the range of the edge on the pcurve on the surface.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        * Sets the range of the edge on the pcurve on the face.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        """
        return _BRep.BRep_Builder_Range(self, *args)


    def SameParameter(self, *args) -> "void":
        """
        * Sets the same parameter flag for the edge <E>.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: bool
        	:rtype: None
        """
        return _BRep.BRep_Builder_SameParameter(self, *args)


    def SameRange(self, *args) -> "void":
        """
        * Sets the same range flag for the edge <E>.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: bool
        	:rtype: None
        """
        return _BRep.BRep_Builder_SameRange(self, *args)


    def Transfert(self, *args) -> "void":
        """
        * Add to <Eout> the geometric representations of <Ein>.
        	:param Ein:
        	:type Ein: TopoDS_Edge
        	:param Eout:
        	:type Eout: TopoDS_Edge
        	:rtype: None
        * Transfert the parameters of Vin on Ein as the parameter of Vout on Eout.
        	:param Ein:
        	:type Ein: TopoDS_Edge
        	:param Eout:
        	:type Eout: TopoDS_Edge
        	:param Vin:
        	:type Vin: TopoDS_Vertex
        	:param Vout:
        	:type Vout: TopoDS_Vertex
        	:rtype: None
        """
        return _BRep.BRep_Builder_Transfert(self, *args)


    def UpdateEdge(self, *args) -> "void":
        """
        * Sets a 3D curve for the edge. If <C> is a null handle, remove any existing 3d curve.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Geom_Curve
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Sets a 3D curve for the edge. If <C> is a null handle, remove any existing 3d curve.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Geom_Curve
        	:param L:
        	:type L: TopLoc_Location
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Sets a pcurve for the edge on the face. If <C> is a null handle, remove any existing pcurve.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Geom2d_Curve
        	:param F:
        	:type F: TopoDS_Face
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Sets pcurves for the edge on the closed face. If <C1> or <C2> is a null handle, remove any existing pcurve.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C1:
        	:type C1: Geom2d_Curve
        	:param C2:
        	:type C2: Geom2d_Curve
        	:param F:
        	:type F: TopoDS_Face
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Sets a pcurve for the edge on the face. If <C> is a null handle, remove any existing pcurve.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Sets a pcurve for the edge on the face. If <C> is a null handle, remove any existing pcurve. Sets UV bounds for curve repsentation
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param Tol:
        	:type Tol: float
        	:param Pf:
        	:type Pf: gp_Pnt2d
        	:param Pl:
        	:type Pl: gp_Pnt2d
        	:rtype: None
        * Sets pcurves for the edge on the closed surface. <C1> or <C2> is a null handle, remove any existing pcurve.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C1:
        	:type C1: Geom2d_Curve
        	:param C2:
        	:type C2: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Sets pcurves for the edge on the closed surface. <C1> or <C2> is a null handle, remove any existing pcurve. Sets UV bounds for curve repsentation
        	:param E:
        	:type E: TopoDS_Edge
        	:param C1:
        	:type C1: Geom2d_Curve
        	:param C2:
        	:type C2: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param Tol:
        	:type Tol: float
        	:param Pf:
        	:type Pf: gp_Pnt2d
        	:param Pl:
        	:type Pl: gp_Pnt2d
        	:rtype: None
        * Changes an Edge 3D polygon. A null Polygon removes the 3d Polygon.
        	:param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: Poly_Polygon3D
        	:rtype: None
        * Changes an Edge 3D polygon. A null Polygon removes the 3d Polygon.
        	:param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: Poly_Polygon3D
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        * Changes an Edge polygon on Triangulation.
        	:param E:
        	:type E: TopoDS_Edge
        	:param N:
        	:type N: Poly_PolygonOnTriangulation
        	:param T:
        	:type T: Poly_Triangulation
        	:rtype: None
        * Changes an Edge polygon on Triangulation.
        	:param E:
        	:type E: TopoDS_Edge
        	:param N:
        	:type N: Poly_PolygonOnTriangulation
        	:param T:
        	:type T: Poly_Triangulation
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        * Changes an Edge polygon on Triangulation.
        	:param E:
        	:type E: TopoDS_Edge
        	:param N1:
        	:type N1: Poly_PolygonOnTriangulation
        	:param N2:
        	:type N2: Poly_PolygonOnTriangulation
        	:param T:
        	:type T: Poly_Triangulation
        	:rtype: None
        * Changes an Edge polygon on Triangulation.
        	:param E:
        	:type E: TopoDS_Edge
        	:param N1:
        	:type N1: Poly_PolygonOnTriangulation
        	:param N2:
        	:type N2: Poly_PolygonOnTriangulation
        	:param T:
        	:type T: Poly_Triangulation
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        * Changes Edge polygon on a face.
        	:param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: Poly_Polygon2D
        	:param S:
        	:type S: TopoDS_Face
        	:rtype: None
        * Changes Edge polygon on a face.
        	:param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: Poly_Polygon2D
        	:param S:
        	:type S: Geom_Surface
        	:param T:
        	:type T: TopLoc_Location
        	:rtype: None
        * Changes Edge polygons on a face. //! A null Polygon removes the 2d Polygon.
        	:param E:
        	:type E: TopoDS_Edge
        	:param P1:
        	:type P1: Poly_Polygon2D
        	:param P2:
        	:type P2: Poly_Polygon2D
        	:param S:
        	:type S: TopoDS_Face
        	:rtype: None
        * Changes Edge polygons on a face. //! A null Polygon removes the 2d Polygon.
        	:param E:
        	:type E: TopoDS_Edge
        	:param P1:
        	:type P1: Poly_Polygon2D
        	:param P2:
        	:type P2: Poly_Polygon2D
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        * Updates the edge tolerance.
        	:param E:
        	:type E: TopoDS_Edge
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _BRep.BRep_Builder_UpdateEdge(self, *args)


    def UpdateFace(self, *args) -> "void":
        """
        * Updates the face F using the tolerance value Tol, surface S and location Location.
        	:param F:
        	:type F: TopoDS_Face
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Changes a face triangulation. //! A null Triangulation removes the triangulation.
        	:param F:
        	:type F: TopoDS_Face
        	:param T:
        	:type T: Poly_Triangulation
        	:rtype: None
        * Updates the face Tolerance.
        	:param F:
        	:type F: TopoDS_Face
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _BRep.BRep_Builder_UpdateFace(self, *args)


    def UpdateVertex(self, *args) -> "void":
        """
        * Sets a 3D point on the vertex.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P:
        	:type P: gp_Pnt
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Sets the parameter for the vertex on the edge curves.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P:
        	:type P: float
        	:param E:
        	:type E: TopoDS_Edge
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Sets the parameter for the vertex on the edge pcurve on the face.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P:
        	:type P: float
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Sets the parameter for the vertex on the edge pcurve on the surface.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P:
        	:type P: float
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Sets the parameters for the vertex on the face.
        	:param Ve:
        	:type Ve: TopoDS_Vertex
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param F:
        	:type F: TopoDS_Face
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Updates the vertex tolerance.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _BRep.BRep_Builder_UpdateVertex(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        _BRep.BRep_Builder_swiginit(self, _BRep.new_BRep_Builder())
    __swig_destroy__ = _BRep.delete_BRep_Builder
BRep_Builder.Continuity = new_instancemethod(_BRep.BRep_Builder_Continuity, None, BRep_Builder)
BRep_Builder.Degenerated = new_instancemethod(_BRep.BRep_Builder_Degenerated, None, BRep_Builder)
BRep_Builder.MakeEdge = new_instancemethod(_BRep.BRep_Builder_MakeEdge, None, BRep_Builder)
BRep_Builder.MakeFace = new_instancemethod(_BRep.BRep_Builder_MakeFace, None, BRep_Builder)
BRep_Builder.MakeVertex = new_instancemethod(_BRep.BRep_Builder_MakeVertex, None, BRep_Builder)
BRep_Builder.NaturalRestriction = new_instancemethod(_BRep.BRep_Builder_NaturalRestriction, None, BRep_Builder)
BRep_Builder.Range = new_instancemethod(_BRep.BRep_Builder_Range, None, BRep_Builder)
BRep_Builder.SameParameter = new_instancemethod(_BRep.BRep_Builder_SameParameter, None, BRep_Builder)
BRep_Builder.SameRange = new_instancemethod(_BRep.BRep_Builder_SameRange, None, BRep_Builder)
BRep_Builder.Transfert = new_instancemethod(_BRep.BRep_Builder_Transfert, None, BRep_Builder)
BRep_Builder.UpdateEdge = new_instancemethod(_BRep.BRep_Builder_UpdateEdge, None, BRep_Builder)
BRep_Builder.UpdateFace = new_instancemethod(_BRep.BRep_Builder_UpdateFace, None, BRep_Builder)
BRep_Builder.UpdateVertex = new_instancemethod(_BRep.BRep_Builder_UpdateVertex, None, BRep_Builder)
BRep_Builder_swigregister = _BRep.BRep_Builder_swigregister
BRep_Builder_swigregister(BRep_Builder)

class BRep_CurveRepresentation(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Continuity(self, *args) -> "void":
        """
        :rtype: GeomAbs_Shape
        :param C:
        	:type C: GeomAbs_Shape
        	:rtype: void
        """
        return _BRep.BRep_CurveRepresentation_Continuity(self, *args)


    def Copy(self, *args) -> "opencascade::handle< BRep_CurveRepresentation >":
        """
        * Return a copy of this representation.
        	:rtype: opencascade::handle<BRep_CurveRepresentation>
        """
        return _BRep.BRep_CurveRepresentation_Copy(self, *args)


    def Curve3D(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom_Curve>
        :param C:
        	:type C: Geom_Curve
        	:rtype: void
        """
        return _BRep.BRep_CurveRepresentation_Curve3D(self, *args)


    def IsCurve3D(self, *args) -> "Standard_Boolean":
        """
        * A 3D curve representation.
        	:rtype: bool
        """
        return _BRep.BRep_CurveRepresentation_IsCurve3D(self, *args)


    def IsCurveOnClosedSurface(self, *args) -> "Standard_Boolean":
        """
        * A curve with two parametric curves on the same surface.
        	:rtype: bool
        """
        return _BRep.BRep_CurveRepresentation_IsCurveOnClosedSurface(self, *args)


    def IsCurveOnSurface(self, *args) -> "Standard_Boolean":
        """
        * A curve in the parametric space of a surface.
        	:rtype: bool
        * Is it a curve in the parametric space of <S> with location <L>.
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_CurveRepresentation_IsCurveOnSurface(self, *args)


    def IsPolygon3D(self, *args) -> "Standard_Boolean":
        """
        * A 3D polygon representation.
        	:rtype: bool
        """
        return _BRep.BRep_CurveRepresentation_IsPolygon3D(self, *args)


    def IsPolygonOnClosedSurface(self, *args) -> "Standard_Boolean":
        """
        * Two 2D polygon representations in the parametric space of a surface.
        	:rtype: bool
        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnClosedSurface(self, *args)


    def IsPolygonOnClosedTriangulation(self, *args) -> "Standard_Boolean":
        """
        * A representation by two arrays of nodes on a triangulation.
        	:rtype: bool
        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnClosedTriangulation(self, *args)


    def IsPolygonOnSurface(self, *args) -> "Standard_Boolean":
        """
        * A polygon in the parametric space of a surface.
        	:rtype: bool
        * Is it a polygon in the parametric space of <S> with location <L>.
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnSurface(self, *args)


    def IsPolygonOnTriangulation(self, *args) -> "Standard_Boolean":
        """
        * A representation by an array of nodes on a triangulation.
        	:rtype: bool
        * Is it a polygon in the definition of <T> with location <L>.
        	:param T:
        	:type T: Poly_Triangulation
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnTriangulation(self, *args)


    def IsRegularity(self, *args) -> "Standard_Boolean":
        """
        * A continuity between two surfaces.
        	:rtype: bool
        * Is it a regularity between <S1> and <S2> with location <L1> and <L2>.
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:param L1:
        	:type L1: TopLoc_Location
        	:param L2:
        	:type L2: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_CurveRepresentation_IsRegularity(self, *args)


    def Location(self, *args) -> "void":
        """
        :rtype: TopLoc_Location
        :param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        return _BRep.BRep_CurveRepresentation_Location(self, *args)


    def Location2(self, *args) -> "TopLoc_Location const &":
        """:rtype: TopLoc_Location"""
        return _BRep.BRep_CurveRepresentation_Location2(self, *args)


    def PCurve(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom2d_Curve>
        :param C:
        	:type C: Geom2d_Curve
        	:rtype: void
        """
        return _BRep.BRep_CurveRepresentation_PCurve(self, *args)


    def PCurve2(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom2d_Curve>
        :param C:
        	:type C: Geom2d_Curve
        	:rtype: void
        """
        return _BRep.BRep_CurveRepresentation_PCurve2(self, *args)


    def Polygon(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Poly_Polygon2D>
        :param P:
        	:type P: Poly_Polygon2D
        	:rtype: void
        """
        return _BRep.BRep_CurveRepresentation_Polygon(self, *args)


    def Polygon2(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Poly_Polygon2D>
        :param P:
        	:type P: Poly_Polygon2D
        	:rtype: void
        """
        return _BRep.BRep_CurveRepresentation_Polygon2(self, *args)


    def Polygon3D(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Poly_Polygon3D>
        :param P:
        	:type P: Poly_Polygon3D
        	:rtype: void
        """
        return _BRep.BRep_CurveRepresentation_Polygon3D(self, *args)


    def PolygonOnTriangulation(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Poly_PolygonOnTriangulation>
        :param P:
        	:type P: Poly_PolygonOnTriangulation
        	:rtype: void
        """
        return _BRep.BRep_CurveRepresentation_PolygonOnTriangulation(self, *args)


    def PolygonOnTriangulation2(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Poly_PolygonOnTriangulation>
        :param P2:
        	:type P2: Poly_PolygonOnTriangulation
        	:rtype: void
        """
        return _BRep.BRep_CurveRepresentation_PolygonOnTriangulation2(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Geom_Surface > const &":
        """:rtype: opencascade::handle<Geom_Surface>"""
        return _BRep.BRep_CurveRepresentation_Surface(self, *args)


    def Surface2(self, *args) -> "opencascade::handle< Geom_Surface > const &":
        """:rtype: opencascade::handle<Geom_Surface>"""
        return _BRep.BRep_CurveRepresentation_Surface2(self, *args)


    def Triangulation(self, *args) -> "opencascade::handle< Poly_Triangulation > const &":
        """:rtype: opencascade::handle<Poly_Triangulation>"""
        return _BRep.BRep_CurveRepresentation_Triangulation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_CurveRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_CurveRepresentation
BRep_CurveRepresentation.Continuity = new_instancemethod(_BRep.BRep_CurveRepresentation_Continuity, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.Copy = new_instancemethod(_BRep.BRep_CurveRepresentation_Copy, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.Curve3D = new_instancemethod(_BRep.BRep_CurveRepresentation_Curve3D, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.IsCurve3D = new_instancemethod(_BRep.BRep_CurveRepresentation_IsCurve3D, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.IsCurveOnClosedSurface = new_instancemethod(_BRep.BRep_CurveRepresentation_IsCurveOnClosedSurface, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.IsCurveOnSurface = new_instancemethod(_BRep.BRep_CurveRepresentation_IsCurveOnSurface, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.IsPolygon3D = new_instancemethod(_BRep.BRep_CurveRepresentation_IsPolygon3D, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.IsPolygonOnClosedSurface = new_instancemethod(_BRep.BRep_CurveRepresentation_IsPolygonOnClosedSurface, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.IsPolygonOnClosedTriangulation = new_instancemethod(_BRep.BRep_CurveRepresentation_IsPolygonOnClosedTriangulation, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.IsPolygonOnSurface = new_instancemethod(_BRep.BRep_CurveRepresentation_IsPolygonOnSurface, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.IsPolygonOnTriangulation = new_instancemethod(_BRep.BRep_CurveRepresentation_IsPolygonOnTriangulation, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.IsRegularity = new_instancemethod(_BRep.BRep_CurveRepresentation_IsRegularity, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.Location = new_instancemethod(_BRep.BRep_CurveRepresentation_Location, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.Location2 = new_instancemethod(_BRep.BRep_CurveRepresentation_Location2, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.PCurve = new_instancemethod(_BRep.BRep_CurveRepresentation_PCurve, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.PCurve2 = new_instancemethod(_BRep.BRep_CurveRepresentation_PCurve2, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.Polygon = new_instancemethod(_BRep.BRep_CurveRepresentation_Polygon, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.Polygon2 = new_instancemethod(_BRep.BRep_CurveRepresentation_Polygon2, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.Polygon3D = new_instancemethod(_BRep.BRep_CurveRepresentation_Polygon3D, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.PolygonOnTriangulation = new_instancemethod(_BRep.BRep_CurveRepresentation_PolygonOnTriangulation, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.PolygonOnTriangulation2 = new_instancemethod(_BRep.BRep_CurveRepresentation_PolygonOnTriangulation2, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.Surface = new_instancemethod(_BRep.BRep_CurveRepresentation_Surface, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.Surface2 = new_instancemethod(_BRep.BRep_CurveRepresentation_Surface2, None, BRep_CurveRepresentation)
BRep_CurveRepresentation.Triangulation = new_instancemethod(_BRep.BRep_CurveRepresentation_Triangulation, None, BRep_CurveRepresentation)
BRep_CurveRepresentation_swigregister = _BRep.BRep_CurveRepresentation_swigregister
BRep_CurveRepresentation_swigregister(BRep_CurveRepresentation)

class BRep_PointRepresentation(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Curve(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom_Curve>
        :param C:
        	:type C: Geom_Curve
        	:rtype: void
        """
        return _BRep.BRep_PointRepresentation_Curve(self, *args)


    def IsPointOnCurve(self, *args) -> "Standard_Boolean":
        """
        * A point on a 3d curve.
        	:rtype: bool
        * A point on the curve <C>.
        	:param C:
        	:type C: Geom_Curve
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_PointRepresentation_IsPointOnCurve(self, *args)


    def IsPointOnCurveOnSurface(self, *args) -> "Standard_Boolean":
        """
        * A point on a 2d curve on a surface.
        	:rtype: bool
        * A point on the 2d curve <PC> on the surface <S>.
        	:param PC:
        	:type PC: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_PointRepresentation_IsPointOnCurveOnSurface(self, *args)


    def IsPointOnSurface(self, *args) -> "Standard_Boolean":
        """
        * A point on a surface.
        	:rtype: bool
        * A point on the surface <S>.
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_PointRepresentation_IsPointOnSurface(self, *args)


    def Location(self, *args) -> "void":
        """
        :rtype: TopLoc_Location
        :param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        return _BRep.BRep_PointRepresentation_Location(self, *args)


    def PCurve(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom2d_Curve>
        :param C:
        	:type C: Geom2d_Curve
        	:rtype: void
        """
        return _BRep.BRep_PointRepresentation_PCurve(self, *args)


    def Parameter(self, *args) -> "void":
        """
        :rtype: float
        :param P:
        	:type P: float
        	:rtype: None
        """
        return _BRep.BRep_PointRepresentation_Parameter(self, *args)


    def Parameter2(self, *args) -> "void":
        """
        :rtype: float
        :param P:
        	:type P: float
        	:rtype: void
        """
        return _BRep.BRep_PointRepresentation_Parameter2(self, *args)


    def Surface(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom_Surface>
        :param S:
        	:type S: Geom_Surface
        	:rtype: void
        """
        return _BRep.BRep_PointRepresentation_Surface(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PointRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PointRepresentation
BRep_PointRepresentation.Curve = new_instancemethod(_BRep.BRep_PointRepresentation_Curve, None, BRep_PointRepresentation)
BRep_PointRepresentation.IsPointOnCurve = new_instancemethod(_BRep.BRep_PointRepresentation_IsPointOnCurve, None, BRep_PointRepresentation)
BRep_PointRepresentation.IsPointOnCurveOnSurface = new_instancemethod(_BRep.BRep_PointRepresentation_IsPointOnCurveOnSurface, None, BRep_PointRepresentation)
BRep_PointRepresentation.IsPointOnSurface = new_instancemethod(_BRep.BRep_PointRepresentation_IsPointOnSurface, None, BRep_PointRepresentation)
BRep_PointRepresentation.Location = new_instancemethod(_BRep.BRep_PointRepresentation_Location, None, BRep_PointRepresentation)
BRep_PointRepresentation.PCurve = new_instancemethod(_BRep.BRep_PointRepresentation_PCurve, None, BRep_PointRepresentation)
BRep_PointRepresentation.Parameter = new_instancemethod(_BRep.BRep_PointRepresentation_Parameter, None, BRep_PointRepresentation)
BRep_PointRepresentation.Parameter2 = new_instancemethod(_BRep.BRep_PointRepresentation_Parameter2, None, BRep_PointRepresentation)
BRep_PointRepresentation.Surface = new_instancemethod(_BRep.BRep_PointRepresentation_Surface, None, BRep_PointRepresentation)
BRep_PointRepresentation_swigregister = _BRep.BRep_PointRepresentation_swigregister
BRep_PointRepresentation_swigregister(BRep_PointRepresentation)

class BRep_TEdge(OCC.Core.TopoDS.TopoDS_TEdge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty TEdge.
        	:rtype: None
        """
        _BRep.BRep_TEdge_swiginit(self, _BRep.new_BRep_TEdge(*args))

    def ChangeCurves(self, *args) -> "BRep_ListOfCurveRepresentation &":
        """:rtype: BRep_ListOfCurveRepresentation"""
        return _BRep.BRep_TEdge_ChangeCurves(self, *args)


    def Curves(self, *args) -> "BRep_ListOfCurveRepresentation const &":
        """:rtype: BRep_ListOfCurveRepresentation"""
        return _BRep.BRep_TEdge_Curves(self, *args)


    def Degenerated(self, *args) -> "void":
        """
        :rtype: bool
        :param S:
        	:type S: bool
        	:rtype: None
        """
        return _BRep.BRep_TEdge_Degenerated(self, *args)


    def SameParameter(self, *args) -> "void":
        """
        :rtype: bool
        :param S:
        	:type S: bool
        	:rtype: None
        """
        return _BRep.BRep_TEdge_SameParameter(self, *args)


    def SameRange(self, *args) -> "void":
        """
        :rtype: bool
        :param S:
        	:type S: bool
        	:rtype: None
        """
        return _BRep.BRep_TEdge_SameRange(self, *args)


    def Tolerance(self, *args) -> "void":
        """
        :rtype: float
        :param T:
        	:type T: float
        	:rtype: None
        """
        return _BRep.BRep_TEdge_Tolerance(self, *args)


    def UpdateTolerance(self, *args) -> "void":
        """
        * Sets the tolerance to the max of <T> and the current tolerance.
        	:param T:
        	:type T: float
        	:rtype: None
        """
        return _BRep.BRep_TEdge_UpdateTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_TEdge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_TEdge
BRep_TEdge.ChangeCurves = new_instancemethod(_BRep.BRep_TEdge_ChangeCurves, None, BRep_TEdge)
BRep_TEdge.Curves = new_instancemethod(_BRep.BRep_TEdge_Curves, None, BRep_TEdge)
BRep_TEdge.Degenerated = new_instancemethod(_BRep.BRep_TEdge_Degenerated, None, BRep_TEdge)
BRep_TEdge.SameParameter = new_instancemethod(_BRep.BRep_TEdge_SameParameter, None, BRep_TEdge)
BRep_TEdge.SameRange = new_instancemethod(_BRep.BRep_TEdge_SameRange, None, BRep_TEdge)
BRep_TEdge.Tolerance = new_instancemethod(_BRep.BRep_TEdge_Tolerance, None, BRep_TEdge)
BRep_TEdge.UpdateTolerance = new_instancemethod(_BRep.BRep_TEdge_UpdateTolerance, None, BRep_TEdge)
BRep_TEdge_swigregister = _BRep.BRep_TEdge_swigregister
BRep_TEdge_swigregister(BRep_TEdge)

class BRep_TFace(OCC.Core.TopoDS.TopoDS_TFace):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty TFace.
        	:rtype: None
        """
        _BRep.BRep_TFace_swiginit(self, _BRep.new_BRep_TFace(*args))

    def Location(self, *args) -> "void":
        """
        :rtype: TopLoc_Location
        :param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        return _BRep.BRep_TFace_Location(self, *args)


    def NaturalRestriction(self, *args) -> "void":
        """
        :rtype: bool
        :param N:
        	:type N: bool
        	:rtype: None
        """
        return _BRep.BRep_TFace_NaturalRestriction(self, *args)


    def Surface(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom_Surface>
        :param S:
        	:type S: Geom_Surface
        	:rtype: None
        """
        return _BRep.BRep_TFace_Surface(self, *args)


    def Tolerance(self, *args) -> "void":
        """
        :rtype: float
        :param T:
        	:type T: float
        	:rtype: None
        """
        return _BRep.BRep_TFace_Tolerance(self, *args)


    def Triangulation(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Poly_Triangulation>
        :param T:
        	:type T: Poly_Triangulation
        	:rtype: None
        """
        return _BRep.BRep_TFace_Triangulation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_TFace_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_TFace
BRep_TFace.Location = new_instancemethod(_BRep.BRep_TFace_Location, None, BRep_TFace)
BRep_TFace.NaturalRestriction = new_instancemethod(_BRep.BRep_TFace_NaturalRestriction, None, BRep_TFace)
BRep_TFace.Surface = new_instancemethod(_BRep.BRep_TFace_Surface, None, BRep_TFace)
BRep_TFace.Tolerance = new_instancemethod(_BRep.BRep_TFace_Tolerance, None, BRep_TFace)
BRep_TFace.Triangulation = new_instancemethod(_BRep.BRep_TFace_Triangulation, None, BRep_TFace)
BRep_TFace_swigregister = _BRep.BRep_TFace_swigregister
BRep_TFace_swigregister(BRep_TFace)

class BRep_TVertex(OCC.Core.TopoDS.TopoDS_TVertex):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _BRep.BRep_TVertex_swiginit(self, _BRep.new_BRep_TVertex(*args))

    def ChangePoints(self, *args) -> "BRep_ListOfPointRepresentation &":
        """:rtype: BRep_ListOfPointRepresentation"""
        return _BRep.BRep_TVertex_ChangePoints(self, *args)


    def Pnt(self, *args) -> "void":
        """
        :rtype: gp_Pnt
        :param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _BRep.BRep_TVertex_Pnt(self, *args)


    def Points(self, *args) -> "BRep_ListOfPointRepresentation const &":
        """:rtype: BRep_ListOfPointRepresentation"""
        return _BRep.BRep_TVertex_Points(self, *args)


    def Tolerance(self, *args) -> "void":
        """
        :rtype: float
        :param T:
        	:type T: float
        	:rtype: None
        """
        return _BRep.BRep_TVertex_Tolerance(self, *args)


    def UpdateTolerance(self, *args) -> "void":
        """
        * Sets the tolerance to the max of <T> and the current tolerance.
        	:param T:
        	:type T: float
        	:rtype: None
        """
        return _BRep.BRep_TVertex_UpdateTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_TVertex_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_TVertex
BRep_TVertex.ChangePoints = new_instancemethod(_BRep.BRep_TVertex_ChangePoints, None, BRep_TVertex)
BRep_TVertex.Pnt = new_instancemethod(_BRep.BRep_TVertex_Pnt, None, BRep_TVertex)
BRep_TVertex.Points = new_instancemethod(_BRep.BRep_TVertex_Points, None, BRep_TVertex)
BRep_TVertex.Tolerance = new_instancemethod(_BRep.BRep_TVertex_Tolerance, None, BRep_TVertex)
BRep_TVertex.UpdateTolerance = new_instancemethod(_BRep.BRep_TVertex_UpdateTolerance, None, BRep_TVertex)
BRep_TVertex_swigregister = _BRep.BRep_TVertex_swigregister
BRep_TVertex_swigregister(BRep_TVertex)

class BRep_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Continuity(*args) -> "GeomAbs_Shape":
        """
        * Returns the continuity.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: GeomAbs_Shape
        * Returns the continuity.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:param L1:
        	:type L1: TopLoc_Location
        	:param L2:
        	:type L2: TopLoc_Location
        	:rtype: GeomAbs_Shape
        """
        return _BRep.BRep_Tool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def Curve(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Returns the 3D curve of the edge. May be a Null handle. Returns in <L> the location for the curve. In <First> and <Last> the parameter range.
        	:param E:
        	:type E: TopoDS_Edge
        	:param L:
        	:type L: TopLoc_Location
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: opencascade::handle<Geom_Curve>
        * Returns the 3D curve of the edge. May be a Null handle. In <First> and <Last> the parameter range. It can be a copy if there is a Location.
        	:param E:
        	:type E: TopoDS_Edge
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _BRep.BRep_Tool_Curve(*args)

    Curve = staticmethod(Curve)

    def CurveOnPlane(*args) -> "Standard_Real &, Standard_Real &":
        """
        * For the planar surface builds the 2d curve for the edge by projection of the edge on plane. Returns a NULL handle if the surface is not planar or the projection failed.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _BRep.BRep_Tool_CurveOnPlane(*args)

    CurveOnPlane = staticmethod(CurveOnPlane)

    def CurveOnSurface(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Returns the curve associated to the edge in the parametric space of the face. Returns a NULL handle if this curve does not exist. Returns in <First> and <Last> the parameter range. If the surface is a plane the curve can be not stored but created a new each time. The flag pointed by <theIsStored> serves to indicate storage status. It is valued if the pointer is non-null.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param theIsStored: default value is NULL
        	:type theIsStored: bool *
        	:rtype: opencascade::handle<Geom2d_Curve>
        * Returns the curve associated to the edge in the parametric space of the surface. Returns a NULL handle if this curve does not exist. Returns in <First> and <Last> the parameter range. If the surface is a plane the curve can be not stored but created a new each time. The flag pointed by <theIsStored> serves to indicate storage status. It is valued if the pointer is non-null.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param theIsStored: default value is NULL
        	:type theIsStored: bool *
        	:rtype: opencascade::handle<Geom2d_Curve>
        * Returns in <C>, <S>, <L> a 2d curve, a surface and a location for the edge <E>. <C> and <S> are null if the edge has no curve on surface. Returns in <First> and <Last> the parameter range.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: void
        * Returns in <C>, <S>, <L> the 2d curve, the surface and the location for the edge <E> of rank <Index>. <C> and <S> are null if the index is out of range. Returns in <First> and <Last> the parameter range.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Index:
        	:type Index: int
        	:rtype: void
        """
        return _BRep.BRep_Tool_CurveOnSurface(*args)

    CurveOnSurface = staticmethod(CurveOnSurface)

    def Degenerated(*args) -> "Standard_Boolean":
        """
        * Returns True if the edge is degenerated.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _BRep.BRep_Tool_Degenerated(*args)

    Degenerated = staticmethod(Degenerated)

    def HasContinuity(*args) -> "Standard_Boolean":
        """
        * Returns True if the edge is on the surfaces of the two faces.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: bool
        * Returns True if the edge is on the surfaces.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:param L1:
        	:type L1: TopLoc_Location
        	:param L2:
        	:type L2: TopLoc_Location
        	:rtype: bool
        * Returns True if the edge has regularity on some two surfaces
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _BRep.BRep_Tool_HasContinuity(*args)

    HasContinuity = staticmethod(HasContinuity)

    def IsClosed(*args) -> "Standard_Boolean":
        """
        * If S is Shell, returns True if it has no free boundaries (edges). If S is Wire, returns True if it has no free ends (vertices). (Internal and External sub-shepes are ignored in these checks) If S is Edge, returns True if its vertices are the same. For other shape types returns S.Closed().
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        * Returns True if <E> has two PCurves in the parametric space of <F>. i.e. <F> is on a closed surface and <E> is on the closing curve.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        * Returns True if <E> has two PCurves in the parametric space of <S>. i.e. <S> is a closed surface and <E> is on the closing curve.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        * Returns True if <E> has two arrays of indices in the triangulation <T>.
        	:param E:
        	:type E: TopoDS_Edge
        	:param T:
        	:type T: Poly_Triangulation
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_Tool_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def IsGeometric(*args) -> "Standard_Boolean":
        """
        * Returns True if <E> is a 3d curve or a curve on surface.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _BRep.BRep_Tool_IsGeometric(*args)

    IsGeometric = staticmethod(IsGeometric)

    def MaxContinuity(*args) -> "GeomAbs_Shape":
        """
        * Returns the max continuity of edge between some surfaces or GeomAbs_C0 if there no such surfaces.
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:rtype: GeomAbs_Shape
        """
        return _BRep.BRep_Tool_MaxContinuity(*args)

    MaxContinuity = staticmethod(MaxContinuity)

    def MaxTolerance(*args) -> "Standard_Real":
        """
        * Returns the maximum tolerance of input shape subshapes.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theSubShape:
        	:type theSubShape: TopAbs_ShapeEnum
        	:rtype: float
        """
        return _BRep.BRep_Tool_MaxTolerance(*args)

    MaxTolerance = staticmethod(MaxTolerance)

    def NaturalRestriction(*args) -> "Standard_Boolean":
        """
        * Returns the NaturalRestriction flag of the face.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _BRep.BRep_Tool_NaturalRestriction(*args)

    NaturalRestriction = staticmethod(NaturalRestriction)

    def Parameter(*args) -> "Standard_Real":
        """
        * Returns the parameter of <V> on <E>.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: float
        * Returns the parameters of the vertex on the pcurve of the edge on the face.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: float
        * Returns the parameters of the vertex on the pcurve of the edge on the surface.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: float
        """
        return _BRep.BRep_Tool_Parameter(*args)

    Parameter = staticmethod(Parameter)

    def Parameters(*args) -> "gp_Pnt2d":
        """
        * Returns the parameters of the vertex on the face.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: gp_Pnt2d
        """
        return _BRep.BRep_Tool_Parameters(*args)

    Parameters = staticmethod(Parameters)

    def Pnt(*args) -> "gp_Pnt":
        """
        * Returns the 3d point.
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: gp_Pnt
        """
        return _BRep.BRep_Tool_Pnt(*args)

    Pnt = staticmethod(Pnt)

    def Polygon3D(*args) -> "opencascade::handle< Poly_Polygon3D > const &":
        """
        * Returns the 3D polygon of the edge. May be a Null handle. Returns in <L> the location for the polygon.
        	:param E:
        	:type E: TopoDS_Edge
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: opencascade::handle<Poly_Polygon3D>
        """
        return _BRep.BRep_Tool_Polygon3D(*args)

    Polygon3D = staticmethod(Polygon3D)

    def PolygonOnSurface(*args) -> "void":
        """
        * Returns the polygon associated to the edge in the parametric space of the face. Returns a NULL handle if this polygon does not exist.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: opencascade::handle<Poly_Polygon2D>
        * Returns the polygon associated to the edge in the parametric space of the surface. Returns a NULL handle if this polygon does not exist.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: opencascade::handle<Poly_Polygon2D>
        * Returns in <C>, <S>, <L> a 2d curve, a surface and a location for the edge <E>. <C> and <S> are null if the edge has no polygon on surface.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Poly_Polygon2D
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: void
        * Returns in <C>, <S>, <L> the 2d curve, the surface and the location for the edge <E> of rank <Index>. <C> and <S> are null if the index is out of range.
        	:param E:
        	:type E: TopoDS_Edge
        	:param C:
        	:type C: Poly_Polygon2D
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param Index:
        	:type Index: int
        	:rtype: void
        """
        return _BRep.BRep_Tool_PolygonOnSurface(*args)

    PolygonOnSurface = staticmethod(PolygonOnSurface)

    def PolygonOnTriangulation(*args) -> "void":
        """
        * Returns the polygon associated to the edge in the parametric space of the face. Returns a NULL handle if this polygon does not exist.
        	:param E:
        	:type E: TopoDS_Edge
        	:param T:
        	:type T: Poly_Triangulation
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: opencascade::handle<Poly_PolygonOnTriangulation>
        * Returns in <P>, <T>, <L> a polygon on triangulation, a triangulation and a location for the edge <E>. <P> and <T> are null if the edge has no polygon on triangulation.
        	:param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: Poly_PolygonOnTriangulation
        	:param T:
        	:type T: Poly_Triangulation
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: void
        * Returns in <P>, <T>, <L> a polygon on triangulation, a triangulation and a location for the edge <E> for the range index. <C> and <S> are null if the edge has no polygon on triangulation.
        	:param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: Poly_PolygonOnTriangulation
        	:param T:
        	:type T: Poly_Triangulation
        	:param L:
        	:type L: TopLoc_Location
        	:param Index:
        	:type Index: int
        	:rtype: void
        """
        return _BRep.BRep_Tool_PolygonOnTriangulation(*args)

    PolygonOnTriangulation = staticmethod(PolygonOnTriangulation)

    def Range(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Gets the range of the 3d curve.
        	:param E:
        	:type E: TopoDS_Edge
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: void
        * Gets the range of the edge on the pcurve on the surface.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: void
        * Gets the range of the edge on the pcurve on the face.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: void
        """
        return _BRep.BRep_Tool_Range(*args)

    Range = staticmethod(Range)

    def SameParameter(*args) -> "Standard_Boolean":
        """
        * Returns the SameParameter flag for the edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _BRep.BRep_Tool_SameParameter(*args)

    SameParameter = staticmethod(SameParameter)

    def SameRange(*args) -> "Standard_Boolean":
        """
        * Returns the SameRange flag for the edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _BRep.BRep_Tool_SameRange(*args)

    SameRange = staticmethod(SameRange)

    def SetUVPoints(*args) -> "void":
        """
        * Sets the UV locations of the extremities of the edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param PFirst:
        	:type PFirst: gp_Pnt2d
        	:param PLast:
        	:type PLast: gp_Pnt2d
        	:rtype: void
        * Sets the UV locations of the extremities of the edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param PFirst:
        	:type PFirst: gp_Pnt2d
        	:param PLast:
        	:type PLast: gp_Pnt2d
        	:rtype: void
        """
        return _BRep.BRep_Tool_SetUVPoints(*args)

    SetUVPoints = staticmethod(SetUVPoints)

    def Surface(*args) -> "opencascade::handle< Geom_Surface >":
        """
        * Returns the geometric surface of the face. Returns in <L> the location for the surface.
        	:param F:
        	:type F: TopoDS_Face
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: opencascade::handle<Geom_Surface>
        * Returns the geometric surface of the face. It can be a copy if there is a Location.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _BRep.BRep_Tool_Surface(*args)

    Surface = staticmethod(Surface)

    def Tolerance(*args) -> "Standard_Real":
        """
        * Returns the tolerance of the face.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: float
        * Returns the tolerance for <E>.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: float
        * Returns the tolerance.
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: float
        """
        return _BRep.BRep_Tool_Tolerance(*args)

    Tolerance = staticmethod(Tolerance)

    def Triangulation(*args) -> "opencascade::handle< Poly_Triangulation > const &":
        """
        * Returns the Triangulation of the face. It is a null handle if there is no triangulation.
        	:param F:
        	:type F: TopoDS_Face
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: opencascade::handle<Poly_Triangulation>
        """
        return _BRep.BRep_Tool_Triangulation(*args)

    Triangulation = staticmethod(Triangulation)

    def UVPoints(*args) -> "void":
        """
        * Gets the UV locations of the extremities of the edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param PFirst:
        	:type PFirst: gp_Pnt2d
        	:param PLast:
        	:type PLast: gp_Pnt2d
        	:rtype: void
        * Gets the UV locations of the extremities of the edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param PFirst:
        	:type PFirst: gp_Pnt2d
        	:param PLast:
        	:type PLast: gp_Pnt2d
        	:rtype: void
        """
        return _BRep.BRep_Tool_UVPoints(*args)

    UVPoints = staticmethod(UVPoints)

    __repr__ = _dumps_object


    def __init__(self):
        _BRep.BRep_Tool_swiginit(self, _BRep.new_BRep_Tool())
    __swig_destroy__ = _BRep.delete_BRep_Tool
BRep_Tool_swigregister = _BRep.BRep_Tool_swigregister
BRep_Tool_swigregister(BRep_Tool)

def BRep_Tool_Continuity(*args) -> "GeomAbs_Shape":
    """
    * Returns the continuity.
    	:param E:
    	:type E: TopoDS_Edge
    	:param F1:
    	:type F1: TopoDS_Face
    	:param F2:
    	:type F2: TopoDS_Face
    	:rtype: GeomAbs_Shape
    * Returns the continuity.
    	:param E:
    	:type E: TopoDS_Edge
    	:param S1:
    	:type S1: Geom_Surface
    	:param S2:
    	:type S2: Geom_Surface
    	:param L1:
    	:type L1: TopLoc_Location
    	:param L2:
    	:type L2: TopLoc_Location
    	:rtype: GeomAbs_Shape
    """
    return _BRep.BRep_Tool_Continuity(*args)

def BRep_Tool_Curve(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Returns the 3D curve of the edge. May be a Null handle. Returns in <L> the location for the curve. In <First> and <Last> the parameter range.
    	:param E:
    	:type E: TopoDS_Edge
    	:param L:
    	:type L: TopLoc_Location
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:rtype: opencascade::handle<Geom_Curve>
    * Returns the 3D curve of the edge. May be a Null handle. In <First> and <Last> the parameter range. It can be a copy if there is a Location.
    	:param E:
    	:type E: TopoDS_Edge
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:rtype: opencascade::handle<Geom_Curve>
    """
    return _BRep.BRep_Tool_Curve(*args)

def BRep_Tool_CurveOnPlane(*args) -> "Standard_Real &, Standard_Real &":
    """
    * For the planar surface builds the 2d curve for the edge by projection of the edge on plane. Returns a NULL handle if the surface is not planar or the projection failed.
    	:param E:
    	:type E: TopoDS_Edge
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:rtype: opencascade::handle<Geom2d_Curve>
    """
    return _BRep.BRep_Tool_CurveOnPlane(*args)

def BRep_Tool_CurveOnSurface(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Returns the curve associated to the edge in the parametric space of the face. Returns a NULL handle if this curve does not exist. Returns in <First> and <Last> the parameter range. If the surface is a plane the curve can be not stored but created a new each time. The flag pointed by <theIsStored> serves to indicate storage status. It is valued if the pointer is non-null.
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:param theIsStored: default value is NULL
    	:type theIsStored: bool *
    	:rtype: opencascade::handle<Geom2d_Curve>
    * Returns the curve associated to the edge in the parametric space of the surface. Returns a NULL handle if this curve does not exist. Returns in <First> and <Last> the parameter range. If the surface is a plane the curve can be not stored but created a new each time. The flag pointed by <theIsStored> serves to indicate storage status. It is valued if the pointer is non-null.
    	:param E:
    	:type E: TopoDS_Edge
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:param theIsStored: default value is NULL
    	:type theIsStored: bool *
    	:rtype: opencascade::handle<Geom2d_Curve>
    * Returns in <C>, <S>, <L> a 2d curve, a surface and a location for the edge <E>. <C> and <S> are null if the edge has no curve on surface. Returns in <First> and <Last> the parameter range.
    	:param E:
    	:type E: TopoDS_Edge
    	:param C:
    	:type C: Geom2d_Curve
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:rtype: void
    * Returns in <C>, <S>, <L> the 2d curve, the surface and the location for the edge <E> of rank <Index>. <C> and <S> are null if the index is out of range. Returns in <First> and <Last> the parameter range.
    	:param E:
    	:type E: TopoDS_Edge
    	:param C:
    	:type C: Geom2d_Curve
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:param Index:
    	:type Index: int
    	:rtype: void
    """
    return _BRep.BRep_Tool_CurveOnSurface(*args)

def BRep_Tool_Degenerated(*args) -> "Standard_Boolean":
    """
    * Returns True if the edge is degenerated.
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: bool
    """
    return _BRep.BRep_Tool_Degenerated(*args)

def BRep_Tool_HasContinuity(*args) -> "Standard_Boolean":
    """
    * Returns True if the edge is on the surfaces of the two faces.
    	:param E:
    	:type E: TopoDS_Edge
    	:param F1:
    	:type F1: TopoDS_Face
    	:param F2:
    	:type F2: TopoDS_Face
    	:rtype: bool
    * Returns True if the edge is on the surfaces.
    	:param E:
    	:type E: TopoDS_Edge
    	:param S1:
    	:type S1: Geom_Surface
    	:param S2:
    	:type S2: Geom_Surface
    	:param L1:
    	:type L1: TopLoc_Location
    	:param L2:
    	:type L2: TopLoc_Location
    	:rtype: bool
    * Returns True if the edge has regularity on some two surfaces
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: bool
    """
    return _BRep.BRep_Tool_HasContinuity(*args)

def BRep_Tool_IsClosed(*args) -> "Standard_Boolean":
    """
    * If S is Shell, returns True if it has no free boundaries (edges). If S is Wire, returns True if it has no free ends (vertices). (Internal and External sub-shepes are ignored in these checks) If S is Edge, returns True if its vertices are the same. For other shape types returns S.Closed().
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: bool
    * Returns True if <E> has two PCurves in the parametric space of <F>. i.e. <F> is on a closed surface and <E> is on the closing curve.
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: bool
    * Returns True if <E> has two PCurves in the parametric space of <S>. i.e. <S> is a closed surface and <E> is on the closing curve.
    	:param E:
    	:type E: TopoDS_Edge
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:rtype: bool
    * Returns True if <E> has two arrays of indices in the triangulation <T>.
    	:param E:
    	:type E: TopoDS_Edge
    	:param T:
    	:type T: Poly_Triangulation
    	:param L:
    	:type L: TopLoc_Location
    	:rtype: bool
    """
    return _BRep.BRep_Tool_IsClosed(*args)

def BRep_Tool_IsGeometric(*args) -> "Standard_Boolean":
    """
    * Returns True if <E> is a 3d curve or a curve on surface.
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: bool
    """
    return _BRep.BRep_Tool_IsGeometric(*args)

def BRep_Tool_MaxContinuity(*args) -> "GeomAbs_Shape":
    """
    * Returns the max continuity of edge between some surfaces or GeomAbs_C0 if there no such surfaces.
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:rtype: GeomAbs_Shape
    """
    return _BRep.BRep_Tool_MaxContinuity(*args)

def BRep_Tool_MaxTolerance(*args) -> "Standard_Real":
    """
    * Returns the maximum tolerance of input shape subshapes.
    	:param theShape:
    	:type theShape: TopoDS_Shape
    	:param theSubShape:
    	:type theSubShape: TopAbs_ShapeEnum
    	:rtype: float
    """
    return _BRep.BRep_Tool_MaxTolerance(*args)

def BRep_Tool_NaturalRestriction(*args) -> "Standard_Boolean":
    """
    * Returns the NaturalRestriction flag of the face.
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: bool
    """
    return _BRep.BRep_Tool_NaturalRestriction(*args)

def BRep_Tool_Parameter(*args) -> "Standard_Real":
    """
    * Returns the parameter of <V> on <E>.
    	:param V:
    	:type V: TopoDS_Vertex
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: float
    * Returns the parameters of the vertex on the pcurve of the edge on the face.
    	:param V:
    	:type V: TopoDS_Vertex
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: float
    * Returns the parameters of the vertex on the pcurve of the edge on the surface.
    	:param V:
    	:type V: TopoDS_Vertex
    	:param E:
    	:type E: TopoDS_Edge
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:rtype: float
    """
    return _BRep.BRep_Tool_Parameter(*args)

def BRep_Tool_Parameters(*args) -> "gp_Pnt2d":
    """
    * Returns the parameters of the vertex on the face.
    	:param V:
    	:type V: TopoDS_Vertex
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: gp_Pnt2d
    """
    return _BRep.BRep_Tool_Parameters(*args)

def BRep_Tool_Pnt(*args) -> "gp_Pnt":
    """
    * Returns the 3d point.
    	:param V:
    	:type V: TopoDS_Vertex
    	:rtype: gp_Pnt
    """
    return _BRep.BRep_Tool_Pnt(*args)

def BRep_Tool_Polygon3D(*args) -> "opencascade::handle< Poly_Polygon3D > const &":
    """
    * Returns the 3D polygon of the edge. May be a Null handle. Returns in <L> the location for the polygon.
    	:param E:
    	:type E: TopoDS_Edge
    	:param L:
    	:type L: TopLoc_Location
    	:rtype: opencascade::handle<Poly_Polygon3D>
    """
    return _BRep.BRep_Tool_Polygon3D(*args)

def BRep_Tool_PolygonOnSurface(*args) -> "void":
    """
    * Returns the polygon associated to the edge in the parametric space of the face. Returns a NULL handle if this polygon does not exist.
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: opencascade::handle<Poly_Polygon2D>
    * Returns the polygon associated to the edge in the parametric space of the surface. Returns a NULL handle if this polygon does not exist.
    	:param E:
    	:type E: TopoDS_Edge
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:rtype: opencascade::handle<Poly_Polygon2D>
    * Returns in <C>, <S>, <L> a 2d curve, a surface and a location for the edge <E>. <C> and <S> are null if the edge has no polygon on surface.
    	:param E:
    	:type E: TopoDS_Edge
    	:param C:
    	:type C: Poly_Polygon2D
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:rtype: void
    * Returns in <C>, <S>, <L> the 2d curve, the surface and the location for the edge <E> of rank <Index>. <C> and <S> are null if the index is out of range.
    	:param E:
    	:type E: TopoDS_Edge
    	:param C:
    	:type C: Poly_Polygon2D
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:param Index:
    	:type Index: int
    	:rtype: void
    """
    return _BRep.BRep_Tool_PolygonOnSurface(*args)

def BRep_Tool_PolygonOnTriangulation(*args) -> "void":
    """
    * Returns the polygon associated to the edge in the parametric space of the face. Returns a NULL handle if this polygon does not exist.
    	:param E:
    	:type E: TopoDS_Edge
    	:param T:
    	:type T: Poly_Triangulation
    	:param L:
    	:type L: TopLoc_Location
    	:rtype: opencascade::handle<Poly_PolygonOnTriangulation>
    * Returns in <P>, <T>, <L> a polygon on triangulation, a triangulation and a location for the edge <E>. <P> and <T> are null if the edge has no polygon on triangulation.
    	:param E:
    	:type E: TopoDS_Edge
    	:param P:
    	:type P: Poly_PolygonOnTriangulation
    	:param T:
    	:type T: Poly_Triangulation
    	:param L:
    	:type L: TopLoc_Location
    	:rtype: void
    * Returns in <P>, <T>, <L> a polygon on triangulation, a triangulation and a location for the edge <E> for the range index. <C> and <S> are null if the edge has no polygon on triangulation.
    	:param E:
    	:type E: TopoDS_Edge
    	:param P:
    	:type P: Poly_PolygonOnTriangulation
    	:param T:
    	:type T: Poly_Triangulation
    	:param L:
    	:type L: TopLoc_Location
    	:param Index:
    	:type Index: int
    	:rtype: void
    """
    return _BRep.BRep_Tool_PolygonOnTriangulation(*args)

def BRep_Tool_Range(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Gets the range of the 3d curve.
    	:param E:
    	:type E: TopoDS_Edge
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:rtype: void
    * Gets the range of the edge on the pcurve on the surface.
    	:param E:
    	:type E: TopoDS_Edge
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:rtype: void
    * Gets the range of the edge on the pcurve on the face.
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:param First:
    	:type First: float
    	:param Last:
    	:type Last: float
    	:rtype: void
    """
    return _BRep.BRep_Tool_Range(*args)

def BRep_Tool_SameParameter(*args) -> "Standard_Boolean":
    """
    * Returns the SameParameter flag for the edge.
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: bool
    """
    return _BRep.BRep_Tool_SameParameter(*args)

def BRep_Tool_SameRange(*args) -> "Standard_Boolean":
    """
    * Returns the SameRange flag for the edge.
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: bool
    """
    return _BRep.BRep_Tool_SameRange(*args)

def BRep_Tool_SetUVPoints(*args) -> "void":
    """
    * Sets the UV locations of the extremities of the edge.
    	:param E:
    	:type E: TopoDS_Edge
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:param PFirst:
    	:type PFirst: gp_Pnt2d
    	:param PLast:
    	:type PLast: gp_Pnt2d
    	:rtype: void
    * Sets the UV locations of the extremities of the edge.
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:param PFirst:
    	:type PFirst: gp_Pnt2d
    	:param PLast:
    	:type PLast: gp_Pnt2d
    	:rtype: void
    """
    return _BRep.BRep_Tool_SetUVPoints(*args)

def BRep_Tool_Surface(*args) -> "opencascade::handle< Geom_Surface >":
    """
    * Returns the geometric surface of the face. Returns in <L> the location for the surface.
    	:param F:
    	:type F: TopoDS_Face
    	:param L:
    	:type L: TopLoc_Location
    	:rtype: opencascade::handle<Geom_Surface>
    * Returns the geometric surface of the face. It can be a copy if there is a Location.
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: opencascade::handle<Geom_Surface>
    """
    return _BRep.BRep_Tool_Surface(*args)

def BRep_Tool_Tolerance(*args) -> "Standard_Real":
    """
    * Returns the tolerance of the face.
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: float
    * Returns the tolerance for <E>.
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: float
    * Returns the tolerance.
    	:param V:
    	:type V: TopoDS_Vertex
    	:rtype: float
    """
    return _BRep.BRep_Tool_Tolerance(*args)

def BRep_Tool_Triangulation(*args) -> "opencascade::handle< Poly_Triangulation > const &":
    """
    * Returns the Triangulation of the face. It is a null handle if there is no triangulation.
    	:param F:
    	:type F: TopoDS_Face
    	:param L:
    	:type L: TopLoc_Location
    	:rtype: opencascade::handle<Poly_Triangulation>
    """
    return _BRep.BRep_Tool_Triangulation(*args)

def BRep_Tool_UVPoints(*args) -> "void":
    """
    * Gets the UV locations of the extremities of the edge.
    	:param E:
    	:type E: TopoDS_Edge
    	:param S:
    	:type S: Geom_Surface
    	:param L:
    	:type L: TopLoc_Location
    	:param PFirst:
    	:type PFirst: gp_Pnt2d
    	:param PLast:
    	:type PLast: gp_Pnt2d
    	:rtype: void
    * Gets the UV locations of the extremities of the edge.
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:param PFirst:
    	:type PFirst: gp_Pnt2d
    	:param PLast:
    	:type PLast: gp_Pnt2d
    	:rtype: void
    """
    return _BRep.BRep_Tool_UVPoints(*args)

class BRep_CurveOn2Surfaces(BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:param L1:
        	:type L1: TopLoc_Location
        	:param L2:
        	:type L2: TopLoc_Location
        	:param C:
        	:type C: GeomAbs_Shape
        	:rtype: None
        """
        _BRep.BRep_CurveOn2Surfaces_swiginit(self, _BRep.new_BRep_CurveOn2Surfaces(*args))

    def Continuity(self, *args) -> "void":
        """
        :rtype: GeomAbs_Shape
        :param C:
        	:type C: GeomAbs_Shape
        	:rtype: void
        """
        return _BRep.BRep_CurveOn2Surfaces_Continuity(self, *args)


    def D0(self, *args) -> "void":
        """
        * Raises an error.
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _BRep.BRep_CurveOn2Surfaces_D0(self, *args)


    def IsRegularity(self, *args) -> "Standard_Boolean":
        """
        * Returns True.
        	:rtype: bool
        * A curve on two surfaces (continuity).
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:param L1:
        	:type L1: TopLoc_Location
        	:param L2:
        	:type L2: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_CurveOn2Surfaces_IsRegularity(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_CurveOn2Surfaces_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_CurveOn2Surfaces
BRep_CurveOn2Surfaces.Continuity = new_instancemethod(_BRep.BRep_CurveOn2Surfaces_Continuity, None, BRep_CurveOn2Surfaces)
BRep_CurveOn2Surfaces.D0 = new_instancemethod(_BRep.BRep_CurveOn2Surfaces_D0, None, BRep_CurveOn2Surfaces)
BRep_CurveOn2Surfaces.IsRegularity = new_instancemethod(_BRep.BRep_CurveOn2Surfaces_IsRegularity, None, BRep_CurveOn2Surfaces)
BRep_CurveOn2Surfaces_swigregister = _BRep.BRep_CurveOn2Surfaces_swigregister
BRep_CurveOn2Surfaces_swigregister(BRep_CurveOn2Surfaces)

class BRep_GCurve(BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        * Computes the point at parameter U.
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:rtype: void
        """
        return _BRep.BRep_GCurve_D0(self, *args)


    def First(self, *args) -> "void":
        """
        :rtype: float
        :param F:
        	:type F: float
        	:rtype: None
        """
        return _BRep.BRep_GCurve_First(self, *args)


    def Last(self, *args) -> "void":
        """
        :rtype: float
        :param L:
        	:type L: float
        	:rtype: None
        """
        return _BRep.BRep_GCurve_Last(self, *args)


    def Range(self, *args) -> "void":
        """
        :param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        """
        return _BRep.BRep_GCurve_Range(self, *args)


    def SetRange(self, *args) -> "void":
        """
        :param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        """
        return _BRep.BRep_GCurve_SetRange(self, *args)


    def Update(self, *args) -> "void":
        """
        * Recomputes any derived data after a modification. This is called when the range is modified.
        	:rtype: void
        """
        return _BRep.BRep_GCurve_Update(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_GCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_GCurve
BRep_GCurve.D0 = new_instancemethod(_BRep.BRep_GCurve_D0, None, BRep_GCurve)
BRep_GCurve.First = new_instancemethod(_BRep.BRep_GCurve_First, None, BRep_GCurve)
BRep_GCurve.Last = new_instancemethod(_BRep.BRep_GCurve_Last, None, BRep_GCurve)
BRep_GCurve.Range = new_instancemethod(_BRep.BRep_GCurve_Range, None, BRep_GCurve)
BRep_GCurve.SetRange = new_instancemethod(_BRep.BRep_GCurve_SetRange, None, BRep_GCurve)
BRep_GCurve.Update = new_instancemethod(_BRep.BRep_GCurve_Update, None, BRep_GCurve)
BRep_GCurve_swigregister = _BRep.BRep_GCurve_swigregister
BRep_GCurve_swigregister(BRep_GCurve)

class BRep_PointOnCurve(BRep_PointRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P:
        	:type P: float
        	:param C:
        	:type C: Geom_Curve
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        _BRep.BRep_PointOnCurve_swiginit(self, _BRep.new_BRep_PointOnCurve(*args))

    def Curve(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom_Curve>
        :param C:
        	:type C: Geom_Curve
        	:rtype: void
        """
        return _BRep.BRep_PointOnCurve_Curve(self, *args)


    def IsPointOnCurve(self, *args) -> "Standard_Boolean":
        """
        * Returns True
        	:rtype: bool
        :param C:
        	:type C: Geom_Curve
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_PointOnCurve_IsPointOnCurve(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PointOnCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PointOnCurve
BRep_PointOnCurve.Curve = new_instancemethod(_BRep.BRep_PointOnCurve_Curve, None, BRep_PointOnCurve)
BRep_PointOnCurve.IsPointOnCurve = new_instancemethod(_BRep.BRep_PointOnCurve_IsPointOnCurve, None, BRep_PointOnCurve)
BRep_PointOnCurve_swigregister = _BRep.BRep_PointOnCurve_swigregister
BRep_PointOnCurve_swigregister(BRep_PointOnCurve)

class BRep_PointsOnSurface(BRep_PointRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Surface(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom_Surface>
        :param S:
        	:type S: Geom_Surface
        	:rtype: void
        """
        return _BRep.BRep_PointsOnSurface_Surface(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PointsOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PointsOnSurface
BRep_PointsOnSurface.Surface = new_instancemethod(_BRep.BRep_PointsOnSurface_Surface, None, BRep_PointsOnSurface)
BRep_PointsOnSurface_swigregister = _BRep.BRep_PointsOnSurface_swigregister
BRep_PointsOnSurface_swigregister(BRep_PointsOnSurface)

class BRep_Polygon3D(BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P:
        	:type P: Poly_Polygon3D
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        _BRep.BRep_Polygon3D_swiginit(self, _BRep.new_BRep_Polygon3D(*args))

    def Polygon3D(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Poly_Polygon3D>
        :param P:
        	:type P: Poly_Polygon3D
        	:rtype: void
        """
        return _BRep.BRep_Polygon3D_Polygon3D(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_Polygon3D_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_Polygon3D
BRep_Polygon3D.Polygon3D = new_instancemethod(_BRep.BRep_Polygon3D_Polygon3D, None, BRep_Polygon3D)
BRep_Polygon3D_swigregister = _BRep.BRep_Polygon3D_swigregister
BRep_Polygon3D_swigregister(BRep_Polygon3D)

class BRep_PolygonOnSurface(BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P:
        	:type P: Poly_Polygon2D
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        _BRep.BRep_PolygonOnSurface_swiginit(self, _BRep.new_BRep_PolygonOnSurface(*args))

    def IsPolygonOnSurface(self, *args) -> "Standard_Boolean":
        """
        * A 2D polygon representation in the parametric space of a surface.
        	:rtype: bool
        * A 2D polygon representation in the parametric space of a surface.
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_PolygonOnSurface_IsPolygonOnSurface(self, *args)


    def Polygon(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Poly_Polygon2D>
        :param P:
        	:type P: Poly_Polygon2D
        	:rtype: void
        """
        return _BRep.BRep_PolygonOnSurface_Polygon(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PolygonOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PolygonOnSurface
BRep_PolygonOnSurface.IsPolygonOnSurface = new_instancemethod(_BRep.BRep_PolygonOnSurface_IsPolygonOnSurface, None, BRep_PolygonOnSurface)
BRep_PolygonOnSurface.Polygon = new_instancemethod(_BRep.BRep_PolygonOnSurface_Polygon, None, BRep_PolygonOnSurface)
BRep_PolygonOnSurface_swigregister = _BRep.BRep_PolygonOnSurface_swigregister
BRep_PolygonOnSurface_swigregister(BRep_PolygonOnSurface)

class BRep_PolygonOnTriangulation(BRep_CurveRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P:
        	:type P: Poly_PolygonOnTriangulation
        	:param T:
        	:type T: Poly_Triangulation
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        _BRep.BRep_PolygonOnTriangulation_swiginit(self, _BRep.new_BRep_PolygonOnTriangulation(*args))

    def IsPolygonOnTriangulation(self, *args) -> "Standard_Boolean":
        """
        * returns True.
        	:rtype: bool
        * Is it a polygon in the definition of <T> with location <L>.
        	:param T:
        	:type T: Poly_Triangulation
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_PolygonOnTriangulation_IsPolygonOnTriangulation(self, *args)


    def PolygonOnTriangulation(self, *args) -> "opencascade::handle< Poly_PolygonOnTriangulation > const &":
        """
        * returns True.
        	:param P:
        	:type P: Poly_PolygonOnTriangulation
        	:rtype: void
        :rtype: opencascade::handle<Poly_PolygonOnTriangulation>
        """
        return _BRep.BRep_PolygonOnTriangulation_PolygonOnTriangulation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PolygonOnTriangulation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PolygonOnTriangulation
BRep_PolygonOnTriangulation.IsPolygonOnTriangulation = new_instancemethod(_BRep.BRep_PolygonOnTriangulation_IsPolygonOnTriangulation, None, BRep_PolygonOnTriangulation)
BRep_PolygonOnTriangulation.PolygonOnTriangulation = new_instancemethod(_BRep.BRep_PolygonOnTriangulation_PolygonOnTriangulation, None, BRep_PolygonOnTriangulation)
BRep_PolygonOnTriangulation_swigregister = _BRep.BRep_PolygonOnTriangulation_swigregister
BRep_PolygonOnTriangulation_swigregister(BRep_PolygonOnTriangulation)

class BRep_Curve3D(BRep_GCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C:
        	:type C: Geom_Curve
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        _BRep.BRep_Curve3D_swiginit(self, _BRep.new_BRep_Curve3D(*args))

    def Curve3D(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom_Curve>
        :param C:
        	:type C: Geom_Curve
        	:rtype: void
        """
        return _BRep.BRep_Curve3D_Curve3D(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_Curve3D_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_Curve3D
BRep_Curve3D.Curve3D = new_instancemethod(_BRep.BRep_Curve3D_Curve3D, None, BRep_Curve3D)
BRep_Curve3D_swigregister = _BRep.BRep_Curve3D_swigregister
BRep_Curve3D_swigregister(BRep_Curve3D)

class BRep_CurveOnSurface(BRep_GCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param PC:
        	:type PC: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        _BRep.BRep_CurveOnSurface_swiginit(self, _BRep.new_BRep_CurveOnSurface(*args))

    def IsCurveOnSurface(self, *args) -> "Standard_Boolean":
        """
        * Returns True.
        	:rtype: bool
        * A curve in the parametric space of a surface.
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_CurveOnSurface_IsCurveOnSurface(self, *args)


    def PCurve(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom2d_Curve>
        :param C:
        	:type C: Geom2d_Curve
        	:rtype: void
        """
        return _BRep.BRep_CurveOnSurface_PCurve(self, *args)


    def SetUVPoints(self, *args) -> "void":
        """
        :param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        """
        return _BRep.BRep_CurveOnSurface_SetUVPoints(self, *args)


    def UVPoints(self, *args) -> "void":
        """
        :param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        """
        return _BRep.BRep_CurveOnSurface_UVPoints(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_CurveOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_CurveOnSurface
BRep_CurveOnSurface.IsCurveOnSurface = new_instancemethod(_BRep.BRep_CurveOnSurface_IsCurveOnSurface, None, BRep_CurveOnSurface)
BRep_CurveOnSurface.PCurve = new_instancemethod(_BRep.BRep_CurveOnSurface_PCurve, None, BRep_CurveOnSurface)
BRep_CurveOnSurface.SetUVPoints = new_instancemethod(_BRep.BRep_CurveOnSurface_SetUVPoints, None, BRep_CurveOnSurface)
BRep_CurveOnSurface.UVPoints = new_instancemethod(_BRep.BRep_CurveOnSurface_UVPoints, None, BRep_CurveOnSurface)
BRep_CurveOnSurface_swigregister = _BRep.BRep_CurveOnSurface_swigregister
BRep_CurveOnSurface_swigregister(BRep_CurveOnSurface)

class BRep_PointOnCurveOnSurface(BRep_PointsOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P:
        	:type P: float
        	:param C:
        	:type C: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        _BRep.BRep_PointOnCurveOnSurface_swiginit(self, _BRep.new_BRep_PointOnCurveOnSurface(*args))

    def IsPointOnCurveOnSurface(self, *args) -> "Standard_Boolean":
        """
        * Returns True
        	:rtype: bool
        :param PC:
        	:type PC: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_PointOnCurveOnSurface_IsPointOnCurveOnSurface(self, *args)


    def PCurve(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom2d_Curve>
        :param C:
        	:type C: Geom2d_Curve
        	:rtype: void
        """
        return _BRep.BRep_PointOnCurveOnSurface_PCurve(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PointOnCurveOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PointOnCurveOnSurface
BRep_PointOnCurveOnSurface.IsPointOnCurveOnSurface = new_instancemethod(_BRep.BRep_PointOnCurveOnSurface_IsPointOnCurveOnSurface, None, BRep_PointOnCurveOnSurface)
BRep_PointOnCurveOnSurface.PCurve = new_instancemethod(_BRep.BRep_PointOnCurveOnSurface_PCurve, None, BRep_PointOnCurveOnSurface)
BRep_PointOnCurveOnSurface_swigregister = _BRep.BRep_PointOnCurveOnSurface_swigregister
BRep_PointOnCurveOnSurface_swigregister(BRep_PointOnCurveOnSurface)

class BRep_PointOnSurface(BRep_PointsOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P1:
        	:type P1: float
        	:param P2:
        	:type P2: float
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        _BRep.BRep_PointOnSurface_swiginit(self, _BRep.new_BRep_PointOnSurface(*args))

    def IsPointOnSurface(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool
        :param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_PointOnSurface_IsPointOnSurface(self, *args)


    def Parameter2(self, *args) -> "void":
        """
        :rtype: float
        :param P:
        	:type P: float
        	:rtype: void
        """
        return _BRep.BRep_PointOnSurface_Parameter2(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PointOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PointOnSurface
BRep_PointOnSurface.IsPointOnSurface = new_instancemethod(_BRep.BRep_PointOnSurface_IsPointOnSurface, None, BRep_PointOnSurface)
BRep_PointOnSurface.Parameter2 = new_instancemethod(_BRep.BRep_PointOnSurface_Parameter2, None, BRep_PointOnSurface)
BRep_PointOnSurface_swigregister = _BRep.BRep_PointOnSurface_swigregister
BRep_PointOnSurface_swigregister(BRep_PointOnSurface)

class BRep_PolygonOnClosedSurface(BRep_PolygonOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P1:
        	:type P1: Poly_Polygon2D
        	:param P2:
        	:type P2: Poly_Polygon2D
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        _BRep.BRep_PolygonOnClosedSurface_swiginit(self, _BRep.new_BRep_PolygonOnClosedSurface(*args))

    def Polygon2(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Poly_Polygon2D>
        :param P:
        	:type P: Poly_Polygon2D
        	:rtype: void
        """
        return _BRep.BRep_PolygonOnClosedSurface_Polygon2(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PolygonOnClosedSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PolygonOnClosedSurface
BRep_PolygonOnClosedSurface.Polygon2 = new_instancemethod(_BRep.BRep_PolygonOnClosedSurface_Polygon2, None, BRep_PolygonOnClosedSurface)
BRep_PolygonOnClosedSurface_swigregister = _BRep.BRep_PolygonOnClosedSurface_swigregister
BRep_PolygonOnClosedSurface_swigregister(BRep_PolygonOnClosedSurface)

class BRep_PolygonOnClosedTriangulation(BRep_PolygonOnTriangulation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P1:
        	:type P1: Poly_PolygonOnTriangulation
        	:param P2:
        	:type P2: Poly_PolygonOnTriangulation
        	:param Tr:
        	:type Tr: Poly_Triangulation
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        _BRep.BRep_PolygonOnClosedTriangulation_swiginit(self, _BRep.new_BRep_PolygonOnClosedTriangulation(*args))

    def PolygonOnTriangulation2(self, *args) -> "opencascade::handle< Poly_PolygonOnTriangulation > const &":
        """
        :param P2:
        	:type P2: Poly_PolygonOnTriangulation
        	:rtype: void
        :rtype: opencascade::handle<Poly_PolygonOnTriangulation>
        """
        return _BRep.BRep_PolygonOnClosedTriangulation_PolygonOnTriangulation2(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PolygonOnClosedTriangulation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PolygonOnClosedTriangulation
BRep_PolygonOnClosedTriangulation.PolygonOnTriangulation2 = new_instancemethod(_BRep.BRep_PolygonOnClosedTriangulation_PolygonOnTriangulation2, None, BRep_PolygonOnClosedTriangulation)
BRep_PolygonOnClosedTriangulation_swigregister = _BRep.BRep_PolygonOnClosedTriangulation_swigregister
BRep_PolygonOnClosedTriangulation_swigregister(BRep_PolygonOnClosedTriangulation)

class BRep_CurveOnClosedSurface(BRep_CurveOnSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param PC1:
        	:type PC1: Geom2d_Curve
        	:param PC2:
        	:type PC2: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:param C:
        	:type C: GeomAbs_Shape
        	:rtype: None
        """
        _BRep.BRep_CurveOnClosedSurface_swiginit(self, _BRep.new_BRep_CurveOnClosedSurface(*args))

    def Continuity(self, *args) -> "void":
        """
        :rtype: GeomAbs_Shape
        :param C:
        	:type C: GeomAbs_Shape
        	:rtype: void
        """
        return _BRep.BRep_CurveOnClosedSurface_Continuity(self, *args)


    def IsRegularity(self, *args) -> "Standard_Boolean":
        """
        * Returns True
        	:rtype: bool
        * A curve on two surfaces (continuity).
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:param L1:
        	:type L1: TopLoc_Location
        	:param L2:
        	:type L2: TopLoc_Location
        	:rtype: bool
        """
        return _BRep.BRep_CurveOnClosedSurface_IsRegularity(self, *args)


    def PCurve2(self, *args) -> "void":
        """
        :rtype: opencascade::handle<Geom2d_Curve>
        :param C:
        	:type C: Geom2d_Curve
        	:rtype: void
        """
        return _BRep.BRep_CurveOnClosedSurface_PCurve2(self, *args)


    def SetUVPoints2(self, *args) -> "void":
        """
        :param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        """
        return _BRep.BRep_CurveOnClosedSurface_SetUVPoints2(self, *args)


    def UVPoints2(self, *args) -> "void":
        """
        :param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        """
        return _BRep.BRep_CurveOnClosedSurface_UVPoints2(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_CurveOnClosedSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_CurveOnClosedSurface
BRep_CurveOnClosedSurface.Continuity = new_instancemethod(_BRep.BRep_CurveOnClosedSurface_Continuity, None, BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface.IsRegularity = new_instancemethod(_BRep.BRep_CurveOnClosedSurface_IsRegularity, None, BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface.PCurve2 = new_instancemethod(_BRep.BRep_CurveOnClosedSurface_PCurve2, None, BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface.SetUVPoints2 = new_instancemethod(_BRep.BRep_CurveOnClosedSurface_SetUVPoints2, None, BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface.UVPoints2 = new_instancemethod(_BRep.BRep_CurveOnClosedSurface_UVPoints2, None, BRep_CurveOnClosedSurface)
BRep_CurveOnClosedSurface_swigregister = _BRep.BRep_CurveOnClosedSurface_swigregister
BRep_CurveOnClosedSurface_swigregister(BRep_CurveOnClosedSurface)



