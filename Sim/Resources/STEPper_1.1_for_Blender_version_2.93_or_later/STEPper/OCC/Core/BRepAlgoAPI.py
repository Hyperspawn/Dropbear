# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepAlgoAPI module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepalgoapi.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepAlgoAPI.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepAlgoAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepAlgoAPI')
    _BRepAlgoAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepAlgoAPI', [dirname(__file__)])
        except ImportError:
            import _BRepAlgoAPI
            return _BRepAlgoAPI
        try:
            _mod = imp.load_module('_BRepAlgoAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepAlgoAPI = swig_import_helper()
    del swig_import_helper
else:
    import _BRepAlgoAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepAlgoAPI.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepAlgoAPI.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepAlgoAPI.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepAlgoAPI.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepAlgoAPI.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepAlgoAPI.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepAlgoAPI.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepAlgoAPI.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepAlgoAPI.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepAlgoAPI.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepAlgoAPI.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepAlgoAPI.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepAlgoAPI.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepAlgoAPI.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepAlgoAPI.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepAlgoAPI.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepAlgoAPI.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepAlgoAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepAlgoAPI.process_exception(error, method_name, class_name)
process_exception = _BRepAlgoAPI.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BOPAlgo
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TopTools
import OCC.Core.TCollection
import OCC.Core.IntTools
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.Geom2dHatch
import OCC.Core.IntRes2d
import OCC.Core.HatchGen
import OCC.Core.Geom2dInt
import OCC.Core.IntCurve
import OCC.Core.Extrema
import OCC.Core.Intf
import OCC.Core.GeomAPI
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.AppParCurves
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.IntSurf
import OCC.Core.IntCurvesFace
import OCC.Core.IntPatch
import OCC.Core.IntAna
import OCC.Core.GeomInt
import OCC.Core.IntImp
import OCC.Core.ApproxInt
import OCC.Core.BOPDS
import OCC.Core.BRepTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.BOPTools
import OCC.Core.BRepBuilderAPI
class BRepAlgoAPI_Algo(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        * Clears all warnings and errors, and any data cached by the algorithm. User defined options are not cleared.
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_Clear(self, *args)


    def SetRunParallel(self, *args) -> "void":
        """
        * Set the flag of parallel processing if <theFlag> is true the parallel processing is switched on if <theFlag> is false the parallel processing is switched off
        	:param theFlag:
        	:type theFlag: bool
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_SetRunParallel(self, *args)


    def RunParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag of parallel processing
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_RunParallel(self, *args)


    def SetFuzzyValue(self, *args) -> "void":
        """
        * //!@name Fuzzy tolerance Sets the additional tolerance
        	:param theFuzz:
        	:type theFuzz: float
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_SetFuzzyValue(self, *args)


    def FuzzyValue(self, *args) -> "Standard_Real":
        """
        * Returns the additional tolerance
        	:rtype: float
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_FuzzyValue(self, *args)


    def HasErrors(self, *args) -> "Standard_Boolean":
        """
        * Returns true if algorithm has failed
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_HasErrors(self, *args)


    def HasWarnings(self, *args) -> "Standard_Boolean":
        """
        * Returns true if algorithm has generated some warning alerts
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_HasWarnings(self, *args)


    def HasError(self, *args) -> "Standard_Boolean":
        """
        * Returns true if algorithm has generated error of specified type
        	:param theType:
        	:type theType: Standard_Type
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_HasError(self, *args)


    def HasWarning(self, *args) -> "Standard_Boolean":
        """
        * Returns true if algorithm has generated warning of specified type
        	:param theType:
        	:type theType: Standard_Type
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_HasWarning(self, *args)


    def ClearWarnings(self, *args) -> "void":
        """
        * Clears the warnings of the algorithm
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_ClearWarnings(self, *args)


    def GetReport(self, *args) -> "opencascade::handle< Message_Report > const &":
        """
        * Returns report collecting all errors and warnings
        	:rtype: opencascade::handle<Message_Report>
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_GetReport(self, *args)


    def SetProgressIndicator(self, *args) -> "void":
        """
        * //!@name Progress indicator Set the Progress Indicator object.
        	:param theObj:
        	:type theObj: Message_ProgressIndicator
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_SetProgressIndicator(self, *args)


    def SetUseOBB(self, *args) -> "void":
        """
        * //!@name Usage of Oriented Bounding boxes Enables/Disables the usage of OBB
        	:param theUseOBB:
        	:type theUseOBB: bool
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Algo_SetUseOBB(self, *args)

BRepAlgoAPI_Algo.Clear = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_Clear, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.SetRunParallel = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_SetRunParallel, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.RunParallel = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_RunParallel, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.SetFuzzyValue = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_SetFuzzyValue, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.FuzzyValue = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_FuzzyValue, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.HasErrors = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_HasErrors, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.HasWarnings = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_HasWarnings, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.HasError = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_HasError, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.HasWarning = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_HasWarning, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.ClearWarnings = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_ClearWarnings, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.GetReport = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_GetReport, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.SetProgressIndicator = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_SetProgressIndicator, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo.SetUseOBB = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Algo_SetUseOBB, None, BRepAlgoAPI_Algo)
BRepAlgoAPI_Algo_swigregister = _BRepAlgoAPI.BRepAlgoAPI_Algo_swigregister
BRepAlgoAPI_Algo_swigregister(BRepAlgoAPI_Algo)

class BRepAlgoAPI_Check(OCC.Core.BOPAlgo.BOPAlgo_Options):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * @name Constructors Empty constructor.
        	:rtype: None
        * Constructor for checking single shape. //! @param theS [in] - the shape to check; @param bTestSE [in] - flag which specifies whether to check the shape  on small edges or not; by default it is set to True; @param bTestSI [in] - flag which specifies whether to check the shape  on self-interference or not; by default it is set to True;
        	:param theS:
        	:type theS: TopoDS_Shape
        	:param bTestSE: default value is Standard_True
        	:type bTestSE: bool
        	:param bTestSI: default value is Standard_True
        	:type bTestSI: bool
        	:rtype: None
        * Constructor for checking the couple of shapes. Additionally to the validity checks of each given shape, the types of the given shapes will be checked on validity for Boolean operation of given type. //! @param theS1 [in] - the first shape to check; @param theS2 [in] - the second shape to check; @param theOp [in] - the type of Boolean Operation for which the validity of given shapes should be checked. @param bTestSE [in] - flag which specifies whether to check the shape  on small edges or not; by default it is set to True; @param bTestSI [in] - flag which specifies whether to check the shape  on self-interference or not; by default it is set to True;
        	:param theS1:
        	:type theS1: TopoDS_Shape
        	:param theS2:
        	:type theS2: TopoDS_Shape
        	:param theOp: default value is BOPAlgo_UNKNOWN
        	:type theOp: BOPAlgo_Operation
        	:param bTestSE: default value is Standard_True
        	:type bTestSE: bool
        	:param bTestSI: default value is Standard_True
        	:type bTestSI: bool
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Check_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Check(*args))

    def IsValid(self, *args) -> "Standard_Boolean":
        """
        * @name Getting the results. Shows whether shape(s) valid or not.
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Check_IsValid(self, *args)


    def Perform(self, *args) -> "void":
        """
        * @name Performing the operation Performs the check.
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Check_Perform(self, *args)


    def Result(self, *args) -> "BOPAlgo_ListOfCheckResult const &":
        """
        * Returns faulty shapes.
        	:rtype: BOPAlgo_ListOfCheckResult
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Check_Result(self, *args)


    def SetData(self, *args) -> "void":
        """
        * @name Initializing the algorithm Initializes the algorithm with single shape. //! @param theS [in] - the shape to check; @param bTestSE [in] - flag which specifies whether to check the shape  on small edges or not; by default it is set to True; @param bTestSI [in] - flag which specifies whether to check the shape  on self-interference or not; by default it is set to True;
        	:param theS:
        	:type theS: TopoDS_Shape
        	:param bTestSE: default value is Standard_True
        	:type bTestSE: bool
        	:param bTestSI: default value is Standard_True
        	:type bTestSI: bool
        	:rtype: None
        * Initializes the algorithm with couple of shapes. Additionally to the validity checks of each given shape, the types of the given shapes will be checked on validity for Boolean operation of given type. //! @param theS1 [in] - the first shape to check; @param theS2 [in] - the second shape to check; @param theOp [in] - the type of Boolean Operation for which the validity of given shapes should be checked. @param bTestSE [in] - flag which specifies whether to check the shape  on small edges or not; by default it is set to True; @param bTestSI [in] - flag which specifies whether to check the shape  on self-interference or not; by default it is set to True;
        	:param theS1:
        	:type theS1: TopoDS_Shape
        	:param theS2:
        	:type theS2: TopoDS_Shape
        	:param theOp: default value is BOPAlgo_UNKNOWN
        	:type theOp: BOPAlgo_Operation
        	:param bTestSE: default value is Standard_True
        	:type bTestSE: bool
        	:param bTestSI: default value is Standard_True
        	:type bTestSI: bool
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Check_SetData(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Check
BRepAlgoAPI_Check.IsValid = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Check_IsValid, None, BRepAlgoAPI_Check)
BRepAlgoAPI_Check.Perform = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Check_Perform, None, BRepAlgoAPI_Check)
BRepAlgoAPI_Check.Result = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Check_Result, None, BRepAlgoAPI_Check)
BRepAlgoAPI_Check.SetData = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Check_SetData, None, BRepAlgoAPI_Check)
BRepAlgoAPI_Check_swigregister = _BRepAlgoAPI.BRepAlgoAPI_Check_swigregister
BRepAlgoAPI_Check_swigregister(BRepAlgoAPI_Check)

class BRepAlgoAPI_BuilderAlgo(BRepAlgoAPI_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Arguments(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Gets the arguments
        	:rtype: TopTools_ListOfShape
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_Arguments(self, *args)


    def __init__(self, *args):
        """
        * @name Constructors Empty constructor
        	:rtype: None
        * Constructor with prepared Filler object
        	:param thePF:
        	:type thePF: BOPAlgo_PaveFiller
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_BuilderAlgo(*args))

    def Builder(self, *args) -> "BOPAlgo_PBuilder const &":
        """
        * Returns the Building tool
        	:rtype: BOPAlgo_PBuilder
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_Builder(self, *args)


    def CheckInverted(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag defining whether the check for input solids on inverted status should be performed or not.
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_CheckInverted(self, *args)


    def DSFiller(self, *args) -> "BOPAlgo_PPaveFiller const &":
        """
        * @name Getting tools performing the job Returns the Intersection tool
        	:rtype: BOPAlgo_PPaveFiller
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_DSFiller(self, *args)


    def Glue(self, *args) -> "BOPAlgo_GlueEnum":
        """
        * Returns the glue option of the algorithm
        	:rtype: BOPAlgo_GlueEnum
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_Glue(self, *args)


    def HasDeleted(self, *args) -> "Standard_Boolean":
        """
        * Returns true if any of the input shapes has been deleted during operation. Normally, General Fuse operation should not have Deleted elements, but all derived operation can have.
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasDeleted(self, *args)


    def HasGenerated(self, *args) -> "Standard_Boolean":
        """
        * Returns true if any of the input shapes has generated shapes during operation.
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasGenerated(self, *args)


    def HasHistory(self, *args) -> "Standard_Boolean":
        """
        * Returns flag of history availability
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasHistory(self, *args)


    def HasModified(self, *args) -> "Standard_Boolean":
        """
        * Returns true if any of the input shapes has been modified during operation.
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasModified(self, *args)


    def History(self, *args) -> "opencascade::handle< BRepTools_History >":
        """
        * History tool
        	:rtype: opencascade::handle<BRepTools_History>
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_History(self, *args)


    def NonDestructive(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag that defines the mode of treatment. In non-destructive mode the argument shapes are not modified. Instead a copy of a sub-shape is created in the result if it is needed to be updated.
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_NonDestructive(self, *args)


    def SectionEdges(self, *args) -> "TopTools_ListOfShape const &":
        """
        * @name Getting the section edges Returns a list of section edges. The edges represent the result of intersection between arguments of operation.
        	:rtype: TopTools_ListOfShape
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SectionEdges(self, *args)


    def SetArguments(self, *args) -> "void":
        """
        * @name Setting/Getting data for the algorithm Sets the arguments
        	:param theLS:
        	:type theLS: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetArguments(self, *args)


    def SetCheckInverted(self, *args) -> "void":
        """
        * Enables/Disables the check of the input solids for inverted status
        	:param theCheck:
        	:type theCheck: bool
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetCheckInverted(self, *args)


    def SetGlue(self, *args) -> "void":
        """
        * Sets the glue option for the algorithm, which allows increasing performance of the intersection of the input shapes.
        	:param theGlue:
        	:type theGlue: BOPAlgo_GlueEnum
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetGlue(self, *args)


    def SetNonDestructive(self, *args) -> "void":
        """
        * @name Setting options Sets the flag that defines the mode of treatment. In non-destructive mode the argument shapes are not modified. Instead a copy of a sub-shape is created in the result if it is needed to be updated.
        	:param theFlag:
        	:type theFlag: bool
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetNonDestructive(self, *args)


    def SetToFillHistory(self, *args) -> "void":
        """
        * @name Enabling/Disabling the history collection. Allows disabling the history collection
        	:param theHistFlag:
        	:type theHistFlag: bool
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetToFillHistory(self, *args)


    def SimplifyResult(self, *args) -> "void":
        """
        * @name Result simplification Simplification of the result shape is performed by the means of *ShapeUpgrade_UnifySameDomain* algorithm. The result of the operation will be overwritten with the simplified result. //! The simplification is performed without creation of the Internal shapes, i.e. shapes connections will never be broken. //! Simplification is performed on the whole result shape. Thus, if the input shapes contained connected tangent edges or faces unmodified during the operation they will also be unified. //! After simplification, the History of result simplification is merged into the main history of operation. So, it is taken into account when asking for Modified, Generated and Deleted shapes. //! Some options of the main operation are passed into the Unifier: - Fuzzy tolerance of the operation is given to the Unifier as the linear tolerance. - Non destructive mode here controls the safe input mode in Unifier. //! @param theUnifyEdges Controls the edges unification. True by default. @param theUnifyFaces Controls the faces unification. True by default. @param theAngularTol Angular criteria for tangency of edges and faces.  Precision::Angular() by default.
        	:param theUnifyEdges: default value is Standard_True
        	:type theUnifyEdges: bool
        	:param theUnifyFaces: default value is Standard_True
        	:type theUnifyFaces: bool
        	:param theAngularTol: default value is Precision::Angular()
        	:type theAngularTol: float
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SimplifyResult(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_BuilderAlgo
BRepAlgoAPI_BuilderAlgo.Arguments = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_Arguments, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.Builder = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_Builder, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.CheckInverted = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_CheckInverted, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.DSFiller = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_DSFiller, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.Glue = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_Glue, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.HasDeleted = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasDeleted, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.HasGenerated = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasGenerated, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.HasHistory = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasHistory, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.HasModified = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasModified, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.History = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_History, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.NonDestructive = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_NonDestructive, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.SectionEdges = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SectionEdges, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.SetArguments = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetArguments, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.SetCheckInverted = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetCheckInverted, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.SetGlue = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetGlue, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.SetNonDestructive = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetNonDestructive, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.SetToFillHistory = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetToFillHistory, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo.SimplifyResult = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SimplifyResult, None, BRepAlgoAPI_BuilderAlgo)
BRepAlgoAPI_BuilderAlgo_swigregister = _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_swigregister
BRepAlgoAPI_BuilderAlgo_swigregister(BRepAlgoAPI_BuilderAlgo)

class BRepAlgoAPI_Defeaturing(BRepAlgoAPI_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddFaceToRemove(self, *args) -> "void":
        """
        * Adds the features to remove from the input shape. @param theFace [in] The shape to extract the faces for removal.
        	:param theFace:
        	:type theFace: TopoDS_Shape
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_AddFaceToRemove(self, *args)


    def AddFacesToRemove(self, *args) -> "void":
        """
        * Adds the faces to remove from the input shape. @param theFaces [in] The list of shapes to extract the faces for removal.
        	:param theFaces:
        	:type theFaces: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_AddFacesToRemove(self, *args)


    def __init__(self, *args):
        """
        * @name Constructors Empty constructor
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Defeaturing(*args))

    def FacesToRemove(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of faces which have been requested for removal from the input shape.
        	:rtype: TopTools_ListOfShape
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_FacesToRemove(self, *args)


    def HasDeleted(self, *args) -> "Standard_Boolean":
        """
        * Returns true if any of the input shapes has been deleted during operation.
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasDeleted(self, *args)


    def HasGenerated(self, *args) -> "Standard_Boolean":
        """
        * Returns true if any of the input shapes has generated shapes during operation.
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasGenerated(self, *args)


    def HasHistory(self, *args) -> "Standard_Boolean":
        """
        * Returns whether the history was requested or not.
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasHistory(self, *args)


    def HasModified(self, *args) -> "Standard_Boolean":
        """
        * Returns true if any of the input shapes has been modified during operation.
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasModified(self, *args)


    def History(self, *args) -> "opencascade::handle< BRepTools_History >":
        """
        * Returns the History of shapes modifications
        	:rtype: opencascade::handle<BRepTools_History>
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_History(self, *args)


    def InputShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the input shape
        	:rtype: TopoDS_Shape
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_InputShape(self, *args)


    def SetShape(self, *args) -> "void":
        """
        * @name Setting input data for the algorithm Sets the shape for processing. @param theShape [in] The shape to remove the features from.  It should either be the SOLID, COMPSOLID or COMPOUND of Solids.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_SetShape(self, *args)


    def SetToFillHistory(self, *args) -> "void":
        """
        * @name History Methods Defines whether to track the modification of the shapes or not.
        	:param theFlag:
        	:type theFlag: bool
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_SetToFillHistory(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Defeaturing
BRepAlgoAPI_Defeaturing.AddFaceToRemove = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_AddFaceToRemove, None, BRepAlgoAPI_Defeaturing)
BRepAlgoAPI_Defeaturing.AddFacesToRemove = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_AddFacesToRemove, None, BRepAlgoAPI_Defeaturing)
BRepAlgoAPI_Defeaturing.FacesToRemove = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_FacesToRemove, None, BRepAlgoAPI_Defeaturing)
BRepAlgoAPI_Defeaturing.HasDeleted = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasDeleted, None, BRepAlgoAPI_Defeaturing)
BRepAlgoAPI_Defeaturing.HasGenerated = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasGenerated, None, BRepAlgoAPI_Defeaturing)
BRepAlgoAPI_Defeaturing.HasHistory = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasHistory, None, BRepAlgoAPI_Defeaturing)
BRepAlgoAPI_Defeaturing.HasModified = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasModified, None, BRepAlgoAPI_Defeaturing)
BRepAlgoAPI_Defeaturing.History = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_History, None, BRepAlgoAPI_Defeaturing)
BRepAlgoAPI_Defeaturing.InputShape = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_InputShape, None, BRepAlgoAPI_Defeaturing)
BRepAlgoAPI_Defeaturing.SetShape = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_SetShape, None, BRepAlgoAPI_Defeaturing)
BRepAlgoAPI_Defeaturing.SetToFillHistory = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_SetToFillHistory, None, BRepAlgoAPI_Defeaturing)
BRepAlgoAPI_Defeaturing_swigregister = _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_swigregister
BRepAlgoAPI_Defeaturing_swigregister(BRepAlgoAPI_Defeaturing)

class BRepAlgoAPI_BooleanOperation(BRepAlgoAPI_BuilderAlgo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * @name Constructors Empty constructor
        	:rtype: None
        * Constructor with precomputed intersections of arguments.
        	:param thePF:
        	:type thePF: BOPAlgo_PaveFiller
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_BooleanOperation(*args))

    def Operation(self, *args) -> "BOPAlgo_Operation":
        """
        * Returns the type of Boolean Operation
        	:rtype: BOPAlgo_Operation
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Operation(self, *args)


    def SetOperation(self, *args) -> "void":
        """
        * @name Setting/Getting the type of Boolean operation Sets the type of Boolean operation
        	:param theBOP:
        	:type theBOP: BOPAlgo_Operation
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_SetOperation(self, *args)


    def SetTools(self, *args) -> "void":
        """
        * Sets the Tool arguments
        	:param theLS:
        	:type theLS: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_SetTools(self, *args)


    def Shape1(self, *args) -> "TopoDS_Shape const":
        """
        * @name Setting/getting arguments Returns the first argument involved in this Boolean operation. Obsolete
        	:rtype: TopoDS_Shape
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Shape1(self, *args)


    def Shape2(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the second argument involved in this Boolean operation. Obsolete
        	:rtype: TopoDS_Shape
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Shape2(self, *args)


    def Tools(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the Tools arguments
        	:rtype: TopTools_ListOfShape
        """
        return _BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Tools(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_BooleanOperation
BRepAlgoAPI_BooleanOperation.Operation = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Operation, None, BRepAlgoAPI_BooleanOperation)
BRepAlgoAPI_BooleanOperation.SetOperation = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_SetOperation, None, BRepAlgoAPI_BooleanOperation)
BRepAlgoAPI_BooleanOperation.SetTools = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_SetTools, None, BRepAlgoAPI_BooleanOperation)
BRepAlgoAPI_BooleanOperation.Shape1 = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Shape1, None, BRepAlgoAPI_BooleanOperation)
BRepAlgoAPI_BooleanOperation.Shape2 = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Shape2, None, BRepAlgoAPI_BooleanOperation)
BRepAlgoAPI_BooleanOperation.Tools = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Tools, None, BRepAlgoAPI_BooleanOperation)
BRepAlgoAPI_BooleanOperation_swigregister = _BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_swigregister
BRepAlgoAPI_BooleanOperation_swigregister(BRepAlgoAPI_BooleanOperation)

class BRepAlgoAPI_Splitter(BRepAlgoAPI_BuilderAlgo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * @name Constructors Empty constructor
        	:rtype: None
        * Constructor with already prepared intersection tool - PaveFiller
        	:param thePF:
        	:type thePF: BOPAlgo_PaveFiller
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Splitter_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Splitter(*args))

    def SetTools(self, *args) -> "void":
        """
        * @name Setters/Getters for the Tools Sets the Tool arguments
        	:param theLS:
        	:type theLS: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Splitter_SetTools(self, *args)


    def Tools(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the Tool arguments
        	:rtype: TopTools_ListOfShape
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Splitter_Tools(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Splitter
BRepAlgoAPI_Splitter.SetTools = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Splitter_SetTools, None, BRepAlgoAPI_Splitter)
BRepAlgoAPI_Splitter.Tools = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Splitter_Tools, None, BRepAlgoAPI_Splitter)
BRepAlgoAPI_Splitter_swigregister = _BRepAlgoAPI.BRepAlgoAPI_Splitter_swigregister
BRepAlgoAPI_Splitter_swigregister(BRepAlgoAPI_Splitter)

class BRepAlgoAPI_Common(BRepAlgoAPI_BooleanOperation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Empty constructor <PF> - PaveFiller object that is carried out
        	:param PF:
        	:type PF: BOPAlgo_PaveFiller
        	:rtype: None
        * Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None
        * Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation <PF> - PaveFiller object that is carried out Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param PF:
        	:type PF: BOPAlgo_PaveFiller
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Common_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Common(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Common
BRepAlgoAPI_Common_swigregister = _BRepAlgoAPI.BRepAlgoAPI_Common_swigregister
BRepAlgoAPI_Common_swigregister(BRepAlgoAPI_Common)

class BRepAlgoAPI_Cut(BRepAlgoAPI_BooleanOperation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Empty constructor <PF> - PaveFiller object that is carried out
        	:param PF:
        	:type PF: BOPAlgo_PaveFiller
        	:rtype: None
        * Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None
        * Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation <PF> - PaveFiller object that is carried out Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param aDSF:
        	:type aDSF: BOPAlgo_PaveFiller
        	:param bFWD: default value is Standard_True
        	:type bFWD: bool
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Cut_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Cut(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Cut
BRepAlgoAPI_Cut_swigregister = _BRepAlgoAPI.BRepAlgoAPI_Cut_swigregister
BRepAlgoAPI_Cut_swigregister(BRepAlgoAPI_Cut)

class BRepAlgoAPI_Fuse(BRepAlgoAPI_BooleanOperation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Empty constructor <PF> - PaveFiller object that is carried out
        	:param PF:
        	:type PF: BOPAlgo_PaveFiller
        	:rtype: None
        * Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None
        * Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation <PF> - PaveFiller object that is carried out Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param aDSF:
        	:type aDSF: BOPAlgo_PaveFiller
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Fuse_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Fuse(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Fuse
BRepAlgoAPI_Fuse_swigregister = _BRepAlgoAPI.BRepAlgoAPI_Fuse_swigregister
BRepAlgoAPI_Fuse_swigregister(BRepAlgoAPI_Fuse)

class BRepAlgoAPI_Section(BRepAlgoAPI_BooleanOperation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Approximation(self, *args) -> "void":
        """
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Section_Approximation(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Empty constructor <PF> - PaveFiller object that is carried out
        	:param PF:
        	:type PF: BOPAlgo_PaveFiller
        	:rtype: None
        * Constructor with two shapes <S1> -argument <S2> -tool <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None
        * Constructor with two shapes <S1> -argument <S2> -tool <PF> - PaveFiller object that is carried out <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param aDSF:
        	:type aDSF: BOPAlgo_PaveFiller
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None
        * Constructor with two shapes <S1> - argument <Pl> - tool <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param Pl:
        	:type Pl: gp_Pln
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None
        * Constructor with two shapes <S1> - argument <Sf> - tool <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param Sf:
        	:type Sf: Geom_Surface
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None
        * Constructor with two shapes <Sf> - argument <S2> - tool <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param Sf:
        	:type Sf: Geom_Surface
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None
        * Constructor with two shapes <Sf1> - argument <Sf2> - tool <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param Sf1:
        	:type Sf1: Geom_Surface
        	:param Sf2:
        	:type Sf2: Geom_Surface
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Section_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Section(*args))

    def ComputePCurveOn1(self, *args) -> "void":
        """
        * Indicates whether the P-Curve should be (or not) performed on the argument. By default, no parametric 2D curve (pcurve) is defined for the edges of the result. If ComputePCurve1 equals true, further computations performed to attach an P-Curve in the parametric space of the argument to the constructed edges. Obsolete
        	:param B:
        	:type B: bool
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Section_ComputePCurveOn1(self, *args)


    def ComputePCurveOn2(self, *args) -> "void":
        """
        * Indicates whether the P-Curve should be (or not) performed on the tool. By default, no parametric 2D curve (pcurve) is defined for the edges of the result. If ComputePCurve1 equals true, further computations performed to attach an P-Curve in the parametric space of the tool to the constructed edges. Obsolete
        	:param B:
        	:type B: bool
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Section_ComputePCurveOn2(self, *args)


    def HasAncestorFaceOn1(self, *args) -> "Standard_Boolean":
        """
        * get the face of the first part giving section edge <E>. Returns True on the 3 following conditions : 1/ <E> is an edge returned by the Shape() metwod. 2/ First part of section performed is a shape. 3/ <E> is built on a intersection curve (i.e <E> is not the result of common edges) When False, F remains untouched. Obsolete
        	:param E:
        	:type E: TopoDS_Shape
        	:param F:
        	:type F: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Section_HasAncestorFaceOn1(self, *args)


    def HasAncestorFaceOn2(self, *args) -> "Standard_Boolean":
        """
        * Identifies the ancestor faces of the intersection edge E resulting from the last computation performed in this framework, that is, the faces of the two original shapes on which the edge E lies: - HasAncestorFaceOn1 gives the ancestor face in the first shape, and - HasAncestorFaceOn2 gives the ancestor face in the second shape. These functions return true if an ancestor face F is found, or false if not. An ancestor face is identifiable for the edge E if the following conditions are satisfied: - the first part on which this algorithm performed its last computation is a shape, that is, it was not given as a surface or a plane at the time of construction of this algorithm or at a later time by the Init1 function, - E is one of the elementary edges built by the last computation of this section algorithm. To use these functions properly, you have to test the returned Boolean value before using the ancestor face: F is significant only if the returned Boolean value equals true. Obsolete
        	:param E:
        	:type E: TopoDS_Shape
        	:param F:
        	:type F: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Section_HasAncestorFaceOn2(self, *args)


    def Init1(self, *args) -> "void":
        """
        * initialize the argument <S1> - argument Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:rtype: None
        * initialize the argument <Pl> - argument Obsolete
        	:param Pl:
        	:type Pl: gp_Pln
        	:rtype: None
        * initialize the argument <Sf> - argument Obsolete
        	:param Sf:
        	:type Sf: Geom_Surface
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Section_Init1(self, *args)


    def Init2(self, *args) -> "void":
        """
        * initialize the tool <S2> - tool Obsolete
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None
        * initialize the tool <Pl> - tool Obsolete
        	:param Pl:
        	:type Pl: gp_Pln
        	:rtype: None
        * initialize the tool <Sf> - tool Obsolete
        	:param Sf:
        	:type Sf: Geom_Surface
        	:rtype: None
        """
        return _BRepAlgoAPI.BRepAlgoAPI_Section_Init2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Section
BRepAlgoAPI_Section.Approximation = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Section_Approximation, None, BRepAlgoAPI_Section)
BRepAlgoAPI_Section.ComputePCurveOn1 = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Section_ComputePCurveOn1, None, BRepAlgoAPI_Section)
BRepAlgoAPI_Section.ComputePCurveOn2 = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Section_ComputePCurveOn2, None, BRepAlgoAPI_Section)
BRepAlgoAPI_Section.HasAncestorFaceOn1 = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Section_HasAncestorFaceOn1, None, BRepAlgoAPI_Section)
BRepAlgoAPI_Section.HasAncestorFaceOn2 = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Section_HasAncestorFaceOn2, None, BRepAlgoAPI_Section)
BRepAlgoAPI_Section.Init1 = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Section_Init1, None, BRepAlgoAPI_Section)
BRepAlgoAPI_Section.Init2 = new_instancemethod(_BRepAlgoAPI.BRepAlgoAPI_Section_Init2, None, BRepAlgoAPI_Section)
BRepAlgoAPI_Section_swigregister = _BRepAlgoAPI.BRepAlgoAPI_Section_swigregister
BRepAlgoAPI_Section_swigregister(BRepAlgoAPI_Section)



