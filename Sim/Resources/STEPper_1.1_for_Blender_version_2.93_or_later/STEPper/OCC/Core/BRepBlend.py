# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepBlend module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepblend.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepBlend.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepBlend')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepBlend')
    _BRepBlend = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepBlend', [dirname(__file__)])
        except ImportError:
            import _BRepBlend
            return _BRepBlend
        try:
            _mod = imp.load_module('_BRepBlend', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepBlend = swig_import_helper()
    del swig_import_helper
else:
    import _BRepBlend
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepBlend.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepBlend.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepBlend.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepBlend.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepBlend.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepBlend.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepBlend.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepBlend.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepBlend.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepBlend.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepBlend.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepBlend.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepBlend.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepBlend.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepBlend.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepBlend.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepBlend.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepBlend.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepBlend.process_exception(error, method_name, class_name)
process_exception = _BRepBlend.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BlendFunc
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.Convert
import OCC.Core.Blend
import OCC.Core.Law
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.AppParCurves
import OCC.Core.AppBlend
import OCC.Core.IntSurf
import OCC.Core.ChFiDS
import OCC.Core.TopoDS
import OCC.Core.TopLoc
import OCC.Core.TopTools
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor

def Handle_BRepBlend_AppFuncRoot_Create() -> "opencascade::handle< BRepBlend_AppFuncRoot >":
    return _BRepBlend.Handle_BRepBlend_AppFuncRoot_Create()
Handle_BRepBlend_AppFuncRoot_Create = _BRepBlend.Handle_BRepBlend_AppFuncRoot_Create

def Handle_BRepBlend_AppFuncRoot_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepBlend_AppFuncRoot >":
    return _BRepBlend.Handle_BRepBlend_AppFuncRoot_DownCast(t)
Handle_BRepBlend_AppFuncRoot_DownCast = _BRepBlend.Handle_BRepBlend_AppFuncRoot_DownCast

def Handle_BRepBlend_AppFuncRoot_IsNull(t: 'opencascade::handle< BRepBlend_AppFuncRoot > const &') -> "bool":
    return _BRepBlend.Handle_BRepBlend_AppFuncRoot_IsNull(t)
Handle_BRepBlend_AppFuncRoot_IsNull = _BRepBlend.Handle_BRepBlend_AppFuncRoot_IsNull

def Handle_BRepBlend_Line_Create() -> "opencascade::handle< BRepBlend_Line >":
    return _BRepBlend.Handle_BRepBlend_Line_Create()
Handle_BRepBlend_Line_Create = _BRepBlend.Handle_BRepBlend_Line_Create

def Handle_BRepBlend_Line_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepBlend_Line >":
    return _BRepBlend.Handle_BRepBlend_Line_DownCast(t)
Handle_BRepBlend_Line_DownCast = _BRepBlend.Handle_BRepBlend_Line_DownCast

def Handle_BRepBlend_Line_IsNull(t: 'opencascade::handle< BRepBlend_Line > const &') -> "bool":
    return _BRepBlend.Handle_BRepBlend_Line_IsNull(t)
Handle_BRepBlend_Line_IsNull = _BRepBlend.Handle_BRepBlend_Line_IsNull

def Handle_BRepBlend_AppFunc_Create() -> "opencascade::handle< BRepBlend_AppFunc >":
    return _BRepBlend.Handle_BRepBlend_AppFunc_Create()
Handle_BRepBlend_AppFunc_Create = _BRepBlend.Handle_BRepBlend_AppFunc_Create

def Handle_BRepBlend_AppFunc_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepBlend_AppFunc >":
    return _BRepBlend.Handle_BRepBlend_AppFunc_DownCast(t)
Handle_BRepBlend_AppFunc_DownCast = _BRepBlend.Handle_BRepBlend_AppFunc_DownCast

def Handle_BRepBlend_AppFunc_IsNull(t: 'opencascade::handle< BRepBlend_AppFunc > const &') -> "bool":
    return _BRepBlend.Handle_BRepBlend_AppFunc_IsNull(t)
Handle_BRepBlend_AppFunc_IsNull = _BRepBlend.Handle_BRepBlend_AppFunc_IsNull

def Handle_BRepBlend_AppFuncRst_Create() -> "opencascade::handle< BRepBlend_AppFuncRst >":
    return _BRepBlend.Handle_BRepBlend_AppFuncRst_Create()
Handle_BRepBlend_AppFuncRst_Create = _BRepBlend.Handle_BRepBlend_AppFuncRst_Create

def Handle_BRepBlend_AppFuncRst_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepBlend_AppFuncRst >":
    return _BRepBlend.Handle_BRepBlend_AppFuncRst_DownCast(t)
Handle_BRepBlend_AppFuncRst_DownCast = _BRepBlend.Handle_BRepBlend_AppFuncRst_DownCast

def Handle_BRepBlend_AppFuncRst_IsNull(t: 'opencascade::handle< BRepBlend_AppFuncRst > const &') -> "bool":
    return _BRepBlend.Handle_BRepBlend_AppFuncRst_IsNull(t)
Handle_BRepBlend_AppFuncRst_IsNull = _BRepBlend.Handle_BRepBlend_AppFuncRst_IsNull

def Handle_BRepBlend_AppFuncRstRst_Create() -> "opencascade::handle< BRepBlend_AppFuncRstRst >":
    return _BRepBlend.Handle_BRepBlend_AppFuncRstRst_Create()
Handle_BRepBlend_AppFuncRstRst_Create = _BRepBlend.Handle_BRepBlend_AppFuncRstRst_Create

def Handle_BRepBlend_AppFuncRstRst_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepBlend_AppFuncRstRst >":
    return _BRepBlend.Handle_BRepBlend_AppFuncRstRst_DownCast(t)
Handle_BRepBlend_AppFuncRstRst_DownCast = _BRepBlend.Handle_BRepBlend_AppFuncRstRst_DownCast

def Handle_BRepBlend_AppFuncRstRst_IsNull(t: 'opencascade::handle< BRepBlend_AppFuncRstRst > const &') -> "bool":
    return _BRepBlend.Handle_BRepBlend_AppFuncRstRst_IsNull(t)
Handle_BRepBlend_AppFuncRstRst_IsNull = _BRepBlend.Handle_BRepBlend_AppFuncRstRst_IsNull
class BRepBlend_SequenceOfLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepBlend.BRepBlend_SequenceOfLine_swiginit(self, _BRepBlend.new_BRepBlend_SequenceOfLine(*args))
    delNode = staticmethod(_BRepBlend.BRepBlend_SequenceOfLine_delNode)
    __swig_destroy__ = _BRepBlend.delete_BRepBlend_SequenceOfLine
BRepBlend_SequenceOfLine.begin = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_begin, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.end = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_end, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.cbegin = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_cbegin, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.cend = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_cend, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Size = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Size, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Length = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Length, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Lower = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Lower, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Upper = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Upper, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.IsEmpty = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_IsEmpty, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Reverse = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Reverse, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Exchange = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Exchange, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Clear = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Clear, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Assign = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Assign, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Set = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Set, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Remove = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Remove, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Append = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Append, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Prepend = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Prepend, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.InsertBefore = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_InsertBefore, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.InsertAfter = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_InsertAfter, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Split = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Split, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.First = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_First, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.ChangeFirst = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_ChangeFirst, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Last = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Last, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.ChangeLast = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_ChangeLast, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.Value = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_Value, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.ChangeValue = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_ChangeValue, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.__call__ = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine___call__, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine.SetValue = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfLine_SetValue, None, BRepBlend_SequenceOfLine)
BRepBlend_SequenceOfLine_swigregister = _BRepBlend.BRepBlend_SequenceOfLine_swigregister
BRepBlend_SequenceOfLine_swigregister(BRepBlend_SequenceOfLine)

def BRepBlend_SequenceOfLine_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _BRepBlend.BRepBlend_SequenceOfLine_delNode(theNode, theAl)
BRepBlend_SequenceOfLine_delNode = _BRepBlend.BRepBlend_SequenceOfLine_delNode

class BRepBlend_SequenceOfPointOnRst(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepBlend.BRepBlend_SequenceOfPointOnRst_swiginit(self, _BRepBlend.new_BRepBlend_SequenceOfPointOnRst(*args))
    delNode = staticmethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_delNode)
    __swig_destroy__ = _BRepBlend.delete_BRepBlend_SequenceOfPointOnRst
BRepBlend_SequenceOfPointOnRst.begin = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_begin, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.end = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_end, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.cbegin = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_cbegin, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.cend = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_cend, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Size = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Size, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Length = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Length, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Lower = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Lower, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Upper = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Upper, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.IsEmpty = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_IsEmpty, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Reverse = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Reverse, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Exchange = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Exchange, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Clear = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Clear, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Assign = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Assign, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Set = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Set, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Remove = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Remove, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Append = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Append, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Prepend = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Prepend, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.InsertBefore = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_InsertBefore, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.InsertAfter = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_InsertAfter, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Split = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Split, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.First = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_First, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.ChangeFirst = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_ChangeFirst, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Last = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Last, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.ChangeLast = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_ChangeLast, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.Value = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_Value, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.ChangeValue = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_ChangeValue, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.__call__ = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst___call__, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst.SetValue = new_instancemethod(_BRepBlend.BRepBlend_SequenceOfPointOnRst_SetValue, None, BRepBlend_SequenceOfPointOnRst)
BRepBlend_SequenceOfPointOnRst_swigregister = _BRepBlend.BRepBlend_SequenceOfPointOnRst_swigregister
BRepBlend_SequenceOfPointOnRst_swigregister(BRepBlend_SequenceOfPointOnRst)

def BRepBlend_SequenceOfPointOnRst_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _BRepBlend.BRepBlend_SequenceOfPointOnRst_delNode(theNode, theAl)
BRepBlend_SequenceOfPointOnRst_delNode = _BRepBlend.BRepBlend_SequenceOfPointOnRst_delNode

class BRepBlend_AppFuncRoot(OCC.Core.Approx.Approx_SweepFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Point(self, *args) -> "void":
        """
        :param Func:
        	:type Func: Blend_AppFunction
        	:param Param:
        	:type Param: float
        	:param Sol:
        	:type Sol: math_Vector
        	:param Pnt:
        	:type Pnt: Blend_Point
        	:rtype: void
        """
        return _BRepBlend.BRepBlend_AppFuncRoot_Point(self, *args)


    def Vec(self, *args) -> "void":
        """
        :param Sol:
        	:type Sol: math_Vector
        	:param Pnt:
        	:type Pnt: Blend_Point
        	:rtype: void
        """
        return _BRepBlend.BRepBlend_AppFuncRoot_Vec(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepBlend_AppFuncRoot_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_AppFuncRoot
BRepBlend_AppFuncRoot.Point = new_instancemethod(_BRepBlend.BRepBlend_AppFuncRoot_Point, None, BRepBlend_AppFuncRoot)
BRepBlend_AppFuncRoot.Vec = new_instancemethod(_BRepBlend.BRepBlend_AppFuncRoot_Vec, None, BRepBlend_AppFuncRoot)
BRepBlend_AppFuncRoot_swigregister = _BRepBlend.BRepBlend_AppFuncRoot_swigregister
BRepBlend_AppFuncRoot_swigregister(BRepBlend_AppFuncRoot)

class BRepBlend_AppSurf(OCC.Core.AppBlend.AppBlend_Approx):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Degmin:
        	:type Degmin: int
        	:param Degmax:
        	:type Degmax: int
        	:param Tol3d:
        	:type Tol3d: float
        	:param Tol2d:
        	:type Tol2d: float
        	:param NbIt:
        	:type NbIt: int
        	:param KnownParameters: default value is Standard_False
        	:type KnownParameters: bool
        	:rtype: None
        """
        _BRepBlend.BRepBlend_AppSurf_swiginit(self, _BRepBlend.new_BRepBlend_AppSurf(*args))

    def Continuity(self, *args) -> "GeomAbs_Shape":
        """
        * returns the Continuity used in the approximation
        	:rtype: GeomAbs_Shape
        """
        return _BRepBlend.BRepBlend_AppSurf_Continuity(self, *args)


    def CriteriumWeight(self, *args) -> "void":
        """
        * returns the Weights (as percent) associed to the criterium used in the optimization.
        	:param W1:
        	:type W1: float
        	:param W2:
        	:type W2: float
        	:param W3:
        	:type W3: float
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_AppSurf_CriteriumWeight(self, *args)


    def Init(self, *args) -> "void":
        """
        :param Degmin:
        	:type Degmin: int
        	:param Degmax:
        	:type Degmax: int
        	:param Tol3d:
        	:type Tol3d: float
        	:param Tol2d:
        	:type Tol2d: float
        	:param NbIt:
        	:type NbIt: int
        	:param KnownParameters: default value is Standard_False
        	:type KnownParameters: bool
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_AppSurf_Init(self, *args)


    def ParType(self, *args) -> "Approx_ParametrizationType":
        """
        * returns the type of parametrization used in the approximation
        	:rtype: Approx_ParametrizationType
        """
        return _BRepBlend.BRepBlend_AppSurf_ParType(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param Lin:
        	:type Lin: BRepBlend_Line
        	:param SecGen:
        	:type SecGen: Blend_AppFunction
        	:param SpApprox: default value is Standard_False
        	:type SpApprox: bool
        	:rtype: None
        :param Lin:
        	:type Lin: BRepBlend_Line
        	:param SecGen:
        	:type SecGen: Blend_AppFunction
        	:param NbMaxP:
        	:type NbMaxP: int
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_AppSurf_Perform(self, *args)


    def PerformSmoothing(self, *args) -> "void":
        """
        :param Lin:
        	:type Lin: BRepBlend_Line
        	:param SecGen:
        	:type SecGen: Blend_AppFunction
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_AppSurf_PerformSmoothing(self, *args)


    def SetContinuity(self, *args) -> "void":
        """
        * Define the Continuity used in the approximation
        	:param C:
        	:type C: GeomAbs_Shape
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_AppSurf_SetContinuity(self, *args)


    def SetCriteriumWeight(self, *args) -> "void":
        """
        * define the Weights associed to the criterium used in the optimization. //! if Wi <= 0
        	:param W1:
        	:type W1: float
        	:param W2:
        	:type W2: float
        	:param W3:
        	:type W3: float
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_AppSurf_SetCriteriumWeight(self, *args)


    def SetParType(self, *args) -> "void":
        """
        * Define the type of parametrization used in the approximation
        	:param ParType:
        	:type ParType: Approx_ParametrizationType
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_AppSurf_SetParType(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_AppSurf
BRepBlend_AppSurf.Continuity = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_Continuity, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.CriteriumWeight = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_CriteriumWeight, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.Init = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_Init, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.ParType = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_ParType, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.Perform = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_Perform, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.PerformSmoothing = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_PerformSmoothing, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.SetContinuity = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_SetContinuity, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.SetCriteriumWeight = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_SetCriteriumWeight, None, BRepBlend_AppSurf)
BRepBlend_AppSurf.SetParType = new_instancemethod(_BRepBlend.BRepBlend_AppSurf_SetParType, None, BRepBlend_AppSurf)
BRepBlend_AppSurf_swigregister = _BRepBlend.BRepBlend_AppSurf_swigregister
BRepBlend_AppSurf_swigregister(BRepBlend_AppSurf)

class BRepBlend_AppSurface(OCC.Core.AppBlend.AppBlend_Approx):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Approximation of the new Surface (and eventually the 2d Curves on the support surfaces). Normaly the 2d curve are approximated with an tolerance given by the resolution on support surfaces, but if this tolerance is too large Tol2d is used.
        	:param Funct:
        	:type Funct: Approx_SweepFunction
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Tol3d:
        	:type Tol3d: float
        	:param Tol2d:
        	:type Tol2d: float
        	:param TolAngular:
        	:type TolAngular: float
        	:param Continuity: default value is GeomAbs_C0
        	:type Continuity: GeomAbs_Shape
        	:param Degmax: default value is 11
        	:type Degmax: int
        	:param Segmax: default value is 50
        	:type Segmax: int
        	:rtype: None
        """
        _BRepBlend.BRepBlend_AppSurface_swiginit(self, _BRepBlend.new_BRepBlend_AppSurface(*args))

    def DumpToString(self) -> "std::string":
        """DumpToString(BRepBlend_AppSurface self) -> std::string"""
        return _BRepBlend.BRepBlend_AppSurface_DumpToString(self)


    def Max2dError(self, *args) -> "Standard_Real":
        """
        * returns the maximum error in the <Index> 2d curve approximation.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _BRepBlend.BRepBlend_AppSurface_Max2dError(self, *args)


    def MaxErrorOnSurf(self, *args) -> "Standard_Real":
        """
        * returns the maximum error in the suface approximation.
        	:rtype: float
        """
        return _BRepBlend.BRepBlend_AppSurface_MaxErrorOnSurf(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_AppSurface
BRepBlend_AppSurface.DumpToString = new_instancemethod(_BRepBlend.BRepBlend_AppSurface_DumpToString, None, BRepBlend_AppSurface)
BRepBlend_AppSurface.Max2dError = new_instancemethod(_BRepBlend.BRepBlend_AppSurface_Max2dError, None, BRepBlend_AppSurface)
BRepBlend_AppSurface.MaxErrorOnSurf = new_instancemethod(_BRepBlend.BRepBlend_AppSurface_MaxErrorOnSurf, None, BRepBlend_AppSurface)
BRepBlend_AppSurface_swigregister = _BRepBlend.BRepBlend_AppSurface_swigregister
BRepBlend_AppSurface_swigregister(BRepBlend_AppSurface)

class BRepBlend_CSWalking(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Curv:
        	:type Curv: Adaptor3d_HCurve
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param Domain:
        	:type Domain: Adaptor3d_TopolTool
        	:rtype: None
        """
        _BRepBlend.BRepBlend_CSWalking_swiginit(self, _BRepBlend.new_BRepBlend_CSWalking(*args))

    def Complete(self, *args) -> "Standard_Boolean":
        """
        :param F:
        	:type F: Blend_CSFunction
        	:param Pmin:
        	:type Pmin: float
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_CSWalking_Complete(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_CSWalking_IsDone(self, *args)


    def Line(self, *args) -> "opencascade::handle< BRepBlend_Line > const &":
        """:rtype: opencascade::handle<BRepBlend_Line>"""
        return _BRepBlend.BRepBlend_CSWalking_Line(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param F:
        	:type F: Blend_CSFunction
        	:param Pdep:
        	:type Pdep: float
        	:param Pmax:
        	:type Pmax: float
        	:param MaxStep:
        	:type MaxStep: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param Soldep:
        	:type Soldep: math_Vector
        	:param Tolesp:
        	:type Tolesp: float
        	:param Fleche:
        	:type Fleche: float
        	:param Appro: default value is Standard_False
        	:type Appro: bool
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_CSWalking_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_CSWalking
BRepBlend_CSWalking.Complete = new_instancemethod(_BRepBlend.BRepBlend_CSWalking_Complete, None, BRepBlend_CSWalking)
BRepBlend_CSWalking.IsDone = new_instancemethod(_BRepBlend.BRepBlend_CSWalking_IsDone, None, BRepBlend_CSWalking)
BRepBlend_CSWalking.Line = new_instancemethod(_BRepBlend.BRepBlend_CSWalking_Line, None, BRepBlend_CSWalking)
BRepBlend_CSWalking.Perform = new_instancemethod(_BRepBlend.BRepBlend_CSWalking_Perform, None, BRepBlend_CSWalking)
BRepBlend_CSWalking_swigregister = _BRepBlend.BRepBlend_CSWalking_swigregister
BRepBlend_CSWalking_swigregister(BRepBlend_CSWalking)

class BRepBlend_CurvPointRadInv(OCC.Core.Blend.Blend_CurvPointFuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C1:
        	:type C1: Adaptor3d_HCurve
        	:param C2:
        	:type C2: Adaptor3d_HCurve
        	:rtype: None
        """
        _BRepBlend.BRepBlend_CurvPointRadInv_swiginit(self, _BRepBlend.new_BRepBlend_CurvPointRadInv(*args))

    def Set(self, *args) -> "void":
        """
        :param Choix:
        	:type Choix: int
        	:rtype: None
        * Set the Point on which a solution has to be found.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_CurvPointRadInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_CurvPointRadInv
BRepBlend_CurvPointRadInv.Set = new_instancemethod(_BRepBlend.BRepBlend_CurvPointRadInv_Set, None, BRepBlend_CurvPointRadInv)
BRepBlend_CurvPointRadInv_swigregister = _BRepBlend.BRepBlend_CurvPointRadInv_swigregister
BRepBlend_CurvPointRadInv_swigregister(BRepBlend_CurvPointRadInv)

class BRepBlend_Extremity(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddArc(self, *args) -> "void":
        """
        * Sets the values of a point which is on the arc A, at parameter Param.
        	:param A:
        	:type A: Adaptor2d_HCurve2d
        	:param Param:
        	:type Param: float
        	:param TLine:
        	:type TLine: IntSurf_Transition
        	:param TArc:
        	:type TArc: IntSurf_Transition
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Extremity_AddArc(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * Creates an extremity on a surface
        	:param P:
        	:type P: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Param:
        	:type Param: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Creates an extremity on a surface. This extremity matches the vertex <Vtx>.
        	:param P:
        	:type P: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Param:
        	:type Param: float
        	:param Tol:
        	:type Tol: float
        	:param Vtx:
        	:type Vtx: Adaptor3d_HVertex
        	:rtype: None
        * Creates an extremity on a curve
        	:param P:
        	:type P: gp_Pnt
        	:param W:
        	:type W: float
        	:param Param:
        	:type Param: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _BRepBlend.BRepBlend_Extremity_swiginit(self, _BRepBlend.new_BRepBlend_Extremity(*args))

    def HasTangent(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Tangent is stored.
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_Extremity_HasTangent(self, *args)


    def IsVertex(self, *args) -> "Standard_Boolean":
        """
        * Returns Standard_True when the point coincide with an existing vertex.
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_Extremity_IsVertex(self, *args)


    def NbPointOnRst(self, *args) -> "Standard_Integer":
        """
        * Returns the number of arc containing the extremity. If the method returns 0, the point is inside the surface. Otherwise, the extremity lies on at least 1 arc, and all the information (arc, parameter, transitions) are given by the point on restriction (PointOnRst) returned by the next method.
        	:rtype: int
        """
        return _BRepBlend.BRepBlend_Extremity_NbPointOnRst(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _BRepBlend.BRepBlend_Extremity_Parameter(self, *args)


    def ParameterOnGuide(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _BRepBlend.BRepBlend_Extremity_ParameterOnGuide(self, *args)


    def Parameters(self, *args) -> "void":
        """
        * This method returns the parameters of the point on the concerned surface.
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Extremity_Parameters(self, *args)


    def PointOnRst(self, *args) -> "BRepBlend_PointOnRst const &":
        """
        :param Index:
        	:type Index: int
        	:rtype: BRepBlend_PointOnRst
        """
        return _BRepBlend.BRepBlend_Extremity_PointOnRst(self, *args)


    def SetTangent(self, *args) -> "void":
        """
        * Set the tangent vector for an extremity on a surface.
        	:param Tangent:
        	:type Tangent: gp_Vec
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Extremity_SetTangent(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Set the values for an extremity on a surface.
        	:param P:
        	:type P: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Param:
        	:type Param: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Set the values for an extremity on a surface.This extremity matches the vertex <Vtx>.
        	:param P:
        	:type P: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Param:
        	:type Param: float
        	:param Tol:
        	:type Tol: float
        	:param Vtx:
        	:type Vtx: Adaptor3d_HVertex
        	:rtype: None
        * Set the values for an extremity on curve.
        	:param P:
        	:type P: gp_Pnt
        	:param W:
        	:type W: float
        	:param Param:
        	:type Param: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Extremity_SetValue(self, *args)


    def SetVertex(self, *args) -> "void":
        """
        * Set the values for an extremity on a curve.
        	:param V:
        	:type V: Adaptor3d_HVertex
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Extremity_SetVertex(self, *args)


    def Tangent(self, *args) -> "gp_Vec const":
        """
        * This method returns the value of tangent in 3d space.
        	:rtype: gp_Vec
        """
        return _BRepBlend.BRepBlend_Extremity_Tangent(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        * This method returns the fuzziness on the point in 3d space.
        	:rtype: float
        """
        return _BRepBlend.BRepBlend_Extremity_Tolerance(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """
        * This method returns the value of the point in 3d space.
        	:rtype: gp_Pnt
        """
        return _BRepBlend.BRepBlend_Extremity_Value(self, *args)


    def Vertex(self, *args) -> "opencascade::handle< Adaptor3d_HVertex > const &":
        """
        * Returns the vertex when IsVertex returns Standard_True.
        	:rtype: opencascade::handle<Adaptor3d_HVertex>
        """
        return _BRepBlend.BRepBlend_Extremity_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_Extremity
BRepBlend_Extremity.AddArc = new_instancemethod(_BRepBlend.BRepBlend_Extremity_AddArc, None, BRepBlend_Extremity)
BRepBlend_Extremity.HasTangent = new_instancemethod(_BRepBlend.BRepBlend_Extremity_HasTangent, None, BRepBlend_Extremity)
BRepBlend_Extremity.IsVertex = new_instancemethod(_BRepBlend.BRepBlend_Extremity_IsVertex, None, BRepBlend_Extremity)
BRepBlend_Extremity.NbPointOnRst = new_instancemethod(_BRepBlend.BRepBlend_Extremity_NbPointOnRst, None, BRepBlend_Extremity)
BRepBlend_Extremity.Parameter = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Parameter, None, BRepBlend_Extremity)
BRepBlend_Extremity.ParameterOnGuide = new_instancemethod(_BRepBlend.BRepBlend_Extremity_ParameterOnGuide, None, BRepBlend_Extremity)
BRepBlend_Extremity.Parameters = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Parameters, None, BRepBlend_Extremity)
BRepBlend_Extremity.PointOnRst = new_instancemethod(_BRepBlend.BRepBlend_Extremity_PointOnRst, None, BRepBlend_Extremity)
BRepBlend_Extremity.SetTangent = new_instancemethod(_BRepBlend.BRepBlend_Extremity_SetTangent, None, BRepBlend_Extremity)
BRepBlend_Extremity.SetValue = new_instancemethod(_BRepBlend.BRepBlend_Extremity_SetValue, None, BRepBlend_Extremity)
BRepBlend_Extremity.SetVertex = new_instancemethod(_BRepBlend.BRepBlend_Extremity_SetVertex, None, BRepBlend_Extremity)
BRepBlend_Extremity.Tangent = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Tangent, None, BRepBlend_Extremity)
BRepBlend_Extremity.Tolerance = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Tolerance, None, BRepBlend_Extremity)
BRepBlend_Extremity.Value = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Value, None, BRepBlend_Extremity)
BRepBlend_Extremity.Vertex = new_instancemethod(_BRepBlend.BRepBlend_Extremity_Vertex, None, BRepBlend_Extremity)
BRepBlend_Extremity_swigregister = _BRepBlend.BRepBlend_Extremity_swigregister
BRepBlend_Extremity_swigregister(BRepBlend_Extremity)

class BRepBlend_Line(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Append(self, *args) -> "void":
        """
        * Adds a point in the line.
        	:param P:
        	:type P: Blend_Point
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Line_Append(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _BRepBlend.BRepBlend_Line_swiginit(self, _BRepBlend.new_BRepBlend_Line(*args))

    def Clear(self, *args) -> "void":
        """
        * Clears the content of the line.
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Line_Clear(self, *args)


    def EndPointOnFirst(self, *args) -> "BRepBlend_Extremity const &":
        """
        * Returns the end point on S1.
        	:rtype: BRepBlend_Extremity
        """
        return _BRepBlend.BRepBlend_Line_EndPointOnFirst(self, *args)


    def EndPointOnSecond(self, *args) -> "BRepBlend_Extremity const &":
        """
        * Returns the point on S2.
        	:rtype: BRepBlend_Extremity
        """
        return _BRepBlend.BRepBlend_Line_EndPointOnSecond(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        * Adds a point in the line at the first place.
        	:param Index:
        	:type Index: int
        	:param P:
        	:type P: Blend_Point
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Line_InsertBefore(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points in the line.
        	:rtype: int
        """
        return _BRepBlend.BRepBlend_Line_NbPoints(self, *args)


    def Point(self, *args) -> "Blend_Point const &":
        """
        * Returns the point of range Index.
        	:param Index:
        	:type Index: int
        	:rtype: Blend_Point
        """
        return _BRepBlend.BRepBlend_Line_Point(self, *args)


    def Prepend(self, *args) -> "void":
        """
        * Adds a point in the line at the first place.
        	:param P:
        	:type P: Blend_Point
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Line_Prepend(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Removes from <self> all the items of positions between <FromIndex> and <ToIndex>. Raises an exception if the indices are out of bounds.
        	:param FromIndex:
        	:type FromIndex: int
        	:param ToIndex:
        	:type ToIndex: int
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Line_Remove(self, *args)


    def Set(self, *args) -> "void":
        """
        * Sets the value of the transition of the line on S1 and the line on S2.
        	:param TranS1:
        	:type TranS1: IntSurf_TypeTrans
        	:param TranS2:
        	:type TranS2: IntSurf_TypeTrans
        	:rtype: None
        * Sets the value of the transition of the line on a surface
        	:param Trans:
        	:type Trans: IntSurf_TypeTrans
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Line_Set(self, *args)


    def SetEndPoints(self, *args) -> "void":
        """
        * Sets tne values of the end points for the line.
        	:param EndPt1:
        	:type EndPt1: BRepBlend_Extremity
        	:param EndPt2:
        	:type EndPt2: BRepBlend_Extremity
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Line_SetEndPoints(self, *args)


    def SetStartPoints(self, *args) -> "void":
        """
        * Sets the values of the start points for the line.
        	:param StartPt1:
        	:type StartPt1: BRepBlend_Extremity
        	:param StartPt2:
        	:type StartPt2: BRepBlend_Extremity
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Line_SetStartPoints(self, *args)


    def StartPointOnFirst(self, *args) -> "BRepBlend_Extremity const &":
        """
        * Returns the start point on S1.
        	:rtype: BRepBlend_Extremity
        """
        return _BRepBlend.BRepBlend_Line_StartPointOnFirst(self, *args)


    def StartPointOnSecond(self, *args) -> "BRepBlend_Extremity const &":
        """
        * Returns the start point on S2
        	:rtype: BRepBlend_Extremity
        """
        return _BRepBlend.BRepBlend_Line_StartPointOnSecond(self, *args)


    def TransitionOnS(self, *args) -> "IntSurf_TypeTrans":
        """
        * Returns the type of the transition of the line defined on the surface.
        	:rtype: IntSurf_TypeTrans
        """
        return _BRepBlend.BRepBlend_Line_TransitionOnS(self, *args)


    def TransitionOnS1(self, *args) -> "IntSurf_TypeTrans":
        """
        * Returns the type of the transition of the line defined on the first surface. The transition is 'constant' along the line. The transition is IN if the line is oriented in such a way that the system of vectors (N,DRac,T) is right-handed, where N is the normal to the first surface at a point P, DRac is a vector tangent to the blending patch, oriented towards the valid part of this patch, T is the tangent to the line on S1 at P. The transitioon is OUT when the system of vectors is left-handed.
        	:rtype: IntSurf_TypeTrans
        """
        return _BRepBlend.BRepBlend_Line_TransitionOnS1(self, *args)


    def TransitionOnS2(self, *args) -> "IntSurf_TypeTrans":
        """
        * Returns the type of the transition of the line defined on the second surface. The transition is 'constant' along the line.
        	:rtype: IntSurf_TypeTrans
        """
        return _BRepBlend.BRepBlend_Line_TransitionOnS2(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepBlend_Line_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_Line
BRepBlend_Line.Append = new_instancemethod(_BRepBlend.BRepBlend_Line_Append, None, BRepBlend_Line)
BRepBlend_Line.Clear = new_instancemethod(_BRepBlend.BRepBlend_Line_Clear, None, BRepBlend_Line)
BRepBlend_Line.EndPointOnFirst = new_instancemethod(_BRepBlend.BRepBlend_Line_EndPointOnFirst, None, BRepBlend_Line)
BRepBlend_Line.EndPointOnSecond = new_instancemethod(_BRepBlend.BRepBlend_Line_EndPointOnSecond, None, BRepBlend_Line)
BRepBlend_Line.InsertBefore = new_instancemethod(_BRepBlend.BRepBlend_Line_InsertBefore, None, BRepBlend_Line)
BRepBlend_Line.NbPoints = new_instancemethod(_BRepBlend.BRepBlend_Line_NbPoints, None, BRepBlend_Line)
BRepBlend_Line.Point = new_instancemethod(_BRepBlend.BRepBlend_Line_Point, None, BRepBlend_Line)
BRepBlend_Line.Prepend = new_instancemethod(_BRepBlend.BRepBlend_Line_Prepend, None, BRepBlend_Line)
BRepBlend_Line.Remove = new_instancemethod(_BRepBlend.BRepBlend_Line_Remove, None, BRepBlend_Line)
BRepBlend_Line.Set = new_instancemethod(_BRepBlend.BRepBlend_Line_Set, None, BRepBlend_Line)
BRepBlend_Line.SetEndPoints = new_instancemethod(_BRepBlend.BRepBlend_Line_SetEndPoints, None, BRepBlend_Line)
BRepBlend_Line.SetStartPoints = new_instancemethod(_BRepBlend.BRepBlend_Line_SetStartPoints, None, BRepBlend_Line)
BRepBlend_Line.StartPointOnFirst = new_instancemethod(_BRepBlend.BRepBlend_Line_StartPointOnFirst, None, BRepBlend_Line)
BRepBlend_Line.StartPointOnSecond = new_instancemethod(_BRepBlend.BRepBlend_Line_StartPointOnSecond, None, BRepBlend_Line)
BRepBlend_Line.TransitionOnS = new_instancemethod(_BRepBlend.BRepBlend_Line_TransitionOnS, None, BRepBlend_Line)
BRepBlend_Line.TransitionOnS1 = new_instancemethod(_BRepBlend.BRepBlend_Line_TransitionOnS1, None, BRepBlend_Line)
BRepBlend_Line.TransitionOnS2 = new_instancemethod(_BRepBlend.BRepBlend_Line_TransitionOnS2, None, BRepBlend_Line)
BRepBlend_Line_swigregister = _BRepBlend.BRepBlend_Line_swigregister
BRepBlend_Line_swigregister(BRepBlend_Line)

class BRepBlend_PointOnRst(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Arc(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > const &":
        """
        * Returns the arc of restriction containing the vertex.
        	:rtype: opencascade::handle<Adaptor2d_HCurve2d>
        """
        return _BRepBlend.BRepBlend_PointOnRst_Arc(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Creates the PointOnRst on the arc A, at parameter Param, with the transition TLine on the walking line, and TArc on the arc A.
        	:param A:
        	:type A: Adaptor2d_HCurve2d
        	:param Param:
        	:type Param: float
        	:param TLine:
        	:type TLine: IntSurf_Transition
        	:param TArc:
        	:type TArc: IntSurf_Transition
        	:rtype: None
        """
        _BRepBlend.BRepBlend_PointOnRst_swiginit(self, _BRepBlend.new_BRepBlend_PointOnRst(*args))

    def ParameterOnArc(self, *args) -> "Standard_Real":
        """
        * Returns the parameter of the point on the arc returned by the method Arc().
        	:rtype: float
        """
        return _BRepBlend.BRepBlend_PointOnRst_ParameterOnArc(self, *args)


    def SetArc(self, *args) -> "void":
        """
        * Sets the values of a point which is on the arc A, at parameter Param.
        	:param A:
        	:type A: Adaptor2d_HCurve2d
        	:param Param:
        	:type Param: float
        	:param TLine:
        	:type TLine: IntSurf_Transition
        	:param TArc:
        	:type TArc: IntSurf_Transition
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_PointOnRst_SetArc(self, *args)


    def TransitionOnArc(self, *args) -> "IntSurf_Transition const &":
        """
        * Returns the transition of the point on the arc returned by Arc().
        	:rtype: IntSurf_Transition
        """
        return _BRepBlend.BRepBlend_PointOnRst_TransitionOnArc(self, *args)


    def TransitionOnLine(self, *args) -> "IntSurf_Transition const &":
        """
        * Returns the transition of the point on the line on surface.
        	:rtype: IntSurf_Transition
        """
        return _BRepBlend.BRepBlend_PointOnRst_TransitionOnLine(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_PointOnRst
BRepBlend_PointOnRst.Arc = new_instancemethod(_BRepBlend.BRepBlend_PointOnRst_Arc, None, BRepBlend_PointOnRst)
BRepBlend_PointOnRst.ParameterOnArc = new_instancemethod(_BRepBlend.BRepBlend_PointOnRst_ParameterOnArc, None, BRepBlend_PointOnRst)
BRepBlend_PointOnRst.SetArc = new_instancemethod(_BRepBlend.BRepBlend_PointOnRst_SetArc, None, BRepBlend_PointOnRst)
BRepBlend_PointOnRst.TransitionOnArc = new_instancemethod(_BRepBlend.BRepBlend_PointOnRst_TransitionOnArc, None, BRepBlend_PointOnRst)
BRepBlend_PointOnRst.TransitionOnLine = new_instancemethod(_BRepBlend.BRepBlend_PointOnRst_TransitionOnLine, None, BRepBlend_PointOnRst)
BRepBlend_PointOnRst_swigregister = _BRepBlend.BRepBlend_PointOnRst_swigregister
BRepBlend_PointOnRst_swigregister(BRepBlend_PointOnRst)

class BRepBlend_RstRstConstRad(OCC.Core.Blend.Blend_RstRstFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        	:type Surf1: Adaptor3d_HSurface
        	:param Rst1:
        	:type Rst1: Adaptor2d_HCurve2d
        	:param Surf2:
        	:type Surf2: Adaptor3d_HSurface
        	:param Rst2:
        	:type Rst2: Adaptor2d_HCurve2d
        	:param CGuide:
        	:type CGuide: Adaptor3d_HCurve
        	:rtype: None
        """
        _BRepBlend.BRepBlend_RstRstConstRad_swiginit(self, _BRepBlend.new_BRepBlend_RstRstConstRad(*args))

    def CenterCircleRst1Rst2(self, *args) -> "Standard_Boolean":
        """
        * Give the center of circle define by PtRst1, PtRst2 and radius ray.
        	:param PtRst1:
        	:type PtRst1: gp_Pnt
        	:param PtRst2:
        	:type PtRst2: gp_Pnt
        	:param np:
        	:type np: gp_Vec
        	:param Center:
        	:type Center: gp_Pnt
        	:param VdMed:
        	:type VdMed: gp_Vec
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_RstRstConstRad_CenterCircleRst1Rst2(self, *args)


    def GetTolerance(self, *args) -> "void":
        """
        :param Tolerance:
        	:type Tolerance: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.
        	:param BoundTol:
        	:type BoundTol: float
        	:param SurfTol:
        	:type SurfTol: float
        	:param AngleTol:
        	:type AngleTol: float
        	:param Tol3d:
        	:type Tol3d: math_Vector
        	:param Tol1D:
        	:type Tol1D: math_Vector
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_RstRstConstRad_GetTolerance(self, *args)


    def Section(self, *args) -> "Standard_Boolean":
        """
        :param Param:
        	:type Param: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param C:
        	:type C: gp_Circ
        	:rtype: None
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:rtype: bool
        :param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: None
        * Used for the first and last section The method returns Standard_True if the derivatives are computed, otherwise it returns Standard_False.
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param D2Poles:
        	:type D2Poles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param D2Poles2d:
        	:type D2Poles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:param D2Weigths:
        	:type D2Weigths: TColStd_Array1OfReal
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_RstRstConstRad_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        :param SurfRef1:
        	:type SurfRef1: Adaptor3d_HSurface
        	:param RstRef1:
        	:type RstRef1: Adaptor2d_HCurve2d
        	:param SurfRef2:
        	:type SurfRef2: Adaptor3d_HSurface
        	:param RstRef2:
        	:type RstRef2: Adaptor2d_HCurve2d
        	:rtype: None
        :param Param:
        	:type Param: float
        	:rtype: None
        * Sets the bounds of the parametric interval on the guide line. This determines the derivatives in these values if the function is not Cn.
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        :param Radius:
        	:type Radius: float
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        * Sets the type of section generation for the approximations.
        	:param TypeSection:
        	:type TypeSection: BlendFunc_SectionShape
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_RstRstConstRad_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_RstRstConstRad
BRepBlend_RstRstConstRad.CenterCircleRst1Rst2 = new_instancemethod(_BRepBlend.BRepBlend_RstRstConstRad_CenterCircleRst1Rst2, None, BRepBlend_RstRstConstRad)
BRepBlend_RstRstConstRad.GetTolerance = new_instancemethod(_BRepBlend.BRepBlend_RstRstConstRad_GetTolerance, None, BRepBlend_RstRstConstRad)
BRepBlend_RstRstConstRad.Section = new_instancemethod(_BRepBlend.BRepBlend_RstRstConstRad_Section, None, BRepBlend_RstRstConstRad)
BRepBlend_RstRstConstRad.Set = new_instancemethod(_BRepBlend.BRepBlend_RstRstConstRad_Set, None, BRepBlend_RstRstConstRad)
BRepBlend_RstRstConstRad_swigregister = _BRepBlend.BRepBlend_RstRstConstRad_swigregister
BRepBlend_RstRstConstRad_swigregister(BRepBlend_RstRstConstRad)

class BRepBlend_RstRstEvolRad(OCC.Core.Blend.Blend_RstRstFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        	:type Surf1: Adaptor3d_HSurface
        	:param Rst1:
        	:type Rst1: Adaptor2d_HCurve2d
        	:param Surf2:
        	:type Surf2: Adaptor3d_HSurface
        	:param Rst2:
        	:type Rst2: Adaptor2d_HCurve2d
        	:param CGuide:
        	:type CGuide: Adaptor3d_HCurve
        	:param Evol:
        	:type Evol: Law_Function
        	:rtype: None
        """
        _BRepBlend.BRepBlend_RstRstEvolRad_swiginit(self, _BRepBlend.new_BRepBlend_RstRstEvolRad(*args))

    def CenterCircleRst1Rst2(self, *args) -> "Standard_Boolean":
        """
        * Gives the center of circle defined by PtRst1, PtRst2 and radius ray.
        	:param PtRst1:
        	:type PtRst1: gp_Pnt
        	:param PtRst2:
        	:type PtRst2: gp_Pnt
        	:param np:
        	:type np: gp_Vec
        	:param Center:
        	:type Center: gp_Pnt
        	:param VdMed:
        	:type VdMed: gp_Vec
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_RstRstEvolRad_CenterCircleRst1Rst2(self, *args)


    def GetTolerance(self, *args) -> "void":
        """
        :param Tolerance:
        	:type Tolerance: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.
        	:param BoundTol:
        	:type BoundTol: float
        	:param SurfTol:
        	:type SurfTol: float
        	:param AngleTol:
        	:type AngleTol: float
        	:param Tol3d:
        	:type Tol3d: math_Vector
        	:param Tol1D:
        	:type Tol1D: math_Vector
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_RstRstEvolRad_GetTolerance(self, *args)


    def Section(self, *args) -> "Standard_Boolean":
        """
        :param Param:
        	:type Param: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param C:
        	:type C: gp_Circ
        	:rtype: None
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:rtype: bool
        :param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: None
        * Used for the first and last section The method returns Standard_True if the derivatives are computed, otherwise it returns Standard_False.
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param D2Poles:
        	:type D2Poles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param D2Poles2d:
        	:type D2Poles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:param D2Weigths:
        	:type D2Weigths: TColStd_Array1OfReal
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_RstRstEvolRad_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        :param SurfRef1:
        	:type SurfRef1: Adaptor3d_HSurface
        	:param RstRef1:
        	:type RstRef1: Adaptor2d_HCurve2d
        	:param SurfRef2:
        	:type SurfRef2: Adaptor3d_HSurface
        	:param RstRef2:
        	:type RstRef2: Adaptor2d_HCurve2d
        	:rtype: None
        :param Param:
        	:type Param: float
        	:rtype: None
        * Sets the bounds of the parametric interval on the guide line. This determines the derivatives in these values if the function is not Cn.
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        :param Choix:
        	:type Choix: int
        	:rtype: None
        * Sets the type of section generation for the approximations.
        	:param TypeSection:
        	:type TypeSection: BlendFunc_SectionShape
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_RstRstEvolRad_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_RstRstEvolRad
BRepBlend_RstRstEvolRad.CenterCircleRst1Rst2 = new_instancemethod(_BRepBlend.BRepBlend_RstRstEvolRad_CenterCircleRst1Rst2, None, BRepBlend_RstRstEvolRad)
BRepBlend_RstRstEvolRad.GetTolerance = new_instancemethod(_BRepBlend.BRepBlend_RstRstEvolRad_GetTolerance, None, BRepBlend_RstRstEvolRad)
BRepBlend_RstRstEvolRad.Section = new_instancemethod(_BRepBlend.BRepBlend_RstRstEvolRad_Section, None, BRepBlend_RstRstEvolRad)
BRepBlend_RstRstEvolRad.Set = new_instancemethod(_BRepBlend.BRepBlend_RstRstEvolRad_Set, None, BRepBlend_RstRstEvolRad)
BRepBlend_RstRstEvolRad_swigregister = _BRepBlend.BRepBlend_RstRstEvolRad_swigregister
BRepBlend_RstRstEvolRad_swigregister(BRepBlend_RstRstEvolRad)

class BRepBlend_RstRstLineBuilder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        	:type Surf1: Adaptor3d_HSurface
        	:param Rst1:
        	:type Rst1: Adaptor2d_HCurve2d
        	:param Domain1:
        	:type Domain1: Adaptor3d_TopolTool
        	:param Surf2:
        	:type Surf2: Adaptor3d_HSurface
        	:param Rst2:
        	:type Rst2: Adaptor2d_HCurve2d
        	:param Domain2:
        	:type Domain2: Adaptor3d_TopolTool
        	:rtype: None
        """
        _BRepBlend.BRepBlend_RstRstLineBuilder_swiginit(self, _BRepBlend.new_BRepBlend_RstRstLineBuilder(*args))

    def Complete(self, *args) -> "Standard_Boolean":
        """
        :param Func:
        	:type Func: Blend_RstRstFunction
        	:param Finv1:
        	:type Finv1: Blend_SurfCurvFuncInv
        	:param FinvP1:
        	:type FinvP1: Blend_CurvPointFuncInv
        	:param Finv2:
        	:type Finv2: Blend_SurfCurvFuncInv
        	:param FinvP2:
        	:type FinvP2: Blend_CurvPointFuncInv
        	:param Pmin:
        	:type Pmin: float
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Complete(self, *args)


    def Decroch1End(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Decroch1End(self, *args)


    def Decroch1Start(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Decroch1Start(self, *args)


    def Decroch2End(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Decroch2End(self, *args)


    def Decroch2Start(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Decroch2Start(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_RstRstLineBuilder_IsDone(self, *args)


    def Line(self, *args) -> "opencascade::handle< BRepBlend_Line > const &":
        """:rtype: opencascade::handle<BRepBlend_Line>"""
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Line(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param Func:
        	:type Func: Blend_RstRstFunction
        	:param Finv1:
        	:type Finv1: Blend_SurfCurvFuncInv
        	:param FinvP1:
        	:type FinvP1: Blend_CurvPointFuncInv
        	:param Finv2:
        	:type Finv2: Blend_SurfCurvFuncInv
        	:param FinvP2:
        	:type FinvP2: Blend_CurvPointFuncInv
        	:param Pdep:
        	:type Pdep: float
        	:param Pmax:
        	:type Pmax: float
        	:param MaxStep:
        	:type MaxStep: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param Soldep:
        	:type Soldep: math_Vector
        	:param Tolesp:
        	:type Tolesp: float
        	:param Fleche:
        	:type Fleche: float
        	:param Appro: default value is Standard_False
        	:type Appro: bool
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_Perform(self, *args)


    def PerformFirstSection(self, *args) -> "Standard_Boolean":
        """
        :param Func:
        	:type Func: Blend_RstRstFunction
        	:param Finv1:
        	:type Finv1: Blend_SurfCurvFuncInv
        	:param FinvP1:
        	:type FinvP1: Blend_CurvPointFuncInv
        	:param Finv2:
        	:type Finv2: Blend_SurfCurvFuncInv
        	:param FinvP2:
        	:type FinvP2: Blend_CurvPointFuncInv
        	:param Pdep:
        	:type Pdep: float
        	:param Pmax:
        	:type Pmax: float
        	:param Soldep:
        	:type Soldep: math_Vector
        	:param Tolesp:
        	:type Tolesp: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param RecRst1:
        	:type RecRst1: bool
        	:param RecP1:
        	:type RecP1: bool
        	:param RecRst2:
        	:type RecRst2: bool
        	:param RecP2:
        	:type RecP2: bool
        	:param Psol:
        	:type Psol: float
        	:param ParSol:
        	:type ParSol: math_Vector
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_RstRstLineBuilder_PerformFirstSection(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_RstRstLineBuilder
BRepBlend_RstRstLineBuilder.Complete = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Complete, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Decroch1End = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Decroch1End, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Decroch1Start = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Decroch1Start, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Decroch2End = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Decroch2End, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Decroch2Start = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Decroch2Start, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.IsDone = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_IsDone, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Line = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Line, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.Perform = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_Perform, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder.PerformFirstSection = new_instancemethod(_BRepBlend.BRepBlend_RstRstLineBuilder_PerformFirstSection, None, BRepBlend_RstRstLineBuilder)
BRepBlend_RstRstLineBuilder_swigregister = _BRepBlend.BRepBlend_RstRstLineBuilder_swigregister
BRepBlend_RstRstLineBuilder_swigregister(BRepBlend_RstRstLineBuilder)

class BRepBlend_SurfCurvConstRadInv(OCC.Core.Blend.Blend_SurfCurvFuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:param Cg:
        	:type Cg: Adaptor3d_HCurve
        	:rtype: None
        """
        _BRepBlend.BRepBlend_SurfCurvConstRadInv_swiginit(self, _BRepBlend.new_BRepBlend_SurfCurvConstRadInv(*args))

    def Set(self, *args) -> "void":
        """
        :param R:
        	:type R: float
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        * Set the restriction on which a solution has to be found.
        	:param Rst:
        	:type Rst: Adaptor2d_HCurve2d
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_SurfCurvConstRadInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_SurfCurvConstRadInv
BRepBlend_SurfCurvConstRadInv.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfCurvConstRadInv_Set, None, BRepBlend_SurfCurvConstRadInv)
BRepBlend_SurfCurvConstRadInv_swigregister = _BRepBlend.BRepBlend_SurfCurvConstRadInv_swigregister
BRepBlend_SurfCurvConstRadInv_swigregister(BRepBlend_SurfCurvConstRadInv)

class BRepBlend_SurfCurvEvolRadInv(OCC.Core.Blend.Blend_SurfCurvFuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:param Cg:
        	:type Cg: Adaptor3d_HCurve
        	:param Evol:
        	:type Evol: Law_Function
        	:rtype: None
        """
        _BRepBlend.BRepBlend_SurfCurvEvolRadInv_swiginit(self, _BRepBlend.new_BRepBlend_SurfCurvEvolRadInv(*args))

    def Set(self, *args) -> "void":
        """
        :param Choix:
        	:type Choix: int
        	:rtype: None
        * Set the restriction on which a solution has to be found.
        	:param Rst:
        	:type Rst: Adaptor2d_HCurve2d
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_SurfCurvEvolRadInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_SurfCurvEvolRadInv
BRepBlend_SurfCurvEvolRadInv.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfCurvEvolRadInv_Set, None, BRepBlend_SurfCurvEvolRadInv)
BRepBlend_SurfCurvEvolRadInv_swigregister = _BRepBlend.BRepBlend_SurfCurvEvolRadInv_swigregister
BRepBlend_SurfCurvEvolRadInv_swigregister(BRepBlend_SurfCurvEvolRadInv)

class BRepBlend_SurfPointConstRadInv(OCC.Core.Blend.Blend_SurfPointFuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BRepBlend.BRepBlend_SurfPointConstRadInv_swiginit(self, _BRepBlend.new_BRepBlend_SurfPointConstRadInv(*args))

    def Set(self, *args) -> "void":
        """
        :param R:
        	:type R: float
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        * Set the Point on which a solution has to be found.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_SurfPointConstRadInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_SurfPointConstRadInv
BRepBlend_SurfPointConstRadInv.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfPointConstRadInv_Set, None, BRepBlend_SurfPointConstRadInv)
BRepBlend_SurfPointConstRadInv_swigregister = _BRepBlend.BRepBlend_SurfPointConstRadInv_swigregister
BRepBlend_SurfPointConstRadInv_swigregister(BRepBlend_SurfPointConstRadInv)

class BRepBlend_SurfPointEvolRadInv(OCC.Core.Blend.Blend_SurfPointFuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:param Evol:
        	:type Evol: Law_Function
        	:rtype: None
        """
        _BRepBlend.BRepBlend_SurfPointEvolRadInv_swiginit(self, _BRepBlend.new_BRepBlend_SurfPointEvolRadInv(*args))

    def Set(self, *args) -> "void":
        """
        :param Choix:
        	:type Choix: int
        	:rtype: None
        * Set the Point on which a solution has to be found.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_SurfPointEvolRadInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_SurfPointEvolRadInv
BRepBlend_SurfPointEvolRadInv.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfPointEvolRadInv_Set, None, BRepBlend_SurfPointEvolRadInv)
BRepBlend_SurfPointEvolRadInv_swigregister = _BRepBlend.BRepBlend_SurfPointEvolRadInv_swigregister
BRepBlend_SurfPointEvolRadInv_swigregister(BRepBlend_SurfPointEvolRadInv)

class BRepBlend_SurfRstConstRad(OCC.Core.Blend.Blend_SurfRstFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param SurfRst:
        	:type SurfRst: Adaptor3d_HSurface
        	:param Rst:
        	:type Rst: Adaptor2d_HCurve2d
        	:param CGuide:
        	:type CGuide: Adaptor3d_HCurve
        	:rtype: None
        """
        _BRepBlend.BRepBlend_SurfRstConstRad_swiginit(self, _BRepBlend.new_BRepBlend_SurfRstConstRad(*args))

    def GetTolerance(self, *args) -> "void":
        """
        :param Tolerance:
        	:type Tolerance: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.
        	:param BoundTol:
        	:type BoundTol: float
        	:param SurfTol:
        	:type SurfTol: float
        	:param AngleTol:
        	:type AngleTol: float
        	:param Tol3d:
        	:type Tol3d: math_Vector
        	:param Tol1D:
        	:type Tol1D: math_Vector
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_SurfRstConstRad_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param W:
        	:type W: float
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param C:
        	:type C: gp_Circ
        	:rtype: None
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:rtype: bool
        * Used for the first and last section The method returns Standard_True if the derivatives are computed, otherwise it returns Standard_False.
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param D2Poles:
        	:type D2Poles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param D2Poles2d:
        	:type D2Poles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:param D2Weigths:
        	:type D2Weigths: TColStd_Array1OfReal
        	:rtype: bool
        :param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_SurfRstConstRad_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        :param SurfRef:
        	:type SurfRef: Adaptor3d_HSurface
        	:param RstRef:
        	:type RstRef: Adaptor2d_HCurve2d
        	:rtype: None
        :param Param:
        	:type Param: float
        	:rtype: None
        * Sets the bounds of the parametric interval on the guide line. This determines the derivatives in these values if the function is not Cn.
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        :param Radius:
        	:type Radius: float
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        * Sets the type of section generation for the approximations.
        	:param TypeSection:
        	:type TypeSection: BlendFunc_SectionShape
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_SurfRstConstRad_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_SurfRstConstRad
BRepBlend_SurfRstConstRad.GetTolerance = new_instancemethod(_BRepBlend.BRepBlend_SurfRstConstRad_GetTolerance, None, BRepBlend_SurfRstConstRad)
BRepBlend_SurfRstConstRad.Section = new_instancemethod(_BRepBlend.BRepBlend_SurfRstConstRad_Section, None, BRepBlend_SurfRstConstRad)
BRepBlend_SurfRstConstRad.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfRstConstRad_Set, None, BRepBlend_SurfRstConstRad)
BRepBlend_SurfRstConstRad_swigregister = _BRepBlend.BRepBlend_SurfRstConstRad_swigregister
BRepBlend_SurfRstConstRad_swigregister(BRepBlend_SurfRstConstRad)

class BRepBlend_SurfRstEvolRad(OCC.Core.Blend.Blend_SurfRstFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param SurfRst:
        	:type SurfRst: Adaptor3d_HSurface
        	:param Rst:
        	:type Rst: Adaptor2d_HCurve2d
        	:param CGuide:
        	:type CGuide: Adaptor3d_HCurve
        	:param Evol:
        	:type Evol: Law_Function
        	:rtype: None
        """
        _BRepBlend.BRepBlend_SurfRstEvolRad_swiginit(self, _BRepBlend.new_BRepBlend_SurfRstEvolRad(*args))

    def GetTolerance(self, *args) -> "void":
        """
        :param Tolerance:
        	:type Tolerance: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.
        	:param BoundTol:
        	:type BoundTol: float
        	:param SurfTol:
        	:type SurfTol: float
        	:param AngleTol:
        	:type AngleTol: float
        	:param Tol3d:
        	:type Tol3d: math_Vector
        	:param Tol1D:
        	:type Tol1D: math_Vector
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_SurfRstEvolRad_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param W:
        	:type W: float
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param C:
        	:type C: gp_Circ
        	:rtype: None
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:rtype: bool
        * Used for the first and last section The method returns Standard_True if the derivatives are computed, otherwise it returns Standard_False.
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param D2Poles:
        	:type D2Poles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param D2Poles2d:
        	:type D2Poles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:param D2Weigths:
        	:type D2Weigths: TColStd_Array1OfReal
        	:rtype: bool
        :param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_SurfRstEvolRad_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        :param SurfRef:
        	:type SurfRef: Adaptor3d_HSurface
        	:param RstRef:
        	:type RstRef: Adaptor2d_HCurve2d
        	:rtype: None
        :param Param:
        	:type Param: float
        	:rtype: None
        * Sets the bounds of the parametric interval on the guide line. This determines the derivatives in these values if the function is not Cn.
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        :param Choix:
        	:type Choix: int
        	:rtype: None
        * Sets the type of section generation for the approximations.
        	:param TypeSection:
        	:type TypeSection: BlendFunc_SectionShape
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_SurfRstEvolRad_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_SurfRstEvolRad
BRepBlend_SurfRstEvolRad.GetTolerance = new_instancemethod(_BRepBlend.BRepBlend_SurfRstEvolRad_GetTolerance, None, BRepBlend_SurfRstEvolRad)
BRepBlend_SurfRstEvolRad.Section = new_instancemethod(_BRepBlend.BRepBlend_SurfRstEvolRad_Section, None, BRepBlend_SurfRstEvolRad)
BRepBlend_SurfRstEvolRad.Set = new_instancemethod(_BRepBlend.BRepBlend_SurfRstEvolRad_Set, None, BRepBlend_SurfRstEvolRad)
BRepBlend_SurfRstEvolRad_swigregister = _BRepBlend.BRepBlend_SurfRstEvolRad_swigregister
BRepBlend_SurfRstEvolRad_swigregister(BRepBlend_SurfRstEvolRad)

class BRepBlend_SurfRstLineBuilder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ArcToRecadre(self, *args) -> "Standard_Integer":
        """
        :param Sol:
        	:type Sol: math_Vector
        	:param PrevIndex:
        	:type PrevIndex: int
        	:param pt2d:
        	:type pt2d: gp_Pnt2d
        	:param lastpt2d:
        	:type lastpt2d: gp_Pnt2d
        	:param ponarc:
        	:type ponarc: float
        	:rtype: int
        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_ArcToRecadre(self, *args)


    def __init__(self, *args):
        """
        :param Surf1:
        	:type Surf1: Adaptor3d_HSurface
        	:param Domain1:
        	:type Domain1: Adaptor3d_TopolTool
        	:param Surf2:
        	:type Surf2: Adaptor3d_HSurface
        	:param Rst:
        	:type Rst: Adaptor2d_HCurve2d
        	:param Domain2:
        	:type Domain2: Adaptor3d_TopolTool
        	:rtype: None
        """
        _BRepBlend.BRepBlend_SurfRstLineBuilder_swiginit(self, _BRepBlend.new_BRepBlend_SurfRstLineBuilder(*args))

    def Complete(self, *args) -> "Standard_Boolean":
        """
        :param Func:
        	:type Func: Blend_SurfRstFunction
        	:param Finv:
        	:type Finv: Blend_FuncInv
        	:param FinvP:
        	:type FinvP: Blend_SurfPointFuncInv
        	:param FinvC:
        	:type FinvC: Blend_SurfCurvFuncInv
        	:param Pmin:
        	:type Pmin: float
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_Complete(self, *args)


    def DecrochEnd(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_DecrochEnd(self, *args)


    def DecrochStart(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_DecrochStart(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_IsDone(self, *args)


    def Line(self, *args) -> "opencascade::handle< BRepBlend_Line > const &":
        """:rtype: opencascade::handle<BRepBlend_Line>"""
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_Line(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param Func:
        	:type Func: Blend_SurfRstFunction
        	:param Finv:
        	:type Finv: Blend_FuncInv
        	:param FinvP:
        	:type FinvP: Blend_SurfPointFuncInv
        	:param FinvC:
        	:type FinvC: Blend_SurfCurvFuncInv
        	:param Pdep:
        	:type Pdep: float
        	:param Pmax:
        	:type Pmax: float
        	:param MaxStep:
        	:type MaxStep: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param Soldep:
        	:type Soldep: math_Vector
        	:param Tolesp:
        	:type Tolesp: float
        	:param Fleche:
        	:type Fleche: float
        	:param Appro: default value is Standard_False
        	:type Appro: bool
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_Perform(self, *args)


    def PerformFirstSection(self, *args) -> "Standard_Boolean":
        """
        :param Func:
        	:type Func: Blend_SurfRstFunction
        	:param Finv:
        	:type Finv: Blend_FuncInv
        	:param FinvP:
        	:type FinvP: Blend_SurfPointFuncInv
        	:param FinvC:
        	:type FinvC: Blend_SurfCurvFuncInv
        	:param Pdep:
        	:type Pdep: float
        	:param Pmax:
        	:type Pmax: float
        	:param Soldep:
        	:type Soldep: math_Vector
        	:param Tolesp:
        	:type Tolesp: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param RecRst:
        	:type RecRst: bool
        	:param RecP:
        	:type RecP: bool
        	:param RecS:
        	:type RecS: bool
        	:param Psol:
        	:type Psol: float
        	:param ParSol:
        	:type ParSol: math_Vector
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_SurfRstLineBuilder_PerformFirstSection(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_SurfRstLineBuilder
BRepBlend_SurfRstLineBuilder.ArcToRecadre = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_ArcToRecadre, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.Complete = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_Complete, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.DecrochEnd = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_DecrochEnd, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.DecrochStart = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_DecrochStart, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.IsDone = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_IsDone, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.Line = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_Line, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.Perform = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_Perform, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder.PerformFirstSection = new_instancemethod(_BRepBlend.BRepBlend_SurfRstLineBuilder_PerformFirstSection, None, BRepBlend_SurfRstLineBuilder)
BRepBlend_SurfRstLineBuilder_swigregister = _BRepBlend.BRepBlend_SurfRstLineBuilder_swigregister
BRepBlend_SurfRstLineBuilder_swigregister(BRepBlend_SurfRstLineBuilder)

class BRepBlend_Walking(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddSingularPoint(self, *args) -> "void":
        """
        * To define singular points computed before walking.
        	:param P:
        	:type P: Blend_Point
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Walking_AddSingularPoint(self, *args)


    def __init__(self, *args):
        """
        :param Surf1:
        	:type Surf1: Adaptor3d_HSurface
        	:param Surf2:
        	:type Surf2: Adaptor3d_HSurface
        	:param Domain1:
        	:type Domain1: Adaptor3d_TopolTool
        	:param Domain2:
        	:type Domain2: Adaptor3d_TopolTool
        	:param HGuide:
        	:type HGuide: ChFiDS_HElSpine
        	:rtype: None
        """
        _BRepBlend.BRepBlend_Walking_swiginit(self, _BRepBlend.new_BRepBlend_Walking(*args))

    def Check(self, *args) -> "void":
        """
        :param C:
        	:type C: bool
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Walking_Check(self, *args)


    def Check2d(self, *args) -> "void":
        """
        :param C:
        	:type C: bool
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Walking_Check2d(self, *args)


    def ClassificationOnS1(self, *args) -> "void":
        """
        :param C:
        	:type C: bool
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Walking_ClassificationOnS1(self, *args)


    def ClassificationOnS2(self, *args) -> "void":
        """
        :param C:
        	:type C: bool
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Walking_ClassificationOnS2(self, *args)


    def Complete(self, *args) -> "Standard_Boolean":
        """
        :param F:
        	:type F: Blend_Function
        	:param FInv:
        	:type FInv: Blend_FuncInv
        	:param Pmin:
        	:type Pmin: float
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_Walking_Complete(self, *args)


    def Continu(self, *args) -> "Standard_Boolean":
        """
        :param F:
        	:type F: Blend_Function
        	:param FInv:
        	:type FInv: Blend_FuncInv
        	:param P:
        	:type P: float
        	:rtype: bool
        :param F:
        	:type F: Blend_Function
        	:param FInv:
        	:type FInv: Blend_FuncInv
        	:param P:
        	:type P: float
        	:param OnS1:
        	:type OnS1: bool
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_Walking_Continu(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_Walking_IsDone(self, *args)


    def Line(self, *args) -> "opencascade::handle< BRepBlend_Line > const &":
        """:rtype: opencascade::handle<BRepBlend_Line>"""
        return _BRepBlend.BRepBlend_Walking_Line(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param F:
        	:type F: Blend_Function
        	:param FInv:
        	:type FInv: Blend_FuncInv
        	:param Pdep:
        	:type Pdep: float
        	:param Pmax:
        	:type Pmax: float
        	:param MaxStep:
        	:type MaxStep: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param Soldep:
        	:type Soldep: math_Vector
        	:param Tolesp:
        	:type Tolesp: float
        	:param Fleche:
        	:type Fleche: float
        	:param Appro: default value is Standard_False
        	:type Appro: bool
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Walking_Perform(self, *args)


    def PerformFirstSection(self, *args) -> "Standard_Boolean":
        """
        :param F:
        	:type F: Blend_Function
        	:param Pdep:
        	:type Pdep: float
        	:param ParDep:
        	:type ParDep: math_Vector
        	:param Tolesp:
        	:type Tolesp: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param Pos1:
        	:type Pos1: TopAbs_State
        	:param Pos2:
        	:type Pos2: TopAbs_State
        	:rtype: bool
        :param F:
        	:type F: Blend_Function
        	:param FInv:
        	:type FInv: Blend_FuncInv
        	:param Pdep:
        	:type Pdep: float
        	:param Pmax:
        	:type Pmax: float
        	:param ParDep:
        	:type ParDep: math_Vector
        	:param Tolesp:
        	:type Tolesp: float
        	:param TolGuide:
        	:type TolGuide: float
        	:param RecOnS1:
        	:type RecOnS1: bool
        	:param RecOnS2:
        	:type RecOnS2: bool
        	:param Psol:
        	:type Psol: float
        	:param ParSol:
        	:type ParSol: math_Vector
        	:rtype: bool
        """
        return _BRepBlend.BRepBlend_Walking_PerformFirstSection(self, *args)


    def SetDomainsToRecadre(self, *args) -> "void":
        """
        * To define different domains for control and clipping.
        	:param RecDomain1:
        	:type RecDomain1: Adaptor3d_TopolTool
        	:param RecDomain2:
        	:type RecDomain2: Adaptor3d_TopolTool
        	:rtype: None
        """
        return _BRepBlend.BRepBlend_Walking_SetDomainsToRecadre(self, *args)


    def TwistOnS1(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_Walking_TwistOnS1(self, *args)


    def TwistOnS2(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepBlend.BRepBlend_Walking_TwistOnS2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_Walking
BRepBlend_Walking.AddSingularPoint = new_instancemethod(_BRepBlend.BRepBlend_Walking_AddSingularPoint, None, BRepBlend_Walking)
BRepBlend_Walking.Check = new_instancemethod(_BRepBlend.BRepBlend_Walking_Check, None, BRepBlend_Walking)
BRepBlend_Walking.Check2d = new_instancemethod(_BRepBlend.BRepBlend_Walking_Check2d, None, BRepBlend_Walking)
BRepBlend_Walking.ClassificationOnS1 = new_instancemethod(_BRepBlend.BRepBlend_Walking_ClassificationOnS1, None, BRepBlend_Walking)
BRepBlend_Walking.ClassificationOnS2 = new_instancemethod(_BRepBlend.BRepBlend_Walking_ClassificationOnS2, None, BRepBlend_Walking)
BRepBlend_Walking.Complete = new_instancemethod(_BRepBlend.BRepBlend_Walking_Complete, None, BRepBlend_Walking)
BRepBlend_Walking.Continu = new_instancemethod(_BRepBlend.BRepBlend_Walking_Continu, None, BRepBlend_Walking)
BRepBlend_Walking.IsDone = new_instancemethod(_BRepBlend.BRepBlend_Walking_IsDone, None, BRepBlend_Walking)
BRepBlend_Walking.Line = new_instancemethod(_BRepBlend.BRepBlend_Walking_Line, None, BRepBlend_Walking)
BRepBlend_Walking.Perform = new_instancemethod(_BRepBlend.BRepBlend_Walking_Perform, None, BRepBlend_Walking)
BRepBlend_Walking.PerformFirstSection = new_instancemethod(_BRepBlend.BRepBlend_Walking_PerformFirstSection, None, BRepBlend_Walking)
BRepBlend_Walking.SetDomainsToRecadre = new_instancemethod(_BRepBlend.BRepBlend_Walking_SetDomainsToRecadre, None, BRepBlend_Walking)
BRepBlend_Walking.TwistOnS1 = new_instancemethod(_BRepBlend.BRepBlend_Walking_TwistOnS1, None, BRepBlend_Walking)
BRepBlend_Walking.TwistOnS2 = new_instancemethod(_BRepBlend.BRepBlend_Walking_TwistOnS2, None, BRepBlend_Walking)
BRepBlend_Walking_swigregister = _BRepBlend.BRepBlend_Walking_swigregister
BRepBlend_Walking_swigregister(BRepBlend_Walking)

class BRepBlend_AppFunc(BRepBlend_AppFuncRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Line:
        	:type Line: BRepBlend_Line
        	:param Func:
        	:type Func: Blend_Function
        	:param Tol3d:
        	:type Tol3d: float
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: None
        """
        _BRepBlend.BRepBlend_AppFunc_swiginit(self, _BRepBlend.new_BRepBlend_AppFunc(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepBlend_AppFunc_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_AppFunc
BRepBlend_AppFunc_swigregister = _BRepBlend.BRepBlend_AppFunc_swigregister
BRepBlend_AppFunc_swigregister(BRepBlend_AppFunc)

class BRepBlend_AppFuncRst(BRepBlend_AppFuncRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Line:
        	:type Line: BRepBlend_Line
        	:param Func:
        	:type Func: Blend_SurfRstFunction
        	:param Tol3d:
        	:type Tol3d: float
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: None
        """
        _BRepBlend.BRepBlend_AppFuncRst_swiginit(self, _BRepBlend.new_BRepBlend_AppFuncRst(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepBlend_AppFuncRst_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_AppFuncRst
BRepBlend_AppFuncRst_swigregister = _BRepBlend.BRepBlend_AppFuncRst_swigregister
BRepBlend_AppFuncRst_swigregister(BRepBlend_AppFuncRst)

class BRepBlend_AppFuncRstRst(BRepBlend_AppFuncRoot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Line:
        	:type Line: BRepBlend_Line
        	:param Func:
        	:type Func: Blend_RstRstFunction
        	:param Tol3d:
        	:type Tol3d: float
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: None
        """
        _BRepBlend.BRepBlend_AppFuncRstRst_swiginit(self, _BRepBlend.new_BRepBlend_AppFuncRstRst(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepBlend_AppFuncRstRst_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepBlend.delete_BRepBlend_AppFuncRstRst
BRepBlend_AppFuncRstRst_swigregister = _BRepBlend.BRepBlend_AppFuncRstRst_swigregister
BRepBlend_AppFuncRstRst_swigregister(BRepBlend_AppFuncRstRst)



