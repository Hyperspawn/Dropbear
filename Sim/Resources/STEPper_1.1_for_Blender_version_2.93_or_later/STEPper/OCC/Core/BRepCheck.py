# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepCheck module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepcheck.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepCheck.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepCheck')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepCheck')
    _BRepCheck = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepCheck', [dirname(__file__)])
        except ImportError:
            import _BRepCheck
            return _BRepCheck
        try:
            _mod = imp.load_module('_BRepCheck', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepCheck = swig_import_helper()
    del swig_import_helper
else:
    import _BRepCheck
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepCheck.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepCheck.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepCheck.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepCheck.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepCheck.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepCheck.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepCheck.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepCheck.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepCheck.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepCheck.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepCheck.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepCheck.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepCheck.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepCheck.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepCheck.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepCheck.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepCheck.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepCheck.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepCheck.process_exception(error, method_name, class_name)
process_exception = _BRepCheck.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.TopoDS
import OCC.Core.TopLoc
import OCC.Core.TopTools
BRepCheck_NoError = _BRepCheck.BRepCheck_NoError
BRepCheck_InvalidPointOnCurve = _BRepCheck.BRepCheck_InvalidPointOnCurve
BRepCheck_InvalidPointOnCurveOnSurface = _BRepCheck.BRepCheck_InvalidPointOnCurveOnSurface
BRepCheck_InvalidPointOnSurface = _BRepCheck.BRepCheck_InvalidPointOnSurface
BRepCheck_No3DCurve = _BRepCheck.BRepCheck_No3DCurve
BRepCheck_Multiple3DCurve = _BRepCheck.BRepCheck_Multiple3DCurve
BRepCheck_Invalid3DCurve = _BRepCheck.BRepCheck_Invalid3DCurve
BRepCheck_NoCurveOnSurface = _BRepCheck.BRepCheck_NoCurveOnSurface
BRepCheck_InvalidCurveOnSurface = _BRepCheck.BRepCheck_InvalidCurveOnSurface
BRepCheck_InvalidCurveOnClosedSurface = _BRepCheck.BRepCheck_InvalidCurveOnClosedSurface
BRepCheck_InvalidSameRangeFlag = _BRepCheck.BRepCheck_InvalidSameRangeFlag
BRepCheck_InvalidSameParameterFlag = _BRepCheck.BRepCheck_InvalidSameParameterFlag
BRepCheck_InvalidDegeneratedFlag = _BRepCheck.BRepCheck_InvalidDegeneratedFlag
BRepCheck_FreeEdge = _BRepCheck.BRepCheck_FreeEdge
BRepCheck_InvalidMultiConnexity = _BRepCheck.BRepCheck_InvalidMultiConnexity
BRepCheck_InvalidRange = _BRepCheck.BRepCheck_InvalidRange
BRepCheck_EmptyWire = _BRepCheck.BRepCheck_EmptyWire
BRepCheck_RedundantEdge = _BRepCheck.BRepCheck_RedundantEdge
BRepCheck_SelfIntersectingWire = _BRepCheck.BRepCheck_SelfIntersectingWire
BRepCheck_NoSurface = _BRepCheck.BRepCheck_NoSurface
BRepCheck_InvalidWire = _BRepCheck.BRepCheck_InvalidWire
BRepCheck_RedundantWire = _BRepCheck.BRepCheck_RedundantWire
BRepCheck_IntersectingWires = _BRepCheck.BRepCheck_IntersectingWires
BRepCheck_InvalidImbricationOfWires = _BRepCheck.BRepCheck_InvalidImbricationOfWires
BRepCheck_EmptyShell = _BRepCheck.BRepCheck_EmptyShell
BRepCheck_RedundantFace = _BRepCheck.BRepCheck_RedundantFace
BRepCheck_InvalidImbricationOfShells = _BRepCheck.BRepCheck_InvalidImbricationOfShells
BRepCheck_UnorientableShape = _BRepCheck.BRepCheck_UnorientableShape
BRepCheck_NotClosed = _BRepCheck.BRepCheck_NotClosed
BRepCheck_NotConnected = _BRepCheck.BRepCheck_NotConnected
BRepCheck_SubshapeNotInShape = _BRepCheck.BRepCheck_SubshapeNotInShape
BRepCheck_BadOrientation = _BRepCheck.BRepCheck_BadOrientation
BRepCheck_BadOrientationOfSubshape = _BRepCheck.BRepCheck_BadOrientationOfSubshape
BRepCheck_InvalidPolygonOnTriangulation = _BRepCheck.BRepCheck_InvalidPolygonOnTriangulation
BRepCheck_InvalidToleranceValue = _BRepCheck.BRepCheck_InvalidToleranceValue
BRepCheck_EnclosedRegion = _BRepCheck.BRepCheck_EnclosedRegion
BRepCheck_CheckFail = _BRepCheck.BRepCheck_CheckFail

def Handle_BRepCheck_Result_Create() -> "opencascade::handle< BRepCheck_Result >":
    return _BRepCheck.Handle_BRepCheck_Result_Create()
Handle_BRepCheck_Result_Create = _BRepCheck.Handle_BRepCheck_Result_Create

def Handle_BRepCheck_Result_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepCheck_Result >":
    return _BRepCheck.Handle_BRepCheck_Result_DownCast(t)
Handle_BRepCheck_Result_DownCast = _BRepCheck.Handle_BRepCheck_Result_DownCast

def Handle_BRepCheck_Result_IsNull(t: 'opencascade::handle< BRepCheck_Result > const &') -> "bool":
    return _BRepCheck.Handle_BRepCheck_Result_IsNull(t)
Handle_BRepCheck_Result_IsNull = _BRepCheck.Handle_BRepCheck_Result_IsNull

def Handle_BRepCheck_Edge_Create() -> "opencascade::handle< BRepCheck_Edge >":
    return _BRepCheck.Handle_BRepCheck_Edge_Create()
Handle_BRepCheck_Edge_Create = _BRepCheck.Handle_BRepCheck_Edge_Create

def Handle_BRepCheck_Edge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepCheck_Edge >":
    return _BRepCheck.Handle_BRepCheck_Edge_DownCast(t)
Handle_BRepCheck_Edge_DownCast = _BRepCheck.Handle_BRepCheck_Edge_DownCast

def Handle_BRepCheck_Edge_IsNull(t: 'opencascade::handle< BRepCheck_Edge > const &') -> "bool":
    return _BRepCheck.Handle_BRepCheck_Edge_IsNull(t)
Handle_BRepCheck_Edge_IsNull = _BRepCheck.Handle_BRepCheck_Edge_IsNull

def Handle_BRepCheck_Face_Create() -> "opencascade::handle< BRepCheck_Face >":
    return _BRepCheck.Handle_BRepCheck_Face_Create()
Handle_BRepCheck_Face_Create = _BRepCheck.Handle_BRepCheck_Face_Create

def Handle_BRepCheck_Face_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepCheck_Face >":
    return _BRepCheck.Handle_BRepCheck_Face_DownCast(t)
Handle_BRepCheck_Face_DownCast = _BRepCheck.Handle_BRepCheck_Face_DownCast

def Handle_BRepCheck_Face_IsNull(t: 'opencascade::handle< BRepCheck_Face > const &') -> "bool":
    return _BRepCheck.Handle_BRepCheck_Face_IsNull(t)
Handle_BRepCheck_Face_IsNull = _BRepCheck.Handle_BRepCheck_Face_IsNull

def Handle_BRepCheck_Shell_Create() -> "opencascade::handle< BRepCheck_Shell >":
    return _BRepCheck.Handle_BRepCheck_Shell_Create()
Handle_BRepCheck_Shell_Create = _BRepCheck.Handle_BRepCheck_Shell_Create

def Handle_BRepCheck_Shell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepCheck_Shell >":
    return _BRepCheck.Handle_BRepCheck_Shell_DownCast(t)
Handle_BRepCheck_Shell_DownCast = _BRepCheck.Handle_BRepCheck_Shell_DownCast

def Handle_BRepCheck_Shell_IsNull(t: 'opencascade::handle< BRepCheck_Shell > const &') -> "bool":
    return _BRepCheck.Handle_BRepCheck_Shell_IsNull(t)
Handle_BRepCheck_Shell_IsNull = _BRepCheck.Handle_BRepCheck_Shell_IsNull

def Handle_BRepCheck_Solid_Create() -> "opencascade::handle< BRepCheck_Solid >":
    return _BRepCheck.Handle_BRepCheck_Solid_Create()
Handle_BRepCheck_Solid_Create = _BRepCheck.Handle_BRepCheck_Solid_Create

def Handle_BRepCheck_Solid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepCheck_Solid >":
    return _BRepCheck.Handle_BRepCheck_Solid_DownCast(t)
Handle_BRepCheck_Solid_DownCast = _BRepCheck.Handle_BRepCheck_Solid_DownCast

def Handle_BRepCheck_Solid_IsNull(t: 'opencascade::handle< BRepCheck_Solid > const &') -> "bool":
    return _BRepCheck.Handle_BRepCheck_Solid_IsNull(t)
Handle_BRepCheck_Solid_IsNull = _BRepCheck.Handle_BRepCheck_Solid_IsNull

def Handle_BRepCheck_Vertex_Create() -> "opencascade::handle< BRepCheck_Vertex >":
    return _BRepCheck.Handle_BRepCheck_Vertex_Create()
Handle_BRepCheck_Vertex_Create = _BRepCheck.Handle_BRepCheck_Vertex_Create

def Handle_BRepCheck_Vertex_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepCheck_Vertex >":
    return _BRepCheck.Handle_BRepCheck_Vertex_DownCast(t)
Handle_BRepCheck_Vertex_DownCast = _BRepCheck.Handle_BRepCheck_Vertex_DownCast

def Handle_BRepCheck_Vertex_IsNull(t: 'opencascade::handle< BRepCheck_Vertex > const &') -> "bool":
    return _BRepCheck.Handle_BRepCheck_Vertex_IsNull(t)
Handle_BRepCheck_Vertex_IsNull = _BRepCheck.Handle_BRepCheck_Vertex_IsNull

def Handle_BRepCheck_Wire_Create() -> "opencascade::handle< BRepCheck_Wire >":
    return _BRepCheck.Handle_BRepCheck_Wire_Create()
Handle_BRepCheck_Wire_Create = _BRepCheck.Handle_BRepCheck_Wire_Create

def Handle_BRepCheck_Wire_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepCheck_Wire >":
    return _BRepCheck.Handle_BRepCheck_Wire_DownCast(t)
Handle_BRepCheck_Wire_DownCast = _BRepCheck.Handle_BRepCheck_Wire_DownCast

def Handle_BRepCheck_Wire_IsNull(t: 'opencascade::handle< BRepCheck_Wire > const &') -> "bool":
    return _BRepCheck.Handle_BRepCheck_Wire_IsNull(t)
Handle_BRepCheck_Wire_IsNull = _BRepCheck.Handle_BRepCheck_Wire_IsNull
class BRepCheck_ListOfStatus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepCheck.BRepCheck_ListOfStatus_swiginit(self, _BRepCheck.new_BRepCheck_ListOfStatus(*args))
    __swig_destroy__ = _BRepCheck.delete_BRepCheck_ListOfStatus
BRepCheck_ListOfStatus.begin = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_begin, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.end = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_end, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.cbegin = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_cbegin, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.cend = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_cend, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.Size = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_Size, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.Assign = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_Assign, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.Set = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_Set, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.Clear = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_Clear, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.First = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_First, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.Last = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_Last, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.Append = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_Append, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.Prepend = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_Prepend, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.RemoveFirst = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_RemoveFirst, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.Remove = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_Remove, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.InsertBefore = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_InsertBefore, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.InsertAfter = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_InsertAfter, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus.Reverse = new_instancemethod(_BRepCheck.BRepCheck_ListOfStatus_Reverse, None, BRepCheck_ListOfStatus)
BRepCheck_ListOfStatus_swigregister = _BRepCheck.BRepCheck_ListOfStatus_swigregister
BRepCheck_ListOfStatus_swigregister(BRepCheck_ListOfStatus)

class BRepCheck_ListIteratorOfListOfStatus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepCheck.BRepCheck_ListIteratorOfListOfStatus_swiginit(self, _BRepCheck.new_BRepCheck_ListIteratorOfListOfStatus(*args))
    __swig_destroy__ = _BRepCheck.delete_BRepCheck_ListIteratorOfListOfStatus
BRepCheck_ListIteratorOfListOfStatus.More = new_instancemethod(_BRepCheck.BRepCheck_ListIteratorOfListOfStatus_More, None, BRepCheck_ListIteratorOfListOfStatus)
BRepCheck_ListIteratorOfListOfStatus.Next = new_instancemethod(_BRepCheck.BRepCheck_ListIteratorOfListOfStatus_Next, None, BRepCheck_ListIteratorOfListOfStatus)
BRepCheck_ListIteratorOfListOfStatus.Value = new_instancemethod(_BRepCheck.BRepCheck_ListIteratorOfListOfStatus_Value, None, BRepCheck_ListIteratorOfListOfStatus)
BRepCheck_ListIteratorOfListOfStatus.ChangeValue = new_instancemethod(_BRepCheck.BRepCheck_ListIteratorOfListOfStatus_ChangeValue, None, BRepCheck_ListIteratorOfListOfStatus)
BRepCheck_ListIteratorOfListOfStatus_swigregister = _BRepCheck.BRepCheck_ListIteratorOfListOfStatus_swigregister
BRepCheck_ListIteratorOfListOfStatus_swigregister(BRepCheck_ListIteratorOfListOfStatus)

class BRepCheck_DataMapOfShapeListOfStatus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_swiginit(self, _BRepCheck.new_BRepCheck_DataMapOfShapeListOfStatus(*args))
    __swig_destroy__ = _BRepCheck.delete_BRepCheck_DataMapOfShapeListOfStatus
BRepCheck_DataMapOfShapeListOfStatus.begin = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_begin, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.end = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_end, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.cbegin = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_cbegin, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.cend = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_cend, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.Exchange = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_Exchange, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.Assign = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_Assign, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.Set = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_Set, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.ReSize = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_ReSize, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.Bind = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_Bind, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.Bound = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_Bound, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.IsBound = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_IsBound, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.UnBind = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_UnBind, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.Seek = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_Seek, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.Find = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_Find, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.ChangeSeek = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_ChangeSeek, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.ChangeFind = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_ChangeFind, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.__call__ = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus___call__, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.Clear = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_Clear, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus.Size = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_Size, None, BRepCheck_DataMapOfShapeListOfStatus)
BRepCheck_DataMapOfShapeListOfStatus_swigregister = _BRepCheck.BRepCheck_DataMapOfShapeListOfStatus_swigregister
BRepCheck_DataMapOfShapeListOfStatus_swigregister(BRepCheck_DataMapOfShapeListOfStatus)

class BRepCheck_DataMapOfShapeResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepCheck.BRepCheck_DataMapOfShapeResult_swiginit(self, _BRepCheck.new_BRepCheck_DataMapOfShapeResult(*args))
    __swig_destroy__ = _BRepCheck.delete_BRepCheck_DataMapOfShapeResult
BRepCheck_DataMapOfShapeResult.begin = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_begin, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.end = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_end, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.cbegin = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_cbegin, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.cend = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_cend, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.Exchange = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_Exchange, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.Assign = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_Assign, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.Set = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_Set, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.ReSize = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_ReSize, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.Bind = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_Bind, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.Bound = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_Bound, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.IsBound = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_IsBound, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.UnBind = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_UnBind, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.Seek = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_Seek, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.Find = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_Find, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.ChangeSeek = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_ChangeSeek, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.ChangeFind = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_ChangeFind, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.__call__ = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult___call__, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.Clear = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_Clear, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult.Size = new_instancemethod(_BRepCheck.BRepCheck_DataMapOfShapeResult_Size, None, BRepCheck_DataMapOfShapeResult)
BRepCheck_DataMapOfShapeResult_swigregister = _BRepCheck.BRepCheck_DataMapOfShapeResult_swigregister
BRepCheck_DataMapOfShapeResult_swigregister(BRepCheck_DataMapOfShapeResult)

class brepcheck(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(*args) -> "void":
        """
        :param List:
        	:type List: BRepCheck_ListOfStatus
        	:param Stat:
        	:type Stat: BRepCheck_Status
        	:rtype: void
        """
        return _BRepCheck.brepcheck_Add(*args)

    Add = staticmethod(Add)

    def PrecCurve(*args) -> "Standard_Real":
        """
        * Returns the resolution on the 3d curve
        	:param aAC3D:
        	:type aAC3D: Adaptor3d_Curve
        	:rtype: float
        """
        return _BRepCheck.brepcheck_PrecCurve(*args)

    PrecCurve = staticmethod(PrecCurve)

    def PrecSurface(*args) -> "Standard_Real":
        """
        * Returns the resolution on the surface
        	:param aAHSurf:
        	:type aAHSurf: Adaptor3d_HSurface
        	:rtype: float
        """
        return _BRepCheck.brepcheck_PrecSurface(*args)

    PrecSurface = staticmethod(PrecSurface)

    def Print(*args) -> "void":
        """
        :param Stat:
        	:type Stat: BRepCheck_Status
        	:param OS:
        	:type OS: Standard_OStream
        	:rtype: void
        """
        return _BRepCheck.brepcheck_Print(*args)

    Print = staticmethod(Print)

    def SelfIntersection(*args) -> "Standard_Boolean":
        """
        :param W:
        	:type W: TopoDS_Wire
        	:param F:
        	:type F: TopoDS_Face
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:rtype: bool
        """
        return _BRepCheck.brepcheck_SelfIntersection(*args)

    SelfIntersection = staticmethod(SelfIntersection)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepCheck.brepcheck_swiginit(self, _BRepCheck.new_brepcheck())
    __swig_destroy__ = _BRepCheck.delete_brepcheck
brepcheck_swigregister = _BRepCheck.brepcheck_swigregister
brepcheck_swigregister(brepcheck)

def brepcheck_Add(*args) -> "void":
    """
    :param List:
    	:type List: BRepCheck_ListOfStatus
    	:param Stat:
    	:type Stat: BRepCheck_Status
    	:rtype: void
    """
    return _BRepCheck.brepcheck_Add(*args)

def brepcheck_PrecCurve(*args) -> "Standard_Real":
    """
    * Returns the resolution on the 3d curve
    	:param aAC3D:
    	:type aAC3D: Adaptor3d_Curve
    	:rtype: float
    """
    return _BRepCheck.brepcheck_PrecCurve(*args)

def brepcheck_PrecSurface(*args) -> "Standard_Real":
    """
    * Returns the resolution on the surface
    	:param aAHSurf:
    	:type aAHSurf: Adaptor3d_HSurface
    	:rtype: float
    """
    return _BRepCheck.brepcheck_PrecSurface(*args)

def brepcheck_Print(*args) -> "void":
    """
    :param Stat:
    	:type Stat: BRepCheck_Status
    	:param OS:
    	:type OS: Standard_OStream
    	:rtype: void
    """
    return _BRepCheck.brepcheck_Print(*args)

def brepcheck_SelfIntersection(*args) -> "Standard_Boolean":
    """
    :param W:
    	:type W: TopoDS_Wire
    	:param F:
    	:type F: TopoDS_Face
    	:param E1:
    	:type E1: TopoDS_Edge
    	:param E2:
    	:type E2: TopoDS_Edge
    	:rtype: bool
    """
    return _BRepCheck.brepcheck_SelfIntersection(*args)

class BRepCheck_Analyzer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a shape validation object defined by the shape S. <S> is the shape to control. <GeomControls> If False only topological informaions are checked. The geometricals controls are For a Vertex : BRepCheck_InvalidToleranceValue NYI For an Edge : BRepCheck_InvalidCurveOnClosedSurface, BRepCheck_InvalidCurveOnSurface, BRepCheck_InvalidSameParameterFlag, BRepCheck_InvalidToleranceValue NYI For a face : BRepCheck_UnorientableShape, BRepCheck_IntersectingWires, BRepCheck_InvalidToleranceValue NYI For a wire : BRepCheck_SelfIntersectingWire
        	:param S:
        	:type S: TopoDS_Shape
        	:param GeomControls: default value is Standard_True
        	:type GeomControls: bool
        	:rtype: None
        """
        _BRepCheck.BRepCheck_Analyzer_swiginit(self, _BRepCheck.new_BRepCheck_Analyzer(*args))

    def Init(self, *args) -> "void":
        """
        * <S> is the shape to control. <GeomControls> If False only topological informaions are checked. The geometricals controls are For a Vertex : BRepCheck_InvalidTolerance NYI For an Edge : BRepCheck_InvalidCurveOnClosedSurface, BRepCheck_InvalidCurveOnSurface, BRepCheck_InvalidSameParameterFlag, BRepCheck_InvalidTolerance NYI For a face : BRepCheck_UnorientableShape, BRepCheck_IntersectingWires, BRepCheck_InvalidTolerance NYI For a wire : BRepCheck_SelfIntersectingWire
        	:param S:
        	:type S: TopoDS_Shape
        	:param GeomControls: default value is Standard_True
        	:type GeomControls: bool
        	:rtype: None
        """
        return _BRepCheck.BRepCheck_Analyzer_Init(self, *args)


    def IsValid(self, *args) -> "Standard_Boolean":
        """
        * <S> is a subshape of the original shape. Returns <STandard_True> if no default has been detected on <S> and any of its subshape.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        * Returns true if no defect is detected on the shape S or any of its subshapes. Returns true if the shape S is valid. This function checks whether a given shape is valid by checking that: - the topology is correct - parameterization of edges in particular is correct. For the topology to be correct, the following conditions must be satisfied: - edges should have at least two vertices if they are not degenerate edges. The vertices should be within the range of the bounding edges at the tolerance specified in the vertex, - edges should share at least one face. The representation of the edges should be within the tolerance criterion assigned to them. - wires defining a face should not self-intersect and should be closed, - there should be one wire which contains all other wires inside a face, - wires should be correctly oriented with respect to each of the edges, - faces should be correctly oriented, in particular with respect to adjacent faces if these faces define a solid, - shells defining a solid should be closed. There should be one enclosing shell if the shape is a solid; To check parameterization of edge, there are 2 approaches depending on the edge?s contextual situation. - if the edge is either single, or it is in the context of a wire or a compound, its parameterization is defined by the parameterization of its 3D curve and is considered as valid. - If the edge is in the context of a face, it should have SameParameter and SameRange flags set to Standard_True. To check these flags, you should call the function BRep_Tool::SameParameter and BRep_Tool::SameRange for an edge. If at least one of these flags is set to Standard_False, the edge is considered as invalid without any additional check. If the edge is contained by a face, and it has SameParameter and SameRange flags set to Standard_True, IsValid checks whether representation of the edge on face, in context of which the edge is considered, has the same parameterization up to the tolerance value coded on the edge. For a given parameter t on the edge having C as a 3D curve and one PCurve P on a surface S (base surface of the reference face), this checks that |C(t) - S(P(t))| is less than or equal to tolerance, where tolerance is the tolerance value coded on the edge.
        	:rtype: bool
        """
        return _BRepCheck.BRepCheck_Analyzer_IsValid(self, *args)


    def Result(self, *args) -> "opencascade::handle< BRepCheck_Result > const &":
        """
        :param SubS:
        	:type SubS: TopoDS_Shape
        	:rtype: opencascade::handle<BRepCheck_Result>
        """
        return _BRepCheck.BRepCheck_Analyzer_Result(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepCheck.delete_BRepCheck_Analyzer
BRepCheck_Analyzer.Init = new_instancemethod(_BRepCheck.BRepCheck_Analyzer_Init, None, BRepCheck_Analyzer)
BRepCheck_Analyzer.IsValid = new_instancemethod(_BRepCheck.BRepCheck_Analyzer_IsValid, None, BRepCheck_Analyzer)
BRepCheck_Analyzer.Result = new_instancemethod(_BRepCheck.BRepCheck_Analyzer_Result, None, BRepCheck_Analyzer)
BRepCheck_Analyzer_swigregister = _BRepCheck.BRepCheck_Analyzer_swigregister
BRepCheck_Analyzer_swigregister(BRepCheck_Analyzer)

class BRepCheck_Result(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Blind(self, *args) -> "void":
        """:rtype: void"""
        return _BRepCheck.BRepCheck_Result_Blind(self, *args)


    def ContextualShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BRepCheck.BRepCheck_Result_ContextualShape(self, *args)


    def InContext(self, *args) -> "void":
        """
        :param ContextShape:
        	:type ContextShape: TopoDS_Shape
        	:rtype: void
        """
        return _BRepCheck.BRepCheck_Result_InContext(self, *args)


    def Init(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _BRepCheck.BRepCheck_Result_Init(self, *args)


    def InitContextIterator(self, *args) -> "void":
        """:rtype: None"""
        return _BRepCheck.BRepCheck_Result_InitContextIterator(self, *args)


    def IsBlind(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepCheck.BRepCheck_Result_IsBlind(self, *args)


    def IsMinimum(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepCheck.BRepCheck_Result_IsMinimum(self, *args)


    def Minimum(self, *args) -> "void":
        """:rtype: void"""
        return _BRepCheck.BRepCheck_Result_Minimum(self, *args)


    def MoreShapeInContext(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepCheck.BRepCheck_Result_MoreShapeInContext(self, *args)


    def NextShapeInContext(self, *args) -> "void":
        """:rtype: None"""
        return _BRepCheck.BRepCheck_Result_NextShapeInContext(self, *args)


    def SetFailStatus(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _BRepCheck.BRepCheck_Result_SetFailStatus(self, *args)


    def Status(self, *args) -> "BRepCheck_ListOfStatus const &":
        """:rtype: BRepCheck_ListOfStatus"""
        return _BRepCheck.BRepCheck_Result_Status(self, *args)


    def StatusOnShape(self, *args) -> "BRepCheck_ListOfStatus const &":
        """
        * If not already done, performs the InContext control and returns the list of status.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: BRepCheck_ListOfStatus
        :rtype: BRepCheck_ListOfStatus
        """
        return _BRepCheck.BRepCheck_Result_StatusOnShape(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepCheck_Result_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepCheck.delete_BRepCheck_Result
BRepCheck_Result.Blind = new_instancemethod(_BRepCheck.BRepCheck_Result_Blind, None, BRepCheck_Result)
BRepCheck_Result.ContextualShape = new_instancemethod(_BRepCheck.BRepCheck_Result_ContextualShape, None, BRepCheck_Result)
BRepCheck_Result.InContext = new_instancemethod(_BRepCheck.BRepCheck_Result_InContext, None, BRepCheck_Result)
BRepCheck_Result.Init = new_instancemethod(_BRepCheck.BRepCheck_Result_Init, None, BRepCheck_Result)
BRepCheck_Result.InitContextIterator = new_instancemethod(_BRepCheck.BRepCheck_Result_InitContextIterator, None, BRepCheck_Result)
BRepCheck_Result.IsBlind = new_instancemethod(_BRepCheck.BRepCheck_Result_IsBlind, None, BRepCheck_Result)
BRepCheck_Result.IsMinimum = new_instancemethod(_BRepCheck.BRepCheck_Result_IsMinimum, None, BRepCheck_Result)
BRepCheck_Result.Minimum = new_instancemethod(_BRepCheck.BRepCheck_Result_Minimum, None, BRepCheck_Result)
BRepCheck_Result.MoreShapeInContext = new_instancemethod(_BRepCheck.BRepCheck_Result_MoreShapeInContext, None, BRepCheck_Result)
BRepCheck_Result.NextShapeInContext = new_instancemethod(_BRepCheck.BRepCheck_Result_NextShapeInContext, None, BRepCheck_Result)
BRepCheck_Result.SetFailStatus = new_instancemethod(_BRepCheck.BRepCheck_Result_SetFailStatus, None, BRepCheck_Result)
BRepCheck_Result.Status = new_instancemethod(_BRepCheck.BRepCheck_Result_Status, None, BRepCheck_Result)
BRepCheck_Result.StatusOnShape = new_instancemethod(_BRepCheck.BRepCheck_Result_StatusOnShape, None, BRepCheck_Result)
BRepCheck_Result_swigregister = _BRepCheck.BRepCheck_Result_swigregister
BRepCheck_Result_swigregister(BRepCheck_Result)

class BRepCheck_Edge(BRepCheck_Result):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        _BRepCheck.BRepCheck_Edge_swiginit(self, _BRepCheck.new_BRepCheck_Edge(*args))

    def CheckPolygonOnTriangulation(self, *args) -> "BRepCheck_Status":
        """
        * Checks, if polygon on triangulation of heEdge is out of 3D-curve of this edge.
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:rtype: BRepCheck_Status
        """
        return _BRepCheck.BRepCheck_Edge_CheckPolygonOnTriangulation(self, *args)


    def GeometricControls(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _BRepCheck.BRepCheck_Edge_GeometricControls(self, *args)


    def SetStatus(self, *args) -> "void":
        """
        * Sets status of Edge;
        	:param theStatus:
        	:type theStatus: BRepCheck_Status
        	:rtype: None
        """
        return _BRepCheck.BRepCheck_Edge_SetStatus(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _BRepCheck.BRepCheck_Edge_Tolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepCheck_Edge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepCheck.delete_BRepCheck_Edge
BRepCheck_Edge.CheckPolygonOnTriangulation = new_instancemethod(_BRepCheck.BRepCheck_Edge_CheckPolygonOnTriangulation, None, BRepCheck_Edge)
BRepCheck_Edge.GeometricControls = new_instancemethod(_BRepCheck.BRepCheck_Edge_GeometricControls, None, BRepCheck_Edge)
BRepCheck_Edge.SetStatus = new_instancemethod(_BRepCheck.BRepCheck_Edge_SetStatus, None, BRepCheck_Edge)
BRepCheck_Edge.Tolerance = new_instancemethod(_BRepCheck.BRepCheck_Edge_Tolerance, None, BRepCheck_Edge)
BRepCheck_Edge_swigregister = _BRepCheck.BRepCheck_Edge_swigregister
BRepCheck_Edge_swigregister(BRepCheck_Edge)

class BRepCheck_Face(BRepCheck_Result):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _BRepCheck.BRepCheck_Face_swiginit(self, _BRepCheck.new_BRepCheck_Face(*args))

    def ClassifyWires(self, *args) -> "BRepCheck_Status":
        """
        :param Update: default value is Standard_False
        	:type Update: bool
        	:rtype: BRepCheck_Status
        """
        return _BRepCheck.BRepCheck_Face_ClassifyWires(self, *args)


    def GeometricControls(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _BRepCheck.BRepCheck_Face_GeometricControls(self, *args)


    def IntersectWires(self, *args) -> "BRepCheck_Status":
        """
        :param Update: default value is Standard_False
        	:type Update: bool
        	:rtype: BRepCheck_Status
        """
        return _BRepCheck.BRepCheck_Face_IntersectWires(self, *args)


    def IsUnorientable(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepCheck.BRepCheck_Face_IsUnorientable(self, *args)


    def OrientationOfWires(self, *args) -> "BRepCheck_Status":
        """
        :param Update: default value is Standard_False
        	:type Update: bool
        	:rtype: BRepCheck_Status
        """
        return _BRepCheck.BRepCheck_Face_OrientationOfWires(self, *args)


    def SetStatus(self, *args) -> "void":
        """
        * Sets status of Face;
        	:param theStatus:
        	:type theStatus: BRepCheck_Status
        	:rtype: None
        """
        return _BRepCheck.BRepCheck_Face_SetStatus(self, *args)


    def SetUnorientable(self, *args) -> "void":
        """:rtype: None"""
        return _BRepCheck.BRepCheck_Face_SetUnorientable(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepCheck_Face_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepCheck.delete_BRepCheck_Face
BRepCheck_Face.ClassifyWires = new_instancemethod(_BRepCheck.BRepCheck_Face_ClassifyWires, None, BRepCheck_Face)
BRepCheck_Face.GeometricControls = new_instancemethod(_BRepCheck.BRepCheck_Face_GeometricControls, None, BRepCheck_Face)
BRepCheck_Face.IntersectWires = new_instancemethod(_BRepCheck.BRepCheck_Face_IntersectWires, None, BRepCheck_Face)
BRepCheck_Face.IsUnorientable = new_instancemethod(_BRepCheck.BRepCheck_Face_IsUnorientable, None, BRepCheck_Face)
BRepCheck_Face.OrientationOfWires = new_instancemethod(_BRepCheck.BRepCheck_Face_OrientationOfWires, None, BRepCheck_Face)
BRepCheck_Face.SetStatus = new_instancemethod(_BRepCheck.BRepCheck_Face_SetStatus, None, BRepCheck_Face)
BRepCheck_Face.SetUnorientable = new_instancemethod(_BRepCheck.BRepCheck_Face_SetUnorientable, None, BRepCheck_Face)
BRepCheck_Face_swigregister = _BRepCheck.BRepCheck_Face_swigregister
BRepCheck_Face_swigregister(BRepCheck_Face)

class BRepCheck_Shell(BRepCheck_Result):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: TopoDS_Shell
        	:rtype: None
        """
        _BRepCheck.BRepCheck_Shell_swiginit(self, _BRepCheck.new_BRepCheck_Shell(*args))

    def Closed(self, *args) -> "BRepCheck_Status":
        """
        * Checks if the oriented faces of the shell give a closed shell. If the wire is closed, returns BRepCheck_NoError.If <Update> is set to Standard_True, registers the status in the list.
        	:param Update: default value is Standard_False
        	:type Update: bool
        	:rtype: BRepCheck_Status
        """
        return _BRepCheck.BRepCheck_Shell_Closed(self, *args)


    def IsUnorientable(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepCheck.BRepCheck_Shell_IsUnorientable(self, *args)


    def NbConnectedSet(self, *args) -> "Standard_Integer":
        """
        :param theSets:
        	:type theSets: TopTools_ListOfShape
        	:rtype: int
        """
        return _BRepCheck.BRepCheck_Shell_NbConnectedSet(self, *args)


    def Orientation(self, *args) -> "BRepCheck_Status":
        """
        * Checks if the oriented faces of the shell are correctly oriented. An internal call is made to the method Closed. If <Update> is set to Standard_True, registers the status in the list.
        	:param Update: default value is Standard_False
        	:type Update: bool
        	:rtype: BRepCheck_Status
        """
        return _BRepCheck.BRepCheck_Shell_Orientation(self, *args)


    def SetUnorientable(self, *args) -> "void":
        """:rtype: None"""
        return _BRepCheck.BRepCheck_Shell_SetUnorientable(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepCheck_Shell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepCheck.delete_BRepCheck_Shell
BRepCheck_Shell.Closed = new_instancemethod(_BRepCheck.BRepCheck_Shell_Closed, None, BRepCheck_Shell)
BRepCheck_Shell.IsUnorientable = new_instancemethod(_BRepCheck.BRepCheck_Shell_IsUnorientable, None, BRepCheck_Shell)
BRepCheck_Shell.NbConnectedSet = new_instancemethod(_BRepCheck.BRepCheck_Shell_NbConnectedSet, None, BRepCheck_Shell)
BRepCheck_Shell.Orientation = new_instancemethod(_BRepCheck.BRepCheck_Shell_Orientation, None, BRepCheck_Shell)
BRepCheck_Shell.SetUnorientable = new_instancemethod(_BRepCheck.BRepCheck_Shell_SetUnorientable, None, BRepCheck_Shell)
BRepCheck_Shell_swigregister = _BRepCheck.BRepCheck_Shell_swigregister
BRepCheck_Shell_swigregister(BRepCheck_Shell)

class BRepCheck_Solid(BRepCheck_Result):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor <theS> is the solid to check
        	:param theS:
        	:type theS: TopoDS_Solid
        	:rtype: None
        """
        _BRepCheck.BRepCheck_Solid_swiginit(self, _BRepCheck.new_BRepCheck_Solid(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepCheck_Solid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepCheck.delete_BRepCheck_Solid
BRepCheck_Solid_swigregister = _BRepCheck.BRepCheck_Solid_swigregister
BRepCheck_Solid_swigregister(BRepCheck_Solid)

class BRepCheck_Vertex(BRepCheck_Result):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        """
        _BRepCheck.BRepCheck_Vertex_swiginit(self, _BRepCheck.new_BRepCheck_Vertex(*args))

    def Tolerance(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _BRepCheck.BRepCheck_Vertex_Tolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepCheck_Vertex_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepCheck.delete_BRepCheck_Vertex
BRepCheck_Vertex.Tolerance = new_instancemethod(_BRepCheck.BRepCheck_Vertex_Tolerance, None, BRepCheck_Vertex)
BRepCheck_Vertex_swigregister = _BRepCheck.BRepCheck_Vertex_swigregister
BRepCheck_Vertex_swigregister(BRepCheck_Vertex)

class BRepCheck_Wire(BRepCheck_Result):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        """
        _BRepCheck.BRepCheck_Wire_swiginit(self, _BRepCheck.new_BRepCheck_Wire(*args))

    def Closed(self, *args) -> "BRepCheck_Status":
        """
        * Checks if the oriented edges of the wire give a closed wire. If the wire is closed, returns BRepCheck_NoError. Warning : if the first and last edge are infinite, the wire will be considered as a closed one. If <Update> is set to Standard_True, registers the status in the list. May return (and registers): **BRepCheck_NotConnected, if wire is not topologically closed **BRepCheck_RedundantEdge, if an edge is in wire more than 3 times or in case of 2 occurences if not with FORWARD and REVERSED orientation. **BRepCheck_NoError
        	:param Update: default value is Standard_False
        	:type Update: bool
        	:rtype: BRepCheck_Status
        """
        return _BRepCheck.BRepCheck_Wire_Closed(self, *args)


    def Closed2d(self, *args) -> "BRepCheck_Status":
        """
        * Checks if edges of the wire give a wire closed in 2d space. Returns BRepCheck_NoError, or BRepCheck_NotClosed If <Update> is set to Standard_True, registers the status in the list.
        	:param F:
        	:type F: TopoDS_Face
        	:param Update: default value is Standard_False
        	:type Update: bool
        	:rtype: BRepCheck_Status
        """
        return _BRepCheck.BRepCheck_Wire_Closed2d(self, *args)


    def GeometricControls(self, *args) -> "void":
        """
        * report SelfIntersect() check would be (is) done
        	:rtype: bool
        * set SelfIntersect() to be checked
        	:param B:
        	:type B: bool
        	:rtype: None
        """
        return _BRepCheck.BRepCheck_Wire_GeometricControls(self, *args)


    def Orientation(self, *args) -> "BRepCheck_Status":
        """
        * Checks if the oriented edges of the wire are correctly oriented. An internal call is made to the method Closed. If no face exists, call the method with a null face (TopoDS_face()). If <Update> is set to Standard_True, registers the status in the list. May return (and registers): BRepCheck_InvalidDegeneratedFlag, BRepCheck_BadOrientationOfSubshape, BRepCheck_NotClosed, BRepCheck_NoError
        	:param F:
        	:type F: TopoDS_Face
        	:param Update: default value is Standard_False
        	:type Update: bool
        	:rtype: BRepCheck_Status
        """
        return _BRepCheck.BRepCheck_Wire_Orientation(self, *args)


    def SelfIntersect(self, *args) -> "BRepCheck_Status":
        """
        * Checks if the wire intersect itself on the face <F>. <E1> and <E2> are the first intersecting edges found. <E2> may be a null edge when a self-intersecting edge is found.If <Update> is set to Standard_True, registers the status in the list. May return (and register): BRepCheck_EmptyWire, BRepCheck_SelfIntersectingWire, BRepCheck_NoCurveOnSurface, BRepCheck_NoError
        	:param F:
        	:type F: TopoDS_Face
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:param Update: default value is Standard_False
        	:type Update: bool
        	:rtype: BRepCheck_Status
        """
        return _BRepCheck.BRepCheck_Wire_SelfIntersect(self, *args)


    def SetStatus(self, *args) -> "void":
        """
        * Sets status of Wire;
        	:param theStatus:
        	:type theStatus: BRepCheck_Status
        	:rtype: None
        """
        return _BRepCheck.BRepCheck_Wire_SetStatus(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepCheck_Wire_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepCheck.delete_BRepCheck_Wire
BRepCheck_Wire.Closed = new_instancemethod(_BRepCheck.BRepCheck_Wire_Closed, None, BRepCheck_Wire)
BRepCheck_Wire.Closed2d = new_instancemethod(_BRepCheck.BRepCheck_Wire_Closed2d, None, BRepCheck_Wire)
BRepCheck_Wire.GeometricControls = new_instancemethod(_BRepCheck.BRepCheck_Wire_GeometricControls, None, BRepCheck_Wire)
BRepCheck_Wire.Orientation = new_instancemethod(_BRepCheck.BRepCheck_Wire_Orientation, None, BRepCheck_Wire)
BRepCheck_Wire.SelfIntersect = new_instancemethod(_BRepCheck.BRepCheck_Wire_SelfIntersect, None, BRepCheck_Wire)
BRepCheck_Wire.SetStatus = new_instancemethod(_BRepCheck.BRepCheck_Wire_SetStatus, None, BRepCheck_Wire)
BRepCheck_Wire_swigregister = _BRepCheck.BRepCheck_Wire_swigregister
BRepCheck_Wire_swigregister(BRepCheck_Wire)



