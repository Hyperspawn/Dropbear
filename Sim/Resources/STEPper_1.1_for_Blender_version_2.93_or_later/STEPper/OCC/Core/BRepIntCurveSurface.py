# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepIntCurveSurface module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepintcurvesurface.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepIntCurveSurface.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepIntCurveSurface')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepIntCurveSurface')
    _BRepIntCurveSurface = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepIntCurveSurface', [dirname(__file__)])
        except ImportError:
            import _BRepIntCurveSurface
            return _BRepIntCurveSurface
        try:
            _mod = imp.load_module('_BRepIntCurveSurface', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepIntCurveSurface = swig_import_helper()
    del swig_import_helper
else:
    import _BRepIntCurveSurface
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepIntCurveSurface.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepIntCurveSurface.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepIntCurveSurface.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepIntCurveSurface.process_exception(error, method_name, class_name)
process_exception = _BRepIntCurveSurface.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.GeomAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.IntCurveSurface
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
class BRepIntCurveSurface_Inter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor;
        	:rtype: None
        """
        _BRepIntCurveSurface.BRepIntCurveSurface_Inter_swiginit(self, _BRepIntCurveSurface.new_BRepIntCurveSurface_Inter(*args))

    def Face(self, *args) -> "TopoDS_Face const":
        """
        * returns the current face.
        	:rtype: TopoDS_Face
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Face(self, *args)


    def Init(self, *args) -> "void":
        """
        * Load the Shape, the curve and initialize the tolerance used for the classification.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theCurve:
        	:type theCurve: GeomAdaptor_Curve
        	:param theTol:
        	:type theTol: float
        	:rtype: None
        * Load the Shape, the curve and initialize the tolerance used for the classification.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theLine:
        	:type theLine: gp_Lin
        	:param theTol:
        	:type theTol: float
        	:rtype: None
        * Method to find intersections of specified curve with loaded shape.
        	:param theCurve:
        	:type theCurve: GeomAdaptor_Curve
        	:rtype: None
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Init(self, *args)


    def Load(self, *args) -> "void":
        """
        * Load the Shape, and initialize the tolerance used for the classification.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theTol:
        	:type theTol: float
        	:rtype: None
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Load(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * returns True if there is a current face.
        	:rtype: bool
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Sets the next intersection point to check.
        	:rtype: None
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Next(self, *args)


    def Pnt(self, *args) -> "gp_Pnt const":
        """
        * returns the current geometric Point
        	:rtype: gp_Pnt
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Pnt(self, *args)


    def Point(self, *args) -> "IntCurveSurface_IntersectionPoint":
        """
        * returns the current Intersection point.
        	:rtype: IntCurveSurface_IntersectionPoint
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Point(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        * returns the current state (IN or ON)
        	:rtype: TopAbs_State
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_State(self, *args)


    def Transition(self, *args) -> "IntCurveSurface_TransitionOnCurve":
        """
        * returns the transition of the line on the surface (IN or OUT or UNKNOWN)
        	:rtype: IntCurveSurface_TransitionOnCurve
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Transition(self, *args)


    def U(self, *args) -> "Standard_Real":
        """
        * returns the U parameter of the current point on the current face.
        	:rtype: float
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_U(self, *args)


    def V(self, *args) -> "Standard_Real":
        """
        * returns the V parameter of the current point on the current face.
        	:rtype: float
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_V(self, *args)


    def W(self, *args) -> "Standard_Real":
        """
        * returns the parameter of the current point on the curve.
        	:rtype: float
        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_W(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepIntCurveSurface.delete_BRepIntCurveSurface_Inter
BRepIntCurveSurface_Inter.Face = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Face, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.Init = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Init, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.Load = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Load, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.More = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_More, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.Next = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Next, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.Pnt = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Pnt, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.Point = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Point, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.State = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_State, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.Transition = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_Transition, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.U = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_U, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.V = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_V, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter.W = new_instancemethod(_BRepIntCurveSurface.BRepIntCurveSurface_Inter_W, None, BRepIntCurveSurface_Inter)
BRepIntCurveSurface_Inter_swigregister = _BRepIntCurveSurface.BRepIntCurveSurface_Inter_swigregister
BRepIntCurveSurface_Inter_swigregister(BRepIntCurveSurface_Inter)



