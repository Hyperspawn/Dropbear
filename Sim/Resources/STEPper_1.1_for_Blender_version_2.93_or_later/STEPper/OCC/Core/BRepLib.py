# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepLib module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_breplib.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepLib.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepLib')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepLib')
    _BRepLib = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepLib', [dirname(__file__)])
        except ImportError:
            import _BRepLib
            return _BRepLib
        try:
            _mod = imp.load_module('_BRepLib', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepLib = swig_import_helper()
    del swig_import_helper
else:
    import _BRepLib
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepLib.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepLib.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepLib.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepLib.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepLib.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepLib.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepLib.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepLib.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepLib.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepLib.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepLib.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepLib.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepLib.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepLib.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepLib.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepLib.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepLib.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepLib.process_exception(error, method_name, class_name)
process_exception = _BRepLib.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.GeomAbs
import OCC.Core.Geom2d
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopTools
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.Adaptor2d
import OCC.Core.math
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
BRepLib_EdgeDone = _BRepLib.BRepLib_EdgeDone
BRepLib_PointProjectionFailed = _BRepLib.BRepLib_PointProjectionFailed
BRepLib_ParameterOutOfRange = _BRepLib.BRepLib_ParameterOutOfRange
BRepLib_DifferentPointsOnClosedCurve = _BRepLib.BRepLib_DifferentPointsOnClosedCurve
BRepLib_PointWithInfiniteParameter = _BRepLib.BRepLib_PointWithInfiniteParameter
BRepLib_DifferentsPointAndParameter = _BRepLib.BRepLib_DifferentsPointAndParameter
BRepLib_LineThroughIdenticPoints = _BRepLib.BRepLib_LineThroughIdenticPoints
BRepLib_ShellDone = _BRepLib.BRepLib_ShellDone
BRepLib_EmptyShell = _BRepLib.BRepLib_EmptyShell
BRepLib_DisconnectedShell = _BRepLib.BRepLib_DisconnectedShell
BRepLib_ShellParametersOutOfRange = _BRepLib.BRepLib_ShellParametersOutOfRange
BRepLib_Preserved = _BRepLib.BRepLib_Preserved
BRepLib_Deleted = _BRepLib.BRepLib_Deleted
BRepLib_Trimmed = _BRepLib.BRepLib_Trimmed
BRepLib_Merged = _BRepLib.BRepLib_Merged
BRepLib_BoundaryModified = _BRepLib.BRepLib_BoundaryModified
BRepLib_WireDone = _BRepLib.BRepLib_WireDone
BRepLib_EmptyWire = _BRepLib.BRepLib_EmptyWire
BRepLib_DisconnectedWire = _BRepLib.BRepLib_DisconnectedWire
BRepLib_NonManifoldWire = _BRepLib.BRepLib_NonManifoldWire
BRepLib_FaceDone = _BRepLib.BRepLib_FaceDone
BRepLib_NoFace = _BRepLib.BRepLib_NoFace
BRepLib_NotPlanar = _BRepLib.BRepLib_NotPlanar
BRepLib_CurveProjectionFailed = _BRepLib.BRepLib_CurveProjectionFailed
BRepLib_ParametersOutOfRange = _BRepLib.BRepLib_ParametersOutOfRange
class breplib(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BoundingVertex(*args) -> "Standard_Real &":
        """
        * Calculates the bounding sphere around the set of vertexes from the theLV list. Returns the center (theNewCenter) and the radius (theNewTol) of this sphere. This can be used to construct the new vertex which covers the given set of other vertices.
        	:param theLV:
        	:type theLV: NCollection_List<TopoDS_Shape>
        	:param theNewCenter:
        	:type theNewCenter: gp_Pnt
        	:param theNewTol:
        	:type theNewTol: float
        	:rtype: void
        """
        return _BRepLib.breplib_BoundingVertex(*args)

    BoundingVertex = staticmethod(BoundingVertex)

    def BuildCurve3d(*args) -> "Standard_Boolean":
        """
        * Computes the 3d curve for the edge <E> if it does not exist. Returns True if the curve was computed or existed. Returns False if there is no planar pcurve or the computation failed. <MaxSegment> >= 30 in approximation
        	:param E:
        	:type E: TopoDS_Edge
        	:param Tolerance: default value is 1.0e-5
        	:type Tolerance: float
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:param MaxDegree: default value is 14
        	:type MaxDegree: int
        	:param MaxSegment: default value is 0
        	:type MaxSegment: int
        	:rtype: bool
        """
        return _BRepLib.breplib_BuildCurve3d(*args)

    BuildCurve3d = staticmethod(BuildCurve3d)

    def BuildCurves3d(*args) -> "Standard_Boolean":
        """
        * Computes the 3d curves for all the edges of <S> return False if one of the computation failed. <MaxSegment> >= 30 in approximation
        	:param S:
        	:type S: TopoDS_Shape
        	:param Tolerance:
        	:type Tolerance: float
        	:param Continuity: default value is GeomAbs_C1
        	:type Continuity: GeomAbs_Shape
        	:param MaxDegree: default value is 14
        	:type MaxDegree: int
        	:param MaxSegment: default value is 0
        	:type MaxSegment: int
        	:rtype: bool
        * Computes the 3d curves for all the edges of <S> return False if one of the computation failed.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepLib.breplib_BuildCurves3d(*args)

    BuildCurves3d = staticmethod(BuildCurves3d)

    def BuildPCurveForEdgeOnPlane(*args) -> "Standard_Boolean &":
        """
        * Builds pcurve of edge on face if the surface is plane, and updates the edge.
        	:param theE:
        	:type theE: TopoDS_Edge
        	:param theF:
        	:type theF: TopoDS_Face
        	:rtype: void
        * Builds pcurve of edge on face if the surface is plane, but does not update the edge. The output are the pcurve and the flag telling that pcurve was built.
        	:param theE:
        	:type theE: TopoDS_Edge
        	:param theF:
        	:type theF: TopoDS_Face
        	:param aC2D:
        	:type aC2D: Geom2d_Curve
        	:param bToUpdate:
        	:type bToUpdate: bool
        	:rtype: void
        """
        return _BRepLib.breplib_BuildPCurveForEdgeOnPlane(*args)

    BuildPCurveForEdgeOnPlane = staticmethod(BuildPCurveForEdgeOnPlane)

    def CheckSameRange(*args) -> "Standard_Boolean":
        """
        * checks if the Edge is same range IGNORING the same range flag of the edge Confusion argument is to compare real numbers idenpendently of any model space tolerance
        	:param E:
        	:type E: TopoDS_Edge
        	:param Confusion: default value is 1.0e-12
        	:type Confusion: float
        	:rtype: bool
        """
        return _BRepLib.breplib_CheckSameRange(*args)

    CheckSameRange = staticmethod(CheckSameRange)

    def EncodeRegularity(*args) -> "void":
        """
        * Encodes the Regularity of edges on a Shape. Warning: <TolAng> is an angular tolerance, expressed in Rad. Warning: If the edges's regularity are coded before, nothing is done.
        	:param S:
        	:type S: TopoDS_Shape
        	:param TolAng: default value is 1.0e-10
        	:type TolAng: float
        	:rtype: void
        * Encodes the Regularity of edges in list <LE> on the shape <S> Warning: <TolAng> is an angular tolerance, expressed in Rad. Warning: If the edges's regularity are coded before, nothing is done.
        	:param S:
        	:type S: TopoDS_Shape
        	:param LE:
        	:type LE: TopTools_ListOfShape
        	:param TolAng: default value is 1.0e-10
        	:type TolAng: float
        	:rtype: void
        * Encodes the Regularity beetween <F1> and <F2> by <E> Warning: <TolAng> is an angular tolerance, expressed in Rad. Warning: If the edge's regularity is coded before, nothing is done.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:param TolAng: default value is 1.0e-10
        	:type TolAng: float
        	:rtype: void
        """
        return _BRepLib.breplib_EncodeRegularity(*args)

    EncodeRegularity = staticmethod(EncodeRegularity)

    def EnsureNormalConsistency(*args) -> "Standard_Boolean":
        """
        * Corrects the normals in Poly_Triangulation of faces, in such way that normals at nodes lying along smooth edges have the same value on both adjacent triangulations. Returns True if any correction is done.
        	:param S:
        	:type S: TopoDS_Shape
        	:param theAngTol: default value is 0.001
        	:type theAngTol: float
        	:param ForceComputeNormals: default value is Standard_False
        	:type ForceComputeNormals: bool
        	:rtype: bool
        """
        return _BRepLib.breplib_EnsureNormalConsistency(*args)

    EnsureNormalConsistency = staticmethod(EnsureNormalConsistency)

    def ExtendFace(*args) -> "void":
        """
        * Enlarges the face on the given value. @param theF [in] The face to extend @param theExtVal [in] The extension value @param theExtUMin [in] Defines whether to extend the face in UMin direction @param theExtUMax [in] Defines whether to extend the face in UMax direction @param theExtVMin [in] Defines whether to extend the face in VMin direction @param theExtVMax [in] Defines whether to extend the face in VMax direction @param theFExtended [in] The extended face
        	:param theF:
        	:type theF: TopoDS_Face
        	:param theExtVal:
        	:type theExtVal: float
        	:param theExtUMin:
        	:type theExtUMin: bool
        	:param theExtUMax:
        	:type theExtUMax: bool
        	:param theExtVMin:
        	:type theExtVMin: bool
        	:param theExtVMax:
        	:type theExtVMax: bool
        	:param theFExtended:
        	:type theFExtended: TopoDS_Face
        	:rtype: void
        """
        return _BRepLib.breplib_ExtendFace(*args)

    ExtendFace = staticmethod(ExtendFace)

    def FindValidRange(*args) -> "Standard_Real &, Standard_Real &":
        """
        * For an edge defined by 3d curve and tolerance and vertices defined by points, parameters on curve and tolerances, finds a range of curve between vertices not covered by vertices tolerances. Returns false if there is no such range. Otherwise, sets theFirst and theLast as its bounds.
        	:param theCurve:
        	:type theCurve: Adaptor3d_Curve
        	:param theTolE:
        	:type theTolE: float
        	:param theParV1:
        	:type theParV1: float
        	:param thePntV1:
        	:type thePntV1: gp_Pnt
        	:param theTolV1:
        	:type theTolV1: float
        	:param theParV2:
        	:type theParV2: float
        	:param thePntV2:
        	:type thePntV2: gp_Pnt
        	:param theTolV2:
        	:type theTolV2: float
        	:param theFirst:
        	:type theFirst: float
        	:param theLast:
        	:type theLast: float
        	:rtype: bool
        * Finds a range of 3d curve of the edge not covered by vertices tolerances. Returns false if there is no such range. Otherwise, sets theFirst and theLast as its bounds.
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theFirst:
        	:type theFirst: float
        	:param theLast:
        	:type theLast: float
        	:rtype: bool
        """
        return _BRepLib.breplib_FindValidRange(*args)

    FindValidRange = staticmethod(FindValidRange)

    def OrientClosedSolid(*args) -> "Standard_Boolean":
        """
        * Orients the solid forward and the shell with the orientation to have matter in the solid. Returns False if the solid is unOrientable (open or incoherent)
        	:param solid:
        	:type solid: TopoDS_Solid
        	:rtype: bool
        """
        return _BRepLib.breplib_OrientClosedSolid(*args)

    OrientClosedSolid = staticmethod(OrientClosedSolid)

    def Plane(*args) -> "opencascade::handle< Geom_Plane > const &":
        """
        * Sets the current plane to P.
        	:param P:
        	:type P: Geom_Plane
        	:rtype: void
        * Returns the current plane.
        	:rtype: opencascade::handle<Geom_Plane>
        """
        return _BRepLib.breplib_Plane(*args)

    Plane = staticmethod(Plane)

    def Precision(*args) -> "Standard_Real":
        """
        * Computes the max distance between edge and its 2d representation on the face. Sets the default precision. The current Precision is returned.
        	:param P:
        	:type P: float
        	:rtype: void
        * Returns the default precision.
        	:rtype: float
        """
        return _BRepLib.breplib_Precision(*args)

    Precision = staticmethod(Precision)

    def ReverseSortFaces(*args) -> "void":
        """
        * Sorts in LF the Faces of S on the reverse complexity of their surfaces (other,Torus,Sphere,Cone,Cylinder,Plane)
        	:param S:
        	:type S: TopoDS_Shape
        	:param LF:
        	:type LF: TopTools_ListOfShape
        	:rtype: void
        """
        return _BRepLib.breplib_ReverseSortFaces(*args)

    ReverseSortFaces = staticmethod(ReverseSortFaces)

    def SameParameter(*args) -> "void":
        """
        * Computes new 2d curve(s) for the edge <theEdge> to have the same parameter as the 3d curve. The algorithm is not done if the flag SameParameter was True on the Edge.
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param Tolerance: default value is 1.0e-5
        	:type Tolerance: float
        	:rtype: void
        * Computes new 2d curve(s) for the edge <theEdge> to have the same parameter as the 3d curve. The algorithm is not done if the flag SameParameter was True on the Edge. theNewTol is a new tolerance of vertices of the input edge (not applied inside the algorithm, but pre-computed). If IsUseOldEdge is true then the input edge will be modified, otherwise the new copy of input edge will be created. Returns the new edge as a result, can be ignored if IsUseOldEdge is true.
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theTolerance:
        	:type theTolerance: float
        	:param theNewTol:
        	:type theNewTol: float
        	:param IsUseOldEdge:
        	:type IsUseOldEdge: bool
        	:rtype: TopoDS_Edge
        * Computes new 2d curve(s) for all the edges of <S> to have the same parameter as the 3d curve. The algorithm is not done if the flag SameParameter was True on an Edge.
        	:param S:
        	:type S: TopoDS_Shape
        	:param Tolerance: default value is 1.0e-5
        	:type Tolerance: float
        	:param forced: default value is Standard_False
        	:type forced: bool
        	:rtype: void
        * Computes new 2d curve(s) for all the edges of <S> to have the same parameter as the 3d curve. The algorithm is not done if the flag SameParameter was True on an Edge. theReshaper is used to record the modifications of input shape <S> to prevent any modifications on the shape itself. Thus the input shape (and its subshapes) will not be modified, instead the reshaper will contain a modified empty-copies of original subshapes as substitutions.
        	:param S:
        	:type S: TopoDS_Shape
        	:param theReshaper:
        	:type theReshaper: BRepTools_ReShape
        	:param Tolerance: default value is 1.0e-5
        	:type Tolerance: float
        	:param forced: default value is Standard_False
        	:type forced: bool
        	:rtype: void
        """
        return _BRepLib.breplib_SameParameter(*args)

    SameParameter = staticmethod(SameParameter)

    def SameRange(*args) -> "void":
        """
        * will make all the curve representation have the same range domain for the parameters. This will IGNORE the same range flag value to proceed. If there is a 3D curve there it will the range of that curve. If not the first curve representation encountered in the list will give its range to the all the other curves.
        	:param E:
        	:type E: TopoDS_Edge
        	:param Tolerance: default value is 1.0e-5
        	:type Tolerance: float
        	:rtype: void
        """
        return _BRepLib.breplib_SameRange(*args)

    SameRange = staticmethod(SameRange)

    def SortFaces(*args) -> "void":
        """
        * Sorts in LF the Faces of S on the complexity of their surfaces (Plane,Cylinder,Cone,Sphere,Torus,other)
        	:param S:
        	:type S: TopoDS_Shape
        	:param LF:
        	:type LF: TopTools_ListOfShape
        	:rtype: void
        """
        return _BRepLib.breplib_SortFaces(*args)

    SortFaces = staticmethod(SortFaces)

    def UpdateEdgeTol(*args) -> "Standard_Boolean":
        """
        * Checks if the edge has a Tolerance smaller than -- -- -- -- MaxToleranceToCheck if so it will compute the radius of -- the cylindrical pipe surface that MinToleranceRequest is the minimum tolerance before it is usefull to start testing. Usually it should be arround 10e-5 contains all -- the curve represenation of the edge returns True if the Edge tolerance had to be updated
        	:param E:
        	:type E: TopoDS_Edge
        	:param MinToleranceRequest:
        	:type MinToleranceRequest: float
        	:param MaxToleranceToCheck:
        	:type MaxToleranceToCheck: float
        	:rtype: bool
        """
        return _BRepLib.breplib_UpdateEdgeTol(*args)

    UpdateEdgeTol = staticmethod(UpdateEdgeTol)

    def UpdateEdgeTolerance(*args) -> "Standard_Boolean":
        """
        * -- Checks all the edges of the shape whose -- -- -- Tolerance is smaller than MaxToleranceToCheck -- Returns True if at least one edge was updated -- MinToleranceRequest is the minimum tolerance before -- it -- is usefull to start testing. Usually it should be arround -- 10e-5-- //! Warning :The method is very slow as it checks all. Use only in interfaces or processing assimilate batch
        	:param S:
        	:type S: TopoDS_Shape
        	:param MinToleranceRequest:
        	:type MinToleranceRequest: float
        	:param MaxToleranceToCheck:
        	:type MaxToleranceToCheck: float
        	:rtype: bool
        """
        return _BRepLib.breplib_UpdateEdgeTolerance(*args)

    UpdateEdgeTolerance = staticmethod(UpdateEdgeTolerance)

    def UpdateInnerTolerances(*args) -> "void":
        """
        * Checks tolerances of edges (including inner points) and vertices of a shape and updates them to satisfy 'SameParameter' condition
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: void
        """
        return _BRepLib.breplib_UpdateInnerTolerances(*args)

    UpdateInnerTolerances = staticmethod(UpdateInnerTolerances)

    def UpdateTolerances(*args) -> "void":
        """
        * Replaces tolerance of FACE EDGE VERTEX by the tolerance Max of their connected handling shapes. It is not necessary to use this call after SameParameter. (called in)
        	:param S:
        	:type S: TopoDS_Shape
        	:param verifyFaceTolerance: default value is Standard_False
        	:type verifyFaceTolerance: bool
        	:rtype: void
        * Replaces tolerance of FACE EDGE VERTEX by the tolerance Max of their connected handling shapes. It is not necessary to use this call after SameParameter. (called in) theReshaper is used to record the modifications of input shape <S> to prevent any modifications on the shape itself. Thus the input shape (and its subshapes) will not be modified, instead the reshaper will contain a modified empty-copies of original subshapes as substitutions.
        	:param S:
        	:type S: TopoDS_Shape
        	:param theReshaper:
        	:type theReshaper: BRepTools_ReShape
        	:param verifyFaceTolerance: default value is Standard_False
        	:type verifyFaceTolerance: bool
        	:rtype: void
        """
        return _BRepLib.breplib_UpdateTolerances(*args)

    UpdateTolerances = staticmethod(UpdateTolerances)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepLib.breplib_swiginit(self, _BRepLib.new_breplib())
    __swig_destroy__ = _BRepLib.delete_breplib
breplib_swigregister = _BRepLib.breplib_swigregister
breplib_swigregister(breplib)

def breplib_BoundingVertex(*args) -> "Standard_Real &":
    """
    * Calculates the bounding sphere around the set of vertexes from the theLV list. Returns the center (theNewCenter) and the radius (theNewTol) of this sphere. This can be used to construct the new vertex which covers the given set of other vertices.
    	:param theLV:
    	:type theLV: NCollection_List<TopoDS_Shape>
    	:param theNewCenter:
    	:type theNewCenter: gp_Pnt
    	:param theNewTol:
    	:type theNewTol: float
    	:rtype: void
    """
    return _BRepLib.breplib_BoundingVertex(*args)

def breplib_BuildCurve3d(*args) -> "Standard_Boolean":
    """
    * Computes the 3d curve for the edge <E> if it does not exist. Returns True if the curve was computed or existed. Returns False if there is no planar pcurve or the computation failed. <MaxSegment> >= 30 in approximation
    	:param E:
    	:type E: TopoDS_Edge
    	:param Tolerance: default value is 1.0e-5
    	:type Tolerance: float
    	:param Continuity: default value is GeomAbs_C1
    	:type Continuity: GeomAbs_Shape
    	:param MaxDegree: default value is 14
    	:type MaxDegree: int
    	:param MaxSegment: default value is 0
    	:type MaxSegment: int
    	:rtype: bool
    """
    return _BRepLib.breplib_BuildCurve3d(*args)

def breplib_BuildCurves3d(*args) -> "Standard_Boolean":
    """
    * Computes the 3d curves for all the edges of <S> return False if one of the computation failed. <MaxSegment> >= 30 in approximation
    	:param S:
    	:type S: TopoDS_Shape
    	:param Tolerance:
    	:type Tolerance: float
    	:param Continuity: default value is GeomAbs_C1
    	:type Continuity: GeomAbs_Shape
    	:param MaxDegree: default value is 14
    	:type MaxDegree: int
    	:param MaxSegment: default value is 0
    	:type MaxSegment: int
    	:rtype: bool
    * Computes the 3d curves for all the edges of <S> return False if one of the computation failed.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: bool
    """
    return _BRepLib.breplib_BuildCurves3d(*args)

def breplib_BuildPCurveForEdgeOnPlane(*args) -> "Standard_Boolean &":
    """
    * Builds pcurve of edge on face if the surface is plane, and updates the edge.
    	:param theE:
    	:type theE: TopoDS_Edge
    	:param theF:
    	:type theF: TopoDS_Face
    	:rtype: void
    * Builds pcurve of edge on face if the surface is plane, but does not update the edge. The output are the pcurve and the flag telling that pcurve was built.
    	:param theE:
    	:type theE: TopoDS_Edge
    	:param theF:
    	:type theF: TopoDS_Face
    	:param aC2D:
    	:type aC2D: Geom2d_Curve
    	:param bToUpdate:
    	:type bToUpdate: bool
    	:rtype: void
    """
    return _BRepLib.breplib_BuildPCurveForEdgeOnPlane(*args)

def breplib_CheckSameRange(*args) -> "Standard_Boolean":
    """
    * checks if the Edge is same range IGNORING the same range flag of the edge Confusion argument is to compare real numbers idenpendently of any model space tolerance
    	:param E:
    	:type E: TopoDS_Edge
    	:param Confusion: default value is 1.0e-12
    	:type Confusion: float
    	:rtype: bool
    """
    return _BRepLib.breplib_CheckSameRange(*args)

def breplib_EncodeRegularity(*args) -> "void":
    """
    * Encodes the Regularity of edges on a Shape. Warning: <TolAng> is an angular tolerance, expressed in Rad. Warning: If the edges's regularity are coded before, nothing is done.
    	:param S:
    	:type S: TopoDS_Shape
    	:param TolAng: default value is 1.0e-10
    	:type TolAng: float
    	:rtype: void
    * Encodes the Regularity of edges in list <LE> on the shape <S> Warning: <TolAng> is an angular tolerance, expressed in Rad. Warning: If the edges's regularity are coded before, nothing is done.
    	:param S:
    	:type S: TopoDS_Shape
    	:param LE:
    	:type LE: TopTools_ListOfShape
    	:param TolAng: default value is 1.0e-10
    	:type TolAng: float
    	:rtype: void
    * Encodes the Regularity beetween <F1> and <F2> by <E> Warning: <TolAng> is an angular tolerance, expressed in Rad. Warning: If the edge's regularity is coded before, nothing is done.
    	:param E:
    	:type E: TopoDS_Edge
    	:param F1:
    	:type F1: TopoDS_Face
    	:param F2:
    	:type F2: TopoDS_Face
    	:param TolAng: default value is 1.0e-10
    	:type TolAng: float
    	:rtype: void
    """
    return _BRepLib.breplib_EncodeRegularity(*args)

def breplib_EnsureNormalConsistency(*args) -> "Standard_Boolean":
    """
    * Corrects the normals in Poly_Triangulation of faces, in such way that normals at nodes lying along smooth edges have the same value on both adjacent triangulations. Returns True if any correction is done.
    	:param S:
    	:type S: TopoDS_Shape
    	:param theAngTol: default value is 0.001
    	:type theAngTol: float
    	:param ForceComputeNormals: default value is Standard_False
    	:type ForceComputeNormals: bool
    	:rtype: bool
    """
    return _BRepLib.breplib_EnsureNormalConsistency(*args)

def breplib_ExtendFace(*args) -> "void":
    """
    * Enlarges the face on the given value. @param theF [in] The face to extend @param theExtVal [in] The extension value @param theExtUMin [in] Defines whether to extend the face in UMin direction @param theExtUMax [in] Defines whether to extend the face in UMax direction @param theExtVMin [in] Defines whether to extend the face in VMin direction @param theExtVMax [in] Defines whether to extend the face in VMax direction @param theFExtended [in] The extended face
    	:param theF:
    	:type theF: TopoDS_Face
    	:param theExtVal:
    	:type theExtVal: float
    	:param theExtUMin:
    	:type theExtUMin: bool
    	:param theExtUMax:
    	:type theExtUMax: bool
    	:param theExtVMin:
    	:type theExtVMin: bool
    	:param theExtVMax:
    	:type theExtVMax: bool
    	:param theFExtended:
    	:type theFExtended: TopoDS_Face
    	:rtype: void
    """
    return _BRepLib.breplib_ExtendFace(*args)

def breplib_FindValidRange(*args) -> "Standard_Real &, Standard_Real &":
    """
    * For an edge defined by 3d curve and tolerance and vertices defined by points, parameters on curve and tolerances, finds a range of curve between vertices not covered by vertices tolerances. Returns false if there is no such range. Otherwise, sets theFirst and theLast as its bounds.
    	:param theCurve:
    	:type theCurve: Adaptor3d_Curve
    	:param theTolE:
    	:type theTolE: float
    	:param theParV1:
    	:type theParV1: float
    	:param thePntV1:
    	:type thePntV1: gp_Pnt
    	:param theTolV1:
    	:type theTolV1: float
    	:param theParV2:
    	:type theParV2: float
    	:param thePntV2:
    	:type thePntV2: gp_Pnt
    	:param theTolV2:
    	:type theTolV2: float
    	:param theFirst:
    	:type theFirst: float
    	:param theLast:
    	:type theLast: float
    	:rtype: bool
    * Finds a range of 3d curve of the edge not covered by vertices tolerances. Returns false if there is no such range. Otherwise, sets theFirst and theLast as its bounds.
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:param theFirst:
    	:type theFirst: float
    	:param theLast:
    	:type theLast: float
    	:rtype: bool
    """
    return _BRepLib.breplib_FindValidRange(*args)

def breplib_OrientClosedSolid(*args) -> "Standard_Boolean":
    """
    * Orients the solid forward and the shell with the orientation to have matter in the solid. Returns False if the solid is unOrientable (open or incoherent)
    	:param solid:
    	:type solid: TopoDS_Solid
    	:rtype: bool
    """
    return _BRepLib.breplib_OrientClosedSolid(*args)

def breplib_Plane(*args) -> "opencascade::handle< Geom_Plane > const &":
    """
    * Sets the current plane to P.
    	:param P:
    	:type P: Geom_Plane
    	:rtype: void
    * Returns the current plane.
    	:rtype: opencascade::handle<Geom_Plane>
    """
    return _BRepLib.breplib_Plane(*args)

def breplib_Precision(*args) -> "Standard_Real":
    """
    * Computes the max distance between edge and its 2d representation on the face. Sets the default precision. The current Precision is returned.
    	:param P:
    	:type P: float
    	:rtype: void
    * Returns the default precision.
    	:rtype: float
    """
    return _BRepLib.breplib_Precision(*args)

def breplib_ReverseSortFaces(*args) -> "void":
    """
    * Sorts in LF the Faces of S on the reverse complexity of their surfaces (other,Torus,Sphere,Cone,Cylinder,Plane)
    	:param S:
    	:type S: TopoDS_Shape
    	:param LF:
    	:type LF: TopTools_ListOfShape
    	:rtype: void
    """
    return _BRepLib.breplib_ReverseSortFaces(*args)

def breplib_SameParameter(*args) -> "void":
    """
    * Computes new 2d curve(s) for the edge <theEdge> to have the same parameter as the 3d curve. The algorithm is not done if the flag SameParameter was True on the Edge.
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:param Tolerance: default value is 1.0e-5
    	:type Tolerance: float
    	:rtype: void
    * Computes new 2d curve(s) for the edge <theEdge> to have the same parameter as the 3d curve. The algorithm is not done if the flag SameParameter was True on the Edge. theNewTol is a new tolerance of vertices of the input edge (not applied inside the algorithm, but pre-computed). If IsUseOldEdge is true then the input edge will be modified, otherwise the new copy of input edge will be created. Returns the new edge as a result, can be ignored if IsUseOldEdge is true.
    	:param theEdge:
    	:type theEdge: TopoDS_Edge
    	:param theTolerance:
    	:type theTolerance: float
    	:param theNewTol:
    	:type theNewTol: float
    	:param IsUseOldEdge:
    	:type IsUseOldEdge: bool
    	:rtype: TopoDS_Edge
    * Computes new 2d curve(s) for all the edges of <S> to have the same parameter as the 3d curve. The algorithm is not done if the flag SameParameter was True on an Edge.
    	:param S:
    	:type S: TopoDS_Shape
    	:param Tolerance: default value is 1.0e-5
    	:type Tolerance: float
    	:param forced: default value is Standard_False
    	:type forced: bool
    	:rtype: void
    * Computes new 2d curve(s) for all the edges of <S> to have the same parameter as the 3d curve. The algorithm is not done if the flag SameParameter was True on an Edge. theReshaper is used to record the modifications of input shape <S> to prevent any modifications on the shape itself. Thus the input shape (and its subshapes) will not be modified, instead the reshaper will contain a modified empty-copies of original subshapes as substitutions.
    	:param S:
    	:type S: TopoDS_Shape
    	:param theReshaper:
    	:type theReshaper: BRepTools_ReShape
    	:param Tolerance: default value is 1.0e-5
    	:type Tolerance: float
    	:param forced: default value is Standard_False
    	:type forced: bool
    	:rtype: void
    """
    return _BRepLib.breplib_SameParameter(*args)

def breplib_SameRange(*args) -> "void":
    """
    * will make all the curve representation have the same range domain for the parameters. This will IGNORE the same range flag value to proceed. If there is a 3D curve there it will the range of that curve. If not the first curve representation encountered in the list will give its range to the all the other curves.
    	:param E:
    	:type E: TopoDS_Edge
    	:param Tolerance: default value is 1.0e-5
    	:type Tolerance: float
    	:rtype: void
    """
    return _BRepLib.breplib_SameRange(*args)

def breplib_SortFaces(*args) -> "void":
    """
    * Sorts in LF the Faces of S on the complexity of their surfaces (Plane,Cylinder,Cone,Sphere,Torus,other)
    	:param S:
    	:type S: TopoDS_Shape
    	:param LF:
    	:type LF: TopTools_ListOfShape
    	:rtype: void
    """
    return _BRepLib.breplib_SortFaces(*args)

def breplib_UpdateEdgeTol(*args) -> "Standard_Boolean":
    """
    * Checks if the edge has a Tolerance smaller than -- -- -- -- MaxToleranceToCheck if so it will compute the radius of -- the cylindrical pipe surface that MinToleranceRequest is the minimum tolerance before it is usefull to start testing. Usually it should be arround 10e-5 contains all -- the curve represenation of the edge returns True if the Edge tolerance had to be updated
    	:param E:
    	:type E: TopoDS_Edge
    	:param MinToleranceRequest:
    	:type MinToleranceRequest: float
    	:param MaxToleranceToCheck:
    	:type MaxToleranceToCheck: float
    	:rtype: bool
    """
    return _BRepLib.breplib_UpdateEdgeTol(*args)

def breplib_UpdateEdgeTolerance(*args) -> "Standard_Boolean":
    """
    * -- Checks all the edges of the shape whose -- -- -- Tolerance is smaller than MaxToleranceToCheck -- Returns True if at least one edge was updated -- MinToleranceRequest is the minimum tolerance before -- it -- is usefull to start testing. Usually it should be arround -- 10e-5-- //! Warning :The method is very slow as it checks all. Use only in interfaces or processing assimilate batch
    	:param S:
    	:type S: TopoDS_Shape
    	:param MinToleranceRequest:
    	:type MinToleranceRequest: float
    	:param MaxToleranceToCheck:
    	:type MaxToleranceToCheck: float
    	:rtype: bool
    """
    return _BRepLib.breplib_UpdateEdgeTolerance(*args)

def breplib_UpdateInnerTolerances(*args) -> "void":
    """
    * Checks tolerances of edges (including inner points) and vertices of a shape and updates them to satisfy 'SameParameter' condition
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: void
    """
    return _BRepLib.breplib_UpdateInnerTolerances(*args)

def breplib_UpdateTolerances(*args) -> "void":
    """
    * Replaces tolerance of FACE EDGE VERTEX by the tolerance Max of their connected handling shapes. It is not necessary to use this call after SameParameter. (called in)
    	:param S:
    	:type S: TopoDS_Shape
    	:param verifyFaceTolerance: default value is Standard_False
    	:type verifyFaceTolerance: bool
    	:rtype: void
    * Replaces tolerance of FACE EDGE VERTEX by the tolerance Max of their connected handling shapes. It is not necessary to use this call after SameParameter. (called in) theReshaper is used to record the modifications of input shape <S> to prevent any modifications on the shape itself. Thus the input shape (and its subshapes) will not be modified, instead the reshaper will contain a modified empty-copies of original subshapes as substitutions.
    	:param S:
    	:type S: TopoDS_Shape
    	:param theReshaper:
    	:type theReshaper: BRepTools_ReShape
    	:param verifyFaceTolerance: default value is Standard_False
    	:type verifyFaceTolerance: bool
    	:rtype: void
    """
    return _BRepLib.breplib_UpdateTolerances(*args)

class BRepLib_CheckCurveOnSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Default contructor
        	:rtype: None
        * Contructor
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:rtype: None
        """
        _BRepLib.BRepLib_CheckCurveOnSurface_swiginit(self, _BRepLib.new_BRepLib_CheckCurveOnSurface(*args))

    def Curve(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """
        * Returns source 3D-Curve
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _BRepLib.BRepLib_CheckCurveOnSurface_Curve(self, *args)


    def ErrorStatus(self, *args) -> "Standard_Integer":
        """
        * Returns error status The possible values are: 0 - OK; 1 - null curve or surface or 2d curve; 2 - invalid parametric range; 3 - error in calculations.
        	:rtype: int
        """
        return _BRepLib.BRepLib_CheckCurveOnSurface_ErrorStatus(self, *args)


    def Init(self, *args) -> "void":
        """
        * Sets the data for the algorithm
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:rtype: None
        """
        return _BRepLib.BRepLib_CheckCurveOnSurface_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the max distance has been found
        	:rtype: bool
        """
        return _BRepLib.BRepLib_CheckCurveOnSurface_IsDone(self, *args)


    def MaxDistance(self, *args) -> "Standard_Real":
        """
        * Returns max distance
        	:rtype: float
        """
        return _BRepLib.BRepLib_CheckCurveOnSurface_MaxDistance(self, *args)


    def MaxParameter(self, *args) -> "Standard_Real":
        """
        * Returns parameter in which the distance is maximal
        	:rtype: float
        """
        return _BRepLib.BRepLib_CheckCurveOnSurface_MaxParameter(self, *args)


    def PCurve(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        * Returns mine 2D-Curve
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _BRepLib.BRepLib_CheckCurveOnSurface_PCurve(self, *args)


    def PCurve2(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        * Returns 2nd 2D-Curve (if it exists, e.g. for seam-edge)
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _BRepLib.BRepLib_CheckCurveOnSurface_PCurve2(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs the calculation If isTheMultyTheadDisabled == True then computation will be made without any parallelization.
        	:param isTheMultyTheradDisabled: default value is Standard_False
        	:type isTheMultyTheradDisabled: bool
        	:rtype: None
        """
        return _BRepLib.BRepLib_CheckCurveOnSurface_Perform(self, *args)


    def Range(self, *args) -> "void":
        """
        * Returns first and last parameter of the curves (2D- and 3D-curves are considered to have same range)
        	:param theFirst:
        	:type theFirst: float
        	:param theLast:
        	:type theLast: float
        	:rtype: None
        """
        return _BRepLib.BRepLib_CheckCurveOnSurface_Range(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Geom_Surface > const &":
        """
        * Returns source surface
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _BRepLib.BRepLib_CheckCurveOnSurface_Surface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_CheckCurveOnSurface
BRepLib_CheckCurveOnSurface.Curve = new_instancemethod(_BRepLib.BRepLib_CheckCurveOnSurface_Curve, None, BRepLib_CheckCurveOnSurface)
BRepLib_CheckCurveOnSurface.ErrorStatus = new_instancemethod(_BRepLib.BRepLib_CheckCurveOnSurface_ErrorStatus, None, BRepLib_CheckCurveOnSurface)
BRepLib_CheckCurveOnSurface.Init = new_instancemethod(_BRepLib.BRepLib_CheckCurveOnSurface_Init, None, BRepLib_CheckCurveOnSurface)
BRepLib_CheckCurveOnSurface.IsDone = new_instancemethod(_BRepLib.BRepLib_CheckCurveOnSurface_IsDone, None, BRepLib_CheckCurveOnSurface)
BRepLib_CheckCurveOnSurface.MaxDistance = new_instancemethod(_BRepLib.BRepLib_CheckCurveOnSurface_MaxDistance, None, BRepLib_CheckCurveOnSurface)
BRepLib_CheckCurveOnSurface.MaxParameter = new_instancemethod(_BRepLib.BRepLib_CheckCurveOnSurface_MaxParameter, None, BRepLib_CheckCurveOnSurface)
BRepLib_CheckCurveOnSurface.PCurve = new_instancemethod(_BRepLib.BRepLib_CheckCurveOnSurface_PCurve, None, BRepLib_CheckCurveOnSurface)
BRepLib_CheckCurveOnSurface.PCurve2 = new_instancemethod(_BRepLib.BRepLib_CheckCurveOnSurface_PCurve2, None, BRepLib_CheckCurveOnSurface)
BRepLib_CheckCurveOnSurface.Perform = new_instancemethod(_BRepLib.BRepLib_CheckCurveOnSurface_Perform, None, BRepLib_CheckCurveOnSurface)
BRepLib_CheckCurveOnSurface.Range = new_instancemethod(_BRepLib.BRepLib_CheckCurveOnSurface_Range, None, BRepLib_CheckCurveOnSurface)
BRepLib_CheckCurveOnSurface.Surface = new_instancemethod(_BRepLib.BRepLib_CheckCurveOnSurface_Surface, None, BRepLib_CheckCurveOnSurface)
BRepLib_CheckCurveOnSurface_swigregister = _BRepLib.BRepLib_CheckCurveOnSurface_swigregister
BRepLib_CheckCurveOnSurface_swigregister(BRepLib_CheckCurveOnSurface)

class BRepLib_Command(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Check(self, *args) -> "void":
        """
        * Raises NotDone if done is false.
        	:rtype: None
        """
        return _BRepLib.BRepLib_Command_Check(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepLib.BRepLib_Command_IsDone(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_Command
BRepLib_Command.Check = new_instancemethod(_BRepLib.BRepLib_Command_Check, None, BRepLib_Command)
BRepLib_Command.IsDone = new_instancemethod(_BRepLib.BRepLib_Command_IsDone, None, BRepLib_Command)
BRepLib_Command_swigregister = _BRepLib.BRepLib_Command_swigregister
BRepLib_Command_swigregister(BRepLib_Command)

class BRepLib_FindSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Computes the Surface from the edges of <S> with the given tolerance. if <OnlyPlane> is true, the computed surface will be a plane. If it is not possible to find a plane, the flag NotDone will be set. If <OnlyClosed> is true, then S sould be a wire and the existing surface, on which wire S is not closed in 2D, will be ignored.
        	:param S:
        	:type S: TopoDS_Shape
        	:param Tol: default value is -1
        	:type Tol: float
        	:param OnlyPlane: default value is Standard_False
        	:type OnlyPlane: bool
        	:param OnlyClosed: default value is Standard_False
        	:type OnlyClosed: bool
        	:rtype: None
        """
        _BRepLib.BRepLib_FindSurface_swiginit(self, _BRepLib.new_BRepLib_FindSurface(*args))

    def Existed(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepLib.BRepLib_FindSurface_Existed(self, *args)


    def Found(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepLib.BRepLib_FindSurface_Found(self, *args)


    def Init(self, *args) -> "void":
        """
        * Computes the Surface from the edges of <S> with the given tolerance. if <OnlyPlane> is true, the computed surface will be a plane. If it is not possible to find a plane, the flag NotDone will be set. If <OnlyClosed> is true, then S sould be a wire and the existing surface, on which wire S is not closed in 2D, will be ignored.
        	:param S:
        	:type S: TopoDS_Shape
        	:param Tol: default value is -1
        	:type Tol: float
        	:param OnlyPlane: default value is Standard_False
        	:type OnlyPlane: bool
        	:param OnlyClosed: default value is Standard_False
        	:type OnlyClosed: bool
        	:rtype: None
        """
        return _BRepLib.BRepLib_FindSurface_Init(self, *args)


    def Location(self, *args) -> "TopLoc_Location":
        """:rtype: TopLoc_Location"""
        return _BRepLib.BRepLib_FindSurface_Location(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Geom_Surface >":
        """:rtype: opencascade::handle<Geom_Surface>"""
        return _BRepLib.BRepLib_FindSurface_Surface(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _BRepLib.BRepLib_FindSurface_Tolerance(self, *args)


    def ToleranceReached(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _BRepLib.BRepLib_FindSurface_ToleranceReached(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_FindSurface
BRepLib_FindSurface.Existed = new_instancemethod(_BRepLib.BRepLib_FindSurface_Existed, None, BRepLib_FindSurface)
BRepLib_FindSurface.Found = new_instancemethod(_BRepLib.BRepLib_FindSurface_Found, None, BRepLib_FindSurface)
BRepLib_FindSurface.Init = new_instancemethod(_BRepLib.BRepLib_FindSurface_Init, None, BRepLib_FindSurface)
BRepLib_FindSurface.Location = new_instancemethod(_BRepLib.BRepLib_FindSurface_Location, None, BRepLib_FindSurface)
BRepLib_FindSurface.Surface = new_instancemethod(_BRepLib.BRepLib_FindSurface_Surface, None, BRepLib_FindSurface)
BRepLib_FindSurface.Tolerance = new_instancemethod(_BRepLib.BRepLib_FindSurface_Tolerance, None, BRepLib_FindSurface)
BRepLib_FindSurface.ToleranceReached = new_instancemethod(_BRepLib.BRepLib_FindSurface_ToleranceReached, None, BRepLib_FindSurface)
BRepLib_FindSurface_swigregister = _BRepLib.BRepLib_FindSurface_swigregister
BRepLib_FindSurface_swigregister(BRepLib_FindSurface)

class BRepLib_FuseEdges(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AvoidEdges(self, *args) -> "void":
        """
        * set edges to avoid being fused
        	:param theMapEdg:
        	:type theMapEdg: TopTools_IndexedMapOfShape
        	:rtype: None
        """
        return _BRepLib.BRepLib_FuseEdges_AvoidEdges(self, *args)


    def __init__(self, *args):
        """
        * Initialise members and build construction of map of ancestors.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param PerformNow: default value is Standard_False
        	:type PerformNow: bool
        	:rtype: None
        """
        _BRepLib.BRepLib_FuseEdges_swiginit(self, _BRepLib.new_BRepLib_FuseEdges(*args))

    def Edges(self, *args) -> "void":
        """
        * returns all the list of edges to be fused each list of the map represent a set of connex edges that can be fused.
        	:param theMapLstEdg:
        	:type theMapLstEdg: TopTools_DataMapOfIntegerListOfShape
        	:rtype: None
        """
        return _BRepLib.BRepLib_FuseEdges_Edges(self, *args)


    def Faces(self, *args) -> "void":
        """
        * returns the map of modified faces.
        	:param theMapFac:
        	:type theMapFac: TopTools_DataMapOfShapeShape
        	:rtype: None
        """
        return _BRepLib.BRepLib_FuseEdges_Faces(self, *args)


    def NbVertices(self, *args) -> "Standard_Integer":
        """
        * returns the number of vertices candidate to be removed
        	:rtype: int
        """
        return _BRepLib.BRepLib_FuseEdges_NbVertices(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Using map of list of connex edges, fuse each list to one edge and then update myShape
        	:rtype: None
        """
        return _BRepLib.BRepLib_FuseEdges_Perform(self, *args)


    def ResultEdges(self, *args) -> "void":
        """
        * returns all the fused edges. each integer entry in the map corresponds to the integer in the DataMapOfIntegerListOfShape we get in method Edges. That is to say, to the list of edges in theMapLstEdg(i) corresponds the resulting edge theMapEdge(i)
        	:param theMapEdg:
        	:type theMapEdg: TopTools_DataMapOfIntegerShape
        	:rtype: None
        """
        return _BRepLib.BRepLib_FuseEdges_ResultEdges(self, *args)


    def SetConcatBSpl(self, *args) -> "void":
        """
        * set mode to enable concatenation G1 BSpline edges in one End Modified by IFV 19.04.07
        	:param theConcatBSpl: default value is Standard_True
        	:type theConcatBSpl: bool
        	:rtype: None
        """
        return _BRepLib.BRepLib_FuseEdges_SetConcatBSpl(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * returns myShape modified with the list of internal edges removed from it.
        	:rtype: TopoDS_Shape
        """
        return _BRepLib.BRepLib_FuseEdges_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_FuseEdges
BRepLib_FuseEdges.AvoidEdges = new_instancemethod(_BRepLib.BRepLib_FuseEdges_AvoidEdges, None, BRepLib_FuseEdges)
BRepLib_FuseEdges.Edges = new_instancemethod(_BRepLib.BRepLib_FuseEdges_Edges, None, BRepLib_FuseEdges)
BRepLib_FuseEdges.Faces = new_instancemethod(_BRepLib.BRepLib_FuseEdges_Faces, None, BRepLib_FuseEdges)
BRepLib_FuseEdges.NbVertices = new_instancemethod(_BRepLib.BRepLib_FuseEdges_NbVertices, None, BRepLib_FuseEdges)
BRepLib_FuseEdges.Perform = new_instancemethod(_BRepLib.BRepLib_FuseEdges_Perform, None, BRepLib_FuseEdges)
BRepLib_FuseEdges.ResultEdges = new_instancemethod(_BRepLib.BRepLib_FuseEdges_ResultEdges, None, BRepLib_FuseEdges)
BRepLib_FuseEdges.SetConcatBSpl = new_instancemethod(_BRepLib.BRepLib_FuseEdges_SetConcatBSpl, None, BRepLib_FuseEdges)
BRepLib_FuseEdges.Shape = new_instancemethod(_BRepLib.BRepLib_FuseEdges_Shape, None, BRepLib_FuseEdges)
BRepLib_FuseEdges_swigregister = _BRepLib.BRepLib_FuseEdges_swigregister
BRepLib_FuseEdges_swigregister(BRepLib_FuseEdges)

class BRepLib_MakeShape(BRepLib_Command):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Build(self, *args) -> "void":
        """
        * This is called by Shape(). It does nothing but may be redefined.
        	:rtype: None
        """
        return _BRepLib.BRepLib_MakeShape_Build(self, *args)


    def DescendantFaces(self, *args) -> "TopTools_ListOfShape const &":
        """
        * returns the list of generated Faces.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: TopTools_ListOfShape
        """
        return _BRepLib.BRepLib_MakeShape_DescendantFaces(self, *args)


    def FaceStatus(self, *args) -> "BRepLib_ShapeModification":
        """
        * returns the status of the Face after the shape creation.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: BRepLib_ShapeModification
        """
        return _BRepLib.BRepLib_MakeShape_FaceStatus(self, *args)


    def FacesFromEdges(self, *args) -> "TopTools_ListOfShape const &":
        """
        * returns a list of the created faces from the edge <E>.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: TopTools_ListOfShape
        """
        return _BRepLib.BRepLib_MakeShape_FacesFromEdges(self, *args)


    def HasDescendants(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Face generates new topology.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _BRepLib.BRepLib_MakeShape_HasDescendants(self, *args)


    def NbSurfaces(self, *args) -> "Standard_Integer":
        """
        * returns the number of surfaces after the shape creation.
        	:rtype: int
        """
        return _BRepLib.BRepLib_MakeShape_NbSurfaces(self, *args)


    def NewFaces(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Return the faces created for surface I.
        	:param I:
        	:type I: int
        	:rtype: TopTools_ListOfShape
        """
        return _BRepLib.BRepLib_MakeShape_NewFaces(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BRepLib.BRepLib_MakeShape_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeShape
BRepLib_MakeShape.Build = new_instancemethod(_BRepLib.BRepLib_MakeShape_Build, None, BRepLib_MakeShape)
BRepLib_MakeShape.DescendantFaces = new_instancemethod(_BRepLib.BRepLib_MakeShape_DescendantFaces, None, BRepLib_MakeShape)
BRepLib_MakeShape.FaceStatus = new_instancemethod(_BRepLib.BRepLib_MakeShape_FaceStatus, None, BRepLib_MakeShape)
BRepLib_MakeShape.FacesFromEdges = new_instancemethod(_BRepLib.BRepLib_MakeShape_FacesFromEdges, None, BRepLib_MakeShape)
BRepLib_MakeShape.HasDescendants = new_instancemethod(_BRepLib.BRepLib_MakeShape_HasDescendants, None, BRepLib_MakeShape)
BRepLib_MakeShape.NbSurfaces = new_instancemethod(_BRepLib.BRepLib_MakeShape_NbSurfaces, None, BRepLib_MakeShape)
BRepLib_MakeShape.NewFaces = new_instancemethod(_BRepLib.BRepLib_MakeShape_NewFaces, None, BRepLib_MakeShape)
BRepLib_MakeShape.Shape = new_instancemethod(_BRepLib.BRepLib_MakeShape_Shape, None, BRepLib_MakeShape)
BRepLib_MakeShape_swigregister = _BRepLib.BRepLib_MakeShape_swigregister
BRepLib_MakeShape_swigregister(BRepLib_MakeShape)

class BRepLib_MakeEdge(BRepLib_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        :param L:
        	:type L: gp_Lin
        	:rtype: None
        :param L:
        	:type L: gp_Lin
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: gp_Lin
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        :param L:
        	:type L: gp_Lin
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: gp_Circ
        	:rtype: None
        :param L:
        	:type L: gp_Circ
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: gp_Circ
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        :param L:
        	:type L: gp_Circ
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: gp_Elips
        	:rtype: None
        :param L:
        	:type L: gp_Elips
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: gp_Elips
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        :param L:
        	:type L: gp_Elips
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: gp_Hypr
        	:rtype: None
        :param L:
        	:type L: gp_Hypr
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: gp_Hypr
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        :param L:
        	:type L: gp_Hypr
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: gp_Parab
        	:rtype: None
        :param L:
        	:type L: gp_Parab
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: gp_Parab
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        :param L:
        	:type L: gp_Parab
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: Geom_Curve
        	:rtype: None
        :param L:
        	:type L: Geom_Curve
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: Geom_Curve
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        :param L:
        	:type L: Geom_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: Geom_Curve
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: Geom_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeEdge_swiginit(self, _BRepLib.new_BRepLib_MakeEdge(*args))

    def Edge(self, *args) -> "TopoDS_Edge const":
        """:rtype: TopoDS_Edge"""
        return _BRepLib.BRepLib_MakeEdge_Edge(self, *args)


    def Error(self, *args) -> "BRepLib_EdgeError":
        """
        * Returns the error description when NotDone.
        	:rtype: BRepLib_EdgeError
        """
        return _BRepLib.BRepLib_MakeEdge_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param C:
        	:type C: Geom_Curve
        	:rtype: None
        :param C:
        	:type C: Geom_Curve
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param C:
        	:type C: Geom_Curve
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        :param C:
        	:type C: Geom_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param C:
        	:type C: Geom_Curve
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param C:
        	:type C: Geom_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        """
        return _BRepLib.BRepLib_MakeEdge_Init(self, *args)


    def Vertex1(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the first vertex of the edge. May be Null.
        	:rtype: TopoDS_Vertex
        """
        return _BRepLib.BRepLib_MakeEdge_Vertex1(self, *args)


    def Vertex2(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the second vertex of the edge. May be Null.
        	:rtype: TopoDS_Vertex
        """
        return _BRepLib.BRepLib_MakeEdge_Vertex2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeEdge
BRepLib_MakeEdge.Edge = new_instancemethod(_BRepLib.BRepLib_MakeEdge_Edge, None, BRepLib_MakeEdge)
BRepLib_MakeEdge.Error = new_instancemethod(_BRepLib.BRepLib_MakeEdge_Error, None, BRepLib_MakeEdge)
BRepLib_MakeEdge.Init = new_instancemethod(_BRepLib.BRepLib_MakeEdge_Init, None, BRepLib_MakeEdge)
BRepLib_MakeEdge.Vertex1 = new_instancemethod(_BRepLib.BRepLib_MakeEdge_Vertex1, None, BRepLib_MakeEdge)
BRepLib_MakeEdge.Vertex2 = new_instancemethod(_BRepLib.BRepLib_MakeEdge_Vertex2, None, BRepLib_MakeEdge)
BRepLib_MakeEdge_swigregister = _BRepLib.BRepLib_MakeEdge_swigregister
BRepLib_MakeEdge_swigregister(BRepLib_MakeEdge)

class BRepLib_MakeEdge2d(BRepLib_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        :param L:
        	:type L: gp_Lin2d
        	:rtype: None
        :param L:
        	:type L: gp_Lin2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: gp_Lin2d
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        :param L:
        	:type L: gp_Lin2d
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: gp_Circ2d
        	:rtype: None
        :param L:
        	:type L: gp_Circ2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: gp_Circ2d
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        :param L:
        	:type L: gp_Circ2d
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: gp_Elips2d
        	:rtype: None
        :param L:
        	:type L: gp_Elips2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: gp_Elips2d
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        :param L:
        	:type L: gp_Elips2d
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: gp_Hypr2d
        	:rtype: None
        :param L:
        	:type L: gp_Hypr2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: gp_Hypr2d
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        :param L:
        	:type L: gp_Hypr2d
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: gp_Parab2d
        	:rtype: None
        :param L:
        	:type L: gp_Parab2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: gp_Parab2d
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        :param L:
        	:type L: gp_Parab2d
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param L:
        	:type L: Geom2d_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeEdge2d_swiginit(self, _BRepLib.new_BRepLib_MakeEdge2d(*args))

    def Edge(self, *args) -> "TopoDS_Edge const":
        """:rtype: TopoDS_Edge"""
        return _BRepLib.BRepLib_MakeEdge2d_Edge(self, *args)


    def Error(self, *args) -> "BRepLib_EdgeError":
        """
        * Returns the error description when NotDone.
        	:rtype: BRepLib_EdgeError
        """
        return _BRepLib.BRepLib_MakeEdge2d_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param C:
        	:type C: Geom2d_Curve
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        """
        return _BRepLib.BRepLib_MakeEdge2d_Init(self, *args)


    def Vertex1(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the first vertex of the edge. May be Null.
        	:rtype: TopoDS_Vertex
        """
        return _BRepLib.BRepLib_MakeEdge2d_Vertex1(self, *args)


    def Vertex2(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the second vertex of the edge. May be Null.
        	:rtype: TopoDS_Vertex
        """
        return _BRepLib.BRepLib_MakeEdge2d_Vertex2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeEdge2d
BRepLib_MakeEdge2d.Edge = new_instancemethod(_BRepLib.BRepLib_MakeEdge2d_Edge, None, BRepLib_MakeEdge2d)
BRepLib_MakeEdge2d.Error = new_instancemethod(_BRepLib.BRepLib_MakeEdge2d_Error, None, BRepLib_MakeEdge2d)
BRepLib_MakeEdge2d.Init = new_instancemethod(_BRepLib.BRepLib_MakeEdge2d_Init, None, BRepLib_MakeEdge2d)
BRepLib_MakeEdge2d.Vertex1 = new_instancemethod(_BRepLib.BRepLib_MakeEdge2d_Vertex1, None, BRepLib_MakeEdge2d)
BRepLib_MakeEdge2d.Vertex2 = new_instancemethod(_BRepLib.BRepLib_MakeEdge2d_Vertex2, None, BRepLib_MakeEdge2d)
BRepLib_MakeEdge2d_swigregister = _BRepLib.BRepLib_MakeEdge2d_swigregister
BRepLib_MakeEdge2d_swigregister(BRepLib_MakeEdge2d)

class BRepLib_MakeFace(BRepLib_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Adds the wire <W> in the current face.
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        """
        return _BRepLib.BRepLib_MakeFace_Add(self, *args)


    def __init__(self, *args):
        """
        * Not done.
        	:rtype: None
        * Load a face. Usefull to add wires.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        * Make a face from a plane.
        	:param P:
        	:type P: gp_Pln
        	:rtype: None
        * Make a face from a cylinder.
        	:param C:
        	:type C: gp_Cylinder
        	:rtype: None
        * Make a face from a cone.
        	:param C:
        	:type C: gp_Cone
        	:rtype: None
        * Make a face from a sphere.
        	:param S:
        	:type S: gp_Sphere
        	:rtype: None
        * Make a face from a torus.
        	:param C:
        	:type C: gp_Torus
        	:rtype: None
        * Make a face from a Surface. Accepts tolerance value (TolDegen) for resolution of degenerated edges.
        	:param S:
        	:type S: Geom_Surface
        	:param TolDegen:
        	:type TolDegen: float
        	:rtype: None
        * Make a face from a plane.
        	:param P:
        	:type P: gp_Pln
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None
        * Make a face from a cylinder.
        	:param C:
        	:type C: gp_Cylinder
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None
        * Make a face from a cone.
        	:param C:
        	:type C: gp_Cone
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None
        * Make a face from a sphere.
        	:param S:
        	:type S: gp_Sphere
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None
        * Make a face from a torus.
        	:param C:
        	:type C: gp_Torus
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None
        * Make a face from a Surface. Accepts min & max parameters to construct the face's bounds. Also accepts tolerance value (TolDegen) for resolution of degenerated edges.
        	:param S:
        	:type S: Geom_Surface
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:param TolDegen:
        	:type TolDegen: float
        	:rtype: None
        * Find a surface from the wire and make a face. if <OnlyPlane> is true, the computed surface will be a plane. If it is not possible to find a plane, the flag NotDone will be set.
        	:param W:
        	:type W: TopoDS_Wire
        	:param OnlyPlane: default value is Standard_False
        	:type OnlyPlane: bool
        	:rtype: None
        * Make a face from a plane and a wire.
        	:param P:
        	:type P: gp_Pln
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None
        * Make a face from a cylinder and a wire.
        	:param C:
        	:type C: gp_Cylinder
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None
        * Make a face from a cone and a wire.
        	:param C:
        	:type C: gp_Cone
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None
        * Make a face from a sphere and a wire.
        	:param S:
        	:type S: gp_Sphere
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None
        * Make a face from a torus and a wire.
        	:param C:
        	:type C: gp_Torus
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None
        * Make a face from a Surface and a wire.
        	:param S:
        	:type S: Geom_Surface
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None
        * Adds the wire <W> in the face <F>
        	:param F:
        	:type F: TopoDS_Face
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeFace_swiginit(self, _BRepLib.new_BRepLib_MakeFace(*args))

    def Error(self, *args) -> "BRepLib_FaceError":
        """:rtype: BRepLib_FaceError"""
        return _BRepLib.BRepLib_MakeFace_Error(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """
        * Returns the new face.
        	:rtype: TopoDS_Face
        """
        return _BRepLib.BRepLib_MakeFace_Face(self, *args)


    def Init(self, *args) -> "void":
        """
        * Load the face.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        * Creates the face from the surface. If Bound is True a wire is made from the natural bounds. Accepts tolerance value (TolDegen) for resolution of degenerated edges.
        	:param S:
        	:type S: Geom_Surface
        	:param Bound:
        	:type Bound: bool
        	:param TolDegen:
        	:type TolDegen: float
        	:rtype: None
        * Creates the face from the surface and the min-max values. Accepts tolerance value (TolDegen) for resolution of degenerated edges.
        	:param S:
        	:type S: Geom_Surface
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:param TolDegen:
        	:type TolDegen: float
        	:rtype: None
        """
        return _BRepLib.BRepLib_MakeFace_Init(self, *args)


    def IsDegenerated(*args) -> "Standard_Real &":
        """
        * Checks the specified curve is degenerated according to specified tolerance. Returns <theActTol> less than <theMaxTol>, which shows actual tolerance to decide the curve is degenerated. Warning: For internal use of BRepLib_MakeFace and BRepLib_MakeShell.
        	:param theCurve:
        	:type theCurve: Geom_Curve
        	:param theMaxTol:
        	:type theMaxTol: float
        	:param theActTol:
        	:type theActTol: float
        	:rtype: bool
        """
        return _BRepLib.BRepLib_MakeFace_IsDegenerated(*args)

    IsDegenerated = staticmethod(IsDegenerated)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeFace
BRepLib_MakeFace.Add = new_instancemethod(_BRepLib.BRepLib_MakeFace_Add, None, BRepLib_MakeFace)
BRepLib_MakeFace.Error = new_instancemethod(_BRepLib.BRepLib_MakeFace_Error, None, BRepLib_MakeFace)
BRepLib_MakeFace.Face = new_instancemethod(_BRepLib.BRepLib_MakeFace_Face, None, BRepLib_MakeFace)
BRepLib_MakeFace.Init = new_instancemethod(_BRepLib.BRepLib_MakeFace_Init, None, BRepLib_MakeFace)
BRepLib_MakeFace_swigregister = _BRepLib.BRepLib_MakeFace_swigregister
BRepLib_MakeFace_swigregister(BRepLib_MakeFace)

def BRepLib_MakeFace_IsDegenerated(*args) -> "Standard_Real &":
    """
    * Checks the specified curve is degenerated according to specified tolerance. Returns <theActTol> less than <theMaxTol>, which shows actual tolerance to decide the curve is degenerated. Warning: For internal use of BRepLib_MakeFace and BRepLib_MakeShell.
    	:param theCurve:
    	:type theCurve: Geom_Curve
    	:param theMaxTol:
    	:type theMaxTol: float
    	:param theActTol:
    	:type theActTol: float
    	:rtype: bool
    """
    return _BRepLib.BRepLib_MakeFace_IsDegenerated(*args)

class BRepLib_MakePolygon(BRepLib_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:rtype: None
        :param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        """
        return _BRepLib.BRepLib_MakePolygon_Add(self, *args)


    def Added(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the last vertex or point was succesfully added.
        	:rtype: bool
        """
        return _BRepLib.BRepLib_MakePolygon_Added(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty MakePolygon.
        	:rtype: None
        :param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        :param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:param P3:
        	:type P3: gp_Pnt
        	:param Close: default value is Standard_False
        	:type Close: bool
        	:rtype: None
        :param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:param P3:
        	:type P3: gp_Pnt
        	:param P4:
        	:type P4: gp_Pnt
        	:param Close: default value is Standard_False
        	:type Close: bool
        	:rtype: None
        :param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None
        :param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param V3:
        	:type V3: TopoDS_Vertex
        	:param Close: default value is Standard_False
        	:type Close: bool
        	:rtype: None
        :param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param V3:
        	:type V3: TopoDS_Vertex
        	:param V4:
        	:type V4: TopoDS_Vertex
        	:param Close: default value is Standard_False
        	:type Close: bool
        	:rtype: None
        """
        _BRepLib.BRepLib_MakePolygon_swiginit(self, _BRepLib.new_BRepLib_MakePolygon(*args))

    def Close(self, *args) -> "void":
        """:rtype: None"""
        return _BRepLib.BRepLib_MakePolygon_Close(self, *args)


    def Edge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the last edge added to the polygon.
        	:rtype: TopoDS_Edge
        """
        return _BRepLib.BRepLib_MakePolygon_Edge(self, *args)


    def FirstVertex(self, *args) -> "TopoDS_Vertex const":
        """:rtype: TopoDS_Vertex"""
        return _BRepLib.BRepLib_MakePolygon_FirstVertex(self, *args)


    def LastVertex(self, *args) -> "TopoDS_Vertex const":
        """:rtype: TopoDS_Vertex"""
        return _BRepLib.BRepLib_MakePolygon_LastVertex(self, *args)


    def Wire(self, *args) -> "TopoDS_Wire const":
        """:rtype: TopoDS_Wire"""
        return _BRepLib.BRepLib_MakePolygon_Wire(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakePolygon
BRepLib_MakePolygon.Add = new_instancemethod(_BRepLib.BRepLib_MakePolygon_Add, None, BRepLib_MakePolygon)
BRepLib_MakePolygon.Added = new_instancemethod(_BRepLib.BRepLib_MakePolygon_Added, None, BRepLib_MakePolygon)
BRepLib_MakePolygon.Close = new_instancemethod(_BRepLib.BRepLib_MakePolygon_Close, None, BRepLib_MakePolygon)
BRepLib_MakePolygon.Edge = new_instancemethod(_BRepLib.BRepLib_MakePolygon_Edge, None, BRepLib_MakePolygon)
BRepLib_MakePolygon.FirstVertex = new_instancemethod(_BRepLib.BRepLib_MakePolygon_FirstVertex, None, BRepLib_MakePolygon)
BRepLib_MakePolygon.LastVertex = new_instancemethod(_BRepLib.BRepLib_MakePolygon_LastVertex, None, BRepLib_MakePolygon)
BRepLib_MakePolygon.Wire = new_instancemethod(_BRepLib.BRepLib_MakePolygon_Wire, None, BRepLib_MakePolygon)
BRepLib_MakePolygon_swigregister = _BRepLib.BRepLib_MakePolygon_swigregister
BRepLib_MakePolygon_swigregister(BRepLib_MakePolygon)

class BRepLib_MakeShell(BRepLib_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Not done.
        	:rtype: None
        :param S:
        	:type S: Geom_Surface
        	:param Segment: default value is Standard_False
        	:type Segment: bool
        	:rtype: None
        :param S:
        	:type S: Geom_Surface
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:param Segment: default value is Standard_False
        	:type Segment: bool
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeShell_swiginit(self, _BRepLib.new_BRepLib_MakeShell(*args))

    def Error(self, *args) -> "BRepLib_ShellError":
        """:rtype: BRepLib_ShellError"""
        return _BRepLib.BRepLib_MakeShell_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        * Creates the shell from the surface and the min-max values.
        	:param S:
        	:type S: Geom_Surface
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:param Segment: default value is Standard_False
        	:type Segment: bool
        	:rtype: None
        """
        return _BRepLib.BRepLib_MakeShell_Init(self, *args)


    def Shell(self, *args) -> "TopoDS_Shell const":
        """
        * Returns the new Shell.
        	:rtype: TopoDS_Shell
        """
        return _BRepLib.BRepLib_MakeShell_Shell(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeShell
BRepLib_MakeShell.Error = new_instancemethod(_BRepLib.BRepLib_MakeShell_Error, None, BRepLib_MakeShell)
BRepLib_MakeShell.Init = new_instancemethod(_BRepLib.BRepLib_MakeShell_Init, None, BRepLib_MakeShell)
BRepLib_MakeShell.Shell = new_instancemethod(_BRepLib.BRepLib_MakeShell_Shell, None, BRepLib_MakeShell)
BRepLib_MakeShell_swigregister = _BRepLib.BRepLib_MakeShell_swigregister
BRepLib_MakeShell_swigregister(BRepLib_MakeShell)

class BRepLib_MakeSolid(BRepLib_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Add the shell to the current solid.
        	:param S:
        	:type S: TopoDS_Shell
        	:rtype: None
        """
        return _BRepLib.BRepLib_MakeSolid_Add(self, *args)


    def __init__(self, *args):
        """
        * Solid covers whole space.
        	:rtype: None
        * Make a solid from a CompSolid.
        	:param S:
        	:type S: TopoDS_CompSolid
        	:rtype: None
        * Make a solid from a shell.
        	:param S:
        	:type S: TopoDS_Shell
        	:rtype: None
        * Make a solid from two shells.
        	:param S1:
        	:type S1: TopoDS_Shell
        	:param S2:
        	:type S2: TopoDS_Shell
        	:rtype: None
        * Make a solid from three shells.
        	:param S1:
        	:type S1: TopoDS_Shell
        	:param S2:
        	:type S2: TopoDS_Shell
        	:param S3:
        	:type S3: TopoDS_Shell
        	:rtype: None
        * Make a solid from a solid. Usefull for adding later.
        	:param So:
        	:type So: TopoDS_Solid
        	:rtype: None
        * Add a shell to a solid.
        	:param So:
        	:type So: TopoDS_Solid
        	:param S:
        	:type S: TopoDS_Shell
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeSolid_swiginit(self, _BRepLib.new_BRepLib_MakeSolid(*args))

    def Solid(self, *args) -> "TopoDS_Solid const":
        """
        * Returns the new Solid.
        	:rtype: TopoDS_Solid
        """
        return _BRepLib.BRepLib_MakeSolid_Solid(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeSolid
BRepLib_MakeSolid.Add = new_instancemethod(_BRepLib.BRepLib_MakeSolid_Add, None, BRepLib_MakeSolid)
BRepLib_MakeSolid.Solid = new_instancemethod(_BRepLib.BRepLib_MakeSolid_Solid, None, BRepLib_MakeSolid)
BRepLib_MakeSolid_swigregister = _BRepLib.BRepLib_MakeSolid_swigregister
BRepLib_MakeSolid_swigregister(BRepLib_MakeSolid)

class BRepLib_MakeVertex(BRepLib_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeVertex_swiginit(self, _BRepLib.new_BRepLib_MakeVertex(*args))

    def Vertex(self, *args) -> "TopoDS_Vertex const":
        """:rtype: TopoDS_Vertex"""
        return _BRepLib.BRepLib_MakeVertex_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeVertex
BRepLib_MakeVertex.Vertex = new_instancemethod(_BRepLib.BRepLib_MakeVertex_Vertex, None, BRepLib_MakeVertex)
BRepLib_MakeVertex_swigregister = _BRepLib.BRepLib_MakeVertex_swigregister
BRepLib_MakeVertex_swigregister(BRepLib_MakeVertex)

class BRepLib_MakeWire(BRepLib_MakeShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Add the edge <E> to the current wire.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        * Add the edges of <W> to the current wire.
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        * Add the edges of <L> to the current wire. The edges are not to be consecutive. But they are to be all connected geometrically or topologically.
        	:param L:
        	:type L: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepLib.BRepLib_MakeWire_Add(self, *args)


    def __init__(self, *args):
        """
        * NotDone MakeWire.
        	:rtype: None
        * Make a Wire from an edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        * Make a Wire from two edges.
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:rtype: None
        * Make a Wire from three edges.
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:param E3:
        	:type E3: TopoDS_Edge
        	:rtype: None
        * Make a Wire from four edges.
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:param E3:
        	:type E3: TopoDS_Edge
        	:param E4:
        	:type E4: TopoDS_Edge
        	:rtype: None
        * Make a Wire from a Wire. Usefull for adding later.
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        * Add an edge to a wire.
        	:param W:
        	:type W: TopoDS_Wire
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeWire_swiginit(self, _BRepLib.new_BRepLib_MakeWire(*args))

    def Edge(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the last edge added to the wire.
        	:rtype: TopoDS_Edge
        """
        return _BRepLib.BRepLib_MakeWire_Edge(self, *args)


    def Error(self, *args) -> "BRepLib_WireError":
        """:rtype: BRepLib_WireError"""
        return _BRepLib.BRepLib_MakeWire_Error(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the last connecting vertex.
        	:rtype: TopoDS_Vertex
        """
        return _BRepLib.BRepLib_MakeWire_Vertex(self, *args)


    def Wire(self, *args) -> "TopoDS_Wire const":
        """
        * Returns the new wire.
        	:rtype: TopoDS_Wire
        """
        return _BRepLib.BRepLib_MakeWire_Wire(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeWire
BRepLib_MakeWire.Add = new_instancemethod(_BRepLib.BRepLib_MakeWire_Add, None, BRepLib_MakeWire)
BRepLib_MakeWire.Edge = new_instancemethod(_BRepLib.BRepLib_MakeWire_Edge, None, BRepLib_MakeWire)
BRepLib_MakeWire.Error = new_instancemethod(_BRepLib.BRepLib_MakeWire_Error, None, BRepLib_MakeWire)
BRepLib_MakeWire.Vertex = new_instancemethod(_BRepLib.BRepLib_MakeWire_Vertex, None, BRepLib_MakeWire)
BRepLib_MakeWire.Wire = new_instancemethod(_BRepLib.BRepLib_MakeWire_Wire, None, BRepLib_MakeWire)
BRepLib_MakeWire_swigregister = _BRepLib.BRepLib_MakeWire_swigregister
BRepLib_MakeWire_swigregister(BRepLib_MakeWire)



