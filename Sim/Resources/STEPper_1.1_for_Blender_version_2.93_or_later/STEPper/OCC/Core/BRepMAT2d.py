# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepMAT2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepmat2d.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepMAT2d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepMAT2d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepMAT2d')
    _BRepMAT2d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepMAT2d', [dirname(__file__)])
        except ImportError:
            import _BRepMAT2d
            return _BRepMAT2d
        try:
            _mod = imp.load_module('_BRepMAT2d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepMAT2d = swig_import_helper()
    del swig_import_helper
else:
    import _BRepMAT2d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepMAT2d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepMAT2d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepMAT2d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepMAT2d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepMAT2d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepMAT2d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepMAT2d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepMAT2d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepMAT2d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepMAT2d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepMAT2d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepMAT2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepMAT2d.process_exception(error, method_name, class_name)
process_exception = _BRepMAT2d.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.MAT
import OCC.Core.GeomAbs
import OCC.Core.Bisector
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.IntRes2d
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.TColGeom2d
class BRepMAT2d_DataMapOfBasicEltShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_swiginit(self, _BRepMAT2d.new_BRepMAT2d_DataMapOfBasicEltShape(*args))
    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_DataMapOfBasicEltShape
BRepMAT2d_DataMapOfBasicEltShape.begin = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_begin, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.end = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_end, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.cbegin = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_cbegin, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.cend = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_cend, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Exchange = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Exchange, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Assign = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Assign, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Set = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Set, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.ReSize = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ReSize, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Bind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Bind, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Bound = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Bound, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.IsBound = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_IsBound, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.UnBind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_UnBind, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Seek = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Seek, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Find = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Find, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.ChangeSeek = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ChangeSeek, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.ChangeFind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ChangeFind, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.__call__ = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape___call__, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Clear = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Clear, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape.Size = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Size, None, BRepMAT2d_DataMapOfBasicEltShape)
BRepMAT2d_DataMapOfBasicEltShape_swigregister = _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_swigregister
BRepMAT2d_DataMapOfBasicEltShape_swigregister(BRepMAT2d_DataMapOfBasicEltShape)

class BRepMAT2d_DataMapOfShapeSequenceOfBasicElt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swiginit(self, _BRepMAT2d.new_BRepMAT2d_DataMapOfShapeSequenceOfBasicElt(*args))
    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_DataMapOfShapeSequenceOfBasicElt
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.begin = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_begin, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.end = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_end, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.cbegin = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_cbegin, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.cend = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_cend, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Exchange = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Exchange, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Assign = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Assign, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Set = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Set, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.ReSize = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ReSize, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Bind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Bind, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Bound = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Bound, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.IsBound = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_IsBound, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.UnBind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_UnBind, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Seek = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Seek, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Find = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Find, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.ChangeSeek = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ChangeSeek, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.ChangeFind = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ChangeFind, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.__call__ = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt___call__, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Clear = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Clear, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt.Size = new_instancemethod(_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Size, None, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swigregister = _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swigregister
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swigregister(BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)

class BRepMAT2d_BisectingLocus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _BRepMAT2d.BRepMAT2d_BisectingLocus_swiginit(self, _BRepMAT2d.new_BRepMAT2d_BisectingLocus(*args))

    def BasicElt(self, *args) -> "opencascade::handle< MAT_BasicElt >":
        """
        * Returns the BasicElts located at the position <Index> on the contour designed by <IndLine>. Remark: the BasicElts on a contour are sorted.
        	:param IndLine:
        	:type IndLine: int
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<MAT_BasicElt>
        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_BasicElt(self, *args)


    def Compute(self, *args) -> "void":
        """
        * Computation of the Bisector_Locus in a set of Lines defined in <anExplo>. The bisecting locus are computed on the side <aSide> from the line <LineIndex> in <anExplo>.
        	:param anExplo:
        	:type anExplo: BRepMAT2d_Explorer
        	:param LineIndex: default value is 1
        	:type LineIndex: int
        	:param aSide: default value is MAT_Left
        	:type aSide: MAT_Side
        	:param aJoinType: default value is GeomAbs_Arc
        	:type aJoinType: GeomAbs_JoinType
        	:param IsOpenResult: default value is Standard_False
        	:type IsOpenResult: bool
        	:rtype: None
        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_Compute(self, *args)


    def GeomBis(self, *args) -> "Bisector_Bisec":
        """
        * Returns the geometry of type <Bissec> linked to the arc <ARC>. <Reverse> is False when the FirstNode of <anArc> correspond to the first point of geometry.
        	:param anArc:
        	:type anArc: MAT_Arc
        	:param Reverse:
        	:type Reverse: bool
        	:rtype: Bisector_Bisec
        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_GeomBis(self, *args)


    def GeomElt(self, *args) -> "gp_Pnt2d":
        """
        * Returns the geometry linked to the <BasicElt>.
        	:param aBasicElt:
        	:type aBasicElt: MAT_BasicElt
        	:rtype: opencascade::handle<Geom2d_Geometry>
        * Returns the geometry of type <gp> linked to the <Node>.
        	:param aNode:
        	:type aNode: MAT_Node
        	:rtype: gp_Pnt2d
        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_GeomElt(self, *args)


    def Graph(self, *args) -> "opencascade::handle< MAT_Graph >":
        """
        * Returns <theGraph> of <self>.
        	:rtype: opencascade::handle<MAT_Graph>
        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_Graph(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if Compute has succeeded.
        	:rtype: bool
        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_IsDone(self, *args)


    def NumberOfContours(self, *args) -> "Standard_Integer":
        """
        * Returns the number of contours.
        	:rtype: int
        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfContours(self, *args)


    def NumberOfElts(self, *args) -> "Standard_Integer":
        """
        * Returns the number of BasicElts on the line <IndLine>.
        	:param IndLine:
        	:type IndLine: int
        	:rtype: int
        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfElts(self, *args)


    def NumberOfSections(self, *args) -> "Standard_Integer":
        """
        * Returns the number of sections of a curve. this curve is the Indexth curve in the IndLineth contour given by anExplo.
        	:param IndLine:
        	:type IndLine: int
        	:param Index:
        	:type Index: int
        	:rtype: int
        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfSections(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_BisectingLocus
BRepMAT2d_BisectingLocus.BasicElt = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_BasicElt, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.Compute = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_Compute, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.GeomBis = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_GeomBis, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.GeomElt = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_GeomElt, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.Graph = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_Graph, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.IsDone = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_IsDone, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.NumberOfContours = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfContours, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.NumberOfElts = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfElts, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus.NumberOfSections = new_instancemethod(_BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfSections, None, BRepMAT2d_BisectingLocus)
BRepMAT2d_BisectingLocus_swigregister = _BRepMAT2d.BRepMAT2d_BisectingLocus_swigregister
BRepMAT2d_BisectingLocus_swigregister(BRepMAT2d_BisectingLocus)

class BRepMAT2d_Explorer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param aFace:
        	:type aFace: TopoDS_Face
        	:rtype: None
        """
        _BRepMAT2d.BRepMAT2d_Explorer_swiginit(self, _BRepMAT2d.new_BRepMAT2d_Explorer(*args))

    def Clear(self, *args) -> "void":
        """
        * Clear the contents of <self>.
        	:rtype: None
        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Clear(self, *args)


    def Contour(self, *args) -> "TColGeom2d_SequenceOfCurve const &":
        """
        :param IndexContour:
        	:type IndexContour: int
        	:rtype: TColGeom2d_SequenceOfCurve
        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Contour(self, *args)


    def GetIsClosed(self, *args) -> "TColStd_SequenceOfBoolean const &":
        """:rtype: TColStd_SequenceOfBoolean"""
        return _BRepMAT2d.BRepMAT2d_Explorer_GetIsClosed(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initialisation of an Iterator on the curves of the Contour number <IndexContour>.
        	:param IndexContour:
        	:type IndexContour: int
        	:rtype: None
        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Init(self, *args)


    def IsModified(self, *args) -> "Standard_Boolean":
        """
        :param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepMAT2d.BRepMAT2d_Explorer_IsModified(self, *args)


    def ModifiedShape(self, *args) -> "TopoDS_Shape":
        """
        * If the shape is not modified, returns the shape itself.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepMAT2d.BRepMAT2d_Explorer_ModifiedShape(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Return False if there is no more curves on the Contour initialised by the method Init.
        	:rtype: bool
        """
        return _BRepMAT2d.BRepMAT2d_Explorer_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Move to the next curve of the current Contour.
        	:rtype: None
        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Next(self, *args)


    def NumberOfContours(self, *args) -> "Standard_Integer":
        """
        * Returns the Number of contours.
        	:rtype: int
        """
        return _BRepMAT2d.BRepMAT2d_Explorer_NumberOfContours(self, *args)


    def NumberOfCurves(self, *args) -> "Standard_Integer":
        """
        * Returns the Number of Curves in the Contour number <IndexContour>.
        	:param IndexContour:
        	:type IndexContour: int
        	:rtype: int
        """
        return _BRepMAT2d.BRepMAT2d_Explorer_NumberOfCurves(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param aFace:
        	:type aFace: TopoDS_Face
        	:rtype: None
        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """:rtype: TopoDS_Shape"""
        return _BRepMAT2d.BRepMAT2d_Explorer_Shape(self, *args)


    def Value(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        * Returns the current curve on the current Contour.
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_Explorer
BRepMAT2d_Explorer.Clear = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Clear, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Contour = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Contour, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.GetIsClosed = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_GetIsClosed, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Init = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Init, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.IsModified = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_IsModified, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.ModifiedShape = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_ModifiedShape, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.More = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_More, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Next = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Next, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.NumberOfContours = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_NumberOfContours, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.NumberOfCurves = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_NumberOfCurves, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Perform = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Perform, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Shape = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Shape, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer.Value = new_instancemethod(_BRepMAT2d.BRepMAT2d_Explorer_Value, None, BRepMAT2d_Explorer)
BRepMAT2d_Explorer_swigregister = _BRepMAT2d.BRepMAT2d_Explorer_swigregister
BRepMAT2d_Explorer_swigregister(BRepMAT2d_Explorer)

class BRepMAT2d_LinkTopoBilo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Constructs the links Between S and BiLo. //! raises if <S> is not a face.
        	:param Explo:
        	:type Explo: BRepMAT2d_Explorer
        	:param BiLo:
        	:type BiLo: BRepMAT2d_BisectingLocus
        	:rtype: None
        """
        _BRepMAT2d.BRepMAT2d_LinkTopoBilo_swiginit(self, _BRepMAT2d.new_BRepMAT2d_LinkTopoBilo(*args))

    def GeneratingShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns the Shape linked to <aBE>.
        	:param aBE:
        	:type aBE: MAT_BasicElt
        	:rtype: TopoDS_Shape
        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_GeneratingShape(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initialise the Iterator on <S> <S> is an edge or a vertex of the initial wire or face. raises if <S> is not an edge or a vertex.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a current BasicElt.
        	:rtype: bool
        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Proceed to the next BasicElt.
        	:rtype: None
        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Next(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Constructs the links Between S and BiLo. //! raises if <S> is not a face or a wire.
        	:param Explo:
        	:type Explo: BRepMAT2d_Explorer
        	:param BiLo:
        	:type BiLo: BRepMAT2d_BisectingLocus
        	:rtype: None
        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Perform(self, *args)


    def Value(self, *args) -> "opencascade::handle< MAT_BasicElt >":
        """
        * Returns the current BasicElt.
        	:rtype: opencascade::handle<MAT_BasicElt>
        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_LinkTopoBilo
BRepMAT2d_LinkTopoBilo.GeneratingShape = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_GeneratingShape, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo.Init = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_Init, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo.More = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_More, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo.Next = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_Next, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo.Perform = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_Perform, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo.Value = new_instancemethod(_BRepMAT2d.BRepMAT2d_LinkTopoBilo_Value, None, BRepMAT2d_LinkTopoBilo)
BRepMAT2d_LinkTopoBilo_swigregister = _BRepMAT2d.BRepMAT2d_LinkTopoBilo_swigregister
BRepMAT2d_LinkTopoBilo_swigregister(BRepMAT2d_LinkTopoBilo)



