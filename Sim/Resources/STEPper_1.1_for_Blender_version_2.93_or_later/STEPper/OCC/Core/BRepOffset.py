# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepOffset module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepoffset.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepOffset.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepOffset')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepOffset')
    _BRepOffset = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepOffset', [dirname(__file__)])
        except ImportError:
            import _BRepOffset
            return _BRepOffset
        try:
            _mod = imp.load_module('_BRepOffset', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepOffset = swig_import_helper()
    del swig_import_helper
else:
    import _BRepOffset
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepOffset.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepOffset.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepOffset.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepOffset.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepOffset.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepOffset.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepOffset.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepOffset.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepOffset.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepOffset.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepOffset.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepOffset.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepOffset.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepOffset.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepOffset.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepOffset.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepOffset.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepOffset.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepOffset.process_exception(error, method_name, class_name)
process_exception = _BRepOffset.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.TopTools
import OCC.Core.BRepAlgo
import OCC.Core.BRepBuilderAPI
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.Geom2d
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.TopOpeBRepBuild
import OCC.Core.TopOpeBRepDS
import OCC.Core.TopOpeBRepTool
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.math
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.Intf
import OCC.Core.IntSurf
import OCC.Core.IntCurvesFace
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.TopExp
import OCC.Core.Extrema
BRepOffset_NoError = _BRepOffset.BRepOffset_NoError
BRepOffset_UnknownError = _BRepOffset.BRepOffset_UnknownError
BRepOffset_BadNormalsOnGeometry = _BRepOffset.BRepOffset_BadNormalsOnGeometry
BRepOffset_C0Geometry = _BRepOffset.BRepOffset_C0Geometry
BRepOffset_NullOffset = _BRepOffset.BRepOffset_NullOffset
BRepOffset_NotConnectedShell = _BRepOffset.BRepOffset_NotConnectedShell
BRepOffsetSimple_OK = _BRepOffset.BRepOffsetSimple_OK
BRepOffsetSimple_NullInputShape = _BRepOffset.BRepOffsetSimple_NullInputShape
BRepOffsetSimple_ErrorOffsetComputation = _BRepOffset.BRepOffsetSimple_ErrorOffsetComputation
BRepOffsetSimple_ErrorWallFaceComputation = _BRepOffset.BRepOffsetSimple_ErrorWallFaceComputation
BRepOffsetSimple_ErrorInvalidNbShells = _BRepOffset.BRepOffsetSimple_ErrorInvalidNbShells
BRepOffsetSimple_ErrorNonClosedShell = _BRepOffset.BRepOffsetSimple_ErrorNonClosedShell
BRepOffset_Skin = _BRepOffset.BRepOffset_Skin
BRepOffset_Pipe = _BRepOffset.BRepOffset_Pipe
BRepOffset_RectoVerso = _BRepOffset.BRepOffset_RectoVerso
BRepOffset_Concave = _BRepOffset.BRepOffset_Concave
BRepOffset_Convex = _BRepOffset.BRepOffset_Convex
BRepOffset_Tangent = _BRepOffset.BRepOffset_Tangent
BRepOffset_FreeBoundary = _BRepOffset.BRepOffset_FreeBoundary
BRepOffset_Other = _BRepOffset.BRepOffset_Other
BRepOffset_Good = _BRepOffset.BRepOffset_Good
BRepOffset_Reversed = _BRepOffset.BRepOffset_Reversed
BRepOffset_Degenerated = _BRepOffset.BRepOffset_Degenerated
BRepOffset_Unknown = _BRepOffset.BRepOffset_Unknown

def Handle_BRepOffset_SimpleOffset_Create() -> "opencascade::handle< BRepOffset_SimpleOffset >":
    return _BRepOffset.Handle_BRepOffset_SimpleOffset_Create()
Handle_BRepOffset_SimpleOffset_Create = _BRepOffset.Handle_BRepOffset_SimpleOffset_Create

def Handle_BRepOffset_SimpleOffset_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepOffset_SimpleOffset >":
    return _BRepOffset.Handle_BRepOffset_SimpleOffset_DownCast(t)
Handle_BRepOffset_SimpleOffset_DownCast = _BRepOffset.Handle_BRepOffset_SimpleOffset_DownCast

def Handle_BRepOffset_SimpleOffset_IsNull(t: 'opencascade::handle< BRepOffset_SimpleOffset > const &') -> "bool":
    return _BRepOffset.Handle_BRepOffset_SimpleOffset_IsNull(t)
Handle_BRepOffset_SimpleOffset_IsNull = _BRepOffset.Handle_BRepOffset_SimpleOffset_IsNull
class BRepOffset_DataMapOfShapeListOfInterval(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_swiginit(self, _BRepOffset.new_BRepOffset_DataMapOfShapeListOfInterval(*args))
    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapOfShapeListOfInterval
BRepOffset_DataMapOfShapeListOfInterval.begin = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_begin, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.end = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_end, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.cbegin = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_cbegin, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.cend = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_cend, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Exchange = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Exchange, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Assign = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Assign, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Set = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Set, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.ReSize = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_ReSize, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Bind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Bind, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Bound = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Bound, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.IsBound = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_IsBound, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.UnBind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_UnBind, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Seek = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Seek, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Find = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Find, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.ChangeSeek = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_ChangeSeek, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.ChangeFind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_ChangeFind, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.__call__ = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval___call__, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Clear = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Clear, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Size = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Size, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval_swigregister = _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_swigregister
BRepOffset_DataMapOfShapeListOfInterval_swigregister(BRepOffset_DataMapOfShapeListOfInterval)

class BRepOffset_ListOfInterval(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepOffset.BRepOffset_ListOfInterval_swiginit(self, _BRepOffset.new_BRepOffset_ListOfInterval(*args))
    __swig_destroy__ = _BRepOffset.delete_BRepOffset_ListOfInterval
BRepOffset_ListOfInterval.begin = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_begin, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.end = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_end, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.cbegin = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_cbegin, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.cend = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_cend, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Size = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Size, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Assign = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Assign, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Set = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Set, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Clear = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Clear, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.First = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_First, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Last = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Last, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Append = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Append, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Prepend = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Prepend, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.RemoveFirst = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_RemoveFirst, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Remove = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Remove, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.InsertBefore = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_InsertBefore, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.InsertAfter = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_InsertAfter, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Reverse = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Reverse, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval_swigregister = _BRepOffset.BRepOffset_ListOfInterval_swigregister
BRepOffset_ListOfInterval_swigregister(BRepOffset_ListOfInterval)

class BRepOffset_ListIteratorOfListOfInterval(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepOffset.BRepOffset_ListIteratorOfListOfInterval_swiginit(self, _BRepOffset.new_BRepOffset_ListIteratorOfListOfInterval(*args))
    __swig_destroy__ = _BRepOffset.delete_BRepOffset_ListIteratorOfListOfInterval
BRepOffset_ListIteratorOfListOfInterval.More = new_instancemethod(_BRepOffset.BRepOffset_ListIteratorOfListOfInterval_More, None, BRepOffset_ListIteratorOfListOfInterval)
BRepOffset_ListIteratorOfListOfInterval.Next = new_instancemethod(_BRepOffset.BRepOffset_ListIteratorOfListOfInterval_Next, None, BRepOffset_ListIteratorOfListOfInterval)
BRepOffset_ListIteratorOfListOfInterval.Value = new_instancemethod(_BRepOffset.BRepOffset_ListIteratorOfListOfInterval_Value, None, BRepOffset_ListIteratorOfListOfInterval)
BRepOffset_ListIteratorOfListOfInterval.ChangeValue = new_instancemethod(_BRepOffset.BRepOffset_ListIteratorOfListOfInterval_ChangeValue, None, BRepOffset_ListIteratorOfListOfInterval)
BRepOffset_ListIteratorOfListOfInterval_swigregister = _BRepOffset.BRepOffset_ListIteratorOfListOfInterval_swigregister
BRepOffset_ListIteratorOfListOfInterval_swigregister(BRepOffset_ListIteratorOfListOfInterval)

class BRepOffset_DataMapOfShapeOffset(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepOffset.BRepOffset_DataMapOfShapeOffset_swiginit(self, _BRepOffset.new_BRepOffset_DataMapOfShapeOffset(*args))
    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapOfShapeOffset
BRepOffset_DataMapOfShapeOffset.begin = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_begin, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.end = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_end, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.cbegin = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_cbegin, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.cend = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_cend, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Exchange = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Exchange, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Assign = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Assign, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Set = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Set, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.ReSize = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_ReSize, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Bind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Bind, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Bound = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Bound, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.IsBound = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_IsBound, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.UnBind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_UnBind, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Seek = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Seek, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Find = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Find, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.ChangeSeek = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_ChangeSeek, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.ChangeFind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_ChangeFind, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.__call__ = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset___call__, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Clear = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Clear, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Size = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Size, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset_swigregister = _BRepOffset.BRepOffset_DataMapOfShapeOffset_swigregister
BRepOffset_DataMapOfShapeOffset_swigregister(BRepOffset_DataMapOfShapeOffset)

class BRepOffset_DataMapOfShapeMapOfShape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_swiginit(self, _BRepOffset.new_BRepOffset_DataMapOfShapeMapOfShape(*args))
    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapOfShapeMapOfShape
BRepOffset_DataMapOfShapeMapOfShape.begin = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_begin, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.end = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_end, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.cbegin = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_cbegin, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.cend = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_cend, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Exchange = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Exchange, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Assign = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Assign, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Set = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Set, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.ReSize = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_ReSize, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Bind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Bind, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Bound = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Bound, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.IsBound = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_IsBound, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.UnBind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_UnBind, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Seek = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Seek, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Find = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Find, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.ChangeSeek = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_ChangeSeek, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.ChangeFind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_ChangeFind, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.__call__ = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape___call__, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Clear = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Clear, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Size = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Size, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape_swigregister = _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_swigregister
BRepOffset_DataMapOfShapeMapOfShape_swigregister(BRepOffset_DataMapOfShapeMapOfShape)

class brepoffset(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CollapseSingularities(*args) -> "opencascade::handle< Geom_Surface >":
        """
        * Preprocess surface to be offset (bspline, bezier, or revolution based on bspline or bezier curve), by collapsing each singular side to single point. //! This is to avoid possible flipping of normal at the singularity of the surface due to non-zero distance between the poles that logically should be in one point (singularity). The (parametric) side of the surface is considered to be singularity if face has degenerated edge whose vertex encompasses (by its tolerance) all points on that side, or if all poles defining that side fit into sphere with radius thePrecision. //! Returns either original surface or its modified copy (if some poles have been moved).
        	:param theSurface:
        	:type theSurface: Geom_Surface
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param thePrecision:
        	:type thePrecision: float
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _BRepOffset.brepoffset_CollapseSingularities(*args)

    CollapseSingularities = staticmethod(CollapseSingularities)

    def Surface(*args) -> "opencascade::handle< Geom_Surface >":
        """
        * returns the Offset surface computed from the surface <Surface> at an OffsetDistance <Offset>. //! If possible, this method returns the real type of the surface ( e.g. An Offset of a plane is a plane). //! If no particular case is detected, the returned surface will have the Type Geom_OffsetSurface. Parameter allowC0 is then passed as last argument to constructor of Geom_OffsetSurface.
        	:param Surface:
        	:type Surface: Geom_Surface
        	:param Offset:
        	:type Offset: float
        	:param theStatus:
        	:type theStatus: BRepOffset_Status
        	:param allowC0: default value is Standard_False
        	:type allowC0: bool
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _BRepOffset.brepoffset_Surface(*args)

    Surface = staticmethod(Surface)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepOffset.brepoffset_swiginit(self, _BRepOffset.new_brepoffset())
    __swig_destroy__ = _BRepOffset.delete_brepoffset
brepoffset_swigregister = _BRepOffset.brepoffset_swigregister
brepoffset_swigregister(brepoffset)

def brepoffset_CollapseSingularities(*args) -> "opencascade::handle< Geom_Surface >":
    """
    * Preprocess surface to be offset (bspline, bezier, or revolution based on bspline or bezier curve), by collapsing each singular side to single point. //! This is to avoid possible flipping of normal at the singularity of the surface due to non-zero distance between the poles that logically should be in one point (singularity). The (parametric) side of the surface is considered to be singularity if face has degenerated edge whose vertex encompasses (by its tolerance) all points on that side, or if all poles defining that side fit into sphere with radius thePrecision. //! Returns either original surface or its modified copy (if some poles have been moved).
    	:param theSurface:
    	:type theSurface: Geom_Surface
    	:param theFace:
    	:type theFace: TopoDS_Face
    	:param thePrecision:
    	:type thePrecision: float
    	:rtype: opencascade::handle<Geom_Surface>
    """
    return _BRepOffset.brepoffset_CollapseSingularities(*args)

def brepoffset_Surface(*args) -> "opencascade::handle< Geom_Surface >":
    """
    * returns the Offset surface computed from the surface <Surface> at an OffsetDistance <Offset>. //! If possible, this method returns the real type of the surface ( e.g. An Offset of a plane is a plane). //! If no particular case is detected, the returned surface will have the Type Geom_OffsetSurface. Parameter allowC0 is then passed as last argument to constructor of Geom_OffsetSurface.
    	:param Surface:
    	:type Surface: Geom_Surface
    	:param Offset:
    	:type Offset: float
    	:param theStatus:
    	:type theStatus: BRepOffset_Status
    	:param allowC0: default value is Standard_False
    	:type allowC0: bool
    	:rtype: opencascade::handle<Geom_Surface>
    """
    return _BRepOffset.brepoffset_Surface(*args)

class BRepOffset_Analyse(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddFaces(self, *args) -> "void":
        """
        * Add in <CO> the faces of the shell containing <Face> where all the connex edges are of type <Side>.
        	:param Face:
        	:type Face: TopoDS_Face
        	:param Co:
        	:type Co: TopoDS_Compound
        	:param Map:
        	:type Map: TopTools_MapOfShape
        	:param Type:
        	:type Type: BRepOffset_Type
        	:rtype: None
        * Add in <CO> the faces of the shell containing <Face> where all the connex edges are of type <Side1> or <Side2>.
        	:param Face:
        	:type Face: TopoDS_Face
        	:param Co:
        	:type Co: TopoDS_Compound
        	:param Map:
        	:type Map: TopTools_MapOfShape
        	:param Type1:
        	:type Type1: BRepOffset_Type
        	:param Type2:
        	:type Type2: BRepOffset_Type
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Analyse_AddFaces(self, *args)


    def Ancestors(self, *args) -> "TopTools_ListOfShape const &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _BRepOffset.BRepOffset_Analyse_Ancestors(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: TopoDS_Shape
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        """
        _BRepOffset.BRepOffset_Analyse_swiginit(self, _BRepOffset.new_BRepOffset_Analyse(*args))

    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _BRepOffset.BRepOffset_Analyse_Clear(self, *args)


    def Edges(self, *args) -> "void":
        """
        * Stores in <L> all the edges of Type <T> on the vertex <V>.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param T:
        	:type T: BRepOffset_Type
        	:param L:
        	:type L: TopTools_ListOfShape
        	:rtype: None
        * Stores in <L> all the edges of Type <T> on the face <F>.
        	:param F:
        	:type F: TopoDS_Face
        	:param T:
        	:type T: BRepOffset_Type
        	:param L:
        	:type L: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Analyse_Edges(self, *args)


    def Explode(self, *args) -> "void":
        """
        * Explode in compounds of faces where all the connex edges are of type <Side>
        	:param L:
        	:type L: TopTools_ListOfShape
        	:param Type:
        	:type Type: BRepOffset_Type
        	:rtype: None
        * Explode in compounds of faces where all the connex edges are of type <Side1> or <Side2>
        	:param L:
        	:type L: TopTools_ListOfShape
        	:param Type1:
        	:type Type1: BRepOffset_Type
        	:param Type2:
        	:type Type2: BRepOffset_Type
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Analyse_Explode(self, *args)


    def HasAncestor(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _BRepOffset.BRepOffset_Analyse_HasAncestor(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepOffset.BRepOffset_Analyse_IsDone(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Analyse_Perform(self, *args)


    def TangentEdges(self, *args) -> "void":
        """
        * set in <Edges> all the Edges of <Shape> which are tangent to <Edge> at the vertex <Vertex>.
        	:param Edge:
        	:type Edge: TopoDS_Edge
        	:param Vertex:
        	:type Vertex: TopoDS_Vertex
        	:param Edges:
        	:type Edges: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Analyse_TangentEdges(self, *args)


    def Type(self, *args) -> "BRepOffset_ListOfInterval const &":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: BRepOffset_ListOfInterval
        """
        return _BRepOffset.BRepOffset_Analyse_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Analyse
BRepOffset_Analyse.AddFaces = new_instancemethod(_BRepOffset.BRepOffset_Analyse_AddFaces, None, BRepOffset_Analyse)
BRepOffset_Analyse.Ancestors = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Ancestors, None, BRepOffset_Analyse)
BRepOffset_Analyse.Clear = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Clear, None, BRepOffset_Analyse)
BRepOffset_Analyse.Edges = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Edges, None, BRepOffset_Analyse)
BRepOffset_Analyse.Explode = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Explode, None, BRepOffset_Analyse)
BRepOffset_Analyse.HasAncestor = new_instancemethod(_BRepOffset.BRepOffset_Analyse_HasAncestor, None, BRepOffset_Analyse)
BRepOffset_Analyse.IsDone = new_instancemethod(_BRepOffset.BRepOffset_Analyse_IsDone, None, BRepOffset_Analyse)
BRepOffset_Analyse.Perform = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Perform, None, BRepOffset_Analyse)
BRepOffset_Analyse.TangentEdges = new_instancemethod(_BRepOffset.BRepOffset_Analyse_TangentEdges, None, BRepOffset_Analyse)
BRepOffset_Analyse.Type = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Type, None, BRepOffset_Analyse)
BRepOffset_Analyse_swigregister = _BRepOffset.BRepOffset_Analyse_swigregister
BRepOffset_Analyse_swigregister(BRepOffset_Analyse)

class BRepOffset_Inter2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Compute(*args) -> "void":
        """
        * Computes the intersections between the edges stored is AsDes as descendants of <F> . Intersections is computed between two edges if one of them is bound in NewEdges. When all faces of the shape are treated the intersection vertices have to be fused using the FuseVertices method. theDMVV contains the vertices that should be fused
        	:param AsDes:
        	:type AsDes: BRepAlgo_AsDes
        	:param F:
        	:type F: TopoDS_Face
        	:param NewEdges:
        	:type NewEdges: TopTools_IndexedMapOfShape
        	:param Tol:
        	:type Tol: float
        	:param theDMVV:
        	:type theDMVV: TopTools_IndexedDataMapOfShapeListOfShape
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Inter2d_Compute(*args)

    Compute = staticmethod(Compute)

    def ConnexIntByInt(*args) -> "void":
        """
        * Computes the intersection between the offset edges of the <FI>. All intersection vertices will be stored in AsDes2d. When all faces of the shape are treated the intersection vertices have to be fused using the FuseVertices method. theDMVV contains the vertices that should be fused.
        	:param FI:
        	:type FI: TopoDS_Face
        	:param OFI:
        	:type OFI: BRepOffset_Offset
        	:param MES:
        	:type MES: TopTools_DataMapOfShapeShape
        	:param Build:
        	:type Build: TopTools_DataMapOfShapeShape
        	:param AsDes2d:
        	:type AsDes2d: BRepAlgo_AsDes
        	:param Offset:
        	:type Offset: float
        	:param Tol:
        	:type Tol: float
        	:param FacesWithVerts:
        	:type FacesWithVerts: TopTools_IndexedMapOfShape
        	:param theDMVV:
        	:type theDMVV: TopTools_IndexedDataMapOfShapeListOfShape
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Inter2d_ConnexIntByInt(*args)

    ConnexIntByInt = staticmethod(ConnexIntByInt)

    def ConnexIntByIntInVert(*args) -> "void":
        """
        * Computes the intersection between the offset edges generated from vertices and stored into AsDes as descendants of the <FI>. All intersection vertices will be stored in AsDes2d. When all faces of the shape are treated the intersection vertices have to be fused using the FuseVertices method. theDMVV contains the vertices that should be fused.
        	:param FI:
        	:type FI: TopoDS_Face
        	:param OFI:
        	:type OFI: BRepOffset_Offset
        	:param MES:
        	:type MES: TopTools_DataMapOfShapeShape
        	:param Build:
        	:type Build: TopTools_DataMapOfShapeShape
        	:param AsDes:
        	:type AsDes: BRepAlgo_AsDes
        	:param AsDes2d:
        	:type AsDes2d: BRepAlgo_AsDes
        	:param Tol:
        	:type Tol: float
        	:param theDMVV:
        	:type theDMVV: TopTools_IndexedDataMapOfShapeListOfShape
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Inter2d_ConnexIntByIntInVert(*args)

    ConnexIntByIntInVert = staticmethod(ConnexIntByIntInVert)

    def ExtentEdge(*args) -> "void":
        """
        * extents the edge
        	:param E:
        	:type E: TopoDS_Edge
        	:param NE:
        	:type NE: TopoDS_Edge
        	:param theOffset:
        	:type theOffset: float
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Inter2d_ExtentEdge(*args)

    ExtentEdge = staticmethod(ExtentEdge)

    def FuseVertices(*args) -> "void":
        """
        * Fuses the chains of vertices in the theDMVV and updates AsDes by replacing the old vertices with the new ones.
        	:param theDMVV:
        	:type theDMVV: TopTools_IndexedDataMapOfShapeListOfShape
        	:param theAsDes:
        	:type theAsDes: BRepAlgo_AsDes
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Inter2d_FuseVertices(*args)

    FuseVertices = staticmethod(FuseVertices)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepOffset.BRepOffset_Inter2d_swiginit(self, _BRepOffset.new_BRepOffset_Inter2d())
    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Inter2d
BRepOffset_Inter2d_swigregister = _BRepOffset.BRepOffset_Inter2d_swigregister
BRepOffset_Inter2d_swigregister(BRepOffset_Inter2d)

def BRepOffset_Inter2d_Compute(*args) -> "void":
    """
    * Computes the intersections between the edges stored is AsDes as descendants of <F> . Intersections is computed between two edges if one of them is bound in NewEdges. When all faces of the shape are treated the intersection vertices have to be fused using the FuseVertices method. theDMVV contains the vertices that should be fused
    	:param AsDes:
    	:type AsDes: BRepAlgo_AsDes
    	:param F:
    	:type F: TopoDS_Face
    	:param NewEdges:
    	:type NewEdges: TopTools_IndexedMapOfShape
    	:param Tol:
    	:type Tol: float
    	:param theDMVV:
    	:type theDMVV: TopTools_IndexedDataMapOfShapeListOfShape
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Inter2d_Compute(*args)

def BRepOffset_Inter2d_ConnexIntByInt(*args) -> "void":
    """
    * Computes the intersection between the offset edges of the <FI>. All intersection vertices will be stored in AsDes2d. When all faces of the shape are treated the intersection vertices have to be fused using the FuseVertices method. theDMVV contains the vertices that should be fused.
    	:param FI:
    	:type FI: TopoDS_Face
    	:param OFI:
    	:type OFI: BRepOffset_Offset
    	:param MES:
    	:type MES: TopTools_DataMapOfShapeShape
    	:param Build:
    	:type Build: TopTools_DataMapOfShapeShape
    	:param AsDes2d:
    	:type AsDes2d: BRepAlgo_AsDes
    	:param Offset:
    	:type Offset: float
    	:param Tol:
    	:type Tol: float
    	:param FacesWithVerts:
    	:type FacesWithVerts: TopTools_IndexedMapOfShape
    	:param theDMVV:
    	:type theDMVV: TopTools_IndexedDataMapOfShapeListOfShape
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Inter2d_ConnexIntByInt(*args)

def BRepOffset_Inter2d_ConnexIntByIntInVert(*args) -> "void":
    """
    * Computes the intersection between the offset edges generated from vertices and stored into AsDes as descendants of the <FI>. All intersection vertices will be stored in AsDes2d. When all faces of the shape are treated the intersection vertices have to be fused using the FuseVertices method. theDMVV contains the vertices that should be fused.
    	:param FI:
    	:type FI: TopoDS_Face
    	:param OFI:
    	:type OFI: BRepOffset_Offset
    	:param MES:
    	:type MES: TopTools_DataMapOfShapeShape
    	:param Build:
    	:type Build: TopTools_DataMapOfShapeShape
    	:param AsDes:
    	:type AsDes: BRepAlgo_AsDes
    	:param AsDes2d:
    	:type AsDes2d: BRepAlgo_AsDes
    	:param Tol:
    	:type Tol: float
    	:param theDMVV:
    	:type theDMVV: TopTools_IndexedDataMapOfShapeListOfShape
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Inter2d_ConnexIntByIntInVert(*args)

def BRepOffset_Inter2d_ExtentEdge(*args) -> "void":
    """
    * extents the edge
    	:param E:
    	:type E: TopoDS_Edge
    	:param NE:
    	:type NE: TopoDS_Edge
    	:param theOffset:
    	:type theOffset: float
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Inter2d_ExtentEdge(*args)

def BRepOffset_Inter2d_FuseVertices(*args) -> "void":
    """
    * Fuses the chains of vertices in the theDMVV and updates AsDes by replacing the old vertices with the new ones.
    	:param theDMVV:
    	:type theDMVV: TopTools_IndexedDataMapOfShapeListOfShape
    	:param theAsDes:
    	:type theAsDes: BRepAlgo_AsDes
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Inter2d_FuseVertices(*args)

class BRepOffset_Inter3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddCommonEdges(self, *args) -> "void":
        """
        :param SetOfFaces:
        	:type SetOfFaces: TopTools_ListOfShape
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Inter3d_AddCommonEdges(self, *args)


    def AsDes(self, *args) -> "opencascade::handle< BRepAlgo_AsDes >":
        """:rtype: opencascade::handle<BRepAlgo_AsDes>"""
        return _BRepOffset.BRepOffset_Inter3d_AsDes(self, *args)


    def __init__(self, *args):
        """
        :param AsDes:
        	:type AsDes: BRepAlgo_AsDes
        	:param Side:
        	:type Side: TopAbs_State
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _BRepOffset.BRepOffset_Inter3d_swiginit(self, _BRepOffset.new_BRepOffset_Inter3d(*args))

    def CompletInt(self, *args) -> "void":
        """
        :param SetOfFaces:
        	:type SetOfFaces: TopTools_ListOfShape
        	:param InitOffsetFace:
        	:type InitOffsetFace: BRepAlgo_Image
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Inter3d_CompletInt(self, *args)


    def ConnexIntByArc(self, *args) -> "void":
        """
        :param SetOfFaces:
        	:type SetOfFaces: TopTools_ListOfShape
        	:param ShapeInit:
        	:type ShapeInit: TopoDS_Shape
        	:param Analyse:
        	:type Analyse: BRepOffset_Analyse
        	:param InitOffsetFace:
        	:type InitOffsetFace: BRepAlgo_Image
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Inter3d_ConnexIntByArc(self, *args)


    def ConnexIntByInt(self, *args) -> "void":
        """
        :param SI:
        	:type SI: TopoDS_Shape
        	:param MapSF:
        	:type MapSF: BRepOffset_DataMapOfShapeOffset
        	:param A:
        	:type A: BRepOffset_Analyse
        	:param MES:
        	:type MES: TopTools_DataMapOfShapeShape
        	:param Build:
        	:type Build: TopTools_DataMapOfShapeShape
        	:param Failed:
        	:type Failed: TopTools_ListOfShape
        	:param bIsPlanar: default value is Standard_False
        	:type bIsPlanar: bool
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Inter3d_ConnexIntByInt(self, *args)


    def ContextIntByArc(self, *args) -> "void":
        """
        :param ContextFaces:
        	:type ContextFaces: TopTools_IndexedMapOfShape
        	:param ExtentContext:
        	:type ExtentContext: bool
        	:param Analyse:
        	:type Analyse: BRepOffset_Analyse
        	:param InitOffsetFace:
        	:type InitOffsetFace: BRepAlgo_Image
        	:param InitOffsetEdge:
        	:type InitOffsetEdge: BRepAlgo_Image
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Inter3d_ContextIntByArc(self, *args)


    def ContextIntByInt(self, *args) -> "void":
        """
        :param ContextFaces:
        	:type ContextFaces: TopTools_IndexedMapOfShape
        	:param ExtentContext:
        	:type ExtentContext: bool
        	:param MapSF:
        	:type MapSF: BRepOffset_DataMapOfShapeOffset
        	:param A:
        	:type A: BRepOffset_Analyse
        	:param MES:
        	:type MES: TopTools_DataMapOfShapeShape
        	:param Build:
        	:type Build: TopTools_DataMapOfShapeShape
        	:param Failed:
        	:type Failed: TopTools_ListOfShape
        	:param bIsPlanar: default value is Standard_False
        	:type bIsPlanar: bool
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Inter3d_ContextIntByInt(self, *args)


    def FaceInter(self, *args) -> "void":
        """
        :param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:param InitOffsetFace:
        	:type InitOffsetFace: BRepAlgo_Image
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Inter3d_FaceInter(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: bool
        """
        return _BRepOffset.BRepOffset_Inter3d_IsDone(self, *args)


    def NewEdges(self, *args) -> "TopTools_IndexedMapOfShape &":
        """:rtype: TopTools_IndexedMapOfShape"""
        return _BRepOffset.BRepOffset_Inter3d_NewEdges(self, *args)


    def SetDone(self, *args) -> "void":
        """
        :param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Inter3d_SetDone(self, *args)


    def TouchedFaces(self, *args) -> "TopTools_IndexedMapOfShape &":
        """:rtype: TopTools_IndexedMapOfShape"""
        return _BRepOffset.BRepOffset_Inter3d_TouchedFaces(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Inter3d
BRepOffset_Inter3d.AddCommonEdges = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_AddCommonEdges, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.AsDes = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_AsDes, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.CompletInt = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_CompletInt, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.ConnexIntByArc = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_ConnexIntByArc, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.ConnexIntByInt = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_ConnexIntByInt, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.ContextIntByArc = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_ContextIntByArc, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.ContextIntByInt = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_ContextIntByInt, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.FaceInter = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_FaceInter, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.IsDone = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_IsDone, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.NewEdges = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_NewEdges, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.SetDone = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_SetDone, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.TouchedFaces = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_TouchedFaces, None, BRepOffset_Inter3d)
BRepOffset_Inter3d_swigregister = _BRepOffset.BRepOffset_Inter3d_swigregister
BRepOffset_Inter3d_swigregister(BRepOffset_Inter3d)

class BRepOffset_Interval(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Type:
        	:type Type: BRepOffset_Type
        	:rtype: None
        """
        _BRepOffset.BRepOffset_Interval_swiginit(self, _BRepOffset.new_BRepOffset_Interval(*args))

    def First(self, *args) -> "Standard_Real":
        """
        :param U:
        	:type U: float
        	:rtype: None
        :rtype: float
        """
        return _BRepOffset.BRepOffset_Interval_First(self, *args)


    def Last(self, *args) -> "Standard_Real":
        """
        :param U:
        	:type U: float
        	:rtype: None
        :rtype: float
        """
        return _BRepOffset.BRepOffset_Interval_Last(self, *args)


    def Type(self, *args) -> "BRepOffset_Type":
        """
        :param T:
        	:type T: BRepOffset_Type
        	:rtype: None
        :rtype: BRepOffset_Type
        """
        return _BRepOffset.BRepOffset_Interval_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Interval
BRepOffset_Interval.First = new_instancemethod(_BRepOffset.BRepOffset_Interval_First, None, BRepOffset_Interval)
BRepOffset_Interval.Last = new_instancemethod(_BRepOffset.BRepOffset_Interval_Last, None, BRepOffset_Interval)
BRepOffset_Interval.Type = new_instancemethod(_BRepOffset.BRepOffset_Interval_Type, None, BRepOffset_Interval)
BRepOffset_Interval_swigregister = _BRepOffset.BRepOffset_Interval_swigregister
BRepOffset_Interval_swigregister(BRepOffset_Interval)

class BRepOffset_MakeLoops(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _BRepOffset.BRepOffset_MakeLoops_swiginit(self, _BRepOffset.new_BRepOffset_MakeLoops(*args))

    def Build(self, *args) -> "void":
        """
        :param LF:
        	:type LF: TopTools_ListOfShape
        	:param AsDes:
        	:type AsDes: BRepAlgo_AsDes
        	:param Image:
        	:type Image: BRepAlgo_Image
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_MakeLoops_Build(self, *args)


    def BuildFaces(self, *args) -> "void":
        """
        :param LF:
        	:type LF: TopTools_ListOfShape
        	:param AsDes:
        	:type AsDes: BRepAlgo_AsDes
        	:param Image:
        	:type Image: BRepAlgo_Image
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_MakeLoops_BuildFaces(self, *args)


    def BuildOnContext(self, *args) -> "void":
        """
        :param LContext:
        	:type LContext: TopTools_ListOfShape
        	:param Analyse:
        	:type Analyse: BRepOffset_Analyse
        	:param AsDes:
        	:type AsDes: BRepAlgo_AsDes
        	:param Image:
        	:type Image: BRepAlgo_Image
        	:param InSide:
        	:type InSide: bool
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_MakeLoops_BuildOnContext(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_MakeLoops
BRepOffset_MakeLoops.Build = new_instancemethod(_BRepOffset.BRepOffset_MakeLoops_Build, None, BRepOffset_MakeLoops)
BRepOffset_MakeLoops.BuildFaces = new_instancemethod(_BRepOffset.BRepOffset_MakeLoops_BuildFaces, None, BRepOffset_MakeLoops)
BRepOffset_MakeLoops.BuildOnContext = new_instancemethod(_BRepOffset.BRepOffset_MakeLoops_BuildOnContext, None, BRepOffset_MakeLoops)
BRepOffset_MakeLoops_swigregister = _BRepOffset.BRepOffset_MakeLoops_swigregister
BRepOffset_MakeLoops_swigregister(BRepOffset_MakeLoops)

class BRepOffset_MakeOffset(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddFace(self, *args) -> "void":
        """
        * Add Closing Faces, <F> has to be in the initial shape S.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_MakeOffset_AddFace(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: TopoDS_Shape
        	:param Offset:
        	:type Offset: float
        	:param Tol:
        	:type Tol: float
        	:param Mode: default value is BRepOffset_Skin
        	:type Mode: BRepOffset_Mode
        	:param Intersection: default value is Standard_False
        	:type Intersection: bool
        	:param SelfInter: default value is Standard_False
        	:type SelfInter: bool
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param Thickening: default value is Standard_False
        	:type Thickening: bool
        	:param RemoveIntEdges: default value is Standard_False
        	:type RemoveIntEdges: bool
        	:rtype: None
        """
        _BRepOffset.BRepOffset_MakeOffset_swiginit(self, _BRepOffset.new_BRepOffset_MakeOffset(*args))

    def CheckInputData(self, *args) -> "Standard_Boolean":
        """
        * Makes pre analysis of possibility offset perform. Use method Error() to get more information. Finds first error. List of checks: 1) Check for existence object with non-null offset. 2) Check for connectivity in offset shell. 3) Check continuity of input surfaces. 4) Check for normals existence on grid. returns True if possible make computations and false otherwise.
        	:rtype: bool
        """
        return _BRepOffset.BRepOffset_MakeOffset_CheckInputData(self, *args)


    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _BRepOffset.BRepOffset_MakeOffset_Clear(self, *args)


    def ClosingFaces(self, *args) -> "TopTools_IndexedMapOfShape const &":
        """
        * Returns the list of closing faces stores by AddFace
        	:rtype: TopTools_IndexedMapOfShape
        """
        return _BRepOffset.BRepOffset_MakeOffset_ClosingFaces(self, *args)


    def Error(self, *args) -> "BRepOffset_Error":
        """
        * returns information about offset state.
        	:rtype: BRepOffset_Error
        """
        return _BRepOffset.BRepOffset_MakeOffset_Error(self, *args)


    def GetBadShape(self, *args) -> "TopoDS_Shape const":
        """
        * Return bad shape, which obtained in CheckInputData.
        	:rtype: TopoDS_Shape
        """
        return _BRepOffset.BRepOffset_MakeOffset_GetBadShape(self, *args)


    def GetJoinType(self, *args) -> "GeomAbs_JoinType":
        """
        * Returns myJoin.
        	:rtype: GeomAbs_JoinType
        """
        return _BRepOffset.BRepOffset_MakeOffset_GetJoinType(self, *args)


    def Initialize(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param Offset:
        	:type Offset: float
        	:param Tol:
        	:type Tol: float
        	:param Mode: default value is BRepOffset_Skin
        	:type Mode: BRepOffset_Mode
        	:param Intersection: default value is Standard_False
        	:type Intersection: bool
        	:param SelfInter: default value is Standard_False
        	:type SelfInter: bool
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param Thickening: default value is Standard_False
        	:type Thickening: bool
        	:param RemoveIntEdges: default value is Standard_False
        	:type RemoveIntEdges: bool
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_MakeOffset_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _BRepOffset.BRepOffset_MakeOffset_IsDone(self, *args)


    def MakeOffsetShape(self, *args) -> "void":
        """:rtype: None"""
        return _BRepOffset.BRepOffset_MakeOffset_MakeOffsetShape(self, *args)


    def MakeThickSolid(self, *args) -> "void":
        """:rtype: None"""
        return _BRepOffset.BRepOffset_MakeOffset_MakeThickSolid(self, *args)


    def OffsetEdgesFromShapes(self, *args) -> "BRepAlgo_Image const &":
        """
        * Returns <Image> containing links between initials shapes and offset edges.
        	:rtype: BRepAlgo_Image
        """
        return _BRepOffset.BRepOffset_MakeOffset_OffsetEdgesFromShapes(self, *args)


    def OffsetFacesFromShapes(self, *args) -> "BRepAlgo_Image const &":
        """
        * Returns <Image> containing links between initials shapes and offset faces.
        	:rtype: BRepAlgo_Image
        """
        return _BRepOffset.BRepOffset_MakeOffset_OffsetFacesFromShapes(self, *args)


    def SetOffsetOnFace(self, *args) -> "void":
        """
        * set the offset <Off> on the Face <F>
        	:param F:
        	:type F: TopoDS_Face
        	:param Off:
        	:type Off: float
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_MakeOffset_SetOffsetOnFace(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BRepOffset.BRepOffset_MakeOffset_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_MakeOffset
BRepOffset_MakeOffset.AddFace = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_AddFace, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.CheckInputData = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_CheckInputData, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.Clear = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_Clear, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.ClosingFaces = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_ClosingFaces, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.Error = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_Error, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.GetBadShape = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_GetBadShape, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.GetJoinType = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_GetJoinType, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.Initialize = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_Initialize, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.IsDone = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_IsDone, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.MakeOffsetShape = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_MakeOffsetShape, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.MakeThickSolid = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_MakeThickSolid, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.OffsetEdgesFromShapes = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_OffsetEdgesFromShapes, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.OffsetFacesFromShapes = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_OffsetFacesFromShapes, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.SetOffsetOnFace = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_SetOffsetOnFace, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.Shape = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_Shape, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset_swigregister = _BRepOffset.BRepOffset_MakeOffset_swigregister
BRepOffset_MakeOffset_swigregister(BRepOffset_MakeOffset)

class BRepOffset_MakeSimpleOffset(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor. Does nothing.
        	:rtype: None
        * Constructor.
        	:param theInputShape:
        	:type theInputShape: TopoDS_Shape
        	:param theOffsetValue:
        	:type theOffsetValue: float
        	:rtype: None
        """
        _BRepOffset.BRepOffset_MakeSimpleOffset_swiginit(self, _BRepOffset.new_BRepOffset_MakeSimpleOffset(*args))

    def Generated(self, *args) -> "TopoDS_Shape const":
        """
        * Returnes result shape for the given one (if exists).
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_Generated(self, *args)


    def GetBuildSolidFlag(self, *args) -> "Standard_Boolean":
        """
        * Gets solid building flag.
        	:rtype: bool
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_GetBuildSolidFlag(self, *args)


    def GetError(self, *args) -> "BRepOffsetSimple_Status":
        """
        * Gets error code.
        	:rtype: BRepOffsetSimple_Status
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_GetError(self, *args)


    def GetErrorMessage(self, *args) -> "TCollection_AsciiString":
        """
        * Gets error message.
        	:rtype: TCollection_AsciiString
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_GetErrorMessage(self, *args)


    def GetOffsetValue(self, *args) -> "Standard_Real":
        """
        * Gets offset value.
        	:rtype: float
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_GetOffsetValue(self, *args)


    def GetResultShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns result shape.
        	:rtype: TopoDS_Shape
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_GetResultShape(self, *args)


    def GetTolerance(self, *args) -> "Standard_Real":
        """
        * Gets tolerance (used for handling singularities).
        	:rtype: float
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_GetTolerance(self, *args)


    def Initialize(self, *args) -> "void":
        """
        * Initialies shape for modifications.
        	:param theInputShape:
        	:type theInputShape: TopoDS_Shape
        	:param theOffsetValue:
        	:type theOffsetValue: float
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_Initialize(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Gets done state.
        	:rtype: bool
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_IsDone(self, *args)


    def Modified(self, *args) -> "TopoDS_Shape const":
        """
        * Returnes modified shape for the given one (if exists).
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_Modified(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Computes offset shape.
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_Perform(self, *args)


    def SetBuildSolidFlag(self, *args) -> "void":
        """
        * Sets solid building flag.
        	:param theBuildFlag:
        	:type theBuildFlag: bool
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_SetBuildSolidFlag(self, *args)


    def SetOffsetValue(self, *args) -> "void":
        """
        * Sets offset value.
        	:param theOffsetValue:
        	:type theOffsetValue: float
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_SetOffsetValue(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * Sets tolerance (used for handling singularities).
        	:param theValue:
        	:type theValue: float
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_MakeSimpleOffset_SetTolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_MakeSimpleOffset
BRepOffset_MakeSimpleOffset.Generated = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_Generated, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.GetBuildSolidFlag = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_GetBuildSolidFlag, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.GetError = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_GetError, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.GetErrorMessage = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_GetErrorMessage, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.GetOffsetValue = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_GetOffsetValue, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.GetResultShape = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_GetResultShape, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.GetTolerance = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_GetTolerance, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.Initialize = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_Initialize, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.IsDone = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_IsDone, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.Modified = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_Modified, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.Perform = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_Perform, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.SetBuildSolidFlag = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_SetBuildSolidFlag, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.SetOffsetValue = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_SetOffsetValue, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset.SetTolerance = new_instancemethod(_BRepOffset.BRepOffset_MakeSimpleOffset_SetTolerance, None, BRepOffset_MakeSimpleOffset)
BRepOffset_MakeSimpleOffset_swigregister = _BRepOffset.BRepOffset_MakeSimpleOffset_swigregister
BRepOffset_MakeSimpleOffset_swigregister(BRepOffset_MakeSimpleOffset)

class BRepOffset_Offset(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Face:
        	:type Face: TopoDS_Face
        	:param Offset:
        	:type Offset: float
        	:param OffsetOutside: default value is Standard_True
        	:type OffsetOutside: bool
        	:param JoinType: default value is GeomAbs_Arc
        	:type JoinType: GeomAbs_JoinType
        	:rtype: None
        * This method will be called when you want to share the edges soon generated from an other face. e.g. when two faces are tangents the common edge will generate only one edge ( no pipe). //! The Map will be fill as follow: //! Created(E) = E' with: E = an edge of <Face> E' = the image of E in the offseting of another face sharing E with a continuity at least G1
        	:param Face:
        	:type Face: TopoDS_Face
        	:param Offset:
        	:type Offset: float
        	:param Created:
        	:type Created: TopTools_DataMapOfShapeShape
        	:param OffsetOutside: default value is Standard_True
        	:type OffsetOutside: bool
        	:param JoinType: default value is GeomAbs_Arc
        	:type JoinType: GeomAbs_JoinType
        	:rtype: None
        :param Path:
        	:type Path: TopoDS_Edge
        	:param Edge1:
        	:type Edge1: TopoDS_Edge
        	:param Edge2:
        	:type Edge2: TopoDS_Edge
        	:param Offset:
        	:type Offset: float
        	:param Polynomial: default value is Standard_False
        	:type Polynomial: bool
        	:param Tol: default value is 1.0e-4
        	:type Tol: float
        	:param Conti: default value is GeomAbs_C1
        	:type Conti: GeomAbs_Shape
        	:rtype: None
        :param Path:
        	:type Path: TopoDS_Edge
        	:param Edge1:
        	:type Edge1: TopoDS_Edge
        	:param Edge2:
        	:type Edge2: TopoDS_Edge
        	:param Offset:
        	:type Offset: float
        	:param FirstEdge:
        	:type FirstEdge: TopoDS_Edge
        	:param LastEdge:
        	:type LastEdge: TopoDS_Edge
        	:param Polynomial: default value is Standard_False
        	:type Polynomial: bool
        	:param Tol: default value is 1.0e-4
        	:type Tol: float
        	:param Conti: default value is GeomAbs_C1
        	:type Conti: GeomAbs_Shape
        	:rtype: None
        * Tol and Conti are only used if Polynomial is True (Used to perfrom the approximation)
        	:param Vertex:
        	:type Vertex: TopoDS_Vertex
        	:param LEdge:
        	:type LEdge: TopTools_ListOfShape
        	:param Offset:
        	:type Offset: float
        	:param Polynomial: default value is Standard_False
        	:type Polynomial: bool
        	:param Tol: default value is 1.0e-4
        	:type Tol: float
        	:param Conti: default value is GeomAbs_C1
        	:type Conti: GeomAbs_Shape
        	:rtype: None
        """
        _BRepOffset.BRepOffset_Offset_swiginit(self, _BRepOffset.new_BRepOffset_Offset(*args))

    def Face(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _BRepOffset.BRepOffset_Offset_Face(self, *args)


    def Generated(self, *args) -> "TopoDS_Shape":
        """
        :param Shape:
        	:type Shape: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _BRepOffset.BRepOffset_Offset_Generated(self, *args)


    def Init(self, *args) -> "void":
        """
        :param Face:
        	:type Face: TopoDS_Face
        	:param Offset:
        	:type Offset: float
        	:param OffsetOutside: default value is Standard_True
        	:type OffsetOutside: bool
        	:param JoinType: default value is GeomAbs_Arc
        	:type JoinType: GeomAbs_JoinType
        	:rtype: None
        :param Face:
        	:type Face: TopoDS_Face
        	:param Offset:
        	:type Offset: float
        	:param Created:
        	:type Created: TopTools_DataMapOfShapeShape
        	:param OffsetOutside: default value is Standard_True
        	:type OffsetOutside: bool
        	:param JoinType: default value is GeomAbs_Arc
        	:type JoinType: GeomAbs_JoinType
        	:rtype: None
        :param Path:
        	:type Path: TopoDS_Edge
        	:param Edge1:
        	:type Edge1: TopoDS_Edge
        	:param Edge2:
        	:type Edge2: TopoDS_Edge
        	:param Offset:
        	:type Offset: float
        	:param Polynomial: default value is Standard_False
        	:type Polynomial: bool
        	:param Tol: default value is 1.0e-4
        	:type Tol: float
        	:param Conti: default value is GeomAbs_C1
        	:type Conti: GeomAbs_Shape
        	:rtype: None
        :param Path:
        	:type Path: TopoDS_Edge
        	:param Edge1:
        	:type Edge1: TopoDS_Edge
        	:param Edge2:
        	:type Edge2: TopoDS_Edge
        	:param Offset:
        	:type Offset: float
        	:param FirstEdge:
        	:type FirstEdge: TopoDS_Edge
        	:param LastEdge:
        	:type LastEdge: TopoDS_Edge
        	:param Polynomial: default value is Standard_False
        	:type Polynomial: bool
        	:param Tol: default value is 1.0e-4
        	:type Tol: float
        	:param Conti: default value is GeomAbs_C1
        	:type Conti: GeomAbs_Shape
        	:rtype: None
        * Tol and Conti are only used if Polynomial is True (Used to perfrom the approximation)
        	:param Vertex:
        	:type Vertex: TopoDS_Vertex
        	:param LEdge:
        	:type LEdge: TopTools_ListOfShape
        	:param Offset:
        	:type Offset: float
        	:param Polynomial: default value is Standard_False
        	:type Polynomial: bool
        	:param Tol: default value is 1.0e-4
        	:type Tol: float
        	:param Conti: default value is GeomAbs_C1
        	:type Conti: GeomAbs_Shape
        	:rtype: None
        * Only used in Rolling Ball. Pipe on Free Boundary
        	:param Edge:
        	:type Edge: TopoDS_Edge
        	:param Offset:
        	:type Offset: float
        	:rtype: None
        """
        return _BRepOffset.BRepOffset_Offset_Init(self, *args)


    def InitialShape(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _BRepOffset.BRepOffset_Offset_InitialShape(self, *args)


    def Status(self, *args) -> "BRepOffset_Status":
        """:rtype: BRepOffset_Status"""
        return _BRepOffset.BRepOffset_Offset_Status(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Offset
BRepOffset_Offset.Face = new_instancemethod(_BRepOffset.BRepOffset_Offset_Face, None, BRepOffset_Offset)
BRepOffset_Offset.Generated = new_instancemethod(_BRepOffset.BRepOffset_Offset_Generated, None, BRepOffset_Offset)
BRepOffset_Offset.Init = new_instancemethod(_BRepOffset.BRepOffset_Offset_Init, None, BRepOffset_Offset)
BRepOffset_Offset.InitialShape = new_instancemethod(_BRepOffset.BRepOffset_Offset_InitialShape, None, BRepOffset_Offset)
BRepOffset_Offset.Status = new_instancemethod(_BRepOffset.BRepOffset_Offset_Status, None, BRepOffset_Offset)
BRepOffset_Offset_swigregister = _BRepOffset.BRepOffset_Offset_swigregister
BRepOffset_Offset_swigregister(BRepOffset_Offset)

class BRepOffset_SimpleOffset(OCC.Core.BRepTools.BRepTools_Modification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor. @param theInputShape shape to be offset @param theOffsetValue offset distance (signed) @param theTolerance tolerance for handling singular points
        	:param theInputShape:
        	:type theInputShape: TopoDS_Shape
        	:param theOffsetValue:
        	:type theOffsetValue: float
        	:param theTolerance:
        	:type theTolerance: float
        	:rtype: None
        """
        _BRepOffset.BRepOffset_SimpleOffset_swiginit(self, _BRepOffset.new_BRepOffset_SimpleOffset(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepOffset_SimpleOffset_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_SimpleOffset
BRepOffset_SimpleOffset_swigregister = _BRepOffset.BRepOffset_SimpleOffset_swigregister
BRepOffset_SimpleOffset_swigregister(BRepOffset_SimpleOffset)

class BRepOffset_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BuildNeighbour(*args) -> "void":
        """
        * Via the wire explorer store in <NOnV1> for an Edge <E> of <W> his Edge neighbour on the first vertex <V1> of <E>. Store in NOnV2 the Neighbour of <E>on the last vertex <V2> of <E>.
        	:param W:
        	:type W: TopoDS_Wire
        	:param F:
        	:type F: TopoDS_Face
        	:param NOnV1:
        	:type NOnV1: TopTools_DataMapOfShapeShape
        	:param NOnV2:
        	:type NOnV2: TopTools_DataMapOfShapeShape
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Tool_BuildNeighbour(*args)

    BuildNeighbour = staticmethod(BuildNeighbour)

    def CheckBounds(*args) -> "Standard_Boolean &, Standard_Boolean &, Standard_Boolean &":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param Analyse:
        	:type Analyse: BRepOffset_Analyse
        	:param enlargeU:
        	:type enlargeU: bool
        	:param enlargeVfirst:
        	:type enlargeVfirst: bool
        	:param enlargeVlast:
        	:type enlargeVlast: bool
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Tool_CheckBounds(*args)

    CheckBounds = staticmethod(CheckBounds)

    def CheckPlanesNormals(*args) -> "Standard_Boolean":
        """
        * Compares the normal directions of the planar faces and returns True if the directions are the same with the given precision.
        	:param theFace1:
        	:type theFace1: TopoDS_Face
        	:param theFace2:
        	:type theFace2: TopoDS_Face
        	:param theTolAng: default value is 1e-8
        	:type theTolAng: float
        	:rtype: bool
        """
        return _BRepOffset.BRepOffset_Tool_CheckPlanesNormals(*args)

    CheckPlanesNormals = staticmethod(CheckPlanesNormals)

    def CorrectOrientation(*args) -> "void":
        """
        :param SI:
        	:type SI: TopoDS_Shape
        	:param NewEdges:
        	:type NewEdges: TopTools_IndexedMapOfShape
        	:param AsDes:
        	:type AsDes: BRepAlgo_AsDes
        	:param InitOffset:
        	:type InitOffset: BRepAlgo_Image
        	:param Offset:
        	:type Offset: float
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Tool_CorrectOrientation(*args)

    CorrectOrientation = staticmethod(CorrectOrientation)

    def Deboucle3D(*args) -> "TopoDS_Shape":
        """
        * Remove the non valid part of an offsetshape 1 - Remove all the free boundary and the faces connex to such edges. 2 - Remove all the shapes not valid in the result (according to the side of offseting) in this verion only the first point is implemented.
        	:param S:
        	:type S: TopoDS_Shape
        	:param Boundary:
        	:type Boundary: TopTools_MapOfShape
        	:rtype: TopoDS_Shape
        """
        return _BRepOffset.BRepOffset_Tool_Deboucle3D(*args)

    Deboucle3D = staticmethod(Deboucle3D)

    def EdgeVertices(*args) -> "void":
        """
        * <V1> is the FirstVertex ,<V2> is the Last Vertex of <Edge> taking account the orientation of Edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Tool_EdgeVertices(*args)

    EdgeVertices = staticmethod(EdgeVertices)

    def EnLargeFace(*args) -> "Standard_Boolean":
        """
        * Returns True if The Surface of <NF> has changed. if <ChangeGeom> is True , the surface can be changed . if <UpdatePCurve> is True, update the pcurves of the edges of <F> on the new surface if the surface has been changed. <enlargeU>, <enlargeVfirst>, <enlargeVlast> allow or forbid enlargement in U and V directions correspondingly. <theExtensionMode> is a mode of extension of the surface of the face: if <theExtensionMode> equals 1, potentially infinite surfaces are extended by maximum value, and limited surfaces are extended by 25%. if <theExtensionMode> equals 2, potentially infinite surfaces are extended by 10*(correspondent size of face), and limited surfaces are extended by 100%. <theLenBeforeUfirst>, <theLenAfterUlast>, <theLenBeforeVfirst>, <theLenAfterVlast> set the values of enlargement on correspondent directions. If some of them equals -1, the default value of enlargement is used.
        	:param F:
        	:type F: TopoDS_Face
        	:param NF:
        	:type NF: TopoDS_Face
        	:param ChangeGeom:
        	:type ChangeGeom: bool
        	:param UpDatePCurve: default value is Standard_False
        	:type UpDatePCurve: bool
        	:param enlargeU: default value is Standard_True
        	:type enlargeU: bool
        	:param enlargeVfirst: default value is Standard_True
        	:type enlargeVfirst: bool
        	:param enlargeVlast: default value is Standard_True
        	:type enlargeVlast: bool
        	:param theExtensionMode: default value is 1
        	:type theExtensionMode: int
        	:param theLenBeforeUfirst: default value is -1
        	:type theLenBeforeUfirst: float
        	:param theLenAfterUlast: default value is -1
        	:type theLenAfterUlast: float
        	:param theLenBeforeVfirst: default value is -1
        	:type theLenBeforeVfirst: float
        	:param theLenAfterVlast: default value is -1
        	:type theLenAfterVlast: float
        	:rtype: bool
        """
        return _BRepOffset.BRepOffset_Tool_EnLargeFace(*args)

    EnLargeFace = staticmethod(EnLargeFace)

    def ExtentFace(*args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param ConstShapes:
        	:type ConstShapes: TopTools_DataMapOfShapeShape
        	:param ToBuild:
        	:type ToBuild: TopTools_DataMapOfShapeShape
        	:param Side:
        	:type Side: TopAbs_State
        	:param TolConf:
        	:type TolConf: float
        	:param NF:
        	:type NF: TopoDS_Face
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Tool_ExtentFace(*args)

    ExtentFace = staticmethod(ExtentFace)

    def FindCommonShapes(*args) -> "Standard_Boolean":
        """
        * Looks for the common Vertices and Edges between faces <theF1> and <theF2>. Returns True if common shapes have been found. <theLE> will contain the found common edges; <theLV> will contain the found common vertices.
        	:param theF1:
        	:type theF1: TopoDS_Face
        	:param theF2:
        	:type theF2: TopoDS_Face
        	:param theLE:
        	:type theLE: TopTools_ListOfShape
        	:param theLV:
        	:type theLV: TopTools_ListOfShape
        	:rtype: bool
        * Looks for the common shapes of type <theType> between shapes <theS1> and <theS2>. Returns True if common shapes have been found. <theLSC> will contain the found common shapes.
        	:param theS1:
        	:type theS1: TopoDS_Shape
        	:param theS2:
        	:type theS2: TopoDS_Shape
        	:param theType:
        	:type theType: TopAbs_ShapeEnum
        	:param theLSC:
        	:type theLSC: TopTools_ListOfShape
        	:rtype: bool
        """
        return _BRepOffset.BRepOffset_Tool_FindCommonShapes(*args)

    FindCommonShapes = staticmethod(FindCommonShapes)

    def Gabarit(*args) -> "Standard_Real":
        """
        :param aCurve:
        	:type aCurve: Geom_Curve
        	:rtype: float
        """
        return _BRepOffset.BRepOffset_Tool_Gabarit(*args)

    Gabarit = staticmethod(Gabarit)

    def Inter2d(*args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:param LV:
        	:type LV: TopTools_ListOfShape
        	:param Tol:
        	:type Tol: float
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Tool_Inter2d(*args)

    Inter2d = staticmethod(Inter2d)

    def Inter3D(*args) -> "void":
        """
        * Computes the Section betwwen <F1> and <F2> the edges solution are stored in <LInt1> with the orientation on <F1>, the sames edges are stored in <Lint2> with the orientation on <F2>.
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:param LInt1:
        	:type LInt1: TopTools_ListOfShape
        	:param LInt2:
        	:type LInt2: TopTools_ListOfShape
        	:param Side:
        	:type Side: TopAbs_State
        	:param RefEdge:
        	:type RefEdge: TopoDS_Edge
        	:param IsRefEdgeDefined: default value is Standard_False
        	:type IsRefEdgeDefined: bool
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Tool_Inter3D(*args)

    Inter3D = staticmethod(Inter3D)

    def InterOrExtent(*args) -> "void":
        """
        :param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:param LInt1:
        	:type LInt1: TopTools_ListOfShape
        	:param LInt2:
        	:type LInt2: TopTools_ListOfShape
        	:param Side:
        	:type Side: TopAbs_State
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Tool_InterOrExtent(*args)

    InterOrExtent = staticmethod(InterOrExtent)

    def MapVertexEdges(*args) -> "void":
        """
        * Store in MVE for a vertex <V> in <S> the incident edges <E> in <S>. An Edge is Store only one Time for a vertex.
        	:param S:
        	:type S: TopoDS_Shape
        	:param MVE:
        	:type MVE: TopTools_DataMapOfShapeListOfShape
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Tool_MapVertexEdges(*args)

    MapVertexEdges = staticmethod(MapVertexEdges)

    def OriEdgeInFace(*args) -> "TopAbs_Orientation":
        """
        * returns the cumul of the orientation of <Edge> and thc containing wire in <Face>
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: TopAbs_Orientation
        """
        return _BRepOffset.BRepOffset_Tool_OriEdgeInFace(*args)

    OriEdgeInFace = staticmethod(OriEdgeInFace)

    def OrientSection(*args) -> "void":
        """
        * <E> is a section between <F1> and <F2>. Computes <O1> the orientation of <E> in <F1> influenced by <F2>. idem for <O2>.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:param O1:
        	:type O1: TopAbs_Orientation
        	:param O2:
        	:type O2: TopAbs_Orientation
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Tool_OrientSection(*args)

    OrientSection = staticmethod(OrientSection)

    def PipeInter(*args) -> "void":
        """
        :param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:param LInt1:
        	:type LInt1: TopTools_ListOfShape
        	:param LInt2:
        	:type LInt2: TopTools_ListOfShape
        	:param Side:
        	:type Side: TopAbs_State
        	:rtype: void
        """
        return _BRepOffset.BRepOffset_Tool_PipeInter(*args)

    PipeInter = staticmethod(PipeInter)

    def TryProject(*args) -> "Standard_Boolean":
        """
        * Find if the edges <Edges> of the face <F2> are on the face <F1>. Set in <LInt1> <LInt2> the updated edges. If all the edges are computed, returns true.
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:param Edges:
        	:type Edges: TopTools_ListOfShape
        	:param LInt1:
        	:type LInt1: TopTools_ListOfShape
        	:param LInt2:
        	:type LInt2: TopTools_ListOfShape
        	:param Side:
        	:type Side: TopAbs_State
        	:param TolConf:
        	:type TolConf: float
        	:rtype: bool
        """
        return _BRepOffset.BRepOffset_Tool_TryProject(*args)

    TryProject = staticmethod(TryProject)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepOffset.BRepOffset_Tool_swiginit(self, _BRepOffset.new_BRepOffset_Tool())
    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Tool
BRepOffset_Tool_swigregister = _BRepOffset.BRepOffset_Tool_swigregister
BRepOffset_Tool_swigregister(BRepOffset_Tool)

def BRepOffset_Tool_BuildNeighbour(*args) -> "void":
    """
    * Via the wire explorer store in <NOnV1> for an Edge <E> of <W> his Edge neighbour on the first vertex <V1> of <E>. Store in NOnV2 the Neighbour of <E>on the last vertex <V2> of <E>.
    	:param W:
    	:type W: TopoDS_Wire
    	:param F:
    	:type F: TopoDS_Face
    	:param NOnV1:
    	:type NOnV1: TopTools_DataMapOfShapeShape
    	:param NOnV2:
    	:type NOnV2: TopTools_DataMapOfShapeShape
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Tool_BuildNeighbour(*args)

def BRepOffset_Tool_CheckBounds(*args) -> "Standard_Boolean &, Standard_Boolean &, Standard_Boolean &":
    """
    :param F:
    	:type F: TopoDS_Face
    	:param Analyse:
    	:type Analyse: BRepOffset_Analyse
    	:param enlargeU:
    	:type enlargeU: bool
    	:param enlargeVfirst:
    	:type enlargeVfirst: bool
    	:param enlargeVlast:
    	:type enlargeVlast: bool
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Tool_CheckBounds(*args)

def BRepOffset_Tool_CheckPlanesNormals(*args) -> "Standard_Boolean":
    """
    * Compares the normal directions of the planar faces and returns True if the directions are the same with the given precision.
    	:param theFace1:
    	:type theFace1: TopoDS_Face
    	:param theFace2:
    	:type theFace2: TopoDS_Face
    	:param theTolAng: default value is 1e-8
    	:type theTolAng: float
    	:rtype: bool
    """
    return _BRepOffset.BRepOffset_Tool_CheckPlanesNormals(*args)

def BRepOffset_Tool_CorrectOrientation(*args) -> "void":
    """
    :param SI:
    	:type SI: TopoDS_Shape
    	:param NewEdges:
    	:type NewEdges: TopTools_IndexedMapOfShape
    	:param AsDes:
    	:type AsDes: BRepAlgo_AsDes
    	:param InitOffset:
    	:type InitOffset: BRepAlgo_Image
    	:param Offset:
    	:type Offset: float
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Tool_CorrectOrientation(*args)

def BRepOffset_Tool_Deboucle3D(*args) -> "TopoDS_Shape":
    """
    * Remove the non valid part of an offsetshape 1 - Remove all the free boundary and the faces connex to such edges. 2 - Remove all the shapes not valid in the result (according to the side of offseting) in this verion only the first point is implemented.
    	:param S:
    	:type S: TopoDS_Shape
    	:param Boundary:
    	:type Boundary: TopTools_MapOfShape
    	:rtype: TopoDS_Shape
    """
    return _BRepOffset.BRepOffset_Tool_Deboucle3D(*args)

def BRepOffset_Tool_EdgeVertices(*args) -> "void":
    """
    * <V1> is the FirstVertex ,<V2> is the Last Vertex of <Edge> taking account the orientation of Edge.
    	:param E:
    	:type E: TopoDS_Edge
    	:param V1:
    	:type V1: TopoDS_Vertex
    	:param V2:
    	:type V2: TopoDS_Vertex
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Tool_EdgeVertices(*args)

def BRepOffset_Tool_EnLargeFace(*args) -> "Standard_Boolean":
    """
    * Returns True if The Surface of <NF> has changed. if <ChangeGeom> is True , the surface can be changed . if <UpdatePCurve> is True, update the pcurves of the edges of <F> on the new surface if the surface has been changed. <enlargeU>, <enlargeVfirst>, <enlargeVlast> allow or forbid enlargement in U and V directions correspondingly. <theExtensionMode> is a mode of extension of the surface of the face: if <theExtensionMode> equals 1, potentially infinite surfaces are extended by maximum value, and limited surfaces are extended by 25%. if <theExtensionMode> equals 2, potentially infinite surfaces are extended by 10*(correspondent size of face), and limited surfaces are extended by 100%. <theLenBeforeUfirst>, <theLenAfterUlast>, <theLenBeforeVfirst>, <theLenAfterVlast> set the values of enlargement on correspondent directions. If some of them equals -1, the default value of enlargement is used.
    	:param F:
    	:type F: TopoDS_Face
    	:param NF:
    	:type NF: TopoDS_Face
    	:param ChangeGeom:
    	:type ChangeGeom: bool
    	:param UpDatePCurve: default value is Standard_False
    	:type UpDatePCurve: bool
    	:param enlargeU: default value is Standard_True
    	:type enlargeU: bool
    	:param enlargeVfirst: default value is Standard_True
    	:type enlargeVfirst: bool
    	:param enlargeVlast: default value is Standard_True
    	:type enlargeVlast: bool
    	:param theExtensionMode: default value is 1
    	:type theExtensionMode: int
    	:param theLenBeforeUfirst: default value is -1
    	:type theLenBeforeUfirst: float
    	:param theLenAfterUlast: default value is -1
    	:type theLenAfterUlast: float
    	:param theLenBeforeVfirst: default value is -1
    	:type theLenBeforeVfirst: float
    	:param theLenAfterVlast: default value is -1
    	:type theLenAfterVlast: float
    	:rtype: bool
    """
    return _BRepOffset.BRepOffset_Tool_EnLargeFace(*args)

def BRepOffset_Tool_ExtentFace(*args) -> "void":
    """
    :param F:
    	:type F: TopoDS_Face
    	:param ConstShapes:
    	:type ConstShapes: TopTools_DataMapOfShapeShape
    	:param ToBuild:
    	:type ToBuild: TopTools_DataMapOfShapeShape
    	:param Side:
    	:type Side: TopAbs_State
    	:param TolConf:
    	:type TolConf: float
    	:param NF:
    	:type NF: TopoDS_Face
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Tool_ExtentFace(*args)

def BRepOffset_Tool_FindCommonShapes(*args) -> "Standard_Boolean":
    """
    * Looks for the common Vertices and Edges between faces <theF1> and <theF2>. Returns True if common shapes have been found. <theLE> will contain the found common edges; <theLV> will contain the found common vertices.
    	:param theF1:
    	:type theF1: TopoDS_Face
    	:param theF2:
    	:type theF2: TopoDS_Face
    	:param theLE:
    	:type theLE: TopTools_ListOfShape
    	:param theLV:
    	:type theLV: TopTools_ListOfShape
    	:rtype: bool
    * Looks for the common shapes of type <theType> between shapes <theS1> and <theS2>. Returns True if common shapes have been found. <theLSC> will contain the found common shapes.
    	:param theS1:
    	:type theS1: TopoDS_Shape
    	:param theS2:
    	:type theS2: TopoDS_Shape
    	:param theType:
    	:type theType: TopAbs_ShapeEnum
    	:param theLSC:
    	:type theLSC: TopTools_ListOfShape
    	:rtype: bool
    """
    return _BRepOffset.BRepOffset_Tool_FindCommonShapes(*args)

def BRepOffset_Tool_Gabarit(*args) -> "Standard_Real":
    """
    :param aCurve:
    	:type aCurve: Geom_Curve
    	:rtype: float
    """
    return _BRepOffset.BRepOffset_Tool_Gabarit(*args)

def BRepOffset_Tool_Inter2d(*args) -> "void":
    """
    :param F:
    	:type F: TopoDS_Face
    	:param E1:
    	:type E1: TopoDS_Edge
    	:param E2:
    	:type E2: TopoDS_Edge
    	:param LV:
    	:type LV: TopTools_ListOfShape
    	:param Tol:
    	:type Tol: float
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Tool_Inter2d(*args)

def BRepOffset_Tool_Inter3D(*args) -> "void":
    """
    * Computes the Section betwwen <F1> and <F2> the edges solution are stored in <LInt1> with the orientation on <F1>, the sames edges are stored in <Lint2> with the orientation on <F2>.
    	:param F1:
    	:type F1: TopoDS_Face
    	:param F2:
    	:type F2: TopoDS_Face
    	:param LInt1:
    	:type LInt1: TopTools_ListOfShape
    	:param LInt2:
    	:type LInt2: TopTools_ListOfShape
    	:param Side:
    	:type Side: TopAbs_State
    	:param RefEdge:
    	:type RefEdge: TopoDS_Edge
    	:param IsRefEdgeDefined: default value is Standard_False
    	:type IsRefEdgeDefined: bool
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Tool_Inter3D(*args)

def BRepOffset_Tool_InterOrExtent(*args) -> "void":
    """
    :param F1:
    	:type F1: TopoDS_Face
    	:param F2:
    	:type F2: TopoDS_Face
    	:param LInt1:
    	:type LInt1: TopTools_ListOfShape
    	:param LInt2:
    	:type LInt2: TopTools_ListOfShape
    	:param Side:
    	:type Side: TopAbs_State
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Tool_InterOrExtent(*args)

def BRepOffset_Tool_MapVertexEdges(*args) -> "void":
    """
    * Store in MVE for a vertex <V> in <S> the incident edges <E> in <S>. An Edge is Store only one Time for a vertex.
    	:param S:
    	:type S: TopoDS_Shape
    	:param MVE:
    	:type MVE: TopTools_DataMapOfShapeListOfShape
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Tool_MapVertexEdges(*args)

def BRepOffset_Tool_OriEdgeInFace(*args) -> "TopAbs_Orientation":
    """
    * returns the cumul of the orientation of <Edge> and thc containing wire in <Face>
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: TopAbs_Orientation
    """
    return _BRepOffset.BRepOffset_Tool_OriEdgeInFace(*args)

def BRepOffset_Tool_OrientSection(*args) -> "void":
    """
    * <E> is a section between <F1> and <F2>. Computes <O1> the orientation of <E> in <F1> influenced by <F2>. idem for <O2>.
    	:param E:
    	:type E: TopoDS_Edge
    	:param F1:
    	:type F1: TopoDS_Face
    	:param F2:
    	:type F2: TopoDS_Face
    	:param O1:
    	:type O1: TopAbs_Orientation
    	:param O2:
    	:type O2: TopAbs_Orientation
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Tool_OrientSection(*args)

def BRepOffset_Tool_PipeInter(*args) -> "void":
    """
    :param F1:
    	:type F1: TopoDS_Face
    	:param F2:
    	:type F2: TopoDS_Face
    	:param LInt1:
    	:type LInt1: TopTools_ListOfShape
    	:param LInt2:
    	:type LInt2: TopTools_ListOfShape
    	:param Side:
    	:type Side: TopAbs_State
    	:rtype: void
    """
    return _BRepOffset.BRepOffset_Tool_PipeInter(*args)

def BRepOffset_Tool_TryProject(*args) -> "Standard_Boolean":
    """
    * Find if the edges <Edges> of the face <F2> are on the face <F1>. Set in <LInt1> <LInt2> the updated edges. If all the edges are computed, returns true.
    	:param F1:
    	:type F1: TopoDS_Face
    	:param F2:
    	:type F2: TopoDS_Face
    	:param Edges:
    	:type Edges: TopTools_ListOfShape
    	:param LInt1:
    	:type LInt1: TopTools_ListOfShape
    	:param LInt2:
    	:type LInt2: TopTools_ListOfShape
    	:param Side:
    	:type Side: TopAbs_State
    	:param TolConf:
    	:type TolConf: float
    	:rtype: bool
    """
    return _BRepOffset.BRepOffset_Tool_TryProject(*args)



