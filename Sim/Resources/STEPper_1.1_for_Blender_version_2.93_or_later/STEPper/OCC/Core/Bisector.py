# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Bisector module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_bisector.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Bisector.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Bisector')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Bisector')
    _Bisector = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Bisector', [dirname(__file__)])
        except ImportError:
            import _Bisector
            return _Bisector
        try:
            _mod = imp.load_module('_Bisector', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Bisector = swig_import_helper()
    del swig_import_helper
else:
    import _Bisector
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Bisector.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Bisector.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Bisector.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Bisector.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Bisector.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Bisector.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Bisector.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Bisector.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Bisector.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Bisector.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Bisector.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Bisector.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Bisector.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Bisector.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Bisector.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Bisector.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Bisector.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Bisector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Bisector.process_exception(error, method_name, class_name)
process_exception = _Bisector.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.IntRes2d

def Handle_Bisector_Curve_Create() -> "opencascade::handle< Bisector_Curve >":
    return _Bisector.Handle_Bisector_Curve_Create()
Handle_Bisector_Curve_Create = _Bisector.Handle_Bisector_Curve_Create

def Handle_Bisector_Curve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Bisector_Curve >":
    return _Bisector.Handle_Bisector_Curve_DownCast(t)
Handle_Bisector_Curve_DownCast = _Bisector.Handle_Bisector_Curve_DownCast

def Handle_Bisector_Curve_IsNull(t: 'opencascade::handle< Bisector_Curve > const &') -> "bool":
    return _Bisector.Handle_Bisector_Curve_IsNull(t)
Handle_Bisector_Curve_IsNull = _Bisector.Handle_Bisector_Curve_IsNull

def Handle_Bisector_BisecAna_Create() -> "opencascade::handle< Bisector_BisecAna >":
    return _Bisector.Handle_Bisector_BisecAna_Create()
Handle_Bisector_BisecAna_Create = _Bisector.Handle_Bisector_BisecAna_Create

def Handle_Bisector_BisecAna_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Bisector_BisecAna >":
    return _Bisector.Handle_Bisector_BisecAna_DownCast(t)
Handle_Bisector_BisecAna_DownCast = _Bisector.Handle_Bisector_BisecAna_DownCast

def Handle_Bisector_BisecAna_IsNull(t: 'opencascade::handle< Bisector_BisecAna > const &') -> "bool":
    return _Bisector.Handle_Bisector_BisecAna_IsNull(t)
Handle_Bisector_BisecAna_IsNull = _Bisector.Handle_Bisector_BisecAna_IsNull

def Handle_Bisector_BisecCC_Create() -> "opencascade::handle< Bisector_BisecCC >":
    return _Bisector.Handle_Bisector_BisecCC_Create()
Handle_Bisector_BisecCC_Create = _Bisector.Handle_Bisector_BisecCC_Create

def Handle_Bisector_BisecCC_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Bisector_BisecCC >":
    return _Bisector.Handle_Bisector_BisecCC_DownCast(t)
Handle_Bisector_BisecCC_DownCast = _Bisector.Handle_Bisector_BisecCC_DownCast

def Handle_Bisector_BisecCC_IsNull(t: 'opencascade::handle< Bisector_BisecCC > const &') -> "bool":
    return _Bisector.Handle_Bisector_BisecCC_IsNull(t)
Handle_Bisector_BisecCC_IsNull = _Bisector.Handle_Bisector_BisecCC_IsNull

def Handle_Bisector_BisecPC_Create() -> "opencascade::handle< Bisector_BisecPC >":
    return _Bisector.Handle_Bisector_BisecPC_Create()
Handle_Bisector_BisecPC_Create = _Bisector.Handle_Bisector_BisecPC_Create

def Handle_Bisector_BisecPC_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Bisector_BisecPC >":
    return _Bisector.Handle_Bisector_BisecPC_DownCast(t)
Handle_Bisector_BisecPC_DownCast = _Bisector.Handle_Bisector_BisecPC_DownCast

def Handle_Bisector_BisecPC_IsNull(t: 'opencascade::handle< Bisector_BisecPC > const &') -> "bool":
    return _Bisector.Handle_Bisector_BisecPC_IsNull(t)
Handle_Bisector_BisecPC_IsNull = _Bisector.Handle_Bisector_BisecPC_IsNull
class bisector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsConvex(*args) -> "Standard_Boolean":
        """
        :param Cu:
        	:type Cu: Geom2d_Curve
        	:param Sign:
        	:type Sign: float
        	:rtype: bool
        """
        return _Bisector.bisector_IsConvex(*args)

    IsConvex = staticmethod(IsConvex)

    __repr__ = _dumps_object


    def __init__(self):
        _Bisector.bisector_swiginit(self, _Bisector.new_bisector())
    __swig_destroy__ = _Bisector.delete_bisector
bisector_swigregister = _Bisector.bisector_swigregister
bisector_swigregister(bisector)

def bisector_IsConvex(*args) -> "Standard_Boolean":
    """
    :param Cu:
    	:type Cu: Geom2d_Curve
    	:param Sign:
    	:type Sign: float
    	:rtype: bool
    """
    return _Bisector.bisector_IsConvex(*args)

class Bisector_Bisec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _Bisector.Bisector_Bisec_swiginit(self, _Bisector.new_Bisector_Bisec(*args))

    def ChangeValue(self, *args) -> "opencascade::handle< Geom2d_TrimmedCurve > const &":
        """
        * Returns the Curve of <self>.
        	:rtype: opencascade::handle<Geom2d_TrimmedCurve>
        """
        return _Bisector.Bisector_Bisec_ChangeValue(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs the bisecting line between the curves <Cu1> and <Cu2>. <oncurve> is True if the point <P> is common to <Cu1> and <Cu2>.
        	:param Cu1:
        	:type Cu1: Geom2d_Curve
        	:param Cu2:
        	:type Cu2: Geom2d_Curve
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:param Sense:
        	:type Sense: float
        	:param ajointype:
        	:type ajointype: GeomAbs_JoinType
        	:param Tolerance:
        	:type Tolerance: float
        	:param oncurve: default value is Standard_True
        	:type oncurve: bool
        	:rtype: None
        * Performs the bisecting line between the curve <Cu1> and the point <Pnt>. <oncurve> is True if the point <P> is the point <Pnt>.
        	:param Cu:
        	:type Cu: Geom2d_Curve
        	:param Pnt:
        	:type Pnt: Geom2d_Point
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:param Sense:
        	:type Sense: float
        	:param Tolerance:
        	:type Tolerance: float
        	:param oncurve: default value is Standard_True
        	:type oncurve: bool
        	:rtype: None
        * Performs the bisecting line between the curve <Cu> and the point <Pnt>. <oncurve> is True if the point <P> is the point <Pnt>.
        	:param Pnt:
        	:type Pnt: Geom2d_Point
        	:param Cu:
        	:type Cu: Geom2d_Curve
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:param Sense:
        	:type Sense: float
        	:param Tolerance:
        	:type Tolerance: float
        	:param oncurve: default value is Standard_True
        	:type oncurve: bool
        	:rtype: None
        * Performs the bisecting line between the two points <Pnt1> and <Pnt2>.
        	:param Pnt1:
        	:type Pnt1: Geom2d_Point
        	:param Pnt2:
        	:type Pnt2: Geom2d_Point
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:param Sense:
        	:type Sense: float
        	:param Tolerance: default value is 0.0
        	:type Tolerance: float
        	:param oncurve: default value is Standard_True
        	:type oncurve: bool
        	:rtype: None
        """
        return _Bisector.Bisector_Bisec_Perform(self, *args)


    def Value(self, *args) -> "opencascade::handle< Geom2d_TrimmedCurve > const &":
        """
        * Returns the Curve of <self>.
        	:rtype: opencascade::handle<Geom2d_TrimmedCurve>
        """
        return _Bisector.Bisector_Bisec_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_Bisec
Bisector_Bisec.ChangeValue = new_instancemethod(_Bisector.Bisector_Bisec_ChangeValue, None, Bisector_Bisec)
Bisector_Bisec.Perform = new_instancemethod(_Bisector.Bisector_Bisec_Perform, None, Bisector_Bisec)
Bisector_Bisec.Value = new_instancemethod(_Bisector.Bisector_Bisec_Value, None, Bisector_Bisec)
Bisector_Bisec_swigregister = _Bisector.Bisector_Bisec_swigregister
Bisector_Bisec_swigregister(Bisector_Bisec)

class Bisector_Curve(OCC.Core.Geom2d.Geom2d_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IntervalFirst(self, *args) -> "Standard_Real":
        """
        * Returns the first parameter of the current interval.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _Bisector.Bisector_Curve_IntervalFirst(self, *args)


    def IntervalLast(self, *args) -> "Standard_Real":
        """
        * Returns the last parameter of the current interval.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _Bisector.Bisector_Curve_IntervalLast(self, *args)


    def IsExtendAtEnd(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Bisector.Bisector_Curve_IsExtendAtEnd(self, *args)


    def IsExtendAtStart(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Bisector.Bisector_Curve_IsExtendAtStart(self, *args)


    def NbIntervals(self, *args) -> "Standard_Integer":
        """
        * If necessary, breaks the curve in intervals of continuity <C1>. And returns the number of intervals.
        	:rtype: int
        """
        return _Bisector.Bisector_Curve_NbIntervals(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        :param P:
        	:type P: gp_Pnt2d
        	:rtype: float
        """
        return _Bisector.Bisector_Curve_Parameter(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Bisector_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_Curve
Bisector_Curve.IntervalFirst = new_instancemethod(_Bisector.Bisector_Curve_IntervalFirst, None, Bisector_Curve)
Bisector_Curve.IntervalLast = new_instancemethod(_Bisector.Bisector_Curve_IntervalLast, None, Bisector_Curve)
Bisector_Curve.IsExtendAtEnd = new_instancemethod(_Bisector.Bisector_Curve_IsExtendAtEnd, None, Bisector_Curve)
Bisector_Curve.IsExtendAtStart = new_instancemethod(_Bisector.Bisector_Curve_IsExtendAtStart, None, Bisector_Curve)
Bisector_Curve.NbIntervals = new_instancemethod(_Bisector.Bisector_Curve_NbIntervals, None, Bisector_Curve)
Bisector_Curve.Parameter = new_instancemethod(_Bisector.Bisector_Curve_Parameter, None, Bisector_Curve)
Bisector_Curve_swigregister = _Bisector.Bisector_Curve_swigregister
Bisector_Curve_swigregister(Bisector_Curve)

class Bisector_FunctionH(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param C2:
        	:type C2: Geom2d_Curve
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param T1:
        	:type T1: gp_Vec2d
        	:rtype: None
        """
        _Bisector.Bisector_FunctionH_swiginit(self, _Bisector.new_Bisector_FunctionH(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_FunctionH
Bisector_FunctionH_swigregister = _Bisector.Bisector_FunctionH_swigregister
Bisector_FunctionH_swigregister(Bisector_FunctionH)

class Bisector_FunctionInter(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param C:
        	:type C: Geom2d_Curve
        	:param Bis1:
        	:type Bis1: Bisector_Curve
        	:param Bis2:
        	:type Bis2: Bisector_Curve
        	:rtype: None
        """
        _Bisector.Bisector_FunctionInter_swiginit(self, _Bisector.new_Bisector_FunctionInter(*args))

    def Perform(self, *args) -> "void":
        """
        :param C:
        	:type C: Geom2d_Curve
        	:param Bis1:
        	:type Bis1: Bisector_Curve
        	:param Bis2:
        	:type Bis2: Bisector_Curve
        	:rtype: None
        """
        return _Bisector.Bisector_FunctionInter_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_FunctionInter
Bisector_FunctionInter.Perform = new_instancemethod(_Bisector.Bisector_FunctionInter_Perform, None, Bisector_FunctionInter)
Bisector_FunctionInter_swigregister = _Bisector.Bisector_FunctionInter_swigregister
Bisector_FunctionInter_swigregister(Bisector_FunctionInter)

class Bisector_Inter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Intersection between 2 curves. C1 separates the element A and B. C2 separates the elements C et D. If B an C have the same geometry. <ComunElement> Has to be True. It Permits an optimiztion of the computation.
        	:param C1:
        	:type C1: Bisector_Bisec
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param C2:
        	:type C2: Bisector_Bisec
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:param ComunElement:
        	:type ComunElement: bool
        	:rtype: None
        """
        _Bisector.Bisector_Inter_swiginit(self, _Bisector.new_Bisector_Inter(*args))

    def Perform(self, *args) -> "void":
        """
        * Intersection between 2 curves. C1 separates the element A and B. C2 separates the elements C et D. If B an C have the same geometry. <ComunElement> Has to be True. It Permits an optimiztion of the computation.
        	:param C1:
        	:type C1: Bisector_Bisec
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param C2:
        	:type C2: Bisector_Bisec
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:param ComunElement:
        	:type ComunElement: bool
        	:rtype: None
        """
        return _Bisector.Bisector_Inter_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_Inter
Bisector_Inter.Perform = new_instancemethod(_Bisector.Bisector_Inter_Perform, None, Bisector_Inter)
Bisector_Inter_swigregister = _Bisector.Bisector_Inter_swigregister
Bisector_Inter_swigregister(Bisector_Inter)

class Bisector_PointOnBis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Param1:
        	:type Param1: float
        	:param Param2:
        	:type Param2: float
        	:param ParamBis:
        	:type ParamBis: float
        	:param Distance:
        	:type Distance: float
        	:param Point:
        	:type Point: gp_Pnt2d
        	:rtype: None
        """
        _Bisector.Bisector_PointOnBis_swiginit(self, _Bisector.new_Bisector_PointOnBis(*args))

    def Distance(self, *args) -> "Standard_Real":
        """
        :param Distance:
        	:type Distance: float
        	:rtype: None
        :rtype: float
        """
        return _Bisector.Bisector_PointOnBis_Distance(self, *args)


    def Dump(self, *args) -> "void":
        """:rtype: None"""
        return _Bisector.Bisector_PointOnBis_Dump(self, *args)


    def IsInfinite(self, *args) -> "Standard_Boolean":
        """
        :param Infinite:
        	:type Infinite: bool
        	:rtype: None
        :rtype: bool
        """
        return _Bisector.Bisector_PointOnBis_IsInfinite(self, *args)


    def ParamOnBis(self, *args) -> "Standard_Real":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        :rtype: float
        """
        return _Bisector.Bisector_PointOnBis_ParamOnBis(self, *args)


    def ParamOnC1(self, *args) -> "Standard_Real":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        :rtype: float
        """
        return _Bisector.Bisector_PointOnBis_ParamOnC1(self, *args)


    def ParamOnC2(self, *args) -> "Standard_Real":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        :rtype: float
        """
        return _Bisector.Bisector_PointOnBis_ParamOnC2(self, *args)


    def Point(self, *args) -> "gp_Pnt2d":
        """
        :param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        :rtype: gp_Pnt2d
        """
        return _Bisector.Bisector_PointOnBis_Point(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_PointOnBis
Bisector_PointOnBis.Distance = new_instancemethod(_Bisector.Bisector_PointOnBis_Distance, None, Bisector_PointOnBis)
Bisector_PointOnBis.Dump = new_instancemethod(_Bisector.Bisector_PointOnBis_Dump, None, Bisector_PointOnBis)
Bisector_PointOnBis.IsInfinite = new_instancemethod(_Bisector.Bisector_PointOnBis_IsInfinite, None, Bisector_PointOnBis)
Bisector_PointOnBis.ParamOnBis = new_instancemethod(_Bisector.Bisector_PointOnBis_ParamOnBis, None, Bisector_PointOnBis)
Bisector_PointOnBis.ParamOnC1 = new_instancemethod(_Bisector.Bisector_PointOnBis_ParamOnC1, None, Bisector_PointOnBis)
Bisector_PointOnBis.ParamOnC2 = new_instancemethod(_Bisector.Bisector_PointOnBis_ParamOnC2, None, Bisector_PointOnBis)
Bisector_PointOnBis.Point = new_instancemethod(_Bisector.Bisector_PointOnBis_Point, None, Bisector_PointOnBis)
Bisector_PointOnBis_swigregister = _Bisector.Bisector_PointOnBis_swigregister
Bisector_PointOnBis_swigregister(Bisector_PointOnBis)

class Bisector_PolyBis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Append(self, *args) -> "void":
        """
        :param Point:
        	:type Point: Bisector_PointOnBis
        	:rtype: None
        """
        return _Bisector.Bisector_PolyBis_Append(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _Bisector.Bisector_PolyBis_swiginit(self, _Bisector.new_Bisector_PolyBis(*args))

    def First(self, *args) -> "Bisector_PointOnBis const &":
        """:rtype: Bisector_PointOnBis"""
        return _Bisector.Bisector_PolyBis_First(self, *args)


    def Interval(self, *args) -> "Standard_Integer":
        """
        :param U:
        	:type U: float
        	:rtype: int
        """
        return _Bisector.Bisector_PolyBis_Interval(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Bisector.Bisector_PolyBis_IsEmpty(self, *args)


    def Last(self, *args) -> "Bisector_PointOnBis const &":
        """:rtype: Bisector_PointOnBis"""
        return _Bisector.Bisector_PolyBis_Last(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _Bisector.Bisector_PolyBis_Length(self, *args)


    def Transform(self, *args) -> "void":
        """
        :param T:
        	:type T: gp_Trsf2d
        	:rtype: None
        """
        return _Bisector.Bisector_PolyBis_Transform(self, *args)


    def Value(self, *args) -> "Bisector_PointOnBis const &":
        """
        :param Index:
        	:type Index: int
        	:rtype: Bisector_PointOnBis
        """
        return _Bisector.Bisector_PolyBis_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_PolyBis
Bisector_PolyBis.Append = new_instancemethod(_Bisector.Bisector_PolyBis_Append, None, Bisector_PolyBis)
Bisector_PolyBis.First = new_instancemethod(_Bisector.Bisector_PolyBis_First, None, Bisector_PolyBis)
Bisector_PolyBis.Interval = new_instancemethod(_Bisector.Bisector_PolyBis_Interval, None, Bisector_PolyBis)
Bisector_PolyBis.IsEmpty = new_instancemethod(_Bisector.Bisector_PolyBis_IsEmpty, None, Bisector_PolyBis)
Bisector_PolyBis.Last = new_instancemethod(_Bisector.Bisector_PolyBis_Last, None, Bisector_PolyBis)
Bisector_PolyBis.Length = new_instancemethod(_Bisector.Bisector_PolyBis_Length, None, Bisector_PolyBis)
Bisector_PolyBis.Transform = new_instancemethod(_Bisector.Bisector_PolyBis_Transform, None, Bisector_PolyBis)
Bisector_PolyBis.Value = new_instancemethod(_Bisector.Bisector_PolyBis_Value, None, Bisector_PolyBis)
Bisector_PolyBis_swigregister = _Bisector.Bisector_PolyBis_swigregister
Bisector_PolyBis_swigregister(Bisector_PolyBis)

class Bisector_BisecAna(Bisector_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _Bisector.Bisector_BisecAna_swiginit(self, _Bisector.new_Bisector_BisecAna(*args))

    def Dump(self, *args) -> "void":
        """
        :param Deep: default value is 0
        	:type Deep: int
        	:param Offset: default value is 0
        	:type Offset: int
        	:rtype: None
        """
        return _Bisector.Bisector_BisecAna_Dump(self, *args)


    def Geom2dCurve(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _Bisector.Bisector_BisecAna_Geom2dCurve(self, *args)


    def Init(self, *args) -> "void":
        """
        :param bisector:
        	:type bisector: Geom2d_TrimmedCurve
        	:rtype: None
        """
        return _Bisector.Bisector_BisecAna_Init(self, *args)


    def ParameterOfEndPoint(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _Bisector.Bisector_BisecAna_ParameterOfEndPoint(self, *args)


    def ParameterOfStartPoint(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _Bisector.Bisector_BisecAna_ParameterOfStartPoint(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs the bisecting line between the curves <Cu1> and <Cu2>. <oncurve> is True if the point <P> is common to <Cu1> and <Cu2>.
        	:param Cu1:
        	:type Cu1: Geom2d_Curve
        	:param Cu2:
        	:type Cu2: Geom2d_Curve
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:param Sense:
        	:type Sense: float
        	:param jointype:
        	:type jointype: GeomAbs_JoinType
        	:param Tolerance:
        	:type Tolerance: float
        	:param oncurve: default value is Standard_True
        	:type oncurve: bool
        	:rtype: None
        * Performs the bisecting line between the curve <Cu1> and the point <Pnt>. <oncurve> is True if the point <P> is the point <Pnt>.
        	:param Cu:
        	:type Cu: Geom2d_Curve
        	:param Pnt:
        	:type Pnt: Geom2d_Point
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:param Sense:
        	:type Sense: float
        	:param Tolerance:
        	:type Tolerance: float
        	:param oncurve: default value is Standard_True
        	:type oncurve: bool
        	:rtype: None
        * Performs the bisecting line between the curve <Cu> and the point <Pnt>. <oncurve> is True if the point <P> is the point <Pnt>.
        	:param Pnt:
        	:type Pnt: Geom2d_Point
        	:param Cu:
        	:type Cu: Geom2d_Curve
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:param Sense:
        	:type Sense: float
        	:param Tolerance:
        	:type Tolerance: float
        	:param oncurve: default value is Standard_True
        	:type oncurve: bool
        	:rtype: None
        * Performs the bisecting line between the two points <Pnt1> and <Pnt2>.
        	:param Pnt1:
        	:type Pnt1: Geom2d_Point
        	:param Pnt2:
        	:type Pnt2: Geom2d_Point
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:param Sense:
        	:type Sense: float
        	:param Tolerance: default value is 0.0
        	:type Tolerance: float
        	:param oncurve: default value is Standard_True
        	:type oncurve: bool
        	:rtype: None
        """
        return _Bisector.Bisector_BisecAna_Perform(self, *args)


    def SetTrim(self, *args) -> "void":
        """
        * Trim <self> by a domain defined by the curve <Cu>. This domain is the set of the points which are nearest from <Cu> than the extremitis of <Cu>.
        	:param Cu:
        	:type Cu: Geom2d_Curve
        	:rtype: None
        * Trim <self> by a domain defined by uf and ul
        	:param uf:
        	:type uf: float
        	:param ul:
        	:type ul: float
        	:rtype: None
        """
        return _Bisector.Bisector_BisecAna_SetTrim(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Bisector_BisecAna_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_BisecAna
Bisector_BisecAna.Dump = new_instancemethod(_Bisector.Bisector_BisecAna_Dump, None, Bisector_BisecAna)
Bisector_BisecAna.Geom2dCurve = new_instancemethod(_Bisector.Bisector_BisecAna_Geom2dCurve, None, Bisector_BisecAna)
Bisector_BisecAna.Init = new_instancemethod(_Bisector.Bisector_BisecAna_Init, None, Bisector_BisecAna)
Bisector_BisecAna.ParameterOfEndPoint = new_instancemethod(_Bisector.Bisector_BisecAna_ParameterOfEndPoint, None, Bisector_BisecAna)
Bisector_BisecAna.ParameterOfStartPoint = new_instancemethod(_Bisector.Bisector_BisecAna_ParameterOfStartPoint, None, Bisector_BisecAna)
Bisector_BisecAna.Perform = new_instancemethod(_Bisector.Bisector_BisecAna_Perform, None, Bisector_BisecAna)
Bisector_BisecAna.SetTrim = new_instancemethod(_Bisector.Bisector_BisecAna_SetTrim, None, Bisector_BisecAna)
Bisector_BisecAna_swigregister = _Bisector.Bisector_BisecAna_swigregister
Bisector_BisecAna_swigregister(Bisector_BisecAna)

class Bisector_BisecCC(Bisector_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Constructs the bisector between the curves <Cu1> and <Cu2>. //! <Side1> (resp <Side2>) = 1 if the bisector curve is on the left of <Cu1> (resp <Cu2>) else <Side1> (resp <Side2>) = -1. //! the Bisector is trimmed by the Point <Origin>. <DistMax> is used to trim the bisector.The distance between the points of the bisector and <Cu> is smaller than <DistMax>.
        	:param Cu1:
        	:type Cu1: Geom2d_Curve
        	:param Cu2:
        	:type Cu2: Geom2d_Curve
        	:param Side1:
        	:type Side1: float
        	:param Side2:
        	:type Side2: float
        	:param Origin:
        	:type Origin: gp_Pnt2d
        	:param DistMax: default value is 500
        	:type DistMax: float
        	:rtype: None
        """
        _Bisector.Bisector_BisecCC_swiginit(self, _Bisector.new_Bisector_BisecCC(*args))

    def ChangeGuide(self, *args) -> "opencascade::handle< Bisector_BisecCC >":
        """
        * The parameter on <self> is linked to the parameter on the first curve. This method creates the same bisector where the curves are inversed.
        	:rtype: opencascade::handle<Bisector_BisecCC>
        """
        return _Bisector.Bisector_BisecCC_ChangeGuide(self, *args)


    def Curve(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        :param IndCurve:
        	:type IndCurve: int
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _Bisector.Bisector_BisecCC_Curve(self, *args)


    def Dump(self, *args) -> "void":
        """
        :param Deep: default value is 0
        	:type Deep: int
        	:param Offset: default value is 0
        	:type Offset: int
        	:rtype: None
        """
        return _Bisector.Bisector_BisecCC_Dump(self, *args)


    def IntervalContinuity(self, *args) -> "GeomAbs_Shape":
        """:rtype: GeomAbs_Shape"""
        return _Bisector.Bisector_BisecCC_IntervalContinuity(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Bisector.Bisector_BisecCC_IsEmpty(self, *args)


    def LinkBisCurve(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on the curve1 of the projection of the point of parameter U on <self>.
        	:param U:
        	:type U: float
        	:rtype: float
        """
        return _Bisector.Bisector_BisecCC_LinkBisCurve(self, *args)


    def LinkCurveBis(self, *args) -> "Standard_Real":
        """
        * Returns the reciproque of LinkBisCurve.
        	:param U:
        	:type U: float
        	:rtype: float
        """
        return _Bisector.Bisector_BisecCC_LinkCurveBis(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Computes the bisector between the curves <Cu1> and <Cu2>. //! <Side1> (resp <Side2>) = 1 if the bisector curve is on the left of <Cu1> (resp <Cu2>) else <Side1> (resp <Side2>) = -1. //! the Bisector is trimmed by the Point <Origin>. //! <DistMax> is used to trim the bisector.The distance between the points of the bisector and <Cu> is smaller than <DistMax>.
        	:param Cu1:
        	:type Cu1: Geom2d_Curve
        	:param Cu2:
        	:type Cu2: Geom2d_Curve
        	:param Side1:
        	:type Side1: float
        	:param Side2:
        	:type Side2: float
        	:param Origin:
        	:type Origin: gp_Pnt2d
        	:param DistMax: default value is 500
        	:type DistMax: float
        	:rtype: None
        """
        return _Bisector.Bisector_BisecCC_Perform(self, *args)


    def Polygon(self, *args) -> "Bisector_PolyBis const &":
        """:rtype: Bisector_PolyBis"""
        return _Bisector.Bisector_BisecCC_Polygon(self, *args)


    def ValueAndDist(self, *args) -> "gp_Pnt2d":
        """
        * Returns the point of parameter U. Computes the distance between the current point and the two curves I separate. Computes the parameters on each curve corresponding of the projection of the current point.
        	:param U:
        	:type U: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Distance:
        	:type Distance: float
        	:rtype: gp_Pnt2d
        """
        return _Bisector.Bisector_BisecCC_ValueAndDist(self, *args)


    def ValueByInt(self, *args) -> "gp_Pnt2d":
        """
        * Returns the point of parameter U. Computes the distance between the current point and the two curves I separate. Computes the parameters on each curve corresponding of the projection of the current point.
        	:param U:
        	:type U: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Distance:
        	:type Distance: float
        	:rtype: gp_Pnt2d
        """
        return _Bisector.Bisector_BisecCC_ValueByInt(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Bisector_BisecCC_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_BisecCC
Bisector_BisecCC.ChangeGuide = new_instancemethod(_Bisector.Bisector_BisecCC_ChangeGuide, None, Bisector_BisecCC)
Bisector_BisecCC.Curve = new_instancemethod(_Bisector.Bisector_BisecCC_Curve, None, Bisector_BisecCC)
Bisector_BisecCC.Dump = new_instancemethod(_Bisector.Bisector_BisecCC_Dump, None, Bisector_BisecCC)
Bisector_BisecCC.IntervalContinuity = new_instancemethod(_Bisector.Bisector_BisecCC_IntervalContinuity, None, Bisector_BisecCC)
Bisector_BisecCC.IsEmpty = new_instancemethod(_Bisector.Bisector_BisecCC_IsEmpty, None, Bisector_BisecCC)
Bisector_BisecCC.LinkBisCurve = new_instancemethod(_Bisector.Bisector_BisecCC_LinkBisCurve, None, Bisector_BisecCC)
Bisector_BisecCC.LinkCurveBis = new_instancemethod(_Bisector.Bisector_BisecCC_LinkCurveBis, None, Bisector_BisecCC)
Bisector_BisecCC.Perform = new_instancemethod(_Bisector.Bisector_BisecCC_Perform, None, Bisector_BisecCC)
Bisector_BisecCC.Polygon = new_instancemethod(_Bisector.Bisector_BisecCC_Polygon, None, Bisector_BisecCC)
Bisector_BisecCC.ValueAndDist = new_instancemethod(_Bisector.Bisector_BisecCC_ValueAndDist, None, Bisector_BisecCC)
Bisector_BisecCC.ValueByInt = new_instancemethod(_Bisector.Bisector_BisecCC_ValueByInt, None, Bisector_BisecCC)
Bisector_BisecCC_swigregister = _Bisector.Bisector_BisecCC_swigregister
Bisector_BisecCC_swigregister(Bisector_BisecCC)

class Bisector_BisecPC(Bisector_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        * Constructs the bisector between the point <P> and the curve <Cu>. <Side> = 1. if the bisector curve is on the Left of <Cu> else <Side> = -1. <DistMax> is used to trim the bisector.The distance between the points of the bisector and <Cu> is smaller than <DistMax>.
        	:param Cu:
        	:type Cu: Geom2d_Curve
        	:param P:
        	:type P: gp_Pnt2d
        	:param Side:
        	:type Side: float
        	:param DistMax: default value is 500
        	:type DistMax: float
        	:rtype: None
        * Constructs the bisector between the point <P> and the curve <Cu> Trimmed by <UMin> and <UMax> <Side> = 1. if the bisector curve is on the Left of <Cu> else <Side> = -1. Warning: the bisector is supposed all over defined between <UMin> and <UMax>.
        	:param Cu:
        	:type Cu: Geom2d_Curve
        	:param P:
        	:type P: gp_Pnt2d
        	:param Side:
        	:type Side: float
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:rtype: None
        """
        _Bisector.Bisector_BisecPC_swiginit(self, _Bisector.new_Bisector_BisecPC(*args))

    def Distance(self, *args) -> "Standard_Real":
        """
        * Returns the distance between the point of parameter U on <self> and my point or my curve.
        	:param U:
        	:type U: float
        	:rtype: float
        """
        return _Bisector.Bisector_BisecPC_Distance(self, *args)


    def Dump(self, *args) -> "void":
        """
        :param Deep: default value is 0
        	:type Deep: int
        	:param Offset: default value is 0
        	:type Offset: int
        	:rtype: None
        """
        return _Bisector.Bisector_BisecPC_Dump(self, *args)


    def IntervalContinuity(self, *args) -> "GeomAbs_Shape":
        """:rtype: GeomAbs_Shape"""
        return _Bisector.Bisector_BisecPC_IntervalContinuity(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * Returns <True> if the bisector is empty.
        	:rtype: bool
        """
        return _Bisector.Bisector_BisecPC_IsEmpty(self, *args)


    def LinkBisCurve(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on the curve1 of the projection of the point of parameter U on <self>.
        	:param U:
        	:type U: float
        	:rtype: float
        """
        return _Bisector.Bisector_BisecPC_LinkBisCurve(self, *args)


    def LinkCurveBis(self, *args) -> "Standard_Real":
        """
        * Returns the reciproque of LinkBisCurve.
        	:param U:
        	:type U: float
        	:rtype: float
        """
        return _Bisector.Bisector_BisecPC_LinkCurveBis(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Construct the bisector between the point <P> and the curve <Cu>. <Side> = 1. if the bisector curve is on the Left of <Cu> else <Side> = -1. <DistMax> is used to trim the bisector.The distance between the points of the bisector and <Cu> is smaller than <DistMax>.
        	:param Cu:
        	:type Cu: Geom2d_Curve
        	:param P:
        	:type P: gp_Pnt2d
        	:param Side:
        	:type Side: float
        	:param DistMax: default value is 500
        	:type DistMax: float
        	:rtype: None
        """
        return _Bisector.Bisector_BisecPC_Perform(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Bisector_BisecPC_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_BisecPC
Bisector_BisecPC.Distance = new_instancemethod(_Bisector.Bisector_BisecPC_Distance, None, Bisector_BisecPC)
Bisector_BisecPC.Dump = new_instancemethod(_Bisector.Bisector_BisecPC_Dump, None, Bisector_BisecPC)
Bisector_BisecPC.IntervalContinuity = new_instancemethod(_Bisector.Bisector_BisecPC_IntervalContinuity, None, Bisector_BisecPC)
Bisector_BisecPC.IsEmpty = new_instancemethod(_Bisector.Bisector_BisecPC_IsEmpty, None, Bisector_BisecPC)
Bisector_BisecPC.LinkBisCurve = new_instancemethod(_Bisector.Bisector_BisecPC_LinkBisCurve, None, Bisector_BisecPC)
Bisector_BisecPC.LinkCurveBis = new_instancemethod(_Bisector.Bisector_BisecPC_LinkCurveBis, None, Bisector_BisecPC)
Bisector_BisecPC.Perform = new_instancemethod(_Bisector.Bisector_BisecPC_Perform, None, Bisector_BisecPC)
Bisector_BisecPC_swigregister = _Bisector.Bisector_BisecPC_swigregister
Bisector_BisecPC_swigregister(Bisector_BisecPC)



