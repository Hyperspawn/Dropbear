# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BlendFunc module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_blendfunc.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BlendFunc.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BlendFunc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BlendFunc')
    _BlendFunc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BlendFunc', [dirname(__file__)])
        except ImportError:
            import _BlendFunc
            return _BlendFunc
        try:
            _mod = imp.load_module('_BlendFunc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BlendFunc = swig_import_helper()
    del swig_import_helper
else:
    import _BlendFunc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BlendFunc.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BlendFunc.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BlendFunc.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BlendFunc.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BlendFunc.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BlendFunc.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BlendFunc.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BlendFunc.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BlendFunc.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BlendFunc.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BlendFunc.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BlendFunc.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BlendFunc.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BlendFunc.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BlendFunc.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BlendFunc.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BlendFunc.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BlendFunc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BlendFunc.process_exception(error, method_name, class_name)
process_exception = _BlendFunc.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.Convert
import OCC.Core.Blend
import OCC.Core.Law
BlendFunc_Rational = _BlendFunc.BlendFunc_Rational
BlendFunc_QuasiAngular = _BlendFunc.BlendFunc_QuasiAngular
BlendFunc_Polynomial = _BlendFunc.BlendFunc_Polynomial
BlendFunc_Linear = _BlendFunc.BlendFunc_Linear
class blendfunc(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ComputeDNormal(*args) -> "Standard_Boolean":
        """
        :param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param p2d:
        	:type p2d: gp_Pnt2d
        	:param Normal:
        	:type Normal: gp_Vec
        	:param DNu:
        	:type DNu: gp_Vec
        	:param DNv:
        	:type DNv: gp_Vec
        	:rtype: bool
        """
        return _BlendFunc.blendfunc_ComputeDNormal(*args)

    ComputeDNormal = staticmethod(ComputeDNormal)

    def ComputeNormal(*args) -> "Standard_Boolean":
        """
        :param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param p2d:
        	:type p2d: gp_Pnt2d
        	:param Normal:
        	:type Normal: gp_Vec
        	:rtype: bool
        """
        return _BlendFunc.blendfunc_ComputeNormal(*args)

    ComputeNormal = staticmethod(ComputeNormal)

    def GetMinimalWeights(*args) -> "void":
        """
        :param SectShape:
        	:type SectShape: BlendFunc_SectionShape
        	:param TConv:
        	:type TConv: Convert_ParameterisationType
        	:param AngleMin:
        	:type AngleMin: float
        	:param AngleMax:
        	:type AngleMax: float
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: void
        """
        return _BlendFunc.blendfunc_GetMinimalWeights(*args)

    GetMinimalWeights = staticmethod(GetMinimalWeights)

    def GetShape(*args) -> "Standard_Integer &, Standard_Integer &, Standard_Integer &":
        """
        :param SectShape:
        	:type SectShape: BlendFunc_SectionShape
        	:param MaxAng:
        	:type MaxAng: float
        	:param NbPoles:
        	:type NbPoles: int
        	:param NbKnots:
        	:type NbKnots: int
        	:param Degree:
        	:type Degree: int
        	:param TypeConv:
        	:type TypeConv: Convert_ParameterisationType
        	:rtype: void
        """
        return _BlendFunc.blendfunc_GetShape(*args)

    GetShape = staticmethod(GetShape)

    def NextShape(*args) -> "GeomAbs_Shape":
        """
        * Used to obtain the next level of continuity.
        	:param S:
        	:type S: GeomAbs_Shape
        	:rtype: GeomAbs_Shape
        """
        return _BlendFunc.blendfunc_NextShape(*args)

    NextShape = staticmethod(NextShape)

    __repr__ = _dumps_object


    def __init__(self):
        _BlendFunc.blendfunc_swiginit(self, _BlendFunc.new_blendfunc())
    __swig_destroy__ = _BlendFunc.delete_blendfunc
blendfunc_swigregister = _BlendFunc.blendfunc_swigregister
blendfunc_swigregister(blendfunc)

def blendfunc_ComputeDNormal(*args) -> "Standard_Boolean":
    """
    :param Surf:
    	:type Surf: Adaptor3d_HSurface
    	:param p2d:
    	:type p2d: gp_Pnt2d
    	:param Normal:
    	:type Normal: gp_Vec
    	:param DNu:
    	:type DNu: gp_Vec
    	:param DNv:
    	:type DNv: gp_Vec
    	:rtype: bool
    """
    return _BlendFunc.blendfunc_ComputeDNormal(*args)

def blendfunc_ComputeNormal(*args) -> "Standard_Boolean":
    """
    :param Surf:
    	:type Surf: Adaptor3d_HSurface
    	:param p2d:
    	:type p2d: gp_Pnt2d
    	:param Normal:
    	:type Normal: gp_Vec
    	:rtype: bool
    """
    return _BlendFunc.blendfunc_ComputeNormal(*args)

def blendfunc_GetMinimalWeights(*args) -> "void":
    """
    :param SectShape:
    	:type SectShape: BlendFunc_SectionShape
    	:param TConv:
    	:type TConv: Convert_ParameterisationType
    	:param AngleMin:
    	:type AngleMin: float
    	:param AngleMax:
    	:type AngleMax: float
    	:param Weigths:
    	:type Weigths: TColStd_Array1OfReal
    	:rtype: void
    """
    return _BlendFunc.blendfunc_GetMinimalWeights(*args)

def blendfunc_GetShape(*args) -> "Standard_Integer &, Standard_Integer &, Standard_Integer &":
    """
    :param SectShape:
    	:type SectShape: BlendFunc_SectionShape
    	:param MaxAng:
    	:type MaxAng: float
    	:param NbPoles:
    	:type NbPoles: int
    	:param NbKnots:
    	:type NbKnots: int
    	:param Degree:
    	:type Degree: int
    	:param TypeConv:
    	:type TypeConv: Convert_ParameterisationType
    	:rtype: void
    """
    return _BlendFunc.blendfunc_GetShape(*args)

def blendfunc_NextShape(*args) -> "GeomAbs_Shape":
    """
    * Used to obtain the next level of continuity.
    	:param S:
    	:type S: GeomAbs_Shape
    	:rtype: GeomAbs_Shape
    """
    return _BlendFunc.blendfunc_NextShape(*args)

class BlendFunc_CSCircular(OCC.Core.Blend.Blend_CSFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a function for a circular blending between a curve <C> and a surface <S>. The direction of the planes are given by <CGuide>. The position of the plane is determined on the curve <C>. <L> defines the change of parameter between <C> and <CGuide>. So, the planes are defined as described below : t is the current parameter on the guide line. Pguide = C(L(t)); Nguide = CGuide'(t)/||CGuide'(t)||
        	:param S:
        	:type S: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:param CGuide:
        	:type CGuide: Adaptor3d_HCurve
        	:param L:
        	:type L: Law_Function
        	:rtype: None
        """
        _BlendFunc.BlendFunc_CSCircular_swiginit(self, _BlendFunc.new_BlendFunc_CSCircular(*args))

    def GetSection(self, *args) -> "Standard_Boolean":
        """
        :param Param:
        	:type Param: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param W:
        	:type W: float
        	:param tabP:
        	:type tabP: TColgp_Array1OfPnt
        	:param tabV:
        	:type tabV: TColgp_Array1OfVec
        	:rtype: bool
        """
        return _BlendFunc.BlendFunc_CSCircular_GetSection(self, *args)


    def GetTolerance(self, *args) -> "void":
        """
        :param Tolerance:
        	:type Tolerance: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.
        	:param BoundTol:
        	:type BoundTol: float
        	:param SurfTol:
        	:type SurfTol: float
        	:param AngleTol:
        	:type AngleTol: float
        	:param Tol3d:
        	:type Tol3d: math_Vector
        	:param Tol1D:
        	:type Tol1D: math_Vector
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_CSCircular_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param W:
        	:type W: float
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param C:
        	:type C: gp_Circ
        	:rtype: None
        * Used for the first and last section The method returns Standard_True if the derivatives are computed, otherwise it returns Standard_False.
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param D2Poles:
        	:type D2Poles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param D2Poles2d:
        	:type D2Poles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:param D2Weigths:
        	:type D2Weigths: TColStd_Array1OfReal
        	:rtype: bool
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:rtype: bool
        :param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_CSCircular_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        :param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        :param Radius:
        	:type Radius: float
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        * Sets the type of section generation for the approximations.
        	:param TypeSection:
        	:type TypeSection: BlendFunc_SectionShape
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_CSCircular_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_CSCircular
BlendFunc_CSCircular.GetSection = new_instancemethod(_BlendFunc.BlendFunc_CSCircular_GetSection, None, BlendFunc_CSCircular)
BlendFunc_CSCircular.GetTolerance = new_instancemethod(_BlendFunc.BlendFunc_CSCircular_GetTolerance, None, BlendFunc_CSCircular)
BlendFunc_CSCircular.Section = new_instancemethod(_BlendFunc.BlendFunc_CSCircular_Section, None, BlendFunc_CSCircular)
BlendFunc_CSCircular.Set = new_instancemethod(_BlendFunc.BlendFunc_CSCircular_Set, None, BlendFunc_CSCircular)
BlendFunc_CSCircular_swigregister = _BlendFunc.BlendFunc_CSCircular_swigregister
BlendFunc_CSCircular_swigregister(BlendFunc_CSCircular)

class BlendFunc_CSConstRad(OCC.Core.Blend.Blend_CSFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:param CGuide:
        	:type CGuide: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_CSConstRad_swiginit(self, _BlendFunc.new_BlendFunc_CSConstRad(*args))

    def GetSection(self, *args) -> "Standard_Boolean":
        """
        :param Param:
        	:type Param: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param W:
        	:type W: float
        	:param tabP:
        	:type tabP: TColgp_Array1OfPnt
        	:param tabV:
        	:type tabV: TColgp_Array1OfVec
        	:rtype: bool
        """
        return _BlendFunc.BlendFunc_CSConstRad_GetSection(self, *args)


    def GetTolerance(self, *args) -> "void":
        """
        :param Tolerance:
        	:type Tolerance: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.
        	:param BoundTol:
        	:type BoundTol: float
        	:param SurfTol:
        	:type SurfTol: float
        	:param AngleTol:
        	:type AngleTol: float
        	:param Tol3d:
        	:type Tol3d: math_Vector
        	:param Tol1D:
        	:type Tol1D: math_Vector
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_CSConstRad_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param W:
        	:type W: float
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param C:
        	:type C: gp_Circ
        	:rtype: None
        * Used for the first and last section The method returns Standard_True if the derivatives are computed, otherwise it returns Standard_False.
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param D2Poles:
        	:type D2Poles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param D2Poles2d:
        	:type D2Poles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:param D2Weigths:
        	:type D2Weigths: TColStd_Array1OfReal
        	:rtype: bool
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:rtype: bool
        :param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_CSConstRad_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        :param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        :param Radius:
        	:type Radius: float
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        * Sets the type of section generation for the approximations.
        	:param TypeSection:
        	:type TypeSection: BlendFunc_SectionShape
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_CSConstRad_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_CSConstRad
BlendFunc_CSConstRad.GetSection = new_instancemethod(_BlendFunc.BlendFunc_CSConstRad_GetSection, None, BlendFunc_CSConstRad)
BlendFunc_CSConstRad.GetTolerance = new_instancemethod(_BlendFunc.BlendFunc_CSConstRad_GetTolerance, None, BlendFunc_CSConstRad)
BlendFunc_CSConstRad.Section = new_instancemethod(_BlendFunc.BlendFunc_CSConstRad_Section, None, BlendFunc_CSConstRad)
BlendFunc_CSConstRad.Set = new_instancemethod(_BlendFunc.BlendFunc_CSConstRad_Set, None, BlendFunc_CSConstRad)
BlendFunc_CSConstRad_swigregister = _BlendFunc.BlendFunc_CSConstRad_swigregister
BlendFunc_CSConstRad_swigregister(BlendFunc_CSConstRad)

class BlendFunc_ChAsym(OCC.Core.Blend.Blend_Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_ChAsym_swiginit(self, _BlendFunc.new_BlendFunc_ChAsym(*args))

    def ComputeValues(self, *args) -> "Standard_Boolean":
        """
        * computes the values <F> of the derivatives for the variable <X> between DegF and DegL. Returns True if the computation was done successfully, False otherwise.
        	:param X:
        	:type X: math_Vector
        	:param DegF:
        	:type DegF: int
        	:param DegL:
        	:type DegL: int
        	:rtype: bool
        """
        return _BlendFunc.BlendFunc_ChAsym_ComputeValues(self, *args)


    def GetTolerance(self, *args) -> "void":
        """
        :param Tolerance:
        	:type Tolerance: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.
        	:param BoundTol:
        	:type BoundTol: float
        	:param SurfTol:
        	:type SurfTol: float
        	:param AngleTol:
        	:type AngleTol: float
        	:param Tol3d:
        	:type Tol3d: math_Vector
        	:param Tol1D:
        	:type Tol1D: math_Vector
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_ChAsym_GetTolerance(self, *args)


    def Section(self, *args) -> "Standard_Boolean":
        """
        * Utile pour une visu rapide et approximative de la surface.
        	:param Param:
        	:type Param: float
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param C:
        	:type C: gp_Lin
        	:rtype: None
        :param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: None
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:rtype: bool
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param D2Poles:
        	:type D2Poles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param D2Poles2d:
        	:type D2Poles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:param D2Weigths:
        	:type D2Weigths: TColStd_Array1OfReal
        	:rtype: bool
        """
        return _BlendFunc.BlendFunc_ChAsym_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        :param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        * Sets the distances and the angle.
        	:param Dist1:
        	:type Dist1: float
        	:param Angle:
        	:type Angle: float
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_ChAsym_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ChAsym
BlendFunc_ChAsym.ComputeValues = new_instancemethod(_BlendFunc.BlendFunc_ChAsym_ComputeValues, None, BlendFunc_ChAsym)
BlendFunc_ChAsym.GetTolerance = new_instancemethod(_BlendFunc.BlendFunc_ChAsym_GetTolerance, None, BlendFunc_ChAsym)
BlendFunc_ChAsym.Section = new_instancemethod(_BlendFunc.BlendFunc_ChAsym_Section, None, BlendFunc_ChAsym)
BlendFunc_ChAsym.Set = new_instancemethod(_BlendFunc.BlendFunc_ChAsym_Set, None, BlendFunc_ChAsym)
BlendFunc_ChAsym_swigregister = _BlendFunc.BlendFunc_ChAsym_swigregister
BlendFunc_ChAsym_swigregister(BlendFunc_ChAsym)

class BlendFunc_ChAsymInv(OCC.Core.Blend.Blend_FuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_ChAsymInv_swiginit(self, _BlendFunc.new_BlendFunc_ChAsymInv(*args))

    def ComputeValues(self, *args) -> "Standard_Boolean":
        """
        * computes the values <F> of the derivatives for the variable <X> between DegF and DegL. Returns True if the computation was done successfully, False otherwise.
        	:param X:
        	:type X: math_Vector
        	:param DegF:
        	:type DegF: int
        	:param DegL:
        	:type DegL: int
        	:rtype: bool
        """
        return _BlendFunc.BlendFunc_ChAsymInv_ComputeValues(self, *args)


    def Set(self, *args) -> "void":
        """
        :param OnFirst:
        	:type OnFirst: bool
        	:param COnSurf:
        	:type COnSurf: Adaptor2d_HCurve2d
        	:rtype: None
        :param Dist1:
        	:type Dist1: float
        	:param Angle:
        	:type Angle: float
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_ChAsymInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ChAsymInv
BlendFunc_ChAsymInv.ComputeValues = new_instancemethod(_BlendFunc.BlendFunc_ChAsymInv_ComputeValues, None, BlendFunc_ChAsymInv)
BlendFunc_ChAsymInv.Set = new_instancemethod(_BlendFunc.BlendFunc_ChAsymInv_Set, None, BlendFunc_ChAsymInv)
BlendFunc_ChAsymInv_swigregister = _BlendFunc.BlendFunc_ChAsymInv_swigregister
BlendFunc_ChAsymInv_swigregister(BlendFunc_ChAsymInv)

class BlendFunc_ConstRad(OCC.Core.Blend.Blend_Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AxeRot(self, *args) -> "gp_Ax1":
        """
        :param Prm:
        	:type Prm: float
        	:rtype: gp_Ax1
        """
        return _BlendFunc.BlendFunc_ConstRad_AxeRot(self, *args)


    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_ConstRad_swiginit(self, _BlendFunc.new_BlendFunc_ConstRad(*args))

    def GetTolerance(self, *args) -> "void":
        """
        :param Tolerance:
        	:type Tolerance: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.
        	:param BoundTol:
        	:type BoundTol: float
        	:param SurfTol:
        	:type SurfTol: float
        	:param AngleTol:
        	:type AngleTol: float
        	:param Tol3d:
        	:type Tol3d: math_Vector
        	:param Tol1D:
        	:type Tol1D: math_Vector
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_ConstRad_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        * Utile pour une visu rapide et approximative de la surface.
        	:param Param:
        	:type Param: float
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param C:
        	:type C: gp_Circ
        	:rtype: None
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param D2Poles:
        	:type D2Poles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param D2Poles2d:
        	:type D2Poles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:param D2Weigths:
        	:type D2Weigths: TColStd_Array1OfReal
        	:rtype: bool
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:rtype: bool
        :param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_ConstRad_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        :param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        * Inits the value of radius, and the 'quadrant'.
        	:param Radius:
        	:type Radius: float
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        * Sets the type of section generation for the approximations.
        	:param TypeSection:
        	:type TypeSection: BlendFunc_SectionShape
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_ConstRad_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstRad
BlendFunc_ConstRad.AxeRot = new_instancemethod(_BlendFunc.BlendFunc_ConstRad_AxeRot, None, BlendFunc_ConstRad)
BlendFunc_ConstRad.GetTolerance = new_instancemethod(_BlendFunc.BlendFunc_ConstRad_GetTolerance, None, BlendFunc_ConstRad)
BlendFunc_ConstRad.Section = new_instancemethod(_BlendFunc.BlendFunc_ConstRad_Section, None, BlendFunc_ConstRad)
BlendFunc_ConstRad.Set = new_instancemethod(_BlendFunc.BlendFunc_ConstRad_Set, None, BlendFunc_ConstRad)
BlendFunc_ConstRad_swigregister = _BlendFunc.BlendFunc_ConstRad_swigregister
BlendFunc_ConstRad_swigregister(BlendFunc_ConstRad)

class BlendFunc_ConstRadInv(OCC.Core.Blend.Blend_FuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_ConstRadInv_swiginit(self, _BlendFunc.new_BlendFunc_ConstRadInv(*args))

    def Set(self, *args) -> "void":
        """
        :param OnFirst:
        	:type OnFirst: bool
        	:param COnSurf:
        	:type COnSurf: Adaptor2d_HCurve2d
        	:rtype: None
        :param R:
        	:type R: float
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_ConstRadInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstRadInv
BlendFunc_ConstRadInv.Set = new_instancemethod(_BlendFunc.BlendFunc_ConstRadInv_Set, None, BlendFunc_ConstRadInv)
BlendFunc_ConstRadInv_swigregister = _BlendFunc.BlendFunc_ConstRadInv_swigregister
BlendFunc_ConstRadInv_swigregister(BlendFunc_ConstRadInv)

class BlendFunc_Corde(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:param CGuide:
        	:type CGuide: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_Corde_swiginit(self, _BlendFunc.new_BlendFunc_Corde(*args))

    def DerFguide(self, *args) -> "void":
        """
        * Derived of the function compared to the parameter of the guideline
        	:param Sol:
        	:type Sol: math_Vector
        	:param DerF:
        	:type DerF: gp_Vec2d
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_Corde_DerFguide(self, *args)


    def Derivatives(self, *args) -> "Standard_Boolean":
        """
        * returns the values <D> of the derivatives for the variable <X>. Returns True if the computation was done successfully, False otherwise.
        	:param X:
        	:type X: math_Vector
        	:param D:
        	:type D: math_Matrix
        	:rtype: bool
        """
        return _BlendFunc.BlendFunc_Corde_Derivatives(self, *args)


    def IsSolution(self, *args) -> "Standard_Boolean":
        """
        * Returns False if Sol is not solution else returns True and updates the fields tgs and tg2d
        	:param Sol:
        	:type Sol: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: bool
        """
        return _BlendFunc.BlendFunc_Corde_IsSolution(self, *args)


    def IsTangencyPoint(self, *args) -> "Standard_Boolean":
        """
        * Returns True when it is not possible to compute the tangent vectors at PointOnS.
        	:rtype: bool
        """
        return _BlendFunc.BlendFunc_Corde_IsTangencyPoint(self, *args)


    def NPlan(self, *args) -> "gp_Vec const":
        """
        * returns the normal to CGuide at Ptgui.
        	:rtype: gp_Vec
        """
        return _BlendFunc.BlendFunc_Corde_NPlan(self, *args)


    def PointOnGuide(self, *args) -> "gp_Pnt const":
        """
        * returns the point of parameter <Param> on CGuide
        	:rtype: gp_Pnt
        """
        return _BlendFunc.BlendFunc_Corde_PointOnGuide(self, *args)


    def PointOnS(self, *args) -> "gp_Pnt const":
        """:rtype: gp_Pnt"""
        return _BlendFunc.BlendFunc_Corde_PointOnS(self, *args)


    def SetDist(self, *args) -> "void":
        """
        :param Dist:
        	:type Dist: float
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_Corde_SetDist(self, *args)


    def SetParam(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_Corde_SetParam(self, *args)


    def Tangent2dOnS(self, *args) -> "gp_Vec2d const":
        """
        * Returns the tangent vector at PointOnS, in the parametric space of the first surface.
        	:rtype: gp_Vec2d
        """
        return _BlendFunc.BlendFunc_Corde_Tangent2dOnS(self, *args)


    def TangentOnS(self, *args) -> "gp_Vec const":
        """
        * Returns the tangent vector at PointOnS, in 3d space.
        	:rtype: gp_Vec
        """
        return _BlendFunc.BlendFunc_Corde_TangentOnS(self, *args)


    def Value(self, *args) -> "Standard_Boolean":
        """
        * computes the values <F> of the Function for the variable <X>. Returns True if the computation was done successfully, False otherwise.
        	:param X:
        	:type X: math_Vector
        	:param F:
        	:type F: math_Vector
        	:rtype: bool
        """
        return _BlendFunc.BlendFunc_Corde_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Corde
BlendFunc_Corde.DerFguide = new_instancemethod(_BlendFunc.BlendFunc_Corde_DerFguide, None, BlendFunc_Corde)
BlendFunc_Corde.Derivatives = new_instancemethod(_BlendFunc.BlendFunc_Corde_Derivatives, None, BlendFunc_Corde)
BlendFunc_Corde.IsSolution = new_instancemethod(_BlendFunc.BlendFunc_Corde_IsSolution, None, BlendFunc_Corde)
BlendFunc_Corde.IsTangencyPoint = new_instancemethod(_BlendFunc.BlendFunc_Corde_IsTangencyPoint, None, BlendFunc_Corde)
BlendFunc_Corde.NPlan = new_instancemethod(_BlendFunc.BlendFunc_Corde_NPlan, None, BlendFunc_Corde)
BlendFunc_Corde.PointOnGuide = new_instancemethod(_BlendFunc.BlendFunc_Corde_PointOnGuide, None, BlendFunc_Corde)
BlendFunc_Corde.PointOnS = new_instancemethod(_BlendFunc.BlendFunc_Corde_PointOnS, None, BlendFunc_Corde)
BlendFunc_Corde.SetDist = new_instancemethod(_BlendFunc.BlendFunc_Corde_SetDist, None, BlendFunc_Corde)
BlendFunc_Corde.SetParam = new_instancemethod(_BlendFunc.BlendFunc_Corde_SetParam, None, BlendFunc_Corde)
BlendFunc_Corde.Tangent2dOnS = new_instancemethod(_BlendFunc.BlendFunc_Corde_Tangent2dOnS, None, BlendFunc_Corde)
BlendFunc_Corde.TangentOnS = new_instancemethod(_BlendFunc.BlendFunc_Corde_TangentOnS, None, BlendFunc_Corde)
BlendFunc_Corde.Value = new_instancemethod(_BlendFunc.BlendFunc_Corde_Value, None, BlendFunc_Corde)
BlendFunc_Corde_swigregister = _BlendFunc.BlendFunc_Corde_swigregister
BlendFunc_Corde_swigregister(BlendFunc_Corde)

class BlendFunc_EvolRad(OCC.Core.Blend.Blend_Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:param Law:
        	:type Law: Law_Function
        	:rtype: None
        """
        _BlendFunc.BlendFunc_EvolRad_swiginit(self, _BlendFunc.new_BlendFunc_EvolRad(*args))

    def GetTolerance(self, *args) -> "void":
        """
        :param Tolerance:
        	:type Tolerance: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.
        	:param BoundTol:
        	:type BoundTol: float
        	:param SurfTol:
        	:type SurfTol: float
        	:param AngleTol:
        	:type AngleTol: float
        	:param Tol3d:
        	:type Tol3d: math_Vector
        	:param Tol1D:
        	:type Tol1D: math_Vector
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_EvolRad_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        * Method for graphic traces
        	:param Param:
        	:type Param: float
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param C:
        	:type C: gp_Circ
        	:rtype: None
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param D2Poles:
        	:type D2Poles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param D2Poles2d:
        	:type D2Poles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:param D2Weigths:
        	:type D2Weigths: TColStd_Array1OfReal
        	:rtype: bool
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:rtype: bool
        :param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_EvolRad_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        :param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        :param Choix:
        	:type Choix: int
        	:rtype: None
        * Sets the type of section generation for the approximations.
        	:param TypeSection:
        	:type TypeSection: BlendFunc_SectionShape
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_EvolRad_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_EvolRad
BlendFunc_EvolRad.GetTolerance = new_instancemethod(_BlendFunc.BlendFunc_EvolRad_GetTolerance, None, BlendFunc_EvolRad)
BlendFunc_EvolRad.Section = new_instancemethod(_BlendFunc.BlendFunc_EvolRad_Section, None, BlendFunc_EvolRad)
BlendFunc_EvolRad.Set = new_instancemethod(_BlendFunc.BlendFunc_EvolRad_Set, None, BlendFunc_EvolRad)
BlendFunc_EvolRad_swigregister = _BlendFunc.BlendFunc_EvolRad_swigregister
BlendFunc_EvolRad_swigregister(BlendFunc_EvolRad)

class BlendFunc_EvolRadInv(OCC.Core.Blend.Blend_FuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:param Law:
        	:type Law: Law_Function
        	:rtype: None
        """
        _BlendFunc.BlendFunc_EvolRadInv_swiginit(self, _BlendFunc.new_BlendFunc_EvolRadInv(*args))

    def Set(self, *args) -> "void":
        """
        :param OnFirst:
        	:type OnFirst: bool
        	:param COnSurf:
        	:type COnSurf: Adaptor2d_HCurve2d
        	:rtype: None
        :param Choix:
        	:type Choix: int
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_EvolRadInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_EvolRadInv
BlendFunc_EvolRadInv.Set = new_instancemethod(_BlendFunc.BlendFunc_EvolRadInv_Set, None, BlendFunc_EvolRadInv)
BlendFunc_EvolRadInv_swigregister = _BlendFunc.BlendFunc_EvolRadInv_swigregister
BlendFunc_EvolRadInv_swigregister(BlendFunc_EvolRadInv)

class BlendFunc_GenChamfInv(OCC.Core.Blend.Blend_FuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Set(self, *args) -> "void":
        """
        :param OnFirst:
        	:type OnFirst: bool
        	:param COnSurf:
        	:type COnSurf: Adaptor2d_HCurve2d
        	:rtype: void
        :param Dist1:
        	:type Dist1: float
        	:param Dist2:
        	:type Dist2: float
        	:param Choix:
        	:type Choix: int
        	:rtype: void
        """
        return _BlendFunc.BlendFunc_GenChamfInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_GenChamfInv
BlendFunc_GenChamfInv.Set = new_instancemethod(_BlendFunc.BlendFunc_GenChamfInv_Set, None, BlendFunc_GenChamfInv)
BlendFunc_GenChamfInv_swigregister = _BlendFunc.BlendFunc_GenChamfInv_swigregister
BlendFunc_GenChamfInv_swigregister(BlendFunc_GenChamfInv)

class BlendFunc_GenChamfer(OCC.Core.Blend.Blend_Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetTolerance(self, *args) -> "void":
        """
        :param Tolerance:
        	:type Tolerance: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.
        	:param BoundTol:
        	:type BoundTol: float
        	:param SurfTol:
        	:type SurfTol: float
        	:param AngleTol:
        	:type AngleTol: float
        	:param Tol3d:
        	:type Tol3d: math_Vector
        	:param Tol1D:
        	:type Tol1D: math_Vector
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_GenChamfer_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        * Obsolete method
        	:param Param:
        	:type Param: float
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:param C:
        	:type C: gp_Lin
        	:rtype: None
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param D2Poles:
        	:type D2Poles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param D2Poles2d:
        	:type D2Poles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:param D2Weigths:
        	:type D2Weigths: TColStd_Array1OfReal
        	:rtype: bool
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:rtype: bool
        :param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_GenChamfer_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        * Sets the value of the parameter along the guide line. This determines the plane in which the solution has to be found.
        	:param Param:
        	:type Param: float
        	:rtype: None
        * Sets the bounds of the parametric interval on the guide line. This determines the derivatives in these values if the function is not Cn.
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        * Sets the distances and the 'quadrant'.
        	:param Dist1:
        	:type Dist1: float
        	:param Dist2:
        	:type Dist2: float
        	:param Choix:
        	:type Choix: int
        	:rtype: void
        """
        return _BlendFunc.BlendFunc_GenChamfer_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_GenChamfer
BlendFunc_GenChamfer.GetTolerance = new_instancemethod(_BlendFunc.BlendFunc_GenChamfer_GetTolerance, None, BlendFunc_GenChamfer)
BlendFunc_GenChamfer.Section = new_instancemethod(_BlendFunc.BlendFunc_GenChamfer_Section, None, BlendFunc_GenChamfer)
BlendFunc_GenChamfer.Set = new_instancemethod(_BlendFunc.BlendFunc_GenChamfer_Set, None, BlendFunc_GenChamfer)
BlendFunc_GenChamfer_swigregister = _BlendFunc.BlendFunc_GenChamfer_swigregister
BlendFunc_GenChamfer_swigregister(BlendFunc_GenChamfer)

class BlendFunc_Ruled(OCC.Core.Blend.Blend_Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AxeRot(self, *args) -> "gp_Ax1":
        """
        :param Prm:
        	:type Prm: float
        	:rtype: gp_Ax1
        """
        return _BlendFunc.BlendFunc_Ruled_AxeRot(self, *args)


    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_Ruled_swiginit(self, _BlendFunc.new_BlendFunc_Ruled(*args))

    def GetSection(self, *args) -> "Standard_Boolean":
        """
        :param Param:
        	:type Param: float
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:param tabP:
        	:type tabP: TColgp_Array1OfPnt
        	:param tabV:
        	:type tabV: TColgp_Array1OfVec
        	:rtype: bool
        """
        return _BlendFunc.BlendFunc_Ruled_GetSection(self, *args)


    def GetTolerance(self, *args) -> "void":
        """
        :param Tolerance:
        	:type Tolerance: math_Vector
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Returns the tolerance to reach in approximation to respecte BoundTol error at the Boundary AngleTol tangent error at the Boundary SurfTol error inside the surface.
        	:param BoundTol:
        	:type BoundTol: float
        	:param SurfTol:
        	:type SurfTol: float
        	:param AngleTol:
        	:type AngleTol: float
        	:param Tol3d:
        	:type Tol3d: math_Vector
        	:param Tol1D:
        	:type Tol1D: math_Vector
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_Ruled_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param D2Poles:
        	:type D2Poles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param D2Poles2d:
        	:type D2Poles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:param D2Weigths:
        	:type D2Weigths: TColStd_Array1OfReal
        	:rtype: bool
        * Used for the first and last section
        	:param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param DPoles:
        	:type DPoles: TColgp_Array1OfVec
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param DPoles2d:
        	:type DPoles2d: TColgp_Array1OfVec2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:param DWeigths:
        	:type DWeigths: TColStd_Array1OfReal
        	:rtype: bool
        :param P:
        	:type P: Blend_Point
        	:param Poles:
        	:type Poles: TColgp_Array1OfPnt
        	:param Poles2d:
        	:type Poles2d: TColgp_Array1OfPnt2d
        	:param Weigths:
        	:type Weigths: TColStd_Array1OfReal
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_Ruled_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        :param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_Ruled_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Ruled
BlendFunc_Ruled.AxeRot = new_instancemethod(_BlendFunc.BlendFunc_Ruled_AxeRot, None, BlendFunc_Ruled)
BlendFunc_Ruled.GetSection = new_instancemethod(_BlendFunc.BlendFunc_Ruled_GetSection, None, BlendFunc_Ruled)
BlendFunc_Ruled.GetTolerance = new_instancemethod(_BlendFunc.BlendFunc_Ruled_GetTolerance, None, BlendFunc_Ruled)
BlendFunc_Ruled.Section = new_instancemethod(_BlendFunc.BlendFunc_Ruled_Section, None, BlendFunc_Ruled)
BlendFunc_Ruled.Set = new_instancemethod(_BlendFunc.BlendFunc_Ruled_Set, None, BlendFunc_Ruled)
BlendFunc_Ruled_swigregister = _BlendFunc.BlendFunc_Ruled_swigregister
BlendFunc_Ruled_swigregister(BlendFunc_Ruled)

class BlendFunc_RuledInv(OCC.Core.Blend.Blend_FuncInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_RuledInv_swiginit(self, _BlendFunc.new_BlendFunc_RuledInv(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_RuledInv
BlendFunc_RuledInv_swigregister = _BlendFunc.BlendFunc_RuledInv_swigregister
BlendFunc_RuledInv_swigregister(BlendFunc_RuledInv)

class BlendFunc_Tensor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbRow:
        	:type NbRow: int
        	:param NbCol:
        	:type NbCol: int
        	:param NbMat:
        	:type NbMat: int
        	:rtype: None
        """
        _BlendFunc.BlendFunc_Tensor_swiginit(self, _BlendFunc.new_BlendFunc_Tensor(*args))

    def GetChangeValue(self, Row: 'Standard_Integer const', Col: 'Standard_Integer const', Mat: 'Standard_Integer const') -> "Standard_Real":
        """GetChangeValue(BlendFunc_Tensor self, Standard_Integer const Row, Standard_Integer const Col, Standard_Integer const Mat) -> Standard_Real"""
        return _BlendFunc.BlendFunc_Tensor_GetChangeValue(self, Row, Col, Mat)


    def SetChangeValue(self, Row: 'Standard_Integer const', Col: 'Standard_Integer const', Mat: 'Standard_Integer const', value: 'Standard_Real') -> "void":
        """SetChangeValue(BlendFunc_Tensor self, Standard_Integer const Row, Standard_Integer const Col, Standard_Integer const Mat, Standard_Real value)"""
        return _BlendFunc.BlendFunc_Tensor_SetChangeValue(self, Row, Col, Mat, value)


    def Init(self, *args) -> "void":
        """
        * Initialize all the elements of a Tensor to InitialValue.
        	:param InitialValue:
        	:type InitialValue: float
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_Tensor_Init(self, *args)


    def Multiply(self, *args) -> "void":
        """
        :param Right:
        	:type Right: math_Vector
        	:param Product:
        	:type Product: math_Matrix
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_Tensor_Multiply(self, *args)


    def Value(self, *args) -> "Standard_Real const &":
        """
        * accesses (in read or write mode) the value of index <Row>, <Col> and <Mat> of a Tensor. An exception is raised if <Row>, <Col> or <Mat> are not in the correct range.
        	:param Row:
        	:type Row: int
        	:param Col:
        	:type Col: int
        	:param Mat:
        	:type Mat: int
        	:rtype: float
        """
        return _BlendFunc.BlendFunc_Tensor_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Tensor
BlendFunc_Tensor.GetChangeValue = new_instancemethod(_BlendFunc.BlendFunc_Tensor_GetChangeValue, None, BlendFunc_Tensor)
BlendFunc_Tensor.SetChangeValue = new_instancemethod(_BlendFunc.BlendFunc_Tensor_SetChangeValue, None, BlendFunc_Tensor)
BlendFunc_Tensor.Init = new_instancemethod(_BlendFunc.BlendFunc_Tensor_Init, None, BlendFunc_Tensor)
BlendFunc_Tensor.Multiply = new_instancemethod(_BlendFunc.BlendFunc_Tensor_Multiply, None, BlendFunc_Tensor)
BlendFunc_Tensor.Value = new_instancemethod(_BlendFunc.BlendFunc_Tensor_Value, None, BlendFunc_Tensor)
BlendFunc_Tensor_swigregister = _BlendFunc.BlendFunc_Tensor_swigregister
BlendFunc_Tensor_swigregister(BlendFunc_Tensor)

class BlendFunc_ChamfInv(BlendFunc_GenChamfInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_ChamfInv_swiginit(self, _BlendFunc.new_BlendFunc_ChamfInv(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ChamfInv
BlendFunc_ChamfInv_swigregister = _BlendFunc.BlendFunc_ChamfInv_swigregister
BlendFunc_ChamfInv_swigregister(BlendFunc_ChamfInv)

class BlendFunc_Chamfer(BlendFunc_GenChamfer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param CG:
        	:type CG: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_Chamfer_swiginit(self, _BlendFunc.new_BlendFunc_Chamfer(*args))

    def Set(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        * Sets the distances and the 'quadrant'.
        	:param Dist1:
        	:type Dist1: float
        	:param Dist2:
        	:type Dist2: float
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_Chamfer_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Chamfer
BlendFunc_Chamfer.Set = new_instancemethod(_BlendFunc.BlendFunc_Chamfer_Set, None, BlendFunc_Chamfer)
BlendFunc_Chamfer_swigregister = _BlendFunc.BlendFunc_Chamfer_swigregister
BlendFunc_Chamfer_swigregister(BlendFunc_Chamfer)

class BlendFunc_ConstThroat(BlendFunc_GenChamfer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_ConstThroat_swiginit(self, _BlendFunc.new_BlendFunc_ConstThroat(*args))

    def Set(self, *args) -> "void":
        """
        :param Param:
        	:type Param: float
        	:rtype: None
        * Sets the throat and the 'quadrant'.
        	:param aThroat:
        	:type aThroat: float
        	:param Standard_Real:
        	:type Standard_Real: 
        	:param Choix:
        	:type Choix: int
        	:rtype: None
        """
        return _BlendFunc.BlendFunc_ConstThroat_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroat
BlendFunc_ConstThroat.Set = new_instancemethod(_BlendFunc.BlendFunc_ConstThroat_Set, None, BlendFunc_ConstThroat)
BlendFunc_ConstThroat_swigregister = _BlendFunc.BlendFunc_ConstThroat_swigregister
BlendFunc_ConstThroat_swigregister(BlendFunc_ConstThroat)

class BlendFunc_ConstThroatInv(BlendFunc_GenChamfInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_ConstThroatInv_swiginit(self, _BlendFunc.new_BlendFunc_ConstThroatInv(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroatInv
BlendFunc_ConstThroatInv_swigregister = _BlendFunc.BlendFunc_ConstThroatInv_swigregister
BlendFunc_ConstThroatInv_swigregister(BlendFunc_ConstThroatInv)

class BlendFunc_ConstThroatWithPenetration(BlendFunc_ConstThroat):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_ConstThroatWithPenetration_swiginit(self, _BlendFunc.new_BlendFunc_ConstThroatWithPenetration(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroatWithPenetration
BlendFunc_ConstThroatWithPenetration_swigregister = _BlendFunc.BlendFunc_ConstThroatWithPenetration_swigregister
BlendFunc_ConstThroatWithPenetration_swigregister(BlendFunc_ConstThroatWithPenetration)

class BlendFunc_ConstThroatWithPenetrationInv(BlendFunc_ConstThroatInv):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param C:
        	:type C: Adaptor3d_HCurve
        	:rtype: None
        """
        _BlendFunc.BlendFunc_ConstThroatWithPenetrationInv_swiginit(self, _BlendFunc.new_BlendFunc_ConstThroatWithPenetrationInv(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroatWithPenetrationInv
BlendFunc_ConstThroatWithPenetrationInv_swigregister = _BlendFunc.BlendFunc_ConstThroatWithPenetrationInv_swigregister
BlendFunc_ConstThroatWithPenetrationInv_swigregister(BlendFunc_ConstThroatWithPenetrationInv)



