# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
CPnts module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_cpnts.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _CPnts.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CPnts')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CPnts')
    _CPnts = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CPnts', [dirname(__file__)])
        except ImportError:
            import _CPnts
            return _CPnts
        try:
            _mod = imp.load_module('_CPnts', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CPnts = swig_import_helper()
    del swig_import_helper
else:
    import _CPnts
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CPnts.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_CPnts.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_CPnts.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_CPnts.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_CPnts.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_CPnts.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_CPnts.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_CPnts.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_CPnts.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_CPnts.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_CPnts.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_CPnts.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_CPnts.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_CPnts.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_CPnts.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_CPnts.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_CPnts.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _CPnts.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _CPnts.process_exception(error, method_name, class_name)
process_exception = _CPnts.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
class CPnts_AbscissaPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AdvPerform(self, *args) -> "void":
        """
        * Computes the point at the distance <Abscissa> of the curve; performs more appropriate tolerance managment; to use this method in right way it is necessary to call empty consructor. then call method Init with Tolerance = Resolution, then call AdvPermorm. U0 is the parameter of the point from which the distance is measured and Ui is the starting value for the iterative process (should be close to the final solution).
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Ui:
        	:type Ui: float
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        """
        return _CPnts.CPnts_AbscissaPoint_AdvPerform(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Resolution> is the error allowed in the computation. The computed point can be outside of the curve 's bounds.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Resolution> is the error allowed in the computation. The computed point can be outside of the curve 's bounds.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Ui> is the starting value used in the iterative process which find the solution, it must be closed to the final solution <Resolution> is the error allowed in the computation. The computed point can be outside of the curve 's bounds.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Ui:
        	:type Ui: float
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        * the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Ui> is the starting value used in the iterative process which find the solution, it must be closed to the final solution <Resolution> is the error allowed in the computation. The computed point can be outside of the curve 's bounds.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Ui:
        	:type Ui: float
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        """
        _CPnts.CPnts_AbscissaPoint_swiginit(self, _CPnts.new_CPnts_AbscissaPoint(*args))

    def Init(self, *args) -> "void":
        """
        * Initializes the resolution function with <C>.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: None
        * Initializes the resolution function with <C>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: None
        * Initializes the resolution function with <C>.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Initializes the resolution function with <C>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Initializes the resolution function with <C> between U1 and U2.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None
        * Initializes the resolution function with <C> between U1 and U2.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None
        * Initializes the resolution function with <C> between U1 and U2.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        * Initializes the resolution function with <C> between U1 and U2.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _CPnts.CPnts_AbscissaPoint_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * True if the computation was successful, False otherwise.
        	:rtype: bool
        """
        return _CPnts.CPnts_AbscissaPoint_IsDone(self, *args)


    def Length(*args) -> "Standard_Real":
        """
        * Computes the length of the Curve <C>.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:rtype: float
        * Computes the length of the Curve <C>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:rtype: float
        * Computes the length of the Curve <C> with the given tolerance.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Tol:
        	:type Tol: float
        	:rtype: float
        * Computes the length of the Curve <C> with the given tolerance.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Tol:
        	:type Tol: float
        	:rtype: float
        * Computes the length of the Curve <C> between <U1> and <U2>.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: float
        * Computes the length of the Curve <C> between <U1> and <U2>.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: float
        * Computes the length of the Curve <C> between <U1> and <U2> with the given tolerance.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Tol:
        	:type Tol: float
        	:rtype: float
        * Computes the length of the Curve <C> between <U1> and <U2> with the given tolerance. creation of a indefinite AbscissaPoint.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Tol:
        	:type Tol: float
        	:rtype: float
        """
        return _CPnts.CPnts_AbscissaPoint_Length(*args)

    Length = staticmethod(Length)

    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter of the solution.
        	:rtype: float
        """
        return _CPnts.CPnts_AbscissaPoint_Parameter(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Computes the point at the distance <Abscissa> of the curve. U0 is the parameter of the point from which the distance is measured.
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        * Computes the point at the distance <Abscissa> of the curve. U0 is the parameter of the point from which the distance is measured and Ui is the starting value for the iterative process (should be close to the final solution).
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Ui:
        	:type Ui: float
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        """
        return _CPnts.CPnts_AbscissaPoint_Perform(self, *args)


    def SetParameter(self, *args) -> "void":
        """
        * Enforce the solution, used by GCPnts.
        	:param P:
        	:type P: float
        	:rtype: None
        """
        return _CPnts.CPnts_AbscissaPoint_SetParameter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _CPnts.delete_CPnts_AbscissaPoint
CPnts_AbscissaPoint.AdvPerform = new_instancemethod(_CPnts.CPnts_AbscissaPoint_AdvPerform, None, CPnts_AbscissaPoint)
CPnts_AbscissaPoint.Init = new_instancemethod(_CPnts.CPnts_AbscissaPoint_Init, None, CPnts_AbscissaPoint)
CPnts_AbscissaPoint.IsDone = new_instancemethod(_CPnts.CPnts_AbscissaPoint_IsDone, None, CPnts_AbscissaPoint)
CPnts_AbscissaPoint.Parameter = new_instancemethod(_CPnts.CPnts_AbscissaPoint_Parameter, None, CPnts_AbscissaPoint)
CPnts_AbscissaPoint.Perform = new_instancemethod(_CPnts.CPnts_AbscissaPoint_Perform, None, CPnts_AbscissaPoint)
CPnts_AbscissaPoint.SetParameter = new_instancemethod(_CPnts.CPnts_AbscissaPoint_SetParameter, None, CPnts_AbscissaPoint)
CPnts_AbscissaPoint_swigregister = _CPnts.CPnts_AbscissaPoint_swigregister
CPnts_AbscissaPoint_swigregister(CPnts_AbscissaPoint)

def CPnts_AbscissaPoint_Length(*args) -> "Standard_Real":
    """
    * Computes the length of the Curve <C>.
    	:param C:
    	:type C: Adaptor3d_Curve
    	:rtype: float
    * Computes the length of the Curve <C>.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:rtype: float
    * Computes the length of the Curve <C> with the given tolerance.
    	:param C:
    	:type C: Adaptor3d_Curve
    	:param Tol:
    	:type Tol: float
    	:rtype: float
    * Computes the length of the Curve <C> with the given tolerance.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param Tol:
    	:type Tol: float
    	:rtype: float
    * Computes the length of the Curve <C> between <U1> and <U2>.
    	:param C:
    	:type C: Adaptor3d_Curve
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:rtype: float
    * Computes the length of the Curve <C> between <U1> and <U2>.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:rtype: float
    * Computes the length of the Curve <C> between <U1> and <U2> with the given tolerance.
    	:param C:
    	:type C: Adaptor3d_Curve
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:param Tol:
    	:type Tol: float
    	:rtype: float
    * Computes the length of the Curve <C> between <U1> and <U2> with the given tolerance. creation of a indefinite AbscissaPoint.
    	:param C:
    	:type C: Adaptor2d_Curve2d
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:param Tol:
    	:type Tol: float
    	:rtype: float
    """
    return _CPnts.CPnts_AbscissaPoint_Length(*args)

class CPnts_MyGaussFunction(OCC.Core.math.math_Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _CPnts.CPnts_MyGaussFunction_swiginit(self, _CPnts.new_CPnts_MyGaussFunction(*args))

    def Init(self, *args) -> "void":
        """
        * F is a pointer on a function D is a client data //! Each value is computed with F(D)
        	:param F:
        	:type F: CPnts_RealFunction
        	:param D:
        	:type D: Standard_Address
        	:rtype: None
        """
        return _CPnts.CPnts_MyGaussFunction_Init(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _CPnts.delete_CPnts_MyGaussFunction
CPnts_MyGaussFunction.Init = new_instancemethod(_CPnts.CPnts_MyGaussFunction_Init, None, CPnts_MyGaussFunction)
CPnts_MyGaussFunction_swigregister = _CPnts.CPnts_MyGaussFunction_swigregister
CPnts_MyGaussFunction_swigregister(CPnts_MyGaussFunction)

class CPnts_MyRootFunction(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _CPnts.CPnts_MyRootFunction_swiginit(self, _CPnts.new_CPnts_MyRootFunction(*args))

    def Init(self, *args) -> "void":
        """
        * F is a pointer on a function D is a client data Order is the order of integration to use
        	:param F:
        	:type F: CPnts_RealFunction
        	:param D:
        	:type D: Standard_Address
        	:param Order:
        	:type Order: int
        	:rtype: None
        * We want to solve Integral(X0,X,F(X,D)) = L
        	:param X0:
        	:type X0: float
        	:param L:
        	:type L: float
        	:rtype: None
        * We want to solve Integral(X0,X,F(X,D)) = L with given tolerance
        	:param X0:
        	:type X0: float
        	:param L:
        	:type L: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _CPnts.CPnts_MyRootFunction_Init(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _CPnts.delete_CPnts_MyRootFunction
CPnts_MyRootFunction.Init = new_instancemethod(_CPnts.CPnts_MyRootFunction_Init, None, CPnts_MyRootFunction)
CPnts_MyRootFunction_swigregister = _CPnts.CPnts_MyRootFunction_swigregister
CPnts_MyRootFunction_swigregister(CPnts_MyRootFunction)

class CPnts_UniformDeflection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * creation of a indefinite UniformDeflection
        	:rtype: None
        * Computes a uniform deflection distribution of points on the curve <C>. <Deflection> defines the constant deflection value. The algorithm computes the number of points and the points. The curve <C> must be at least C2 else the computation can fail. If just some parts of the curve is C2 it is better to give the parameters bounds and to use the below constructor . if <WithControl> is True, the algorithm controls the estimate deflection when the curve is singular at the point P(u),the algorithm computes the next point as P(u + Max(CurrentStep,Abs(LastParameter-FirstParameter))) if the singularity is at the first point ,the next point calculated is the P(LastParameter)
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None
        * As above with 2d curve
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None
        * Computes an uniform deflection distribution of points on a part of the curve <C>. Deflection defines the step between the points. <U1> and <U2> define the distribution span. <U1> and <U2> must be in the parametric range of the curve.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None
        * As above with 2d curve
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None
        """
        _CPnts.CPnts_UniformDeflection_swiginit(self, _CPnts.new_CPnts_UniformDeflection(*args))

    def Initialize(self, *args) -> "void":
        """
        * Initialize the algoritms with <C>, <Deflection>, <UStep>, <Resolution> and <WithControl>
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None
        * Initialize the algoritms with <C>, <Deflection>, <UStep>, <Resolution> and <WithControl>
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None
        * Initialize the algoritms with <C>, <Deflection>, <UStep>, <U1>, <U2> and <WithControl>
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None
        * Initialize the algoritms with <C>, <Deflection>, <UStep>, <U1>, <U2> and <WithControl>
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None
        """
        return _CPnts.CPnts_UniformDeflection_Initialize(self, *args)


    def IsAllDone(self, *args) -> "Standard_Boolean":
        """
        * To know if all the calculus were done successfully (ie all the points have been computed). The calculus can fail if the Curve is not C1 in the considered domain. Returns True if the calculus was successful.
        	:rtype: bool
        """
        return _CPnts.CPnts_UniformDeflection_IsAllDone(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * returns True if it exists a next Point.
        	:rtype: bool
        """
        return _CPnts.CPnts_UniformDeflection_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * go to the next Point.
        	:rtype: None
        """
        return _CPnts.CPnts_UniformDeflection_Next(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """
        * return the computed parameter
        	:rtype: gp_Pnt
        """
        return _CPnts.CPnts_UniformDeflection_Point(self, *args)


    def Value(self, *args) -> "Standard_Real":
        """
        * return the computed parameter
        	:rtype: float
        """
        return _CPnts.CPnts_UniformDeflection_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _CPnts.delete_CPnts_UniformDeflection
CPnts_UniformDeflection.Initialize = new_instancemethod(_CPnts.CPnts_UniformDeflection_Initialize, None, CPnts_UniformDeflection)
CPnts_UniformDeflection.IsAllDone = new_instancemethod(_CPnts.CPnts_UniformDeflection_IsAllDone, None, CPnts_UniformDeflection)
CPnts_UniformDeflection.More = new_instancemethod(_CPnts.CPnts_UniformDeflection_More, None, CPnts_UniformDeflection)
CPnts_UniformDeflection.Next = new_instancemethod(_CPnts.CPnts_UniformDeflection_Next, None, CPnts_UniformDeflection)
CPnts_UniformDeflection.Point = new_instancemethod(_CPnts.CPnts_UniformDeflection_Point, None, CPnts_UniformDeflection)
CPnts_UniformDeflection.Value = new_instancemethod(_CPnts.CPnts_UniformDeflection_Value, None, CPnts_UniformDeflection)
CPnts_UniformDeflection_swigregister = _CPnts.CPnts_UniformDeflection_swigregister
CPnts_UniformDeflection_swigregister(CPnts_UniformDeflection)



