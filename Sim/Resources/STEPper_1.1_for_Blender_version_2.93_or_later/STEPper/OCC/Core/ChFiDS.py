# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ChFiDS module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_chfids.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ChFiDS.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ChFiDS')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ChFiDS')
    _ChFiDS = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ChFiDS', [dirname(__file__)])
        except ImportError:
            import _ChFiDS
            return _ChFiDS
        try:
            _mod = imp.load_module('_ChFiDS', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ChFiDS = swig_import_helper()
    del swig_import_helper
else:
    import _ChFiDS
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ChFiDS.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ChFiDS.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ChFiDS.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ChFiDS.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ChFiDS.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ChFiDS.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ChFiDS.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ChFiDS.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ChFiDS.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ChFiDS.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ChFiDS.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ChFiDS.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ChFiDS.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ChFiDS.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ChFiDS.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ChFiDS.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ChFiDS.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ChFiDS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ChFiDS.process_exception(error, method_name, class_name)
process_exception = _ChFiDS.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.TopTools
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.Law
ChFiDS_OnSame = _ChFiDS.ChFiDS_OnSame
ChFiDS_OnDiff = _ChFiDS.ChFiDS_OnDiff
ChFiDS_AllSame = _ChFiDS.ChFiDS_AllSame
ChFiDS_BreakPoint = _ChFiDS.ChFiDS_BreakPoint
ChFiDS_FreeBoundary = _ChFiDS.ChFiDS_FreeBoundary
ChFiDS_Closed = _ChFiDS.ChFiDS_Closed
ChFiDS_Tangent = _ChFiDS.ChFiDS_Tangent
ChFiDS_Sym = _ChFiDS.ChFiDS_Sym
ChFiDS_TwoDist = _ChFiDS.ChFiDS_TwoDist
ChFiDS_DistAngle = _ChFiDS.ChFiDS_DistAngle
ChFiDS_ClassicChamfer = _ChFiDS.ChFiDS_ClassicChamfer
ChFiDS_ConstThroatChamfer = _ChFiDS.ChFiDS_ConstThroatChamfer
ChFiDS_ConstThroatWithPenetrationChamfer = _ChFiDS.ChFiDS_ConstThroatWithPenetrationChamfer
ChFiDS_Ok = _ChFiDS.ChFiDS_Ok
ChFiDS_Error = _ChFiDS.ChFiDS_Error
ChFiDS_WalkingFailure = _ChFiDS.ChFiDS_WalkingFailure
ChFiDS_StartsolFailure = _ChFiDS.ChFiDS_StartsolFailure
ChFiDS_TwistedSurface = _ChFiDS.ChFiDS_TwistedSurface

def Handle_ChFiDS_HElSpine_Create() -> "opencascade::handle< ChFiDS_HElSpine >":
    return _ChFiDS.Handle_ChFiDS_HElSpine_Create()
Handle_ChFiDS_HElSpine_Create = _ChFiDS.Handle_ChFiDS_HElSpine_Create

def Handle_ChFiDS_HElSpine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ChFiDS_HElSpine >":
    return _ChFiDS.Handle_ChFiDS_HElSpine_DownCast(t)
Handle_ChFiDS_HElSpine_DownCast = _ChFiDS.Handle_ChFiDS_HElSpine_DownCast

def Handle_ChFiDS_HElSpine_IsNull(t: 'opencascade::handle< ChFiDS_HElSpine > const &') -> "bool":
    return _ChFiDS.Handle_ChFiDS_HElSpine_IsNull(t)
Handle_ChFiDS_HElSpine_IsNull = _ChFiDS.Handle_ChFiDS_HElSpine_IsNull

def Handle_ChFiDS_Spine_Create() -> "opencascade::handle< ChFiDS_Spine >":
    return _ChFiDS.Handle_ChFiDS_Spine_Create()
Handle_ChFiDS_Spine_Create = _ChFiDS.Handle_ChFiDS_Spine_Create

def Handle_ChFiDS_Spine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ChFiDS_Spine >":
    return _ChFiDS.Handle_ChFiDS_Spine_DownCast(t)
Handle_ChFiDS_Spine_DownCast = _ChFiDS.Handle_ChFiDS_Spine_DownCast

def Handle_ChFiDS_Spine_IsNull(t: 'opencascade::handle< ChFiDS_Spine > const &') -> "bool":
    return _ChFiDS.Handle_ChFiDS_Spine_IsNull(t)
Handle_ChFiDS_Spine_IsNull = _ChFiDS.Handle_ChFiDS_Spine_IsNull

def Handle_ChFiDS_Stripe_Create() -> "opencascade::handle< ChFiDS_Stripe >":
    return _ChFiDS.Handle_ChFiDS_Stripe_Create()
Handle_ChFiDS_Stripe_Create = _ChFiDS.Handle_ChFiDS_Stripe_Create

def Handle_ChFiDS_Stripe_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ChFiDS_Stripe >":
    return _ChFiDS.Handle_ChFiDS_Stripe_DownCast(t)
Handle_ChFiDS_Stripe_DownCast = _ChFiDS.Handle_ChFiDS_Stripe_DownCast

def Handle_ChFiDS_Stripe_IsNull(t: 'opencascade::handle< ChFiDS_Stripe > const &') -> "bool":
    return _ChFiDS.Handle_ChFiDS_Stripe_IsNull(t)
Handle_ChFiDS_Stripe_IsNull = _ChFiDS.Handle_ChFiDS_Stripe_IsNull

def Handle_ChFiDS_SurfData_Create() -> "opencascade::handle< ChFiDS_SurfData >":
    return _ChFiDS.Handle_ChFiDS_SurfData_Create()
Handle_ChFiDS_SurfData_Create = _ChFiDS.Handle_ChFiDS_SurfData_Create

def Handle_ChFiDS_SurfData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ChFiDS_SurfData >":
    return _ChFiDS.Handle_ChFiDS_SurfData_DownCast(t)
Handle_ChFiDS_SurfData_DownCast = _ChFiDS.Handle_ChFiDS_SurfData_DownCast

def Handle_ChFiDS_SurfData_IsNull(t: 'opencascade::handle< ChFiDS_SurfData > const &') -> "bool":
    return _ChFiDS.Handle_ChFiDS_SurfData_IsNull(t)
Handle_ChFiDS_SurfData_IsNull = _ChFiDS.Handle_ChFiDS_SurfData_IsNull

def Handle_ChFiDS_ChamfSpine_Create() -> "opencascade::handle< ChFiDS_ChamfSpine >":
    return _ChFiDS.Handle_ChFiDS_ChamfSpine_Create()
Handle_ChFiDS_ChamfSpine_Create = _ChFiDS.Handle_ChFiDS_ChamfSpine_Create

def Handle_ChFiDS_ChamfSpine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ChFiDS_ChamfSpine >":
    return _ChFiDS.Handle_ChFiDS_ChamfSpine_DownCast(t)
Handle_ChFiDS_ChamfSpine_DownCast = _ChFiDS.Handle_ChFiDS_ChamfSpine_DownCast

def Handle_ChFiDS_ChamfSpine_IsNull(t: 'opencascade::handle< ChFiDS_ChamfSpine > const &') -> "bool":
    return _ChFiDS.Handle_ChFiDS_ChamfSpine_IsNull(t)
Handle_ChFiDS_ChamfSpine_IsNull = _ChFiDS.Handle_ChFiDS_ChamfSpine_IsNull

def Handle_ChFiDS_FilSpine_Create() -> "opencascade::handle< ChFiDS_FilSpine >":
    return _ChFiDS.Handle_ChFiDS_FilSpine_Create()
Handle_ChFiDS_FilSpine_Create = _ChFiDS.Handle_ChFiDS_FilSpine_Create

def Handle_ChFiDS_FilSpine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ChFiDS_FilSpine >":
    return _ChFiDS.Handle_ChFiDS_FilSpine_DownCast(t)
Handle_ChFiDS_FilSpine_DownCast = _ChFiDS.Handle_ChFiDS_FilSpine_DownCast

def Handle_ChFiDS_FilSpine_IsNull(t: 'opencascade::handle< ChFiDS_FilSpine > const &') -> "bool":
    return _ChFiDS.Handle_ChFiDS_FilSpine_IsNull(t)
Handle_ChFiDS_FilSpine_IsNull = _ChFiDS.Handle_ChFiDS_FilSpine_IsNull

def Handle_ChFiDS_SecHArray1_Create() -> "opencascade::handle< ChFiDS_SecHArray1 >":
    return _ChFiDS.Handle_ChFiDS_SecHArray1_Create()
Handle_ChFiDS_SecHArray1_Create = _ChFiDS.Handle_ChFiDS_SecHArray1_Create

def Handle_ChFiDS_SecHArray1_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ChFiDS_SecHArray1 >":
    return _ChFiDS.Handle_ChFiDS_SecHArray1_DownCast(t)
Handle_ChFiDS_SecHArray1_DownCast = _ChFiDS.Handle_ChFiDS_SecHArray1_DownCast

def Handle_ChFiDS_SecHArray1_IsNull(t: 'opencascade::handle< ChFiDS_SecHArray1 > const &') -> "bool":
    return _ChFiDS.Handle_ChFiDS_SecHArray1_IsNull(t)
Handle_ChFiDS_SecHArray1_IsNull = _ChFiDS.Handle_ChFiDS_SecHArray1_IsNull

def Handle_ChFiDS_HData_Create() -> "opencascade::handle< ChFiDS_HData >":
    return _ChFiDS.Handle_ChFiDS_HData_Create()
Handle_ChFiDS_HData_Create = _ChFiDS.Handle_ChFiDS_HData_Create

def Handle_ChFiDS_HData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ChFiDS_HData >":
    return _ChFiDS.Handle_ChFiDS_HData_DownCast(t)
Handle_ChFiDS_HData_DownCast = _ChFiDS.Handle_ChFiDS_HData_DownCast

def Handle_ChFiDS_HData_IsNull(t: 'opencascade::handle< ChFiDS_HData > const &') -> "bool":
    return _ChFiDS.Handle_ChFiDS_HData_IsNull(t)
Handle_ChFiDS_HData_IsNull = _ChFiDS.Handle_ChFiDS_HData_IsNull
class ChFiDS_SequenceOfSpine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_SequenceOfSpine_swiginit(self, _ChFiDS.new_ChFiDS_SequenceOfSpine(*args))
    delNode = staticmethod(_ChFiDS.ChFiDS_SequenceOfSpine_delNode)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_SequenceOfSpine
ChFiDS_SequenceOfSpine.begin = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_begin, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.end = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_end, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.cbegin = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_cbegin, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.cend = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_cend, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Size = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Size, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Length = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Length, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Lower = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Lower, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Upper = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Upper, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.IsEmpty = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_IsEmpty, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Reverse = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Reverse, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Exchange = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Exchange, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Clear = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Clear, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Assign = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Assign, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Set = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Set, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Remove = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Remove, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Append = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Append, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Prepend = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Prepend, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.InsertBefore = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_InsertBefore, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.InsertAfter = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_InsertAfter, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Split = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Split, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.First = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_First, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.ChangeFirst = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_ChangeFirst, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Last = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Last, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.ChangeLast = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_ChangeLast, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.Value = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_Value, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.ChangeValue = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_ChangeValue, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.__call__ = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine___call__, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine.SetValue = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSpine_SetValue, None, ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine_swigregister = _ChFiDS.ChFiDS_SequenceOfSpine_swigregister
ChFiDS_SequenceOfSpine_swigregister(ChFiDS_SequenceOfSpine)

def ChFiDS_SequenceOfSpine_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _ChFiDS.ChFiDS_SequenceOfSpine_delNode(theNode, theAl)
ChFiDS_SequenceOfSpine_delNode = _ChFiDS.ChFiDS_SequenceOfSpine_delNode

class ChFiDS_SecArray1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_SecArray1_swiginit(self, _ChFiDS.new_ChFiDS_SecArray1(*args))
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_SecArray1

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

ChFiDS_SecArray1.begin = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_begin, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.end = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_end, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.cbegin = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_cbegin, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.cend = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_cend, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.Init = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_Init, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.Size = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_Size, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.Length = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_Length, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.IsEmpty = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_IsEmpty, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.Lower = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_Lower, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.Upper = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_Upper, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.IsDeletable = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_IsDeletable, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.IsAllocated = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_IsAllocated, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.Assign = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_Assign, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.Move = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_Move, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.Set = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_Set, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.First = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_First, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.ChangeFirst = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_ChangeFirst, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.Last = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_Last, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.ChangeLast = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_ChangeLast, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.Value = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_Value, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.ChangeValue = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_ChangeValue, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.__call__ = new_instancemethod(_ChFiDS.ChFiDS_SecArray1___call__, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.SetValue = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_SetValue, None, ChFiDS_SecArray1)
ChFiDS_SecArray1.Resize = new_instancemethod(_ChFiDS.ChFiDS_SecArray1_Resize, None, ChFiDS_SecArray1)
ChFiDS_SecArray1_swigregister = _ChFiDS.ChFiDS_SecArray1_swigregister
ChFiDS_SecArray1_swigregister(ChFiDS_SecArray1)

class ChFiDS_SequenceOfSurfData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_SequenceOfSurfData_swiginit(self, _ChFiDS.new_ChFiDS_SequenceOfSurfData(*args))
    delNode = staticmethod(_ChFiDS.ChFiDS_SequenceOfSurfData_delNode)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_SequenceOfSurfData
ChFiDS_SequenceOfSurfData.begin = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_begin, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.end = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_end, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.cbegin = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_cbegin, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.cend = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_cend, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Size = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Size, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Length = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Length, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Lower = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Lower, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Upper = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Upper, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.IsEmpty = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_IsEmpty, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Reverse = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Reverse, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Exchange = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Exchange, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Clear = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Clear, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Assign = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Assign, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Set = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Set, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Remove = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Remove, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Append = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Append, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Prepend = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Prepend, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.InsertBefore = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_InsertBefore, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.InsertAfter = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_InsertAfter, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Split = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Split, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.First = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_First, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.ChangeFirst = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_ChangeFirst, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Last = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Last, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.ChangeLast = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_ChangeLast, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.Value = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_Value, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.ChangeValue = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_ChangeValue, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.__call__ = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData___call__, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData.SetValue = new_instancemethod(_ChFiDS.ChFiDS_SequenceOfSurfData_SetValue, None, ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData_swigregister = _ChFiDS.ChFiDS_SequenceOfSurfData_swigregister
ChFiDS_SequenceOfSurfData_swigregister(ChFiDS_SequenceOfSurfData)

def ChFiDS_SequenceOfSurfData_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _ChFiDS.ChFiDS_SequenceOfSurfData_delNode(theNode, theAl)
ChFiDS_SequenceOfSurfData_delNode = _ChFiDS.ChFiDS_SequenceOfSurfData_delNode

class ChFiDS_StripeArray1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_StripeArray1_swiginit(self, _ChFiDS.new_ChFiDS_StripeArray1(*args))
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_StripeArray1

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

ChFiDS_StripeArray1.begin = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_begin, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.end = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_end, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.cbegin = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_cbegin, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.cend = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_cend, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.Init = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_Init, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.Size = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_Size, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.Length = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_Length, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.IsEmpty = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_IsEmpty, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.Lower = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_Lower, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.Upper = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_Upper, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.IsDeletable = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_IsDeletable, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.IsAllocated = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_IsAllocated, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.Assign = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_Assign, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.Move = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_Move, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.Set = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_Set, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.First = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_First, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.ChangeFirst = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_ChangeFirst, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.Last = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_Last, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.ChangeLast = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_ChangeLast, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.Value = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_Value, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.ChangeValue = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_ChangeValue, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.__call__ = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1___call__, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.SetValue = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_SetValue, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1.Resize = new_instancemethod(_ChFiDS.ChFiDS_StripeArray1_Resize, None, ChFiDS_StripeArray1)
ChFiDS_StripeArray1_swigregister = _ChFiDS.ChFiDS_StripeArray1_swigregister
ChFiDS_StripeArray1_swigregister(ChFiDS_StripeArray1)

class ChFiDS_ListOfHElSpine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_ListOfHElSpine_swiginit(self, _ChFiDS.new_ChFiDS_ListOfHElSpine(*args))
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ListOfHElSpine
ChFiDS_ListOfHElSpine.begin = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_begin, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.end = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_end, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.cbegin = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_cbegin, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.cend = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_cend, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.Size = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_Size, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.Assign = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_Assign, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.Set = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_Set, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.Clear = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_Clear, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.First = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_First, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.Last = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_Last, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.Append = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_Append, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.Prepend = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_Prepend, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.RemoveFirst = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_RemoveFirst, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.Remove = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_Remove, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.InsertBefore = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_InsertBefore, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.InsertAfter = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_InsertAfter, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine.Reverse = new_instancemethod(_ChFiDS.ChFiDS_ListOfHElSpine_Reverse, None, ChFiDS_ListOfHElSpine)
ChFiDS_ListOfHElSpine_swigregister = _ChFiDS.ChFiDS_ListOfHElSpine_swigregister
ChFiDS_ListOfHElSpine_swigregister(ChFiDS_ListOfHElSpine)

class ChFiDS_ListIteratorOfListOfHElSpine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_swiginit(self, _ChFiDS.new_ChFiDS_ListIteratorOfListOfHElSpine(*args))
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ListIteratorOfListOfHElSpine
ChFiDS_ListIteratorOfListOfHElSpine.More = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_More, None, ChFiDS_ListIteratorOfListOfHElSpine)
ChFiDS_ListIteratorOfListOfHElSpine.Next = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_Next, None, ChFiDS_ListIteratorOfListOfHElSpine)
ChFiDS_ListIteratorOfListOfHElSpine.Value = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_Value, None, ChFiDS_ListIteratorOfListOfHElSpine)
ChFiDS_ListIteratorOfListOfHElSpine.ChangeValue = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_ChangeValue, None, ChFiDS_ListIteratorOfListOfHElSpine)
ChFiDS_ListIteratorOfListOfHElSpine_swigregister = _ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_swigregister
ChFiDS_ListIteratorOfListOfHElSpine_swigregister(ChFiDS_ListIteratorOfListOfHElSpine)

class ChFiDS_IndexedDataMapOfVertexListOfStripe(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_swiginit(self, _ChFiDS.new_ChFiDS_IndexedDataMapOfVertexListOfStripe(*args))
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_IndexedDataMapOfVertexListOfStripe
ChFiDS_IndexedDataMapOfVertexListOfStripe.begin = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_begin, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.end = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_end, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.cbegin = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_cbegin, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.cend = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_cend, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.Exchange = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Exchange, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.Assign = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Assign, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.Set = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Set, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.ReSize = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_ReSize, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.Add = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Add, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.Contains = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Contains, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.Substitute = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Substitute, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.Swap = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Swap, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.RemoveLast = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_RemoveLast, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.RemoveFromIndex = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_RemoveFromIndex, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.RemoveKey = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_RemoveKey, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.FindKey = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_FindKey, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.FindFromIndex = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_FindFromIndex, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.ChangeFromIndex = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_ChangeFromIndex, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.__call__ = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe___call__, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.FindIndex = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_FindIndex, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.ChangeFromKey = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_ChangeFromKey, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.Seek = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Seek, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.ChangeSeek = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_ChangeSeek, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.FindFromKey = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_FindFromKey, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.Clear = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Clear, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe.Size = new_instancemethod(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Size, None, ChFiDS_IndexedDataMapOfVertexListOfStripe)
ChFiDS_IndexedDataMapOfVertexListOfStripe_swigregister = _ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_swigregister
ChFiDS_IndexedDataMapOfVertexListOfStripe_swigregister(ChFiDS_IndexedDataMapOfVertexListOfStripe)

class ChFiDS_ListOfStripe(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_ListOfStripe_swiginit(self, _ChFiDS.new_ChFiDS_ListOfStripe(*args))
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ListOfStripe
ChFiDS_ListOfStripe.begin = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_begin, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.end = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_end, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.cbegin = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_cbegin, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.cend = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_cend, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.Size = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_Size, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.Assign = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_Assign, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.Set = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_Set, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.Clear = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_Clear, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.First = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_First, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.Last = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_Last, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.Append = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_Append, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.Prepend = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_Prepend, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.RemoveFirst = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_RemoveFirst, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.Remove = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_Remove, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.InsertBefore = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_InsertBefore, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.InsertAfter = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_InsertAfter, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe.Reverse = new_instancemethod(_ChFiDS.ChFiDS_ListOfStripe_Reverse, None, ChFiDS_ListOfStripe)
ChFiDS_ListOfStripe_swigregister = _ChFiDS.ChFiDS_ListOfStripe_swigregister
ChFiDS_ListOfStripe_swigregister(ChFiDS_ListOfStripe)

class ChFiDS_ListIteratorOfListOfStripe(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_ListIteratorOfListOfStripe_swiginit(self, _ChFiDS.new_ChFiDS_ListIteratorOfListOfStripe(*args))
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ListIteratorOfListOfStripe
ChFiDS_ListIteratorOfListOfStripe.More = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfListOfStripe_More, None, ChFiDS_ListIteratorOfListOfStripe)
ChFiDS_ListIteratorOfListOfStripe.Next = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfListOfStripe_Next, None, ChFiDS_ListIteratorOfListOfStripe)
ChFiDS_ListIteratorOfListOfStripe.Value = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfListOfStripe_Value, None, ChFiDS_ListIteratorOfListOfStripe)
ChFiDS_ListIteratorOfListOfStripe.ChangeValue = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfListOfStripe_ChangeValue, None, ChFiDS_ListIteratorOfListOfStripe)
ChFiDS_ListIteratorOfListOfStripe_swigregister = _ChFiDS.ChFiDS_ListIteratorOfListOfStripe_swigregister
ChFiDS_ListIteratorOfListOfStripe_swigregister(ChFiDS_ListIteratorOfListOfStripe)

class ChFiDS_Regularities(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_Regularities_swiginit(self, _ChFiDS.new_ChFiDS_Regularities(*args))
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_Regularities
ChFiDS_Regularities.begin = new_instancemethod(_ChFiDS.ChFiDS_Regularities_begin, None, ChFiDS_Regularities)
ChFiDS_Regularities.end = new_instancemethod(_ChFiDS.ChFiDS_Regularities_end, None, ChFiDS_Regularities)
ChFiDS_Regularities.cbegin = new_instancemethod(_ChFiDS.ChFiDS_Regularities_cbegin, None, ChFiDS_Regularities)
ChFiDS_Regularities.cend = new_instancemethod(_ChFiDS.ChFiDS_Regularities_cend, None, ChFiDS_Regularities)
ChFiDS_Regularities.Size = new_instancemethod(_ChFiDS.ChFiDS_Regularities_Size, None, ChFiDS_Regularities)
ChFiDS_Regularities.Assign = new_instancemethod(_ChFiDS.ChFiDS_Regularities_Assign, None, ChFiDS_Regularities)
ChFiDS_Regularities.Set = new_instancemethod(_ChFiDS.ChFiDS_Regularities_Set, None, ChFiDS_Regularities)
ChFiDS_Regularities.Clear = new_instancemethod(_ChFiDS.ChFiDS_Regularities_Clear, None, ChFiDS_Regularities)
ChFiDS_Regularities.First = new_instancemethod(_ChFiDS.ChFiDS_Regularities_First, None, ChFiDS_Regularities)
ChFiDS_Regularities.Last = new_instancemethod(_ChFiDS.ChFiDS_Regularities_Last, None, ChFiDS_Regularities)
ChFiDS_Regularities.Append = new_instancemethod(_ChFiDS.ChFiDS_Regularities_Append, None, ChFiDS_Regularities)
ChFiDS_Regularities.Prepend = new_instancemethod(_ChFiDS.ChFiDS_Regularities_Prepend, None, ChFiDS_Regularities)
ChFiDS_Regularities.RemoveFirst = new_instancemethod(_ChFiDS.ChFiDS_Regularities_RemoveFirst, None, ChFiDS_Regularities)
ChFiDS_Regularities.Remove = new_instancemethod(_ChFiDS.ChFiDS_Regularities_Remove, None, ChFiDS_Regularities)
ChFiDS_Regularities.InsertBefore = new_instancemethod(_ChFiDS.ChFiDS_Regularities_InsertBefore, None, ChFiDS_Regularities)
ChFiDS_Regularities.InsertAfter = new_instancemethod(_ChFiDS.ChFiDS_Regularities_InsertAfter, None, ChFiDS_Regularities)
ChFiDS_Regularities.Reverse = new_instancemethod(_ChFiDS.ChFiDS_Regularities_Reverse, None, ChFiDS_Regularities)
ChFiDS_Regularities_swigregister = _ChFiDS.ChFiDS_Regularities_swigregister
ChFiDS_Regularities_swigregister(ChFiDS_Regularities)

class ChFiDS_ListIteratorOfRegularities(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_ListIteratorOfRegularities_swiginit(self, _ChFiDS.new_ChFiDS_ListIteratorOfRegularities(*args))
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ListIteratorOfRegularities
ChFiDS_ListIteratorOfRegularities.More = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfRegularities_More, None, ChFiDS_ListIteratorOfRegularities)
ChFiDS_ListIteratorOfRegularities.Next = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfRegularities_Next, None, ChFiDS_ListIteratorOfRegularities)
ChFiDS_ListIteratorOfRegularities.Value = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfRegularities_Value, None, ChFiDS_ListIteratorOfRegularities)
ChFiDS_ListIteratorOfRegularities.ChangeValue = new_instancemethod(_ChFiDS.ChFiDS_ListIteratorOfRegularities_ChangeValue, None, ChFiDS_ListIteratorOfRegularities)
ChFiDS_ListIteratorOfRegularities_swigregister = _ChFiDS.ChFiDS_ListIteratorOfRegularities_swigregister
ChFiDS_ListIteratorOfRegularities_swigregister(ChFiDS_ListIteratorOfRegularities)

class ChFiDS_CircSection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _ChFiDS.ChFiDS_CircSection_swiginit(self, _ChFiDS.new_ChFiDS_CircSection(*args))

    def Get(self, *args) -> "void":
        """
        :param C:
        	:type C: gp_Circ
        	:param F:
        	:type F: float
        	:param L:
        	:type L: float
        	:rtype: None
        :param C:
        	:type C: gp_Lin
        	:param F:
        	:type F: float
        	:param L:
        	:type L: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_CircSection_Get(self, *args)


    def Set(self, *args) -> "void":
        """
        :param C:
        	:type C: gp_Circ
        	:param F:
        	:type F: float
        	:param L:
        	:type L: float
        	:rtype: None
        :param C:
        	:type C: gp_Lin
        	:param F:
        	:type F: float
        	:param L:
        	:type L: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_CircSection_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_CircSection
ChFiDS_CircSection.Get = new_instancemethod(_ChFiDS.ChFiDS_CircSection_Get, None, ChFiDS_CircSection)
ChFiDS_CircSection.Set = new_instancemethod(_ChFiDS.ChFiDS_CircSection_Set, None, ChFiDS_CircSection)
ChFiDS_CircSection_swigregister = _ChFiDS.ChFiDS_CircSection_swigregister
ChFiDS_CircSection_swigregister(ChFiDS_CircSection)

class ChFiDS_CommonPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Arc(self, *args) -> "TopoDS_Edge const":
        """
        * Returns the arc of restriction containing the vertex.
        	:rtype: TopoDS_Edge
        """
        return _ChFiDS.ChFiDS_CommonPoint_Arc(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ChFiDS.ChFiDS_CommonPoint_swiginit(self, _ChFiDS.new_ChFiDS_CommonPoint(*args))

    def HasVector(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the output vector is stored.
        	:rtype: bool
        """
        return _ChFiDS.ChFiDS_CommonPoint_HasVector(self, *args)


    def IsOnArc(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the point is a on an edge of the initial restriction facet of the surface.
        	:rtype: bool
        """
        return _ChFiDS.ChFiDS_CommonPoint_IsOnArc(self, *args)


    def IsVertex(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the point is a vertex on the initial restriction facet of the surface.
        	:rtype: bool
        """
        return _ChFiDS.ChFiDS_CommonPoint_IsVertex(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter the paramter on the spine
        	:rtype: float
        """
        return _ChFiDS.ChFiDS_CommonPoint_Parameter(self, *args)


    def ParameterOnArc(self, *args) -> "Standard_Real":
        """
        * Returns the parameter of the point on the arc returned by the method Arc().
        	:rtype: float
        """
        return _ChFiDS.ChFiDS_CommonPoint_ParameterOnArc(self, *args)


    def Point(self, *args) -> "gp_Pnt const":
        """
        * Returns the 3d point
        	:rtype: gp_Pnt
        """
        return _ChFiDS.ChFiDS_CommonPoint_Point(self, *args)


    def Reset(self, *args) -> "void":
        """
        * default value for all fields
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_CommonPoint_Reset(self, *args)


    def SetArc(self, *args) -> "void":
        """
        * Sets the values of a point which is on the arc A, at parameter Param.
        	:param Tol:
        	:type Tol: float
        	:param A:
        	:type A: TopoDS_Edge
        	:param Param:
        	:type Param: float
        	:param TArc:
        	:type TArc: TopAbs_Orientation
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_CommonPoint_SetArc(self, *args)


    def SetParameter(self, *args) -> "void":
        """
        * Sets the value of the parameter on the spine
        	:param Param:
        	:type Param: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_CommonPoint_SetParameter(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        * Set the 3d point for a commonpoint that is not a vertex or on an arc.
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_CommonPoint_SetPoint(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * This method set the fuzziness on the point.
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_CommonPoint_SetTolerance(self, *args)


    def SetVector(self, *args) -> "void":
        """
        * Set the output 3d vector
        	:param theVector:
        	:type theVector: gp_Vec
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_CommonPoint_SetVector(self, *args)


    def SetVertex(self, *args) -> "void":
        """
        * Sets the values of a point which is a vertex on the initial facet of restriction of one of the surface.
        	:param theVertex:
        	:type theVertex: TopoDS_Vertex
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_CommonPoint_SetVertex(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        * This method returns the fuzziness on the point.
        	:rtype: float
        """
        return _ChFiDS.ChFiDS_CommonPoint_Tolerance(self, *args)


    def TransitionOnArc(self, *args) -> "TopAbs_Orientation":
        """
        * Returns the transition of the point on the arc returned by Arc().
        	:rtype: TopAbs_Orientation
        """
        return _ChFiDS.ChFiDS_CommonPoint_TransitionOnArc(self, *args)


    def Vector(self, *args) -> "gp_Vec const":
        """
        * Returns the output 3d vector
        	:rtype: gp_Vec
        """
        return _ChFiDS.ChFiDS_CommonPoint_Vector(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex const":
        """
        * Returns the information about the point when it is on the domain of the first patch, i-e when the function IsVertex returns True. Otherwise, an exception is raised.
        	:rtype: TopoDS_Vertex
        """
        return _ChFiDS.ChFiDS_CommonPoint_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_CommonPoint
ChFiDS_CommonPoint.Arc = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_Arc, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.HasVector = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_HasVector, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.IsOnArc = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_IsOnArc, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.IsVertex = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_IsVertex, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.Parameter = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_Parameter, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.ParameterOnArc = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_ParameterOnArc, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.Point = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_Point, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.Reset = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_Reset, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.SetArc = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_SetArc, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.SetParameter = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_SetParameter, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.SetPoint = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_SetPoint, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.SetTolerance = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_SetTolerance, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.SetVector = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_SetVector, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.SetVertex = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_SetVertex, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.Tolerance = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_Tolerance, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.TransitionOnArc = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_TransitionOnArc, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.Vector = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_Vector, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint.Vertex = new_instancemethod(_ChFiDS.ChFiDS_CommonPoint_Vertex, None, ChFiDS_CommonPoint)
ChFiDS_CommonPoint_swigregister = _ChFiDS.ChFiDS_CommonPoint_swigregister
ChFiDS_CommonPoint_swigregister(ChFiDS_CommonPoint)

class ChFiDS_ElSpine(OCC.Core.Adaptor3d.Adaptor3d_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddVertexWithTangent(self, *args) -> "void":
        """
        :param anAx1:
        	:type anAx1: gp_Ax1
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ElSpine_AddVertexWithTangent(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _ChFiDS.ChFiDS_ElSpine_swiginit(self, _ChFiDS.new_ChFiDS_ElSpine(*args))

    def ChangeNext(self, *args) -> "opencascade::handle< ChFiDS_SurfData > &":
        """:rtype: opencascade::handle<ChFiDS_SurfData>"""
        return _ChFiDS.ChFiDS_ElSpine_ChangeNext(self, *args)


    def ChangePrevious(self, *args) -> "opencascade::handle< ChFiDS_SurfData > &":
        """:rtype: opencascade::handle<ChFiDS_SurfData>"""
        return _ChFiDS.ChFiDS_ElSpine_ChangePrevious(self, *args)


    def FirstParameter(self, *args) -> "void":
        """
        :rtype: float
        :param P:
        	:type P: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ElSpine_FirstParameter(self, *args)


    def FirstPointAndTgt(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param T:
        	:type T: gp_Vec
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ElSpine_FirstPointAndTgt(self, *args)


    def GetSavedFirstParameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _ChFiDS.ChFiDS_ElSpine_GetSavedFirstParameter(self, *args)


    def GetSavedLastParameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _ChFiDS.ChFiDS_ElSpine_GetSavedLastParameter(self, *args)


    def LastParameter(self, *args) -> "void":
        """
        :rtype: float
        :param P:
        	:type P: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ElSpine_LastParameter(self, *args)


    def LastPointAndTgt(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param T:
        	:type T: gp_Vec
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ElSpine_LastPointAndTgt(self, *args)


    def NbVertices(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_ElSpine_NbVertices(self, *args)


    def Next(self, *args) -> "opencascade::handle< ChFiDS_SurfData > const &":
        """:rtype: opencascade::handle<ChFiDS_SurfData>"""
        return _ChFiDS.ChFiDS_ElSpine_Next(self, *args)


    def Previous(self, *args) -> "opencascade::handle< ChFiDS_SurfData > const &":
        """:rtype: opencascade::handle<ChFiDS_SurfData>"""
        return _ChFiDS.ChFiDS_ElSpine_Previous(self, *args)


    def SaveFirstParameter(self, *args) -> "void":
        """:rtype: None"""
        return _ChFiDS.ChFiDS_ElSpine_SaveFirstParameter(self, *args)


    def SaveLastParameter(self, *args) -> "void":
        """:rtype: None"""
        return _ChFiDS.ChFiDS_ElSpine_SaveLastParameter(self, *args)


    def SetCurve(self, *args) -> "void":
        """
        :param C:
        	:type C: Geom_Curve
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ElSpine_SetCurve(self, *args)


    def SetFirstPointAndTgt(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param T:
        	:type T: gp_Vec
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ElSpine_SetFirstPointAndTgt(self, *args)


    def SetLastPointAndTgt(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param T:
        	:type T: gp_Vec
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ElSpine_SetLastPointAndTgt(self, *args)


    def SetOrigin(self, *args) -> "void":
        """
        :param O:
        	:type O: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ElSpine_SetOrigin(self, *args)


    def SetPeriodic(self, *args) -> "void":
        """
        :param I:
        	:type I: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ElSpine_SetPeriodic(self, *args)


    def VertexWithTangent(self, *args) -> "gp_Ax1 const":
        """
        :param Index:
        	:type Index: int
        	:rtype: gp_Ax1
        """
        return _ChFiDS.ChFiDS_ElSpine_VertexWithTangent(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ElSpine
ChFiDS_ElSpine.AddVertexWithTangent = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_AddVertexWithTangent, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.ChangeNext = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_ChangeNext, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.ChangePrevious = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_ChangePrevious, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.FirstParameter = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_FirstParameter, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.FirstPointAndTgt = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_FirstPointAndTgt, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.GetSavedFirstParameter = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_GetSavedFirstParameter, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.GetSavedLastParameter = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_GetSavedLastParameter, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.LastParameter = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_LastParameter, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.LastPointAndTgt = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_LastPointAndTgt, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.NbVertices = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_NbVertices, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.Next = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_Next, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.Previous = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_Previous, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.SaveFirstParameter = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_SaveFirstParameter, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.SaveLastParameter = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_SaveLastParameter, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.SetCurve = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_SetCurve, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.SetFirstPointAndTgt = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_SetFirstPointAndTgt, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.SetLastPointAndTgt = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_SetLastPointAndTgt, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.SetOrigin = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_SetOrigin, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.SetPeriodic = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_SetPeriodic, None, ChFiDS_ElSpine)
ChFiDS_ElSpine.VertexWithTangent = new_instancemethod(_ChFiDS.ChFiDS_ElSpine_VertexWithTangent, None, ChFiDS_ElSpine)
ChFiDS_ElSpine_swigregister = _ChFiDS.ChFiDS_ElSpine_swigregister
ChFiDS_ElSpine_swigregister(ChFiDS_ElSpine)

class ChFiDS_FaceInterference(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _ChFiDS.ChFiDS_FaceInterference_swiginit(self, _ChFiDS.new_ChFiDS_FaceInterference(*args))

    def ChangePCurveOnFace(self, *args) -> "opencascade::handle< Geom2d_Curve > &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _ChFiDS.ChFiDS_FaceInterference_ChangePCurveOnFace(self, *args)


    def ChangePCurveOnSurf(self, *args) -> "opencascade::handle< Geom2d_Curve > &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _ChFiDS.ChFiDS_FaceInterference_ChangePCurveOnSurf(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _ChFiDS.ChFiDS_FaceInterference_FirstParameter(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _ChFiDS.ChFiDS_FaceInterference_LastParameter(self, *args)


    def LineIndex(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_FaceInterference_LineIndex(self, *args)


    def PCurveOnFace(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _ChFiDS.ChFiDS_FaceInterference_PCurveOnFace(self, *args)


    def PCurveOnSurf(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _ChFiDS.ChFiDS_FaceInterference_PCurveOnSurf(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        :param IsFirst:
        	:type IsFirst: bool
        	:rtype: float
        """
        return _ChFiDS.ChFiDS_FaceInterference_Parameter(self, *args)


    def SetFirstParameter(self, *args) -> "void":
        """
        :param U1:
        	:type U1: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_FaceInterference_SetFirstParameter(self, *args)


    def SetInterference(self, *args) -> "void":
        """
        :param LineIndex:
        	:type LineIndex: int
        	:param Trans:
        	:type Trans: TopAbs_Orientation
        	:param PCurv1:
        	:type PCurv1: Geom2d_Curve
        	:param PCurv2:
        	:type PCurv2: Geom2d_Curve
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_FaceInterference_SetInterference(self, *args)


    def SetLastParameter(self, *args) -> "void":
        """
        :param U1:
        	:type U1: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_FaceInterference_SetLastParameter(self, *args)


    def SetLineIndex(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_FaceInterference_SetLineIndex(self, *args)


    def SetParameter(self, *args) -> "void":
        """
        :param U1:
        	:type U1: float
        	:param IsFirst:
        	:type IsFirst: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_FaceInterference_SetParameter(self, *args)


    def SetTransition(self, *args) -> "void":
        """
        :param Trans:
        	:type Trans: TopAbs_Orientation
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_FaceInterference_SetTransition(self, *args)


    def Transition(self, *args) -> "TopAbs_Orientation":
        """:rtype: TopAbs_Orientation"""
        return _ChFiDS.ChFiDS_FaceInterference_Transition(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_FaceInterference
ChFiDS_FaceInterference.ChangePCurveOnFace = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_ChangePCurveOnFace, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.ChangePCurveOnSurf = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_ChangePCurveOnSurf, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.FirstParameter = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_FirstParameter, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.LastParameter = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_LastParameter, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.LineIndex = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_LineIndex, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.PCurveOnFace = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_PCurveOnFace, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.PCurveOnSurf = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_PCurveOnSurf, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.Parameter = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_Parameter, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.SetFirstParameter = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_SetFirstParameter, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.SetInterference = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_SetInterference, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.SetLastParameter = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_SetLastParameter, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.SetLineIndex = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_SetLineIndex, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.SetParameter = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_SetParameter, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.SetTransition = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_SetTransition, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference.Transition = new_instancemethod(_ChFiDS.ChFiDS_FaceInterference_Transition, None, ChFiDS_FaceInterference)
ChFiDS_FaceInterference_swigregister = _ChFiDS.ChFiDS_FaceInterference_swigregister
ChFiDS_FaceInterference_swigregister(ChFiDS_FaceInterference)

class ChFiDS_HElSpine(OCC.Core.Adaptor3d.Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty GenHCurve.
        	:rtype: None
        * Creates a GenHCurve from a Curve
        	:param C:
        	:type C: ChFiDS_ElSpine
        	:rtype: None
        """
        _ChFiDS.ChFiDS_HElSpine_swiginit(self, _ChFiDS.new_ChFiDS_HElSpine(*args))

    def ChangeCurve(self, *args) -> "ChFiDS_ElSpine &":
        """
        * Returns the curve used to create the GenHCurve.
        	:rtype: ChFiDS_ElSpine
        """
        return _ChFiDS.ChFiDS_HElSpine_ChangeCurve(self, *args)


    def Set(self, *args) -> "void":
        """
        * Sets the field of the GenHCurve.
        	:param C:
        	:type C: ChFiDS_ElSpine
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_HElSpine_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_HElSpine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_HElSpine
ChFiDS_HElSpine.ChangeCurve = new_instancemethod(_ChFiDS.ChFiDS_HElSpine_ChangeCurve, None, ChFiDS_HElSpine)
ChFiDS_HElSpine.Set = new_instancemethod(_ChFiDS.ChFiDS_HElSpine_Set, None, ChFiDS_HElSpine)
ChFiDS_HElSpine_swigregister = _ChFiDS.ChFiDS_HElSpine_swigregister
ChFiDS_HElSpine_swigregister(ChFiDS_HElSpine)

class ChFiDS_Map(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create an empty Map
        	:rtype: None
        """
        _ChFiDS.ChFiDS_Map_swiginit(self, _ChFiDS.new_ChFiDS_Map(*args))

    def Contains(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _ChFiDS.ChFiDS_Map_Contains(self, *args)


    def Fill(self, *args) -> "void":
        """
        * Fills the map with the subshapes of type T1 as keys and the list of ancestors of type T2 as items.
        	:param S:
        	:type S: TopoDS_Shape
        	:param T1:
        	:type T1: TopAbs_ShapeEnum
        	:param T2:
        	:type T2: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Map_Fill(self, *args)


    def FindFromIndex(self, *args) -> "TopTools_ListOfShape const &":
        """
        :param I:
        	:type I: int
        	:rtype: TopTools_ListOfShape
        """
        return _ChFiDS.ChFiDS_Map_FindFromIndex(self, *args)


    def FindFromKey(self, *args) -> "TopTools_ListOfShape const &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: TopTools_ListOfShape
        """
        return _ChFiDS.ChFiDS_Map_FindFromKey(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_Map
ChFiDS_Map.Contains = new_instancemethod(_ChFiDS.ChFiDS_Map_Contains, None, ChFiDS_Map)
ChFiDS_Map.Fill = new_instancemethod(_ChFiDS.ChFiDS_Map_Fill, None, ChFiDS_Map)
ChFiDS_Map.FindFromIndex = new_instancemethod(_ChFiDS.ChFiDS_Map_FindFromIndex, None, ChFiDS_Map)
ChFiDS_Map.FindFromKey = new_instancemethod(_ChFiDS.ChFiDS_Map_FindFromKey, None, ChFiDS_Map)
ChFiDS_Map_swigregister = _ChFiDS.ChFiDS_Map_swigregister
ChFiDS_Map_swigregister(ChFiDS_Map)

class ChFiDS_Regul(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _ChFiDS.ChFiDS_Regul_swiginit(self, _ChFiDS.new_ChFiDS_Regul(*args))

    def Curve(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Regul_Curve(self, *args)


    def IsSurface1(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ChFiDS.ChFiDS_Regul_IsSurface1(self, *args)


    def IsSurface2(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ChFiDS.ChFiDS_Regul_IsSurface2(self, *args)


    def S1(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Regul_S1(self, *args)


    def S2(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Regul_S2(self, *args)


    def SetCurve(self, *args) -> "void":
        """
        :param IC:
        	:type IC: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Regul_SetCurve(self, *args)


    def SetS1(self, *args) -> "void":
        """
        :param IS1:
        	:type IS1: int
        	:param IsFace: default value is Standard_True
        	:type IsFace: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Regul_SetS1(self, *args)


    def SetS2(self, *args) -> "void":
        """
        :param IS2:
        	:type IS2: int
        	:param IsFace: default value is Standard_True
        	:type IsFace: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Regul_SetS2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_Regul
ChFiDS_Regul.Curve = new_instancemethod(_ChFiDS.ChFiDS_Regul_Curve, None, ChFiDS_Regul)
ChFiDS_Regul.IsSurface1 = new_instancemethod(_ChFiDS.ChFiDS_Regul_IsSurface1, None, ChFiDS_Regul)
ChFiDS_Regul.IsSurface2 = new_instancemethod(_ChFiDS.ChFiDS_Regul_IsSurface2, None, ChFiDS_Regul)
ChFiDS_Regul.S1 = new_instancemethod(_ChFiDS.ChFiDS_Regul_S1, None, ChFiDS_Regul)
ChFiDS_Regul.S2 = new_instancemethod(_ChFiDS.ChFiDS_Regul_S2, None, ChFiDS_Regul)
ChFiDS_Regul.SetCurve = new_instancemethod(_ChFiDS.ChFiDS_Regul_SetCurve, None, ChFiDS_Regul)
ChFiDS_Regul.SetS1 = new_instancemethod(_ChFiDS.ChFiDS_Regul_SetS1, None, ChFiDS_Regul)
ChFiDS_Regul.SetS2 = new_instancemethod(_ChFiDS.ChFiDS_Regul_SetS2, None, ChFiDS_Regul)
ChFiDS_Regul_swigregister = _ChFiDS.ChFiDS_Regul_swigregister
ChFiDS_Regul_swigregister(ChFiDS_Regul)

class ChFiDS_Spine(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Absc(self, *args) -> "Standard_Real":
        """
        :param U:
        	:type U: float
        	:rtype: float
        :param U:
        	:type U: float
        	:param I:
        	:type I: int
        	:rtype: float
        :param V:
        	:type V: TopoDS_Vertex
        	:rtype: float
        """
        return _ChFiDS.ChFiDS_Spine_Absc(self, *args)


    def AppendElSpine(self, *args) -> "void":
        """
        :param Els:
        	:type Els: ChFiDS_HElSpine
        	:rtype: void
        """
        return _ChFiDS.ChFiDS_Spine_AppendElSpine(self, *args)


    def AppendOffsetElSpine(self, *args) -> "void":
        """
        :param Els:
        	:type Els: ChFiDS_HElSpine
        	:rtype: void
        """
        return _ChFiDS.ChFiDS_Spine_AppendOffsetElSpine(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _ChFiDS.ChFiDS_Spine_swiginit(self, _ChFiDS.new_ChFiDS_Spine(*args))

    def ChangeElSpines(self, *args) -> "ChFiDS_ListOfHElSpine &":
        """:rtype: ChFiDS_ListOfHElSpine"""
        return _ChFiDS.ChFiDS_Spine_ChangeElSpines(self, *args)


    def ChangeOffsetElSpines(self, *args) -> "ChFiDS_ListOfHElSpine &":
        """:rtype: ChFiDS_ListOfHElSpine"""
        return _ChFiDS.ChFiDS_Spine_ChangeOffsetElSpines(self, *args)


    def Circle(self, *args) -> "gp_Circ":
        """:rtype: gp_Circ"""
        return _ChFiDS.ChFiDS_Spine_Circle(self, *args)


    def CurrentElementarySpine(self, *args) -> "BRepAdaptor_Curve const &":
        """
        * sets the current curve and returns it
        	:param Index:
        	:type Index: int
        	:rtype: BRepAdaptor_Curve
        """
        return _ChFiDS.ChFiDS_Spine_CurrentElementarySpine(self, *args)


    def CurrentIndexOfElementarySpine(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Spine_CurrentIndexOfElementarySpine(self, *args)


    def D0(self, *args) -> "void":
        """
        :param AbsC:
        	:type AbsC: float
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        :param AbsC:
        	:type AbsC: float
        	:param P:
        	:type P: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        :param AbsC:
        	:type AbsC: float
        	:param P:
        	:type P: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:param V2:
        	:type V2: gp_Vec
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_D2(self, *args)


    def Edges(self, *args) -> "TopoDS_Edge const":
        """
        :param I:
        	:type I: int
        	:rtype: TopoDS_Edge
        """
        return _ChFiDS.ChFiDS_Spine_Edges(self, *args)


    def ElSpine(self, *args) -> "opencascade::handle< ChFiDS_HElSpine >":
        """
        :param IE:
        	:type IE: int
        	:rtype: opencascade::handle<ChFiDS_HElSpine>
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: opencascade::handle<ChFiDS_HElSpine>
        :param W:
        	:type W: float
        	:rtype: opencascade::handle<ChFiDS_HElSpine>
        """
        return _ChFiDS.ChFiDS_Spine_ElSpine(self, *args)


    def ErrorStatus(self, *args) -> "ChFiDS_ErrorStatus":
        """:rtype: ChFiDS_ErrorStatus"""
        return _ChFiDS.ChFiDS_Spine_ErrorStatus(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        :rtype: float
        * gives the total length of all arcs before the number IndexSp
        	:param IndexSpine:
        	:type IndexSpine: int
        	:rtype: float
        """
        return _ChFiDS.ChFiDS_Spine_FirstParameter(self, *args)


    def FirstStatus(self, *args) -> "ChFiDS_State":
        """
        * returns if the set of edges starts on a free boundary or if the first vertex is a breakpoint or if the set is closed
        	:rtype: ChFiDS_State
        """
        return _ChFiDS.ChFiDS_Spine_FirstStatus(self, *args)


    def FirstVertex(self, *args) -> "TopoDS_Vertex":
        """:rtype: TopoDS_Vertex"""
        return _ChFiDS.ChFiDS_Spine_FirstVertex(self, *args)


    def GetType(self, *args) -> "GeomAbs_CurveType":
        """:rtype: GeomAbs_CurveType"""
        return _ChFiDS.ChFiDS_Spine_GetType(self, *args)


    def HasFirstTgt(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ChFiDS.ChFiDS_Spine_HasFirstTgt(self, *args)


    def HasLastTgt(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ChFiDS.ChFiDS_Spine_HasLastTgt(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        :param W:
        	:type W: float
        	:param Forward: default value is Standard_True
        	:type Forward: bool
        	:rtype: int
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: int
        """
        return _ChFiDS.ChFiDS_Spine_Index(self, *args)


    def IsClosed(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ChFiDS.ChFiDS_Spine_IsClosed(self, *args)


    def IsPeriodic(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ChFiDS.ChFiDS_Spine_IsPeriodic(self, *args)


    def IsTangencyExtremity(self, *args) -> "Standard_Boolean":
        """
        * returns if the set of edges starts (or end) on Tangency point.
        	:param IsFirst:
        	:type IsFirst: bool
        	:rtype: bool
        """
        return _ChFiDS.ChFiDS_Spine_IsTangencyExtremity(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        :rtype: float
        * gives the total length till the ark with number IndexSpine (inclus)
        	:param IndexSpine:
        	:type IndexSpine: int
        	:rtype: float
        """
        return _ChFiDS.ChFiDS_Spine_LastParameter(self, *args)


    def LastStatus(self, *args) -> "ChFiDS_State":
        """
        * returns the state at the end of the set
        	:rtype: ChFiDS_State
        """
        return _ChFiDS.ChFiDS_Spine_LastStatus(self, *args)


    def LastVertex(self, *args) -> "TopoDS_Vertex":
        """:rtype: TopoDS_Vertex"""
        return _ChFiDS.ChFiDS_Spine_LastVertex(self, *args)


    def Length(self, *args) -> "Standard_Real":
        """
        * gives the length of ark with number IndexSp
        	:param IndexSpine:
        	:type IndexSpine: int
        	:rtype: float
        """
        return _ChFiDS.ChFiDS_Spine_Length(self, *args)


    def Line(self, *args) -> "gp_Lin":
        """:rtype: gp_Lin"""
        return _ChFiDS.ChFiDS_Spine_Line(self, *args)


    def Load(self, *args) -> "void":
        """
        * prepare the guideline depending on the edges that are elementary arks (take parameters from a single curvilinear abscissa); to be able to call methods on the geometry (first,last,value,d1,d2) it is necessary to start with preparation otherwise an exception will be raised
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_Load(self, *args)


    def Mode(self, *args) -> "ChFiDS_ChamfMode":
        """
        * Return the mode of chamfers used
        	:rtype: ChFiDS_ChamfMode
        """
        return _ChFiDS.ChFiDS_Spine_Mode(self, *args)


    def NbEdges(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Spine_NbEdges(self, *args)


    def OffsetEdges(self, *args) -> "TopoDS_Edge const":
        """
        :param I:
        	:type I: int
        	:rtype: TopoDS_Edge
        """
        return _ChFiDS.ChFiDS_Spine_OffsetEdges(self, *args)


    def Parameter(self, *args) -> "void":
        """
        :param AbsC:
        	:type AbsC: float
        	:param U:
        	:type U: float
        	:param Oriented: default value is Standard_True
        	:type Oriented: bool
        	:rtype: None
        :param Index:
        	:type Index: int
        	:param AbsC:
        	:type AbsC: float
        	:param U:
        	:type U: float
        	:param Oriented: default value is Standard_True
        	:type Oriented: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_Parameter(self, *args)


    def Period(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _ChFiDS.ChFiDS_Spine_Period(self, *args)


    def PutInFirst(self, *args) -> "void":
        """
        * store the edge at the first position before all others
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_PutInFirst(self, *args)


    def PutInFirstOffset(self, *args) -> "void":
        """
        * store the offset edge at the first position before all others
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_PutInFirstOffset(self, *args)


    def Reset(self, *args) -> "void":
        """
        :param AllData: default value is Standard_False
        	:type AllData: bool
        	:rtype: void
        """
        return _ChFiDS.ChFiDS_Spine_Reset(self, *args)


    def Resolution(self, *args) -> "Standard_Real":
        """
        :param R3d:
        	:type R3d: float
        	:rtype: float
        """
        return _ChFiDS.ChFiDS_Spine_Resolution(self, *args)


    def SetCurrent(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetCurrent(self, *args)


    def SetEdges(self, *args) -> "void":
        """
        * store edges composing the guideline
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetEdges(self, *args)


    def SetErrorStatus(self, *args) -> "void":
        """
        :param state:
        	:type state: ChFiDS_ErrorStatus
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetErrorStatus(self, *args)


    def SetFirstParameter(self, *args) -> "void":
        """
        :param Par:
        	:type Par: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetFirstParameter(self, *args)


    def SetFirstStatus(self, *args) -> "void":
        """
        * stores if the start of a set of edges starts on a section of free border or forms a closed contour
        	:param S:
        	:type S: ChFiDS_State
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetFirstStatus(self, *args)


    def SetFirstTgt(self, *args) -> "void":
        """
        :param W:
        	:type W: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetFirstTgt(self, *args)


    def SetLastParameter(self, *args) -> "void":
        """
        :param Par:
        	:type Par: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetLastParameter(self, *args)


    def SetLastStatus(self, *args) -> "void":
        """
        * stores if the end of a set of edges starts on a section of free border or forms a closed contour
        	:param S:
        	:type S: ChFiDS_State
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetLastStatus(self, *args)


    def SetLastTgt(self, *args) -> "void":
        """
        :param W:
        	:type W: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetLastTgt(self, *args)


    def SetOffsetEdges(self, *args) -> "void":
        """
        * store offset edges composing the offset guideline
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetOffsetEdges(self, *args)


    def SetReference(self, *args) -> "void":
        """
        * set a parameter reference for the approx.
        	:param W:
        	:type W: float
        	:rtype: None
        * set a parameter reference for the approx, at the middle of edge I.
        	:param I:
        	:type I: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetReference(self, *args)


    def SetStatus(self, *args) -> "void":
        """
        :param S:
        	:type S: ChFiDS_State
        	:param IsFirst:
        	:type IsFirst: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetStatus(self, *args)


    def SetTangencyExtremity(self, *args) -> "void":
        """
        :param IsTangency:
        	:type IsTangency: bool
        	:param IsFirst:
        	:type IsFirst: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SetTangencyExtremity(self, *args)


    def SplitDone(self, *args) -> "void":
        """
        :rtype: bool
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Spine_SplitDone(self, *args)


    def Status(self, *args) -> "ChFiDS_State":
        """
        :param IsFirst:
        	:type IsFirst: bool
        	:rtype: ChFiDS_State
        """
        return _ChFiDS.ChFiDS_Spine_Status(self, *args)


    def UnsetReference(self, *args) -> "void":
        """:rtype: None"""
        return _ChFiDS.ChFiDS_Spine_UnsetReference(self, *args)


    def Value(self, *args) -> "gp_Pnt":
        """
        :param AbsC:
        	:type AbsC: float
        	:rtype: gp_Pnt
        """
        return _ChFiDS.ChFiDS_Spine_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_Spine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_Spine
ChFiDS_Spine.Absc = new_instancemethod(_ChFiDS.ChFiDS_Spine_Absc, None, ChFiDS_Spine)
ChFiDS_Spine.AppendElSpine = new_instancemethod(_ChFiDS.ChFiDS_Spine_AppendElSpine, None, ChFiDS_Spine)
ChFiDS_Spine.AppendOffsetElSpine = new_instancemethod(_ChFiDS.ChFiDS_Spine_AppendOffsetElSpine, None, ChFiDS_Spine)
ChFiDS_Spine.ChangeElSpines = new_instancemethod(_ChFiDS.ChFiDS_Spine_ChangeElSpines, None, ChFiDS_Spine)
ChFiDS_Spine.ChangeOffsetElSpines = new_instancemethod(_ChFiDS.ChFiDS_Spine_ChangeOffsetElSpines, None, ChFiDS_Spine)
ChFiDS_Spine.Circle = new_instancemethod(_ChFiDS.ChFiDS_Spine_Circle, None, ChFiDS_Spine)
ChFiDS_Spine.CurrentElementarySpine = new_instancemethod(_ChFiDS.ChFiDS_Spine_CurrentElementarySpine, None, ChFiDS_Spine)
ChFiDS_Spine.CurrentIndexOfElementarySpine = new_instancemethod(_ChFiDS.ChFiDS_Spine_CurrentIndexOfElementarySpine, None, ChFiDS_Spine)
ChFiDS_Spine.D0 = new_instancemethod(_ChFiDS.ChFiDS_Spine_D0, None, ChFiDS_Spine)
ChFiDS_Spine.D1 = new_instancemethod(_ChFiDS.ChFiDS_Spine_D1, None, ChFiDS_Spine)
ChFiDS_Spine.D2 = new_instancemethod(_ChFiDS.ChFiDS_Spine_D2, None, ChFiDS_Spine)
ChFiDS_Spine.Edges = new_instancemethod(_ChFiDS.ChFiDS_Spine_Edges, None, ChFiDS_Spine)
ChFiDS_Spine.ElSpine = new_instancemethod(_ChFiDS.ChFiDS_Spine_ElSpine, None, ChFiDS_Spine)
ChFiDS_Spine.ErrorStatus = new_instancemethod(_ChFiDS.ChFiDS_Spine_ErrorStatus, None, ChFiDS_Spine)
ChFiDS_Spine.FirstParameter = new_instancemethod(_ChFiDS.ChFiDS_Spine_FirstParameter, None, ChFiDS_Spine)
ChFiDS_Spine.FirstStatus = new_instancemethod(_ChFiDS.ChFiDS_Spine_FirstStatus, None, ChFiDS_Spine)
ChFiDS_Spine.FirstVertex = new_instancemethod(_ChFiDS.ChFiDS_Spine_FirstVertex, None, ChFiDS_Spine)
ChFiDS_Spine.GetType = new_instancemethod(_ChFiDS.ChFiDS_Spine_GetType, None, ChFiDS_Spine)
ChFiDS_Spine.HasFirstTgt = new_instancemethod(_ChFiDS.ChFiDS_Spine_HasFirstTgt, None, ChFiDS_Spine)
ChFiDS_Spine.HasLastTgt = new_instancemethod(_ChFiDS.ChFiDS_Spine_HasLastTgt, None, ChFiDS_Spine)
ChFiDS_Spine.Index = new_instancemethod(_ChFiDS.ChFiDS_Spine_Index, None, ChFiDS_Spine)
ChFiDS_Spine.IsClosed = new_instancemethod(_ChFiDS.ChFiDS_Spine_IsClosed, None, ChFiDS_Spine)
ChFiDS_Spine.IsPeriodic = new_instancemethod(_ChFiDS.ChFiDS_Spine_IsPeriodic, None, ChFiDS_Spine)
ChFiDS_Spine.IsTangencyExtremity = new_instancemethod(_ChFiDS.ChFiDS_Spine_IsTangencyExtremity, None, ChFiDS_Spine)
ChFiDS_Spine.LastParameter = new_instancemethod(_ChFiDS.ChFiDS_Spine_LastParameter, None, ChFiDS_Spine)
ChFiDS_Spine.LastStatus = new_instancemethod(_ChFiDS.ChFiDS_Spine_LastStatus, None, ChFiDS_Spine)
ChFiDS_Spine.LastVertex = new_instancemethod(_ChFiDS.ChFiDS_Spine_LastVertex, None, ChFiDS_Spine)
ChFiDS_Spine.Length = new_instancemethod(_ChFiDS.ChFiDS_Spine_Length, None, ChFiDS_Spine)
ChFiDS_Spine.Line = new_instancemethod(_ChFiDS.ChFiDS_Spine_Line, None, ChFiDS_Spine)
ChFiDS_Spine.Load = new_instancemethod(_ChFiDS.ChFiDS_Spine_Load, None, ChFiDS_Spine)
ChFiDS_Spine.Mode = new_instancemethod(_ChFiDS.ChFiDS_Spine_Mode, None, ChFiDS_Spine)
ChFiDS_Spine.NbEdges = new_instancemethod(_ChFiDS.ChFiDS_Spine_NbEdges, None, ChFiDS_Spine)
ChFiDS_Spine.OffsetEdges = new_instancemethod(_ChFiDS.ChFiDS_Spine_OffsetEdges, None, ChFiDS_Spine)
ChFiDS_Spine.Parameter = new_instancemethod(_ChFiDS.ChFiDS_Spine_Parameter, None, ChFiDS_Spine)
ChFiDS_Spine.Period = new_instancemethod(_ChFiDS.ChFiDS_Spine_Period, None, ChFiDS_Spine)
ChFiDS_Spine.PutInFirst = new_instancemethod(_ChFiDS.ChFiDS_Spine_PutInFirst, None, ChFiDS_Spine)
ChFiDS_Spine.PutInFirstOffset = new_instancemethod(_ChFiDS.ChFiDS_Spine_PutInFirstOffset, None, ChFiDS_Spine)
ChFiDS_Spine.Reset = new_instancemethod(_ChFiDS.ChFiDS_Spine_Reset, None, ChFiDS_Spine)
ChFiDS_Spine.Resolution = new_instancemethod(_ChFiDS.ChFiDS_Spine_Resolution, None, ChFiDS_Spine)
ChFiDS_Spine.SetCurrent = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetCurrent, None, ChFiDS_Spine)
ChFiDS_Spine.SetEdges = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetEdges, None, ChFiDS_Spine)
ChFiDS_Spine.SetErrorStatus = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetErrorStatus, None, ChFiDS_Spine)
ChFiDS_Spine.SetFirstParameter = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetFirstParameter, None, ChFiDS_Spine)
ChFiDS_Spine.SetFirstStatus = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetFirstStatus, None, ChFiDS_Spine)
ChFiDS_Spine.SetFirstTgt = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetFirstTgt, None, ChFiDS_Spine)
ChFiDS_Spine.SetLastParameter = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetLastParameter, None, ChFiDS_Spine)
ChFiDS_Spine.SetLastStatus = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetLastStatus, None, ChFiDS_Spine)
ChFiDS_Spine.SetLastTgt = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetLastTgt, None, ChFiDS_Spine)
ChFiDS_Spine.SetOffsetEdges = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetOffsetEdges, None, ChFiDS_Spine)
ChFiDS_Spine.SetReference = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetReference, None, ChFiDS_Spine)
ChFiDS_Spine.SetStatus = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetStatus, None, ChFiDS_Spine)
ChFiDS_Spine.SetTangencyExtremity = new_instancemethod(_ChFiDS.ChFiDS_Spine_SetTangencyExtremity, None, ChFiDS_Spine)
ChFiDS_Spine.SplitDone = new_instancemethod(_ChFiDS.ChFiDS_Spine_SplitDone, None, ChFiDS_Spine)
ChFiDS_Spine.Status = new_instancemethod(_ChFiDS.ChFiDS_Spine_Status, None, ChFiDS_Spine)
ChFiDS_Spine.UnsetReference = new_instancemethod(_ChFiDS.ChFiDS_Spine_UnsetReference, None, ChFiDS_Spine)
ChFiDS_Spine.Value = new_instancemethod(_ChFiDS.ChFiDS_Spine_Value, None, ChFiDS_Spine)
ChFiDS_Spine_swigregister = _ChFiDS.ChFiDS_Spine_swigregister
ChFiDS_Spine_swigregister(ChFiDS_Spine)

class ChFiDS_Stripe(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _ChFiDS.ChFiDS_Stripe_swiginit(self, _ChFiDS.new_ChFiDS_Stripe(*args))

    def ChangeFirstCurve(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_ChangeFirstCurve(self, *args)


    def ChangeFirstPCurve(self, *args) -> "opencascade::handle< Geom2d_Curve > &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _ChFiDS.ChFiDS_Stripe_ChangeFirstPCurve(self, *args)


    def ChangeFirstParameters(self, *args) -> "void":
        """
        :param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_ChangeFirstParameters(self, *args)


    def ChangeIndexFirstPointOnS1(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_ChangeIndexFirstPointOnS1(self, *args)


    def ChangeIndexFirstPointOnS2(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_ChangeIndexFirstPointOnS2(self, *args)


    def ChangeIndexLastPointOnS1(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_ChangeIndexLastPointOnS1(self, *args)


    def ChangeIndexLastPointOnS2(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_ChangeIndexLastPointOnS2(self, *args)


    def ChangeLastCurve(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_ChangeLastCurve(self, *args)


    def ChangeLastPCurve(self, *args) -> "opencascade::handle< Geom2d_Curve > &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _ChFiDS.ChFiDS_Stripe_ChangeLastPCurve(self, *args)


    def ChangeLastParameters(self, *args) -> "void":
        """
        :param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_ChangeLastParameters(self, *args)


    def ChangePCurve(self, *args) -> "opencascade::handle< Geom2d_Curve > &":
        """
        :param First:
        	:type First: bool
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _ChFiDS.ChFiDS_Stripe_ChangePCurve(self, *args)


    def ChangeSetOfSurfData(self, *args) -> "opencascade::handle< ChFiDS_HData > &":
        """:rtype: opencascade::handle<ChFiDS_HData>"""
        return _ChFiDS.ChFiDS_Stripe_ChangeSetOfSurfData(self, *args)


    def ChangeSpine(self, *args) -> "opencascade::handle< ChFiDS_Spine > &":
        """:rtype: opencascade::handle<ChFiDS_Spine>"""
        return _ChFiDS.ChFiDS_Stripe_ChangeSpine(self, *args)


    def Choix(self, *args) -> "void":
        """
        :rtype: int
        :param C:
        	:type C: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_Choix(self, *args)


    def Curve(self, *args) -> "Standard_Integer":
        """
        :param First:
        	:type First: bool
        	:rtype: int
        """
        return _ChFiDS.ChFiDS_Stripe_Curve(self, *args)


    def FirstCurve(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Stripe_FirstCurve(self, *args)


    def FirstPCurve(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _ChFiDS.ChFiDS_Stripe_FirstPCurve(self, *args)


    def FirstPCurveOrientation(self, *args) -> "void":
        """
        :rtype: TopAbs_Orientation
        :param O:
        	:type O: TopAbs_Orientation
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_FirstPCurveOrientation(self, *args)


    def FirstParameters(self, *args) -> "void":
        """
        :param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_FirstParameters(self, *args)


    def InDS(self, *args) -> "void":
        """
        * Set nb of SurfData's at end put in DS
        	:param First:
        	:type First: bool
        	:param Nb: default value is 1
        	:type Nb: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_InDS(self, *args)


    def IndexFirstPointOnS1(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Stripe_IndexFirstPointOnS1(self, *args)


    def IndexFirstPointOnS2(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Stripe_IndexFirstPointOnS2(self, *args)


    def IndexLastPointOnS1(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Stripe_IndexLastPointOnS1(self, *args)


    def IndexLastPointOnS2(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Stripe_IndexLastPointOnS2(self, *args)


    def IndexPoint(self, *args) -> "Standard_Integer":
        """
        :param First:
        	:type First: bool
        	:param OnS:
        	:type OnS: int
        	:rtype: int
        """
        return _ChFiDS.ChFiDS_Stripe_IndexPoint(self, *args)


    def IsInDS(self, *args) -> "Standard_Integer":
        """
        * Returns nb of SurfData's at end being in DS
        	:param First:
        	:type First: bool
        	:rtype: int
        """
        return _ChFiDS.ChFiDS_Stripe_IsInDS(self, *args)


    def LastCurve(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Stripe_LastCurve(self, *args)


    def LastPCurve(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _ChFiDS.ChFiDS_Stripe_LastPCurve(self, *args)


    def LastPCurveOrientation(self, *args) -> "void":
        """
        :rtype: TopAbs_Orientation
        :param O:
        	:type O: TopAbs_Orientation
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_LastPCurveOrientation(self, *args)


    def LastParameters(self, *args) -> "void":
        """
        :param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_LastParameters(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        :param OnS:
        	:type OnS: int
        	:rtype: TopAbs_Orientation
        :param First:
        	:type First: bool
        	:rtype: TopAbs_Orientation
        """
        return _ChFiDS.ChFiDS_Stripe_Orientation(self, *args)


    def OrientationOnFace1(self, *args) -> "void":
        """
        :rtype: TopAbs_Orientation
        :param Or1:
        	:type Or1: TopAbs_Orientation
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_OrientationOnFace1(self, *args)


    def OrientationOnFace2(self, *args) -> "void":
        """
        :rtype: TopAbs_Orientation
        :param Or2:
        	:type Or2: TopAbs_Orientation
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_OrientationOnFace2(self, *args)


    def PCurve(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        :param First:
        	:type First: bool
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _ChFiDS.ChFiDS_Stripe_PCurve(self, *args)


    def Parameters(self, *args) -> "void":
        """
        :param First:
        	:type First: bool
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_Parameters(self, *args)


    def Reset(self, *args) -> "void":
        """
        * Reset everything except Spine.
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_Reset(self, *args)


    def SetCurve(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:param First:
        	:type First: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_SetCurve(self, *args)


    def SetIndexPoint(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:param First:
        	:type First: bool
        	:param OnS:
        	:type OnS: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_SetIndexPoint(self, *args)


    def SetOfSurfData(self, *args) -> "opencascade::handle< ChFiDS_HData > const &":
        """:rtype: opencascade::handle<ChFiDS_HData>"""
        return _ChFiDS.ChFiDS_Stripe_SetOfSurfData(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        :param Or:
        	:type Or: TopAbs_Orientation
        	:param OnS:
        	:type OnS: int
        	:rtype: None
        :param Or:
        	:type Or: TopAbs_Orientation
        	:param First:
        	:type First: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_SetOrientation(self, *args)


    def SetParameters(self, *args) -> "void":
        """
        :param First:
        	:type First: bool
        	:param Pdeb:
        	:type Pdeb: float
        	:param Pfin:
        	:type Pfin: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_SetParameters(self, *args)


    def SetSolidIndex(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_Stripe_SetSolidIndex(self, *args)


    def SolidIndex(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_Stripe_SolidIndex(self, *args)


    def Spine(self, *args) -> "opencascade::handle< ChFiDS_Spine > const &":
        """:rtype: opencascade::handle<ChFiDS_Spine>"""
        return _ChFiDS.ChFiDS_Stripe_Spine(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_Stripe_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_Stripe
ChFiDS_Stripe.ChangeFirstCurve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeFirstCurve, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangeFirstPCurve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeFirstPCurve, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangeFirstParameters = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeFirstParameters, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangeIndexFirstPointOnS1 = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeIndexFirstPointOnS1, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangeIndexFirstPointOnS2 = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeIndexFirstPointOnS2, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangeIndexLastPointOnS1 = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeIndexLastPointOnS1, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangeIndexLastPointOnS2 = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeIndexLastPointOnS2, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangeLastCurve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeLastCurve, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangeLastPCurve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeLastPCurve, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangeLastParameters = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeLastParameters, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangePCurve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangePCurve, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangeSetOfSurfData = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeSetOfSurfData, None, ChFiDS_Stripe)
ChFiDS_Stripe.ChangeSpine = new_instancemethod(_ChFiDS.ChFiDS_Stripe_ChangeSpine, None, ChFiDS_Stripe)
ChFiDS_Stripe.Choix = new_instancemethod(_ChFiDS.ChFiDS_Stripe_Choix, None, ChFiDS_Stripe)
ChFiDS_Stripe.Curve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_Curve, None, ChFiDS_Stripe)
ChFiDS_Stripe.FirstCurve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_FirstCurve, None, ChFiDS_Stripe)
ChFiDS_Stripe.FirstPCurve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_FirstPCurve, None, ChFiDS_Stripe)
ChFiDS_Stripe.FirstPCurveOrientation = new_instancemethod(_ChFiDS.ChFiDS_Stripe_FirstPCurveOrientation, None, ChFiDS_Stripe)
ChFiDS_Stripe.FirstParameters = new_instancemethod(_ChFiDS.ChFiDS_Stripe_FirstParameters, None, ChFiDS_Stripe)
ChFiDS_Stripe.InDS = new_instancemethod(_ChFiDS.ChFiDS_Stripe_InDS, None, ChFiDS_Stripe)
ChFiDS_Stripe.IndexFirstPointOnS1 = new_instancemethod(_ChFiDS.ChFiDS_Stripe_IndexFirstPointOnS1, None, ChFiDS_Stripe)
ChFiDS_Stripe.IndexFirstPointOnS2 = new_instancemethod(_ChFiDS.ChFiDS_Stripe_IndexFirstPointOnS2, None, ChFiDS_Stripe)
ChFiDS_Stripe.IndexLastPointOnS1 = new_instancemethod(_ChFiDS.ChFiDS_Stripe_IndexLastPointOnS1, None, ChFiDS_Stripe)
ChFiDS_Stripe.IndexLastPointOnS2 = new_instancemethod(_ChFiDS.ChFiDS_Stripe_IndexLastPointOnS2, None, ChFiDS_Stripe)
ChFiDS_Stripe.IndexPoint = new_instancemethod(_ChFiDS.ChFiDS_Stripe_IndexPoint, None, ChFiDS_Stripe)
ChFiDS_Stripe.IsInDS = new_instancemethod(_ChFiDS.ChFiDS_Stripe_IsInDS, None, ChFiDS_Stripe)
ChFiDS_Stripe.LastCurve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_LastCurve, None, ChFiDS_Stripe)
ChFiDS_Stripe.LastPCurve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_LastPCurve, None, ChFiDS_Stripe)
ChFiDS_Stripe.LastPCurveOrientation = new_instancemethod(_ChFiDS.ChFiDS_Stripe_LastPCurveOrientation, None, ChFiDS_Stripe)
ChFiDS_Stripe.LastParameters = new_instancemethod(_ChFiDS.ChFiDS_Stripe_LastParameters, None, ChFiDS_Stripe)
ChFiDS_Stripe.Orientation = new_instancemethod(_ChFiDS.ChFiDS_Stripe_Orientation, None, ChFiDS_Stripe)
ChFiDS_Stripe.OrientationOnFace1 = new_instancemethod(_ChFiDS.ChFiDS_Stripe_OrientationOnFace1, None, ChFiDS_Stripe)
ChFiDS_Stripe.OrientationOnFace2 = new_instancemethod(_ChFiDS.ChFiDS_Stripe_OrientationOnFace2, None, ChFiDS_Stripe)
ChFiDS_Stripe.PCurve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_PCurve, None, ChFiDS_Stripe)
ChFiDS_Stripe.Parameters = new_instancemethod(_ChFiDS.ChFiDS_Stripe_Parameters, None, ChFiDS_Stripe)
ChFiDS_Stripe.Reset = new_instancemethod(_ChFiDS.ChFiDS_Stripe_Reset, None, ChFiDS_Stripe)
ChFiDS_Stripe.SetCurve = new_instancemethod(_ChFiDS.ChFiDS_Stripe_SetCurve, None, ChFiDS_Stripe)
ChFiDS_Stripe.SetIndexPoint = new_instancemethod(_ChFiDS.ChFiDS_Stripe_SetIndexPoint, None, ChFiDS_Stripe)
ChFiDS_Stripe.SetOfSurfData = new_instancemethod(_ChFiDS.ChFiDS_Stripe_SetOfSurfData, None, ChFiDS_Stripe)
ChFiDS_Stripe.SetOrientation = new_instancemethod(_ChFiDS.ChFiDS_Stripe_SetOrientation, None, ChFiDS_Stripe)
ChFiDS_Stripe.SetParameters = new_instancemethod(_ChFiDS.ChFiDS_Stripe_SetParameters, None, ChFiDS_Stripe)
ChFiDS_Stripe.SetSolidIndex = new_instancemethod(_ChFiDS.ChFiDS_Stripe_SetSolidIndex, None, ChFiDS_Stripe)
ChFiDS_Stripe.SolidIndex = new_instancemethod(_ChFiDS.ChFiDS_Stripe_SolidIndex, None, ChFiDS_Stripe)
ChFiDS_Stripe.Spine = new_instancemethod(_ChFiDS.ChFiDS_Stripe_Spine, None, ChFiDS_Stripe)
ChFiDS_Stripe_swigregister = _ChFiDS.ChFiDS_Stripe_swigregister
ChFiDS_Stripe_swigregister(ChFiDS_Stripe)

class ChFiDS_StripeMap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:param F:
        	:type F: ChFiDS_Stripe
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_StripeMap_Add(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _ChFiDS.ChFiDS_StripeMap_swiginit(self, _ChFiDS.new_ChFiDS_StripeMap(*args))

    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _ChFiDS.ChFiDS_StripeMap_Clear(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_StripeMap_Extent(self, *args)


    def FindFromIndex(self, *args) -> "ChFiDS_ListOfStripe const &":
        """
        :param I:
        	:type I: int
        	:rtype: ChFiDS_ListOfStripe
        """
        return _ChFiDS.ChFiDS_StripeMap_FindFromIndex(self, *args)


    def FindFromKey(self, *args) -> "ChFiDS_ListOfStripe const &":
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:rtype: ChFiDS_ListOfStripe
        """
        return _ChFiDS.ChFiDS_StripeMap_FindFromKey(self, *args)


    def FindKey(self, *args) -> "TopoDS_Vertex const":
        """
        :param I:
        	:type I: int
        	:rtype: TopoDS_Vertex
        """
        return _ChFiDS.ChFiDS_StripeMap_FindKey(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_StripeMap
ChFiDS_StripeMap.Add = new_instancemethod(_ChFiDS.ChFiDS_StripeMap_Add, None, ChFiDS_StripeMap)
ChFiDS_StripeMap.Clear = new_instancemethod(_ChFiDS.ChFiDS_StripeMap_Clear, None, ChFiDS_StripeMap)
ChFiDS_StripeMap.Extent = new_instancemethod(_ChFiDS.ChFiDS_StripeMap_Extent, None, ChFiDS_StripeMap)
ChFiDS_StripeMap.FindFromIndex = new_instancemethod(_ChFiDS.ChFiDS_StripeMap_FindFromIndex, None, ChFiDS_StripeMap)
ChFiDS_StripeMap.FindFromKey = new_instancemethod(_ChFiDS.ChFiDS_StripeMap_FindFromKey, None, ChFiDS_StripeMap)
ChFiDS_StripeMap.FindKey = new_instancemethod(_ChFiDS.ChFiDS_StripeMap_FindKey, None, ChFiDS_StripeMap)
ChFiDS_StripeMap_swigregister = _ChFiDS.ChFiDS_StripeMap_swigregister
ChFiDS_StripeMap_swigregister(ChFiDS_StripeMap)

class ChFiDS_SurfData(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _ChFiDS.ChFiDS_SurfData_swiginit(self, _ChFiDS.new_ChFiDS_SurfData(*args))

    def ChangeIndexOfS1(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_ChangeIndexOfS1(self, *args)


    def ChangeIndexOfS2(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_ChangeIndexOfS2(self, *args)


    def ChangeInterference(self, *args) -> "ChFiDS_FaceInterference &":
        """
        :param OnS:
        	:type OnS: int
        	:rtype: ChFiDS_FaceInterference
        """
        return _ChFiDS.ChFiDS_SurfData_ChangeInterference(self, *args)


    def ChangeInterferenceOnS1(self, *args) -> "ChFiDS_FaceInterference &":
        """:rtype: ChFiDS_FaceInterference"""
        return _ChFiDS.ChFiDS_SurfData_ChangeInterferenceOnS1(self, *args)


    def ChangeInterferenceOnS2(self, *args) -> "ChFiDS_FaceInterference &":
        """:rtype: ChFiDS_FaceInterference"""
        return _ChFiDS.ChFiDS_SurfData_ChangeInterferenceOnS2(self, *args)


    def ChangeOrientation(self, *args) -> "TopAbs_Orientation &":
        """:rtype: TopAbs_Orientation"""
        return _ChFiDS.ChFiDS_SurfData_ChangeOrientation(self, *args)


    def ChangeSurf(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_ChangeSurf(self, *args)


    def ChangeVertex(self, *args) -> "ChFiDS_CommonPoint &":
        """
        * returns one of the four vertices wether First is true or wrong and OnS equals 1 or 2.
        	:param First:
        	:type First: bool
        	:param OnS:
        	:type OnS: int
        	:rtype: ChFiDS_CommonPoint
        """
        return _ChFiDS.ChFiDS_SurfData_ChangeVertex(self, *args)


    def ChangeVertexFirstOnS1(self, *args) -> "ChFiDS_CommonPoint &":
        """:rtype: ChFiDS_CommonPoint"""
        return _ChFiDS.ChFiDS_SurfData_ChangeVertexFirstOnS1(self, *args)


    def ChangeVertexFirstOnS2(self, *args) -> "ChFiDS_CommonPoint &":
        """:rtype: ChFiDS_CommonPoint"""
        return _ChFiDS.ChFiDS_SurfData_ChangeVertexFirstOnS2(self, *args)


    def ChangeVertexLastOnS1(self, *args) -> "ChFiDS_CommonPoint &":
        """:rtype: ChFiDS_CommonPoint"""
        return _ChFiDS.ChFiDS_SurfData_ChangeVertexLastOnS1(self, *args)


    def ChangeVertexLastOnS2(self, *args) -> "ChFiDS_CommonPoint &":
        """:rtype: ChFiDS_CommonPoint"""
        return _ChFiDS.ChFiDS_SurfData_ChangeVertexLastOnS2(self, *args)


    def Copy(self, *args) -> "void":
        """
        :param Other:
        	:type Other: ChFiDS_SurfData
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_Copy(self, *args)


    def FirstExtensionValue(self, *args) -> "void":
        """
        :rtype: float
        :param Extend:
        	:type Extend: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_FirstExtensionValue(self, *args)


    def FirstSpineParam(self, *args) -> "void":
        """
        :rtype: float
        :param Par:
        	:type Par: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_FirstSpineParam(self, *args)


    def Get2dPoints(self, *args) -> "void":
        """
        :param First:
        	:type First: bool
        	:param OnS:
        	:type OnS: int
        	:rtype: gp_Pnt2d
        :param P2df1:
        	:type P2df1: gp_Pnt2d
        	:param P2dl1:
        	:type P2dl1: gp_Pnt2d
        	:param P2df2:
        	:type P2df2: gp_Pnt2d
        	:param P2dl2:
        	:type P2dl2: gp_Pnt2d
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_Get2dPoints(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        :param OfS:
        	:type OfS: int
        	:rtype: int
        """
        return _ChFiDS.ChFiDS_SurfData_Index(self, *args)


    def IndexOfC(self, *args) -> "Standard_Integer":
        """
        :param OnS:
        	:type OnS: int
        	:rtype: int
        """
        return _ChFiDS.ChFiDS_SurfData_IndexOfC(self, *args)


    def IndexOfC1(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_SurfData_IndexOfC1(self, *args)


    def IndexOfC2(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_SurfData_IndexOfC2(self, *args)


    def IndexOfS1(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_SurfData_IndexOfS1(self, *args)


    def IndexOfS2(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_SurfData_IndexOfS2(self, *args)


    def Interference(self, *args) -> "ChFiDS_FaceInterference const &":
        """
        :param OnS:
        	:type OnS: int
        	:rtype: ChFiDS_FaceInterference
        """
        return _ChFiDS.ChFiDS_SurfData_Interference(self, *args)


    def InterferenceOnS1(self, *args) -> "ChFiDS_FaceInterference const &":
        """:rtype: ChFiDS_FaceInterference"""
        return _ChFiDS.ChFiDS_SurfData_InterferenceOnS1(self, *args)


    def InterferenceOnS2(self, *args) -> "ChFiDS_FaceInterference const &":
        """:rtype: ChFiDS_FaceInterference"""
        return _ChFiDS.ChFiDS_SurfData_InterferenceOnS2(self, *args)


    def IsOnCurve(self, *args) -> "Standard_Boolean":
        """
        :param OnS:
        	:type OnS: int
        	:rtype: bool
        """
        return _ChFiDS.ChFiDS_SurfData_IsOnCurve(self, *args)


    def IsOnCurve1(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ChFiDS.ChFiDS_SurfData_IsOnCurve1(self, *args)


    def IsOnCurve2(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ChFiDS.ChFiDS_SurfData_IsOnCurve2(self, *args)


    def LastExtensionValue(self, *args) -> "void":
        """
        :rtype: float
        :param Extend:
        	:type Extend: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_LastExtensionValue(self, *args)


    def LastSpineParam(self, *args) -> "void":
        """
        :rtype: float
        :param Par:
        	:type Par: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_LastSpineParam(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """:rtype: TopAbs_Orientation"""
        return _ChFiDS.ChFiDS_SurfData_Orientation(self, *args)


    def ResetSimul(self, *args) -> "void":
        """:rtype: None"""
        return _ChFiDS.ChFiDS_SurfData_ResetSimul(self, *args)


    def Set2dPoints(self, *args) -> "void":
        """
        :param P2df1:
        	:type P2df1: gp_Pnt2d
        	:param P2dl1:
        	:type P2dl1: gp_Pnt2d
        	:param P2df2:
        	:type P2df2: gp_Pnt2d
        	:param P2dl2:
        	:type P2dl2: gp_Pnt2d
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_Set2dPoints(self, *args)


    def SetIndexOfC1(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_SetIndexOfC1(self, *args)


    def SetIndexOfC2(self, *args) -> "void":
        """
        :param Index:
        	:type Index: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_SetIndexOfC2(self, *args)


    def SetSimul(self, *args) -> "void":
        """
        :param S:
        	:type S: Standard_Transient
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_SetSimul(self, *args)


    def Simul(self, *args) -> "opencascade::handle< Standard_Transient >":
        """:rtype: opencascade::handle<Standard_Transient>"""
        return _ChFiDS.ChFiDS_SurfData_Simul(self, *args)


    def Surf(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _ChFiDS.ChFiDS_SurfData_Surf(self, *args)


    def TwistOnS1(self, *args) -> "void":
        """
        :rtype: bool
        :param T:
        	:type T: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_TwistOnS1(self, *args)


    def TwistOnS2(self, *args) -> "void":
        """
        :rtype: bool
        :param T:
        	:type T: bool
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_SurfData_TwistOnS2(self, *args)


    def Vertex(self, *args) -> "ChFiDS_CommonPoint const &":
        """
        * returns one of the four vertices wether First is true or wrong and OnS equals 1 or 2.
        	:param First:
        	:type First: bool
        	:param OnS:
        	:type OnS: int
        	:rtype: ChFiDS_CommonPoint
        """
        return _ChFiDS.ChFiDS_SurfData_Vertex(self, *args)


    def VertexFirstOnS1(self, *args) -> "ChFiDS_CommonPoint const &":
        """:rtype: ChFiDS_CommonPoint"""
        return _ChFiDS.ChFiDS_SurfData_VertexFirstOnS1(self, *args)


    def VertexFirstOnS2(self, *args) -> "ChFiDS_CommonPoint const &":
        """:rtype: ChFiDS_CommonPoint"""
        return _ChFiDS.ChFiDS_SurfData_VertexFirstOnS2(self, *args)


    def VertexLastOnS1(self, *args) -> "ChFiDS_CommonPoint const &":
        """:rtype: ChFiDS_CommonPoint"""
        return _ChFiDS.ChFiDS_SurfData_VertexLastOnS1(self, *args)


    def VertexLastOnS2(self, *args) -> "ChFiDS_CommonPoint const &":
        """:rtype: ChFiDS_CommonPoint"""
        return _ChFiDS.ChFiDS_SurfData_VertexLastOnS2(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_SurfData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_SurfData
ChFiDS_SurfData.ChangeIndexOfS1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeIndexOfS1, None, ChFiDS_SurfData)
ChFiDS_SurfData.ChangeIndexOfS2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeIndexOfS2, None, ChFiDS_SurfData)
ChFiDS_SurfData.ChangeInterference = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeInterference, None, ChFiDS_SurfData)
ChFiDS_SurfData.ChangeInterferenceOnS1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeInterferenceOnS1, None, ChFiDS_SurfData)
ChFiDS_SurfData.ChangeInterferenceOnS2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeInterferenceOnS2, None, ChFiDS_SurfData)
ChFiDS_SurfData.ChangeOrientation = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeOrientation, None, ChFiDS_SurfData)
ChFiDS_SurfData.ChangeSurf = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeSurf, None, ChFiDS_SurfData)
ChFiDS_SurfData.ChangeVertex = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeVertex, None, ChFiDS_SurfData)
ChFiDS_SurfData.ChangeVertexFirstOnS1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeVertexFirstOnS1, None, ChFiDS_SurfData)
ChFiDS_SurfData.ChangeVertexFirstOnS2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeVertexFirstOnS2, None, ChFiDS_SurfData)
ChFiDS_SurfData.ChangeVertexLastOnS1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeVertexLastOnS1, None, ChFiDS_SurfData)
ChFiDS_SurfData.ChangeVertexLastOnS2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ChangeVertexLastOnS2, None, ChFiDS_SurfData)
ChFiDS_SurfData.Copy = new_instancemethod(_ChFiDS.ChFiDS_SurfData_Copy, None, ChFiDS_SurfData)
ChFiDS_SurfData.FirstExtensionValue = new_instancemethod(_ChFiDS.ChFiDS_SurfData_FirstExtensionValue, None, ChFiDS_SurfData)
ChFiDS_SurfData.FirstSpineParam = new_instancemethod(_ChFiDS.ChFiDS_SurfData_FirstSpineParam, None, ChFiDS_SurfData)
ChFiDS_SurfData.Get2dPoints = new_instancemethod(_ChFiDS.ChFiDS_SurfData_Get2dPoints, None, ChFiDS_SurfData)
ChFiDS_SurfData.Index = new_instancemethod(_ChFiDS.ChFiDS_SurfData_Index, None, ChFiDS_SurfData)
ChFiDS_SurfData.IndexOfC = new_instancemethod(_ChFiDS.ChFiDS_SurfData_IndexOfC, None, ChFiDS_SurfData)
ChFiDS_SurfData.IndexOfC1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_IndexOfC1, None, ChFiDS_SurfData)
ChFiDS_SurfData.IndexOfC2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_IndexOfC2, None, ChFiDS_SurfData)
ChFiDS_SurfData.IndexOfS1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_IndexOfS1, None, ChFiDS_SurfData)
ChFiDS_SurfData.IndexOfS2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_IndexOfS2, None, ChFiDS_SurfData)
ChFiDS_SurfData.Interference = new_instancemethod(_ChFiDS.ChFiDS_SurfData_Interference, None, ChFiDS_SurfData)
ChFiDS_SurfData.InterferenceOnS1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_InterferenceOnS1, None, ChFiDS_SurfData)
ChFiDS_SurfData.InterferenceOnS2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_InterferenceOnS2, None, ChFiDS_SurfData)
ChFiDS_SurfData.IsOnCurve = new_instancemethod(_ChFiDS.ChFiDS_SurfData_IsOnCurve, None, ChFiDS_SurfData)
ChFiDS_SurfData.IsOnCurve1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_IsOnCurve1, None, ChFiDS_SurfData)
ChFiDS_SurfData.IsOnCurve2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_IsOnCurve2, None, ChFiDS_SurfData)
ChFiDS_SurfData.LastExtensionValue = new_instancemethod(_ChFiDS.ChFiDS_SurfData_LastExtensionValue, None, ChFiDS_SurfData)
ChFiDS_SurfData.LastSpineParam = new_instancemethod(_ChFiDS.ChFiDS_SurfData_LastSpineParam, None, ChFiDS_SurfData)
ChFiDS_SurfData.Orientation = new_instancemethod(_ChFiDS.ChFiDS_SurfData_Orientation, None, ChFiDS_SurfData)
ChFiDS_SurfData.ResetSimul = new_instancemethod(_ChFiDS.ChFiDS_SurfData_ResetSimul, None, ChFiDS_SurfData)
ChFiDS_SurfData.Set2dPoints = new_instancemethod(_ChFiDS.ChFiDS_SurfData_Set2dPoints, None, ChFiDS_SurfData)
ChFiDS_SurfData.SetIndexOfC1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_SetIndexOfC1, None, ChFiDS_SurfData)
ChFiDS_SurfData.SetIndexOfC2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_SetIndexOfC2, None, ChFiDS_SurfData)
ChFiDS_SurfData.SetSimul = new_instancemethod(_ChFiDS.ChFiDS_SurfData_SetSimul, None, ChFiDS_SurfData)
ChFiDS_SurfData.Simul = new_instancemethod(_ChFiDS.ChFiDS_SurfData_Simul, None, ChFiDS_SurfData)
ChFiDS_SurfData.Surf = new_instancemethod(_ChFiDS.ChFiDS_SurfData_Surf, None, ChFiDS_SurfData)
ChFiDS_SurfData.TwistOnS1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_TwistOnS1, None, ChFiDS_SurfData)
ChFiDS_SurfData.TwistOnS2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_TwistOnS2, None, ChFiDS_SurfData)
ChFiDS_SurfData.Vertex = new_instancemethod(_ChFiDS.ChFiDS_SurfData_Vertex, None, ChFiDS_SurfData)
ChFiDS_SurfData.VertexFirstOnS1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_VertexFirstOnS1, None, ChFiDS_SurfData)
ChFiDS_SurfData.VertexFirstOnS2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_VertexFirstOnS2, None, ChFiDS_SurfData)
ChFiDS_SurfData.VertexLastOnS1 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_VertexLastOnS1, None, ChFiDS_SurfData)
ChFiDS_SurfData.VertexLastOnS2 = new_instancemethod(_ChFiDS.ChFiDS_SurfData_VertexLastOnS2, None, ChFiDS_SurfData)
ChFiDS_SurfData_swigregister = _ChFiDS.ChFiDS_SurfData_swigregister
ChFiDS_SurfData_swigregister(ChFiDS_SurfData)

class ChFiDS_ChamfSpine(ChFiDS_Spine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _ChFiDS.ChFiDS_ChamfSpine_swiginit(self, _ChFiDS.new_ChFiDS_ChamfSpine(*args))

    def Dists(self, *args) -> "void":
        """
        :param Dis1:
        	:type Dis1: float
        	:param Dis2:
        	:type Dis2: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ChamfSpine_Dists(self, *args)


    def GetDist(self, *args) -> "void":
        """
        :param Dis:
        	:type Dis: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ChamfSpine_GetDist(self, *args)


    def GetDistAngle(self, *args) -> "void":
        """
        :param Dis:
        	:type Dis: float
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ChamfSpine_GetDistAngle(self, *args)


    def IsChamfer(self, *args) -> "ChFiDS_ChamfMethod":
        """
        * Return the method of chamfers used
        	:rtype: ChFiDS_ChamfMethod
        """
        return _ChFiDS.ChFiDS_ChamfSpine_IsChamfer(self, *args)


    def SetDist(self, *args) -> "void":
        """
        :param Dis:
        	:type Dis: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ChamfSpine_SetDist(self, *args)


    def SetDistAngle(self, *args) -> "void":
        """
        :param Dis:
        	:type Dis: float
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ChamfSpine_SetDistAngle(self, *args)


    def SetDists(self, *args) -> "void":
        """
        :param Dis1:
        	:type Dis1: float
        	:param Dis2:
        	:type Dis2: float
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ChamfSpine_SetDists(self, *args)


    def SetMode(self, *args) -> "void":
        """
        :param theMode:
        	:type theMode: ChFiDS_ChamfMode
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_ChamfSpine_SetMode(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_ChamfSpine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ChamfSpine
ChFiDS_ChamfSpine.Dists = new_instancemethod(_ChFiDS.ChFiDS_ChamfSpine_Dists, None, ChFiDS_ChamfSpine)
ChFiDS_ChamfSpine.GetDist = new_instancemethod(_ChFiDS.ChFiDS_ChamfSpine_GetDist, None, ChFiDS_ChamfSpine)
ChFiDS_ChamfSpine.GetDistAngle = new_instancemethod(_ChFiDS.ChFiDS_ChamfSpine_GetDistAngle, None, ChFiDS_ChamfSpine)
ChFiDS_ChamfSpine.IsChamfer = new_instancemethod(_ChFiDS.ChFiDS_ChamfSpine_IsChamfer, None, ChFiDS_ChamfSpine)
ChFiDS_ChamfSpine.SetDist = new_instancemethod(_ChFiDS.ChFiDS_ChamfSpine_SetDist, None, ChFiDS_ChamfSpine)
ChFiDS_ChamfSpine.SetDistAngle = new_instancemethod(_ChFiDS.ChFiDS_ChamfSpine_SetDistAngle, None, ChFiDS_ChamfSpine)
ChFiDS_ChamfSpine.SetDists = new_instancemethod(_ChFiDS.ChFiDS_ChamfSpine_SetDists, None, ChFiDS_ChamfSpine)
ChFiDS_ChamfSpine.SetMode = new_instancemethod(_ChFiDS.ChFiDS_ChamfSpine_SetMode, None, ChFiDS_ChamfSpine)
ChFiDS_ChamfSpine_swigregister = _ChFiDS.ChFiDS_ChamfSpine_swigregister
ChFiDS_ChamfSpine_swigregister(ChFiDS_ChamfSpine)

class ChFiDS_FilSpine(ChFiDS_Spine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _ChFiDS.ChFiDS_FilSpine_swiginit(self, _ChFiDS.new_ChFiDS_FilSpine(*args))

    def ChangeLaw(self, *args) -> "opencascade::handle< Law_Function > &":
        """
        * returns the elementary law
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: opencascade::handle<Law_Function>
        """
        return _ChFiDS.ChFiDS_FilSpine_ChangeLaw(self, *args)


    def IsConstant(self, *args) -> "Standard_Boolean":
        """
        * returns true if the radius is constant all along the spine.
        	:rtype: bool
        * returns true if the radius is constant all along the edge E.
        	:param IE:
        	:type IE: int
        	:rtype: bool
        """
        return _ChFiDS.ChFiDS_FilSpine_IsConstant(self, *args)


    def law(self, *args) -> "opencascade::handle< Law_Composite >":
        """
        :param Els:
        	:type Els: ChFiDS_HElSpine
        	:rtype: opencascade::handle<Law_Composite>
        """
        return _ChFiDS.ChFiDS_FilSpine_law(self, *args)


    def MaxRadFromSeqAndLaws(self, *args) -> "Standard_Real":
        """
        * returns the maximum radius if the fillet is non-constant
        	:rtype: float
        """
        return _ChFiDS.ChFiDS_FilSpine_MaxRadFromSeqAndLaws(self, *args)


    def Radius(self, *args) -> "Standard_Real":
        """
        * returns the radius if the fillet is constant all along the spine.
        	:rtype: float
        * returns the radius if the fillet is constant all along the edge E.
        	:param IE:
        	:type IE: int
        	:rtype: float
        * returns the radius if the fillet is constant all along the edge E.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: float
        """
        return _ChFiDS.ChFiDS_FilSpine_Radius(self, *args)


    def SetRadius(self, *args) -> "void":
        """
        * initializes the constant vector on edge E.
        	:param Radius:
        	:type Radius: float
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        * initializes the vector on Vertex V.
        	:param Radius:
        	:type Radius: float
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        * initializes the vector on the point of parameter W.
        	:param UandR:
        	:type UandR: gp_XY
        	:param IinC:
        	:type IinC: int
        	:rtype: None
        * initializes the constant vector on all spine.
        	:param Radius:
        	:type Radius: float
        	:rtype: None
        * initializes the rule of evolution on all spine.
        	:param C:
        	:type C: Law_Function
        	:param IinC:
        	:type IinC: int
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_FilSpine_SetRadius(self, *args)


    def UnSetRadius(self, *args) -> "void":
        """
        * resets the constant vector on edge E.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        * resets the vector on Vertex V.
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        """
        return _ChFiDS.ChFiDS_FilSpine_UnSetRadius(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_FilSpine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_FilSpine
ChFiDS_FilSpine.ChangeLaw = new_instancemethod(_ChFiDS.ChFiDS_FilSpine_ChangeLaw, None, ChFiDS_FilSpine)
ChFiDS_FilSpine.IsConstant = new_instancemethod(_ChFiDS.ChFiDS_FilSpine_IsConstant, None, ChFiDS_FilSpine)
ChFiDS_FilSpine.law = new_instancemethod(_ChFiDS.ChFiDS_FilSpine_law, None, ChFiDS_FilSpine)
ChFiDS_FilSpine.MaxRadFromSeqAndLaws = new_instancemethod(_ChFiDS.ChFiDS_FilSpine_MaxRadFromSeqAndLaws, None, ChFiDS_FilSpine)
ChFiDS_FilSpine.Radius = new_instancemethod(_ChFiDS.ChFiDS_FilSpine_Radius, None, ChFiDS_FilSpine)
ChFiDS_FilSpine.SetRadius = new_instancemethod(_ChFiDS.ChFiDS_FilSpine_SetRadius, None, ChFiDS_FilSpine)
ChFiDS_FilSpine.UnSetRadius = new_instancemethod(_ChFiDS.ChFiDS_FilSpine_UnSetRadius, None, ChFiDS_FilSpine)
ChFiDS_FilSpine_swigregister = _ChFiDS.ChFiDS_FilSpine_swigregister
ChFiDS_FilSpine_swigregister(ChFiDS_FilSpine)

class ChFiDS_SecHArray1(ChFiDS_SecArray1, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_SecHArray1_swiginit(self, _ChFiDS.new_ChFiDS_SecHArray1(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_SecHArray1_DownCast(t)

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_SecHArray1
ChFiDS_SecHArray1.Array1 = new_instancemethod(_ChFiDS.ChFiDS_SecHArray1_Array1, None, ChFiDS_SecHArray1)
ChFiDS_SecHArray1.ChangeArray1 = new_instancemethod(_ChFiDS.ChFiDS_SecHArray1_ChangeArray1, None, ChFiDS_SecHArray1)
ChFiDS_SecHArray1_swigregister = _ChFiDS.ChFiDS_SecHArray1_swigregister
ChFiDS_SecHArray1_swigregister(ChFiDS_SecHArray1)

class ChFiDS_HData(ChFiDS_SequenceOfSurfData, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_HData_swiginit(self, _ChFiDS.new_ChFiDS_HData(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_HData_DownCast(t)

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_HData
ChFiDS_HData.Sequence = new_instancemethod(_ChFiDS.ChFiDS_HData_Sequence, None, ChFiDS_HData)
ChFiDS_HData.Append = new_instancemethod(_ChFiDS.ChFiDS_HData_Append, None, ChFiDS_HData)
ChFiDS_HData.ChangeSequence = new_instancemethod(_ChFiDS.ChFiDS_HData_ChangeSequence, None, ChFiDS_HData)
ChFiDS_HData_swigregister = _ChFiDS.ChFiDS_HData_swigregister
ChFiDS_HData_swigregister(ChFiDS_HData)



