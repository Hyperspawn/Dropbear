# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ChFiKPart module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_chfikpart.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ChFiKPart.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ChFiKPart')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ChFiKPart')
    _ChFiKPart = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ChFiKPart', [dirname(__file__)])
        except ImportError:
            import _ChFiKPart
            return _ChFiKPart
        try:
            _mod = imp.load_module('_ChFiKPart', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ChFiKPart = swig_import_helper()
    del swig_import_helper
else:
    import _ChFiKPart
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ChFiKPart.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ChFiKPart.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ChFiKPart.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ChFiKPart.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ChFiKPart.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ChFiKPart.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ChFiKPart.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ChFiKPart.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ChFiKPart.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ChFiKPart.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ChFiKPart.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ChFiKPart.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ChFiKPart.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ChFiKPart.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ChFiKPart.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ChFiKPart.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ChFiKPart.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ChFiKPart.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ChFiKPart.process_exception(error, method_name, class_name)
process_exception = _ChFiKPart.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopOpeBRepDS
import OCC.Core.Geom
import OCC.Core.TopAbs
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopLoc
import OCC.Core.TopOpeBRepTool
import OCC.Core.TopTools
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.math
import OCC.Core.Adaptor3d
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
import OCC.Core.IntCurvesFace
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.TopExp
import OCC.Core.Extrema
import OCC.Core.ChFiDS
import OCC.Core.Law
class ChFiKPart_RstMap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiKPart.ChFiKPart_RstMap_swiginit(self, _ChFiKPart.new_ChFiKPart_RstMap(*args))
    __swig_destroy__ = _ChFiKPart.delete_ChFiKPart_RstMap
ChFiKPart_RstMap.begin = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_begin, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.end = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_end, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.cbegin = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_cbegin, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.cend = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_cend, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.Exchange = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_Exchange, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.Assign = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_Assign, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.Set = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_Set, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.ReSize = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_ReSize, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.Bind = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_Bind, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.Bound = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_Bound, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.IsBound = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_IsBound, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.UnBind = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_UnBind, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.Seek = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_Seek, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.Find = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_Find, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.ChangeSeek = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_ChangeSeek, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.ChangeFind = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_ChangeFind, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.__call__ = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap___call__, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.Clear = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_Clear, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.Size = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_Size, None, ChFiKPart_RstMap)
ChFiKPart_RstMap.Keys = new_instancemethod(_ChFiKPart.ChFiKPart_RstMap_Keys, None, ChFiKPart_RstMap)
ChFiKPart_RstMap_swigregister = _ChFiKPart.ChFiKPart_RstMap_swigregister
ChFiKPart_RstMap_swigregister(ChFiKPart_RstMap)

class ChFiKPart_ComputeData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Compute(*args) -> "Standard_Boolean":
        """
        * Computes a simple fillet in several particular cases.
        	:param DStr:
        	:type DStr: TopOpeBRepDS_DataStructure
        	:param Data:
        	:type Data: ChFiDS_SurfData
        	:param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param Or1:
        	:type Or1: TopAbs_Orientation
        	:param Or2:
        	:type Or2: TopAbs_Orientation
        	:param Sp:
        	:type Sp: ChFiDS_Spine
        	:param Iedge:
        	:type Iedge: int
        	:rtype: bool
        """
        return _ChFiKPart.ChFiKPart_ComputeData_Compute(*args)

    Compute = staticmethod(Compute)

    def ComputeCorner(*args) -> "Standard_Boolean":
        """
        * Computes a toric or spheric corner fillet.
        	:param DStr:
        	:type DStr: TopOpeBRepDS_DataStructure
        	:param Data:
        	:type Data: ChFiDS_SurfData
        	:param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param OrFace1:
        	:type OrFace1: TopAbs_Orientation
        	:param OrFace2:
        	:type OrFace2: TopAbs_Orientation
        	:param Or1:
        	:type Or1: TopAbs_Orientation
        	:param Or2:
        	:type Or2: TopAbs_Orientation
        	:param minRad:
        	:type minRad: float
        	:param majRad:
        	:type majRad: float
        	:param P1S1:
        	:type P1S1: gp_Pnt2d
        	:param P2S1:
        	:type P2S1: gp_Pnt2d
        	:param P1S2:
        	:type P1S2: gp_Pnt2d
        	:param P2S2:
        	:type P2S2: gp_Pnt2d
        	:rtype: bool
        * Computes spheric corner fillet with non iso pcurve on S2.
        	:param DStr:
        	:type DStr: TopOpeBRepDS_DataStructure
        	:param Data:
        	:type Data: ChFiDS_SurfData
        	:param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param OrFace1:
        	:type OrFace1: TopAbs_Orientation
        	:param OrFace2:
        	:type OrFace2: TopAbs_Orientation
        	:param Or1:
        	:type Or1: TopAbs_Orientation
        	:param Or2:
        	:type Or2: TopAbs_Orientation
        	:param Rad:
        	:type Rad: float
        	:param PS1:
        	:type PS1: gp_Pnt2d
        	:param P1S2:
        	:type P1S2: gp_Pnt2d
        	:param P2S2:
        	:type P2S2: gp_Pnt2d
        	:rtype: bool
        * Computes a toric corner rotule.
        	:param DStr:
        	:type DStr: TopOpeBRepDS_DataStructure
        	:param Data:
        	:type Data: ChFiDS_SurfData
        	:param S:
        	:type S: Adaptor3d_HSurface
        	:param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param OfS:
        	:type OfS: TopAbs_Orientation
        	:param OS:
        	:type OS: TopAbs_Orientation
        	:param OS1:
        	:type OS1: TopAbs_Orientation
        	:param OS2:
        	:type OS2: TopAbs_Orientation
        	:param Radius:
        	:type Radius: float
        	:rtype: bool
        """
        return _ChFiKPart.ChFiKPart_ComputeData_ComputeCorner(*args)

    ComputeCorner = staticmethod(ComputeCorner)

    __repr__ = _dumps_object


    def __init__(self):
        _ChFiKPart.ChFiKPart_ComputeData_swiginit(self, _ChFiKPart.new_ChFiKPart_ComputeData())
    __swig_destroy__ = _ChFiKPart.delete_ChFiKPart_ComputeData
ChFiKPart_ComputeData_swigregister = _ChFiKPart.ChFiKPart_ComputeData_swigregister
ChFiKPart_ComputeData_swigregister(ChFiKPart_ComputeData)

def ChFiKPart_ComputeData_Compute(*args) -> "Standard_Boolean":
    """
    * Computes a simple fillet in several particular cases.
    	:param DStr:
    	:type DStr: TopOpeBRepDS_DataStructure
    	:param Data:
    	:type Data: ChFiDS_SurfData
    	:param S1:
    	:type S1: Adaptor3d_HSurface
    	:param S2:
    	:type S2: Adaptor3d_HSurface
    	:param Or1:
    	:type Or1: TopAbs_Orientation
    	:param Or2:
    	:type Or2: TopAbs_Orientation
    	:param Sp:
    	:type Sp: ChFiDS_Spine
    	:param Iedge:
    	:type Iedge: int
    	:rtype: bool
    """
    return _ChFiKPart.ChFiKPart_ComputeData_Compute(*args)

def ChFiKPart_ComputeData_ComputeCorner(*args) -> "Standard_Boolean":
    """
    * Computes a toric or spheric corner fillet.
    	:param DStr:
    	:type DStr: TopOpeBRepDS_DataStructure
    	:param Data:
    	:type Data: ChFiDS_SurfData
    	:param S1:
    	:type S1: Adaptor3d_HSurface
    	:param S2:
    	:type S2: Adaptor3d_HSurface
    	:param OrFace1:
    	:type OrFace1: TopAbs_Orientation
    	:param OrFace2:
    	:type OrFace2: TopAbs_Orientation
    	:param Or1:
    	:type Or1: TopAbs_Orientation
    	:param Or2:
    	:type Or2: TopAbs_Orientation
    	:param minRad:
    	:type minRad: float
    	:param majRad:
    	:type majRad: float
    	:param P1S1:
    	:type P1S1: gp_Pnt2d
    	:param P2S1:
    	:type P2S1: gp_Pnt2d
    	:param P1S2:
    	:type P1S2: gp_Pnt2d
    	:param P2S2:
    	:type P2S2: gp_Pnt2d
    	:rtype: bool
    * Computes spheric corner fillet with non iso pcurve on S2.
    	:param DStr:
    	:type DStr: TopOpeBRepDS_DataStructure
    	:param Data:
    	:type Data: ChFiDS_SurfData
    	:param S1:
    	:type S1: Adaptor3d_HSurface
    	:param S2:
    	:type S2: Adaptor3d_HSurface
    	:param OrFace1:
    	:type OrFace1: TopAbs_Orientation
    	:param OrFace2:
    	:type OrFace2: TopAbs_Orientation
    	:param Or1:
    	:type Or1: TopAbs_Orientation
    	:param Or2:
    	:type Or2: TopAbs_Orientation
    	:param Rad:
    	:type Rad: float
    	:param PS1:
    	:type PS1: gp_Pnt2d
    	:param P1S2:
    	:type P1S2: gp_Pnt2d
    	:param P2S2:
    	:type P2S2: gp_Pnt2d
    	:rtype: bool
    * Computes a toric corner rotule.
    	:param DStr:
    	:type DStr: TopOpeBRepDS_DataStructure
    	:param Data:
    	:type Data: ChFiDS_SurfData
    	:param S:
    	:type S: Adaptor3d_HSurface
    	:param S1:
    	:type S1: Adaptor3d_HSurface
    	:param S2:
    	:type S2: Adaptor3d_HSurface
    	:param OfS:
    	:type OfS: TopAbs_Orientation
    	:param OS:
    	:type OS: TopAbs_Orientation
    	:param OS1:
    	:type OS1: TopAbs_Orientation
    	:param OS2:
    	:type OS2: TopAbs_Orientation
    	:param Radius:
    	:type Radius: float
    	:rtype: bool
    """
    return _ChFiKPart.ChFiKPart_ComputeData_ComputeCorner(*args)



