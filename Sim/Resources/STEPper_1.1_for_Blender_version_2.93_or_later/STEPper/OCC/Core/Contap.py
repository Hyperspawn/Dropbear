# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Contap module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_contap.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Contap.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Contap')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Contap')
    _Contap = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Contap', [dirname(__file__)])
        except ImportError:
            import _Contap
            return _Contap
        try:
            _mod = imp.load_module('_Contap', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Contap = swig_import_helper()
    del swig_import_helper
else:
    import _Contap
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Contap.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Contap.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Contap.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Contap.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Contap.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Contap.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Contap.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Contap.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Contap.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Contap.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Contap.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Contap.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Contap.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Contap.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Contap.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Contap.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Contap.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Contap.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Contap.process_exception(error, method_name, class_name)
process_exception = _Contap.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.gp
import OCC.Core.IntSurf
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
Contap_Lin = _Contap.Contap_Lin
Contap_Circle = _Contap.Contap_Circle
Contap_Walking = _Contap.Contap_Walking
Contap_Restriction = _Contap.Contap_Restriction
Contap_ContourStd = _Contap.Contap_ContourStd
Contap_ContourPrs = _Contap.Contap_ContourPrs
Contap_DraftStd = _Contap.Contap_DraftStd
Contap_DraftPrs = _Contap.Contap_DraftPrs

def Handle_Contap_TheIWLineOfTheIWalking_Create() -> "opencascade::handle< Contap_TheIWLineOfTheIWalking >":
    return _Contap.Handle_Contap_TheIWLineOfTheIWalking_Create()
Handle_Contap_TheIWLineOfTheIWalking_Create = _Contap.Handle_Contap_TheIWLineOfTheIWalking_Create

def Handle_Contap_TheIWLineOfTheIWalking_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Contap_TheIWLineOfTheIWalking >":
    return _Contap.Handle_Contap_TheIWLineOfTheIWalking_DownCast(t)
Handle_Contap_TheIWLineOfTheIWalking_DownCast = _Contap.Handle_Contap_TheIWLineOfTheIWalking_DownCast

def Handle_Contap_TheIWLineOfTheIWalking_IsNull(t: 'opencascade::handle< Contap_TheIWLineOfTheIWalking > const &') -> "bool":
    return _Contap.Handle_Contap_TheIWLineOfTheIWalking_IsNull(t)
Handle_Contap_TheIWLineOfTheIWalking_IsNull = _Contap.Handle_Contap_TheIWLineOfTheIWalking_IsNull

def Handle_Contap_TheHSequenceOfPoint_Create() -> "opencascade::handle< Contap_TheHSequenceOfPoint >":
    return _Contap.Handle_Contap_TheHSequenceOfPoint_Create()
Handle_Contap_TheHSequenceOfPoint_Create = _Contap.Handle_Contap_TheHSequenceOfPoint_Create

def Handle_Contap_TheHSequenceOfPoint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Contap_TheHSequenceOfPoint >":
    return _Contap.Handle_Contap_TheHSequenceOfPoint_DownCast(t)
Handle_Contap_TheHSequenceOfPoint_DownCast = _Contap.Handle_Contap_TheHSequenceOfPoint_DownCast

def Handle_Contap_TheHSequenceOfPoint_IsNull(t: 'opencascade::handle< Contap_TheHSequenceOfPoint > const &') -> "bool":
    return _Contap.Handle_Contap_TheHSequenceOfPoint_IsNull(t)
Handle_Contap_TheHSequenceOfPoint_IsNull = _Contap.Handle_Contap_TheHSequenceOfPoint_IsNull
class Contap_TheSequenceOfPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Contap_TheSequenceOfPoint_swiginit(self, _Contap.new_Contap_TheSequenceOfPoint(*args))
    delNode = staticmethod(_Contap.Contap_TheSequenceOfPoint_delNode)
    __swig_destroy__ = _Contap.delete_Contap_TheSequenceOfPoint
Contap_TheSequenceOfPoint.begin = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_begin, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.end = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_end, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.cbegin = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_cbegin, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.cend = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_cend, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Size = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Size, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Length = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Length, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Lower = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Lower, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Upper = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Upper, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.IsEmpty = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_IsEmpty, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Reverse = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Reverse, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Exchange = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Exchange, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Clear = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Clear, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Assign = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Assign, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Set = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Set, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Remove = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Remove, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Append = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Append, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Prepend = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Prepend, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.InsertBefore = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_InsertBefore, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.InsertAfter = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_InsertAfter, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Split = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Split, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.First = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_First, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.ChangeFirst = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_ChangeFirst, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Last = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Last, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.ChangeLast = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_ChangeLast, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.Value = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_Value, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.ChangeValue = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_ChangeValue, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.__call__ = new_instancemethod(_Contap.Contap_TheSequenceOfPoint___call__, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint.SetValue = new_instancemethod(_Contap.Contap_TheSequenceOfPoint_SetValue, None, Contap_TheSequenceOfPoint)
Contap_TheSequenceOfPoint_swigregister = _Contap.Contap_TheSequenceOfPoint_swigregister
Contap_TheSequenceOfPoint_swigregister(Contap_TheSequenceOfPoint)

def Contap_TheSequenceOfPoint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _Contap.Contap_TheSequenceOfPoint_delNode(theNode, theAl)
Contap_TheSequenceOfPoint_delNode = _Contap.Contap_TheSequenceOfPoint_delNode

class Contap_SequenceOfSegmentOfTheSearch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Contap_SequenceOfSegmentOfTheSearch_swiginit(self, _Contap.new_Contap_SequenceOfSegmentOfTheSearch(*args))
    delNode = staticmethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_delNode)
    __swig_destroy__ = _Contap.delete_Contap_SequenceOfSegmentOfTheSearch
Contap_SequenceOfSegmentOfTheSearch.begin = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_begin, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.end = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_end, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.cbegin = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_cbegin, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.cend = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_cend, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Size = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Size, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Length = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Length, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Lower = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Lower, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Upper = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Upper, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.IsEmpty = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_IsEmpty, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Reverse = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Reverse, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Exchange = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Exchange, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Clear = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Clear, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Assign = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Assign, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Set = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Set, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Remove = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Remove, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Append = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Append, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Prepend = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Prepend, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.InsertBefore = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_InsertBefore, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.InsertAfter = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_InsertAfter, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Split = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Split, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.First = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_First, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.ChangeFirst = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_ChangeFirst, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Last = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Last, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.ChangeLast = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_ChangeLast, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.Value = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_Value, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.ChangeValue = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_ChangeValue, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.__call__ = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch___call__, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch.SetValue = new_instancemethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_SetValue, None, Contap_SequenceOfSegmentOfTheSearch)
Contap_SequenceOfSegmentOfTheSearch_swigregister = _Contap.Contap_SequenceOfSegmentOfTheSearch_swigregister
Contap_SequenceOfSegmentOfTheSearch_swigregister(Contap_SequenceOfSegmentOfTheSearch)

def Contap_SequenceOfSegmentOfTheSearch_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _Contap.Contap_SequenceOfSegmentOfTheSearch_delNode(theNode, theAl)
Contap_SequenceOfSegmentOfTheSearch_delNode = _Contap.Contap_SequenceOfSegmentOfTheSearch_delNode

class Contap_TheSequenceOfLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Contap_TheSequenceOfLine_swiginit(self, _Contap.new_Contap_TheSequenceOfLine(*args))
    delNode = staticmethod(_Contap.Contap_TheSequenceOfLine_delNode)
    __swig_destroy__ = _Contap.delete_Contap_TheSequenceOfLine
Contap_TheSequenceOfLine.begin = new_instancemethod(_Contap.Contap_TheSequenceOfLine_begin, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.end = new_instancemethod(_Contap.Contap_TheSequenceOfLine_end, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.cbegin = new_instancemethod(_Contap.Contap_TheSequenceOfLine_cbegin, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.cend = new_instancemethod(_Contap.Contap_TheSequenceOfLine_cend, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Size = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Size, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Length = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Length, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Lower = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Lower, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Upper = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Upper, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.IsEmpty = new_instancemethod(_Contap.Contap_TheSequenceOfLine_IsEmpty, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Reverse = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Reverse, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Exchange = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Exchange, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Clear = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Clear, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Assign = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Assign, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Set = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Set, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Remove = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Remove, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Append = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Append, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Prepend = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Prepend, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.InsertBefore = new_instancemethod(_Contap.Contap_TheSequenceOfLine_InsertBefore, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.InsertAfter = new_instancemethod(_Contap.Contap_TheSequenceOfLine_InsertAfter, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Split = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Split, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.First = new_instancemethod(_Contap.Contap_TheSequenceOfLine_First, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.ChangeFirst = new_instancemethod(_Contap.Contap_TheSequenceOfLine_ChangeFirst, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Last = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Last, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.ChangeLast = new_instancemethod(_Contap.Contap_TheSequenceOfLine_ChangeLast, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.Value = new_instancemethod(_Contap.Contap_TheSequenceOfLine_Value, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.ChangeValue = new_instancemethod(_Contap.Contap_TheSequenceOfLine_ChangeValue, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.__call__ = new_instancemethod(_Contap.Contap_TheSequenceOfLine___call__, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine.SetValue = new_instancemethod(_Contap.Contap_TheSequenceOfLine_SetValue, None, Contap_TheSequenceOfLine)
Contap_TheSequenceOfLine_swigregister = _Contap.Contap_TheSequenceOfLine_swigregister
Contap_TheSequenceOfLine_swigregister(Contap_TheSequenceOfLine)

def Contap_TheSequenceOfLine_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _Contap.Contap_TheSequenceOfLine_delNode(theNode, theAl)
Contap_TheSequenceOfLine_delNode = _Contap.Contap_TheSequenceOfLine_delNode

class Contap_SequenceOfIWLineOfTheIWalking(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Contap_SequenceOfIWLineOfTheIWalking_swiginit(self, _Contap.new_Contap_SequenceOfIWLineOfTheIWalking(*args))
    delNode = staticmethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_delNode)
    __swig_destroy__ = _Contap.delete_Contap_SequenceOfIWLineOfTheIWalking
Contap_SequenceOfIWLineOfTheIWalking.begin = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_begin, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.end = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_end, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.cbegin = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_cbegin, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.cend = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_cend, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Size = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Size, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Length = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Length, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Lower = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Lower, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Upper = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Upper, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.IsEmpty = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_IsEmpty, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Reverse = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Reverse, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Exchange = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Exchange, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Clear = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Clear, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Assign = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Assign, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Set = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Set, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Remove = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Remove, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Append = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Append, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Prepend = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Prepend, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.InsertBefore = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_InsertBefore, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.InsertAfter = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_InsertAfter, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Split = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Split, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.First = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_First, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.ChangeFirst = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_ChangeFirst, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Last = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Last, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.ChangeLast = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_ChangeLast, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.Value = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_Value, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.ChangeValue = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_ChangeValue, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.__call__ = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking___call__, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking.SetValue = new_instancemethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_SetValue, None, Contap_SequenceOfIWLineOfTheIWalking)
Contap_SequenceOfIWLineOfTheIWalking_swigregister = _Contap.Contap_SequenceOfIWLineOfTheIWalking_swigregister
Contap_SequenceOfIWLineOfTheIWalking_swigregister(Contap_SequenceOfIWLineOfTheIWalking)

def Contap_SequenceOfIWLineOfTheIWalking_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _Contap.Contap_SequenceOfIWLineOfTheIWalking_delNode(theNode, theAl)
Contap_SequenceOfIWLineOfTheIWalking_delNode = _Contap.Contap_SequenceOfIWLineOfTheIWalking_delNode

class Contap_SequenceOfPathPointOfTheSearch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Contap_SequenceOfPathPointOfTheSearch_swiginit(self, _Contap.new_Contap_SequenceOfPathPointOfTheSearch(*args))
    delNode = staticmethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_delNode)
    __swig_destroy__ = _Contap.delete_Contap_SequenceOfPathPointOfTheSearch
Contap_SequenceOfPathPointOfTheSearch.begin = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_begin, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.end = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_end, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.cbegin = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_cbegin, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.cend = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_cend, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Size = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Size, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Length = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Length, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Lower = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Lower, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Upper = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Upper, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.IsEmpty = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_IsEmpty, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Reverse = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Reverse, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Exchange = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Exchange, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Clear = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Clear, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Assign = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Assign, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Set = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Set, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Remove = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Remove, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Append = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Append, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Prepend = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Prepend, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.InsertBefore = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_InsertBefore, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.InsertAfter = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_InsertAfter, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Split = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Split, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.First = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_First, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.ChangeFirst = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_ChangeFirst, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Last = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Last, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.ChangeLast = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_ChangeLast, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.Value = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_Value, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.ChangeValue = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_ChangeValue, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.__call__ = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch___call__, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch.SetValue = new_instancemethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_SetValue, None, Contap_SequenceOfPathPointOfTheSearch)
Contap_SequenceOfPathPointOfTheSearch_swigregister = _Contap.Contap_SequenceOfPathPointOfTheSearch_swigregister
Contap_SequenceOfPathPointOfTheSearch_swigregister(Contap_SequenceOfPathPointOfTheSearch)

def Contap_SequenceOfPathPointOfTheSearch_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _Contap.Contap_SequenceOfPathPointOfTheSearch_delNode(theNode, theAl)
Contap_SequenceOfPathPointOfTheSearch_delNode = _Contap.Contap_SequenceOfPathPointOfTheSearch_delNode

class Contap_ArcFunction(OCC.Core.math.math_FunctionWithDerivative):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _Contap.Contap_ArcFunction_swiginit(self, _Contap.new_Contap_ArcFunction(*args))

    def LastComputedPoint(self, *args) -> "gp_Pnt const":
        """
        * Returns the point, which has been computed while the last calling Value() method
        	:rtype: gp_Pnt
        """
        return _Contap.Contap_ArcFunction_LastComputedPoint(self, *args)


    def NbSamples(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _Contap.Contap_ArcFunction_NbSamples(self, *args)


    def Quadric(self, *args) -> "IntSurf_Quadric const &":
        """:rtype: IntSurf_Quadric"""
        return _Contap.Contap_ArcFunction_Quadric(self, *args)


    def Set(self, *args) -> "void":
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:rtype: None
        :param Direction:
        	:type Direction: gp_Dir
        	:rtype: None
        :param Direction:
        	:type Direction: gp_Dir
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        :param Eye:
        	:type Eye: gp_Pnt
        	:rtype: None
        :param Eye:
        	:type Eye: gp_Pnt
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        :param A:
        	:type A: Adaptor2d_HCurve2d
        	:rtype: None
        """
        return _Contap.Contap_ArcFunction_Set(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """
        * Returns mySurf field
        	:rtype: opencascade::handle<Adaptor3d_HSurface>
        """
        return _Contap.Contap_ArcFunction_Surface(self, *args)


    def Valpoint(self, *args) -> "gp_Pnt const":
        """
        :param Index:
        	:type Index: int
        	:rtype: gp_Pnt
        """
        return _Contap.Contap_ArcFunction_Valpoint(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_ArcFunction
Contap_ArcFunction.LastComputedPoint = new_instancemethod(_Contap.Contap_ArcFunction_LastComputedPoint, None, Contap_ArcFunction)
Contap_ArcFunction.NbSamples = new_instancemethod(_Contap.Contap_ArcFunction_NbSamples, None, Contap_ArcFunction)
Contap_ArcFunction.Quadric = new_instancemethod(_Contap.Contap_ArcFunction_Quadric, None, Contap_ArcFunction)
Contap_ArcFunction.Set = new_instancemethod(_Contap.Contap_ArcFunction_Set, None, Contap_ArcFunction)
Contap_ArcFunction.Surface = new_instancemethod(_Contap.Contap_ArcFunction_Surface, None, Contap_ArcFunction)
Contap_ArcFunction.Valpoint = new_instancemethod(_Contap.Contap_ArcFunction_Valpoint, None, Contap_ArcFunction)
Contap_ArcFunction_swigregister = _Contap.Contap_ArcFunction_swigregister
Contap_ArcFunction_swigregister(Contap_ArcFunction)

class Contap_ContAna(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Circle(self, *args) -> "gp_Circ":
        """:rtype: gp_Circ"""
        return _Contap.Contap_ContAna_Circle(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _Contap.Contap_ContAna_swiginit(self, _Contap.new_Contap_ContAna(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Contap.Contap_ContAna_IsDone(self, *args)


    def Line(self, *args) -> "gp_Lin":
        """
        :param Index:
        	:type Index: int
        	:rtype: gp_Lin
        """
        return _Contap.Contap_ContAna_Line(self, *args)


    def NbContours(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _Contap.Contap_ContAna_NbContours(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param S:
        	:type S: gp_Sphere
        	:param D:
        	:type D: gp_Dir
        	:rtype: None
        :param S:
        	:type S: gp_Sphere
        	:param D:
        	:type D: gp_Dir
        	:param Ang:
        	:type Ang: float
        	:rtype: None
        :param S:
        	:type S: gp_Sphere
        	:param Eye:
        	:type Eye: gp_Pnt
        	:rtype: None
        :param C:
        	:type C: gp_Cylinder
        	:param D:
        	:type D: gp_Dir
        	:rtype: None
        :param C:
        	:type C: gp_Cylinder
        	:param D:
        	:type D: gp_Dir
        	:param Ang:
        	:type Ang: float
        	:rtype: None
        :param C:
        	:type C: gp_Cylinder
        	:param Eye:
        	:type Eye: gp_Pnt
        	:rtype: None
        :param C:
        	:type C: gp_Cone
        	:param D:
        	:type D: gp_Dir
        	:rtype: None
        :param C:
        	:type C: gp_Cone
        	:param D:
        	:type D: gp_Dir
        	:param Ang:
        	:type Ang: float
        	:rtype: None
        :param C:
        	:type C: gp_Cone
        	:param Eye:
        	:type Eye: gp_Pnt
        	:rtype: None
        """
        return _Contap.Contap_ContAna_Perform(self, *args)


    def TypeContour(self, *args) -> "GeomAbs_CurveType":
        """
        * Returns GeomAbs_Line or GeomAbs_Circle, when IsDone() returns True.
        	:rtype: GeomAbs_CurveType
        """
        return _Contap.Contap_ContAna_TypeContour(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_ContAna
Contap_ContAna.Circle = new_instancemethod(_Contap.Contap_ContAna_Circle, None, Contap_ContAna)
Contap_ContAna.IsDone = new_instancemethod(_Contap.Contap_ContAna_IsDone, None, Contap_ContAna)
Contap_ContAna.Line = new_instancemethod(_Contap.Contap_ContAna_Line, None, Contap_ContAna)
Contap_ContAna.NbContours = new_instancemethod(_Contap.Contap_ContAna_NbContours, None, Contap_ContAna)
Contap_ContAna.Perform = new_instancemethod(_Contap.Contap_ContAna_Perform, None, Contap_ContAna)
Contap_ContAna.TypeContour = new_instancemethod(_Contap.Contap_ContAna_TypeContour, None, Contap_ContAna)
Contap_ContAna_swigregister = _Contap.Contap_ContAna_swigregister
Contap_ContAna_swigregister(Contap_ContAna)

class Contap_Contour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Direction:
        	:type Direction: gp_Vec
        	:rtype: None
        :param Direction:
        	:type Direction: gp_Vec
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        :param Eye:
        	:type Eye: gp_Pnt
        	:rtype: None
        * Creates the contour in a given direction.
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param Domain:
        	:type Domain: Adaptor3d_TopolTool
        	:param Direction:
        	:type Direction: gp_Vec
        	:rtype: None
        * Creates the contour in a given direction.
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param Domain:
        	:type Domain: Adaptor3d_TopolTool
        	:param Direction:
        	:type Direction: gp_Vec
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        * Creates the contour for a perspective view.
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param Domain:
        	:type Domain: Adaptor3d_TopolTool
        	:param Eye:
        	:type Eye: gp_Pnt
        	:rtype: None
        """
        _Contap.Contap_Contour_swiginit(self, _Contap.new_Contap_Contour(*args))

    def Init(self, *args) -> "void":
        """
        :param Direction:
        	:type Direction: gp_Vec
        	:rtype: None
        :param Direction:
        	:type Direction: gp_Vec
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        :param Eye:
        	:type Eye: gp_Pnt
        	:rtype: None
        """
        return _Contap.Contap_Contour_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Contap.Contap_Contour_IsDone(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the is no line.
        	:rtype: bool
        """
        return _Contap.Contap_Contour_IsEmpty(self, *args)


    def Line(self, *args) -> "Contap_Line const &":
        """
        :param Index:
        	:type Index: int
        	:rtype: Contap_Line
        """
        return _Contap.Contap_Contour_Line(self, *args)


    def NbLines(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _Contap.Contap_Contour_NbLines(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Creates the contour in a given direction.
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param Domain:
        	:type Domain: Adaptor3d_TopolTool
        	:rtype: None
        * Creates the contour in a given direction.
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param Domain:
        	:type Domain: Adaptor3d_TopolTool
        	:param Direction:
        	:type Direction: gp_Vec
        	:rtype: None
        * Creates the contour in a given direction.
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param Domain:
        	:type Domain: Adaptor3d_TopolTool
        	:param Direction:
        	:type Direction: gp_Vec
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        * Creates the contour for a perspective view.
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param Domain:
        	:type Domain: Adaptor3d_TopolTool
        	:param Eye:
        	:type Eye: gp_Pnt
        	:rtype: None
        """
        return _Contap.Contap_Contour_Perform(self, *args)


    def SurfaceFunction(self, *args) -> "Contap_SurfFunction &":
        """
        * Returns a reference on the internal SurfaceFunction. This is used to compute tangents on the lines.
        	:rtype: Contap_SurfFunction
        """
        return _Contap.Contap_Contour_SurfaceFunction(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_Contour
Contap_Contour.Init = new_instancemethod(_Contap.Contap_Contour_Init, None, Contap_Contour)
Contap_Contour.IsDone = new_instancemethod(_Contap.Contap_Contour_IsDone, None, Contap_Contour)
Contap_Contour.IsEmpty = new_instancemethod(_Contap.Contap_Contour_IsEmpty, None, Contap_Contour)
Contap_Contour.Line = new_instancemethod(_Contap.Contap_Contour_Line, None, Contap_Contour)
Contap_Contour.NbLines = new_instancemethod(_Contap.Contap_Contour_NbLines, None, Contap_Contour)
Contap_Contour.Perform = new_instancemethod(_Contap.Contap_Contour_Perform, None, Contap_Contour)
Contap_Contour.SurfaceFunction = new_instancemethod(_Contap.Contap_Contour_SurfaceFunction, None, Contap_Contour)
Contap_Contour_swigregister = _Contap.Contap_Contour_swigregister
Contap_Contour_swigregister(Contap_Contour)

class Contap_HContTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Bounds(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Returns the parametric limits on the arc C. These limits must be finite : they are either the real limits of the arc, for a finite arc, or a bounding box for an infinite arc.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param Ufirst:
        	:type Ufirst: float
        	:param Ulast:
        	:type Ulast: float
        	:rtype: void
        """
        return _Contap.Contap_HContTool_Bounds(*args)

    Bounds = staticmethod(Bounds)

    def HasBeenSeen(*args) -> "Standard_Boolean":
        """
        * Returns True if all the intersection point and edges are known on the Arc. The intersection point are given as vertices. The intersection edges are given as intervals between two vertices.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: bool
        """
        return _Contap.Contap_HContTool_HasBeenSeen(*args)

    HasBeenSeen = staticmethod(HasBeenSeen)

    def HasFirstPoint(*args) -> "Standard_Integer &":
        """
        * Returns True when the segment of range Index is not open at the left side. In that case, IndFirst is the range in the list intersection points (see NbPoints) of the one which defines the left bound of the segment. Otherwise, the method has to return False, and IndFirst has no meaning.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param Index:
        	:type Index: int
        	:param IndFirst:
        	:type IndFirst: int
        	:rtype: bool
        """
        return _Contap.Contap_HContTool_HasFirstPoint(*args)

    HasFirstPoint = staticmethod(HasFirstPoint)

    def HasLastPoint(*args) -> "Standard_Integer &":
        """
        * Returns True when the segment of range Index is not open at the right side. In that case, IndLast is the range in the list intersection points (see NbPoints) of the one which defines the right bound of the segment. Otherwise, the method has to return False, and IndLast has no meaning.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param Index:
        	:type Index: int
        	:param IndLast:
        	:type IndLast: int
        	:rtype: bool
        """
        return _Contap.Contap_HContTool_HasLastPoint(*args)

    HasLastPoint = staticmethod(HasLastPoint)

    def IsAllSolution(*args) -> "Standard_Boolean":
        """
        * Returns True when the whole restriction is solution of the intersection problem.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: bool
        """
        return _Contap.Contap_HContTool_IsAllSolution(*args)

    IsAllSolution = staticmethod(IsAllSolution)

    def IsVertex(*args) -> "Standard_Boolean":
        """
        * Returns True if the intersection point of range Index corresponds with a vertex on the arc A.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param Index:
        	:type Index: int
        	:rtype: bool
        """
        return _Contap.Contap_HContTool_IsVertex(*args)

    IsVertex = staticmethod(IsVertex)

    def NbPoints(*args) -> "Standard_Integer":
        """
        * Returns the number of intersection points on the arc A.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: int
        """
        return _Contap.Contap_HContTool_NbPoints(*args)

    NbPoints = staticmethod(NbPoints)

    def NbSamplePoints(*args) -> "Standard_Integer":
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:rtype: int
        """
        return _Contap.Contap_HContTool_NbSamplePoints(*args)

    NbSamplePoints = staticmethod(NbSamplePoints)

    def NbSamplesOnArc(*args) -> "Standard_Integer":
        """
        * returns the number of points which is used to make a sample on the arc. this number is a function of the Surface and the CurveOnSurface complexity.
        	:param A:
        	:type A: Adaptor2d_HCurve2d
        	:rtype: int
        """
        return _Contap.Contap_HContTool_NbSamplesOnArc(*args)

    NbSamplesOnArc = staticmethod(NbSamplesOnArc)

    def NbSamplesU(*args) -> "Standard_Integer":
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:param u1:
        	:type u1: float
        	:param u2:
        	:type u2: float
        	:rtype: int
        """
        return _Contap.Contap_HContTool_NbSamplesU(*args)

    NbSamplesU = staticmethod(NbSamplesU)

    def NbSamplesV(*args) -> "Standard_Integer":
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:param v1:
        	:type v1: float
        	:param v2:
        	:type v2: float
        	:rtype: int
        """
        return _Contap.Contap_HContTool_NbSamplesV(*args)

    NbSamplesV = staticmethod(NbSamplesV)

    def NbSegments(*args) -> "Standard_Integer":
        """
        * returns the number of part of A solution of the of intersection problem.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: int
        """
        return _Contap.Contap_HContTool_NbSegments(*args)

    NbSegments = staticmethod(NbSegments)

    def Parameter(*args) -> "Standard_Real":
        """
        * Returns the parameter of the vertex V on the arc A.
        	:param V:
        	:type V: Adaptor3d_HVertex
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: float
        """
        return _Contap.Contap_HContTool_Parameter(*args)

    Parameter = staticmethod(Parameter)

    def Project(*args) -> "Standard_Real &":
        """
        * Projects the point P on the arc C. If the methods returns Standard_True, the projection is successful, and Paramproj is the parameter on the arc of the projected point, Ptproj is the projected Point. If the method returns Standard_False, Param proj and Ptproj are not significant.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param P:
        	:type P: gp_Pnt2d
        	:param Paramproj:
        	:type Paramproj: float
        	:param Ptproj:
        	:type Ptproj: gp_Pnt2d
        	:rtype: bool
        """
        return _Contap.Contap_HContTool_Project(*args)

    Project = staticmethod(Project)

    def SamplePoint(*args) -> "Standard_Real &, Standard_Real &":
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:param Index:
        	:type Index: int
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: void
        """
        return _Contap.Contap_HContTool_SamplePoint(*args)

    SamplePoint = staticmethod(SamplePoint)

    def Tolerance(*args) -> "Standard_Real":
        """
        * Returns the parametric tolerance used to consider that the vertex and another point meet, i-e if Abs(parameter(Vertex) - parameter(OtherPnt))<= Tolerance, the points are 'merged'.
        	:param V:
        	:type V: Adaptor3d_HVertex
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: float
        """
        return _Contap.Contap_HContTool_Tolerance(*args)

    Tolerance = staticmethod(Tolerance)

    def Value(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Returns the value (Pt), the tolerance (Tol), and the parameter (U) on the arc A , of the intersection point of range Index.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param Index:
        	:type Index: int
        	:param Pt:
        	:type Pt: gp_Pnt
        	:param Tol:
        	:type Tol: float
        	:param U:
        	:type U: float
        	:rtype: void
        """
        return _Contap.Contap_HContTool_Value(*args)

    Value = staticmethod(Value)

    def Vertex(*args) -> "void":
        """
        * When IsVertex returns True, this method returns the vertex on the arc A.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param Index:
        	:type Index: int
        	:param V:
        	:type V: Adaptor3d_HVertex
        	:rtype: void
        """
        return _Contap.Contap_HContTool_Vertex(*args)

    Vertex = staticmethod(Vertex)

    __repr__ = _dumps_object


    def __init__(self):
        _Contap.Contap_HContTool_swiginit(self, _Contap.new_Contap_HContTool())
    __swig_destroy__ = _Contap.delete_Contap_HContTool
Contap_HContTool_swigregister = _Contap.Contap_HContTool_swigregister
Contap_HContTool_swigregister(Contap_HContTool)

def Contap_HContTool_Bounds(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Returns the parametric limits on the arc C. These limits must be finite : they are either the real limits of the arc, for a finite arc, or a bounding box for an infinite arc.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param Ufirst:
    	:type Ufirst: float
    	:param Ulast:
    	:type Ulast: float
    	:rtype: void
    """
    return _Contap.Contap_HContTool_Bounds(*args)

def Contap_HContTool_HasBeenSeen(*args) -> "Standard_Boolean":
    """
    * Returns True if all the intersection point and edges are known on the Arc. The intersection point are given as vertices. The intersection edges are given as intervals between two vertices.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: bool
    """
    return _Contap.Contap_HContTool_HasBeenSeen(*args)

def Contap_HContTool_HasFirstPoint(*args) -> "Standard_Integer &":
    """
    * Returns True when the segment of range Index is not open at the left side. In that case, IndFirst is the range in the list intersection points (see NbPoints) of the one which defines the left bound of the segment. Otherwise, the method has to return False, and IndFirst has no meaning.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param Index:
    	:type Index: int
    	:param IndFirst:
    	:type IndFirst: int
    	:rtype: bool
    """
    return _Contap.Contap_HContTool_HasFirstPoint(*args)

def Contap_HContTool_HasLastPoint(*args) -> "Standard_Integer &":
    """
    * Returns True when the segment of range Index is not open at the right side. In that case, IndLast is the range in the list intersection points (see NbPoints) of the one which defines the right bound of the segment. Otherwise, the method has to return False, and IndLast has no meaning.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param Index:
    	:type Index: int
    	:param IndLast:
    	:type IndLast: int
    	:rtype: bool
    """
    return _Contap.Contap_HContTool_HasLastPoint(*args)

def Contap_HContTool_IsAllSolution(*args) -> "Standard_Boolean":
    """
    * Returns True when the whole restriction is solution of the intersection problem.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: bool
    """
    return _Contap.Contap_HContTool_IsAllSolution(*args)

def Contap_HContTool_IsVertex(*args) -> "Standard_Boolean":
    """
    * Returns True if the intersection point of range Index corresponds with a vertex on the arc A.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param Index:
    	:type Index: int
    	:rtype: bool
    """
    return _Contap.Contap_HContTool_IsVertex(*args)

def Contap_HContTool_NbPoints(*args) -> "Standard_Integer":
    """
    * Returns the number of intersection points on the arc A.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: int
    """
    return _Contap.Contap_HContTool_NbPoints(*args)

def Contap_HContTool_NbSamplePoints(*args) -> "Standard_Integer":
    """
    :param S:
    	:type S: Adaptor3d_HSurface
    	:rtype: int
    """
    return _Contap.Contap_HContTool_NbSamplePoints(*args)

def Contap_HContTool_NbSamplesOnArc(*args) -> "Standard_Integer":
    """
    * returns the number of points which is used to make a sample on the arc. this number is a function of the Surface and the CurveOnSurface complexity.
    	:param A:
    	:type A: Adaptor2d_HCurve2d
    	:rtype: int
    """
    return _Contap.Contap_HContTool_NbSamplesOnArc(*args)

def Contap_HContTool_NbSamplesU(*args) -> "Standard_Integer":
    """
    :param S:
    	:type S: Adaptor3d_HSurface
    	:param u1:
    	:type u1: float
    	:param u2:
    	:type u2: float
    	:rtype: int
    """
    return _Contap.Contap_HContTool_NbSamplesU(*args)

def Contap_HContTool_NbSamplesV(*args) -> "Standard_Integer":
    """
    :param S:
    	:type S: Adaptor3d_HSurface
    	:param v1:
    	:type v1: float
    	:param v2:
    	:type v2: float
    	:rtype: int
    """
    return _Contap.Contap_HContTool_NbSamplesV(*args)

def Contap_HContTool_NbSegments(*args) -> "Standard_Integer":
    """
    * returns the number of part of A solution of the of intersection problem.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: int
    """
    return _Contap.Contap_HContTool_NbSegments(*args)

def Contap_HContTool_Parameter(*args) -> "Standard_Real":
    """
    * Returns the parameter of the vertex V on the arc A.
    	:param V:
    	:type V: Adaptor3d_HVertex
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: float
    """
    return _Contap.Contap_HContTool_Parameter(*args)

def Contap_HContTool_Project(*args) -> "Standard_Real &":
    """
    * Projects the point P on the arc C. If the methods returns Standard_True, the projection is successful, and Paramproj is the parameter on the arc of the projected point, Ptproj is the projected Point. If the method returns Standard_False, Param proj and Ptproj are not significant.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param P:
    	:type P: gp_Pnt2d
    	:param Paramproj:
    	:type Paramproj: float
    	:param Ptproj:
    	:type Ptproj: gp_Pnt2d
    	:rtype: bool
    """
    return _Contap.Contap_HContTool_Project(*args)

def Contap_HContTool_SamplePoint(*args) -> "Standard_Real &, Standard_Real &":
    """
    :param S:
    	:type S: Adaptor3d_HSurface
    	:param Index:
    	:type Index: int
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:rtype: void
    """
    return _Contap.Contap_HContTool_SamplePoint(*args)

def Contap_HContTool_Tolerance(*args) -> "Standard_Real":
    """
    * Returns the parametric tolerance used to consider that the vertex and another point meet, i-e if Abs(parameter(Vertex) - parameter(OtherPnt))<= Tolerance, the points are 'merged'.
    	:param V:
    	:type V: Adaptor3d_HVertex
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: float
    """
    return _Contap.Contap_HContTool_Tolerance(*args)

def Contap_HContTool_Value(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Returns the value (Pt), the tolerance (Tol), and the parameter (U) on the arc A , of the intersection point of range Index.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param Index:
    	:type Index: int
    	:param Pt:
    	:type Pt: gp_Pnt
    	:param Tol:
    	:type Tol: float
    	:param U:
    	:type U: float
    	:rtype: void
    """
    return _Contap.Contap_HContTool_Value(*args)

def Contap_HContTool_Vertex(*args) -> "void":
    """
    * When IsVertex returns True, this method returns the vertex on the arc A.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param Index:
    	:type Index: int
    	:param V:
    	:type V: Adaptor3d_HVertex
    	:rtype: void
    """
    return _Contap.Contap_HContTool_Vertex(*args)

class Contap_HCurve2dTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BSpline(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: opencascade::handle<Geom2d_BSplineCurve>
        """
        return _Contap.Contap_HCurve2dTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def Bezier(*args) -> "opencascade::handle< Geom2d_BezierCurve >":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: opencascade::handle<Geom2d_BezierCurve>
        """
        return _Contap.Contap_HCurve2dTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def Circle(*args) -> "gp_Circ2d":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: gp_Circ2d
        """
        return _Contap.Contap_HCurve2dTool_Circle(*args)

    Circle = staticmethod(Circle)

    def Continuity(*args) -> "GeomAbs_Shape":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: GeomAbs_Shape
        """
        return _Contap.Contap_HCurve2dTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def D0(*args) -> "void":
        """
        * Computes the point of parameter U on the curve.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _Contap.Contap_HCurve2dTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args) -> "void":
        """
        * Computes the point of parameter U on the curve with its first derivative. Raised if the continuity of the current interval is not C1.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:param V:
        	:type V: gp_Vec2d
        	:rtype: None
        """
        return _Contap.Contap_HCurve2dTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args) -> "void":
        """
        * Returns the point P of parameter U, the first and second derivatives V1 and V2. Raised if the continuity of the current interval is not C2.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:rtype: None
        """
        return _Contap.Contap_HCurve2dTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args) -> "void":
        """
        * Returns the point P of parameter U, the first, the second and the third derivative. Raised if the continuity of the current interval is not C3.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt2d
        	:param V1:
        	:type V1: gp_Vec2d
        	:param V2:
        	:type V2: gp_Vec2d
        	:param V3:
        	:type V3: gp_Vec2d
        	:rtype: None
        """
        return _Contap.Contap_HCurve2dTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args) -> "gp_Vec2d":
        """
        * The returned vector gives the value of the derivative for the order of derivation N. Raised if the continuity of the current interval is not CN. Raised if N < 1.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param U:
        	:type U: float
        	:param N:
        	:type N: int
        	:rtype: gp_Vec2d
        """
        return _Contap.Contap_HCurve2dTool_DN(*args)

    DN = staticmethod(DN)

    def Ellipse(*args) -> "gp_Elips2d":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: gp_Elips2d
        """
        return _Contap.Contap_HCurve2dTool_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def FirstParameter(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: float
        """
        return _Contap.Contap_HCurve2dTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def GetType(*args) -> "GeomAbs_CurveType":
        """
        * Returns the type of the curve in the current interval : Line, Circle, Ellipse, Hyperbola, Parabola, BezierCurve, BSplineCurve, OtherCurve.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: GeomAbs_CurveType
        """
        return _Contap.Contap_HCurve2dTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Hyperbola(*args) -> "gp_Hypr2d":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: gp_Hypr2d
        """
        return _Contap.Contap_HCurve2dTool_Hyperbola(*args)

    Hyperbola = staticmethod(Hyperbola)

    def Intervals(*args) -> "void":
        """
        * Stores in <T> the parameters bounding the intervals of continuity <S>. //! The array must provide enough room to accomodate for the parameters. i.e. T.Length() > NbIntervals()
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param T:
        	:type T: TColStd_Array1OfReal
        	:param S:
        	:type S: GeomAbs_Shape
        	:rtype: None
        """
        return _Contap.Contap_HCurve2dTool_Intervals(*args)

    Intervals = staticmethod(Intervals)

    def IsClosed(*args) -> "Standard_Boolean":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: bool
        """
        return _Contap.Contap_HCurve2dTool_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def IsPeriodic(*args) -> "Standard_Boolean":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: bool
        """
        return _Contap.Contap_HCurve2dTool_IsPeriodic(*args)

    IsPeriodic = staticmethod(IsPeriodic)

    def LastParameter(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: float
        """
        return _Contap.Contap_HCurve2dTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def Line(*args) -> "gp_Lin2d":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: gp_Lin2d
        """
        return _Contap.Contap_HCurve2dTool_Line(*args)

    Line = staticmethod(Line)

    def NbIntervals(*args) -> "Standard_Integer":
        """
        * Returns the number of intervals for continuity <S>. May be one if Continuity(myclass) >= <S>
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param S:
        	:type S: GeomAbs_Shape
        	:rtype: int
        """
        return _Contap.Contap_HCurve2dTool_NbIntervals(*args)

    NbIntervals = staticmethod(NbIntervals)

    def NbSamples(*args) -> "Standard_Integer":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:param U0:
        	:type U0: float
        	:param U1:
        	:type U1: float
        	:rtype: int
        """
        return _Contap.Contap_HCurve2dTool_NbSamples(*args)

    NbSamples = staticmethod(NbSamples)

    def Parabola(*args) -> "gp_Parab2d":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: gp_Parab2d
        """
        return _Contap.Contap_HCurve2dTool_Parabola(*args)

    Parabola = staticmethod(Parabola)

    def Period(*args) -> "Standard_Real":
        """
        :param C:
        	:type C: Adaptor2d_HCurve2d
        	:rtype: float
        """
        return _Contap.Contap_HCurve2dTool_Period(*args)

    Period = staticmethod(Period)

    def Resolution(*args) -> "Standard_Real":
        """
        * Returns the parametric resolution corresponding to the real space resolution <R3d>.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param R3d:
        	:type R3d: float
        	:rtype: float
        """
        return _Contap.Contap_HCurve2dTool_Resolution(*args)

    Resolution = staticmethod(Resolution)

    def Value(*args) -> "gp_Pnt2d":
        """
        * Computes the point of parameter U on the curve.
        	:param C:
        	:type C: Adaptor2d_HCurve2d
        	:param U:
        	:type U: float
        	:rtype: gp_Pnt2d
        """
        return _Contap.Contap_HCurve2dTool_Value(*args)

    Value = staticmethod(Value)

    __repr__ = _dumps_object


    def __init__(self):
        _Contap.Contap_HCurve2dTool_swiginit(self, _Contap.new_Contap_HCurve2dTool())
    __swig_destroy__ = _Contap.delete_Contap_HCurve2dTool
Contap_HCurve2dTool_swigregister = _Contap.Contap_HCurve2dTool_swigregister
Contap_HCurve2dTool_swigregister(Contap_HCurve2dTool)

def Contap_HCurve2dTool_BSpline(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: opencascade::handle<Geom2d_BSplineCurve>
    """
    return _Contap.Contap_HCurve2dTool_BSpline(*args)

def Contap_HCurve2dTool_Bezier(*args) -> "opencascade::handle< Geom2d_BezierCurve >":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: opencascade::handle<Geom2d_BezierCurve>
    """
    return _Contap.Contap_HCurve2dTool_Bezier(*args)

def Contap_HCurve2dTool_Circle(*args) -> "gp_Circ2d":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: gp_Circ2d
    """
    return _Contap.Contap_HCurve2dTool_Circle(*args)

def Contap_HCurve2dTool_Continuity(*args) -> "GeomAbs_Shape":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: GeomAbs_Shape
    """
    return _Contap.Contap_HCurve2dTool_Continuity(*args)

def Contap_HCurve2dTool_D0(*args) -> "void":
    """
    * Computes the point of parameter U on the curve.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:rtype: None
    """
    return _Contap.Contap_HCurve2dTool_D0(*args)

def Contap_HCurve2dTool_D1(*args) -> "void":
    """
    * Computes the point of parameter U on the curve with its first derivative. Raised if the continuity of the current interval is not C1.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:param V:
    	:type V: gp_Vec2d
    	:rtype: None
    """
    return _Contap.Contap_HCurve2dTool_D1(*args)

def Contap_HCurve2dTool_D2(*args) -> "void":
    """
    * Returns the point P of parameter U, the first and second derivatives V1 and V2. Raised if the continuity of the current interval is not C2.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:param V1:
    	:type V1: gp_Vec2d
    	:param V2:
    	:type V2: gp_Vec2d
    	:rtype: None
    """
    return _Contap.Contap_HCurve2dTool_D2(*args)

def Contap_HCurve2dTool_D3(*args) -> "void":
    """
    * Returns the point P of parameter U, the first, the second and the third derivative. Raised if the continuity of the current interval is not C3.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt2d
    	:param V1:
    	:type V1: gp_Vec2d
    	:param V2:
    	:type V2: gp_Vec2d
    	:param V3:
    	:type V3: gp_Vec2d
    	:rtype: None
    """
    return _Contap.Contap_HCurve2dTool_D3(*args)

def Contap_HCurve2dTool_DN(*args) -> "gp_Vec2d":
    """
    * The returned vector gives the value of the derivative for the order of derivation N. Raised if the continuity of the current interval is not CN. Raised if N < 1.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param U:
    	:type U: float
    	:param N:
    	:type N: int
    	:rtype: gp_Vec2d
    """
    return _Contap.Contap_HCurve2dTool_DN(*args)

def Contap_HCurve2dTool_Ellipse(*args) -> "gp_Elips2d":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: gp_Elips2d
    """
    return _Contap.Contap_HCurve2dTool_Ellipse(*args)

def Contap_HCurve2dTool_FirstParameter(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: float
    """
    return _Contap.Contap_HCurve2dTool_FirstParameter(*args)

def Contap_HCurve2dTool_GetType(*args) -> "GeomAbs_CurveType":
    """
    * Returns the type of the curve in the current interval : Line, Circle, Ellipse, Hyperbola, Parabola, BezierCurve, BSplineCurve, OtherCurve.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: GeomAbs_CurveType
    """
    return _Contap.Contap_HCurve2dTool_GetType(*args)

def Contap_HCurve2dTool_Hyperbola(*args) -> "gp_Hypr2d":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: gp_Hypr2d
    """
    return _Contap.Contap_HCurve2dTool_Hyperbola(*args)

def Contap_HCurve2dTool_Intervals(*args) -> "void":
    """
    * Stores in <T> the parameters bounding the intervals of continuity <S>. //! The array must provide enough room to accomodate for the parameters. i.e. T.Length() > NbIntervals()
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param T:
    	:type T: TColStd_Array1OfReal
    	:param S:
    	:type S: GeomAbs_Shape
    	:rtype: None
    """
    return _Contap.Contap_HCurve2dTool_Intervals(*args)

def Contap_HCurve2dTool_IsClosed(*args) -> "Standard_Boolean":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: bool
    """
    return _Contap.Contap_HCurve2dTool_IsClosed(*args)

def Contap_HCurve2dTool_IsPeriodic(*args) -> "Standard_Boolean":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: bool
    """
    return _Contap.Contap_HCurve2dTool_IsPeriodic(*args)

def Contap_HCurve2dTool_LastParameter(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: float
    """
    return _Contap.Contap_HCurve2dTool_LastParameter(*args)

def Contap_HCurve2dTool_Line(*args) -> "gp_Lin2d":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: gp_Lin2d
    """
    return _Contap.Contap_HCurve2dTool_Line(*args)

def Contap_HCurve2dTool_NbIntervals(*args) -> "Standard_Integer":
    """
    * Returns the number of intervals for continuity <S>. May be one if Continuity(myclass) >= <S>
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param S:
    	:type S: GeomAbs_Shape
    	:rtype: int
    """
    return _Contap.Contap_HCurve2dTool_NbIntervals(*args)

def Contap_HCurve2dTool_NbSamples(*args) -> "Standard_Integer":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:param U0:
    	:type U0: float
    	:param U1:
    	:type U1: float
    	:rtype: int
    """
    return _Contap.Contap_HCurve2dTool_NbSamples(*args)

def Contap_HCurve2dTool_Parabola(*args) -> "gp_Parab2d":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: gp_Parab2d
    """
    return _Contap.Contap_HCurve2dTool_Parabola(*args)

def Contap_HCurve2dTool_Period(*args) -> "Standard_Real":
    """
    :param C:
    	:type C: Adaptor2d_HCurve2d
    	:rtype: float
    """
    return _Contap.Contap_HCurve2dTool_Period(*args)

def Contap_HCurve2dTool_Resolution(*args) -> "Standard_Real":
    """
    * Returns the parametric resolution corresponding to the real space resolution <R3d>.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param R3d:
    	:type R3d: float
    	:rtype: float
    """
    return _Contap.Contap_HCurve2dTool_Resolution(*args)

def Contap_HCurve2dTool_Value(*args) -> "gp_Pnt2d":
    """
    * Computes the point of parameter U on the curve.
    	:param C:
    	:type C: Adaptor2d_HCurve2d
    	:param U:
    	:type U: float
    	:rtype: gp_Pnt2d
    """
    return _Contap.Contap_HCurve2dTool_Value(*args)

class Contap_Line(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        :param P:
        	:type P: IntSurf_PntOn2S
        	:rtype: None
        :param P:
        	:type P: Contap_Point
        	:rtype: None
        """
        return _Contap.Contap_Line_Add(self, *args)


    def Arc(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > const &":
        """:rtype: opencascade::handle<Adaptor2d_HCurve2d>"""
        return _Contap.Contap_Line_Arc(self, *args)


    def Circle(self, *args) -> "gp_Circ":
        """:rtype: gp_Circ"""
        return _Contap.Contap_Line_Circle(self, *args)


    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _Contap.Contap_Line_Clear(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _Contap.Contap_Line_swiginit(self, _Contap.new_Contap_Line(*args))

    def Line(self, *args) -> "gp_Lin":
        """:rtype: gp_Lin"""
        return _Contap.Contap_Line_Line(self, *args)


    def LineOn2S(self, *args) -> "opencascade::handle< IntSurf_LineOn2S > const &":
        """:rtype: opencascade::handle<IntSurf_LineOn2S>"""
        return _Contap.Contap_Line_LineOn2S(self, *args)


    def NbPnts(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _Contap.Contap_Line_NbPnts(self, *args)


    def NbVertex(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _Contap.Contap_Line_NbVertex(self, *args)


    def Point(self, *args) -> "IntSurf_PntOn2S const &":
        """
        :param Index:
        	:type Index: int
        	:rtype: IntSurf_PntOn2S
        """
        return _Contap.Contap_Line_Point(self, *args)


    def ResetSeqOfVertex(self, *args) -> "void":
        """:rtype: None"""
        return _Contap.Contap_Line_ResetSeqOfVertex(self, *args)


    def SetLineOn2S(self, *args) -> "void":
        """
        :param L:
        	:type L: IntSurf_LineOn2S
        	:rtype: None
        """
        return _Contap.Contap_Line_SetLineOn2S(self, *args)


    def SetTransitionOnS(self, *args) -> "void":
        """
        * Set The Tansition of the line.
        	:param T:
        	:type T: IntSurf_TypeTrans
        	:rtype: None
        """
        return _Contap.Contap_Line_SetTransitionOnS(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param L:
        	:type L: gp_Lin
        	:rtype: None
        :param C:
        	:type C: gp_Circ
        	:rtype: None
        :param A:
        	:type A: Adaptor2d_HCurve2d
        	:rtype: None
        """
        return _Contap.Contap_Line_SetValue(self, *args)


    def TransitionOnS(self, *args) -> "IntSurf_TypeTrans":
        """
        * returns IN if at the 'left' of the line, the normale of the surface is oriented to the observator.
        	:rtype: IntSurf_TypeTrans
        """
        return _Contap.Contap_Line_TransitionOnS(self, *args)


    def TypeContour(self, *args) -> "Contap_IType":
        """
        * Returns Contap_Lin for a line, Contap_Circle for a circle, and Contap_Walking for a Walking line, Contap_Restriction for a part of boundarie.
        	:rtype: Contap_IType
        """
        return _Contap.Contap_Line_TypeContour(self, *args)


    def Vertex(self, *args) -> "Contap_Point &":
        """
        :param Index:
        	:type Index: int
        	:rtype: Contap_Point
        """
        return _Contap.Contap_Line_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_Line
Contap_Line.Add = new_instancemethod(_Contap.Contap_Line_Add, None, Contap_Line)
Contap_Line.Arc = new_instancemethod(_Contap.Contap_Line_Arc, None, Contap_Line)
Contap_Line.Circle = new_instancemethod(_Contap.Contap_Line_Circle, None, Contap_Line)
Contap_Line.Clear = new_instancemethod(_Contap.Contap_Line_Clear, None, Contap_Line)
Contap_Line.Line = new_instancemethod(_Contap.Contap_Line_Line, None, Contap_Line)
Contap_Line.LineOn2S = new_instancemethod(_Contap.Contap_Line_LineOn2S, None, Contap_Line)
Contap_Line.NbPnts = new_instancemethod(_Contap.Contap_Line_NbPnts, None, Contap_Line)
Contap_Line.NbVertex = new_instancemethod(_Contap.Contap_Line_NbVertex, None, Contap_Line)
Contap_Line.Point = new_instancemethod(_Contap.Contap_Line_Point, None, Contap_Line)
Contap_Line.ResetSeqOfVertex = new_instancemethod(_Contap.Contap_Line_ResetSeqOfVertex, None, Contap_Line)
Contap_Line.SetLineOn2S = new_instancemethod(_Contap.Contap_Line_SetLineOn2S, None, Contap_Line)
Contap_Line.SetTransitionOnS = new_instancemethod(_Contap.Contap_Line_SetTransitionOnS, None, Contap_Line)
Contap_Line.SetValue = new_instancemethod(_Contap.Contap_Line_SetValue, None, Contap_Line)
Contap_Line.TransitionOnS = new_instancemethod(_Contap.Contap_Line_TransitionOnS, None, Contap_Line)
Contap_Line.TypeContour = new_instancemethod(_Contap.Contap_Line_TypeContour, None, Contap_Line)
Contap_Line.Vertex = new_instancemethod(_Contap.Contap_Line_Vertex, None, Contap_Line)
Contap_Line_swigregister = _Contap.Contap_Line_swigregister
Contap_Line_swigregister(Contap_Line)

class Contap_Point(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Arc(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > const &":
        """
        * Returns the arc of restriction containing the vertex.
        	:rtype: opencascade::handle<Adaptor2d_HCurve2d>
        """
        return _Contap.Contap_Point_Arc(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Creates a point.
        	:param Pt:
        	:type Pt: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        _Contap.Contap_Point_swiginit(self, _Contap.new_Contap_Point(*args))

    def IsInternal(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the point is an internal one, i.e if the tangent to the line on the point and the eye direction are parallel.
        	:rtype: bool
        """
        return _Contap.Contap_Point_IsInternal(self, *args)


    def IsMultiple(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the point belongs to several lines.
        	:rtype: bool
        """
        return _Contap.Contap_Point_IsMultiple(self, *args)


    def IsOnArc(self, *args) -> "Standard_Boolean":
        """
        * Returns True when the point is an intersection between the contour and a restriction.
        	:rtype: bool
        """
        return _Contap.Contap_Point_IsOnArc(self, *args)


    def IsVertex(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the point is a vertex on the initial restriction facet of the surface.
        	:rtype: bool
        """
        return _Contap.Contap_Point_IsVertex(self, *args)


    def ParameterOnArc(self, *args) -> "Standard_Real":
        """
        * Returns the parameter of the point on the arc returned by the method Arc().
        	:rtype: float
        """
        return _Contap.Contap_Point_ParameterOnArc(self, *args)


    def ParameterOnLine(self, *args) -> "Standard_Real":
        """
        * This method returns the parameter of the point on the intersection line. If the points does not belong to an intersection line, the value returned does not have any sens.
        	:rtype: float
        """
        return _Contap.Contap_Point_ParameterOnLine(self, *args)


    def Parameters(self, *args) -> "void":
        """
        * Returns the parameters on the surface of the point.
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:rtype: None
        """
        return _Contap.Contap_Point_Parameters(self, *args)


    def SetArc(self, *args) -> "void":
        """
        * Sets the value of the arc and of the parameter on this arc of the point.
        	:param A:
        	:type A: Adaptor2d_HCurve2d
        	:param Param:
        	:type Param: float
        	:param TLine:
        	:type TLine: IntSurf_Transition
        	:param TArc:
        	:type TArc: IntSurf_Transition
        	:rtype: None
        """
        return _Contap.Contap_Point_SetArc(self, *args)


    def SetInternal(self, *args) -> "void":
        """:rtype: None"""
        return _Contap.Contap_Point_SetInternal(self, *args)


    def SetMultiple(self, *args) -> "void":
        """:rtype: None"""
        return _Contap.Contap_Point_SetMultiple(self, *args)


    def SetParameter(self, *args) -> "void":
        """
        * Set the value of the parameter on the intersection line.
        	:param Para:
        	:type Para: float
        	:rtype: None
        """
        return _Contap.Contap_Point_SetParameter(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Sets the values for a point.
        	:param Pt:
        	:type Pt: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _Contap.Contap_Point_SetValue(self, *args)


    def SetVertex(self, *args) -> "void":
        """
        * Sets the values of a point which is a vertex on the initial facet of restriction of one of the surface.
        	:param V:
        	:type V: Adaptor3d_HVertex
        	:rtype: None
        """
        return _Contap.Contap_Point_SetVertex(self, *args)


    def TransitionOnArc(self, *args) -> "IntSurf_Transition const &":
        """
        * Returns the transition of the point on the arc.
        	:rtype: IntSurf_Transition
        """
        return _Contap.Contap_Point_TransitionOnArc(self, *args)


    def TransitionOnLine(self, *args) -> "IntSurf_Transition const &":
        """
        * Returns the transition of the point on the contour.
        	:rtype: IntSurf_Transition
        """
        return _Contap.Contap_Point_TransitionOnLine(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """
        * Returns the intersection point (geometric information).
        	:rtype: gp_Pnt
        """
        return _Contap.Contap_Point_Value(self, *args)


    def Vertex(self, *args) -> "opencascade::handle< Adaptor3d_HVertex > const &":
        """
        * Returns the information about the point when it is on the domain of the patch, i-e when the function IsVertex returns True. Otherwise, an exception is raised.
        	:rtype: opencascade::handle<Adaptor3d_HVertex>
        """
        return _Contap.Contap_Point_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_Point
Contap_Point.Arc = new_instancemethod(_Contap.Contap_Point_Arc, None, Contap_Point)
Contap_Point.IsInternal = new_instancemethod(_Contap.Contap_Point_IsInternal, None, Contap_Point)
Contap_Point.IsMultiple = new_instancemethod(_Contap.Contap_Point_IsMultiple, None, Contap_Point)
Contap_Point.IsOnArc = new_instancemethod(_Contap.Contap_Point_IsOnArc, None, Contap_Point)
Contap_Point.IsVertex = new_instancemethod(_Contap.Contap_Point_IsVertex, None, Contap_Point)
Contap_Point.ParameterOnArc = new_instancemethod(_Contap.Contap_Point_ParameterOnArc, None, Contap_Point)
Contap_Point.ParameterOnLine = new_instancemethod(_Contap.Contap_Point_ParameterOnLine, None, Contap_Point)
Contap_Point.Parameters = new_instancemethod(_Contap.Contap_Point_Parameters, None, Contap_Point)
Contap_Point.SetArc = new_instancemethod(_Contap.Contap_Point_SetArc, None, Contap_Point)
Contap_Point.SetInternal = new_instancemethod(_Contap.Contap_Point_SetInternal, None, Contap_Point)
Contap_Point.SetMultiple = new_instancemethod(_Contap.Contap_Point_SetMultiple, None, Contap_Point)
Contap_Point.SetParameter = new_instancemethod(_Contap.Contap_Point_SetParameter, None, Contap_Point)
Contap_Point.SetValue = new_instancemethod(_Contap.Contap_Point_SetValue, None, Contap_Point)
Contap_Point.SetVertex = new_instancemethod(_Contap.Contap_Point_SetVertex, None, Contap_Point)
Contap_Point.TransitionOnArc = new_instancemethod(_Contap.Contap_Point_TransitionOnArc, None, Contap_Point)
Contap_Point.TransitionOnLine = new_instancemethod(_Contap.Contap_Point_TransitionOnLine, None, Contap_Point)
Contap_Point.Value = new_instancemethod(_Contap.Contap_Point_Value, None, Contap_Point)
Contap_Point.Vertex = new_instancemethod(_Contap.Contap_Point_Vertex, None, Contap_Point)
Contap_Point_swigregister = _Contap.Contap_Point_swigregister
Contap_Point_swigregister(Contap_Point)

class Contap_SurfFunction(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Angle(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _Contap.Contap_SurfFunction_Angle(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _Contap.Contap_SurfFunction_swiginit(self, _Contap.new_Contap_SurfFunction(*args))

    def Direction(self, *args) -> "gp_Dir const":
        """:rtype: gp_Dir"""
        return _Contap.Contap_SurfFunction_Direction(self, *args)


    def Direction2d(self, *args) -> "gp_Dir2d const":
        """:rtype: gp_Dir2d"""
        return _Contap.Contap_SurfFunction_Direction2d(self, *args)


    def Direction3d(self, *args) -> "gp_Vec const":
        """:rtype: gp_Vec"""
        return _Contap.Contap_SurfFunction_Direction3d(self, *args)


    def Eye(self, *args) -> "gp_Pnt const":
        """:rtype: gp_Pnt"""
        return _Contap.Contap_SurfFunction_Eye(self, *args)


    def FunctionType(self, *args) -> "Contap_TFunction":
        """:rtype: Contap_TFunction"""
        return _Contap.Contap_SurfFunction_FunctionType(self, *args)


    def IsTangent(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Contap.Contap_SurfFunction_IsTangent(self, *args)


    def PSurface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """
        * Method is entered for compatibility with IntPatch_TheSurfFunction.
        	:rtype: opencascade::handle<Adaptor3d_HSurface>
        """
        return _Contap.Contap_SurfFunction_PSurface(self, *args)


    def Point(self, *args) -> "gp_Pnt const":
        """
        * Returns the value of the solution point on the surface.
        	:rtype: gp_Pnt
        """
        return _Contap.Contap_SurfFunction_Point(self, *args)


    def Root(self, *args) -> "Standard_Real":
        """
        * Root is the value of the function at the solution. It is a vector of dimension 1, i-e a real.
        	:rtype: float
        """
        return _Contap.Contap_SurfFunction_Root(self, *args)


    def Set(self, *args) -> "void":
        """
        :param S:
        	:type S: Adaptor3d_HSurface
        	:rtype: None
        :param Eye:
        	:type Eye: gp_Pnt
        	:rtype: None
        :param Dir:
        	:type Dir: gp_Dir
        	:rtype: None
        :param Dir:
        	:type Dir: gp_Dir
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        :param Eye:
        	:type Eye: gp_Pnt
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        :param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        """
        return _Contap.Contap_SurfFunction_Set(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """:rtype: opencascade::handle<Adaptor3d_HSurface>"""
        return _Contap.Contap_SurfFunction_Surface(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        * Returns the value Tol so that if Abs(Func.Root())<Tol the function is considered null.
        	:rtype: float
        """
        return _Contap.Contap_SurfFunction_Tolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_SurfFunction
Contap_SurfFunction.Angle = new_instancemethod(_Contap.Contap_SurfFunction_Angle, None, Contap_SurfFunction)
Contap_SurfFunction.Direction = new_instancemethod(_Contap.Contap_SurfFunction_Direction, None, Contap_SurfFunction)
Contap_SurfFunction.Direction2d = new_instancemethod(_Contap.Contap_SurfFunction_Direction2d, None, Contap_SurfFunction)
Contap_SurfFunction.Direction3d = new_instancemethod(_Contap.Contap_SurfFunction_Direction3d, None, Contap_SurfFunction)
Contap_SurfFunction.Eye = new_instancemethod(_Contap.Contap_SurfFunction_Eye, None, Contap_SurfFunction)
Contap_SurfFunction.FunctionType = new_instancemethod(_Contap.Contap_SurfFunction_FunctionType, None, Contap_SurfFunction)
Contap_SurfFunction.IsTangent = new_instancemethod(_Contap.Contap_SurfFunction_IsTangent, None, Contap_SurfFunction)
Contap_SurfFunction.PSurface = new_instancemethod(_Contap.Contap_SurfFunction_PSurface, None, Contap_SurfFunction)
Contap_SurfFunction.Point = new_instancemethod(_Contap.Contap_SurfFunction_Point, None, Contap_SurfFunction)
Contap_SurfFunction.Root = new_instancemethod(_Contap.Contap_SurfFunction_Root, None, Contap_SurfFunction)
Contap_SurfFunction.Set = new_instancemethod(_Contap.Contap_SurfFunction_Set, None, Contap_SurfFunction)
Contap_SurfFunction.Surface = new_instancemethod(_Contap.Contap_SurfFunction_Surface, None, Contap_SurfFunction)
Contap_SurfFunction.Tolerance = new_instancemethod(_Contap.Contap_SurfFunction_Tolerance, None, Contap_SurfFunction)
Contap_SurfFunction_swigregister = _Contap.Contap_SurfFunction_swigregister
Contap_SurfFunction_swigregister(Contap_SurfFunction)

class Contap_SurfProps(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DerivAndNorm(*args) -> "void":
        """
        * Computes the point <P>, and normal vector <N> on <S> at parameters U,V.
        	:param S:
        	:type S: Adaptor3d_HSurface
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param P:
        	:type P: gp_Pnt
        	:param d1u:
        	:type d1u: gp_Vec
        	:param d1v:
        	:type d1v: gp_Vec
        	:param N:
        	:type N: gp_Vec
        	:rtype: void
        """
        return _Contap.Contap_SurfProps_DerivAndNorm(*args)

    DerivAndNorm = staticmethod(DerivAndNorm)

    def NormAndDn(*args) -> "void":
        """
        * Computes the point <P>, normal vector <N>, and its derivatives <Dnu> and <Dnv> on <S> at parameters U,V.
        	:param S:
        	:type S: Adaptor3d_HSurface
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param P:
        	:type P: gp_Pnt
        	:param N:
        	:type N: gp_Vec
        	:param Dnu:
        	:type Dnu: gp_Vec
        	:param Dnv:
        	:type Dnv: gp_Vec
        	:rtype: void
        """
        return _Contap.Contap_SurfProps_NormAndDn(*args)

    NormAndDn = staticmethod(NormAndDn)

    def Normale(*args) -> "void":
        """
        * Computes the point <P>, and normal vector <N> on <S> at parameters U,V.
        	:param S:
        	:type S: Adaptor3d_HSurface
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param P:
        	:type P: gp_Pnt
        	:param N:
        	:type N: gp_Vec
        	:rtype: void
        """
        return _Contap.Contap_SurfProps_Normale(*args)

    Normale = staticmethod(Normale)

    __repr__ = _dumps_object


    def __init__(self):
        _Contap.Contap_SurfProps_swiginit(self, _Contap.new_Contap_SurfProps())
    __swig_destroy__ = _Contap.delete_Contap_SurfProps
Contap_SurfProps_swigregister = _Contap.Contap_SurfProps_swigregister
Contap_SurfProps_swigregister(Contap_SurfProps)

def Contap_SurfProps_DerivAndNorm(*args) -> "void":
    """
    * Computes the point <P>, and normal vector <N> on <S> at parameters U,V.
    	:param S:
    	:type S: Adaptor3d_HSurface
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:param P:
    	:type P: gp_Pnt
    	:param d1u:
    	:type d1u: gp_Vec
    	:param d1v:
    	:type d1v: gp_Vec
    	:param N:
    	:type N: gp_Vec
    	:rtype: void
    """
    return _Contap.Contap_SurfProps_DerivAndNorm(*args)

def Contap_SurfProps_NormAndDn(*args) -> "void":
    """
    * Computes the point <P>, normal vector <N>, and its derivatives <Dnu> and <Dnv> on <S> at parameters U,V.
    	:param S:
    	:type S: Adaptor3d_HSurface
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:param P:
    	:type P: gp_Pnt
    	:param N:
    	:type N: gp_Vec
    	:param Dnu:
    	:type Dnu: gp_Vec
    	:param Dnv:
    	:type Dnv: gp_Vec
    	:rtype: void
    """
    return _Contap.Contap_SurfProps_NormAndDn(*args)

def Contap_SurfProps_Normale(*args) -> "void":
    """
    * Computes the point <P>, and normal vector <N> on <S> at parameters U,V.
    	:param S:
    	:type S: Adaptor3d_HSurface
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:param P:
    	:type P: gp_Pnt
    	:param N:
    	:type N: gp_Vec
    	:rtype: void
    """
    return _Contap.Contap_SurfProps_Normale(*args)

class Contap_TheIWLineOfTheIWalking(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddIndexPassing(self, *args) -> "void":
        """
        * associer a l 'indice du point sur la ligne l'indice du point passant dans l'iterateur de depart
        	:param Index:
        	:type Index: int
        	:rtype: None
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_AddIndexPassing(self, *args)


    def AddPoint(self, *args) -> "void":
        """
        * Add a point in the line.
        	:param P:
        	:type P: IntSurf_PntOn2S
        	:rtype: None
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_AddPoint(self, *args)


    def AddStatusFirst(self, *args) -> "void":
        """
        :param Closed:
        	:type Closed: bool
        	:param HasFirst:
        	:type HasFirst: bool
        	:rtype: None
        :param Closed:
        	:type Closed: bool
        	:param HasLast:
        	:type HasLast: bool
        	:param Index:
        	:type Index: int
        	:param P:
        	:type P: IntSurf_PathPoint
        	:rtype: None
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_AddStatusFirst(self, *args)


    def AddStatusFirstLast(self, *args) -> "void":
        """
        :param Closed:
        	:type Closed: bool
        	:param HasFirst:
        	:type HasFirst: bool
        	:param HasLast:
        	:type HasLast: bool
        	:rtype: None
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_AddStatusFirstLast(self, *args)


    def AddStatusLast(self, *args) -> "void":
        """
        :param HasLast:
        	:type HasLast: bool
        	:rtype: None
        :param HasLast:
        	:type HasLast: bool
        	:param Index:
        	:type Index: int
        	:param P:
        	:type P: IntSurf_PathPoint
        	:rtype: None
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_AddStatusLast(self, *args)


    def __init__(self, *args):
        """
        :param theAllocator: default value is 0
        	:type theAllocator: IntSurf_Allocator
        	:rtype: None
        """
        _Contap.Contap_TheIWLineOfTheIWalking_swiginit(self, _Contap.new_Contap_TheIWLineOfTheIWalking(*args))

    def Cut(self, *args) -> "void":
        """
        * Cut the line at the point of rank Index.
        	:param Index:
        	:type Index: int
        	:rtype: None
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_Cut(self, *args)


    def FirstPoint(self, *args) -> "IntSurf_PathPoint const &":
        """
        * Returns the first point of the line when it is a marching point. An exception is raised if HasFirstPoint returns False.
        	:rtype: IntSurf_PathPoint
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_FirstPoint(self, *args)


    def FirstPointIndex(self, *args) -> "Standard_Integer":
        """
        * Returns the Index of first point of the line when it is a marching point.This index is the index in the PointStartIterator. An exception is raised if HasFirstPoint returns False.
        	:rtype: int
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_FirstPointIndex(self, *args)


    def HasFirstPoint(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the first point of the line is a marching point . when is HasFirstPoint==False ,the line begins on the natural bound of the surface.the line can be too long
        	:rtype: bool
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_HasFirstPoint(self, *args)


    def HasLastPoint(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the end point of the line is a marching point (Point from IntWS). when is HasFirstPoint==False ,the line ends on the natural bound of the surface.the line can be too long.
        	:rtype: bool
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_HasLastPoint(self, *args)


    def IsClosed(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the line is closed.
        	:rtype: bool
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_IsClosed(self, *args)


    def IsTangentAtBegining(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Contap.Contap_TheIWLineOfTheIWalking_IsTangentAtBegining(self, *args)


    def IsTangentAtEnd(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Contap.Contap_TheIWLineOfTheIWalking_IsTangentAtEnd(self, *args)


    def LastPoint(self, *args) -> "IntSurf_PathPoint const &":
        """
        * Returns the last point of the line when it is a marching point. An exception is raised if HasLastPoint returns False.
        	:rtype: IntSurf_PathPoint
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_LastPoint(self, *args)


    def LastPointIndex(self, *args) -> "Standard_Integer":
        """
        * Returns the index of last point of the line when it is a marching point.This index is the index in the PointStartIterator. An exception is raised if HasLastPoint returns False.
        	:rtype: int
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_LastPointIndex(self, *args)


    def Line(self, *args) -> "opencascade::handle< IntSurf_LineOn2S > const &":
        """
        * Returns the LineOn2S contained in the walking line.
        	:rtype: opencascade::handle<IntSurf_LineOn2S>
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_Line(self, *args)


    def NbPassingPoint(self, *args) -> "Standard_Integer":
        """
        * returns the number of points belonging to Pnts1 which are passing point.
        	:rtype: int
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_NbPassingPoint(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points of the line (including first point and end point : see HasLastPoint and HasFirstPoint).
        	:rtype: int
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_NbPoints(self, *args)


    def PassingPoint(self, *args) -> "void":
        """
        * returns the index of the point belonging to the line which is associated to the passing point belonging to Pnts1 an exception is raised if Index > NbPassingPoint()
        	:param Index:
        	:type Index: int
        	:param IndexLine:
        	:type IndexLine: int
        	:param IndexPnts:
        	:type IndexPnts: int
        	:rtype: None
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_PassingPoint(self, *args)


    def Reverse(self, *args) -> "void":
        """
        * reverse the points in the line. Hasfirst, HasLast are kept.
        	:rtype: None
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_Reverse(self, *args)


    def SetTangencyAtBegining(self, *args) -> "void":
        """
        :param IsTangent:
        	:type IsTangent: bool
        	:rtype: None
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_SetTangencyAtBegining(self, *args)


    def SetTangencyAtEnd(self, *args) -> "void":
        """
        :param IsTangent:
        	:type IsTangent: bool
        	:rtype: None
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_SetTangencyAtEnd(self, *args)


    def SetTangentVector(self, *args) -> "void":
        """
        :param V:
        	:type V: gp_Vec
        	:param Index:
        	:type Index: int
        	:rtype: None
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_SetTangentVector(self, *args)


    def TangentVector(self, *args) -> "gp_Vec const":
        """
        :param Index:
        	:type Index: int
        	:rtype: gp_Vec
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_TangentVector(self, *args)


    def Value(self, *args) -> "IntSurf_PntOn2S const &":
        """
        * Returns the point of range Index. If index <= 0 or Index > NbPoints, an exception is raised.
        	:param Index:
        	:type Index: int
        	:rtype: IntSurf_PntOn2S
        """
        return _Contap.Contap_TheIWLineOfTheIWalking_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Contap_TheIWLineOfTheIWalking_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_TheIWLineOfTheIWalking
Contap_TheIWLineOfTheIWalking.AddIndexPassing = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_AddIndexPassing, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.AddPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_AddPoint, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.AddStatusFirst = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_AddStatusFirst, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.AddStatusFirstLast = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_AddStatusFirstLast, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.AddStatusLast = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_AddStatusLast, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.Cut = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_Cut, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.FirstPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_FirstPoint, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.FirstPointIndex = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_FirstPointIndex, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.HasFirstPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_HasFirstPoint, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.HasLastPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_HasLastPoint, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.IsClosed = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_IsClosed, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.IsTangentAtBegining = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_IsTangentAtBegining, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.IsTangentAtEnd = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_IsTangentAtEnd, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.LastPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_LastPoint, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.LastPointIndex = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_LastPointIndex, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.Line = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_Line, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.NbPassingPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_NbPassingPoint, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.NbPoints = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_NbPoints, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.PassingPoint = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_PassingPoint, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.Reverse = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_Reverse, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.SetTangencyAtBegining = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_SetTangencyAtBegining, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.SetTangencyAtEnd = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_SetTangencyAtEnd, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.SetTangentVector = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_SetTangentVector, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.TangentVector = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_TangentVector, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking.Value = new_instancemethod(_Contap.Contap_TheIWLineOfTheIWalking_Value, None, Contap_TheIWLineOfTheIWalking)
Contap_TheIWLineOfTheIWalking_swigregister = _Contap.Contap_TheIWLineOfTheIWalking_swigregister
Contap_TheIWLineOfTheIWalking_swigregister(Contap_TheIWLineOfTheIWalking)

class Contap_TheIWalking(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Deflection is the maximum deflection admitted between two consecutive points on a resulting polyline. Step is the maximum increment admitted between two consecutive points (in 2d space). Epsilon is the tolerance beyond which 2 points are confused. theToFillHoles is the flag defining whether possible holes between resulting curves are filled or not in case of Contap walking theToFillHoles is True
        	:param Epsilon:
        	:type Epsilon: float
        	:param Deflection:
        	:type Deflection: float
        	:param Step:
        	:type Step: float
        	:param theToFillHoles: default value is Standard_False
        	:type theToFillHoles: bool
        	:rtype: None
        """
        _Contap.Contap_TheIWalking_swiginit(self, _Contap.new_Contap_TheIWalking(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the calculus was successful.
        	:rtype: bool
        """
        return _Contap.Contap_TheIWalking_IsDone(self, *args)


    def NbLines(self, *args) -> "Standard_Integer":
        """
        * Returns the number of resulting polylines. An exception is raised if IsDone returns False.
        	:rtype: int
        """
        return _Contap.Contap_TheIWalking_NbLines(self, *args)


    def NbSinglePnts(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points belonging to Pnts on which no line starts or ends. An exception is raised if IsDone returns False.
        	:rtype: int
        """
        return _Contap.Contap_TheIWalking_NbSinglePnts(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Searches a set of polylines starting on a point of Pnts1 or Pnts2. Each point on a resulting polyline verifies F(u,v)=0
        	:param Pnts1:
        	:type Pnts1: IntSurf_SequenceOfPathPoint
        	:param Pnts2:
        	:type Pnts2: IntSurf_SequenceOfInteriorPoint
        	:param Func:
        	:type Func: Contap_SurfFunction
        	:param S:
        	:type S: Adaptor3d_HSurface
        	:param Reversed: default value is Standard_False
        	:type Reversed: bool
        	:rtype: None
        * Searches a set of polylines starting on a point of Pnts1. Each point on a resulting polyline verifies F(u,v)=0
        	:param Pnts1:
        	:type Pnts1: IntSurf_SequenceOfPathPoint
        	:param Func:
        	:type Func: Contap_SurfFunction
        	:param S:
        	:type S: Adaptor3d_HSurface
        	:param Reversed: default value is Standard_False
        	:type Reversed: bool
        	:rtype: None
        """
        return _Contap.Contap_TheIWalking_Perform(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * Deflection is the maximum deflection admitted between two consecutive points on a resulting polyline. Step is the maximum increment admitted between two consecutive points (in 2d space). Epsilon is the tolerance beyond which 2 points are confused
        	:param Epsilon:
        	:type Epsilon: float
        	:param Deflection:
        	:type Deflection: float
        	:param Step:
        	:type Step: float
        	:rtype: None
        """
        return _Contap.Contap_TheIWalking_SetTolerance(self, *args)


    def SinglePnt(self, *args) -> "IntSurf_PathPoint const &":
        """
        * Returns the point of range Index . An exception is raised if IsDone returns False. An exception is raised if Index<=0 or Index > NbSinglePnts.
        	:param Index:
        	:type Index: int
        	:rtype: IntSurf_PathPoint
        """
        return _Contap.Contap_TheIWalking_SinglePnt(self, *args)


    def Value(self, *args) -> "opencascade::handle< Contap_TheIWLineOfTheIWalking > const &":
        """
        * Returns the polyline of range Index. An exception is raised if IsDone is False. An exception is raised if Index<=0 or Index>NbLines.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<Contap_TheIWLineOfTheIWalking>
        """
        return _Contap.Contap_TheIWalking_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_TheIWalking
Contap_TheIWalking.IsDone = new_instancemethod(_Contap.Contap_TheIWalking_IsDone, None, Contap_TheIWalking)
Contap_TheIWalking.NbLines = new_instancemethod(_Contap.Contap_TheIWalking_NbLines, None, Contap_TheIWalking)
Contap_TheIWalking.NbSinglePnts = new_instancemethod(_Contap.Contap_TheIWalking_NbSinglePnts, None, Contap_TheIWalking)
Contap_TheIWalking.Perform = new_instancemethod(_Contap.Contap_TheIWalking_Perform, None, Contap_TheIWalking)
Contap_TheIWalking.SetTolerance = new_instancemethod(_Contap.Contap_TheIWalking_SetTolerance, None, Contap_TheIWalking)
Contap_TheIWalking.SinglePnt = new_instancemethod(_Contap.Contap_TheIWalking_SinglePnt, None, Contap_TheIWalking)
Contap_TheIWalking.Value = new_instancemethod(_Contap.Contap_TheIWalking_Value, None, Contap_TheIWalking)
Contap_TheIWalking_swigregister = _Contap.Contap_TheIWalking_swigregister
Contap_TheIWalking_swigregister(Contap_TheIWalking)

class Contap_ThePathPointOfTheSearch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Arc(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > const &":
        """:rtype: opencascade::handle<Adaptor2d_HCurve2d>"""
        return _Contap.Contap_ThePathPointOfTheSearch_Arc(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param Tol:
        	:type Tol: float
        	:param V:
        	:type V: Adaptor3d_HVertex
        	:param A:
        	:type A: Adaptor2d_HCurve2d
        	:param Parameter:
        	:type Parameter: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param Tol:
        	:type Tol: float
        	:param A:
        	:type A: Adaptor2d_HCurve2d
        	:param Parameter:
        	:type Parameter: float
        	:rtype: None
        """
        _Contap.Contap_ThePathPointOfTheSearch_swiginit(self, _Contap.new_Contap_ThePathPointOfTheSearch(*args))

    def IsNew(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Contap.Contap_ThePathPointOfTheSearch_IsNew(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _Contap.Contap_ThePathPointOfTheSearch_Parameter(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param Tol:
        	:type Tol: float
        	:param V:
        	:type V: Adaptor3d_HVertex
        	:param A:
        	:type A: Adaptor2d_HCurve2d
        	:param Parameter:
        	:type Parameter: float
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param Tol:
        	:type Tol: float
        	:param A:
        	:type A: Adaptor2d_HCurve2d
        	:param Parameter:
        	:type Parameter: float
        	:rtype: None
        """
        return _Contap.Contap_ThePathPointOfTheSearch_SetValue(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _Contap.Contap_ThePathPointOfTheSearch_Tolerance(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """:rtype: gp_Pnt"""
        return _Contap.Contap_ThePathPointOfTheSearch_Value(self, *args)


    def Vertex(self, *args) -> "opencascade::handle< Adaptor3d_HVertex > const &":
        """:rtype: opencascade::handle<Adaptor3d_HVertex>"""
        return _Contap.Contap_ThePathPointOfTheSearch_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_ThePathPointOfTheSearch
Contap_ThePathPointOfTheSearch.Arc = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearch_Arc, None, Contap_ThePathPointOfTheSearch)
Contap_ThePathPointOfTheSearch.IsNew = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearch_IsNew, None, Contap_ThePathPointOfTheSearch)
Contap_ThePathPointOfTheSearch.Parameter = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearch_Parameter, None, Contap_ThePathPointOfTheSearch)
Contap_ThePathPointOfTheSearch.SetValue = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearch_SetValue, None, Contap_ThePathPointOfTheSearch)
Contap_ThePathPointOfTheSearch.Tolerance = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearch_Tolerance, None, Contap_ThePathPointOfTheSearch)
Contap_ThePathPointOfTheSearch.Value = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearch_Value, None, Contap_ThePathPointOfTheSearch)
Contap_ThePathPointOfTheSearch.Vertex = new_instancemethod(_Contap.Contap_ThePathPointOfTheSearch_Vertex, None, Contap_ThePathPointOfTheSearch)
Contap_ThePathPointOfTheSearch_swigregister = _Contap.Contap_ThePathPointOfTheSearch_swigregister
Contap_ThePathPointOfTheSearch_swigregister(Contap_ThePathPointOfTheSearch)

class Contap_TheSearch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AllArcSolution(self, *args) -> "Standard_Boolean":
        """
        * Returns true if all arc of the Arcs are solution (inside the surface). An exception is raised if IsDone returns False.
        	:rtype: bool
        """
        return _Contap.Contap_TheSearch_AllArcSolution(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _Contap.Contap_TheSearch_swiginit(self, _Contap.new_Contap_TheSearch(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the calculus was successful.
        	:rtype: bool
        """
        return _Contap.Contap_TheSearch_IsDone(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of resulting points. An exception is raised if IsDone returns False (NotDone).
        	:rtype: int
        """
        return _Contap.Contap_TheSearch_NbPoints(self, *args)


    def NbSegments(self, *args) -> "Standard_Integer":
        """
        * Returns the number of the resulting segments. An exception is raised if IsDone returns False (NotDone).
        	:rtype: int
        """
        return _Contap.Contap_TheSearch_NbSegments(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Algorithm to find the points and parts of curves of Domain (domain of of restriction of a surface) which verify F = 0. TolBoundary defines if a curve is on Q. TolTangency defines if a point is on Q.
        	:param F:
        	:type F: Contap_ArcFunction
        	:param Domain:
        	:type Domain: Adaptor3d_TopolTool
        	:param TolBoundary:
        	:type TolBoundary: float
        	:param TolTangency:
        	:type TolTangency: float
        	:param RecheckOnRegularity: default value is Standard_False
        	:type RecheckOnRegularity: bool
        	:rtype: None
        """
        return _Contap.Contap_TheSearch_Perform(self, *args)


    def Point(self, *args) -> "Contap_ThePathPointOfTheSearch const &":
        """
        * Returns the resulting point of range Index. The exception NotDone is raised if IsDone() returns False. The exception OutOfRange is raised if Index <= 0 or Index > NbPoints.
        	:param Index:
        	:type Index: int
        	:rtype: Contap_ThePathPointOfTheSearch
        """
        return _Contap.Contap_TheSearch_Point(self, *args)


    def Segment(self, *args) -> "Contap_TheSegmentOfTheSearch const &":
        """
        * Returns the resulting segment of range Index. The exception NotDone is raised if IsDone() returns False. The exception OutOfRange is raised if Index <= 0 or Index > NbPoints.
        	:param Index:
        	:type Index: int
        	:rtype: Contap_TheSegmentOfTheSearch
        """
        return _Contap.Contap_TheSearch_Segment(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_TheSearch
Contap_TheSearch.AllArcSolution = new_instancemethod(_Contap.Contap_TheSearch_AllArcSolution, None, Contap_TheSearch)
Contap_TheSearch.IsDone = new_instancemethod(_Contap.Contap_TheSearch_IsDone, None, Contap_TheSearch)
Contap_TheSearch.NbPoints = new_instancemethod(_Contap.Contap_TheSearch_NbPoints, None, Contap_TheSearch)
Contap_TheSearch.NbSegments = new_instancemethod(_Contap.Contap_TheSearch_NbSegments, None, Contap_TheSearch)
Contap_TheSearch.Perform = new_instancemethod(_Contap.Contap_TheSearch_Perform, None, Contap_TheSearch)
Contap_TheSearch.Point = new_instancemethod(_Contap.Contap_TheSearch_Point, None, Contap_TheSearch)
Contap_TheSearch.Segment = new_instancemethod(_Contap.Contap_TheSearch_Segment, None, Contap_TheSearch)
Contap_TheSearch_swigregister = _Contap.Contap_TheSearch_swigregister
Contap_TheSearch_swigregister(Contap_TheSearch)

class Contap_TheSearchInside(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param F:
        	:type F: Contap_SurfFunction
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param T:
        	:type T: Adaptor3d_TopolTool
        	:param Epsilon:
        	:type Epsilon: float
        	:rtype: None
        """
        _Contap.Contap_TheSearchInside_swiginit(self, _Contap.new_Contap_TheSearchInside(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Contap.Contap_TheSearchInside_IsDone(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points. The exception NotDone if raised if IsDone returns False.
        	:rtype: int
        """
        return _Contap.Contap_TheSearchInside_NbPoints(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param F:
        	:type F: Contap_SurfFunction
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param T:
        	:type T: Adaptor3d_TopolTool
        	:param Epsilon:
        	:type Epsilon: float
        	:rtype: None
        :param F:
        	:type F: Contap_SurfFunction
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param UStart:
        	:type UStart: float
        	:param VStart:
        	:type VStart: float
        	:rtype: None
        """
        return _Contap.Contap_TheSearchInside_Perform(self, *args)


    def Value(self, *args) -> "IntSurf_InteriorPoint const &":
        """
        * Returns the point of range Index. The exception NotDone if raised if IsDone returns False. The exception OutOfRange if raised if Index <= 0 or Index > NbPoints.
        	:param Index:
        	:type Index: int
        	:rtype: IntSurf_InteriorPoint
        """
        return _Contap.Contap_TheSearchInside_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_TheSearchInside
Contap_TheSearchInside.IsDone = new_instancemethod(_Contap.Contap_TheSearchInside_IsDone, None, Contap_TheSearchInside)
Contap_TheSearchInside.NbPoints = new_instancemethod(_Contap.Contap_TheSearchInside_NbPoints, None, Contap_TheSearchInside)
Contap_TheSearchInside.Perform = new_instancemethod(_Contap.Contap_TheSearchInside_Perform, None, Contap_TheSearchInside)
Contap_TheSearchInside.Value = new_instancemethod(_Contap.Contap_TheSearchInside_Value, None, Contap_TheSearchInside)
Contap_TheSearchInside_swigregister = _Contap.Contap_TheSearchInside_swigregister
Contap_TheSearchInside_swigregister(Contap_TheSearchInside)

class Contap_TheSegmentOfTheSearch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _Contap.Contap_TheSegmentOfTheSearch_swiginit(self, _Contap.new_Contap_TheSegmentOfTheSearch(*args))

    def Curve(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > const &":
        """
        * Returns the geometric curve on the surface 's domain which is solution.
        	:rtype: opencascade::handle<Adaptor2d_HCurve2d>
        """
        return _Contap.Contap_TheSegmentOfTheSearch_Curve(self, *args)


    def FirstPoint(self, *args) -> "Contap_ThePathPointOfTheSearch const &":
        """
        * Returns the first point.
        	:rtype: Contap_ThePathPointOfTheSearch
        """
        return _Contap.Contap_TheSegmentOfTheSearch_FirstPoint(self, *args)


    def HasFirstPoint(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a vertex (ThePathPoint) defining the lowest valid parameter on the arc.
        	:rtype: bool
        """
        return _Contap.Contap_TheSegmentOfTheSearch_HasFirstPoint(self, *args)


    def HasLastPoint(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is a vertex (ThePathPoint) defining the greatest valid parameter on the arc.
        	:rtype: bool
        """
        return _Contap.Contap_TheSegmentOfTheSearch_HasLastPoint(self, *args)


    def LastPoint(self, *args) -> "Contap_ThePathPointOfTheSearch const &":
        """
        * Returns the last point.
        	:rtype: Contap_ThePathPointOfTheSearch
        """
        return _Contap.Contap_TheSegmentOfTheSearch_LastPoint(self, *args)


    def SetLimitPoint(self, *args) -> "void":
        """
        * Defines the first point or the last point, depending on the value of the boolean First.
        	:param V:
        	:type V: Contap_ThePathPointOfTheSearch
        	:param First:
        	:type First: bool
        	:rtype: None
        """
        return _Contap.Contap_TheSegmentOfTheSearch_SetLimitPoint(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Defines the concerned arc.
        	:param A:
        	:type A: Adaptor2d_HCurve2d
        	:rtype: None
        """
        return _Contap.Contap_TheSegmentOfTheSearch_SetValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_TheSegmentOfTheSearch
Contap_TheSegmentOfTheSearch.Curve = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearch_Curve, None, Contap_TheSegmentOfTheSearch)
Contap_TheSegmentOfTheSearch.FirstPoint = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearch_FirstPoint, None, Contap_TheSegmentOfTheSearch)
Contap_TheSegmentOfTheSearch.HasFirstPoint = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearch_HasFirstPoint, None, Contap_TheSegmentOfTheSearch)
Contap_TheSegmentOfTheSearch.HasLastPoint = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearch_HasLastPoint, None, Contap_TheSegmentOfTheSearch)
Contap_TheSegmentOfTheSearch.LastPoint = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearch_LastPoint, None, Contap_TheSegmentOfTheSearch)
Contap_TheSegmentOfTheSearch.SetLimitPoint = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearch_SetLimitPoint, None, Contap_TheSegmentOfTheSearch)
Contap_TheSegmentOfTheSearch.SetValue = new_instancemethod(_Contap.Contap_TheSegmentOfTheSearch_SetValue, None, Contap_TheSegmentOfTheSearch)
Contap_TheSegmentOfTheSearch_swigregister = _Contap.Contap_TheSegmentOfTheSearch_swigregister
Contap_TheSegmentOfTheSearch_swigregister(Contap_TheSegmentOfTheSearch)

class Contap_TheHSequenceOfPoint(Contap_TheSequenceOfPoint, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Contap.Contap_TheHSequenceOfPoint_swiginit(self, _Contap.new_Contap_TheHSequenceOfPoint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Contap_TheHSequenceOfPoint_DownCast(t)

    __swig_destroy__ = _Contap.delete_Contap_TheHSequenceOfPoint
Contap_TheHSequenceOfPoint.Sequence = new_instancemethod(_Contap.Contap_TheHSequenceOfPoint_Sequence, None, Contap_TheHSequenceOfPoint)
Contap_TheHSequenceOfPoint.Append = new_instancemethod(_Contap.Contap_TheHSequenceOfPoint_Append, None, Contap_TheHSequenceOfPoint)
Contap_TheHSequenceOfPoint.ChangeSequence = new_instancemethod(_Contap.Contap_TheHSequenceOfPoint_ChangeSequence, None, Contap_TheHSequenceOfPoint)
Contap_TheHSequenceOfPoint_swigregister = _Contap.Contap_TheHSequenceOfPoint_swigregister
Contap_TheHSequenceOfPoint_swigregister(Contap_TheHSequenceOfPoint)



