# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Draft module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_draft.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Draft.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Draft')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Draft')
    _Draft = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Draft', [dirname(__file__)])
        except ImportError:
            import _Draft
            return _Draft
        try:
            _mod = imp.load_module('_Draft', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Draft = swig_import_helper()
    del swig_import_helper
else:
    import _Draft
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Draft.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Draft.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Draft.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Draft.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Draft.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Draft.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Draft.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Draft.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Draft.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Draft.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Draft.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Draft.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Draft.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Draft.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Draft.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Draft.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Draft.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Draft.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Draft.process_exception(error, method_name, class_name)
process_exception = _Draft.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Geom2d
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
Draft_NoError = _Draft.Draft_NoError
Draft_FaceRecomputation = _Draft.Draft_FaceRecomputation
Draft_EdgeRecomputation = _Draft.Draft_EdgeRecomputation
Draft_VertexRecomputation = _Draft.Draft_VertexRecomputation

def Handle_Draft_Modification_Create() -> "opencascade::handle< Draft_Modification >":
    return _Draft.Handle_Draft_Modification_Create()
Handle_Draft_Modification_Create = _Draft.Handle_Draft_Modification_Create

def Handle_Draft_Modification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Draft_Modification >":
    return _Draft.Handle_Draft_Modification_DownCast(t)
Handle_Draft_Modification_DownCast = _Draft.Handle_Draft_Modification_DownCast

def Handle_Draft_Modification_IsNull(t: 'opencascade::handle< Draft_Modification > const &') -> "bool":
    return _Draft.Handle_Draft_Modification_IsNull(t)
Handle_Draft_Modification_IsNull = _Draft.Handle_Draft_Modification_IsNull
class Draft_IndexedDataMapOfFaceFaceInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Draft.Draft_IndexedDataMapOfFaceFaceInfo_swiginit(self, _Draft.new_Draft_IndexedDataMapOfFaceFaceInfo(*args))
    __swig_destroy__ = _Draft.delete_Draft_IndexedDataMapOfFaceFaceInfo
Draft_IndexedDataMapOfFaceFaceInfo.begin = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_begin, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.end = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_end, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.cbegin = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_cbegin, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.cend = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_cend, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.Exchange = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_Exchange, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.Assign = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_Assign, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.Set = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_Set, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.ReSize = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_ReSize, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.Add = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_Add, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.Contains = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_Contains, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.Substitute = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_Substitute, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.Swap = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_Swap, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.RemoveLast = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_RemoveLast, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.RemoveFromIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_RemoveFromIndex, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.RemoveKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_RemoveKey, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.FindKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_FindKey, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.FindFromIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_FindFromIndex, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.ChangeFromIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_ChangeFromIndex, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.__call__ = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo___call__, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.FindIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_FindIndex, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.ChangeFromKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_ChangeFromKey, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.Seek = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_Seek, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.ChangeSeek = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_ChangeSeek, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.FindFromKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_FindFromKey, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.Clear = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_Clear, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo.Size = new_instancemethod(_Draft.Draft_IndexedDataMapOfFaceFaceInfo_Size, None, Draft_IndexedDataMapOfFaceFaceInfo)
Draft_IndexedDataMapOfFaceFaceInfo_swigregister = _Draft.Draft_IndexedDataMapOfFaceFaceInfo_swigregister
Draft_IndexedDataMapOfFaceFaceInfo_swigregister(Draft_IndexedDataMapOfFaceFaceInfo)

class Draft_IndexedDataMapOfVertexVertexInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Draft.Draft_IndexedDataMapOfVertexVertexInfo_swiginit(self, _Draft.new_Draft_IndexedDataMapOfVertexVertexInfo(*args))
    __swig_destroy__ = _Draft.delete_Draft_IndexedDataMapOfVertexVertexInfo
Draft_IndexedDataMapOfVertexVertexInfo.begin = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_begin, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.end = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_end, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.cbegin = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_cbegin, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.cend = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_cend, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.Exchange = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_Exchange, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.Assign = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_Assign, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.Set = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_Set, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.ReSize = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_ReSize, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.Add = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_Add, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.Contains = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_Contains, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.Substitute = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_Substitute, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.Swap = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_Swap, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.RemoveLast = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_RemoveLast, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.RemoveFromIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_RemoveFromIndex, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.RemoveKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_RemoveKey, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.FindKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_FindKey, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.FindFromIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_FindFromIndex, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.ChangeFromIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_ChangeFromIndex, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.__call__ = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo___call__, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.FindIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_FindIndex, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.ChangeFromKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_ChangeFromKey, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.Seek = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_Seek, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.ChangeSeek = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_ChangeSeek, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.FindFromKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_FindFromKey, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.Clear = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_Clear, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo.Size = new_instancemethod(_Draft.Draft_IndexedDataMapOfVertexVertexInfo_Size, None, Draft_IndexedDataMapOfVertexVertexInfo)
Draft_IndexedDataMapOfVertexVertexInfo_swigregister = _Draft.Draft_IndexedDataMapOfVertexVertexInfo_swigregister
Draft_IndexedDataMapOfVertexVertexInfo_swigregister(Draft_IndexedDataMapOfVertexVertexInfo)

class Draft_IndexedDataMapOfEdgeEdgeInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_swiginit(self, _Draft.new_Draft_IndexedDataMapOfEdgeEdgeInfo(*args))
    __swig_destroy__ = _Draft.delete_Draft_IndexedDataMapOfEdgeEdgeInfo
Draft_IndexedDataMapOfEdgeEdgeInfo.begin = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_begin, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.end = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_end, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.cbegin = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_cbegin, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.cend = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_cend, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.Exchange = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_Exchange, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.Assign = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_Assign, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.Set = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_Set, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.ReSize = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_ReSize, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.Add = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_Add, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.Contains = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_Contains, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.Substitute = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_Substitute, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.Swap = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_Swap, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.RemoveLast = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_RemoveLast, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.RemoveFromIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_RemoveFromIndex, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.RemoveKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_RemoveKey, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.FindKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_FindKey, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.FindFromIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_FindFromIndex, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.ChangeFromIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_ChangeFromIndex, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.__call__ = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo___call__, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.FindIndex = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_FindIndex, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.ChangeFromKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_ChangeFromKey, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.Seek = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_Seek, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.ChangeSeek = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_ChangeSeek, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.FindFromKey = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_FindFromKey, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.Clear = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_Clear, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo.Size = new_instancemethod(_Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_Size, None, Draft_IndexedDataMapOfEdgeEdgeInfo)
Draft_IndexedDataMapOfEdgeEdgeInfo_swigregister = _Draft.Draft_IndexedDataMapOfEdgeEdgeInfo_swigregister
Draft_IndexedDataMapOfEdgeEdgeInfo_swigregister(Draft_IndexedDataMapOfEdgeEdgeInfo)

class draft(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Angle(*args) -> "Standard_Real":
        """
        * Returns the draft angle of the face <F> using the direction <Direction>. The method is valid for : - Plane faces, - Cylindrical or conical faces, when the direction of the axis of the surface is colinear with the direction. Otherwise, the exception DomainError is raised.
        	:param F:
        	:type F: TopoDS_Face
        	:param Direction:
        	:type Direction: gp_Dir
        	:rtype: float
        """
        return _Draft.draft_Angle(*args)

    Angle = staticmethod(Angle)

    __repr__ = _dumps_object


    def __init__(self):
        _Draft.draft_swiginit(self, _Draft.new_draft())
    __swig_destroy__ = _Draft.delete_draft
draft_swigregister = _Draft.draft_swigregister
draft_swigregister(draft)

def draft_Angle(*args) -> "Standard_Real":
    """
    * Returns the draft angle of the face <F> using the direction <Direction>. The method is valid for : - Plane faces, - Cylindrical or conical faces, when the direction of the axis of the surface is colinear with the direction. Otherwise, the exception DomainError is raised.
    	:param F:
    	:type F: TopoDS_Face
    	:param Direction:
    	:type Direction: gp_Dir
    	:rtype: float
    """
    return _Draft.draft_Angle(*args)

class Draft_EdgeInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _Draft.Draft_EdgeInfo_Add(self, *args)


    def ChangeFirstPC(self, *args) -> "opencascade::handle< Geom2d_Curve > &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _Draft.Draft_EdgeInfo_ChangeFirstPC(self, *args)


    def ChangeGeometry(self, *args) -> "opencascade::handle< Geom_Curve > &":
        """:rtype: opencascade::handle<Geom_Curve>"""
        return _Draft.Draft_EdgeInfo_ChangeGeometry(self, *args)


    def ChangeSecondPC(self, *args) -> "opencascade::handle< Geom2d_Curve > &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _Draft.Draft_EdgeInfo_ChangeSecondPC(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param HasNewGeometry:
        	:type HasNewGeometry: bool
        	:rtype: None
        """
        _Draft.Draft_EdgeInfo_swiginit(self, _Draft.new_Draft_EdgeInfo(*args))

    def FirstFace(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _Draft.Draft_EdgeInfo_FirstFace(self, *args)


    def FirstPC(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _Draft.Draft_EdgeInfo_FirstPC(self, *args)


    def Geometry(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """:rtype: opencascade::handle<Geom_Curve>"""
        return _Draft.Draft_EdgeInfo_Geometry(self, *args)


    def IsTangent(self, *args) -> "Standard_Boolean":
        """
        :param P:
        	:type P: gp_Pnt
        	:rtype: bool
        """
        return _Draft.Draft_EdgeInfo_IsTangent(self, *args)


    def NewGeometry(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Draft.Draft_EdgeInfo_NewGeometry(self, *args)


    def RootFace(self, *args) -> "TopoDS_Face const":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: None
        :rtype: TopoDS_Face
        """
        return _Draft.Draft_EdgeInfo_RootFace(self, *args)


    def SecondFace(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _Draft.Draft_EdgeInfo_SecondFace(self, *args)


    def SecondPC(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """:rtype: opencascade::handle<Geom2d_Curve>"""
        return _Draft.Draft_EdgeInfo_SecondPC(self, *args)


    def SetNewGeometry(self, *args) -> "void":
        """
        :param NewGeom:
        	:type NewGeom: bool
        	:rtype: None
        """
        return _Draft.Draft_EdgeInfo_SetNewGeometry(self, *args)


    def Tangent(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _Draft.Draft_EdgeInfo_Tangent(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        :param tol:
        	:type tol: float
        	:rtype: None
        :rtype: float
        """
        return _Draft.Draft_EdgeInfo_Tolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Draft.delete_Draft_EdgeInfo
Draft_EdgeInfo.Add = new_instancemethod(_Draft.Draft_EdgeInfo_Add, None, Draft_EdgeInfo)
Draft_EdgeInfo.ChangeFirstPC = new_instancemethod(_Draft.Draft_EdgeInfo_ChangeFirstPC, None, Draft_EdgeInfo)
Draft_EdgeInfo.ChangeGeometry = new_instancemethod(_Draft.Draft_EdgeInfo_ChangeGeometry, None, Draft_EdgeInfo)
Draft_EdgeInfo.ChangeSecondPC = new_instancemethod(_Draft.Draft_EdgeInfo_ChangeSecondPC, None, Draft_EdgeInfo)
Draft_EdgeInfo.FirstFace = new_instancemethod(_Draft.Draft_EdgeInfo_FirstFace, None, Draft_EdgeInfo)
Draft_EdgeInfo.FirstPC = new_instancemethod(_Draft.Draft_EdgeInfo_FirstPC, None, Draft_EdgeInfo)
Draft_EdgeInfo.Geometry = new_instancemethod(_Draft.Draft_EdgeInfo_Geometry, None, Draft_EdgeInfo)
Draft_EdgeInfo.IsTangent = new_instancemethod(_Draft.Draft_EdgeInfo_IsTangent, None, Draft_EdgeInfo)
Draft_EdgeInfo.NewGeometry = new_instancemethod(_Draft.Draft_EdgeInfo_NewGeometry, None, Draft_EdgeInfo)
Draft_EdgeInfo.RootFace = new_instancemethod(_Draft.Draft_EdgeInfo_RootFace, None, Draft_EdgeInfo)
Draft_EdgeInfo.SecondFace = new_instancemethod(_Draft.Draft_EdgeInfo_SecondFace, None, Draft_EdgeInfo)
Draft_EdgeInfo.SecondPC = new_instancemethod(_Draft.Draft_EdgeInfo_SecondPC, None, Draft_EdgeInfo)
Draft_EdgeInfo.SetNewGeometry = new_instancemethod(_Draft.Draft_EdgeInfo_SetNewGeometry, None, Draft_EdgeInfo)
Draft_EdgeInfo.Tangent = new_instancemethod(_Draft.Draft_EdgeInfo_Tangent, None, Draft_EdgeInfo)
Draft_EdgeInfo.Tolerance = new_instancemethod(_Draft.Draft_EdgeInfo_Tolerance, None, Draft_EdgeInfo)
Draft_EdgeInfo_swigregister = _Draft.Draft_EdgeInfo_swigregister
Draft_EdgeInfo_swigregister(Draft_EdgeInfo)

class Draft_FaceInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _Draft.Draft_FaceInfo_Add(self, *args)


    def ChangeCurve(self, *args) -> "opencascade::handle< Geom_Curve > &":
        """:rtype: opencascade::handle<Geom_Curve>"""
        return _Draft.Draft_FaceInfo_ChangeCurve(self, *args)


    def ChangeGeometry(self, *args) -> "opencascade::handle< Geom_Surface > &":
        """:rtype: opencascade::handle<Geom_Surface>"""
        return _Draft.Draft_FaceInfo_ChangeGeometry(self, *args)


    def Curve(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """:rtype: opencascade::handle<Geom_Curve>"""
        return _Draft.Draft_FaceInfo_Curve(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: Geom_Surface
        	:param HasNewGeometry:
        	:type HasNewGeometry: bool
        	:rtype: None
        """
        _Draft.Draft_FaceInfo_swiginit(self, _Draft.new_Draft_FaceInfo(*args))

    def FirstFace(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _Draft.Draft_FaceInfo_FirstFace(self, *args)


    def Geometry(self, *args) -> "opencascade::handle< Geom_Surface > const &":
        """:rtype: opencascade::handle<Geom_Surface>"""
        return _Draft.Draft_FaceInfo_Geometry(self, *args)


    def NewGeometry(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Draft.Draft_FaceInfo_NewGeometry(self, *args)


    def RootFace(self, *args) -> "TopoDS_Face const":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: None
        :rtype: TopoDS_Face
        """
        return _Draft.Draft_FaceInfo_RootFace(self, *args)


    def SecondFace(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _Draft.Draft_FaceInfo_SecondFace(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Draft.delete_Draft_FaceInfo
Draft_FaceInfo.Add = new_instancemethod(_Draft.Draft_FaceInfo_Add, None, Draft_FaceInfo)
Draft_FaceInfo.ChangeCurve = new_instancemethod(_Draft.Draft_FaceInfo_ChangeCurve, None, Draft_FaceInfo)
Draft_FaceInfo.ChangeGeometry = new_instancemethod(_Draft.Draft_FaceInfo_ChangeGeometry, None, Draft_FaceInfo)
Draft_FaceInfo.Curve = new_instancemethod(_Draft.Draft_FaceInfo_Curve, None, Draft_FaceInfo)
Draft_FaceInfo.FirstFace = new_instancemethod(_Draft.Draft_FaceInfo_FirstFace, None, Draft_FaceInfo)
Draft_FaceInfo.Geometry = new_instancemethod(_Draft.Draft_FaceInfo_Geometry, None, Draft_FaceInfo)
Draft_FaceInfo.NewGeometry = new_instancemethod(_Draft.Draft_FaceInfo_NewGeometry, None, Draft_FaceInfo)
Draft_FaceInfo.RootFace = new_instancemethod(_Draft.Draft_FaceInfo_RootFace, None, Draft_FaceInfo)
Draft_FaceInfo.SecondFace = new_instancemethod(_Draft.Draft_FaceInfo_SecondFace, None, Draft_FaceInfo)
Draft_FaceInfo_swigregister = _Draft.Draft_FaceInfo_swigregister
Draft_FaceInfo_swigregister(Draft_FaceInfo)

class Draft_Modification(OCC.Core.BRepTools.BRepTools_Modification):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Standard_Boolean":
        """
        * Adds the face F and propagates the draft modification to its neighbour faces if they are tangent. If an error occurs, will return False and ProblematicShape will return the 'bad' face.
        	:param F:
        	:type F: TopoDS_Face
        	:param Direction:
        	:type Direction: gp_Dir
        	:param Angle:
        	:type Angle: float
        	:param NeutralPlane:
        	:type NeutralPlane: gp_Pln
        	:param Flag: default value is Standard_True
        	:type Flag: bool
        	:rtype: bool
        """
        return _Draft.Draft_Modification_Add(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Resets on the same shape.
        	:rtype: None
        """
        return _Draft.Draft_Modification_Clear(self, *args)


    def ConnectedFaces(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns all the faces which have been added together with the face <F>.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: TopTools_ListOfShape
        """
        return _Draft.Draft_Modification_ConnectedFaces(self, *args)


    def __init__(self, *args):
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _Draft.Draft_Modification_swiginit(self, _Draft.new_Draft_Modification(*args))

    def Error(self, *args) -> "Draft_ErrorStatus":
        """:rtype: Draft_ErrorStatus"""
        return _Draft.Draft_Modification_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        * Changes the basis shape and resets.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _Draft.Draft_Modification_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if Perform has been succesfully called. Otherwise more information can be obtained using the methods Error() and ProblematicShape().
        	:rtype: bool
        """
        return _Draft.Draft_Modification_IsDone(self, *args)


    def ModifiedFaces(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns all the faces on which a modification has been given.
        	:rtype: TopTools_ListOfShape
        """
        return _Draft.Draft_Modification_ModifiedFaces(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs the draft angle modification and sets the value returned by the method IsDone. If an error occurs, IsDone will return Standard_False, and an error status will be given by the method Error, and the shape on which the problem appeared will be given by ProblematicShape
        	:rtype: None
        """
        return _Draft.Draft_Modification_Perform(self, *args)


    def ProblematicShape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the shape (Face, Edge or Vertex) on which an error occured.
        	:rtype: TopoDS_Shape
        """
        return _Draft.Draft_Modification_ProblematicShape(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Removes the face F and the neighbour faces if they are tangent. It will be necessary to call this method if the method Add returns Standard_False, to unset ProblematicFace.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _Draft.Draft_Modification_Remove(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Draft_Modification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Draft.delete_Draft_Modification
Draft_Modification.Add = new_instancemethod(_Draft.Draft_Modification_Add, None, Draft_Modification)
Draft_Modification.Clear = new_instancemethod(_Draft.Draft_Modification_Clear, None, Draft_Modification)
Draft_Modification.ConnectedFaces = new_instancemethod(_Draft.Draft_Modification_ConnectedFaces, None, Draft_Modification)
Draft_Modification.Error = new_instancemethod(_Draft.Draft_Modification_Error, None, Draft_Modification)
Draft_Modification.Init = new_instancemethod(_Draft.Draft_Modification_Init, None, Draft_Modification)
Draft_Modification.IsDone = new_instancemethod(_Draft.Draft_Modification_IsDone, None, Draft_Modification)
Draft_Modification.ModifiedFaces = new_instancemethod(_Draft.Draft_Modification_ModifiedFaces, None, Draft_Modification)
Draft_Modification.Perform = new_instancemethod(_Draft.Draft_Modification_Perform, None, Draft_Modification)
Draft_Modification.ProblematicShape = new_instancemethod(_Draft.Draft_Modification_ProblematicShape, None, Draft_Modification)
Draft_Modification.Remove = new_instancemethod(_Draft.Draft_Modification_Remove, None, Draft_Modification)
Draft_Modification_swigregister = _Draft.Draft_Modification_swigregister
Draft_Modification_swigregister(Draft_Modification)

class Draft_VertexInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _Draft.Draft_VertexInfo_Add(self, *args)


    def ChangeGeometry(self, *args) -> "gp_Pnt":
        """:rtype: gp_Pnt"""
        return _Draft.Draft_VertexInfo_ChangeGeometry(self, *args)


    def GetChangeParameter(self, E: 'TopoDS_Edge') -> "Standard_Real":
        """GetChangeParameter(Draft_VertexInfo self, TopoDS_Edge E) -> Standard_Real"""
        return _Draft.Draft_VertexInfo_GetChangeParameter(self, E)


    def SetChangeParameter(self, E: 'TopoDS_Edge', value: 'Standard_Real') -> "void":
        """SetChangeParameter(Draft_VertexInfo self, TopoDS_Edge E, Standard_Real value)"""
        return _Draft.Draft_VertexInfo_SetChangeParameter(self, E, value)


    def __init__(self, *args):
        """:rtype: None"""
        _Draft.Draft_VertexInfo_swiginit(self, _Draft.new_Draft_VertexInfo(*args))

    def Edge(self, *args) -> "TopoDS_Edge const":
        """:rtype: TopoDS_Edge"""
        return _Draft.Draft_VertexInfo_Edge(self, *args)


    def Geometry(self, *args) -> "gp_Pnt const":
        """:rtype: gp_Pnt"""
        return _Draft.Draft_VertexInfo_Geometry(self, *args)


    def InitEdgeIterator(self, *args) -> "void":
        """:rtype: None"""
        return _Draft.Draft_VertexInfo_InitEdgeIterator(self, *args)


    def MoreEdge(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Draft.Draft_VertexInfo_MoreEdge(self, *args)


    def NextEdge(self, *args) -> "void":
        """:rtype: None"""
        return _Draft.Draft_VertexInfo_NextEdge(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: float
        """
        return _Draft.Draft_VertexInfo_Parameter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Draft.delete_Draft_VertexInfo
Draft_VertexInfo.Add = new_instancemethod(_Draft.Draft_VertexInfo_Add, None, Draft_VertexInfo)
Draft_VertexInfo.ChangeGeometry = new_instancemethod(_Draft.Draft_VertexInfo_ChangeGeometry, None, Draft_VertexInfo)
Draft_VertexInfo.GetChangeParameter = new_instancemethod(_Draft.Draft_VertexInfo_GetChangeParameter, None, Draft_VertexInfo)
Draft_VertexInfo.SetChangeParameter = new_instancemethod(_Draft.Draft_VertexInfo_SetChangeParameter, None, Draft_VertexInfo)
Draft_VertexInfo.Edge = new_instancemethod(_Draft.Draft_VertexInfo_Edge, None, Draft_VertexInfo)
Draft_VertexInfo.Geometry = new_instancemethod(_Draft.Draft_VertexInfo_Geometry, None, Draft_VertexInfo)
Draft_VertexInfo.InitEdgeIterator = new_instancemethod(_Draft.Draft_VertexInfo_InitEdgeIterator, None, Draft_VertexInfo)
Draft_VertexInfo.MoreEdge = new_instancemethod(_Draft.Draft_VertexInfo_MoreEdge, None, Draft_VertexInfo)
Draft_VertexInfo.NextEdge = new_instancemethod(_Draft.Draft_VertexInfo_NextEdge, None, Draft_VertexInfo)
Draft_VertexInfo.Parameter = new_instancemethod(_Draft.Draft_VertexInfo_Parameter, None, Draft_VertexInfo)
Draft_VertexInfo_swigregister = _Draft.Draft_VertexInfo_swigregister
Draft_VertexInfo_swigregister(Draft_VertexInfo)



