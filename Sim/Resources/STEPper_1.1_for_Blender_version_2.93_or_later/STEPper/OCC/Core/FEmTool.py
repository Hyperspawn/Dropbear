# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
FEmTool module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_femtool.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _FEmTool.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_FEmTool')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_FEmTool')
    _FEmTool = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FEmTool', [dirname(__file__)])
        except ImportError:
            import _FEmTool
            return _FEmTool
        try:
            _mod = imp.load_module('_FEmTool', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _FEmTool = swig_import_helper()
    del swig_import_helper
else:
    import _FEmTool
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FEmTool.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_FEmTool.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_FEmTool.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_FEmTool.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_FEmTool.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_FEmTool.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_FEmTool.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_FEmTool.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_FEmTool.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_FEmTool.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_FEmTool.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_FEmTool.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_FEmTool.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_FEmTool.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_FEmTool.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_FEmTool.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_FEmTool.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _FEmTool.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _FEmTool.process_exception(error, method_name, class_name)
process_exception = _FEmTool.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.gp
import OCC.Core.PLib
import OCC.Core.TColgp
import OCC.Core.GeomAbs

def Handle_FEmTool_Curve_Create() -> "opencascade::handle< FEmTool_Curve >":
    return _FEmTool.Handle_FEmTool_Curve_Create()
Handle_FEmTool_Curve_Create = _FEmTool.Handle_FEmTool_Curve_Create

def Handle_FEmTool_Curve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< FEmTool_Curve >":
    return _FEmTool.Handle_FEmTool_Curve_DownCast(t)
Handle_FEmTool_Curve_DownCast = _FEmTool.Handle_FEmTool_Curve_DownCast

def Handle_FEmTool_Curve_IsNull(t: 'opencascade::handle< FEmTool_Curve > const &') -> "bool":
    return _FEmTool.Handle_FEmTool_Curve_IsNull(t)
Handle_FEmTool_Curve_IsNull = _FEmTool.Handle_FEmTool_Curve_IsNull

def Handle_FEmTool_ElementaryCriterion_Create() -> "opencascade::handle< FEmTool_ElementaryCriterion >":
    return _FEmTool.Handle_FEmTool_ElementaryCriterion_Create()
Handle_FEmTool_ElementaryCriterion_Create = _FEmTool.Handle_FEmTool_ElementaryCriterion_Create

def Handle_FEmTool_ElementaryCriterion_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< FEmTool_ElementaryCriterion >":
    return _FEmTool.Handle_FEmTool_ElementaryCriterion_DownCast(t)
Handle_FEmTool_ElementaryCriterion_DownCast = _FEmTool.Handle_FEmTool_ElementaryCriterion_DownCast

def Handle_FEmTool_ElementaryCriterion_IsNull(t: 'opencascade::handle< FEmTool_ElementaryCriterion > const &') -> "bool":
    return _FEmTool.Handle_FEmTool_ElementaryCriterion_IsNull(t)
Handle_FEmTool_ElementaryCriterion_IsNull = _FEmTool.Handle_FEmTool_ElementaryCriterion_IsNull

def Handle_FEmTool_SparseMatrix_Create() -> "opencascade::handle< FEmTool_SparseMatrix >":
    return _FEmTool.Handle_FEmTool_SparseMatrix_Create()
Handle_FEmTool_SparseMatrix_Create = _FEmTool.Handle_FEmTool_SparseMatrix_Create

def Handle_FEmTool_SparseMatrix_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< FEmTool_SparseMatrix >":
    return _FEmTool.Handle_FEmTool_SparseMatrix_DownCast(t)
Handle_FEmTool_SparseMatrix_DownCast = _FEmTool.Handle_FEmTool_SparseMatrix_DownCast

def Handle_FEmTool_SparseMatrix_IsNull(t: 'opencascade::handle< FEmTool_SparseMatrix > const &') -> "bool":
    return _FEmTool.Handle_FEmTool_SparseMatrix_IsNull(t)
Handle_FEmTool_SparseMatrix_IsNull = _FEmTool.Handle_FEmTool_SparseMatrix_IsNull

def Handle_FEmTool_LinearFlexion_Create() -> "opencascade::handle< FEmTool_LinearFlexion >":
    return _FEmTool.Handle_FEmTool_LinearFlexion_Create()
Handle_FEmTool_LinearFlexion_Create = _FEmTool.Handle_FEmTool_LinearFlexion_Create

def Handle_FEmTool_LinearFlexion_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< FEmTool_LinearFlexion >":
    return _FEmTool.Handle_FEmTool_LinearFlexion_DownCast(t)
Handle_FEmTool_LinearFlexion_DownCast = _FEmTool.Handle_FEmTool_LinearFlexion_DownCast

def Handle_FEmTool_LinearFlexion_IsNull(t: 'opencascade::handle< FEmTool_LinearFlexion > const &') -> "bool":
    return _FEmTool.Handle_FEmTool_LinearFlexion_IsNull(t)
Handle_FEmTool_LinearFlexion_IsNull = _FEmTool.Handle_FEmTool_LinearFlexion_IsNull

def Handle_FEmTool_LinearJerk_Create() -> "opencascade::handle< FEmTool_LinearJerk >":
    return _FEmTool.Handle_FEmTool_LinearJerk_Create()
Handle_FEmTool_LinearJerk_Create = _FEmTool.Handle_FEmTool_LinearJerk_Create

def Handle_FEmTool_LinearJerk_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< FEmTool_LinearJerk >":
    return _FEmTool.Handle_FEmTool_LinearJerk_DownCast(t)
Handle_FEmTool_LinearJerk_DownCast = _FEmTool.Handle_FEmTool_LinearJerk_DownCast

def Handle_FEmTool_LinearJerk_IsNull(t: 'opencascade::handle< FEmTool_LinearJerk > const &') -> "bool":
    return _FEmTool.Handle_FEmTool_LinearJerk_IsNull(t)
Handle_FEmTool_LinearJerk_IsNull = _FEmTool.Handle_FEmTool_LinearJerk_IsNull

def Handle_FEmTool_LinearTension_Create() -> "opencascade::handle< FEmTool_LinearTension >":
    return _FEmTool.Handle_FEmTool_LinearTension_Create()
Handle_FEmTool_LinearTension_Create = _FEmTool.Handle_FEmTool_LinearTension_Create

def Handle_FEmTool_LinearTension_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< FEmTool_LinearTension >":
    return _FEmTool.Handle_FEmTool_LinearTension_DownCast(t)
Handle_FEmTool_LinearTension_DownCast = _FEmTool.Handle_FEmTool_LinearTension_DownCast

def Handle_FEmTool_LinearTension_IsNull(t: 'opencascade::handle< FEmTool_LinearTension > const &') -> "bool":
    return _FEmTool.Handle_FEmTool_LinearTension_IsNull(t)
Handle_FEmTool_LinearTension_IsNull = _FEmTool.Handle_FEmTool_LinearTension_IsNull

def Handle_FEmTool_ProfileMatrix_Create() -> "opencascade::handle< FEmTool_ProfileMatrix >":
    return _FEmTool.Handle_FEmTool_ProfileMatrix_Create()
Handle_FEmTool_ProfileMatrix_Create = _FEmTool.Handle_FEmTool_ProfileMatrix_Create

def Handle_FEmTool_ProfileMatrix_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< FEmTool_ProfileMatrix >":
    return _FEmTool.Handle_FEmTool_ProfileMatrix_DownCast(t)
Handle_FEmTool_ProfileMatrix_DownCast = _FEmTool.Handle_FEmTool_ProfileMatrix_DownCast

def Handle_FEmTool_ProfileMatrix_IsNull(t: 'opencascade::handle< FEmTool_ProfileMatrix > const &') -> "bool":
    return _FEmTool.Handle_FEmTool_ProfileMatrix_IsNull(t)
Handle_FEmTool_ProfileMatrix_IsNull = _FEmTool.Handle_FEmTool_ProfileMatrix_IsNull

def Handle_FEmTool_HAssemblyTable_Create() -> "opencascade::handle< FEmTool_HAssemblyTable >":
    return _FEmTool.Handle_FEmTool_HAssemblyTable_Create()
Handle_FEmTool_HAssemblyTable_Create = _FEmTool.Handle_FEmTool_HAssemblyTable_Create

def Handle_FEmTool_HAssemblyTable_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< FEmTool_HAssemblyTable >":
    return _FEmTool.Handle_FEmTool_HAssemblyTable_DownCast(t)
Handle_FEmTool_HAssemblyTable_DownCast = _FEmTool.Handle_FEmTool_HAssemblyTable_DownCast

def Handle_FEmTool_HAssemblyTable_IsNull(t: 'opencascade::handle< FEmTool_HAssemblyTable > const &') -> "bool":
    return _FEmTool.Handle_FEmTool_HAssemblyTable_IsNull(t)
Handle_FEmTool_HAssemblyTable_IsNull = _FEmTool.Handle_FEmTool_HAssemblyTable_IsNull
class FEmTool_AssemblyTable(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FEmTool.FEmTool_AssemblyTable_swiginit(self, _FEmTool.new_FEmTool_AssemblyTable(*args))
    __swig_destroy__ = _FEmTool.delete_FEmTool_AssemblyTable
FEmTool_AssemblyTable.Init = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Init, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.Size = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Size, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.Length = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Length, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.NbRows = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_NbRows, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.NbColumns = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_NbColumns, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.RowLength = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_RowLength, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.ColLength = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_ColLength, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.LowerRow = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_LowerRow, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.UpperRow = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_UpperRow, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.LowerCol = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_LowerCol, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.UpperCol = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_UpperCol, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.IsDeletable = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_IsDeletable, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.Assign = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Assign, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.Move = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Move, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.Set = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Set, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.Value = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Value, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.ChangeValue = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_ChangeValue, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.__call__ = new_instancemethod(_FEmTool.FEmTool_AssemblyTable___call__, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.SetValue = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_SetValue, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable.Resize = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Resize, None, FEmTool_AssemblyTable)
FEmTool_AssemblyTable_swigregister = _FEmTool.FEmTool_AssemblyTable_swigregister
FEmTool_AssemblyTable_swigregister(FEmTool_AssemblyTable)

class FEmTool_SeqOfLinConstr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FEmTool.FEmTool_SeqOfLinConstr_swiginit(self, _FEmTool.new_FEmTool_SeqOfLinConstr(*args))
    delNode = staticmethod(_FEmTool.FEmTool_SeqOfLinConstr_delNode)
    __swig_destroy__ = _FEmTool.delete_FEmTool_SeqOfLinConstr
FEmTool_SeqOfLinConstr.begin = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_begin, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.end = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_end, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.cbegin = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_cbegin, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.cend = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_cend, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Size = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Size, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Length = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Length, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Lower = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Lower, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Upper = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Upper, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.IsEmpty = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_IsEmpty, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Reverse = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Reverse, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Exchange = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Exchange, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Clear = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Clear, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Assign = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Assign, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Set = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Set, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Remove = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Remove, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Append = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Append, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Prepend = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Prepend, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.InsertBefore = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_InsertBefore, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.InsertAfter = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_InsertAfter, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Split = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Split, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.First = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_First, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.ChangeFirst = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_ChangeFirst, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Last = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Last, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.ChangeLast = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_ChangeLast, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Value = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Value, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.ChangeValue = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_ChangeValue, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.__call__ = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr___call__, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.SetValue = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_SetValue, None, FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr_swigregister = _FEmTool.FEmTool_SeqOfLinConstr_swigregister
FEmTool_SeqOfLinConstr_swigregister(FEmTool_SeqOfLinConstr)

def FEmTool_SeqOfLinConstr_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _FEmTool.FEmTool_SeqOfLinConstr_delNode(theNode, theAl)
FEmTool_SeqOfLinConstr_delNode = _FEmTool.FEmTool_SeqOfLinConstr_delNode

class FEmTool_ListOfVectors(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FEmTool.FEmTool_ListOfVectors_swiginit(self, _FEmTool.new_FEmTool_ListOfVectors(*args))
    __swig_destroy__ = _FEmTool.delete_FEmTool_ListOfVectors
FEmTool_ListOfVectors.begin = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_begin, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.end = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_end, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.cbegin = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_cbegin, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.cend = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_cend, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Size = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Size, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Assign = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Assign, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Set = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Set, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Clear = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Clear, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.First = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_First, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Last = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Last, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Append = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Append, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Prepend = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Prepend, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.RemoveFirst = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_RemoveFirst, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Remove = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Remove, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.InsertBefore = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_InsertBefore, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.InsertAfter = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_InsertAfter, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Reverse = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Reverse, None, FEmTool_ListOfVectors)
FEmTool_ListOfVectors_swigregister = _FEmTool.FEmTool_ListOfVectors_swigregister
FEmTool_ListOfVectors_swigregister(FEmTool_ListOfVectors)

class FEmTool_ListIteratorOfListOfVectors(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FEmTool.FEmTool_ListIteratorOfListOfVectors_swiginit(self, _FEmTool.new_FEmTool_ListIteratorOfListOfVectors(*args))
    __swig_destroy__ = _FEmTool.delete_FEmTool_ListIteratorOfListOfVectors
FEmTool_ListIteratorOfListOfVectors.More = new_instancemethod(_FEmTool.FEmTool_ListIteratorOfListOfVectors_More, None, FEmTool_ListIteratorOfListOfVectors)
FEmTool_ListIteratorOfListOfVectors.Next = new_instancemethod(_FEmTool.FEmTool_ListIteratorOfListOfVectors_Next, None, FEmTool_ListIteratorOfListOfVectors)
FEmTool_ListIteratorOfListOfVectors.Value = new_instancemethod(_FEmTool.FEmTool_ListIteratorOfListOfVectors_Value, None, FEmTool_ListIteratorOfListOfVectors)
FEmTool_ListIteratorOfListOfVectors.ChangeValue = new_instancemethod(_FEmTool.FEmTool_ListIteratorOfListOfVectors_ChangeValue, None, FEmTool_ListIteratorOfListOfVectors)
FEmTool_ListIteratorOfListOfVectors_swigregister = _FEmTool.FEmTool_ListIteratorOfListOfVectors_swigregister
FEmTool_ListIteratorOfListOfVectors_swigregister(FEmTool_ListIteratorOfListOfVectors)

class FEmTool_Assembly(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddConstraint(self, *args) -> "void":
        """
        :param IndexofConstraint:
        	:type IndexofConstraint: int
        	:param Element:
        	:type Element: int
        	:param Dimension:
        	:type Dimension: int
        	:param LinearForm:
        	:type LinearForm: math_Vector
        	:param Value:
        	:type Value: float
        	:rtype: None
        """
        return _FEmTool.FEmTool_Assembly_AddConstraint(self, *args)


    def AddMatrix(self, *args) -> "void":
        """
        * Add an elementary Matrix in the assembly Matrix if Dependence(Dimension1,Dimension2) is False
        	:param Element:
        	:type Element: int
        	:param Dimension1:
        	:type Dimension1: int
        	:param Dimension2:
        	:type Dimension2: int
        	:param Mat:
        	:type Mat: math_Matrix
        	:rtype: None
        """
        return _FEmTool.FEmTool_Assembly_AddMatrix(self, *args)


    def AddVector(self, *args) -> "void":
        """
        * Add an elementary Vector in the assembly Vector (second member)
        	:param Element:
        	:type Element: int
        	:param Dimension:
        	:type Dimension: int
        	:param Vec:
        	:type Vec: math_Vector
        	:rtype: None
        """
        return _FEmTool.FEmTool_Assembly_AddVector(self, *args)


    def __init__(self, *args):
        """
        :param Dependence:
        	:type Dependence: TColStd_Array2OfInteger
        	:param Table:
        	:type Table: FEmTool_HAssemblyTable
        	:rtype: None
        """
        _FEmTool.FEmTool_Assembly_swiginit(self, _FEmTool.new_FEmTool_Assembly(*args))

    def GetAssemblyTable(self, *args) -> "void":
        """
        :param AssTable:
        	:type AssTable: FEmTool_HAssemblyTable
        	:rtype: None
        """
        return _FEmTool.FEmTool_Assembly_GetAssemblyTable(self, *args)


    def NbGlobVar(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _FEmTool.FEmTool_Assembly_NbGlobVar(self, *args)


    def NullifyConstraint(self, *args) -> "void":
        """
        * Nullify all Constraints.
        	:rtype: None
        """
        return _FEmTool.FEmTool_Assembly_NullifyConstraint(self, *args)


    def NullifyMatrix(self, *args) -> "void":
        """
        * Nullify all Matrix 's Coefficient
        	:rtype: None
        """
        return _FEmTool.FEmTool_Assembly_NullifyMatrix(self, *args)


    def NullifyVector(self, *args) -> "void":
        """
        * Nullify all Coordinate of assembly Vector (second member)
        	:rtype: None
        """
        return _FEmTool.FEmTool_Assembly_NullifyVector(self, *args)


    def ResetConstraint(self, *args) -> "void":
        """
        * Delete all Constraints.
        	:rtype: None
        """
        return _FEmTool.FEmTool_Assembly_ResetConstraint(self, *args)


    def Solution(self, *args) -> "void":
        """
        :param Solution:
        	:type Solution: math_Vector
        	:rtype: None
        """
        return _FEmTool.FEmTool_Assembly_Solution(self, *args)


    def Solve(self, *args) -> "Standard_Boolean":
        """
        * Solve the assembly system Returns Standard_False if the computation failed.
        	:rtype: bool
        """
        return _FEmTool.FEmTool_Assembly_Solve(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_Assembly
FEmTool_Assembly.AddConstraint = new_instancemethod(_FEmTool.FEmTool_Assembly_AddConstraint, None, FEmTool_Assembly)
FEmTool_Assembly.AddMatrix = new_instancemethod(_FEmTool.FEmTool_Assembly_AddMatrix, None, FEmTool_Assembly)
FEmTool_Assembly.AddVector = new_instancemethod(_FEmTool.FEmTool_Assembly_AddVector, None, FEmTool_Assembly)
FEmTool_Assembly.GetAssemblyTable = new_instancemethod(_FEmTool.FEmTool_Assembly_GetAssemblyTable, None, FEmTool_Assembly)
FEmTool_Assembly.NbGlobVar = new_instancemethod(_FEmTool.FEmTool_Assembly_NbGlobVar, None, FEmTool_Assembly)
FEmTool_Assembly.NullifyConstraint = new_instancemethod(_FEmTool.FEmTool_Assembly_NullifyConstraint, None, FEmTool_Assembly)
FEmTool_Assembly.NullifyMatrix = new_instancemethod(_FEmTool.FEmTool_Assembly_NullifyMatrix, None, FEmTool_Assembly)
FEmTool_Assembly.NullifyVector = new_instancemethod(_FEmTool.FEmTool_Assembly_NullifyVector, None, FEmTool_Assembly)
FEmTool_Assembly.ResetConstraint = new_instancemethod(_FEmTool.FEmTool_Assembly_ResetConstraint, None, FEmTool_Assembly)
FEmTool_Assembly.Solution = new_instancemethod(_FEmTool.FEmTool_Assembly_Solution, None, FEmTool_Assembly)
FEmTool_Assembly.Solve = new_instancemethod(_FEmTool.FEmTool_Assembly_Solve, None, FEmTool_Assembly)
FEmTool_Assembly_swigregister = _FEmTool.FEmTool_Assembly_swigregister
FEmTool_Assembly_swigregister(FEmTool_Assembly)

class FEmTool_Curve(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Base(self, *args) -> "opencascade::handle< PLib_Base >":
        """:rtype: opencascade::handle<PLib_Base>"""
        return _FEmTool.FEmTool_Curve_Base(self, *args)


    def D0(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param Pnt:
        	:type Pnt: TColStd_Array1OfReal
        	:rtype: None
        """
        return _FEmTool.FEmTool_Curve_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param Vec:
        	:type Vec: TColStd_Array1OfReal
        	:rtype: None
        """
        return _FEmTool.FEmTool_Curve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param Vec:
        	:type Vec: TColStd_Array1OfReal
        	:rtype: None
        """
        return _FEmTool.FEmTool_Curve_D2(self, *args)


    def Degree(self, *args) -> "Standard_Integer":
        """
        :param IndexOfElement:
        	:type IndexOfElement: int
        	:rtype: int
        """
        return _FEmTool.FEmTool_Curve_Degree(self, *args)


    def Dimension(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _FEmTool.FEmTool_Curve_Dimension(self, *args)


    def __init__(self, *args):
        """
        :param Dimension:
        	:type Dimension: int
        	:param NbElements:
        	:type NbElements: int
        	:param TheBase:
        	:type TheBase: PLib_Base
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        """
        _FEmTool.FEmTool_Curve_swiginit(self, _FEmTool.new_FEmTool_Curve(*args))

    def GetElement(self, *args) -> "void":
        """
        :param IndexOfElement:
        	:type IndexOfElement: int
        	:param Coeffs:
        	:type Coeffs: TColStd_Array2OfReal
        	:rtype: None
        """
        return _FEmTool.FEmTool_Curve_GetElement(self, *args)


    def GetPolynom(self, *args) -> "void":
        """
        * returns coefficients of all elements in canonical base.
        	:param Coeffs:
        	:type Coeffs: TColStd_Array1OfReal
        	:rtype: None
        """
        return _FEmTool.FEmTool_Curve_GetPolynom(self, *args)


    def Knots(self, *args) -> "TColStd_Array1OfReal &":
        """:rtype: TColStd_Array1OfReal"""
        return _FEmTool.FEmTool_Curve_Knots(self, *args)


    def Length(self, *args) -> "void":
        """
        :param FirstU:
        	:type FirstU: float
        	:param LastU:
        	:type LastU: float
        	:param Length:
        	:type Length: float
        	:rtype: None
        """
        return _FEmTool.FEmTool_Curve_Length(self, *args)


    def NbElements(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _FEmTool.FEmTool_Curve_NbElements(self, *args)


    def ReduceDegree(self, *args) -> "void":
        """
        :param IndexOfElement:
        	:type IndexOfElement: int
        	:param Tol:
        	:type Tol: float
        	:param NewDegree:
        	:type NewDegree: int
        	:param MaxError:
        	:type MaxError: float
        	:rtype: None
        """
        return _FEmTool.FEmTool_Curve_ReduceDegree(self, *args)


    def SetDegree(self, *args) -> "void":
        """
        :param IndexOfElement:
        	:type IndexOfElement: int
        	:param Degree:
        	:type Degree: int
        	:rtype: None
        """
        return _FEmTool.FEmTool_Curve_SetDegree(self, *args)


    def SetElement(self, *args) -> "void":
        """
        :param IndexOfElement:
        	:type IndexOfElement: int
        	:param Coeffs:
        	:type Coeffs: TColStd_Array2OfReal
        	:rtype: None
        """
        return _FEmTool.FEmTool_Curve_SetElement(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_Curve
FEmTool_Curve.Base = new_instancemethod(_FEmTool.FEmTool_Curve_Base, None, FEmTool_Curve)
FEmTool_Curve.D0 = new_instancemethod(_FEmTool.FEmTool_Curve_D0, None, FEmTool_Curve)
FEmTool_Curve.D1 = new_instancemethod(_FEmTool.FEmTool_Curve_D1, None, FEmTool_Curve)
FEmTool_Curve.D2 = new_instancemethod(_FEmTool.FEmTool_Curve_D2, None, FEmTool_Curve)
FEmTool_Curve.Degree = new_instancemethod(_FEmTool.FEmTool_Curve_Degree, None, FEmTool_Curve)
FEmTool_Curve.Dimension = new_instancemethod(_FEmTool.FEmTool_Curve_Dimension, None, FEmTool_Curve)
FEmTool_Curve.GetElement = new_instancemethod(_FEmTool.FEmTool_Curve_GetElement, None, FEmTool_Curve)
FEmTool_Curve.GetPolynom = new_instancemethod(_FEmTool.FEmTool_Curve_GetPolynom, None, FEmTool_Curve)
FEmTool_Curve.Knots = new_instancemethod(_FEmTool.FEmTool_Curve_Knots, None, FEmTool_Curve)
FEmTool_Curve.Length = new_instancemethod(_FEmTool.FEmTool_Curve_Length, None, FEmTool_Curve)
FEmTool_Curve.NbElements = new_instancemethod(_FEmTool.FEmTool_Curve_NbElements, None, FEmTool_Curve)
FEmTool_Curve.ReduceDegree = new_instancemethod(_FEmTool.FEmTool_Curve_ReduceDegree, None, FEmTool_Curve)
FEmTool_Curve.SetDegree = new_instancemethod(_FEmTool.FEmTool_Curve_SetDegree, None, FEmTool_Curve)
FEmTool_Curve.SetElement = new_instancemethod(_FEmTool.FEmTool_Curve_SetElement, None, FEmTool_Curve)
FEmTool_Curve_swigregister = _FEmTool.FEmTool_Curve_swigregister
FEmTool_Curve_swigregister(FEmTool_Curve)

class FEmTool_ElementaryCriterion(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DependenceTable(self, *args) -> "opencascade::handle< TColStd_HArray2OfInteger >":
        """
        * To know if two dimension are independent.
        	:rtype: opencascade::handle<TColStd_HArray2OfInteger>
        """
        return _FEmTool.FEmTool_ElementaryCriterion_DependenceTable(self, *args)


    def Gradient(self, *args) -> "void":
        """
        * To Compute the coefficients in the dimension <dim> of the J(E)'s Gradient where E is the current Element
        	:param Dim:
        	:type Dim: int
        	:param G:
        	:type G: math_Vector
        	:rtype: void
        """
        return _FEmTool.FEmTool_ElementaryCriterion_Gradient(self, *args)


    def Hessian(self, *args) -> "void":
        """
        * To Compute J(E) the coefficients of Hessian matrix of J(E) wich are crossed derivatives in dimensions <Dim1> and <Dim2>. If DependenceTable(Dimension1,Dimension2) is False
        	:param Dim1:
        	:type Dim1: int
        	:param Dim2:
        	:type Dim2: int
        	:param H:
        	:type H: math_Matrix
        	:rtype: void
        """
        return _FEmTool.FEmTool_ElementaryCriterion_Hessian(self, *args)


    def Set(self, *args) -> "void":
        """
        * Set the coefficient of the Element (the Curve)
        	:param Coeff:
        	:type Coeff: TColStd_HArray2OfReal
        	:rtype: None
        * Set the definition interval of the Element
        	:param FirstKnot:
        	:type FirstKnot: float
        	:param LastKnot:
        	:type LastKnot: float
        	:rtype: void
        """
        return _FEmTool.FEmTool_ElementaryCriterion_Set(self, *args)


    def Value(self, *args) -> "Standard_Real":
        """
        * To Compute J(E) where E is the current Element
        	:rtype: float
        """
        return _FEmTool.FEmTool_ElementaryCriterion_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_ElementaryCriterion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_ElementaryCriterion
FEmTool_ElementaryCriterion.DependenceTable = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion_DependenceTable, None, FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion.Gradient = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion_Gradient, None, FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion.Hessian = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion_Hessian, None, FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion.Set = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion_Set, None, FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion.Value = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion_Value, None, FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion_swigregister = _FEmTool.FEmTool_ElementaryCriterion_swigregister
FEmTool_ElementaryCriterion_swigregister(FEmTool_ElementaryCriterion)

class FEmTool_ElementsOfRefMatrix(OCC.Core.math.math_FunctionSet):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param TheBase:
        	:type TheBase: PLib_Base
        	:param DerOrder:
        	:type DerOrder: int
        	:rtype: None
        """
        _FEmTool.FEmTool_ElementsOfRefMatrix_swiginit(self, _FEmTool.new_FEmTool_ElementsOfRefMatrix(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_ElementsOfRefMatrix
FEmTool_ElementsOfRefMatrix_swigregister = _FEmTool.FEmTool_ElementsOfRefMatrix_swigregister
FEmTool_ElementsOfRefMatrix_swigregister(FEmTool_ElementsOfRefMatrix)

class FEmTool_SparseMatrix(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ChangeValue(self, *args) -> "Standard_Real &":
        """
        :param I:
        	:type I: int
        	:param J:
        	:type J: int
        	:rtype: float
        """
        return _FEmTool.FEmTool_SparseMatrix_ChangeValue(self, *args)


    def ColNumber(self, *args) -> "Standard_Integer":
        """
        * returns the column range of the matrix.
        	:rtype: int
        """
        return _FEmTool.FEmTool_SparseMatrix_ColNumber(self, *args)


    def Decompose(self, *args) -> "Standard_Boolean":
        """
        * To make a Factorization of <self>
        	:rtype: bool
        """
        return _FEmTool.FEmTool_SparseMatrix_Decompose(self, *args)


    def Init(self, *args) -> "void":
        """
        :param Value:
        	:type Value: float
        	:rtype: void
        """
        return _FEmTool.FEmTool_SparseMatrix_Init(self, *args)


    def Multiplied(self, *args) -> "void":
        """
        * returns the product of a SparseMatrix by a vector. An exception is raised if the dimensions are different
        	:param X:
        	:type X: math_Vector
        	:param MX:
        	:type MX: math_Vector
        	:rtype: void
        """
        return _FEmTool.FEmTool_SparseMatrix_Multiplied(self, *args)


    def Prepare(self, *args) -> "Standard_Boolean":
        """
        * Make Preparation to iterative solve
        	:rtype: bool
        """
        return _FEmTool.FEmTool_SparseMatrix_Prepare(self, *args)


    def RowNumber(self, *args) -> "Standard_Integer":
        """
        * returns the row range of a matrix.
        	:rtype: int
        """
        return _FEmTool.FEmTool_SparseMatrix_RowNumber(self, *args)


    def Solve(self, *args) -> "void":
        """
        * Direct Solve of AX = B
        	:param B:
        	:type B: math_Vector
        	:param X:
        	:type X: math_Vector
        	:rtype: void
        * Iterative solve of AX = B
        	:param B:
        	:type B: math_Vector
        	:param Init:
        	:type Init: math_Vector
        	:param X:
        	:type X: math_Vector
        	:param Residual:
        	:type Residual: math_Vector
        	:param Tolerance: default value is 1.0e-8
        	:type Tolerance: float
        	:param NbIterations: default value is 50
        	:type NbIterations: int
        	:rtype: void
        """
        return _FEmTool.FEmTool_SparseMatrix_Solve(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_SparseMatrix_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_SparseMatrix
FEmTool_SparseMatrix.ChangeValue = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_ChangeValue, None, FEmTool_SparseMatrix)
FEmTool_SparseMatrix.ColNumber = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_ColNumber, None, FEmTool_SparseMatrix)
FEmTool_SparseMatrix.Decompose = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_Decompose, None, FEmTool_SparseMatrix)
FEmTool_SparseMatrix.Init = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_Init, None, FEmTool_SparseMatrix)
FEmTool_SparseMatrix.Multiplied = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_Multiplied, None, FEmTool_SparseMatrix)
FEmTool_SparseMatrix.Prepare = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_Prepare, None, FEmTool_SparseMatrix)
FEmTool_SparseMatrix.RowNumber = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_RowNumber, None, FEmTool_SparseMatrix)
FEmTool_SparseMatrix.Solve = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_Solve, None, FEmTool_SparseMatrix)
FEmTool_SparseMatrix_swigregister = _FEmTool.FEmTool_SparseMatrix_swigregister
FEmTool_SparseMatrix_swigregister(FEmTool_SparseMatrix)

class FEmTool_LinearFlexion(FEmTool_ElementaryCriterion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param WorkDegree:
        	:type WorkDegree: int
        	:param ConstraintOrder:
        	:type ConstraintOrder: GeomAbs_Shape
        	:rtype: None
        """
        _FEmTool.FEmTool_LinearFlexion_swiginit(self, _FEmTool.new_FEmTool_LinearFlexion(*args))


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_LinearFlexion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_LinearFlexion
FEmTool_LinearFlexion_swigregister = _FEmTool.FEmTool_LinearFlexion_swigregister
FEmTool_LinearFlexion_swigregister(FEmTool_LinearFlexion)

class FEmTool_LinearJerk(FEmTool_ElementaryCriterion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param WorkDegree:
        	:type WorkDegree: int
        	:param ConstraintOrder:
        	:type ConstraintOrder: GeomAbs_Shape
        	:rtype: None
        """
        _FEmTool.FEmTool_LinearJerk_swiginit(self, _FEmTool.new_FEmTool_LinearJerk(*args))


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_LinearJerk_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_LinearJerk
FEmTool_LinearJerk_swigregister = _FEmTool.FEmTool_LinearJerk_swigregister
FEmTool_LinearJerk_swigregister(FEmTool_LinearJerk)

class FEmTool_LinearTension(FEmTool_ElementaryCriterion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param WorkDegree:
        	:type WorkDegree: int
        	:param ConstraintOrder:
        	:type ConstraintOrder: GeomAbs_Shape
        	:rtype: None
        """
        _FEmTool.FEmTool_LinearTension_swiginit(self, _FEmTool.new_FEmTool_LinearTension(*args))


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_LinearTension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_LinearTension
FEmTool_LinearTension_swigregister = _FEmTool.FEmTool_LinearTension_swigregister
FEmTool_LinearTension_swigregister(FEmTool_LinearTension)

class FEmTool_ProfileMatrix(FEmTool_SparseMatrix):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetChangeValue(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "Standard_Real":
        """GetChangeValue(FEmTool_ProfileMatrix self, Standard_Integer const I, Standard_Integer const J) -> Standard_Real"""
        return _FEmTool.FEmTool_ProfileMatrix_GetChangeValue(self, I, J)


    def SetChangeValue(self, I: 'Standard_Integer const', J: 'Standard_Integer const', value: 'Standard_Real') -> "void":
        """SetChangeValue(FEmTool_ProfileMatrix self, Standard_Integer const I, Standard_Integer const J, Standard_Real value)"""
        return _FEmTool.FEmTool_ProfileMatrix_SetChangeValue(self, I, J, value)


    def __init__(self, *args):
        """
        :param FirstIndexes:
        	:type FirstIndexes: TColStd_Array1OfInteger
        	:rtype: None
        """
        _FEmTool.FEmTool_ProfileMatrix_swiginit(self, _FEmTool.new_FEmTool_ProfileMatrix(*args))

    def IsInProfile(self, *args) -> "Standard_Boolean":
        """
        :param i:
        	:type i: int
        	:param j:
        	:type j: int
        	:rtype: bool
        """
        return _FEmTool.FEmTool_ProfileMatrix_IsInProfile(self, *args)


    def OutM(self, *args) -> "void":
        """:rtype: None"""
        return _FEmTool.FEmTool_ProfileMatrix_OutM(self, *args)


    def OutS(self, *args) -> "void":
        """:rtype: None"""
        return _FEmTool.FEmTool_ProfileMatrix_OutS(self, *args)


    def Solve(self, *args) -> "void":
        """
        * Direct Solve of AX = B
        	:param B:
        	:type B: math_Vector
        	:param X:
        	:type X: math_Vector
        	:rtype: None
        * Iterative solve of AX = B
        	:param B:
        	:type B: math_Vector
        	:param Init:
        	:type Init: math_Vector
        	:param X:
        	:type X: math_Vector
        	:param Residual:
        	:type Residual: math_Vector
        	:param Tolerance: default value is 1.0e-8
        	:type Tolerance: float
        	:param NbIterations: default value is 50
        	:type NbIterations: int
        	:rtype: None
        """
        return _FEmTool.FEmTool_ProfileMatrix_Solve(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_ProfileMatrix_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_ProfileMatrix
FEmTool_ProfileMatrix.GetChangeValue = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix_GetChangeValue, None, FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix.SetChangeValue = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix_SetChangeValue, None, FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix.IsInProfile = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix_IsInProfile, None, FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix.OutM = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix_OutM, None, FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix.OutS = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix_OutS, None, FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix.Solve = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix_Solve, None, FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix_swigregister = _FEmTool.FEmTool_ProfileMatrix_swigregister
FEmTool_ProfileMatrix_swigregister(FEmTool_ProfileMatrix)

class FEmTool_HAssemblyTable(FEmTool_AssemblyTable, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FEmTool.FEmTool_HAssemblyTable_swiginit(self, _FEmTool.new_FEmTool_HAssemblyTable(*args))


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_HAssemblyTable_DownCast(t)

    __swig_destroy__ = _FEmTool.delete_FEmTool_HAssemblyTable
FEmTool_HAssemblyTable.Array2 = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_Array2, None, FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.ChangeArray2 = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_ChangeArray2, None, FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable_swigregister = _FEmTool.FEmTool_HAssemblyTable_swigregister
FEmTool_HAssemblyTable_swigregister(FEmTool_HAssemblyTable)



