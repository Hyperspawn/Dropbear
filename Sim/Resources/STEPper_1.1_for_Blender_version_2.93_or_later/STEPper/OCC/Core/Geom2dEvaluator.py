# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Geom2dEvaluator module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geom2devaluator.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Geom2dEvaluator.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Geom2dEvaluator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Geom2dEvaluator')
    _Geom2dEvaluator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dEvaluator', [dirname(__file__)])
        except ImportError:
            import _Geom2dEvaluator
            return _Geom2dEvaluator
        try:
            _mod = imp.load_module('_Geom2dEvaluator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Geom2dEvaluator = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dEvaluator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dEvaluator.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Geom2dEvaluator.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Geom2dEvaluator.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Geom2dEvaluator.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Geom2dEvaluator.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Geom2dEvaluator.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Geom2dEvaluator.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Geom2dEvaluator.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Geom2dEvaluator.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Geom2dEvaluator.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Geom2dEvaluator.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Geom2dEvaluator.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Geom2dEvaluator.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Geom2dEvaluator.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Geom2dEvaluator.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Geom2dEvaluator.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Geom2dEvaluator.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Geom2dEvaluator.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Geom2dEvaluator.process_exception(error, method_name, class_name)
process_exception = _Geom2dEvaluator.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.Geom2d
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom2dAdaptor
import OCC.Core.Adaptor2d

def Handle_Geom2dEvaluator_Curve_Create() -> "opencascade::handle< Geom2dEvaluator_Curve >":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_Create()
Handle_Geom2dEvaluator_Curve_Create = _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_Create

def Handle_Geom2dEvaluator_Curve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Geom2dEvaluator_Curve >":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_DownCast(t)
Handle_Geom2dEvaluator_Curve_DownCast = _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_DownCast

def Handle_Geom2dEvaluator_Curve_IsNull(t: 'opencascade::handle< Geom2dEvaluator_Curve > const &') -> "bool":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_IsNull(t)
Handle_Geom2dEvaluator_Curve_IsNull = _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_IsNull

def Handle_Geom2dEvaluator_OffsetCurve_Create() -> "opencascade::handle< Geom2dEvaluator_OffsetCurve >":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_Create()
Handle_Geom2dEvaluator_OffsetCurve_Create = _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_Create

def Handle_Geom2dEvaluator_OffsetCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Geom2dEvaluator_OffsetCurve >":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_DownCast(t)
Handle_Geom2dEvaluator_OffsetCurve_DownCast = _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_DownCast

def Handle_Geom2dEvaluator_OffsetCurve_IsNull(t: 'opencascade::handle< Geom2dEvaluator_OffsetCurve > const &') -> "bool":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_IsNull(t)
Handle_Geom2dEvaluator_OffsetCurve_IsNull = _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_IsNull
class Geom2dEvaluator_Curve(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        * Value of 2D curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt2d
        	:rtype: None
        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        * Value and first derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt2d
        	:param theD1:
        	:type theD1: gp_Vec2d
        	:rtype: None
        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        * Value, first and second derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt2d
        	:param theD1:
        	:type theD1: gp_Vec2d
        	:param theD2:
        	:type theD2: gp_Vec2d
        	:rtype: None
        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        * Value, first, second and third derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt2d
        	:param theD1:
        	:type theD1: gp_Vec2d
        	:param theD2:
        	:type theD2: gp_Vec2d
        	:param theD3:
        	:type theD3: gp_Vec2d
        	:rtype: None
        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D3(self, *args)


    def DN(self, *args) -> "gp_Vec2d":
        """
        * Calculates N-th derivatives of curve, where N = theDerU. Raises if N < 1
        	:param theU:
        	:type theU: float
        	:param theDerU:
        	:type theDerU: int
        	:rtype: gp_Vec2d
        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_DN(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Geom2dEvaluator_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dEvaluator.delete_Geom2dEvaluator_Curve
Geom2dEvaluator_Curve.D0 = new_instancemethod(_Geom2dEvaluator.Geom2dEvaluator_Curve_D0, None, Geom2dEvaluator_Curve)
Geom2dEvaluator_Curve.D1 = new_instancemethod(_Geom2dEvaluator.Geom2dEvaluator_Curve_D1, None, Geom2dEvaluator_Curve)
Geom2dEvaluator_Curve.D2 = new_instancemethod(_Geom2dEvaluator.Geom2dEvaluator_Curve_D2, None, Geom2dEvaluator_Curve)
Geom2dEvaluator_Curve.D3 = new_instancemethod(_Geom2dEvaluator.Geom2dEvaluator_Curve_D3, None, Geom2dEvaluator_Curve)
Geom2dEvaluator_Curve.DN = new_instancemethod(_Geom2dEvaluator.Geom2dEvaluator_Curve_DN, None, Geom2dEvaluator_Curve)
Geom2dEvaluator_Curve_swigregister = _Geom2dEvaluator.Geom2dEvaluator_Curve_swigregister
Geom2dEvaluator_Curve_swigregister(Geom2dEvaluator_Curve)

class Geom2dEvaluator_OffsetCurve(Geom2dEvaluator_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        * Value of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt2d
        	:rtype: None
        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        * Value and first derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt2d
        	:param theD1:
        	:type theD1: gp_Vec2d
        	:rtype: None
        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        * Value, first and second derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt2d
        	:param theD1:
        	:type theD1: gp_Vec2d
        	:param theD2:
        	:type theD2: gp_Vec2d
        	:rtype: None
        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        * Value, first, second and third derivatives of curve
        	:param theU:
        	:type theU: float
        	:param theValue:
        	:type theValue: gp_Pnt2d
        	:param theD1:
        	:type theD1: gp_Vec2d
        	:param theD2:
        	:type theD2: gp_Vec2d
        	:param theD3:
        	:type theD3: gp_Vec2d
        	:rtype: None
        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D3(self, *args)


    def DN(self, *args) -> "gp_Vec2d":
        """
        * Calculates N-th derivatives of curve, where N = theDeriv. Raises if N < 1
        	:param theU:
        	:type theU: float
        	:param theDeriv:
        	:type theDeriv: int
        	:rtype: gp_Vec2d
        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_DN(self, *args)


    def __init__(self, *args):
        """
        * Initialize evaluator by curve
        	:param theBase:
        	:type theBase: Geom2d_Curve
        	:param theOffset:
        	:type theOffset: float
        	:rtype: None
        * Initialize evaluator by curve adaptor
        	:param theBase:
        	:type theBase: Geom2dAdaptor_HCurve
        	:param theOffset:
        	:type theOffset: float
        	:rtype: None
        """
        _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_swiginit(self, _Geom2dEvaluator.new_Geom2dEvaluator_OffsetCurve(*args))

    def SetOffsetValue(self, *args) -> "void":
        """
        * Change the offset value
        	:param theOffset:
        	:type theOffset: float
        	:rtype: None
        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_SetOffsetValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Geom2dEvaluator_OffsetCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dEvaluator.delete_Geom2dEvaluator_OffsetCurve
Geom2dEvaluator_OffsetCurve.D0 = new_instancemethod(_Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D0, None, Geom2dEvaluator_OffsetCurve)
Geom2dEvaluator_OffsetCurve.D1 = new_instancemethod(_Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D1, None, Geom2dEvaluator_OffsetCurve)
Geom2dEvaluator_OffsetCurve.D2 = new_instancemethod(_Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D2, None, Geom2dEvaluator_OffsetCurve)
Geom2dEvaluator_OffsetCurve.D3 = new_instancemethod(_Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_D3, None, Geom2dEvaluator_OffsetCurve)
Geom2dEvaluator_OffsetCurve.DN = new_instancemethod(_Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_DN, None, Geom2dEvaluator_OffsetCurve)
Geom2dEvaluator_OffsetCurve.SetOffsetValue = new_instancemethod(_Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_SetOffsetValue, None, Geom2dEvaluator_OffsetCurve)
Geom2dEvaluator_OffsetCurve_swigregister = _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_swigregister
Geom2dEvaluator_OffsetCurve_swigregister(Geom2dEvaluator_OffsetCurve)



