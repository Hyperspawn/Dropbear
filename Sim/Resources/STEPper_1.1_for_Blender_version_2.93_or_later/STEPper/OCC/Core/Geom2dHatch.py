# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Geom2dHatch module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geom2dhatch.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Geom2dHatch.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Geom2dHatch')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Geom2dHatch')
    _Geom2dHatch = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dHatch', [dirname(__file__)])
        except ImportError:
            import _Geom2dHatch
            return _Geom2dHatch
        try:
            _mod = imp.load_module('_Geom2dHatch', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Geom2dHatch = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dHatch
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dHatch.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Geom2dHatch.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Geom2dHatch.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Geom2dHatch.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Geom2dHatch.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Geom2dHatch.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Geom2dHatch.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Geom2dHatch.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Geom2dHatch.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Geom2dHatch.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Geom2dHatch.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Geom2dHatch.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Geom2dHatch.process_exception(error, method_name, class_name)
process_exception = _Geom2dHatch.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom2dAdaptor
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.IntRes2d
import OCC.Core.TopAbs
import OCC.Core.HatchGen
import OCC.Core.Geom2dInt
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.IntCurve
import OCC.Core.Extrema
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAdaptor
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
class Geom2dHatch_MapOfElements(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Geom2dHatch.Geom2dHatch_MapOfElements_swiginit(self, _Geom2dHatch.new_Geom2dHatch_MapOfElements(*args))
    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_MapOfElements
Geom2dHatch_MapOfElements.begin = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_begin, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.end = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_end, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.cbegin = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_cbegin, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.cend = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_cend, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.Exchange = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_Exchange, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.Assign = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_Assign, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.Set = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_Set, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.ReSize = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_ReSize, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.Bind = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_Bind, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.Bound = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_Bound, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.IsBound = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_IsBound, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.UnBind = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_UnBind, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.Seek = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_Seek, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.Find = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_Find, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.ChangeSeek = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_ChangeSeek, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.ChangeFind = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_ChangeFind, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.__call__ = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements___call__, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.Clear = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_Clear, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.Size = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_Size, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements.Keys = new_instancemethod(_Geom2dHatch.Geom2dHatch_MapOfElements_Keys, None, Geom2dHatch_MapOfElements)
Geom2dHatch_MapOfElements_swigregister = _Geom2dHatch.Geom2dHatch_MapOfElements_swigregister
Geom2dHatch_MapOfElements_swigregister(Geom2dHatch_MapOfElements)

class Geom2dHatch_Hatchings(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Geom2dHatch.Geom2dHatch_Hatchings_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Hatchings(*args))
    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Hatchings
Geom2dHatch_Hatchings.begin = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_begin, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.end = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_end, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.cbegin = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_cbegin, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.cend = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_cend, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.Exchange = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_Exchange, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.Assign = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_Assign, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.Set = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_Set, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.ReSize = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_ReSize, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.Bind = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_Bind, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.Bound = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_Bound, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.IsBound = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_IsBound, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.UnBind = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_UnBind, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.Seek = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_Seek, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.Find = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_Find, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.ChangeSeek = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_ChangeSeek, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.ChangeFind = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_ChangeFind, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.__call__ = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings___call__, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.Clear = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_Clear, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.Size = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_Size, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings.Keys = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatchings_Keys, None, Geom2dHatch_Hatchings)
Geom2dHatch_Hatchings_swigregister = _Geom2dHatch.Geom2dHatch_Hatchings_swigregister
Geom2dHatch_Hatchings_swigregister(Geom2dHatch_Hatchings)

class Geom2dHatch_Classifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Edge(self, *args) -> "Geom2dAdaptor_Curve const &":
        """
        * Returns the Edge used to determine the classification. When the State is ON this is the Edge containing the point.
        	:rtype: Geom2dAdaptor_Curve
        """
        return _Geom2dHatch.Geom2dHatch_Classifier_Edge(self, *args)


    def EdgeParameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on Edge() used to determine the classification.
        	:rtype: float
        """
        return _Geom2dHatch.Geom2dHatch_Classifier_EdgeParameter(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor, undefined algorithm.
        	:rtype: None
        * Creates an algorithm to classify the Point P with Tolerance <T> on the face described by <F>.
        	:param F:
        	:type F: Geom2dHatch_Elements
        	:param P:
        	:type P: gp_Pnt2d
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Classifier_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Classifier(*args))

    def NoWires(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the face contains no wire. The state is IN.
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Classifier_NoWires(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Classify the Point P with Tolerance <T> on the face described by <F>.
        	:param F:
        	:type F: Geom2dHatch_Elements
        	:param P:
        	:type P: gp_Pnt2d
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Classifier_Perform(self, *args)


    def Position(self, *args) -> "IntRes2d_Position":
        """
        * Returns the position of the point on the edge returned by Edge.
        	:rtype: IntRes2d_Position
        """
        return _Geom2dHatch.Geom2dHatch_Classifier_Position(self, *args)


    def Rejected(self, *args) -> "Standard_Boolean":
        """
        * Returns True when the state was computed by a rejection. The state is OUT.
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Classifier_Rejected(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        * Returns the result of the classification.
        	:rtype: TopAbs_State
        """
        return _Geom2dHatch.Geom2dHatch_Classifier_State(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Classifier
Geom2dHatch_Classifier.Edge = new_instancemethod(_Geom2dHatch.Geom2dHatch_Classifier_Edge, None, Geom2dHatch_Classifier)
Geom2dHatch_Classifier.EdgeParameter = new_instancemethod(_Geom2dHatch.Geom2dHatch_Classifier_EdgeParameter, None, Geom2dHatch_Classifier)
Geom2dHatch_Classifier.NoWires = new_instancemethod(_Geom2dHatch.Geom2dHatch_Classifier_NoWires, None, Geom2dHatch_Classifier)
Geom2dHatch_Classifier.Perform = new_instancemethod(_Geom2dHatch.Geom2dHatch_Classifier_Perform, None, Geom2dHatch_Classifier)
Geom2dHatch_Classifier.Position = new_instancemethod(_Geom2dHatch.Geom2dHatch_Classifier_Position, None, Geom2dHatch_Classifier)
Geom2dHatch_Classifier.Rejected = new_instancemethod(_Geom2dHatch.Geom2dHatch_Classifier_Rejected, None, Geom2dHatch_Classifier)
Geom2dHatch_Classifier.State = new_instancemethod(_Geom2dHatch.Geom2dHatch_Classifier_State, None, Geom2dHatch_Classifier)
Geom2dHatch_Classifier_swigregister = _Geom2dHatch.Geom2dHatch_Classifier_swigregister
Geom2dHatch_Classifier_swigregister(Geom2dHatch_Classifier)

class Geom2dHatch_Element(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeCurve(self, *args) -> "Geom2dAdaptor_Curve &":
        """
        * Returns the curve associated to the element.
        	:rtype: Geom2dAdaptor_Curve
        """
        return _Geom2dHatch.Geom2dHatch_Element_ChangeCurve(self, *args)


    def Curve(self, *args) -> "Geom2dAdaptor_Curve const &":
        """
        * Returns the curve associated to the element.
        	:rtype: Geom2dAdaptor_Curve
        """
        return _Geom2dHatch.Geom2dHatch_Element_Curve(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * Magic constructor.
        	:param Other:
        	:type Other: Geom2dHatch_Element
        	:rtype: None
        * Creates an element.
        	:param Curve:
        	:type Curve: Geom2dAdaptor_Curve
        	:param Orientation: default value is TopAbs_FORWARD
        	:type Orientation: TopAbs_Orientation
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Element_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Element(*args))

    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        * Sets the orientation of the element.
        	:param Orientation:
        	:type Orientation: TopAbs_Orientation
        	:rtype: None
        * Returns the orientation of the element.
        	:rtype: TopAbs_Orientation
        """
        return _Geom2dHatch.Geom2dHatch_Element_Orientation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Element
Geom2dHatch_Element.ChangeCurve = new_instancemethod(_Geom2dHatch.Geom2dHatch_Element_ChangeCurve, None, Geom2dHatch_Element)
Geom2dHatch_Element.Curve = new_instancemethod(_Geom2dHatch.Geom2dHatch_Element_Curve, None, Geom2dHatch_Element)
Geom2dHatch_Element.Orientation = new_instancemethod(_Geom2dHatch.Geom2dHatch_Element_Orientation, None, Geom2dHatch_Element)
Geom2dHatch_Element_swigregister = _Geom2dHatch.Geom2dHatch_Element_swigregister
Geom2dHatch_Element_swigregister(Geom2dHatch_Element)

class Geom2dHatch_Elements(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        	:type K: int
        	:param I:
        	:type I: Geom2dHatch_Element
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Elements_Bind(self, *args)


    def ChangeFind(self, *args) -> "Geom2dHatch_Element &":
        """
        :param K:
        	:type K: int
        	:rtype: Geom2dHatch_Element
        """
        return _Geom2dHatch.Geom2dHatch_Elements_ChangeFind(self, *args)


    def CheckPoint(self, *args) -> "Standard_Boolean":
        """
        :param P:
        	:type P: gp_Pnt2d
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Elements_CheckPoint(self, *args)


    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _Geom2dHatch.Geom2dHatch_Elements_Clear(self, *args)


    def CurrentEdge(self, *args) -> "void":
        """
        :param E:
        	:type E: Geom2dAdaptor_Curve
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Elements_CurrentEdge(self, *args)


    def Find(self, *args) -> "Geom2dHatch_Element const &":
        """
        :param K:
        	:type K: int
        	:rtype: Geom2dHatch_Element
        """
        return _Geom2dHatch.Geom2dHatch_Elements_Find(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Other:
        	:type Other: Geom2dHatch_Elements
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Elements_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Elements(*args))

    def InitEdges(self, *args) -> "void":
        """:rtype: None"""
        return _Geom2dHatch.Geom2dHatch_Elements_InitEdges(self, *args)


    def InitWires(self, *args) -> "void":
        """:rtype: None"""
        return _Geom2dHatch.Geom2dHatch_Elements_InitWires(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        	:type K: int
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Elements_IsBound(self, *args)


    def MoreEdges(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Geom2dHatch.Geom2dHatch_Elements_MoreEdges(self, *args)


    def MoreWires(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Geom2dHatch.Geom2dHatch_Elements_MoreWires(self, *args)


    def NextEdge(self, *args) -> "void":
        """:rtype: None"""
        return _Geom2dHatch.Geom2dHatch_Elements_NextEdge(self, *args)


    def NextWire(self, *args) -> "void":
        """:rtype: None"""
        return _Geom2dHatch.Geom2dHatch_Elements_NextWire(self, *args)


    def OtherSegment(self, *args) -> "Standard_Boolean":
        """
        :param P:
        	:type P: gp_Pnt2d
        	:param L:
        	:type L: gp_Lin2d
        	:param Par:
        	:type Par: float
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Elements_OtherSegment(self, *args)


    def Reject(self, *args) -> "Standard_Boolean":
        """
        :param P:
        	:type P: gp_Pnt2d
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Elements_Reject(self, *args)


    def RejectEdge(self, *args) -> "Standard_Boolean":
        """
        :param L:
        	:type L: gp_Lin2d
        	:param Par:
        	:type Par: float
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Elements_RejectEdge(self, *args)


    def RejectWire(self, *args) -> "Standard_Boolean":
        """
        :param L:
        	:type L: gp_Lin2d
        	:param Par:
        	:type Par: float
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Elements_RejectWire(self, *args)


    def Segment(self, *args) -> "Standard_Boolean":
        """
        :param P:
        	:type P: gp_Pnt2d
        	:param L:
        	:type L: gp_Lin2d
        	:param Par:
        	:type Par: float
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Elements_Segment(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        	:type K: int
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Elements_UnBind(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Elements
Geom2dHatch_Elements.Bind = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_Bind, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.ChangeFind = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_ChangeFind, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.CheckPoint = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_CheckPoint, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.Clear = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_Clear, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.CurrentEdge = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_CurrentEdge, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.Find = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_Find, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.InitEdges = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_InitEdges, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.InitWires = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_InitWires, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.IsBound = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_IsBound, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.MoreEdges = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_MoreEdges, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.MoreWires = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_MoreWires, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.NextEdge = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_NextEdge, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.NextWire = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_NextWire, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.OtherSegment = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_OtherSegment, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.Reject = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_Reject, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.RejectEdge = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_RejectEdge, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.RejectWire = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_RejectWire, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.Segment = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_Segment, None, Geom2dHatch_Elements)
Geom2dHatch_Elements.UnBind = new_instancemethod(_Geom2dHatch.Geom2dHatch_Elements_UnBind, None, Geom2dHatch_Elements)
Geom2dHatch_Elements_swigregister = _Geom2dHatch.Geom2dHatch_Elements_swigregister
Geom2dHatch_Elements_swigregister(Geom2dHatch_Elements)

class Geom2dHatch_FClass2dOfClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ClosestIntersection(self, *args) -> "Standard_Integer":
        """
        * Returns 0 if the last compared edge had no relevant intersection. Else returns the index of this intersection in the last intersection algorithm.
        	:rtype: int
        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_ClosestIntersection(self, *args)


    def Compare(self, *args) -> "void":
        """
        * Updates the classification process with the edge <E> from the boundary.
        	:param E:
        	:type E: Geom2dAdaptor_Curve
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Compare(self, *args)


    def __init__(self, *args):
        """
        * Creates an undefined classifier.
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_swiginit(self, _Geom2dHatch.new_Geom2dHatch_FClass2dOfClassifier(*args))

    def Intersector(self, *args) -> "Geom2dHatch_Intersector &":
        """
        * Returns the intersecting algorithm.
        	:rtype: Geom2dHatch_Intersector
        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Intersector(self, *args)


    def IsHeadOrEnd(self, *args) -> "Standard_Boolean":
        """
        * Returns the Standard_True if the closest intersection point represents head or end of the edge. Returns Standard_False otherwise.
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_IsHeadOrEnd(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the current value of the parameter.
        	:rtype: float
        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Parameter(self, *args)


    def Reset(self, *args) -> "void":
        """
        * Starts a classification process. The point to classify is the origin of the line <L>. <P> is the original length of the segment on <L> used to compute intersections. <Tol> is the tolerance attached to the line segment in intersections.
        	:param L:
        	:type L: gp_Lin2d
        	:param P:
        	:type P: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Reset(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        * Returns the current state of the point.
        	:rtype: TopAbs_State
        """
        return _Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_State(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_FClass2dOfClassifier
Geom2dHatch_FClass2dOfClassifier.ClosestIntersection = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_ClosestIntersection, None, Geom2dHatch_FClass2dOfClassifier)
Geom2dHatch_FClass2dOfClassifier.Compare = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Compare, None, Geom2dHatch_FClass2dOfClassifier)
Geom2dHatch_FClass2dOfClassifier.Intersector = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Intersector, None, Geom2dHatch_FClass2dOfClassifier)
Geom2dHatch_FClass2dOfClassifier.IsHeadOrEnd = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_IsHeadOrEnd, None, Geom2dHatch_FClass2dOfClassifier)
Geom2dHatch_FClass2dOfClassifier.Parameter = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Parameter, None, Geom2dHatch_FClass2dOfClassifier)
Geom2dHatch_FClass2dOfClassifier.Reset = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Reset, None, Geom2dHatch_FClass2dOfClassifier)
Geom2dHatch_FClass2dOfClassifier.State = new_instancemethod(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_State, None, Geom2dHatch_FClass2dOfClassifier)
Geom2dHatch_FClass2dOfClassifier_swigregister = _Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_swigregister
Geom2dHatch_FClass2dOfClassifier_swigregister(Geom2dHatch_FClass2dOfClassifier)

class Geom2dHatch_Hatcher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddElement(self, *args) -> "Standard_Integer":
        """
        * Adds an element to the hatcher and returns its index.
        	:param Curve:
        	:type Curve: Geom2dAdaptor_Curve
        	:param Orientation: default value is TopAbs_FORWARD
        	:type Orientation: TopAbs_Orientation
        	:rtype: int
        * Adds an element to the hatcher and returns its index.
        	:param Curve:
        	:type Curve: Geom2d_Curve
        	:param Orientation: default value is TopAbs_FORWARD
        	:type Orientation: TopAbs_Orientation
        	:rtype: int
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_AddElement(self, *args)


    def AddHatching(self, *args) -> "Standard_Integer":
        """
        * Adds a hatching to the hatcher and returns its index.
        	:param Curve:
        	:type Curve: Geom2dAdaptor_Curve
        	:rtype: int
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_AddHatching(self, *args)


    def ChangeIntersector(self, *args) -> "Geom2dHatch_Intersector &":
        """
        * Returns the associated intersector.
        	:rtype: Geom2dHatch_Intersector
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_ChangeIntersector(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Removes all the hatchings and all the elements.
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Clear(self, *args)


    def ClrElements(self, *args) -> "void":
        """
        * Removes all the elements from the hatcher.
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_ClrElements(self, *args)


    def ClrHatchings(self, *args) -> "void":
        """
        * Removes all the hatchings from the hatcher.
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_ClrHatchings(self, *args)


    def ComputeDomains(self, *args) -> "void":
        """
        * Computes the domains of all the hatchings.
        	:rtype: None
        * Computes the domains of the IndH-th hatching.
        	:param IndH:
        	:type IndH: int
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_ComputeDomains(self, *args)


    def Confusion2d(self, *args) -> "Standard_Real":
        """
        * Sets the confusion tolerance.
        	:param Confusion:
        	:type Confusion: float
        	:rtype: None
        * Returns the 2d confusion tolerance, i.e. the value under which two points are considered identical in the parametric space of the hatching.
        	:rtype: float
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Confusion2d(self, *args)


    def Confusion3d(self, *args) -> "Standard_Real":
        """
        * Sets the confusion tolerance.
        	:param Confusion:
        	:type Confusion: float
        	:rtype: None
        * Returns the 3d confusion tolerance, i.e. the value under which two points are considered identical in the 3d space of the hatching.
        	:rtype: float
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Confusion3d(self, *args)


    def Domain(self, *args) -> "HatchGen_Domain const &":
        """
        * Returns the IDom-th domain of the IndH-th hatching.
        	:param IndH:
        	:type IndH: int
        	:param IDom:
        	:type IDom: int
        	:rtype: HatchGen_Domain
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Domain(self, *args)


    def Dump(self, *args) -> "void":
        """
        * Dump the hatcher.
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Dump(self, *args)


    def ElementCurve(self, *args) -> "Geom2dAdaptor_Curve const &":
        """
        * Returns the curve associated to the IndE-th element.
        	:param IndE:
        	:type IndE: int
        	:rtype: Geom2dAdaptor_Curve
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_ElementCurve(self, *args)


    def __init__(self, *args):
        """
        * Returns an empty hatcher.
        	:param Intersector:
        	:type Intersector: Geom2dHatch_Intersector
        	:param Confusion2d:
        	:type Confusion2d: float
        	:param Confusion3d:
        	:type Confusion3d: float
        	:param KeepPnt: default value is Standard_False
        	:type KeepPnt: bool
        	:param KeepSeg: default value is Standard_False
        	:type KeepSeg: bool
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Hatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Hatcher(*args))

    def HatchingCurve(self, *args) -> "Geom2dAdaptor_Curve const &":
        """
        * Returns the curve associated to the IndH-th hatching.
        	:param IndH:
        	:type IndH: int
        	:rtype: Geom2dAdaptor_Curve
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_HatchingCurve(self, *args)


    def Intersector(self, *args) -> "Geom2dHatch_Intersector const &":
        """
        * Sets the associated intersector.
        	:param Intersector:
        	:type Intersector: Geom2dHatch_Intersector
        	:rtype: None
        * Returns the associated intersector.
        	:rtype: Geom2dHatch_Intersector
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Intersector(self, *args)


    def KeepPoints(self, *args) -> "Standard_Boolean":
        """
        * Sets the above flag.
        	:param Keep:
        	:type Keep: bool
        	:rtype: None
        * Returns the flag about the points consideration.
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_KeepPoints(self, *args)


    def KeepSegments(self, *args) -> "Standard_Boolean":
        """
        * Sets the above flag.
        	:param Keep:
        	:type Keep: bool
        	:rtype: None
        * Returns the flag about the segments consideration.
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_KeepSegments(self, *args)


    def NbDomains(self, *args) -> "Standard_Integer":
        """
        * Returns the number of domains of the IndH-th hatching. Only ONE 'INFINITE' domain means that the hatching is fully included in the contour defined by the elements.
        	:param IndH:
        	:type IndH: int
        	:rtype: int
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_NbDomains(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of intersection points of the IndH-th hatching.
        	:param IndH:
        	:type IndH: int
        	:rtype: int
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_NbPoints(self, *args)


    def Point(self, *args) -> "HatchGen_PointOnHatching const &":
        """
        * Returns the IndP-th intersection point of the IndH-th hatching.
        	:param IndH:
        	:type IndH: int
        	:param IndP:
        	:type IndP: int
        	:rtype: HatchGen_PointOnHatching
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Point(self, *args)


    def RemElement(self, *args) -> "void":
        """
        * Removes the IndE-th element from the hatcher.
        	:param IndE:
        	:type IndE: int
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_RemElement(self, *args)


    def RemHatching(self, *args) -> "void":
        """
        * Removes the IndH-th hatching from the hatcher.
        	:param IndH:
        	:type IndH: int
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_RemHatching(self, *args)


    def Status(self, *args) -> "HatchGen_ErrorStatus":
        """
        * Returns the status about the IndH-th hatching.
        	:param IndH:
        	:type IndH: int
        	:rtype: HatchGen_ErrorStatus
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Status(self, *args)


    def Trim(self, *args) -> "void":
        """
        * Trims all the hatchings of the hatcher by all the elements of the hatcher.
        	:rtype: None
        * Adds a hatching to the hatcher and trims it by the elements already given and returns its index.
        	:param Curve:
        	:type Curve: Geom2dAdaptor_Curve
        	:rtype: int
        * Trims the IndH-th hatching by the elements already given.
        	:param IndH:
        	:type IndH: int
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_Trim(self, *args)


    def TrimDone(self, *args) -> "Standard_Boolean":
        """
        * Returns the fact that the intersections were computed for the IndH-th hatching.
        	:param IndH:
        	:type IndH: int
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_TrimDone(self, *args)


    def TrimFailed(self, *args) -> "Standard_Boolean":
        """
        * Returns the fact that the intersections failed for the IndH-th hatching.
        	:param IndH:
        	:type IndH: int
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Hatcher_TrimFailed(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Hatcher
Geom2dHatch_Hatcher.AddElement = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_AddElement, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.AddHatching = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_AddHatching, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.ChangeIntersector = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_ChangeIntersector, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Clear = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Clear, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.ClrElements = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_ClrElements, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.ClrHatchings = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_ClrHatchings, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.ComputeDomains = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_ComputeDomains, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Confusion2d = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Confusion2d, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Confusion3d = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Confusion3d, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Domain = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Domain, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Dump = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Dump, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.ElementCurve = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_ElementCurve, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.HatchingCurve = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_HatchingCurve, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Intersector = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Intersector, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.KeepPoints = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_KeepPoints, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.KeepSegments = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_KeepSegments, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.NbDomains = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_NbDomains, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.NbPoints = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_NbPoints, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Point = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Point, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.RemElement = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_RemElement, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.RemHatching = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_RemHatching, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Status = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Status, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.Trim = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_Trim, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.TrimDone = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_TrimDone, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher.TrimFailed = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatcher_TrimFailed, None, Geom2dHatch_Hatcher)
Geom2dHatch_Hatcher_swigregister = _Geom2dHatch.Geom2dHatch_Hatcher_swigregister
Geom2dHatch_Hatcher_swigregister(Geom2dHatch_Hatcher)

class Geom2dHatch_Hatching(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDomain(self, *args) -> "void":
        """
        * Adds a domain to the hatching.
        	:param Domain:
        	:type Domain: HatchGen_Domain
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_AddDomain(self, *args)


    def AddPoint(self, *args) -> "void":
        """
        * Adds an intersection point to the hatching.
        	:param Point:
        	:type Point: HatchGen_PointOnHatching
        	:param Confusion:
        	:type Confusion: float
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_AddPoint(self, *args)


    def ChangeCurve(self, *args) -> "Geom2dAdaptor_Curve &":
        """
        * Returns the curve associated to the hatching.
        	:rtype: Geom2dAdaptor_Curve
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_ChangeCurve(self, *args)


    def ChangePoint(self, *args) -> "HatchGen_PointOnHatching &":
        """
        * Returns the Index-th intersection point of the hatching. The exception OutOfRange is raised if Index < 1 or Index > NbPoints.
        	:param Index:
        	:type Index: int
        	:rtype: HatchGen_PointOnHatching
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_ChangePoint(self, *args)


    def ClassificationPoint(self, *args) -> "gp_Pnt2d":
        """
        * Returns a point on the curve. This point will be used for the classification.
        	:rtype: gp_Pnt2d
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_ClassificationPoint(self, *args)


    def ClrDomains(self, *args) -> "void":
        """
        * Removes all the domains of the hatching.
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_ClrDomains(self, *args)


    def ClrPoints(self, *args) -> "void":
        """
        * Removes all the intersection points of the hatching.
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_ClrPoints(self, *args)


    def Curve(self, *args) -> "Geom2dAdaptor_Curve const &":
        """
        * Returns the curve associated to the hatching.
        	:rtype: Geom2dAdaptor_Curve
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_Curve(self, *args)


    def Domain(self, *args) -> "HatchGen_Domain const &":
        """
        * Returns the Index-th domain of the hatching. The exception OutOfRange is raised if Index < 1 or Index > NbDomains.
        	:param Index:
        	:type Index: int
        	:rtype: HatchGen_Domain
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_Domain(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * Creates a hatching.
        	:param Curve:
        	:type Curve: Geom2dAdaptor_Curve
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Hatching_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Hatching(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Sets the flag about the domains computation to the given value.
        	:param Flag:
        	:type Flag: bool
        	:rtype: None
        * Returns the flag about the domains computation.
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_IsDone(self, *args)


    def NbDomains(self, *args) -> "Standard_Integer":
        """
        * Returns the number of domains of the hatching.
        	:rtype: int
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_NbDomains(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of intersection points of the hatching.
        	:rtype: int
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_NbPoints(self, *args)


    def Point(self, *args) -> "HatchGen_PointOnHatching const &":
        """
        * Returns the Index-th intersection point of the hatching. The exception OutOfRange is raised if Index < 1 or Index > NbPoints.
        	:param Index:
        	:type Index: int
        	:rtype: HatchGen_PointOnHatching
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_Point(self, *args)


    def RemDomain(self, *args) -> "void":
        """
        * Removes the Index-th domain of the hatching. The exception OutOfRange is raised if Index < 1 or Index > NbDomains.
        	:param Index:
        	:type Index: int
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_RemDomain(self, *args)


    def RemPoint(self, *args) -> "void":
        """
        * Removes the Index-th intersection point of the hatching. The exception OutOfRange is raised if Index < 1 or Index > NbPoints.
        	:param Index:
        	:type Index: int
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_RemPoint(self, *args)


    def Status(self, *args) -> "HatchGen_ErrorStatus":
        """
        * Sets the error status.
        	:param theStatus:
        	:type theStatus: HatchGen_ErrorStatus
        	:rtype: None
        * Returns the error status.
        	:rtype: HatchGen_ErrorStatus
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_Status(self, *args)


    def TrimDone(self, *args) -> "Standard_Boolean":
        """
        * Sets the flag about the trimming computations to the given value.
        	:param Flag:
        	:type Flag: bool
        	:rtype: None
        * Returns the flag about the trimming computations.
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_TrimDone(self, *args)


    def TrimFailed(self, *args) -> "Standard_Boolean":
        """
        * Sets the flag about the trimming failure to the given value.
        	:param Flag:
        	:type Flag: bool
        	:rtype: None
        * Returns the flag about the trimming failure.
        	:rtype: bool
        """
        return _Geom2dHatch.Geom2dHatch_Hatching_TrimFailed(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Hatching
Geom2dHatch_Hatching.AddDomain = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_AddDomain, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.AddPoint = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_AddPoint, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.ChangeCurve = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_ChangeCurve, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.ChangePoint = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_ChangePoint, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.ClassificationPoint = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_ClassificationPoint, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.ClrDomains = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_ClrDomains, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.ClrPoints = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_ClrPoints, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.Curve = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_Curve, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.Domain = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_Domain, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.IsDone = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_IsDone, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.NbDomains = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_NbDomains, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.NbPoints = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_NbPoints, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.Point = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_Point, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.RemDomain = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_RemDomain, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.RemPoint = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_RemPoint, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.Status = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_Status, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.TrimDone = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_TrimDone, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching.TrimFailed = new_instancemethod(_Geom2dHatch.Geom2dHatch_Hatching_TrimFailed, None, Geom2dHatch_Hatching)
Geom2dHatch_Hatching_swigregister = _Geom2dHatch.Geom2dHatch_Hatching_swigregister
Geom2dHatch_Hatching_swigregister(Geom2dHatch_Hatching)

class Geom2dHatch_Intersector(OCC.Core.Geom2dInt.Geom2dInt_GInter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConfusionTolerance(self, *args) -> "Standard_Real":
        """
        * Returns the confusion tolerance of the intersector.
        	:rtype: float
        """
        return _Geom2dHatch.Geom2dHatch_Intersector_ConfusionTolerance(self, *args)


    def __init__(self, *args):
        """
        * Creates an intersector.
        	:param Confusion:
        	:type Confusion: float
        	:param Tangency:
        	:type Tangency: float
        	:rtype: None
        :rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Intersector_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Intersector(*args))

    def Intersect(self, *args) -> "void":
        """
        * Intersects the curves C1 and C2. The results are retreived by the usual methods described in IntRes2d_Intersection. Creates an intersector.
        	:param C1:
        	:type C1: Geom2dAdaptor_Curve
        	:param C2:
        	:type C2: Geom2dAdaptor_Curve
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Intersector_Intersect(self, *args)


    def LocalGeometry(self, *args) -> "void":
        """
        * Returns in <T>, <N> and <C> the tangent, normal and curvature of the edge <E> at parameter value <U>.
        	:param E:
        	:type E: Geom2dAdaptor_Curve
        	:param U:
        	:type U: float
        	:param T:
        	:type T: gp_Dir2d
        	:param N:
        	:type N: gp_Dir2d
        	:param C:
        	:type C: float
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Intersector_LocalGeometry(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs the intersection between the 2d line segment (<L>, <P>) and the Curve <E>. The line segment is the part of the 2d line <L> of parameter range [0, <P>] (P is positive and can be RealLast()). Tol is the Tolerance on the segment. The order is relevant, the first argument is the segment, the second the Edge.
        	:param L:
        	:type L: gp_Lin2d
        	:param P:
        	:type P: float
        	:param Tol:
        	:type Tol: float
        	:param E:
        	:type E: Geom2dAdaptor_Curve
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Intersector_Perform(self, *args)


    def SetConfusionTolerance(self, *args) -> "void":
        """
        * Sets the confusion tolerance of the intersector.
        	:param Confusion:
        	:type Confusion: float
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Intersector_SetConfusionTolerance(self, *args)


    def SetTangencyTolerance(self, *args) -> "void":
        """
        * Sets the tangency tolerance of the intersector.
        	:param Tangency:
        	:type Tangency: float
        	:rtype: None
        """
        return _Geom2dHatch.Geom2dHatch_Intersector_SetTangencyTolerance(self, *args)


    def TangencyTolerance(self, *args) -> "Standard_Real":
        """
        * Returns the tangency tolerance of the intersector.
        	:rtype: float
        """
        return _Geom2dHatch.Geom2dHatch_Intersector_TangencyTolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Intersector
Geom2dHatch_Intersector.ConfusionTolerance = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_ConfusionTolerance, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.Intersect = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_Intersect, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.LocalGeometry = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_LocalGeometry, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.Perform = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_Perform, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.SetConfusionTolerance = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_SetConfusionTolerance, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.SetTangencyTolerance = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_SetTangencyTolerance, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector.TangencyTolerance = new_instancemethod(_Geom2dHatch.Geom2dHatch_Intersector_TangencyTolerance, None, Geom2dHatch_Intersector)
Geom2dHatch_Intersector_swigregister = _Geom2dHatch.Geom2dHatch_Intersector_swigregister
Geom2dHatch_Intersector_swigregister(Geom2dHatch_Intersector)



