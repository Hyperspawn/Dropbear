# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomAPI module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomapi.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GeomAPI.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomAPI')
    _GeomAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomAPI', [dirname(__file__)])
        except ImportError:
            import _GeomAPI
            return _GeomAPI
        try:
            _mod = imp.load_module('_GeomAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomAPI = swig_import_helper()
    del swig_import_helper
else:
    import _GeomAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomAPI.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GeomAPI.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GeomAPI.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GeomAPI.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GeomAPI.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GeomAPI.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GeomAPI.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GeomAPI.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GeomAPI.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GeomAPI.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GeomAPI.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GeomAPI.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GeomAPI.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GeomAPI.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GeomAPI.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GeomAPI.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GeomAPI.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GeomAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GeomAPI.process_exception(error, method_name, class_name)
process_exception = _GeomAPI.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom2d
import OCC.Core.Extrema
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.Adaptor3d
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.GeomAdaptor
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.AppParCurves
class geomapi(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def To2d(*args) -> "opencascade::handle< Geom2d_Curve >":
        """
        * This function builds (in the parametric space of the plane P) a 2D curve equivalent to the 3D curve C. The 3D curve C is considered to be located in the plane P. Warning The 3D curve C must be of one of the following types: - a line - a circle - an ellipse - a hyperbola - a parabola - a Bezier curve - a BSpline curve Exceptions Standard_NoSuchObject if C is not a defined type curve.
        	:param C:
        	:type C: Geom_Curve
        	:param P:
        	:type P: gp_Pln
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _GeomAPI.geomapi_To2d(*args)

    To2d = staticmethod(To2d)

    def To3d(*args) -> "opencascade::handle< Geom_Curve >":
        """
        * Builds a 3D curve equivalent to the 2D curve C described in the parametric space defined by the local coordinate system of plane P. The resulting 3D curve is of the same nature as that of the curve C.
        	:param C:
        	:type C: Geom2d_Curve
        	:param P:
        	:type P: gp_Pln
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _GeomAPI.geomapi_To3d(*args)

    To3d = staticmethod(To3d)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomAPI.geomapi_swiginit(self, _GeomAPI.new_geomapi())
    __swig_destroy__ = _GeomAPI.delete_geomapi
geomapi_swigregister = _GeomAPI.geomapi_swigregister
geomapi_swigregister(geomapi)

def geomapi_To2d(*args) -> "opencascade::handle< Geom2d_Curve >":
    """
    * This function builds (in the parametric space of the plane P) a 2D curve equivalent to the 3D curve C. The 3D curve C is considered to be located in the plane P. Warning The 3D curve C must be of one of the following types: - a line - a circle - an ellipse - a hyperbola - a parabola - a Bezier curve - a BSpline curve Exceptions Standard_NoSuchObject if C is not a defined type curve.
    	:param C:
    	:type C: Geom_Curve
    	:param P:
    	:type P: gp_Pln
    	:rtype: opencascade::handle<Geom2d_Curve>
    """
    return _GeomAPI.geomapi_To2d(*args)

def geomapi_To3d(*args) -> "opencascade::handle< Geom_Curve >":
    """
    * Builds a 3D curve equivalent to the 2D curve C described in the parametric space defined by the local coordinate system of plane P. The resulting 3D curve is of the same nature as that of the curve C.
    	:param C:
    	:type C: Geom2d_Curve
    	:param P:
    	:type P: gp_Pln
    	:rtype: opencascade::handle<Geom_Curve>
    """
    return _GeomAPI.geomapi_To3d(*args)

class GeomAPI_ExtremaCurveCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Distance(self, *args) -> "Standard_Real":
        """
        * Computes the distance between the end points of the extremum of index Index computed by this algorithm. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbExtrema ], where NbExtrema is the number of extrema computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_Distance(self, *args)


    def Extrema(self, *args) -> "Extrema_ExtCC const &":
        """
        * return the algorithmic object from Extrema
        	:rtype: Extrema_ExtCC
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_Extrema(self, *args)


    def __init__(self, *args):
        """
        * Constructs an empty algorithm for computing extrema between two curves. Use an Init function to define the curves on which it is going to work.
        	:rtype: None
        * Computes the extrema between the curves C1 and C2.
        	:param C1:
        	:type C1: Geom_Curve
        	:param C2:
        	:type C2: Geom_Curve
        	:rtype: None
        * Computes the portion of the curve C1 limited by the two points of parameter (U1min,U1max), and - the portion of the curve C2 limited by the two points of parameter (U2min,U2max). Warning Use the function NbExtrema to obtain the number of solutions. If this algorithm fails, NbExtrema returns 0.
        	:param C1:
        	:type C1: Geom_Curve
        	:param C2:
        	:type C2: Geom_Curve
        	:param U1min:
        	:type U1min: float
        	:param U1max:
        	:type U1max: float
        	:param U2min:
        	:type U2min: float
        	:param U2max:
        	:type U2max: float
        	:rtype: None
        """
        _GeomAPI.GeomAPI_ExtremaCurveCurve_swiginit(self, _GeomAPI.new_GeomAPI_ExtremaCurveCurve(*args))

    def Init(self, *args) -> "void":
        """
        * Initializes this algorithm with the given arguments and computes the extrema between the curves C1 and C2
        	:param C1:
        	:type C1: Geom_Curve
        	:param C2:
        	:type C2: Geom_Curve
        	:rtype: None
        * Initializes this algorithm with the given arguments and computes the extrema between : - the portion of the curve C1 limited by the two points of parameter (U1min,U1max), and - the portion of the curve C2 limited by the two points of parameter (U2min,U2max). Warning Use the function NbExtrema to obtain the number of solutions. If this algorithm fails, NbExtrema returns 0.
        	:param C1:
        	:type C1: Geom_Curve
        	:param C2:
        	:type C2: Geom_Curve
        	:param U1min:
        	:type U1min: float
        	:param U1max:
        	:type U1max: float
        	:param U2min:
        	:type U2min: float
        	:param U2max:
        	:type U2max: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_Init(self, *args)


    def LowerDistance(self, *args) -> "Standard_Real":
        """
        * Computes the distance between the end points of the shortest extremum computed by this algorithm. Exceptions StdFail_NotDone if this algorithm fails.
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_LowerDistance(self, *args)


    def LowerDistanceParameters(self, *args) -> "void":
        """
        * Returns the parameters U1 of the point on the first curve and U2 of the point on the second curve, which are the ends of the shortest extremum computed by this algorithm. Exceptions StdFail_NotDone if this algorithm fails.
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_LowerDistanceParameters(self, *args)


    def NbExtrema(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extrema computed by this algorithm. Note: if this algorithm fails, NbExtrema returns 0.
        	:rtype: int
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_NbExtrema(self, *args)


    def NearestPoints(self, *args) -> "void":
        """
        * Returns the points P1 on the first curve and P2 on the second curve, which are the ends of the shortest extremum computed by this algorithm. Exceptions StdFail_NotDone if this algorithm fails.
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_NearestPoints(self, *args)


    def Parameters(self, *args) -> "void":
        """
        * Returns the parameters U1 of the point on the first curve and U2 of the point on the second curve, which are the ends of the extremum of index Index computed by this algorithm. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbExtrema ], where NbExtrema is the number of extrema computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_Parameters(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the points P1 on the first curve and P2 on the second curve, which are the ends of the extremum of index Index computed by this algorithm. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbExtrema ], where NbExtrema is the number of extrema computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_Points(self, *args)


    def TotalLowerDistance(self, *args) -> "Standard_Real":
        """
        * return the distance of the total nearest couple solution point. if <myExtCC> is not done
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_TotalLowerDistance(self, *args)


    def TotalLowerDistanceParameters(self, *args) -> "Standard_Boolean":
        """
        * set in <U1> and <U2> the parameters of the couple solution points which represents the total nearest solution.
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: bool
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_TotalLowerDistanceParameters(self, *args)


    def TotalNearestPoints(self, *args) -> "Standard_Boolean":
        """
        * set in <P1> and <P2> the couple solution points such a the distance [P1,P2] is the minimum. taking in account extremity points of curves.
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: bool
        """
        return _GeomAPI.GeomAPI_ExtremaCurveCurve_TotalNearestPoints(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAPI.delete_GeomAPI_ExtremaCurveCurve
GeomAPI_ExtremaCurveCurve.Distance = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_Distance, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve.Extrema = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_Extrema, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve.Init = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_Init, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve.LowerDistance = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_LowerDistance, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve.LowerDistanceParameters = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_LowerDistanceParameters, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve.NbExtrema = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_NbExtrema, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve.NearestPoints = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_NearestPoints, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve.Parameters = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_Parameters, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve.Points = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_Points, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve.TotalLowerDistance = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_TotalLowerDistance, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve.TotalLowerDistanceParameters = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_TotalLowerDistanceParameters, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve.TotalNearestPoints = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveCurve_TotalNearestPoints, None, GeomAPI_ExtremaCurveCurve)
GeomAPI_ExtremaCurveCurve_swigregister = _GeomAPI.GeomAPI_ExtremaCurveCurve_swigregister
GeomAPI_ExtremaCurveCurve_swigregister(GeomAPI_ExtremaCurveCurve)

class GeomAPI_ExtremaCurveSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Distance(self, *args) -> "Standard_Real":
        """
        * Computes the distance between the end points of the extremum of index Index computed by this algorithm. Exceptions Standard_OutOfRange if index is not in the range [ 1,NbExtrema ], where NbExtrema is the number of extrema computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ExtremaCurveSurface_Distance(self, *args)


    def Extrema(self, *args) -> "Extrema_ExtCS const &":
        """
        * Missing detailed docstringic object from Extrema
        	:rtype: Extrema_ExtCS
        """
        return _GeomAPI.GeomAPI_ExtremaCurveSurface_Extrema(self, *args)


    def __init__(self, *args):
        """
        * Constructs an empty algorithm for computing extrema between a curve and a surface. Use an Init function to define the curve and the surface on which it is going to work.
        	:rtype: None
        * Computes the extrema distances between the curve <C> and the surface <S>.
        	:param Curve:
        	:type Curve: Geom_Curve
        	:param Surface:
        	:type Surface: Geom_Surface
        	:rtype: None
        * Computes the extrema distances between the curve <C> and the surface <S>. The solution point are computed in the domain [Wmin,Wmax] of the curve and in the domain [Umin,Umax] [Vmin,Vmax] of the surface. Warning Use the function NbExtrema to obtain the number of solutions. If this algorithm fails, NbExtrema returns 0.
        	:param Curve:
        	:type Curve: Geom_Curve
        	:param Surface:
        	:type Surface: Geom_Surface
        	:param Wmin:
        	:type Wmin: float
        	:param Wmax:
        	:type Wmax: float
        	:param Umin:
        	:type Umin: float
        	:param Umax:
        	:type Umax: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vmax:
        	:type Vmax: float
        	:rtype: None
        """
        _GeomAPI.GeomAPI_ExtremaCurveSurface_swiginit(self, _GeomAPI.new_GeomAPI_ExtremaCurveSurface(*args))

    def Init(self, *args) -> "void":
        """
        * Computes the extrema distances between the curve <C> and the surface <S>.
        	:param Curve:
        	:type Curve: Geom_Curve
        	:param Surface:
        	:type Surface: Geom_Surface
        	:rtype: None
        * Computes the extrema distances between the curve <C> and the surface <S>. The solution point are computed in the domain [Wmin,Wmax] of the curve and in the domain [Umin,Umax] [Vmin,Vmax] of the surface. Warning Use the function NbExtrema to obtain the number of solutions. If this algorithm fails, NbExtrema returns 0.
        	:param Curve:
        	:type Curve: Geom_Curve
        	:param Surface:
        	:type Surface: Geom_Surface
        	:param Wmin:
        	:type Wmin: float
        	:param Wmax:
        	:type Wmax: float
        	:param Umin:
        	:type Umin: float
        	:param Umax:
        	:type Umax: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vmax:
        	:type Vmax: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaCurveSurface_Init(self, *args)


    def LowerDistance(self, *args) -> "Standard_Real":
        """
        * Computes the distance between the end points of the shortest extremum computed by this algorithm. Exceptions - StdFail_NotDone if this algorithm fails.
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ExtremaCurveSurface_LowerDistance(self, *args)


    def LowerDistanceParameters(self, *args) -> "void":
        """
        * Returns the parameters W of the point on the curve and (U,V) of the point on the surface, which are the ends of the shortest extremum computed by this algorithm. Exceptions - StdFail_NotDone if this algorithm fails.
        	:param W:
        	:type W: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaCurveSurface_LowerDistanceParameters(self, *args)


    def NbExtrema(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extrema computed by this algorithm. Note: if this algorithm fails, NbExtrema returns 0.
        	:rtype: int
        """
        return _GeomAPI.GeomAPI_ExtremaCurveSurface_NbExtrema(self, *args)


    def NearestPoints(self, *args) -> "void":
        """
        * Returns the points PC on the curve and PS on the surface, which are the ends of the shortest extremum computed by this algorithm. Exceptions - StdFail_NotDone if this algorithm fails.
        	:param PC:
        	:type PC: gp_Pnt
        	:param PS:
        	:type PS: gp_Pnt
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaCurveSurface_NearestPoints(self, *args)


    def Parameters(self, *args) -> "void":
        """
        * Returns the parameters W of the point on the curve, and (U,V) of the point on the surface, which are the ends of the extremum of index Index computed by this algorithm. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbExtrema ], where NbExtrema is the number of extrema computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:param W:
        	:type W: float
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaCurveSurface_Parameters(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the points P1 on the curve and P2 on the surface, which are the ends of the extremum of index Index computed by this algorithm. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbExtrema ], where NbExtrema is the number of extrema computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaCurveSurface_Points(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAPI.delete_GeomAPI_ExtremaCurveSurface
GeomAPI_ExtremaCurveSurface.Distance = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveSurface_Distance, None, GeomAPI_ExtremaCurveSurface)
GeomAPI_ExtremaCurveSurface.Extrema = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveSurface_Extrema, None, GeomAPI_ExtremaCurveSurface)
GeomAPI_ExtremaCurveSurface.Init = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveSurface_Init, None, GeomAPI_ExtremaCurveSurface)
GeomAPI_ExtremaCurveSurface.LowerDistance = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveSurface_LowerDistance, None, GeomAPI_ExtremaCurveSurface)
GeomAPI_ExtremaCurveSurface.LowerDistanceParameters = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveSurface_LowerDistanceParameters, None, GeomAPI_ExtremaCurveSurface)
GeomAPI_ExtremaCurveSurface.NbExtrema = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveSurface_NbExtrema, None, GeomAPI_ExtremaCurveSurface)
GeomAPI_ExtremaCurveSurface.NearestPoints = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveSurface_NearestPoints, None, GeomAPI_ExtremaCurveSurface)
GeomAPI_ExtremaCurveSurface.Parameters = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveSurface_Parameters, None, GeomAPI_ExtremaCurveSurface)
GeomAPI_ExtremaCurveSurface.Points = new_instancemethod(_GeomAPI.GeomAPI_ExtremaCurveSurface_Points, None, GeomAPI_ExtremaCurveSurface)
GeomAPI_ExtremaCurveSurface_swigregister = _GeomAPI.GeomAPI_ExtremaCurveSurface_swigregister
GeomAPI_ExtremaCurveSurface_swigregister(GeomAPI_ExtremaCurveSurface)

class GeomAPI_ExtremaSurfaceSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Distance(self, *args) -> "Standard_Real":
        """
        * Computes the distance between the end points of the extremum of index Index computed by this algorithm. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbExtrema ], where NbExtrema is the number of extrema computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ExtremaSurfaceSurface_Distance(self, *args)


    def Extrema(self, *args) -> "Extrema_ExtSS const &":
        """
        * return the algorithmic object from Extrema
        	:rtype: Extrema_ExtSS
        """
        return _GeomAPI.GeomAPI_ExtremaSurfaceSurface_Extrema(self, *args)


    def __init__(self, *args):
        """
        * Constructs an empty algorithm for computing extrema between two surfaces. Use an Init function to define the surfaces on which it is going to work.
        	:rtype: None
        * Computes the extrema distances between the surfaces <S1> and <S2>
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:rtype: None
        * Computes the extrema distances between the portion of the surface S1 limited by the two values of parameter (U1min,U1max) in the u parametric direction, and by the two values of parameter (V1min,V1max) in the v parametric direction, and - the portion of the surface S2 limited by the two values of parameter (U2min,U2max) in the u parametric direction, and by the two values of parameter (V2min,V2max) in the v parametric direction.
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:param U1min:
        	:type U1min: float
        	:param U1max:
        	:type U1max: float
        	:param V1min:
        	:type V1min: float
        	:param V1max:
        	:type V1max: float
        	:param U2min:
        	:type U2min: float
        	:param U2max:
        	:type U2max: float
        	:param V2min:
        	:type V2min: float
        	:param V2max:
        	:type V2max: float
        	:rtype: None
        """
        _GeomAPI.GeomAPI_ExtremaSurfaceSurface_swiginit(self, _GeomAPI.new_GeomAPI_ExtremaSurfaceSurface(*args))

    def Init(self, *args) -> "void":
        """
        * Initializes this algorithm with the given arguments and computes the extrema distances between the surfaces <S1> and <S2>
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:rtype: None
        * Initializes this algorithm with the given arguments and computes the extrema distances between - the portion of the surface S1 limited by the two values of parameter (U1min,U1max) in the u parametric direction, and by the two values of parameter (V1min,V1max) in the v parametric direction, and - the portion of the surface S2 limited by the two values of parameter (U2min,U2max) in the u parametric direction, and by the two values of parameter (V2min,V2max) in the v parametric direction.
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:param U1min:
        	:type U1min: float
        	:param U1max:
        	:type U1max: float
        	:param V1min:
        	:type V1min: float
        	:param V1max:
        	:type V1max: float
        	:param U2min:
        	:type U2min: float
        	:param U2max:
        	:type U2max: float
        	:param V2min:
        	:type V2min: float
        	:param V2max:
        	:type V2max: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaSurfaceSurface_Init(self, *args)


    def LowerDistance(self, *args) -> "Standard_Real":
        """
        * Computes the distance between the end points of the shortest extremum computed by this algorithm. Exceptions StdFail_NotDone if this algorithm fails.
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ExtremaSurfaceSurface_LowerDistance(self, *args)


    def LowerDistanceParameters(self, *args) -> "void":
        """
        * Returns the parameters (U1,V1) of the point on the first surface and (U2,V2) of the point on the second surface, which are the ends of the shortest extremum computed by this algorithm. Exceptions - StdFail_NotDone if this algorithm fails.
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaSurfaceSurface_LowerDistanceParameters(self, *args)


    def NbExtrema(self, *args) -> "Standard_Integer":
        """
        * Returns the number of extrema computed by this algorithm. Note: if this algorithm fails, NbExtrema returns 0.
        	:rtype: int
        """
        return _GeomAPI.GeomAPI_ExtremaSurfaceSurface_NbExtrema(self, *args)


    def NearestPoints(self, *args) -> "void":
        """
        * Returns the points P1 on the first surface and P2 on the second surface, which are the ends of the shortest extremum computed by this algorithm. Exceptions StdFail_NotDone if this algorithm fails.
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaSurfaceSurface_NearestPoints(self, *args)


    def Parameters(self, *args) -> "void":
        """
        * Returns the parameters (U1,V1) of the point on the first surface, and (U2,V2) of the point on the second surface, which are the ends of the extremum of index Index computed by this algorithm. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbExtrema ], where NbExtrema is the number of extrema computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaSurfaceSurface_Parameters(self, *args)


    def Points(self, *args) -> "void":
        """
        * Returns the points P1 on the first surface and P2 on the second surface, which are the ends of the extremum of index Index computed by this algorithm. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbExtrema ], where NbExtrema is the number of extrema computed by this algorithm.
        	:param Index:
        	:type Index: int
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ExtremaSurfaceSurface_Points(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAPI.delete_GeomAPI_ExtremaSurfaceSurface
GeomAPI_ExtremaSurfaceSurface.Distance = new_instancemethod(_GeomAPI.GeomAPI_ExtremaSurfaceSurface_Distance, None, GeomAPI_ExtremaSurfaceSurface)
GeomAPI_ExtremaSurfaceSurface.Extrema = new_instancemethod(_GeomAPI.GeomAPI_ExtremaSurfaceSurface_Extrema, None, GeomAPI_ExtremaSurfaceSurface)
GeomAPI_ExtremaSurfaceSurface.Init = new_instancemethod(_GeomAPI.GeomAPI_ExtremaSurfaceSurface_Init, None, GeomAPI_ExtremaSurfaceSurface)
GeomAPI_ExtremaSurfaceSurface.LowerDistance = new_instancemethod(_GeomAPI.GeomAPI_ExtremaSurfaceSurface_LowerDistance, None, GeomAPI_ExtremaSurfaceSurface)
GeomAPI_ExtremaSurfaceSurface.LowerDistanceParameters = new_instancemethod(_GeomAPI.GeomAPI_ExtremaSurfaceSurface_LowerDistanceParameters, None, GeomAPI_ExtremaSurfaceSurface)
GeomAPI_ExtremaSurfaceSurface.NbExtrema = new_instancemethod(_GeomAPI.GeomAPI_ExtremaSurfaceSurface_NbExtrema, None, GeomAPI_ExtremaSurfaceSurface)
GeomAPI_ExtremaSurfaceSurface.NearestPoints = new_instancemethod(_GeomAPI.GeomAPI_ExtremaSurfaceSurface_NearestPoints, None, GeomAPI_ExtremaSurfaceSurface)
GeomAPI_ExtremaSurfaceSurface.Parameters = new_instancemethod(_GeomAPI.GeomAPI_ExtremaSurfaceSurface_Parameters, None, GeomAPI_ExtremaSurfaceSurface)
GeomAPI_ExtremaSurfaceSurface.Points = new_instancemethod(_GeomAPI.GeomAPI_ExtremaSurfaceSurface_Points, None, GeomAPI_ExtremaSurfaceSurface)
GeomAPI_ExtremaSurfaceSurface_swigregister = _GeomAPI.GeomAPI_ExtremaSurfaceSurface_swigregister
GeomAPI_ExtremaSurfaceSurface_swigregister(GeomAPI_ExtremaSurfaceSurface)

class GeomAPI_IntCS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an empty object. Use the function Perform for further initialization of the algorithm by the curve and the surface.
        	:rtype: None
        * Computes the intersections between the curve C and the surface S. Warning Use function IsDone to verify that the intersections are computed successfully.
        	:param C:
        	:type C: Geom_Curve
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None
        """
        _GeomAPI.GeomAPI_IntCS_swiginit(self, _GeomAPI.new_GeomAPI_IntCS(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the intersections are successfully computed.
        	:rtype: bool
        """
        return _GeomAPI.GeomAPI_IntCS_IsDone(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of Intersection Points if IsDone returns True. else NotDone is raised.
        	:rtype: int
        """
        return _GeomAPI.GeomAPI_IntCS_NbPoints(self, *args)


    def NbSegments(self, *args) -> "Standard_Integer":
        """
        * Returns the number of computed intersection segments in case of tangential intersection. Exceptions StdFail_NotDone if the intersection algorithm fails or is not initialized.
        	:rtype: int
        """
        return _GeomAPI.GeomAPI_IntCS_NbSegments(self, *args)


    def Parameters(self, *args) -> "void":
        """
        * Returns parameter W on the curve and (parameters U,V) on the surface of the computed intersection point of index Index in case of cross intersection. Exceptions StdFail_NotDone if intersection algorithm fails or is not initialized. Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where NbPoints is the number of computed intersection points.
        	:param Index:
        	:type Index: int
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param W:
        	:type W: float
        	:rtype: None
        * Returns the parameters of the first (U1,V1) and the last (U2,V2) points of curve's segment on the surface in case of tangential intersection. Index is the number of computed intersection segments. Exceptions StdFail_NotDone if intersection algorithm fails or is not initialized. Standard_OutOfRange if Index is not in the range [ 1,NbSegments ], where NbSegments is the number of computed intersection segments.
        	:param Index:
        	:type Index: int
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_IntCS_Parameters(self, *args)


    def Perform(self, *args) -> "void":
        """
        * This function Initializes an algorithm with the curve C and the surface S and computes the intersections between C and S. Warning Use function IsDone to verify that the intersections are computed successfully.
        	:param C:
        	:type C: Geom_Curve
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_IntCS_Perform(self, *args)


    def Point(self, *args) -> "gp_Pnt const":
        """
        * Returns the Intersection Point of range <Index>in case of cross intersection. Raises NotDone if the computation has failed or if the computation has not been done raises OutOfRange if Index is not in the range <1..NbPoints>
        	:param Index:
        	:type Index: int
        	:rtype: gp_Pnt
        """
        return _GeomAPI.GeomAPI_IntCS_Point(self, *args)


    def Segment(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        * Returns the computed intersection segment of index Index in case of tangential intersection. Intersection segment is a portion of the initial curve tangent to surface. Exceptions StdFail_NotDone if intersection algorithm fails or is not initialized. Standard_OutOfRange if Index is not in the range [ 1,NbSegments ], where NbSegments is the number of computed intersection segments.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _GeomAPI.GeomAPI_IntCS_Segment(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAPI.delete_GeomAPI_IntCS
GeomAPI_IntCS.IsDone = new_instancemethod(_GeomAPI.GeomAPI_IntCS_IsDone, None, GeomAPI_IntCS)
GeomAPI_IntCS.NbPoints = new_instancemethod(_GeomAPI.GeomAPI_IntCS_NbPoints, None, GeomAPI_IntCS)
GeomAPI_IntCS.NbSegments = new_instancemethod(_GeomAPI.GeomAPI_IntCS_NbSegments, None, GeomAPI_IntCS)
GeomAPI_IntCS.Parameters = new_instancemethod(_GeomAPI.GeomAPI_IntCS_Parameters, None, GeomAPI_IntCS)
GeomAPI_IntCS.Perform = new_instancemethod(_GeomAPI.GeomAPI_IntCS_Perform, None, GeomAPI_IntCS)
GeomAPI_IntCS.Point = new_instancemethod(_GeomAPI.GeomAPI_IntCS_Point, None, GeomAPI_IntCS)
GeomAPI_IntCS.Segment = new_instancemethod(_GeomAPI.GeomAPI_IntCS_Segment, None, GeomAPI_IntCS)
GeomAPI_IntCS_swigregister = _GeomAPI.GeomAPI_IntCS_swigregister
GeomAPI_IntCS_swigregister(GeomAPI_IntCS)

class GeomAPI_IntSS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty object. Use the function Perform for further initialization algorithm by two surfaces.
        	:rtype: None
        * Computes the intersection curves between the two surfaces S1 and S2. Parameter Tol defines the precision of curves computation. For most cases the value 1.0e-7 is recommended to use. Warning Use the function IsDone to verify that the intersections are successfully computed.I
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _GeomAPI.GeomAPI_IntSS_swiginit(self, _GeomAPI.new_GeomAPI_IntSS(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the intersection was successful.
        	:rtype: bool
        """
        return _GeomAPI.GeomAPI_IntSS_IsDone(self, *args)


    def Line(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """
        * Returns the computed intersection curve of index Index. Exceptions StdFail_NotDone if the computation fails. Standard_OutOfRange if Index is out of range [1, NbLines] where NbLines is the number of computed intersection curves.
        	:param Index:
        	:type Index: int
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _GeomAPI.GeomAPI_IntSS_Line(self, *args)


    def NbLines(self, *args) -> "Standard_Integer":
        """
        * Returns the number of computed intersection curves. Exceptions StdFail_NotDone if the computation fails.
        	:rtype: int
        """
        return _GeomAPI.GeomAPI_IntSS_NbLines(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Initializes an algorithm with the given arguments and computes the intersection curves between the two surfaces S1 and S2. Parameter Tol defines the precision of curves computation. For most cases the value 1.0e-7 is recommended to use. Warning Use function IsDone to verify that the intersections are successfully computed.
        	:param S1:
        	:type S1: Geom_Surface
        	:param S2:
        	:type S2: Geom_Surface
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_IntSS_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAPI.delete_GeomAPI_IntSS
GeomAPI_IntSS.IsDone = new_instancemethod(_GeomAPI.GeomAPI_IntSS_IsDone, None, GeomAPI_IntSS)
GeomAPI_IntSS.Line = new_instancemethod(_GeomAPI.GeomAPI_IntSS_Line, None, GeomAPI_IntSS)
GeomAPI_IntSS.NbLines = new_instancemethod(_GeomAPI.GeomAPI_IntSS_NbLines, None, GeomAPI_IntSS)
GeomAPI_IntSS.Perform = new_instancemethod(_GeomAPI.GeomAPI_IntSS_Perform, None, GeomAPI_IntSS)
GeomAPI_IntSS_swigregister = _GeomAPI.GeomAPI_IntSS_swigregister
GeomAPI_IntSS_swigregister(GeomAPI_IntSS)

class GeomAPI_Interpolate(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Curve(self, *args) -> "opencascade::handle< Geom_BSplineCurve > const &":
        """
        * Returns the computed BSpline curve. Raises StdFail_NotDone if the interpolation fails.
        	:rtype: opencascade::handle<Geom_BSplineCurve>
        """
        return _GeomAPI.GeomAPI_Interpolate_Curve(self, *args)


    def __init__(self, *args):
        """
        * Initializes an algorithm for constructing a constrained BSpline curve passing through the points of the table Points. Tangential vectors can then be assigned, using the function Load. If PeriodicFlag is true, the constrained BSpline curve will be periodic and closed. In this case, the junction point is the first point of the table Points. The tolerance value Tolerance is used to check that: - points are not too close to each other, or - tangential vectors (defined using the function Load) are not too small. The resulting BSpline curve will be 'C2' continuous, except where a tangency constraint is defined on a point through which the curve passes (by using the Load function). In this case, it will be only 'C1' continuous. Once all the constraints are defined, use the function Perform to compute the curve. Warning - There must be at least 2 points in the table Points. - If PeriodicFlag is false, there must be as many parameters in the array Parameters as there are points in the array Points. - If PeriodicFlag is true, there must be one more parameter in the table Parameters: this is used to give the parameter on the resulting BSpline curve of the junction point of the curve (which is also the first point of the table Points). Exceptions - Standard_ConstructionError if the distance between two consecutive points in the table Points is less than or equal to Tolerance. - Standard_OutOfRange if: - there are less than two points in the table Points, or - conditions relating to the respective number of elements in the parallel tables Points and Parameters are not respected.
        	:param Points:
        	:type Points: TColgp_HArray1OfPnt
        	:param PeriodicFlag:
        	:type PeriodicFlag: bool
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        * Initializes an algorithm for constructing a constrained BSpline curve passing through the points of the table Points, where the parameters of each of its points are given by the parallel table Parameters. Tangential vectors can then be assigned, using the function Load. If PeriodicFlag is true, the constrained BSpline curve will be periodic and closed. In this case, the junction point is the first point of the table Points. The tolerance value Tolerance is used to check that: - points are not too close to each other, or - tangential vectors (defined using the function Load) are not too small. The resulting BSpline curve will be 'C2' continuous, except where a tangency constraint is defined on a point through which the curve passes (by using the Load function). In this case, it will be only 'C1' continuous. Once all the constraints are defined, use the function Perform to compute the curve. Warning - There must be at least 2 points in the table Points. - If PeriodicFlag is false, there must be as many parameters in the array Parameters as there are points in the array Points. - If PeriodicFlag is true, there must be one more parameter in the table Parameters: this is used to give the parameter on the resulting BSpline curve of the junction point of the curve (which is also the first point of the table Points). Exceptions - Standard_ConstructionError if the distance between two consecutive points in the table Points is less than or equal to Tolerance. - Standard_OutOfRange if: - there are less than two points in the table Points, or - conditions relating to the respective number of elements in the parallel tables Points and Parameters are not respected.
        	:param Points:
        	:type Points: TColgp_HArray1OfPnt
        	:param Parameters:
        	:type Parameters: TColStd_HArray1OfReal
        	:param PeriodicFlag:
        	:type PeriodicFlag: bool
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        """
        _GeomAPI.GeomAPI_Interpolate_swiginit(self, _GeomAPI.new_GeomAPI_Interpolate(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the constrained BSpline curve is successfully constructed. Note: in this case, the result is given by the function Curve.
        	:rtype: bool
        """
        return _GeomAPI.GeomAPI_Interpolate_IsDone(self, *args)


    def Load(self, *args) -> "void":
        """
        * Assigns this constrained BSpline curve to be tangential to vectors InitialTangent and FinalTangent at its first and last points respectively (i.e. the first and last points of the table of points through which the curve passes, as defined at the time of initialization).
        	:param InitialTangent:
        	:type InitialTangent: gp_Vec
        	:param FinalTangent:
        	:type FinalTangent: gp_Vec
        	:param Scale: default value is Standard_True
        	:type Scale: bool
        	:rtype: None
        * Assigns this constrained BSpline curve to be tangential to vectors defined in the table Tangents, which is parallel to the table of points through which the curve passes, as defined at the time of initialization. Vectors in the table Tangents are defined only if the flag given in the parallel table TangentFlags is true: only these vectors are set as tangency constraints.
        	:param Tangents:
        	:type Tangents: TColgp_Array1OfVec
        	:param TangentFlags:
        	:type TangentFlags: TColStd_HArray1OfBoolean
        	:param Scale: default value is Standard_True
        	:type Scale: bool
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_Interpolate_Load(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Computes the constrained BSpline curve. Use the function IsDone to verify that the computation is successful, and then the function Curve to obtain the result.
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_Interpolate_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAPI.delete_GeomAPI_Interpolate
GeomAPI_Interpolate.Curve = new_instancemethod(_GeomAPI.GeomAPI_Interpolate_Curve, None, GeomAPI_Interpolate)
GeomAPI_Interpolate.IsDone = new_instancemethod(_GeomAPI.GeomAPI_Interpolate_IsDone, None, GeomAPI_Interpolate)
GeomAPI_Interpolate.Load = new_instancemethod(_GeomAPI.GeomAPI_Interpolate_Load, None, GeomAPI_Interpolate)
GeomAPI_Interpolate.Perform = new_instancemethod(_GeomAPI.GeomAPI_Interpolate_Perform, None, GeomAPI_Interpolate)
GeomAPI_Interpolate_swigregister = _GeomAPI.GeomAPI_Interpolate_swigregister
GeomAPI_Interpolate_swigregister(GeomAPI_Interpolate)

class GeomAPI_PointsToBSpline(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Curve(self, *args) -> "opencascade::handle< Geom_BSplineCurve > const &":
        """
        * Returns the computed BSpline curve. Raises StdFail_NotDone if the curve is not built.
        	:rtype: opencascade::handle<Geom_BSplineCurve>
        """
        return _GeomAPI.GeomAPI_PointsToBSpline_Curve(self, *args)


    def __init__(self, *args):
        """
        * Constructs an empty approximation algorithm. Use an Init function to define and build the BSpline curve.
        	:rtype: None
        * Approximate a BSpline Curve passing through an array of Point. The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D
        	:param Points:
        	:type Points: TColgp_Array1OfPnt
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        * Approximate a BSpline Curve passing through an array of Point. The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D
        	:param Points:
        	:type Points: TColgp_Array1OfPnt
        	:param ParType:
        	:type ParType: Approx_ParametrizationType
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        * Approximate a BSpline Curve passing through an array of Point, which parameters are given by the array <Parameters>. The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D
        	:param Points:
        	:type Points: TColgp_Array1OfPnt
        	:param Parameters:
        	:type Parameters: TColStd_Array1OfReal
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        * Approximate a BSpline Curve passing through an array of Point using variational smoothing algorithm, which tries to minimize additional criterium: Weight1*CurveLength + Weight2*Curvature + Weight3*Torsion
        	:param Points:
        	:type Points: TColgp_Array1OfPnt
        	:param Weight1:
        	:type Weight1: float
        	:param Weight2:
        	:type Weight2: float
        	:param Weight3:
        	:type Weight3: float
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        """
        _GeomAPI.GeomAPI_PointsToBSpline_swiginit(self, _GeomAPI.new_GeomAPI_PointsToBSpline(*args))

    def Init(self, *args) -> "void":
        """
        * Approximate a BSpline Curve passing through an array of Point. The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D
        	:param Points:
        	:type Points: TColgp_Array1OfPnt
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        * Approximate a BSpline Curve passing through an array of Point. The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D
        	:param Points:
        	:type Points: TColgp_Array1OfPnt
        	:param ParType:
        	:type ParType: Approx_ParametrizationType
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        * Approximate a BSpline Curve passing through an array of Point, which parameters are given by the array <Parameters>. The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D
        	:param Points:
        	:type Points: TColgp_Array1OfPnt
        	:param Parameters:
        	:type Parameters: TColStd_Array1OfReal
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        * Approximate a BSpline Curve passing through an array of Point using variational smoothing algorithm, which tries to minimize additional criterium: Weight1*CurveLength + Weight2*Curvature + Weight3*Torsion
        	:param Points:
        	:type Points: TColgp_Array1OfPnt
        	:param Weight1:
        	:type Weight1: float
        	:param Weight2:
        	:type Weight2: float
        	:param Weight3:
        	:type Weight3: float
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_PointsToBSpline_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _GeomAPI.GeomAPI_PointsToBSpline_IsDone(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAPI.delete_GeomAPI_PointsToBSpline
GeomAPI_PointsToBSpline.Curve = new_instancemethod(_GeomAPI.GeomAPI_PointsToBSpline_Curve, None, GeomAPI_PointsToBSpline)
GeomAPI_PointsToBSpline.Init = new_instancemethod(_GeomAPI.GeomAPI_PointsToBSpline_Init, None, GeomAPI_PointsToBSpline)
GeomAPI_PointsToBSpline.IsDone = new_instancemethod(_GeomAPI.GeomAPI_PointsToBSpline_IsDone, None, GeomAPI_PointsToBSpline)
GeomAPI_PointsToBSpline_swigregister = _GeomAPI.GeomAPI_PointsToBSpline_swigregister
GeomAPI_PointsToBSpline_swigregister(GeomAPI_PointsToBSpline)

class GeomAPI_PointsToBSplineSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty algorithm for approximation or interpolation of a surface. Use: - an Init function to define and build the BSpline surface by approximation, or - an Interpolate function to define and build the BSpline surface by interpolation.
        	:rtype: None
        * Approximates a BSpline Surface passing through an array of Points. The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D.
        	:param Points:
        	:type Points: TColgp_Array2OfPnt
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        * Approximates a BSpline Surface passing through an array of Points. The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D.
        	:param Points:
        	:type Points: TColgp_Array2OfPnt
        	:param ParType:
        	:type ParType: Approx_ParametrizationType
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        * Approximates a BSpline Surface passing through an array of points using variational smoothing algorithm, which tries to minimize additional criterium: Weight1*CurveLength + Weight2*Curvature + Weight3*Torsion.
        	:param Points:
        	:type Points: TColgp_Array2OfPnt
        	:param Weight1:
        	:type Weight1: float
        	:param Weight2:
        	:type Weight2: float
        	:param Weight3:
        	:type Weight3: float
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        * Approximates a BSpline Surface passing through an array of Points. //! The points will be constructed as follow: P(i,j) = gp_Pnt( X0 + (i-1)*dX , Y0 + (j-1)*dY , ZPoints(i,j) ) //! The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D 4- the parametrization of the surface will verify: S->Value( U, V) = gp_Pnt( U, V, Z(U,V) );
        	:param ZPoints:
        	:type ZPoints: TColStd_Array2OfReal
        	:param X0:
        	:type X0: float
        	:param dX:
        	:type dX: float
        	:param Y0:
        	:type Y0: float
        	:param dY:
        	:type dY: float
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        """
        _GeomAPI.GeomAPI_PointsToBSplineSurface_swiginit(self, _GeomAPI.new_GeomAPI_PointsToBSplineSurface(*args))

    def Init(self, *args) -> "void":
        """
        * Approximates a BSpline Surface passing through an array of Point. The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D.
        	:param Points:
        	:type Points: TColgp_Array2OfPnt
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        * Approximates a BSpline Surface passing through an array of Points. //! The points will be constructed as follow: P(i,j) = gp_Pnt( X0 + (i-1)*dX , Y0 + (j-1)*dY , ZPoints(i,j) ) //! The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D 4- the parametrization of the surface will verify: S->Value( U, V) = gp_Pnt( U, V, Z(U,V) );
        	:param ZPoints:
        	:type ZPoints: TColStd_Array2OfReal
        	:param X0:
        	:type X0: float
        	:param dX:
        	:type dX: float
        	:param Y0:
        	:type Y0: float
        	:param dY:
        	:type dY: float
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        * Approximates a BSpline Surface passing through an array of Point. The resulting BSpline will have the following properties: 1- his degree will be in the range [Degmin,Degmax] 2- his continuity will be at least <Continuity> 3- the distance from the point <Points> to the BSpline will be lower to Tol3D.
        	:param Points:
        	:type Points: TColgp_Array2OfPnt
        	:param ParType:
        	:type ParType: Approx_ParametrizationType
        	:param DegMin: default value is 3
        	:type DegMin: int
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:param thePeriodic: default value is Standard_False
        	:type thePeriodic: bool
        	:rtype: None
        * Approximates a BSpline Surface passing through an array of point using variational smoothing algorithm, which tries to minimize additional criterium: Weight1*CurveLength + Weight2*Curvature + Weight3*Torsion.
        	:param Points:
        	:type Points: TColgp_Array2OfPnt
        	:param Weight1:
        	:type Weight1: float
        	:param Weight2:
        	:type Weight2: float
        	:param Weight3:
        	:type Weight3: float
        	:param DegMax: default value is 8
        	:type DegMax: int
        	:param Continuity: default value is GeomAbs_C2
        	:type Continuity: GeomAbs_Shape
        	:param Tol3D: default value is 1.0e-3
        	:type Tol3D: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_PointsToBSplineSurface_Init(self, *args)


    def Interpolate(self, *args) -> "void":
        """
        * Interpolates a BSpline Surface passing through an array of Point. The resulting BSpline will have the following properties: 1- his degree will be 3. 2- his continuity will be C2.
        	:param Points:
        	:type Points: TColgp_Array2OfPnt
        	:param thePeriodic: default value is Standard_False
        	:type thePeriodic: bool
        	:rtype: None
        * Interpolates a BSpline Surface passing through an array of Point. The resulting BSpline will have the following properties: 1- his degree will be 3. 2- his continuity will be C2.
        	:param Points:
        	:type Points: TColgp_Array2OfPnt
        	:param ParType:
        	:type ParType: Approx_ParametrizationType
        	:param thePeriodic: default value is Standard_False
        	:type thePeriodic: bool
        	:rtype: None
        * Interpolates a BSpline Surface passing through an array of Points. //! The points will be constructed as follow: P(i,j) = gp_Pnt( X0 + (i-1)*dX , Y0 + (j-1)*dY , ZPoints(i,j) ) //! The resulting BSpline will have the following properties: 1- his degree will be 3 2- his continuity will be C2. 4- the parametrization of the surface will verify: S->Value( U, V) = gp_Pnt( U, V, Z(U,V) );
        	:param ZPoints:
        	:type ZPoints: TColStd_Array2OfReal
        	:param X0:
        	:type X0: float
        	:param dX:
        	:type dX: float
        	:param Y0:
        	:type Y0: float
        	:param dY:
        	:type dY: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_PointsToBSplineSurface_Interpolate(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _GeomAPI.GeomAPI_PointsToBSplineSurface_IsDone(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Geom_BSplineSurface > const &":
        """
        * Returns the approximate BSpline Surface
        	:rtype: opencascade::handle<Geom_BSplineSurface>
        """
        return _GeomAPI.GeomAPI_PointsToBSplineSurface_Surface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAPI.delete_GeomAPI_PointsToBSplineSurface
GeomAPI_PointsToBSplineSurface.Init = new_instancemethod(_GeomAPI.GeomAPI_PointsToBSplineSurface_Init, None, GeomAPI_PointsToBSplineSurface)
GeomAPI_PointsToBSplineSurface.Interpolate = new_instancemethod(_GeomAPI.GeomAPI_PointsToBSplineSurface_Interpolate, None, GeomAPI_PointsToBSplineSurface)
GeomAPI_PointsToBSplineSurface.IsDone = new_instancemethod(_GeomAPI.GeomAPI_PointsToBSplineSurface_IsDone, None, GeomAPI_PointsToBSplineSurface)
GeomAPI_PointsToBSplineSurface.Surface = new_instancemethod(_GeomAPI.GeomAPI_PointsToBSplineSurface_Surface, None, GeomAPI_PointsToBSplineSurface)
GeomAPI_PointsToBSplineSurface_swigregister = _GeomAPI.GeomAPI_PointsToBSplineSurface_swigregister
GeomAPI_PointsToBSplineSurface_swigregister(GeomAPI_PointsToBSplineSurface)

class GeomAPI_ProjectPointOnCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Distance(self, *args) -> "Standard_Real":
        """
        * Computes the distance between the point and its orthogonal projection on the curve. Index is a number of a computed point. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where NbPoints is the number of solution points.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ProjectPointOnCurve_Distance(self, *args)


    def Extrema(self, *args) -> "Extrema_ExtPC const &":
        """
        * return the algorithmic object from Extrema
        	:rtype: Extrema_ExtPC
        """
        return _GeomAPI.GeomAPI_ProjectPointOnCurve_Extrema(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty object. Use an Init function for further initialization.
        	:rtype: None
        * Create the projection of a point <P> on a curve <Curve>
        	:param P:
        	:type P: gp_Pnt
        	:param Curve:
        	:type Curve: Geom_Curve
        	:rtype: None
        * Create the projection of a point <P> on a curve <Curve> limited by the two points of parameter Umin and Usup.
        	:param P:
        	:type P: gp_Pnt
        	:param Curve:
        	:type Curve: Geom_Curve
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        """
        _GeomAPI.GeomAPI_ProjectPointOnCurve_swiginit(self, _GeomAPI.new_GeomAPI_ProjectPointOnCurve(*args))

    def Init(self, *args) -> "void":
        """
        * Init the projection of a point <P> on a curve <Curve>
        	:param P:
        	:type P: gp_Pnt
        	:param Curve:
        	:type Curve: Geom_Curve
        	:rtype: None
        * Init the projection of a point <P> on a curve <Curve> limited by the two points of parameter Umin and Usup.
        	:param P:
        	:type P: gp_Pnt
        	:param Curve:
        	:type Curve: Geom_Curve
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        * Init the projection of a point <P> on a curve <Curve> limited by the two points of parameter Umin and Usup.
        	:param Curve:
        	:type Curve: Geom_Curve
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ProjectPointOnCurve_Init(self, *args)


    def LowerDistance(self, *args) -> "Standard_Real":
        """
        * Computes the distance between the point and its nearest orthogonal projection on the curve. Exceptions: StdFail_NotDone if this algorithm fails.
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ProjectPointOnCurve_LowerDistance(self, *args)


    def LowerDistanceParameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter on the curve of the nearest orthogonal projection of the point. Exceptions: StdFail_NotDone if this algorithm fails.
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ProjectPointOnCurve_LowerDistanceParameter(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of computed orthogonal projection points. Note: if this algorithm fails, NbPoints returns 0.
        	:rtype: int
        """
        return _GeomAPI.GeomAPI_ProjectPointOnCurve_NbPoints(self, *args)


    def NearestPoint(self, *args) -> "gp_Pnt":
        """
        * Returns the nearest orthogonal projection of the point on the curve. Exceptions: StdFail_NotDone if this algorithm fails.
        	:rtype: gp_Pnt
        """
        return _GeomAPI.GeomAPI_ProjectPointOnCurve_NearestPoint(self, *args)


    def Parameter(self, *args) -> "void":
        """
        * Returns the parameter on the curve of the point, which is the orthogonal projection. Index is a number of a computed point. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where NbPoints is the number of solution points.
        	:param Index:
        	:type Index: int
        	:rtype: float
        * Returns the parameter on the curve of the point, which is the orthogonal projection. Index is a number of a computed point. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where NbPoints is the number of solution points.-
        	:param Index:
        	:type Index: int
        	:param U:
        	:type U: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ProjectPointOnCurve_Parameter(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs the projection of a point on the current curve.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ProjectPointOnCurve_Perform(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """
        * Returns the orthogonal projection on the curve. Index is a number of a computed point. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where NbPoints is the number of solution points.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Pnt
        """
        return _GeomAPI.GeomAPI_ProjectPointOnCurve_Point(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAPI.delete_GeomAPI_ProjectPointOnCurve
GeomAPI_ProjectPointOnCurve.Distance = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnCurve_Distance, None, GeomAPI_ProjectPointOnCurve)
GeomAPI_ProjectPointOnCurve.Extrema = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnCurve_Extrema, None, GeomAPI_ProjectPointOnCurve)
GeomAPI_ProjectPointOnCurve.Init = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnCurve_Init, None, GeomAPI_ProjectPointOnCurve)
GeomAPI_ProjectPointOnCurve.LowerDistance = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnCurve_LowerDistance, None, GeomAPI_ProjectPointOnCurve)
GeomAPI_ProjectPointOnCurve.LowerDistanceParameter = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnCurve_LowerDistanceParameter, None, GeomAPI_ProjectPointOnCurve)
GeomAPI_ProjectPointOnCurve.NbPoints = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnCurve_NbPoints, None, GeomAPI_ProjectPointOnCurve)
GeomAPI_ProjectPointOnCurve.NearestPoint = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnCurve_NearestPoint, None, GeomAPI_ProjectPointOnCurve)
GeomAPI_ProjectPointOnCurve.Parameter = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnCurve_Parameter, None, GeomAPI_ProjectPointOnCurve)
GeomAPI_ProjectPointOnCurve.Perform = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnCurve_Perform, None, GeomAPI_ProjectPointOnCurve)
GeomAPI_ProjectPointOnCurve.Point = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnCurve_Point, None, GeomAPI_ProjectPointOnCurve)
GeomAPI_ProjectPointOnCurve_swigregister = _GeomAPI.GeomAPI_ProjectPointOnCurve_swigregister
GeomAPI_ProjectPointOnCurve_swigregister(GeomAPI_ProjectPointOnCurve)

class GeomAPI_ProjectPointOnSurf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Distance(self, *args) -> "Standard_Real":
        """
        * Computes the distance between the point and its orthogonal projection on the surface. Index is a number of a computed point. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where NbPoints is the number of solution points.
        	:param Index:
        	:type Index: int
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_Distance(self, *args)


    def Extrema(self, *args) -> "Extrema_ExtPS const &":
        """
        * return the algorithmic object from Extrema
        	:rtype: Extrema_ExtPS
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_Extrema(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty object. Use the Init function for further initialization.
        	:rtype: None
        * Create the projection of a point <P> on a surface <Surface>
        	:param P:
        	:type P: gp_Pnt
        	:param Surface:
        	:type Surface: Geom_Surface
        	:param Algo: default value is Extrema_ExtAlgo_Grad
        	:type Algo: Extrema_ExtAlgo
        	:rtype: None
        * Create the projection of a point <P> on a surface <Surface> Create the projection of a point <P> on a surface <Surface>. The solution are computed in the domain [Umin,Usup] [Vmin,Vsup] of the surface.
        	:param P:
        	:type P: gp_Pnt
        	:param Surface:
        	:type Surface: Geom_Surface
        	:param Tolerance:
        	:type Tolerance: float
        	:param Algo: default value is Extrema_ExtAlgo_Grad
        	:type Algo: Extrema_ExtAlgo
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param Surface:
        	:type Surface: Geom_Surface
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param Tolerance:
        	:type Tolerance: float
        	:param Algo: default value is Extrema_ExtAlgo_Grad
        	:type Algo: Extrema_ExtAlgo
        	:rtype: None
        * Init the projection of a point <P> on a surface <Surface>
        	:param P:
        	:type P: gp_Pnt
        	:param Surface:
        	:type Surface: Geom_Surface
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param Algo: default value is Extrema_ExtAlgo_Grad
        	:type Algo: Extrema_ExtAlgo
        	:rtype: None
        """
        _GeomAPI.GeomAPI_ProjectPointOnSurf_swiginit(self, _GeomAPI.new_GeomAPI_ProjectPointOnSurf(*args))

    def Init(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:param Surface:
        	:type Surface: Geom_Surface
        	:param Tolerance:
        	:type Tolerance: float
        	:param Algo: default value is Extrema_ExtAlgo_Grad
        	:type Algo: Extrema_ExtAlgo
        	:rtype: None
        * Init the projection of a point <P> on a surface <Surface>. The solution are computed in the domain [Umin,Usup] [Vmin,Vsup] of the surface.
        	:param P:
        	:type P: gp_Pnt
        	:param Surface:
        	:type Surface: Geom_Surface
        	:param Algo: default value is Extrema_ExtAlgo_Grad
        	:type Algo: Extrema_ExtAlgo
        	:rtype: None
        :param P:
        	:type P: gp_Pnt
        	:param Surface:
        	:type Surface: Geom_Surface
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param Tolerance:
        	:type Tolerance: float
        	:param Algo: default value is Extrema_ExtAlgo_Grad
        	:type Algo: Extrema_ExtAlgo
        	:rtype: None
        * Init the projection for many points on a surface <Surface>. The solutions will be computed in the domain [Umin,Usup] [Vmin,Vsup] of the surface.
        	:param P:
        	:type P: gp_Pnt
        	:param Surface:
        	:type Surface: Geom_Surface
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param Algo: default value is Extrema_ExtAlgo_Grad
        	:type Algo: Extrema_ExtAlgo
        	:rtype: None
        :param Surface:
        	:type Surface: Geom_Surface
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param Tolerance:
        	:type Tolerance: float
        	:param Algo: default value is Extrema_ExtAlgo_Grad
        	:type Algo: Extrema_ExtAlgo
        	:rtype: None
        :param Surface:
        	:type Surface: Geom_Surface
        	:param Umin:
        	:type Umin: float
        	:param Usup:
        	:type Usup: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vsup:
        	:type Vsup: float
        	:param Algo: default value is Extrema_ExtAlgo_Grad
        	:type Algo: Extrema_ExtAlgo
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_IsDone(self, *args)


    def LowerDistance(self, *args) -> "Standard_Real":
        """
        * Computes the distance between the point and its nearest orthogonal projection on the surface. Exceptions StdFail_NotDone if projection fails.
        	:rtype: float
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_LowerDistance(self, *args)


    def LowerDistanceParameters(self, *args) -> "void":
        """
        * Returns the parameters (U,V) on the surface of the nearest computed orthogonal projection of the point. Exceptions StdFail_NotDone if projection fails.
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_LowerDistanceParameters(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of computed orthogonal projection points. Note: if projection fails, NbPoints returns 0.
        	:rtype: int
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_NbPoints(self, *args)


    def NearestPoint(self, *args) -> "gp_Pnt":
        """
        * Returns the nearest orthogonal projection of the point on the surface. Exceptions StdFail_NotDone if projection fails.
        	:rtype: gp_Pnt
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_NearestPoint(self, *args)


    def Parameters(self, *args) -> "void":
        """
        * Returns the parameters (U,V) on the surface of the orthogonal projection. Index is a number of a computed point. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where NbPoints is the number of solution points.
        	:param Index:
        	:type Index: int
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_Parameters(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs the projection of a point on the current surface.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_Perform(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """
        * Returns the orthogonal projection on the surface. Index is a number of a computed point. Exceptions Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where NbPoints is the number of solution points.
        	:param Index:
        	:type Index: int
        	:rtype: gp_Pnt
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_Point(self, *args)


    def SetExtremaAlgo(self, *args) -> "void":
        """
        * Sets the Extrema search algorithm - Grad or Tree. By default the Extrema is initialized with Grad algorithm.
        	:param theAlgo:
        	:type theAlgo: Extrema_ExtAlgo
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_SetExtremaAlgo(self, *args)


    def SetExtremaFlag(self, *args) -> "void":
        """
        * Sets the Extrema search flag - MIN or MAX or MINMAX. By default the Extrema is set to search the MinMax solutions.
        	:param theExtFlag:
        	:type theExtFlag: Extrema_ExtFlag
        	:rtype: None
        """
        return _GeomAPI.GeomAPI_ProjectPointOnSurf_SetExtremaFlag(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAPI.delete_GeomAPI_ProjectPointOnSurf
GeomAPI_ProjectPointOnSurf.Distance = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_Distance, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.Extrema = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_Extrema, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.Init = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_Init, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.IsDone = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_IsDone, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.LowerDistance = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_LowerDistance, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.LowerDistanceParameters = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_LowerDistanceParameters, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.NbPoints = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_NbPoints, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.NearestPoint = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_NearestPoint, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.Parameters = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_Parameters, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.Perform = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_Perform, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.Point = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_Point, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.SetExtremaAlgo = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_SetExtremaAlgo, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf.SetExtremaFlag = new_instancemethod(_GeomAPI.GeomAPI_ProjectPointOnSurf_SetExtremaFlag, None, GeomAPI_ProjectPointOnSurf)
GeomAPI_ProjectPointOnSurf_swigregister = _GeomAPI.GeomAPI_ProjectPointOnSurf_swigregister
GeomAPI_ProjectPointOnSurf_swigregister(GeomAPI_ProjectPointOnSurf)



