# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomLProp module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomlprop.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GeomLProp.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomLProp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomLProp')
    _GeomLProp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomLProp', [dirname(__file__)])
        except ImportError:
            import _GeomLProp
            return _GeomLProp
        try:
            _mod = imp.load_module('_GeomLProp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomLProp = swig_import_helper()
    del swig_import_helper
else:
    import _GeomLProp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomLProp.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GeomLProp.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GeomLProp.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GeomLProp.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GeomLProp.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GeomLProp.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GeomLProp.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GeomLProp.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GeomLProp.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GeomLProp.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GeomLProp.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GeomLProp.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GeomLProp.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GeomLProp.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GeomLProp.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GeomLProp.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GeomLProp.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GeomLProp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GeomLProp.process_exception(error, method_name, class_name)
process_exception = _GeomLProp.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
class geomlprop(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Continuity(*args) -> "GeomAbs_Shape":
        """
        * Computes the regularity at the junction between C1 and C2. The booleans r1 and r2 are true if the curves must be taken reversed. The point u1 on C1 and the point u2 on C2 must be confused. tl and ta are the linear and angular tolerance used two compare the derivative.
        	:param C1:
        	:type C1: Geom_Curve
        	:param C2:
        	:type C2: Geom_Curve
        	:param u1:
        	:type u1: float
        	:param u2:
        	:type u2: float
        	:param r1:
        	:type r1: bool
        	:param r2:
        	:type r2: bool
        	:param tl:
        	:type tl: float
        	:param ta:
        	:type ta: float
        	:rtype: GeomAbs_Shape
        * The same as preciding but using the standard tolerances from package Precision.
        	:param C1:
        	:type C1: Geom_Curve
        	:param C2:
        	:type C2: Geom_Curve
        	:param u1:
        	:type u1: float
        	:param u2:
        	:type u2: float
        	:param r1:
        	:type r1: bool
        	:param r2:
        	:type r2: bool
        	:rtype: GeomAbs_Shape
        """
        return _GeomLProp.geomlprop_Continuity(*args)

    Continuity = staticmethod(Continuity)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomLProp.geomlprop_swiginit(self, _GeomLProp.new_geomlprop())
    __swig_destroy__ = _GeomLProp.delete_geomlprop
geomlprop_swigregister = _GeomLProp.geomlprop_swigregister
geomlprop_swigregister(geomlprop)

def geomlprop_Continuity(*args) -> "GeomAbs_Shape":
    """
    * Computes the regularity at the junction between C1 and C2. The booleans r1 and r2 are true if the curves must be taken reversed. The point u1 on C1 and the point u2 on C2 must be confused. tl and ta are the linear and angular tolerance used two compare the derivative.
    	:param C1:
    	:type C1: Geom_Curve
    	:param C2:
    	:type C2: Geom_Curve
    	:param u1:
    	:type u1: float
    	:param u2:
    	:type u2: float
    	:param r1:
    	:type r1: bool
    	:param r2:
    	:type r2: bool
    	:param tl:
    	:type tl: float
    	:param ta:
    	:type ta: float
    	:rtype: GeomAbs_Shape
    * The same as preciding but using the standard tolerances from package Precision.
    	:param C1:
    	:type C1: Geom_Curve
    	:param C2:
    	:type C2: Geom_Curve
    	:param u1:
    	:type u1: float
    	:param u2:
    	:type u2: float
    	:param r1:
    	:type r1: bool
    	:param r2:
    	:type r2: bool
    	:rtype: GeomAbs_Shape
    """
    return _GeomLProp.geomlprop_Continuity(*args)

class GeomLProp_CLProps(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CentreOfCurvature(self, *args) -> "void":
        """
        * Returns the centre of curvature <P>.
        	:param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _GeomLProp.GeomLProp_CLProps_CentreOfCurvature(self, *args)


    def Curvature(self, *args) -> "Standard_Real":
        """
        * Returns the curvature.
        	:rtype: float
        """
        return _GeomLProp.GeomLProp_CLProps_Curvature(self, *args)


    def D1(self, *args) -> "gp_Vec const":
        """
        * Returns the first derivative. The derivative is computed if it has not been yet.
        	:rtype: gp_Vec
        """
        return _GeomLProp.GeomLProp_CLProps_D1(self, *args)


    def D2(self, *args) -> "gp_Vec const":
        """
        * Returns the second derivative. The derivative is computed if it has not been yet.
        	:rtype: gp_Vec
        """
        return _GeomLProp.GeomLProp_CLProps_D2(self, *args)


    def D3(self, *args) -> "gp_Vec const":
        """
        * Returns the third derivative. The derivative is computed if it has not been yet.
        	:rtype: gp_Vec
        """
        return _GeomLProp.GeomLProp_CLProps_D3(self, *args)


    def __init__(self, *args):
        """
        * Initializes the local properties of the curve <C> The current point and the derivatives are computed at the same time, which allows an optimization of the computation time. <N> indicates the maximum number of derivations to be done (0, 1, 2 or 3). For example, to compute only the tangent, N should be equal to 1. <Resolution> is the linear tolerance (it is used to test if a vector is null).
        	:param C:
        	:type C: Geom_Curve
        	:param N:
        	:type N: int
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        * Same as previous constructor but here the parameter is set to the value <U>. All the computations done will be related to <C> and <U>.
        	:param C:
        	:type C: Geom_Curve
        	:param U:
        	:type U: float
        	:param N:
        	:type N: int
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        * Same as previous constructor but here the parameter is set to the value <U> and the curve is set with SetCurve. the curve can have a empty constructor All the computations done will be related to <C> and <U> when the functions 'set' will be done.
        	:param N:
        	:type N: int
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        """
        _GeomLProp.GeomLProp_CLProps_swiginit(self, _GeomLProp.new_GeomLProp_CLProps(*args))

    def IsTangentDefined(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the tangent is defined. For example, the tangent is not defined if the three first derivatives are all null.
        	:rtype: bool
        """
        return _GeomLProp.GeomLProp_CLProps_IsTangentDefined(self, *args)


    def Normal(self, *args) -> "void":
        """
        * Returns the normal direction <N>.
        	:param N:
        	:type N: gp_Dir
        	:rtype: None
        """
        return _GeomLProp.GeomLProp_CLProps_Normal(self, *args)


    def SetCurve(self, *args) -> "void":
        """
        * Initializes the local properties of the curve for the new curve.
        	:param C:
        	:type C: Geom_Curve
        	:rtype: None
        """
        return _GeomLProp.GeomLProp_CLProps_SetCurve(self, *args)


    def SetParameter(self, *args) -> "void":
        """
        * Initializes the local properties of the curve for the parameter value <U>.
        	:param U:
        	:type U: float
        	:rtype: None
        """
        return _GeomLProp.GeomLProp_CLProps_SetParameter(self, *args)


    def Tangent(self, *args) -> "void":
        """
        * output the tangent direction <D>
        	:param D:
        	:type D: gp_Dir
        	:rtype: None
        """
        return _GeomLProp.GeomLProp_CLProps_Tangent(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """
        * Returns the Point.
        	:rtype: gp_Pnt
        """
        return _GeomLProp.GeomLProp_CLProps_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomLProp.delete_GeomLProp_CLProps
GeomLProp_CLProps.CentreOfCurvature = new_instancemethod(_GeomLProp.GeomLProp_CLProps_CentreOfCurvature, None, GeomLProp_CLProps)
GeomLProp_CLProps.Curvature = new_instancemethod(_GeomLProp.GeomLProp_CLProps_Curvature, None, GeomLProp_CLProps)
GeomLProp_CLProps.D1 = new_instancemethod(_GeomLProp.GeomLProp_CLProps_D1, None, GeomLProp_CLProps)
GeomLProp_CLProps.D2 = new_instancemethod(_GeomLProp.GeomLProp_CLProps_D2, None, GeomLProp_CLProps)
GeomLProp_CLProps.D3 = new_instancemethod(_GeomLProp.GeomLProp_CLProps_D3, None, GeomLProp_CLProps)
GeomLProp_CLProps.IsTangentDefined = new_instancemethod(_GeomLProp.GeomLProp_CLProps_IsTangentDefined, None, GeomLProp_CLProps)
GeomLProp_CLProps.Normal = new_instancemethod(_GeomLProp.GeomLProp_CLProps_Normal, None, GeomLProp_CLProps)
GeomLProp_CLProps.SetCurve = new_instancemethod(_GeomLProp.GeomLProp_CLProps_SetCurve, None, GeomLProp_CLProps)
GeomLProp_CLProps.SetParameter = new_instancemethod(_GeomLProp.GeomLProp_CLProps_SetParameter, None, GeomLProp_CLProps)
GeomLProp_CLProps.Tangent = new_instancemethod(_GeomLProp.GeomLProp_CLProps_Tangent, None, GeomLProp_CLProps)
GeomLProp_CLProps.Value = new_instancemethod(_GeomLProp.GeomLProp_CLProps_Value, None, GeomLProp_CLProps)
GeomLProp_CLProps_swigregister = _GeomLProp.GeomLProp_CLProps_swigregister
GeomLProp_CLProps_swigregister(GeomLProp_CLProps)

class GeomLProp_CurveTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Continuity(*args) -> "Standard_Integer":
        """
        * returns the order of continuity of the curve <C>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable. returns 3 : first, second and third are computable.
        	:param C:
        	:type C: Geom_Curve
        	:rtype: int
        """
        return _GeomLProp.GeomLProp_CurveTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def D1(*args) -> "void":
        """
        * Computes the point <P> and first derivative <V1> of parameter <U> on the curve <C>.
        	:param C:
        	:type C: Geom_Curve
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:rtype: void
        """
        return _GeomLProp.GeomLProp_CurveTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args) -> "void":
        """
        * Computes the point <P>, the first derivative <V1> and second derivative <V2> of parameter <U> on the curve <C>.
        	:param C:
        	:type C: Geom_Curve
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:param V2:
        	:type V2: gp_Vec
        	:rtype: void
        """
        return _GeomLProp.GeomLProp_CurveTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args) -> "void":
        """
        * Computes the point <P>, the first derivative <V1>, the second derivative <V2> and third derivative <V3> of parameter <U> on the curve <C>.
        	:param C:
        	:type C: Geom_Curve
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:param V1:
        	:type V1: gp_Vec
        	:param V2:
        	:type V2: gp_Vec
        	:param V3:
        	:type V3: gp_Vec
        	:rtype: void
        """
        return _GeomLProp.GeomLProp_CurveTool_D3(*args)

    D3 = staticmethod(D3)

    def FirstParameter(*args) -> "Standard_Real":
        """
        * returns the first parameter bound of the curve.
        	:param C:
        	:type C: Geom_Curve
        	:rtype: float
        """
        return _GeomLProp.GeomLProp_CurveTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args) -> "Standard_Real":
        """
        * returns the last parameter bound of the curve. FirstParameter must be less than LastParamenter.
        	:param C:
        	:type C: Geom_Curve
        	:rtype: float
        """
        return _GeomLProp.GeomLProp_CurveTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def Value(*args) -> "void":
        """
        * Computes the point <P> of parameter <U> on the curve <C>.
        	:param C:
        	:type C: Geom_Curve
        	:param U:
        	:type U: float
        	:param P:
        	:type P: gp_Pnt
        	:rtype: void
        """
        return _GeomLProp.GeomLProp_CurveTool_Value(*args)

    Value = staticmethod(Value)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomLProp.GeomLProp_CurveTool_swiginit(self, _GeomLProp.new_GeomLProp_CurveTool())
    __swig_destroy__ = _GeomLProp.delete_GeomLProp_CurveTool
GeomLProp_CurveTool_swigregister = _GeomLProp.GeomLProp_CurveTool_swigregister
GeomLProp_CurveTool_swigregister(GeomLProp_CurveTool)

def GeomLProp_CurveTool_Continuity(*args) -> "Standard_Integer":
    """
    * returns the order of continuity of the curve <C>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable. returns 3 : first, second and third are computable.
    	:param C:
    	:type C: Geom_Curve
    	:rtype: int
    """
    return _GeomLProp.GeomLProp_CurveTool_Continuity(*args)

def GeomLProp_CurveTool_D1(*args) -> "void":
    """
    * Computes the point <P> and first derivative <V1> of parameter <U> on the curve <C>.
    	:param C:
    	:type C: Geom_Curve
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt
    	:param V1:
    	:type V1: gp_Vec
    	:rtype: void
    """
    return _GeomLProp.GeomLProp_CurveTool_D1(*args)

def GeomLProp_CurveTool_D2(*args) -> "void":
    """
    * Computes the point <P>, the first derivative <V1> and second derivative <V2> of parameter <U> on the curve <C>.
    	:param C:
    	:type C: Geom_Curve
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt
    	:param V1:
    	:type V1: gp_Vec
    	:param V2:
    	:type V2: gp_Vec
    	:rtype: void
    """
    return _GeomLProp.GeomLProp_CurveTool_D2(*args)

def GeomLProp_CurveTool_D3(*args) -> "void":
    """
    * Computes the point <P>, the first derivative <V1>, the second derivative <V2> and third derivative <V3> of parameter <U> on the curve <C>.
    	:param C:
    	:type C: Geom_Curve
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt
    	:param V1:
    	:type V1: gp_Vec
    	:param V2:
    	:type V2: gp_Vec
    	:param V3:
    	:type V3: gp_Vec
    	:rtype: void
    """
    return _GeomLProp.GeomLProp_CurveTool_D3(*args)

def GeomLProp_CurveTool_FirstParameter(*args) -> "Standard_Real":
    """
    * returns the first parameter bound of the curve.
    	:param C:
    	:type C: Geom_Curve
    	:rtype: float
    """
    return _GeomLProp.GeomLProp_CurveTool_FirstParameter(*args)

def GeomLProp_CurveTool_LastParameter(*args) -> "Standard_Real":
    """
    * returns the last parameter bound of the curve. FirstParameter must be less than LastParamenter.
    	:param C:
    	:type C: Geom_Curve
    	:rtype: float
    """
    return _GeomLProp.GeomLProp_CurveTool_LastParameter(*args)

def GeomLProp_CurveTool_Value(*args) -> "void":
    """
    * Computes the point <P> of parameter <U> on the curve <C>.
    	:param C:
    	:type C: Geom_Curve
    	:param U:
    	:type U: float
    	:param P:
    	:type P: gp_Pnt
    	:rtype: void
    """
    return _GeomLProp.GeomLProp_CurveTool_Value(*args)

class GeomLProp_SLProps(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurvatureDirections(self, *args) -> "void":
        """
        * Returns the direction of the maximum and minimum curvature <MaxD> and <MinD>
        	:param MaxD:
        	:type MaxD: gp_Dir
        	:param MinD:
        	:type MinD: gp_Dir
        	:rtype: None
        """
        return _GeomLProp.GeomLProp_SLProps_CurvatureDirections(self, *args)


    def D1U(self, *args) -> "gp_Vec const":
        """
        * Returns the first U derivative. The derivative is computed if it has not been yet.
        	:rtype: gp_Vec
        """
        return _GeomLProp.GeomLProp_SLProps_D1U(self, *args)


    def D1V(self, *args) -> "gp_Vec const":
        """
        * Returns the first V derivative. The derivative is computed if it has not been yet.
        	:rtype: gp_Vec
        """
        return _GeomLProp.GeomLProp_SLProps_D1V(self, *args)


    def D2U(self, *args) -> "gp_Vec const":
        """
        * Returns the second U derivatives The derivative is computed if it has not been yet.
        	:rtype: gp_Vec
        """
        return _GeomLProp.GeomLProp_SLProps_D2U(self, *args)


    def D2V(self, *args) -> "gp_Vec const":
        """
        * Returns the second V derivative. The derivative is computed if it has not been yet.
        	:rtype: gp_Vec
        """
        return _GeomLProp.GeomLProp_SLProps_D2V(self, *args)


    def DUV(self, *args) -> "gp_Vec const":
        """
        * Returns the second UV cross-derivative. The derivative is computed if it has not been yet.
        	:rtype: gp_Vec
        """
        return _GeomLProp.GeomLProp_SLProps_DUV(self, *args)


    def GaussianCurvature(self, *args) -> "Standard_Real":
        """
        * Returns the Gaussian curvature
        	:rtype: float
        """
        return _GeomLProp.GeomLProp_SLProps_GaussianCurvature(self, *args)


    def __init__(self, *args):
        """
        * Initializes the local properties of the surface <S> for the parameter values (<U>, <V>). The current point and the derivatives are computed at the same time, which allows an optimization of the computation time. <N> indicates the maximum number of derivations to be done (0, 1, or 2). For example, to compute only the tangent, N should be equal to 1. <Resolution> is the linear tolerance (it is used to test if a vector is null).
        	:param S:
        	:type S: Geom_Surface
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param N:
        	:type N: int
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        * idem as previous constructor but without setting the value of parameters <U> and <V>.
        	:param S:
        	:type S: Geom_Surface
        	:param N:
        	:type N: int
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        * idem as previous constructor but without setting the value of parameters <U> and <V> and the surface. the surface can have an empty constructor.
        	:param N:
        	:type N: int
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        """
        _GeomLProp.GeomLProp_SLProps_swiginit(self, _GeomLProp.new_GeomLProp_SLProps(*args))

    def IsCurvatureDefined(self, *args) -> "Standard_Boolean":
        """
        * returns True if the curvature is defined.
        	:rtype: bool
        """
        return _GeomLProp.GeomLProp_SLProps_IsCurvatureDefined(self, *args)


    def IsNormalDefined(self, *args) -> "Standard_Boolean":
        """
        * Tells if the normal is defined.
        	:rtype: bool
        """
        return _GeomLProp.GeomLProp_SLProps_IsNormalDefined(self, *args)


    def IsTangentUDefined(self, *args) -> "Standard_Boolean":
        """
        * returns True if the U tangent is defined. For example, the tangent is not defined if the two first U derivatives are null.
        	:rtype: bool
        """
        return _GeomLProp.GeomLProp_SLProps_IsTangentUDefined(self, *args)


    def IsTangentVDefined(self, *args) -> "Standard_Boolean":
        """
        * returns if the V tangent is defined. For example, the tangent is not defined if the two first V derivatives are null.
        	:rtype: bool
        """
        return _GeomLProp.GeomLProp_SLProps_IsTangentVDefined(self, *args)


    def IsUmbilic(self, *args) -> "Standard_Boolean":
        """
        * returns True if the point is umbilic (i.e. if the curvature is constant).
        	:rtype: bool
        """
        return _GeomLProp.GeomLProp_SLProps_IsUmbilic(self, *args)


    def MaxCurvature(self, *args) -> "Standard_Real":
        """
        * Returns the maximum curvature
        	:rtype: float
        """
        return _GeomLProp.GeomLProp_SLProps_MaxCurvature(self, *args)


    def MeanCurvature(self, *args) -> "Standard_Real":
        """
        * Returns the mean curvature.
        	:rtype: float
        """
        return _GeomLProp.GeomLProp_SLProps_MeanCurvature(self, *args)


    def MinCurvature(self, *args) -> "Standard_Real":
        """
        * Returns the minimum curvature
        	:rtype: float
        """
        return _GeomLProp.GeomLProp_SLProps_MinCurvature(self, *args)


    def Normal(self, *args) -> "gp_Dir const":
        """
        * Returns the normal direction.
        	:rtype: gp_Dir
        """
        return _GeomLProp.GeomLProp_SLProps_Normal(self, *args)


    def SetParameters(self, *args) -> "void":
        """
        * Initializes the local properties of the surface S for the new parameter values (<U>, <V>).
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _GeomLProp.GeomLProp_SLProps_SetParameters(self, *args)


    def SetSurface(self, *args) -> "void":
        """
        * Initializes the local properties of the surface S for the new surface.
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None
        """
        return _GeomLProp.GeomLProp_SLProps_SetSurface(self, *args)


    def TangentU(self, *args) -> "void":
        """
        * Returns the tangent direction <D> on the iso-V.
        	:param D:
        	:type D: gp_Dir
        	:rtype: None
        """
        return _GeomLProp.GeomLProp_SLProps_TangentU(self, *args)


    def TangentV(self, *args) -> "void":
        """
        * Returns the tangent direction <D> on the iso-V.
        	:param D:
        	:type D: gp_Dir
        	:rtype: None
        """
        return _GeomLProp.GeomLProp_SLProps_TangentV(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """
        * Returns the point.
        	:rtype: gp_Pnt
        """
        return _GeomLProp.GeomLProp_SLProps_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomLProp.delete_GeomLProp_SLProps
GeomLProp_SLProps.CurvatureDirections = new_instancemethod(_GeomLProp.GeomLProp_SLProps_CurvatureDirections, None, GeomLProp_SLProps)
GeomLProp_SLProps.D1U = new_instancemethod(_GeomLProp.GeomLProp_SLProps_D1U, None, GeomLProp_SLProps)
GeomLProp_SLProps.D1V = new_instancemethod(_GeomLProp.GeomLProp_SLProps_D1V, None, GeomLProp_SLProps)
GeomLProp_SLProps.D2U = new_instancemethod(_GeomLProp.GeomLProp_SLProps_D2U, None, GeomLProp_SLProps)
GeomLProp_SLProps.D2V = new_instancemethod(_GeomLProp.GeomLProp_SLProps_D2V, None, GeomLProp_SLProps)
GeomLProp_SLProps.DUV = new_instancemethod(_GeomLProp.GeomLProp_SLProps_DUV, None, GeomLProp_SLProps)
GeomLProp_SLProps.GaussianCurvature = new_instancemethod(_GeomLProp.GeomLProp_SLProps_GaussianCurvature, None, GeomLProp_SLProps)
GeomLProp_SLProps.IsCurvatureDefined = new_instancemethod(_GeomLProp.GeomLProp_SLProps_IsCurvatureDefined, None, GeomLProp_SLProps)
GeomLProp_SLProps.IsNormalDefined = new_instancemethod(_GeomLProp.GeomLProp_SLProps_IsNormalDefined, None, GeomLProp_SLProps)
GeomLProp_SLProps.IsTangentUDefined = new_instancemethod(_GeomLProp.GeomLProp_SLProps_IsTangentUDefined, None, GeomLProp_SLProps)
GeomLProp_SLProps.IsTangentVDefined = new_instancemethod(_GeomLProp.GeomLProp_SLProps_IsTangentVDefined, None, GeomLProp_SLProps)
GeomLProp_SLProps.IsUmbilic = new_instancemethod(_GeomLProp.GeomLProp_SLProps_IsUmbilic, None, GeomLProp_SLProps)
GeomLProp_SLProps.MaxCurvature = new_instancemethod(_GeomLProp.GeomLProp_SLProps_MaxCurvature, None, GeomLProp_SLProps)
GeomLProp_SLProps.MeanCurvature = new_instancemethod(_GeomLProp.GeomLProp_SLProps_MeanCurvature, None, GeomLProp_SLProps)
GeomLProp_SLProps.MinCurvature = new_instancemethod(_GeomLProp.GeomLProp_SLProps_MinCurvature, None, GeomLProp_SLProps)
GeomLProp_SLProps.Normal = new_instancemethod(_GeomLProp.GeomLProp_SLProps_Normal, None, GeomLProp_SLProps)
GeomLProp_SLProps.SetParameters = new_instancemethod(_GeomLProp.GeomLProp_SLProps_SetParameters, None, GeomLProp_SLProps)
GeomLProp_SLProps.SetSurface = new_instancemethod(_GeomLProp.GeomLProp_SLProps_SetSurface, None, GeomLProp_SLProps)
GeomLProp_SLProps.TangentU = new_instancemethod(_GeomLProp.GeomLProp_SLProps_TangentU, None, GeomLProp_SLProps)
GeomLProp_SLProps.TangentV = new_instancemethod(_GeomLProp.GeomLProp_SLProps_TangentV, None, GeomLProp_SLProps)
GeomLProp_SLProps.Value = new_instancemethod(_GeomLProp.GeomLProp_SLProps_Value, None, GeomLProp_SLProps)
GeomLProp_SLProps_swigregister = _GeomLProp.GeomLProp_SLProps_swigregister
GeomLProp_SLProps_swigregister(GeomLProp_SLProps)

class GeomLProp_SurfaceTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Bounds(*args) -> "Standard_Real &, Standard_Real &, Standard_Real &, Standard_Real &":
        """
        * returns the bounds of the Surface.
        	:param S:
        	:type S: Geom_Surface
        	:param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:rtype: void
        """
        return _GeomLProp.GeomLProp_SurfaceTool_Bounds(*args)

    Bounds = staticmethod(Bounds)

    def Continuity(*args) -> "Standard_Integer":
        """
        * returns the order of continuity of the Surface <S>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable.
        	:param S:
        	:type S: Geom_Surface
        	:rtype: int
        """
        return _GeomLProp.GeomLProp_SurfaceTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def D1(*args) -> "void":
        """
        * Computes the point <P> and first derivative <D1*> of parameter <U> and <V> on the Surface <S>.
        	:param S:
        	:type S: Geom_Surface
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param P:
        	:type P: gp_Pnt
        	:param D1U:
        	:type D1U: gp_Vec
        	:param D1V:
        	:type D1V: gp_Vec
        	:rtype: void
        """
        return _GeomLProp.GeomLProp_SurfaceTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args) -> "void":
        """
        * Computes the point <P>, the first derivative <D1*> and second derivative <D2*> of parameter <U> and <V> on the Surface <S>.
        	:param S:
        	:type S: Geom_Surface
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param P:
        	:type P: gp_Pnt
        	:param D1U:
        	:type D1U: gp_Vec
        	:param D1V:
        	:type D1V: gp_Vec
        	:param D2U:
        	:type D2U: gp_Vec
        	:param D2V:
        	:type D2V: gp_Vec
        	:param DUV:
        	:type DUV: gp_Vec
        	:rtype: void
        """
        return _GeomLProp.GeomLProp_SurfaceTool_D2(*args)

    D2 = staticmethod(D2)

    def DN(*args) -> "gp_Vec":
        """
        :param S:
        	:type S: Geom_Surface
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param IU:
        	:type IU: int
        	:param IV:
        	:type IV: int
        	:rtype: gp_Vec
        """
        return _GeomLProp.GeomLProp_SurfaceTool_DN(*args)

    DN = staticmethod(DN)

    def Value(*args) -> "void":
        """
        * Computes the point <P> of parameter <U> and <V> on the Surface <S>.
        	:param S:
        	:type S: Geom_Surface
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param P:
        	:type P: gp_Pnt
        	:rtype: void
        """
        return _GeomLProp.GeomLProp_SurfaceTool_Value(*args)

    Value = staticmethod(Value)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomLProp.GeomLProp_SurfaceTool_swiginit(self, _GeomLProp.new_GeomLProp_SurfaceTool())
    __swig_destroy__ = _GeomLProp.delete_GeomLProp_SurfaceTool
GeomLProp_SurfaceTool_swigregister = _GeomLProp.GeomLProp_SurfaceTool_swigregister
GeomLProp_SurfaceTool_swigregister(GeomLProp_SurfaceTool)

def GeomLProp_SurfaceTool_Bounds(*args) -> "Standard_Real &, Standard_Real &, Standard_Real &, Standard_Real &":
    """
    * returns the bounds of the Surface.
    	:param S:
    	:type S: Geom_Surface
    	:param U1:
    	:type U1: float
    	:param V1:
    	:type V1: float
    	:param U2:
    	:type U2: float
    	:param V2:
    	:type V2: float
    	:rtype: void
    """
    return _GeomLProp.GeomLProp_SurfaceTool_Bounds(*args)

def GeomLProp_SurfaceTool_Continuity(*args) -> "Standard_Integer":
    """
    * returns the order of continuity of the Surface <S>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable.
    	:param S:
    	:type S: Geom_Surface
    	:rtype: int
    """
    return _GeomLProp.GeomLProp_SurfaceTool_Continuity(*args)

def GeomLProp_SurfaceTool_D1(*args) -> "void":
    """
    * Computes the point <P> and first derivative <D1*> of parameter <U> and <V> on the Surface <S>.
    	:param S:
    	:type S: Geom_Surface
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:param P:
    	:type P: gp_Pnt
    	:param D1U:
    	:type D1U: gp_Vec
    	:param D1V:
    	:type D1V: gp_Vec
    	:rtype: void
    """
    return _GeomLProp.GeomLProp_SurfaceTool_D1(*args)

def GeomLProp_SurfaceTool_D2(*args) -> "void":
    """
    * Computes the point <P>, the first derivative <D1*> and second derivative <D2*> of parameter <U> and <V> on the Surface <S>.
    	:param S:
    	:type S: Geom_Surface
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:param P:
    	:type P: gp_Pnt
    	:param D1U:
    	:type D1U: gp_Vec
    	:param D1V:
    	:type D1V: gp_Vec
    	:param D2U:
    	:type D2U: gp_Vec
    	:param D2V:
    	:type D2V: gp_Vec
    	:param DUV:
    	:type DUV: gp_Vec
    	:rtype: void
    """
    return _GeomLProp.GeomLProp_SurfaceTool_D2(*args)

def GeomLProp_SurfaceTool_DN(*args) -> "gp_Vec":
    """
    :param S:
    	:type S: Geom_Surface
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:param IU:
    	:type IU: int
    	:param IV:
    	:type IV: int
    	:rtype: gp_Vec
    """
    return _GeomLProp.GeomLProp_SurfaceTool_DN(*args)

def GeomLProp_SurfaceTool_Value(*args) -> "void":
    """
    * Computes the point <P> of parameter <U> and <V> on the Surface <S>.
    	:param S:
    	:type S: Geom_Surface
    	:param U:
    	:type U: float
    	:param V:
    	:type V: float
    	:param P:
    	:type P: gp_Pnt
    	:rtype: void
    """
    return _GeomLProp.GeomLProp_SurfaceTool_Value(*args)



