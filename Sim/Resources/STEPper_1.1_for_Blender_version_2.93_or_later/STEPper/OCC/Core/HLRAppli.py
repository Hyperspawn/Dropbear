# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
HLRAppli module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_hlrappli.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _HLRAppli.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_HLRAppli')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_HLRAppli')
    _HLRAppli = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HLRAppli', [dirname(__file__)])
        except ImportError:
            import _HLRAppli
            return _HLRAppli
        try:
            _mod = imp.load_module('_HLRAppli', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _HLRAppli = swig_import_helper()
    del swig_import_helper
else:
    import _HLRAppli
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRAppli.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_HLRAppli.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_HLRAppli.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_HLRAppli.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_HLRAppli.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_HLRAppli.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_HLRAppli.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_HLRAppli.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_HLRAppli.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_HLRAppli.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_HLRAppli.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_HLRAppli.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_HLRAppli.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_HLRAppli.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_HLRAppli.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_HLRAppli.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_HLRAppli.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _HLRAppli.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _HLRAppli.process_exception(error, method_name, class_name)
process_exception = _HLRAppli.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.HLRBRep
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.HLRAlgo
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.IntRes2d
import OCC.Core.TopTools
import OCC.Core.BRepTopAdaptor
import OCC.Core.IntCurveSurface
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
import OCC.Core.HLRTopoBRep
import OCC.Core.Contap
import OCC.Core.IntCurve
import OCC.Core.Extrema
class HLRAppli_ReflectLines(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetCompoundOf3dEdges(self, *args) -> "TopoDS_Shape":
        """
        * returns resulting compound of lines of specified type and visibility represented by edges in 3d or 2d
        	:param type:
        	:type type: HLRBRep_TypeOfResultingEdge
        	:param visible:
        	:type visible: bool
        	:param In3d:
        	:type In3d: bool
        	:rtype: TopoDS_Shape
        """
        return _HLRAppli.HLRAppli_ReflectLines_GetCompoundOf3dEdges(self, *args)


    def GetResult(self, *args) -> "TopoDS_Shape":
        """
        * returns resulting compound of reflect lines represented by edges in 3d
        	:rtype: TopoDS_Shape
        """
        return _HLRAppli.HLRAppli_ReflectLines_GetResult(self, *args)


    def __init__(self, *args):
        """
        * Constructor
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: None
        """
        _HLRAppli.HLRAppli_ReflectLines_swiginit(self, _HLRAppli.new_HLRAppli_ReflectLines(*args))

    def Perform(self, *args) -> "void":
        """:rtype: None"""
        return _HLRAppli.HLRAppli_ReflectLines_Perform(self, *args)


    def SetAxes(self, *args) -> "void":
        """
        * Sets the normal to the plane of visualisation, the coordinates of the view point and the coordinates of the vertical direction vector.
        	:param Nx:
        	:type Nx: float
        	:param Ny:
        	:type Ny: float
        	:param Nz:
        	:type Nz: float
        	:param XAt:
        	:type XAt: float
        	:param YAt:
        	:type YAt: float
        	:param ZAt:
        	:type ZAt: float
        	:param XUp:
        	:type XUp: float
        	:param YUp:
        	:type YUp: float
        	:param ZUp:
        	:type ZUp: float
        	:rtype: None
        """
        return _HLRAppli.HLRAppli_ReflectLines_SetAxes(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAppli.delete_HLRAppli_ReflectLines
HLRAppli_ReflectLines.GetCompoundOf3dEdges = new_instancemethod(_HLRAppli.HLRAppli_ReflectLines_GetCompoundOf3dEdges, None, HLRAppli_ReflectLines)
HLRAppli_ReflectLines.GetResult = new_instancemethod(_HLRAppli.HLRAppli_ReflectLines_GetResult, None, HLRAppli_ReflectLines)
HLRAppli_ReflectLines.Perform = new_instancemethod(_HLRAppli.HLRAppli_ReflectLines_Perform, None, HLRAppli_ReflectLines)
HLRAppli_ReflectLines.SetAxes = new_instancemethod(_HLRAppli.HLRAppli_ReflectLines_SetAxes, None, HLRAppli_ReflectLines)
HLRAppli_ReflectLines_swigregister = _HLRAppli.HLRAppli_ReflectLines_swigregister
HLRAppli_ReflectLines_swigregister(HLRAppli_ReflectLines)



