# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
HLRTopoBRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_hlrtopobrep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _HLRTopoBRep.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_HLRTopoBRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_HLRTopoBRep')
    _HLRTopoBRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HLRTopoBRep', [dirname(__file__)])
        except ImportError:
            import _HLRTopoBRep
            return _HLRTopoBRep
        try:
            _mod = imp.load_module('_HLRTopoBRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _HLRTopoBRep = swig_import_helper()
    del swig_import_helper
else:
    import _HLRTopoBRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRTopoBRep.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_HLRTopoBRep.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_HLRTopoBRep.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_HLRTopoBRep.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_HLRTopoBRep.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_HLRTopoBRep.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_HLRTopoBRep.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_HLRTopoBRep.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_HLRTopoBRep.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_HLRTopoBRep.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_HLRTopoBRep.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _HLRTopoBRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _HLRTopoBRep.process_exception(error, method_name, class_name)
process_exception = _HLRTopoBRep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Contap
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.IntSurf
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.BRepTopAdaptor
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.TopTools
import OCC.Core.HLRAlgo

def Handle_HLRTopoBRep_OutLiner_Create() -> "opencascade::handle< HLRTopoBRep_OutLiner >":
    return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_Create()
Handle_HLRTopoBRep_OutLiner_Create = _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_Create

def Handle_HLRTopoBRep_OutLiner_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRTopoBRep_OutLiner >":
    return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_DownCast(t)
Handle_HLRTopoBRep_OutLiner_DownCast = _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_DownCast

def Handle_HLRTopoBRep_OutLiner_IsNull(t: 'opencascade::handle< HLRTopoBRep_OutLiner > const &') -> "bool":
    return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_IsNull(t)
Handle_HLRTopoBRep_OutLiner_IsNull = _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_IsNull
class HLRTopoBRep_DataMapOfShapeFaceData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_DataMapOfShapeFaceData(*args))
    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_DataMapOfShapeFaceData
HLRTopoBRep_DataMapOfShapeFaceData.begin = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_begin, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.end = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_end, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.cbegin = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_cbegin, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.cend = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_cend, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Exchange = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Exchange, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Assign = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Assign, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Set = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Set, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.ReSize = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_ReSize, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Bind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Bind, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Bound = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Bound, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.IsBound = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_IsBound, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.UnBind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_UnBind, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Seek = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Seek, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Find = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Find, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.ChangeSeek = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_ChangeSeek, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.ChangeFind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_ChangeFind, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.__call__ = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData___call__, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Clear = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Clear, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData.Size = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_Size, None, HLRTopoBRep_DataMapOfShapeFaceData)
HLRTopoBRep_DataMapOfShapeFaceData_swigregister = _HLRTopoBRep.HLRTopoBRep_DataMapOfShapeFaceData_swigregister
HLRTopoBRep_DataMapOfShapeFaceData_swigregister(HLRTopoBRep_DataMapOfShapeFaceData)

class HLRTopoBRep_ListOfVData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRTopoBRep.HLRTopoBRep_ListOfVData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_ListOfVData(*args))
    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_ListOfVData
HLRTopoBRep_ListOfVData.begin = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_begin, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.end = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_end, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.cbegin = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_cbegin, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.cend = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_cend, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Size = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Size, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Assign = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Assign, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Set = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Set, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Clear = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Clear, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.First = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_First, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Last = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Last, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Append = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Append, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Prepend = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Prepend, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.RemoveFirst = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_RemoveFirst, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Remove = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Remove, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.InsertBefore = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_InsertBefore, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.InsertAfter = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_InsertAfter, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData.Reverse = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListOfVData_Reverse, None, HLRTopoBRep_ListOfVData)
HLRTopoBRep_ListOfVData_swigregister = _HLRTopoBRep.HLRTopoBRep_ListOfVData_swigregister
HLRTopoBRep_ListOfVData_swigregister(HLRTopoBRep_ListOfVData)

class HLRTopoBRep_ListIteratorOfListOfVData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_ListIteratorOfListOfVData(*args))
    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_ListIteratorOfListOfVData
HLRTopoBRep_ListIteratorOfListOfVData.More = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_More, None, HLRTopoBRep_ListIteratorOfListOfVData)
HLRTopoBRep_ListIteratorOfListOfVData.Next = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_Next, None, HLRTopoBRep_ListIteratorOfListOfVData)
HLRTopoBRep_ListIteratorOfListOfVData.Value = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_Value, None, HLRTopoBRep_ListIteratorOfListOfVData)
HLRTopoBRep_ListIteratorOfListOfVData.ChangeValue = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_ChangeValue, None, HLRTopoBRep_ListIteratorOfListOfVData)
HLRTopoBRep_ListIteratorOfListOfVData_swigregister = _HLRTopoBRep.HLRTopoBRep_ListIteratorOfListOfVData_swigregister
HLRTopoBRep_ListIteratorOfListOfVData_swigregister(HLRTopoBRep_ListIteratorOfListOfVData)

class HLRTopoBRep_MapOfShapeListOfVData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_MapOfShapeListOfVData(*args))
    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_MapOfShapeListOfVData
HLRTopoBRep_MapOfShapeListOfVData.begin = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_begin, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.end = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_end, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.cbegin = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_cbegin, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.cend = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_cend, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Exchange = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Exchange, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Assign = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Assign, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Set = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Set, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.ReSize = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_ReSize, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Bind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Bind, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Bound = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Bound, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.IsBound = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_IsBound, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.UnBind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_UnBind, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Seek = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Seek, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Find = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Find, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.ChangeSeek = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_ChangeSeek, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.ChangeFind = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_ChangeFind, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.__call__ = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData___call__, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Clear = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Clear, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData.Size = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_Size, None, HLRTopoBRep_MapOfShapeListOfVData)
HLRTopoBRep_MapOfShapeListOfVData_swigregister = _HLRTopoBRep.HLRTopoBRep_MapOfShapeListOfVData_swigregister
HLRTopoBRep_MapOfShapeListOfVData_swigregister(HLRTopoBRep_MapOfShapeListOfVData)

class HLRTopoBRep_DSFiller(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Insert(*args) -> "void":
        """
        * Stores in <DS> the outlines of <S> using the current outliner and stores the isolines in <DS> using a Hatcher.
        	:param S:
        	:type S: TopoDS_Shape
        	:param FO:
        	:type FO: Contap_Contour
        	:param DS:
        	:type DS: HLRTopoBRep_Data
        	:param MST:
        	:type MST: BRepTopAdaptor_MapOfShapeTool
        	:param nbIso:
        	:type nbIso: int
        	:rtype: void
        """
        return _HLRTopoBRep.HLRTopoBRep_DSFiller_Insert(*args)

    Insert = staticmethod(Insert)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRTopoBRep.HLRTopoBRep_DSFiller_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_DSFiller())
    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_DSFiller
HLRTopoBRep_DSFiller_swigregister = _HLRTopoBRep.HLRTopoBRep_DSFiller_swigregister
HLRTopoBRep_DSFiller_swigregister(HLRTopoBRep_DSFiller)

def HLRTopoBRep_DSFiller_Insert(*args) -> "void":
    """
    * Stores in <DS> the outlines of <S> using the current outliner and stores the isolines in <DS> using a Hatcher.
    	:param S:
    	:type S: TopoDS_Shape
    	:param FO:
    	:type FO: Contap_Contour
    	:param DS:
    	:type DS: HLRTopoBRep_Data
    	:param MST:
    	:type MST: BRepTopAdaptor_MapOfShapeTool
    	:param nbIso:
    	:type nbIso: int
    	:rtype: void
    """
    return _HLRTopoBRep.HLRTopoBRep_DSFiller_Insert(*args)

class HLRTopoBRep_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddIntL(self, *args) -> "TopTools_ListOfShape &":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: TopTools_ListOfShape
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddIntL(self, *args)


    def AddIntV(self, *args) -> "void":
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddIntV(self, *args)


    def AddIsoL(self, *args) -> "TopTools_ListOfShape &":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: TopTools_ListOfShape
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddIsoL(self, *args)


    def AddOldS(self, *args) -> "void":
        """
        :param NewS:
        	:type NewS: TopoDS_Shape
        	:param OldS:
        	:type OldS: TopoDS_Shape
        	:rtype: None
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddOldS(self, *args)


    def AddOutL(self, *args) -> "TopTools_ListOfShape &":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: TopTools_ListOfShape
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddOutL(self, *args)


    def AddOutV(self, *args) -> "void":
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddOutV(self, *args)


    def AddSplE(self, *args) -> "TopTools_ListOfShape &":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: TopTools_ListOfShape
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddSplE(self, *args)


    def Append(self, *args) -> "void":
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:param P:
        	:type P: float
        	:rtype: None
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Append(self, *args)


    def Clean(self, *args) -> "void":
        """
        * Clear of all the data not needed during and after the hiding process.
        	:rtype: None
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Clean(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clear of all the maps.
        	:rtype: None
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Clear(self, *args)


    def Edge(self, *args) -> "TopoDS_Edge const":
        """:rtype: TopoDS_Edge"""
        return _HLRTopoBRep.HLRTopoBRep_Data_Edge(self, *args)


    def EdgeHasSplE(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Edge is split.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_EdgeHasSplE(self, *args)


    def EdgeSplE(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of the edges.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: TopTools_ListOfShape
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_EdgeSplE(self, *args)


    def FaceHasIntL(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Face has internal outline.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceHasIntL(self, *args)


    def FaceHasIsoL(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Face has isolines.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceHasIsoL(self, *args)


    def FaceHasOutL(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Face has outlines on restriction.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceHasOutL(self, *args)


    def FaceIntL(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of the internal OutLines.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: TopTools_ListOfShape
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceIntL(self, *args)


    def FaceIsoL(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of the IsoLines.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: TopTools_ListOfShape
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceIsoL(self, *args)


    def FaceOutL(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of the OutLines on restriction.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: TopTools_ListOfShape
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceOutL(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _HLRTopoBRep.HLRTopoBRep_Data_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_Data(*args))

    def InitEdge(self, *args) -> "void":
        """:rtype: None"""
        return _HLRTopoBRep.HLRTopoBRep_Data_InitEdge(self, *args)


    def InitVertex(self, *args) -> "void":
        """
        * Start an iteration on the vertices of E.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_InitVertex(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        * Insert before the current position.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param P:
        	:type P: float
        	:rtype: None
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_InsertBefore(self, *args)


    def IsIntLFaceEdge(self, *args) -> "Standard_Boolean":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsIntLFaceEdge(self, *args)


    def IsIntV(self, *args) -> "Standard_Boolean":
        """
        * Returns True if V is an internal outline vertex.
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: bool
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsIntV(self, *args)


    def IsIsoLFaceEdge(self, *args) -> "Standard_Boolean":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsIsoLFaceEdge(self, *args)


    def IsOutLFaceEdge(self, *args) -> "Standard_Boolean":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsOutLFaceEdge(self, *args)


    def IsOutV(self, *args) -> "Standard_Boolean":
        """
        * Returns True if V is an outline vertex on a restriction.
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: bool
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsOutV(self, *args)


    def IsSplEEdgeEdge(self, *args) -> "Standard_Boolean":
        """
        :param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:rtype: bool
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsSplEEdgeEdge(self, *args)


    def MoreEdge(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _HLRTopoBRep.HLRTopoBRep_Data_MoreEdge(self, *args)


    def MoreVertex(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _HLRTopoBRep.HLRTopoBRep_Data_MoreVertex(self, *args)


    def NewSOldS(self, *args) -> "TopoDS_Shape":
        """
        :param New:
        	:type New: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _HLRTopoBRep.HLRTopoBRep_Data_NewSOldS(self, *args)


    def NextEdge(self, *args) -> "void":
        """:rtype: None"""
        return _HLRTopoBRep.HLRTopoBRep_Data_NextEdge(self, *args)


    def NextVertex(self, *args) -> "void":
        """:rtype: None"""
        return _HLRTopoBRep.HLRTopoBRep_Data_NextVertex(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _HLRTopoBRep.HLRTopoBRep_Data_Parameter(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex const":
        """:rtype: TopoDS_Vertex"""
        return _HLRTopoBRep.HLRTopoBRep_Data_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_Data
HLRTopoBRep_Data.AddIntL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddIntL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddIntV = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddIntV, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddIsoL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddIsoL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddOldS = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddOldS, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddOutL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddOutL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddOutV = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddOutV, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.AddSplE = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_AddSplE, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.Append = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Append, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.Clean = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Clean, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.Clear = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Clear, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.Edge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Edge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.EdgeHasSplE = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_EdgeHasSplE, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.EdgeSplE = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_EdgeSplE, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceHasIntL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceHasIntL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceHasIsoL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceHasIsoL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceHasOutL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceHasOutL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceIntL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceIntL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceIsoL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceIsoL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.FaceOutL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_FaceOutL, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.InitEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_InitEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.InitVertex = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_InitVertex, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.InsertBefore = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_InsertBefore, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsIntLFaceEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsIntLFaceEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsIntV = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsIntV, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsIsoLFaceEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsIsoLFaceEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsOutLFaceEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsOutLFaceEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsOutV = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsOutV, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.IsSplEEdgeEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_IsSplEEdgeEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.MoreEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_MoreEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.MoreVertex = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_MoreVertex, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.NewSOldS = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_NewSOldS, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.NextEdge = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_NextEdge, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.NextVertex = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_NextVertex, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.Parameter = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Parameter, None, HLRTopoBRep_Data)
HLRTopoBRep_Data.Vertex = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_Data_Vertex, None, HLRTopoBRep_Data)
HLRTopoBRep_Data_swigregister = _HLRTopoBRep.HLRTopoBRep_Data_swigregister
HLRTopoBRep_Data_swigregister(HLRTopoBRep_Data)

class HLRTopoBRep_FaceData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddIntL(self, *args) -> "TopTools_ListOfShape &":
        """:rtype: TopTools_ListOfShape"""
        return _HLRTopoBRep.HLRTopoBRep_FaceData_AddIntL(self, *args)


    def AddIsoL(self, *args) -> "TopTools_ListOfShape &":
        """:rtype: TopTools_ListOfShape"""
        return _HLRTopoBRep.HLRTopoBRep_FaceData_AddIsoL(self, *args)


    def AddOutL(self, *args) -> "TopTools_ListOfShape &":
        """:rtype: TopTools_ListOfShape"""
        return _HLRTopoBRep.HLRTopoBRep_FaceData_AddOutL(self, *args)


    def FaceIntL(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _HLRTopoBRep.HLRTopoBRep_FaceData_FaceIntL(self, *args)


    def FaceIsoL(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _HLRTopoBRep.HLRTopoBRep_FaceData_FaceIsoL(self, *args)


    def FaceOutL(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _HLRTopoBRep.HLRTopoBRep_FaceData_FaceOutL(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _HLRTopoBRep.HLRTopoBRep_FaceData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_FaceData(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_FaceData
HLRTopoBRep_FaceData.AddIntL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_AddIntL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData.AddIsoL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_AddIsoL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData.AddOutL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_AddOutL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData.FaceIntL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_FaceIntL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData.FaceIsoL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_FaceIsoL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData.FaceOutL = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_FaceData_FaceOutL, None, HLRTopoBRep_FaceData)
HLRTopoBRep_FaceData_swigregister = _HLRTopoBRep.HLRTopoBRep_FaceData_swigregister
HLRTopoBRep_FaceData_swigregister(HLRTopoBRep_FaceData)

class HLRTopoBRep_FaceIsoLiner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeIsoLine(*args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param Iso:
        	:type Iso: Geom2d_Line
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Tol:
        	:type Tol: float
        	:param DS:
        	:type DS: HLRTopoBRep_Data
        	:rtype: void
        """
        return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeIsoLine(*args)

    MakeIsoLine = staticmethod(MakeIsoLine)

    def MakeVertex(*args) -> "TopoDS_Vertex":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param P:
        	:type P: gp_Pnt
        	:param Par:
        	:type Par: float
        	:param Tol:
        	:type Tol: float
        	:param DS:
        	:type DS: HLRTopoBRep_Data
        	:rtype: TopoDS_Vertex
        """
        return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeVertex(*args)

    MakeVertex = staticmethod(MakeVertex)

    def Perform(*args) -> "void":
        """
        :param FI:
        	:type FI: int
        	:param F:
        	:type F: TopoDS_Face
        	:param DS:
        	:type DS: HLRTopoBRep_Data
        	:param nbIsos:
        	:type nbIsos: int
        	:rtype: void
        """
        return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_Perform(*args)

    Perform = staticmethod(Perform)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_FaceIsoLiner())
    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_FaceIsoLiner
HLRTopoBRep_FaceIsoLiner_swigregister = _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_swigregister
HLRTopoBRep_FaceIsoLiner_swigregister(HLRTopoBRep_FaceIsoLiner)

def HLRTopoBRep_FaceIsoLiner_MakeIsoLine(*args) -> "void":
    """
    :param F:
    	:type F: TopoDS_Face
    	:param Iso:
    	:type Iso: Geom2d_Line
    	:param V1:
    	:type V1: TopoDS_Vertex
    	:param V2:
    	:type V2: TopoDS_Vertex
    	:param U1:
    	:type U1: float
    	:param U2:
    	:type U2: float
    	:param Tol:
    	:type Tol: float
    	:param DS:
    	:type DS: HLRTopoBRep_Data
    	:rtype: void
    """
    return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeIsoLine(*args)

def HLRTopoBRep_FaceIsoLiner_MakeVertex(*args) -> "TopoDS_Vertex":
    """
    :param E:
    	:type E: TopoDS_Edge
    	:param P:
    	:type P: gp_Pnt
    	:param Par:
    	:type Par: float
    	:param Tol:
    	:type Tol: float
    	:param DS:
    	:type DS: HLRTopoBRep_Data
    	:rtype: TopoDS_Vertex
    """
    return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeVertex(*args)

def HLRTopoBRep_FaceIsoLiner_Perform(*args) -> "void":
    """
    :param FI:
    	:type FI: int
    	:param F:
    	:type F: TopoDS_Face
    	:param DS:
    	:type DS: HLRTopoBRep_Data
    	:param nbIsos:
    	:type nbIsos: int
    	:rtype: void
    """
    return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_Perform(*args)

class HLRTopoBRep_OutLiner(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DataStructure(self, *args) -> "HLRTopoBRep_Data &":
        """:rtype: HLRTopoBRep_Data"""
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_DataStructure(self, *args)


    def Fill(self, *args) -> "void":
        """
        :param P:
        	:type P: HLRAlgo_Projector
        	:param MST:
        	:type MST: BRepTopAdaptor_MapOfShapeTool
        	:param nbIso:
        	:type nbIso: int
        	:rtype: None
        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_Fill(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param OriSh:
        	:type OriSh: TopoDS_Shape
        	:rtype: None
        :param OriS:
        	:type OriS: TopoDS_Shape
        	:param OutS:
        	:type OutS: TopoDS_Shape
        	:rtype: None
        """
        _HLRTopoBRep.HLRTopoBRep_OutLiner_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_OutLiner(*args))

    def OriginalShape(self, *args) -> "TopoDS_Shape":
        """
        :param OriS:
        	:type OriS: TopoDS_Shape
        	:rtype: None
        :rtype: TopoDS_Shape
        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_OriginalShape(self, *args)


    def OutLinedShape(self, *args) -> "TopoDS_Shape":
        """
        :param OutS:
        	:type OutS: TopoDS_Shape
        	:rtype: None
        :rtype: TopoDS_Shape
        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_OutLinedShape(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRTopoBRep_OutLiner_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_OutLiner
HLRTopoBRep_OutLiner.DataStructure = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_OutLiner_DataStructure, None, HLRTopoBRep_OutLiner)
HLRTopoBRep_OutLiner.Fill = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_OutLiner_Fill, None, HLRTopoBRep_OutLiner)
HLRTopoBRep_OutLiner.OriginalShape = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_OutLiner_OriginalShape, None, HLRTopoBRep_OutLiner)
HLRTopoBRep_OutLiner.OutLinedShape = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_OutLiner_OutLinedShape, None, HLRTopoBRep_OutLiner)
HLRTopoBRep_OutLiner_swigregister = _HLRTopoBRep.HLRTopoBRep_OutLiner_swigregister
HLRTopoBRep_OutLiner_swigregister(HLRTopoBRep_OutLiner)

class HLRTopoBRep_VData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param P:
        	:type P: float
        	:param V:
        	:type V: TopoDS_Shape
        	:rtype: None
        """
        _HLRTopoBRep.HLRTopoBRep_VData_swiginit(self, _HLRTopoBRep.new_HLRTopoBRep_VData(*args))

    def Parameter(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _HLRTopoBRep.HLRTopoBRep_VData_Parameter(self, *args)


    def Vertex(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _HLRTopoBRep.HLRTopoBRep_VData_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_VData
HLRTopoBRep_VData.Parameter = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_VData_Parameter, None, HLRTopoBRep_VData)
HLRTopoBRep_VData.Vertex = new_instancemethod(_HLRTopoBRep.HLRTopoBRep_VData_Vertex, None, HLRTopoBRep_VData)
HLRTopoBRep_VData_swigregister = _HLRTopoBRep.HLRTopoBRep_VData_swigregister
HLRTopoBRep_VData_swigregister(HLRTopoBRep_VData)



