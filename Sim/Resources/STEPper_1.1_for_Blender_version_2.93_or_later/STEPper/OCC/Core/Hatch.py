# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Hatch module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_hatch.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Hatch.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Hatch')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Hatch')
    _Hatch = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Hatch', [dirname(__file__)])
        except ImportError:
            import _Hatch
            return _Hatch
        try:
            _mod = imp.load_module('_Hatch', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Hatch = swig_import_helper()
    del swig_import_helper
else:
    import _Hatch
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Hatch.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Hatch.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Hatch.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Hatch.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Hatch.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Hatch.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Hatch.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Hatch.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Hatch.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Hatch.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Hatch.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Hatch.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Hatch.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Hatch.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Hatch.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Hatch.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Hatch.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Hatch.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Hatch.process_exception(error, method_name, class_name)
process_exception = _Hatch.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
Hatch_XLINE = _Hatch.Hatch_XLINE
Hatch_YLINE = _Hatch.Hatch_YLINE
Hatch_ANYLINE = _Hatch.Hatch_ANYLINE
class Hatch_SequenceOfLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Hatch.Hatch_SequenceOfLine_swiginit(self, _Hatch.new_Hatch_SequenceOfLine(*args))
    delNode = staticmethod(_Hatch.Hatch_SequenceOfLine_delNode)
    __swig_destroy__ = _Hatch.delete_Hatch_SequenceOfLine
Hatch_SequenceOfLine.begin = new_instancemethod(_Hatch.Hatch_SequenceOfLine_begin, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.end = new_instancemethod(_Hatch.Hatch_SequenceOfLine_end, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.cbegin = new_instancemethod(_Hatch.Hatch_SequenceOfLine_cbegin, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.cend = new_instancemethod(_Hatch.Hatch_SequenceOfLine_cend, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Size = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Size, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Length = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Length, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Lower = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Lower, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Upper = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Upper, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.IsEmpty = new_instancemethod(_Hatch.Hatch_SequenceOfLine_IsEmpty, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Reverse = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Reverse, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Exchange = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Exchange, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Clear = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Clear, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Assign = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Assign, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Set = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Set, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Remove = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Remove, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Append = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Append, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Prepend = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Prepend, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.InsertBefore = new_instancemethod(_Hatch.Hatch_SequenceOfLine_InsertBefore, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.InsertAfter = new_instancemethod(_Hatch.Hatch_SequenceOfLine_InsertAfter, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Split = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Split, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.First = new_instancemethod(_Hatch.Hatch_SequenceOfLine_First, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.ChangeFirst = new_instancemethod(_Hatch.Hatch_SequenceOfLine_ChangeFirst, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Last = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Last, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.ChangeLast = new_instancemethod(_Hatch.Hatch_SequenceOfLine_ChangeLast, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.Value = new_instancemethod(_Hatch.Hatch_SequenceOfLine_Value, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.ChangeValue = new_instancemethod(_Hatch.Hatch_SequenceOfLine_ChangeValue, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.__call__ = new_instancemethod(_Hatch.Hatch_SequenceOfLine___call__, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine.SetValue = new_instancemethod(_Hatch.Hatch_SequenceOfLine_SetValue, None, Hatch_SequenceOfLine)
Hatch_SequenceOfLine_swigregister = _Hatch.Hatch_SequenceOfLine_swigregister
Hatch_SequenceOfLine_swigregister(Hatch_SequenceOfLine)

def Hatch_SequenceOfLine_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Hatch.Hatch_SequenceOfLine_delNode(theNode, theAl)
Hatch_SequenceOfLine_delNode = _Hatch.Hatch_SequenceOfLine_delNode

class Hatch_SequenceOfParameter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Hatch.Hatch_SequenceOfParameter_swiginit(self, _Hatch.new_Hatch_SequenceOfParameter(*args))
    delNode = staticmethod(_Hatch.Hatch_SequenceOfParameter_delNode)
    __swig_destroy__ = _Hatch.delete_Hatch_SequenceOfParameter
Hatch_SequenceOfParameter.begin = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_begin, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.end = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_end, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.cbegin = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_cbegin, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.cend = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_cend, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Size = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Size, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Length = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Length, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Lower = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Lower, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Upper = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Upper, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.IsEmpty = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_IsEmpty, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Reverse = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Reverse, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Exchange = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Exchange, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Clear = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Clear, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Assign = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Assign, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Set = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Set, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Remove = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Remove, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Append = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Append, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Prepend = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Prepend, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.InsertBefore = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_InsertBefore, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.InsertAfter = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_InsertAfter, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Split = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Split, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.First = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_First, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.ChangeFirst = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_ChangeFirst, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Last = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Last, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.ChangeLast = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_ChangeLast, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.Value = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_Value, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.ChangeValue = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_ChangeValue, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.__call__ = new_instancemethod(_Hatch.Hatch_SequenceOfParameter___call__, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter.SetValue = new_instancemethod(_Hatch.Hatch_SequenceOfParameter_SetValue, None, Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter_swigregister = _Hatch.Hatch_SequenceOfParameter_swigregister
Hatch_SequenceOfParameter_swigregister(Hatch_SequenceOfParameter)

def Hatch_SequenceOfParameter_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Hatch.Hatch_SequenceOfParameter_delNode(theNode, theAl)
Hatch_SequenceOfParameter_delNode = _Hatch.Hatch_SequenceOfParameter_delNode

class Hatch_Hatcher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddLine(self, *args) -> "void":
        """
        * Add a line <L> to be trimmed. <T> the type is only kept from information. It is not used in the computation.
        	:param L:
        	:type L: gp_Lin2d
        	:param T: default value is Hatch_ANYLINE
        	:type T: Hatch_LineForm
        	:rtype: None
        * Add an infinite line on direction <D> at distance <Dist> from the origin to be trimmed. <Dist> may be negative. //! If O is the origin of the 2D plane, and V the vector perpendicular to D (in the direct direction). //! A point P is on the line if : OP dot V = Dist The parameter of P on the line is OP dot D
        	:param D:
        	:type D: gp_Dir2d
        	:param Dist:
        	:type Dist: float
        	:rtype: None
        """
        return _Hatch.Hatch_Hatcher_AddLine(self, *args)


    def AddXLine(self, *args) -> "void":
        """
        * Add an infinite line parallel to the Y-axis at abciss <X>.
        	:param X:
        	:type X: float
        	:rtype: None
        """
        return _Hatch.Hatch_Hatcher_AddXLine(self, *args)


    def AddYLine(self, *args) -> "void":
        """
        * Add an infinite line parallel to the X-axis at ordinate <Y>.
        	:param Y:
        	:type Y: float
        	:rtype: None
        """
        return _Hatch.Hatch_Hatcher_AddYLine(self, *args)


    def Coordinate(self, *args) -> "Standard_Real":
        """
        * Returns the X or Y coordinate of the line of index <I> if it is a X or a Y line.
        	:param I:
        	:type I: int
        	:rtype: float
        """
        return _Hatch.Hatch_Hatcher_Coordinate(self, *args)


    def End(self, *args) -> "Standard_Real":
        """
        * Returns the last parameter of interval <J> on line <I>.
        	:param I:
        	:type I: int
        	:param J:
        	:type J: int
        	:rtype: float
        """
        return _Hatch.Hatch_Hatcher_End(self, *args)


    def EndIndex(self, *args) -> "void":
        """
        * Returns the last Index and Par2 of interval <J> on line <I>.
        	:param I:
        	:type I: int
        	:param J:
        	:type J: int
        	:param Index:
        	:type Index: int
        	:param Par2:
        	:type Par2: float
        	:rtype: None
        """
        return _Hatch.Hatch_Hatcher_EndIndex(self, *args)


    def __init__(self, *args):
        """
        * Returns a empty hatcher. <Tol> is the tolerance for intersections.
        	:param Tol:
        	:type Tol: float
        	:param Oriented: default value is Standard_True
        	:type Oriented: bool
        	:rtype: None
        """
        _Hatch.Hatch_Hatcher_swiginit(self, _Hatch.new_Hatch_Hatcher(*args))

    def IsXLine(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the line of index <I> has a constant X value.
        	:param I:
        	:type I: int
        	:rtype: bool
        """
        return _Hatch.Hatch_Hatcher_IsXLine(self, *args)


    def IsYLine(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the line of index <I> has a constant Y value.
        	:param I:
        	:type I: int
        	:rtype: bool
        """
        return _Hatch.Hatch_Hatcher_IsYLine(self, *args)


    def Line(self, *args) -> "gp_Lin2d const":
        """
        * Returns the line of index <I>.
        	:param I:
        	:type I: int
        	:rtype: gp_Lin2d
        """
        return _Hatch.Hatch_Hatcher_Line(self, *args)


    def LineForm(self, *args) -> "Hatch_LineForm":
        """
        * Returns the type of the line of index <I>.
        	:param I:
        	:type I: int
        	:rtype: Hatch_LineForm
        """
        return _Hatch.Hatch_Hatcher_LineForm(self, *args)


    def NbIntervals(self, *args) -> "Standard_Integer":
        """
        * Returns the total number of intervals on all the lines.
        	:rtype: int
        * Returns the number of intervals on line of index <I>.
        	:param I:
        	:type I: int
        	:rtype: int
        """
        return _Hatch.Hatch_Hatcher_NbIntervals(self, *args)


    def NbLines(self, *args) -> "Standard_Integer":
        """
        * Returns the number of lines.
        	:rtype: int
        """
        return _Hatch.Hatch_Hatcher_NbLines(self, *args)


    def Start(self, *args) -> "Standard_Real":
        """
        * Returns the first parameter of interval <J> on line <I>.
        	:param I:
        	:type I: int
        	:param J:
        	:type J: int
        	:rtype: float
        """
        return _Hatch.Hatch_Hatcher_Start(self, *args)


    def StartIndex(self, *args) -> "void":
        """
        * Returns the first Index and Par2 of interval <J> on line <I>.
        	:param I:
        	:type I: int
        	:param J:
        	:type J: int
        	:param Index:
        	:type Index: int
        	:param Par2:
        	:type Par2: float
        	:rtype: None
        """
        return _Hatch.Hatch_Hatcher_StartIndex(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        :param Tol:
        	:type Tol: float
        	:rtype: None
        :rtype: float
        """
        return _Hatch.Hatch_Hatcher_Tolerance(self, *args)


    def Trim(self, *args) -> "void":
        """
        * Trims the lines at intersections with <L>.
        	:param L:
        	:type L: gp_Lin2d
        	:param Index: default value is 0
        	:type Index: int
        	:rtype: None
        * Trims the lines at intersections with <L> in the parameter range <Start>, <End>
        	:param L:
        	:type L: gp_Lin2d
        	:param Start:
        	:type Start: float
        	:param End:
        	:type End: float
        	:param Index: default value is 0
        	:type Index: int
        	:rtype: None
        * Trims the line at intersection with the oriented segment P1,P2.
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:param Index: default value is 0
        	:type Index: int
        	:rtype: None
        """
        return _Hatch.Hatch_Hatcher_Trim(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Hatcher
Hatch_Hatcher.AddLine = new_instancemethod(_Hatch.Hatch_Hatcher_AddLine, None, Hatch_Hatcher)
Hatch_Hatcher.AddXLine = new_instancemethod(_Hatch.Hatch_Hatcher_AddXLine, None, Hatch_Hatcher)
Hatch_Hatcher.AddYLine = new_instancemethod(_Hatch.Hatch_Hatcher_AddYLine, None, Hatch_Hatcher)
Hatch_Hatcher.Coordinate = new_instancemethod(_Hatch.Hatch_Hatcher_Coordinate, None, Hatch_Hatcher)
Hatch_Hatcher.End = new_instancemethod(_Hatch.Hatch_Hatcher_End, None, Hatch_Hatcher)
Hatch_Hatcher.EndIndex = new_instancemethod(_Hatch.Hatch_Hatcher_EndIndex, None, Hatch_Hatcher)
Hatch_Hatcher.IsXLine = new_instancemethod(_Hatch.Hatch_Hatcher_IsXLine, None, Hatch_Hatcher)
Hatch_Hatcher.IsYLine = new_instancemethod(_Hatch.Hatch_Hatcher_IsYLine, None, Hatch_Hatcher)
Hatch_Hatcher.Line = new_instancemethod(_Hatch.Hatch_Hatcher_Line, None, Hatch_Hatcher)
Hatch_Hatcher.LineForm = new_instancemethod(_Hatch.Hatch_Hatcher_LineForm, None, Hatch_Hatcher)
Hatch_Hatcher.NbIntervals = new_instancemethod(_Hatch.Hatch_Hatcher_NbIntervals, None, Hatch_Hatcher)
Hatch_Hatcher.NbLines = new_instancemethod(_Hatch.Hatch_Hatcher_NbLines, None, Hatch_Hatcher)
Hatch_Hatcher.Start = new_instancemethod(_Hatch.Hatch_Hatcher_Start, None, Hatch_Hatcher)
Hatch_Hatcher.StartIndex = new_instancemethod(_Hatch.Hatch_Hatcher_StartIndex, None, Hatch_Hatcher)
Hatch_Hatcher.Tolerance = new_instancemethod(_Hatch.Hatch_Hatcher_Tolerance, None, Hatch_Hatcher)
Hatch_Hatcher.Trim = new_instancemethod(_Hatch.Hatch_Hatcher_Trim, None, Hatch_Hatcher)
Hatch_Hatcher_swigregister = _Hatch.Hatch_Hatcher_swigregister
Hatch_Hatcher_swigregister(Hatch_Hatcher)

class Hatch_Line(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddIntersection(self, *args) -> "void":
        """
        * Insert a new intersection in the sorted list.
        	:param Par1:
        	:type Par1: float
        	:param Start:
        	:type Start: bool
        	:param Index:
        	:type Index: int
        	:param Par2:
        	:type Par2: float
        	:param theToler:
        	:type theToler: float
        	:rtype: None
        """
        return _Hatch.Hatch_Line_AddIntersection(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param L:
        	:type L: gp_Lin2d
        	:param T:
        	:type T: Hatch_LineForm
        	:rtype: None
        """
        _Hatch.Hatch_Line_swiginit(self, _Hatch.new_Hatch_Line(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Line
Hatch_Line.AddIntersection = new_instancemethod(_Hatch.Hatch_Line_AddIntersection, None, Hatch_Line)
Hatch_Line_swigregister = _Hatch.Hatch_Line_swigregister
Hatch_Line_swigregister(Hatch_Line)

class Hatch_Parameter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None
        :param Par1:
        	:type Par1: float
        	:param Start:
        	:type Start: bool
        	:param Index: default value is 0
        	:type Index: int
        	:param Par2: default value is 0
        	:type Par2: float
        	:rtype: None
        """
        _Hatch.Hatch_Parameter_swiginit(self, _Hatch.new_Hatch_Parameter(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Parameter
Hatch_Parameter_swigregister = _Hatch.Hatch_Parameter_swigregister
Hatch_Parameter_swigregister(Hatch_Parameter)



