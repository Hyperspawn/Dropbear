# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IGESData module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_igesdata.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IGESData.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESData')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESData')
    _IGESData = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESData', [dirname(__file__)])
        except ImportError:
            import _IGESData
            return _IGESData
        try:
            _mod = imp.load_module('_IGESData', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESData = swig_import_helper()
    del swig_import_helper
else:
    import _IGESData
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESData.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IGESData.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IGESData.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IGESData.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IGESData.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IGESData.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IGESData.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IGESData.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IGESData.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IGESData.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IGESData.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IGESData.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IGESData.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IGESData.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IGESData.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IGESData.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IGESData.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IGESData.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IGESData.process_exception(error, method_name, class_name)
process_exception = _IGESData.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
IGESData_ReadDir = _IGESData.IGESData_ReadDir
IGESData_ReadOwn = _IGESData.IGESData_ReadOwn
IGESData_ReadAssocs = _IGESData.IGESData_ReadAssocs
IGESData_ReadProps = _IGESData.IGESData_ReadProps
IGESData_ReadEnd = _IGESData.IGESData_ReadEnd
IGESData_DefNone = _IGESData.IGESData_DefNone
IGESData_DefOne = _IGESData.IGESData_DefOne
IGESData_DefSeveral = _IGESData.IGESData_DefSeveral
IGESData_ErrorOne = _IGESData.IGESData_ErrorOne
IGESData_ErrorSeveral = _IGESData.IGESData_ErrorSeveral
IGESData_EntityOK = _IGESData.IGESData_EntityOK
IGESData_EntityError = _IGESData.IGESData_EntityError
IGESData_ReferenceError = _IGESData.IGESData_ReferenceError
IGESData_TypeError = _IGESData.IGESData_TypeError
IGESData_DefVoid = _IGESData.IGESData_DefVoid
IGESData_DefValue = _IGESData.IGESData_DefValue
IGESData_DefReference = _IGESData.IGESData_DefReference
IGESData_DefAny = _IGESData.IGESData_DefAny
IGESData_ErrorVal = _IGESData.IGESData_ErrorVal
IGESData_ErrorRef = _IGESData.IGESData_ErrorRef

def Handle_IGESData_FileRecognizer_Create() -> "opencascade::handle< IGESData_FileRecognizer >":
    return _IGESData.Handle_IGESData_FileRecognizer_Create()
Handle_IGESData_FileRecognizer_Create = _IGESData.Handle_IGESData_FileRecognizer_Create

def Handle_IGESData_FileRecognizer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_FileRecognizer >":
    return _IGESData.Handle_IGESData_FileRecognizer_DownCast(t)
Handle_IGESData_FileRecognizer_DownCast = _IGESData.Handle_IGESData_FileRecognizer_DownCast

def Handle_IGESData_FileRecognizer_IsNull(t: 'opencascade::handle< IGESData_FileRecognizer > const &') -> "bool":
    return _IGESData.Handle_IGESData_FileRecognizer_IsNull(t)
Handle_IGESData_FileRecognizer_IsNull = _IGESData.Handle_IGESData_FileRecognizer_IsNull

def Handle_IGESData_GeneralModule_Create() -> "opencascade::handle< IGESData_GeneralModule >":
    return _IGESData.Handle_IGESData_GeneralModule_Create()
Handle_IGESData_GeneralModule_Create = _IGESData.Handle_IGESData_GeneralModule_Create

def Handle_IGESData_GeneralModule_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_GeneralModule >":
    return _IGESData.Handle_IGESData_GeneralModule_DownCast(t)
Handle_IGESData_GeneralModule_DownCast = _IGESData.Handle_IGESData_GeneralModule_DownCast

def Handle_IGESData_GeneralModule_IsNull(t: 'opencascade::handle< IGESData_GeneralModule > const &') -> "bool":
    return _IGESData.Handle_IGESData_GeneralModule_IsNull(t)
Handle_IGESData_GeneralModule_IsNull = _IGESData.Handle_IGESData_GeneralModule_IsNull

def Handle_IGESData_GlobalNodeOfSpecificLib_Create() -> "opencascade::handle< IGESData_GlobalNodeOfSpecificLib >":
    return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_Create()
Handle_IGESData_GlobalNodeOfSpecificLib_Create = _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_Create

def Handle_IGESData_GlobalNodeOfSpecificLib_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_GlobalNodeOfSpecificLib >":
    return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_DownCast(t)
Handle_IGESData_GlobalNodeOfSpecificLib_DownCast = _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_DownCast

def Handle_IGESData_GlobalNodeOfSpecificLib_IsNull(t: 'opencascade::handle< IGESData_GlobalNodeOfSpecificLib > const &') -> "bool":
    return _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_IsNull(t)
Handle_IGESData_GlobalNodeOfSpecificLib_IsNull = _IGESData.Handle_IGESData_GlobalNodeOfSpecificLib_IsNull

def Handle_IGESData_GlobalNodeOfWriterLib_Create() -> "opencascade::handle< IGESData_GlobalNodeOfWriterLib >":
    return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_Create()
Handle_IGESData_GlobalNodeOfWriterLib_Create = _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_Create

def Handle_IGESData_GlobalNodeOfWriterLib_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_GlobalNodeOfWriterLib >":
    return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_DownCast(t)
Handle_IGESData_GlobalNodeOfWriterLib_DownCast = _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_DownCast

def Handle_IGESData_GlobalNodeOfWriterLib_IsNull(t: 'opencascade::handle< IGESData_GlobalNodeOfWriterLib > const &') -> "bool":
    return _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_IsNull(t)
Handle_IGESData_GlobalNodeOfWriterLib_IsNull = _IGESData.Handle_IGESData_GlobalNodeOfWriterLib_IsNull

def Handle_IGESData_IGESEntity_Create() -> "opencascade::handle< IGESData_IGESEntity >":
    return _IGESData.Handle_IGESData_IGESEntity_Create()
Handle_IGESData_IGESEntity_Create = _IGESData.Handle_IGESData_IGESEntity_Create

def Handle_IGESData_IGESEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_IGESEntity >":
    return _IGESData.Handle_IGESData_IGESEntity_DownCast(t)
Handle_IGESData_IGESEntity_DownCast = _IGESData.Handle_IGESData_IGESEntity_DownCast

def Handle_IGESData_IGESEntity_IsNull(t: 'opencascade::handle< IGESData_IGESEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_IGESEntity_IsNull(t)
Handle_IGESData_IGESEntity_IsNull = _IGESData.Handle_IGESData_IGESEntity_IsNull

def Handle_IGESData_IGESModel_Create() -> "opencascade::handle< IGESData_IGESModel >":
    return _IGESData.Handle_IGESData_IGESModel_Create()
Handle_IGESData_IGESModel_Create = _IGESData.Handle_IGESData_IGESModel_Create

def Handle_IGESData_IGESModel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_IGESModel >":
    return _IGESData.Handle_IGESData_IGESModel_DownCast(t)
Handle_IGESData_IGESModel_DownCast = _IGESData.Handle_IGESData_IGESModel_DownCast

def Handle_IGESData_IGESModel_IsNull(t: 'opencascade::handle< IGESData_IGESModel > const &') -> "bool":
    return _IGESData.Handle_IGESData_IGESModel_IsNull(t)
Handle_IGESData_IGESModel_IsNull = _IGESData.Handle_IGESData_IGESModel_IsNull

def Handle_IGESData_IGESReaderData_Create() -> "opencascade::handle< IGESData_IGESReaderData >":
    return _IGESData.Handle_IGESData_IGESReaderData_Create()
Handle_IGESData_IGESReaderData_Create = _IGESData.Handle_IGESData_IGESReaderData_Create

def Handle_IGESData_IGESReaderData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_IGESReaderData >":
    return _IGESData.Handle_IGESData_IGESReaderData_DownCast(t)
Handle_IGESData_IGESReaderData_DownCast = _IGESData.Handle_IGESData_IGESReaderData_DownCast

def Handle_IGESData_IGESReaderData_IsNull(t: 'opencascade::handle< IGESData_IGESReaderData > const &') -> "bool":
    return _IGESData.Handle_IGESData_IGESReaderData_IsNull(t)
Handle_IGESData_IGESReaderData_IsNull = _IGESData.Handle_IGESData_IGESReaderData_IsNull

def Handle_IGESData_NodeOfSpecificLib_Create() -> "opencascade::handle< IGESData_NodeOfSpecificLib >":
    return _IGESData.Handle_IGESData_NodeOfSpecificLib_Create()
Handle_IGESData_NodeOfSpecificLib_Create = _IGESData.Handle_IGESData_NodeOfSpecificLib_Create

def Handle_IGESData_NodeOfSpecificLib_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_NodeOfSpecificLib >":
    return _IGESData.Handle_IGESData_NodeOfSpecificLib_DownCast(t)
Handle_IGESData_NodeOfSpecificLib_DownCast = _IGESData.Handle_IGESData_NodeOfSpecificLib_DownCast

def Handle_IGESData_NodeOfSpecificLib_IsNull(t: 'opencascade::handle< IGESData_NodeOfSpecificLib > const &') -> "bool":
    return _IGESData.Handle_IGESData_NodeOfSpecificLib_IsNull(t)
Handle_IGESData_NodeOfSpecificLib_IsNull = _IGESData.Handle_IGESData_NodeOfSpecificLib_IsNull

def Handle_IGESData_NodeOfWriterLib_Create() -> "opencascade::handle< IGESData_NodeOfWriterLib >":
    return _IGESData.Handle_IGESData_NodeOfWriterLib_Create()
Handle_IGESData_NodeOfWriterLib_Create = _IGESData.Handle_IGESData_NodeOfWriterLib_Create

def Handle_IGESData_NodeOfWriterLib_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_NodeOfWriterLib >":
    return _IGESData.Handle_IGESData_NodeOfWriterLib_DownCast(t)
Handle_IGESData_NodeOfWriterLib_DownCast = _IGESData.Handle_IGESData_NodeOfWriterLib_DownCast

def Handle_IGESData_NodeOfWriterLib_IsNull(t: 'opencascade::handle< IGESData_NodeOfWriterLib > const &') -> "bool":
    return _IGESData.Handle_IGESData_NodeOfWriterLib_IsNull(t)
Handle_IGESData_NodeOfWriterLib_IsNull = _IGESData.Handle_IGESData_NodeOfWriterLib_IsNull

def Handle_IGESData_Protocol_Create() -> "opencascade::handle< IGESData_Protocol >":
    return _IGESData.Handle_IGESData_Protocol_Create()
Handle_IGESData_Protocol_Create = _IGESData.Handle_IGESData_Protocol_Create

def Handle_IGESData_Protocol_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_Protocol >":
    return _IGESData.Handle_IGESData_Protocol_DownCast(t)
Handle_IGESData_Protocol_DownCast = _IGESData.Handle_IGESData_Protocol_DownCast

def Handle_IGESData_Protocol_IsNull(t: 'opencascade::handle< IGESData_Protocol > const &') -> "bool":
    return _IGESData.Handle_IGESData_Protocol_IsNull(t)
Handle_IGESData_Protocol_IsNull = _IGESData.Handle_IGESData_Protocol_IsNull

def Handle_IGESData_ReadWriteModule_Create() -> "opencascade::handle< IGESData_ReadWriteModule >":
    return _IGESData.Handle_IGESData_ReadWriteModule_Create()
Handle_IGESData_ReadWriteModule_Create = _IGESData.Handle_IGESData_ReadWriteModule_Create

def Handle_IGESData_ReadWriteModule_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_ReadWriteModule >":
    return _IGESData.Handle_IGESData_ReadWriteModule_DownCast(t)
Handle_IGESData_ReadWriteModule_DownCast = _IGESData.Handle_IGESData_ReadWriteModule_DownCast

def Handle_IGESData_ReadWriteModule_IsNull(t: 'opencascade::handle< IGESData_ReadWriteModule > const &') -> "bool":
    return _IGESData.Handle_IGESData_ReadWriteModule_IsNull(t)
Handle_IGESData_ReadWriteModule_IsNull = _IGESData.Handle_IGESData_ReadWriteModule_IsNull

def Handle_IGESData_SpecificModule_Create() -> "opencascade::handle< IGESData_SpecificModule >":
    return _IGESData.Handle_IGESData_SpecificModule_Create()
Handle_IGESData_SpecificModule_Create = _IGESData.Handle_IGESData_SpecificModule_Create

def Handle_IGESData_SpecificModule_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_SpecificModule >":
    return _IGESData.Handle_IGESData_SpecificModule_DownCast(t)
Handle_IGESData_SpecificModule_DownCast = _IGESData.Handle_IGESData_SpecificModule_DownCast

def Handle_IGESData_SpecificModule_IsNull(t: 'opencascade::handle< IGESData_SpecificModule > const &') -> "bool":
    return _IGESData.Handle_IGESData_SpecificModule_IsNull(t)
Handle_IGESData_SpecificModule_IsNull = _IGESData.Handle_IGESData_SpecificModule_IsNull

def Handle_IGESData_ToolLocation_Create() -> "opencascade::handle< IGESData_ToolLocation >":
    return _IGESData.Handle_IGESData_ToolLocation_Create()
Handle_IGESData_ToolLocation_Create = _IGESData.Handle_IGESData_ToolLocation_Create

def Handle_IGESData_ToolLocation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_ToolLocation >":
    return _IGESData.Handle_IGESData_ToolLocation_DownCast(t)
Handle_IGESData_ToolLocation_DownCast = _IGESData.Handle_IGESData_ToolLocation_DownCast

def Handle_IGESData_ToolLocation_IsNull(t: 'opencascade::handle< IGESData_ToolLocation > const &') -> "bool":
    return _IGESData.Handle_IGESData_ToolLocation_IsNull(t)
Handle_IGESData_ToolLocation_IsNull = _IGESData.Handle_IGESData_ToolLocation_IsNull

def Handle_IGESData_ColorEntity_Create() -> "opencascade::handle< IGESData_ColorEntity >":
    return _IGESData.Handle_IGESData_ColorEntity_Create()
Handle_IGESData_ColorEntity_Create = _IGESData.Handle_IGESData_ColorEntity_Create

def Handle_IGESData_ColorEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_ColorEntity >":
    return _IGESData.Handle_IGESData_ColorEntity_DownCast(t)
Handle_IGESData_ColorEntity_DownCast = _IGESData.Handle_IGESData_ColorEntity_DownCast

def Handle_IGESData_ColorEntity_IsNull(t: 'opencascade::handle< IGESData_ColorEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_ColorEntity_IsNull(t)
Handle_IGESData_ColorEntity_IsNull = _IGESData.Handle_IGESData_ColorEntity_IsNull

def Handle_IGESData_DefaultGeneral_Create() -> "opencascade::handle< IGESData_DefaultGeneral >":
    return _IGESData.Handle_IGESData_DefaultGeneral_Create()
Handle_IGESData_DefaultGeneral_Create = _IGESData.Handle_IGESData_DefaultGeneral_Create

def Handle_IGESData_DefaultGeneral_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_DefaultGeneral >":
    return _IGESData.Handle_IGESData_DefaultGeneral_DownCast(t)
Handle_IGESData_DefaultGeneral_DownCast = _IGESData.Handle_IGESData_DefaultGeneral_DownCast

def Handle_IGESData_DefaultGeneral_IsNull(t: 'opencascade::handle< IGESData_DefaultGeneral > const &') -> "bool":
    return _IGESData.Handle_IGESData_DefaultGeneral_IsNull(t)
Handle_IGESData_DefaultGeneral_IsNull = _IGESData.Handle_IGESData_DefaultGeneral_IsNull

def Handle_IGESData_DefaultSpecific_Create() -> "opencascade::handle< IGESData_DefaultSpecific >":
    return _IGESData.Handle_IGESData_DefaultSpecific_Create()
Handle_IGESData_DefaultSpecific_Create = _IGESData.Handle_IGESData_DefaultSpecific_Create

def Handle_IGESData_DefaultSpecific_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_DefaultSpecific >":
    return _IGESData.Handle_IGESData_DefaultSpecific_DownCast(t)
Handle_IGESData_DefaultSpecific_DownCast = _IGESData.Handle_IGESData_DefaultSpecific_DownCast

def Handle_IGESData_DefaultSpecific_IsNull(t: 'opencascade::handle< IGESData_DefaultSpecific > const &') -> "bool":
    return _IGESData.Handle_IGESData_DefaultSpecific_IsNull(t)
Handle_IGESData_DefaultSpecific_IsNull = _IGESData.Handle_IGESData_DefaultSpecific_IsNull

def Handle_IGESData_FileProtocol_Create() -> "opencascade::handle< IGESData_FileProtocol >":
    return _IGESData.Handle_IGESData_FileProtocol_Create()
Handle_IGESData_FileProtocol_Create = _IGESData.Handle_IGESData_FileProtocol_Create

def Handle_IGESData_FileProtocol_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_FileProtocol >":
    return _IGESData.Handle_IGESData_FileProtocol_DownCast(t)
Handle_IGESData_FileProtocol_DownCast = _IGESData.Handle_IGESData_FileProtocol_DownCast

def Handle_IGESData_FileProtocol_IsNull(t: 'opencascade::handle< IGESData_FileProtocol > const &') -> "bool":
    return _IGESData.Handle_IGESData_FileProtocol_IsNull(t)
Handle_IGESData_FileProtocol_IsNull = _IGESData.Handle_IGESData_FileProtocol_IsNull

def Handle_IGESData_LabelDisplayEntity_Create() -> "opencascade::handle< IGESData_LabelDisplayEntity >":
    return _IGESData.Handle_IGESData_LabelDisplayEntity_Create()
Handle_IGESData_LabelDisplayEntity_Create = _IGESData.Handle_IGESData_LabelDisplayEntity_Create

def Handle_IGESData_LabelDisplayEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_LabelDisplayEntity >":
    return _IGESData.Handle_IGESData_LabelDisplayEntity_DownCast(t)
Handle_IGESData_LabelDisplayEntity_DownCast = _IGESData.Handle_IGESData_LabelDisplayEntity_DownCast

def Handle_IGESData_LabelDisplayEntity_IsNull(t: 'opencascade::handle< IGESData_LabelDisplayEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_LabelDisplayEntity_IsNull(t)
Handle_IGESData_LabelDisplayEntity_IsNull = _IGESData.Handle_IGESData_LabelDisplayEntity_IsNull

def Handle_IGESData_LevelListEntity_Create() -> "opencascade::handle< IGESData_LevelListEntity >":
    return _IGESData.Handle_IGESData_LevelListEntity_Create()
Handle_IGESData_LevelListEntity_Create = _IGESData.Handle_IGESData_LevelListEntity_Create

def Handle_IGESData_LevelListEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_LevelListEntity >":
    return _IGESData.Handle_IGESData_LevelListEntity_DownCast(t)
Handle_IGESData_LevelListEntity_DownCast = _IGESData.Handle_IGESData_LevelListEntity_DownCast

def Handle_IGESData_LevelListEntity_IsNull(t: 'opencascade::handle< IGESData_LevelListEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_LevelListEntity_IsNull(t)
Handle_IGESData_LevelListEntity_IsNull = _IGESData.Handle_IGESData_LevelListEntity_IsNull

def Handle_IGESData_LineFontEntity_Create() -> "opencascade::handle< IGESData_LineFontEntity >":
    return _IGESData.Handle_IGESData_LineFontEntity_Create()
Handle_IGESData_LineFontEntity_Create = _IGESData.Handle_IGESData_LineFontEntity_Create

def Handle_IGESData_LineFontEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_LineFontEntity >":
    return _IGESData.Handle_IGESData_LineFontEntity_DownCast(t)
Handle_IGESData_LineFontEntity_DownCast = _IGESData.Handle_IGESData_LineFontEntity_DownCast

def Handle_IGESData_LineFontEntity_IsNull(t: 'opencascade::handle< IGESData_LineFontEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_LineFontEntity_IsNull(t)
Handle_IGESData_LineFontEntity_IsNull = _IGESData.Handle_IGESData_LineFontEntity_IsNull

def Handle_IGESData_NameEntity_Create() -> "opencascade::handle< IGESData_NameEntity >":
    return _IGESData.Handle_IGESData_NameEntity_Create()
Handle_IGESData_NameEntity_Create = _IGESData.Handle_IGESData_NameEntity_Create

def Handle_IGESData_NameEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_NameEntity >":
    return _IGESData.Handle_IGESData_NameEntity_DownCast(t)
Handle_IGESData_NameEntity_DownCast = _IGESData.Handle_IGESData_NameEntity_DownCast

def Handle_IGESData_NameEntity_IsNull(t: 'opencascade::handle< IGESData_NameEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_NameEntity_IsNull(t)
Handle_IGESData_NameEntity_IsNull = _IGESData.Handle_IGESData_NameEntity_IsNull

def Handle_IGESData_SingleParentEntity_Create() -> "opencascade::handle< IGESData_SingleParentEntity >":
    return _IGESData.Handle_IGESData_SingleParentEntity_Create()
Handle_IGESData_SingleParentEntity_Create = _IGESData.Handle_IGESData_SingleParentEntity_Create

def Handle_IGESData_SingleParentEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_SingleParentEntity >":
    return _IGESData.Handle_IGESData_SingleParentEntity_DownCast(t)
Handle_IGESData_SingleParentEntity_DownCast = _IGESData.Handle_IGESData_SingleParentEntity_DownCast

def Handle_IGESData_SingleParentEntity_IsNull(t: 'opencascade::handle< IGESData_SingleParentEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_SingleParentEntity_IsNull(t)
Handle_IGESData_SingleParentEntity_IsNull = _IGESData.Handle_IGESData_SingleParentEntity_IsNull

def Handle_IGESData_TransfEntity_Create() -> "opencascade::handle< IGESData_TransfEntity >":
    return _IGESData.Handle_IGESData_TransfEntity_Create()
Handle_IGESData_TransfEntity_Create = _IGESData.Handle_IGESData_TransfEntity_Create

def Handle_IGESData_TransfEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_TransfEntity >":
    return _IGESData.Handle_IGESData_TransfEntity_DownCast(t)
Handle_IGESData_TransfEntity_DownCast = _IGESData.Handle_IGESData_TransfEntity_DownCast

def Handle_IGESData_TransfEntity_IsNull(t: 'opencascade::handle< IGESData_TransfEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_TransfEntity_IsNull(t)
Handle_IGESData_TransfEntity_IsNull = _IGESData.Handle_IGESData_TransfEntity_IsNull

def Handle_IGESData_UndefinedEntity_Create() -> "opencascade::handle< IGESData_UndefinedEntity >":
    return _IGESData.Handle_IGESData_UndefinedEntity_Create()
Handle_IGESData_UndefinedEntity_Create = _IGESData.Handle_IGESData_UndefinedEntity_Create

def Handle_IGESData_UndefinedEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_UndefinedEntity >":
    return _IGESData.Handle_IGESData_UndefinedEntity_DownCast(t)
Handle_IGESData_UndefinedEntity_DownCast = _IGESData.Handle_IGESData_UndefinedEntity_DownCast

def Handle_IGESData_UndefinedEntity_IsNull(t: 'opencascade::handle< IGESData_UndefinedEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_UndefinedEntity_IsNull(t)
Handle_IGESData_UndefinedEntity_IsNull = _IGESData.Handle_IGESData_UndefinedEntity_IsNull

def Handle_IGESData_ViewKindEntity_Create() -> "opencascade::handle< IGESData_ViewKindEntity >":
    return _IGESData.Handle_IGESData_ViewKindEntity_Create()
Handle_IGESData_ViewKindEntity_Create = _IGESData.Handle_IGESData_ViewKindEntity_Create

def Handle_IGESData_ViewKindEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_ViewKindEntity >":
    return _IGESData.Handle_IGESData_ViewKindEntity_DownCast(t)
Handle_IGESData_ViewKindEntity_DownCast = _IGESData.Handle_IGESData_ViewKindEntity_DownCast

def Handle_IGESData_ViewKindEntity_IsNull(t: 'opencascade::handle< IGESData_ViewKindEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_ViewKindEntity_IsNull(t)
Handle_IGESData_ViewKindEntity_IsNull = _IGESData.Handle_IGESData_ViewKindEntity_IsNull

def Handle_IGESData_FreeFormatEntity_Create() -> "opencascade::handle< IGESData_FreeFormatEntity >":
    return _IGESData.Handle_IGESData_FreeFormatEntity_Create()
Handle_IGESData_FreeFormatEntity_Create = _IGESData.Handle_IGESData_FreeFormatEntity_Create

def Handle_IGESData_FreeFormatEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_FreeFormatEntity >":
    return _IGESData.Handle_IGESData_FreeFormatEntity_DownCast(t)
Handle_IGESData_FreeFormatEntity_DownCast = _IGESData.Handle_IGESData_FreeFormatEntity_DownCast

def Handle_IGESData_FreeFormatEntity_IsNull(t: 'opencascade::handle< IGESData_FreeFormatEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_FreeFormatEntity_IsNull(t)
Handle_IGESData_FreeFormatEntity_IsNull = _IGESData.Handle_IGESData_FreeFormatEntity_IsNull

def Handle_IGESData_HArray1OfIGESEntity_Create() -> "opencascade::handle< IGESData_HArray1OfIGESEntity >":
    return _IGESData.Handle_IGESData_HArray1OfIGESEntity_Create()
Handle_IGESData_HArray1OfIGESEntity_Create = _IGESData.Handle_IGESData_HArray1OfIGESEntity_Create

def Handle_IGESData_HArray1OfIGESEntity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESData_HArray1OfIGESEntity >":
    return _IGESData.Handle_IGESData_HArray1OfIGESEntity_DownCast(t)
Handle_IGESData_HArray1OfIGESEntity_DownCast = _IGESData.Handle_IGESData_HArray1OfIGESEntity_DownCast

def Handle_IGESData_HArray1OfIGESEntity_IsNull(t: 'opencascade::handle< IGESData_HArray1OfIGESEntity > const &') -> "bool":
    return _IGESData.Handle_IGESData_HArray1OfIGESEntity_IsNull(t)
Handle_IGESData_HArray1OfIGESEntity_IsNull = _IGESData.Handle_IGESData_HArray1OfIGESEntity_IsNull
class IGESData_Array1OfIGESEntity(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IGESData.IGESData_Array1OfIGESEntity_swiginit(self, _IGESData.new_IGESData_Array1OfIGESEntity(*args))
    __swig_destroy__ = _IGESData.delete_IGESData_Array1OfIGESEntity

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

IGESData_Array1OfIGESEntity.begin = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_begin, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.end = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_end, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.cbegin = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_cbegin, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.cend = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_cend, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.Init = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_Init, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.Size = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_Size, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.Length = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_Length, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.IsEmpty = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_IsEmpty, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.Lower = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_Lower, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.Upper = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_Upper, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.IsDeletable = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_IsDeletable, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.IsAllocated = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_IsAllocated, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.Assign = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_Assign, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.Move = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_Move, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.Set = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_Set, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.First = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_First, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.ChangeFirst = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_ChangeFirst, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.Last = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_Last, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.ChangeLast = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_ChangeLast, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.Value = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_Value, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.ChangeValue = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_ChangeValue, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.__call__ = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity___call__, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.SetValue = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_SetValue, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity.Resize = new_instancemethod(_IGESData.IGESData_Array1OfIGESEntity_Resize, None, IGESData_Array1OfIGESEntity)
IGESData_Array1OfIGESEntity_swigregister = _IGESData.IGESData_Array1OfIGESEntity_swigregister
IGESData_Array1OfIGESEntity_swigregister(IGESData_Array1OfIGESEntity)

class IGESData_Array1OfDirPart(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IGESData.IGESData_Array1OfDirPart_swiginit(self, _IGESData.new_IGESData_Array1OfDirPart(*args))
    __swig_destroy__ = _IGESData.delete_IGESData_Array1OfDirPart

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

IGESData_Array1OfDirPart.begin = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_begin, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.end = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_end, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.cbegin = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_cbegin, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.cend = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_cend, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.Init = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_Init, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.Size = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_Size, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.Length = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_Length, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.IsEmpty = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_IsEmpty, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.Lower = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_Lower, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.Upper = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_Upper, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.IsDeletable = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_IsDeletable, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.IsAllocated = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_IsAllocated, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.Assign = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_Assign, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.Move = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_Move, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.Set = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_Set, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.First = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_First, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.ChangeFirst = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_ChangeFirst, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.Last = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_Last, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.ChangeLast = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_ChangeLast, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.Value = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_Value, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.ChangeValue = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_ChangeValue, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.__call__ = new_instancemethod(_IGESData.IGESData_Array1OfDirPart___call__, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.SetValue = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_SetValue, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart.Resize = new_instancemethod(_IGESData.IGESData_Array1OfDirPart_Resize, None, IGESData_Array1OfDirPart)
IGESData_Array1OfDirPart_swigregister = _IGESData.IGESData_Array1OfDirPart_swigregister
IGESData_Array1OfDirPart_swigregister(IGESData_Array1OfDirPart)

class igesdata(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args) -> "void":
        """
        * Prepares General dynamic data used for IGESData specifically : Protocol and Modules, which treat UndefinedEntity
        	:rtype: void
        """
        return _IGESData.igesdata_Init(*args)

    Init = staticmethod(Init)

    def Protocol(*args) -> "opencascade::handle< IGESData_Protocol >":
        """
        * Returns a Protocol from IGESData (avoids to create it)
        	:rtype: opencascade::handle<IGESData_Protocol>
        """
        return _IGESData.igesdata_Protocol(*args)

    Protocol = staticmethod(Protocol)

    __repr__ = _dumps_object


    def __init__(self):
        _IGESData.igesdata_swiginit(self, _IGESData.new_igesdata())
    __swig_destroy__ = _IGESData.delete_igesdata
igesdata_swigregister = _IGESData.igesdata_swigregister
igesdata_swigregister(igesdata)

def igesdata_Init(*args) -> "void":
    """
    * Prepares General dynamic data used for IGESData specifically : Protocol and Modules, which treat UndefinedEntity
    	:rtype: void
    """
    return _IGESData.igesdata_Init(*args)

def igesdata_Protocol(*args) -> "opencascade::handle< IGESData_Protocol >":
    """
    * Returns a Protocol from IGESData (avoids to create it)
    	:rtype: opencascade::handle<IGESData_Protocol>
    """
    return _IGESData.igesdata_Protocol(*args)

class IGESData_BasicEditor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ApplyUnit(self, *args) -> "void":
        """
        * Applies unit value to convert header data : Resolution, MaxCoord, MaxLineWeight Applies unit only once after SetUnit... has been called, if <enforce> is given as True. It can be called just before writing the model to a file, i.e. when definitive values are finally known
        	:param enforce: default value is Standard_False
        	:type enforce: bool
        	:rtype: None
        """
        return _IGESData.IGESData_BasicEditor_ApplyUnit(self, *args)


    def AutoCorrect(self, *args) -> "Standard_Boolean":
        """
        * Performs auto-correction on an IGESEntity Returns True if something has changed, False if nothing done. //! Works with the specific IGES Services : DirChecker which allows to correct data in 'Directory Part' of Entities (such as required values for status, or references to be null), and the specific IGES service OwnCorrect, which is specialised for each type of entity.
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESData.IGESData_BasicEditor_AutoCorrect(self, *args)


    def AutoCorrectModel(self, *args) -> "Standard_Integer":
        """
        * Performs auto-correction on the whole Model Returns the count of modified entities
        	:rtype: int
        """
        return _IGESData.IGESData_BasicEditor_AutoCorrectModel(self, *args)


    def ComputeStatus(self, *args) -> "void":
        """
        * Performs the re-computation of status on the whole model (Subordinate Status and Use Flag of each IGES Entity), which can have required values according the way they are referenced (see definitions of Logical use, Physical use, etc...)
        	:rtype: None
        """
        return _IGESData.IGESData_BasicEditor_ComputeStatus(self, *args)


    def DraftingMax(*args) -> "Standard_Integer":
        """
        * Returns the maximum allowed value for Drafting Flag
        	:rtype: int
        """
        return _IGESData.IGESData_BasicEditor_DraftingMax(*args)

    DraftingMax = staticmethod(DraftingMax)

    def DraftingName(*args) -> "char const *":
        """
        * From the flag of drafting standard, returns name, '' if incorrect
        	:param flag:
        	:type flag: int
        	:rtype: char *
        """
        return _IGESData.IGESData_BasicEditor_DraftingName(*args)

    DraftingName = staticmethod(DraftingName)

    def __init__(self, *args):
        """
        * Creates an empty Basic Editor which should be initialized via Init() method.
        	:rtype: None
        * Creates a Basic Editor, with a new IGESModel, ready to run
        	:param protocol:
        	:type protocol: IGESData_Protocol
        	:rtype: None
        * Creates a Basic Editor for IGES Data, ready to run
        	:param model:
        	:type model: IGESData_IGESModel
        	:param protocol:
        	:type protocol: IGESData_Protocol
        	:rtype: None
        """
        _IGESData.IGESData_BasicEditor_swiginit(self, _IGESData.new_IGESData_BasicEditor(*args))

    def IGESVersionMax(*args) -> "Standard_Integer":
        """
        * Returns the maximum allowed value for IGESVersion Flag
        	:rtype: int
        """
        return _IGESData.IGESData_BasicEditor_IGESVersionMax(*args)

    IGESVersionMax = staticmethod(IGESVersionMax)

    def IGESVersionName(*args) -> "char const *":
        """
        * From the flag of IGES version, returns name, '' if incorrect
        	:param flag:
        	:type flag: int
        	:rtype: char *
        """
        return _IGESData.IGESData_BasicEditor_IGESVersionName(*args)

    IGESVersionName = staticmethod(IGESVersionName)

    def Init(self, *args) -> "void":
        """
        * Initialize a Basic Editor, with a new IGESModel, ready to run
        	:param protocol:
        	:type protocol: IGESData_Protocol
        	:rtype: None
        * Initialize a Basic Editor for IGES Data, ready to run
        	:param model:
        	:type model: IGESData_IGESModel
        	:param protocol:
        	:type protocol: IGESData_Protocol
        	:rtype: None
        """
        return _IGESData.IGESData_BasicEditor_Init(self, *args)


    def Model(self, *args) -> "opencascade::handle< IGESData_IGESModel >":
        """
        * Returns the designated model
        	:rtype: opencascade::handle<IGESData_IGESModel>
        """
        return _IGESData.IGESData_BasicEditor_Model(self, *args)


    def SetUnitFlag(self, *args) -> "Standard_Boolean":
        """
        * Sets a new unit from its flag (param 14 of Global Section) Returns True if done, False if <flag> is incorrect
        	:param flag:
        	:type flag: int
        	:rtype: bool
        """
        return _IGESData.IGESData_BasicEditor_SetUnitFlag(self, *args)


    def SetUnitName(self, *args) -> "Standard_Boolean":
        """
        * Sets a new unit from its name (param 15 of Global Section) Returns True if done, False if <name> is incorrect Remark : if <flag> has been set to 3 (user defined), <name> is then free
        	:param name:
        	:type name: char *
        	:rtype: bool
        """
        return _IGESData.IGESData_BasicEditor_SetUnitName(self, *args)


    def SetUnitValue(self, *args) -> "Standard_Boolean":
        """
        * Sets a new unit from its value in meters (rounded to the closest one, max gap 1%) Returns True if done, False if <val> is too far from a suitable value
        	:param val:
        	:type val: float
        	:rtype: bool
        """
        return _IGESData.IGESData_BasicEditor_SetUnitValue(self, *args)


    def UnitFlagName(*args) -> "char const *":
        """
        * From the flag of unit, determines its name, '' if incorrect
        	:param flag:
        	:type flag: int
        	:rtype: char *
        """
        return _IGESData.IGESData_BasicEditor_UnitFlagName(*args)

    UnitFlagName = staticmethod(UnitFlagName)

    def UnitFlagValue(*args) -> "Standard_Real":
        """
        * From the flag of unit, determines value in MM, 0 if incorrect
        	:param flag:
        	:type flag: int
        	:rtype: float
        """
        return _IGESData.IGESData_BasicEditor_UnitFlagValue(*args)

    UnitFlagValue = staticmethod(UnitFlagValue)

    def UnitNameFlag(*args) -> "Standard_Integer":
        """
        * From the name of unit, computes flag number, 0 if incorrect (in this case, user defined entity remains possible)
        	:param name:
        	:type name: char *
        	:rtype: int
        """
        return _IGESData.IGESData_BasicEditor_UnitNameFlag(*args)

    UnitNameFlag = staticmethod(UnitNameFlag)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_BasicEditor
IGESData_BasicEditor.ApplyUnit = new_instancemethod(_IGESData.IGESData_BasicEditor_ApplyUnit, None, IGESData_BasicEditor)
IGESData_BasicEditor.AutoCorrect = new_instancemethod(_IGESData.IGESData_BasicEditor_AutoCorrect, None, IGESData_BasicEditor)
IGESData_BasicEditor.AutoCorrectModel = new_instancemethod(_IGESData.IGESData_BasicEditor_AutoCorrectModel, None, IGESData_BasicEditor)
IGESData_BasicEditor.ComputeStatus = new_instancemethod(_IGESData.IGESData_BasicEditor_ComputeStatus, None, IGESData_BasicEditor)
IGESData_BasicEditor.Init = new_instancemethod(_IGESData.IGESData_BasicEditor_Init, None, IGESData_BasicEditor)
IGESData_BasicEditor.Model = new_instancemethod(_IGESData.IGESData_BasicEditor_Model, None, IGESData_BasicEditor)
IGESData_BasicEditor.SetUnitFlag = new_instancemethod(_IGESData.IGESData_BasicEditor_SetUnitFlag, None, IGESData_BasicEditor)
IGESData_BasicEditor.SetUnitName = new_instancemethod(_IGESData.IGESData_BasicEditor_SetUnitName, None, IGESData_BasicEditor)
IGESData_BasicEditor.SetUnitValue = new_instancemethod(_IGESData.IGESData_BasicEditor_SetUnitValue, None, IGESData_BasicEditor)
IGESData_BasicEditor_swigregister = _IGESData.IGESData_BasicEditor_swigregister
IGESData_BasicEditor_swigregister(IGESData_BasicEditor)

def IGESData_BasicEditor_DraftingMax(*args) -> "Standard_Integer":
    """
    * Returns the maximum allowed value for Drafting Flag
    	:rtype: int
    """
    return _IGESData.IGESData_BasicEditor_DraftingMax(*args)

def IGESData_BasicEditor_DraftingName(*args) -> "char const *":
    """
    * From the flag of drafting standard, returns name, '' if incorrect
    	:param flag:
    	:type flag: int
    	:rtype: char *
    """
    return _IGESData.IGESData_BasicEditor_DraftingName(*args)

def IGESData_BasicEditor_IGESVersionMax(*args) -> "Standard_Integer":
    """
    * Returns the maximum allowed value for IGESVersion Flag
    	:rtype: int
    """
    return _IGESData.IGESData_BasicEditor_IGESVersionMax(*args)

def IGESData_BasicEditor_IGESVersionName(*args) -> "char const *":
    """
    * From the flag of IGES version, returns name, '' if incorrect
    	:param flag:
    	:type flag: int
    	:rtype: char *
    """
    return _IGESData.IGESData_BasicEditor_IGESVersionName(*args)

def IGESData_BasicEditor_UnitFlagName(*args) -> "char const *":
    """
    * From the flag of unit, determines its name, '' if incorrect
    	:param flag:
    	:type flag: int
    	:rtype: char *
    """
    return _IGESData.IGESData_BasicEditor_UnitFlagName(*args)

def IGESData_BasicEditor_UnitFlagValue(*args) -> "Standard_Real":
    """
    * From the flag of unit, determines value in MM, 0 if incorrect
    	:param flag:
    	:type flag: int
    	:rtype: float
    """
    return _IGESData.IGESData_BasicEditor_UnitFlagValue(*args)

def IGESData_BasicEditor_UnitNameFlag(*args) -> "Standard_Integer":
    """
    * From the name of unit, computes flag number, 0 if incorrect (in this case, user defined entity remains possible)
    	:param name:
    	:type name: char *
    	:rtype: int
    """
    return _IGESData.IGESData_BasicEditor_UnitNameFlag(*args)

class IGESData_DefSwitch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DefType(self, *args) -> "IGESData_DefType":
        """
        * returns DefType status (Void,Reference,Rank)
        	:rtype: IGESData_DefType
        """
        return _IGESData.IGESData_DefSwitch_DefType(self, *args)


    def __init__(self, *args):
        """
        * creates a DefSwitch as Void
        	:rtype: None
        """
        _IGESData.IGESData_DefSwitch_swiginit(self, _IGESData.new_IGESData_DefSwitch(*args))

    def SetRank(self, *args) -> "void":
        """
        * sets DefSwitch to 'Rank' with a Value (in file : Integer > 0)
        	:param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_DefSwitch_SetRank(self, *args)


    def SetReference(self, *args) -> "void":
        """
        * sets DefSwitch to 'Reference' Status (in file : Integer < 0)
        	:rtype: None
        """
        return _IGESData.IGESData_DefSwitch_SetReference(self, *args)


    def SetVoid(self, *args) -> "void":
        """
        * sets DefSwitch to 'Void' status (in file : Integer = 0)
        	:rtype: None
        """
        return _IGESData.IGESData_DefSwitch_SetVoid(self, *args)


    def Value(self, *args) -> "Standard_Integer":
        """
        * returns Value as Integer (sensefull for a Rank)
        	:rtype: int
        """
        return _IGESData.IGESData_DefSwitch_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_DefSwitch
IGESData_DefSwitch.DefType = new_instancemethod(_IGESData.IGESData_DefSwitch_DefType, None, IGESData_DefSwitch)
IGESData_DefSwitch.SetRank = new_instancemethod(_IGESData.IGESData_DefSwitch_SetRank, None, IGESData_DefSwitch)
IGESData_DefSwitch.SetReference = new_instancemethod(_IGESData.IGESData_DefSwitch_SetReference, None, IGESData_DefSwitch)
IGESData_DefSwitch.SetVoid = new_instancemethod(_IGESData.IGESData_DefSwitch_SetVoid, None, IGESData_DefSwitch)
IGESData_DefSwitch.Value = new_instancemethod(_IGESData.IGESData_DefSwitch_Value, None, IGESData_DefSwitch)
IGESData_DefSwitch_swigregister = _IGESData.IGESData_DefSwitch_swigregister
IGESData_DefSwitch_swigregister(IGESData_DefSwitch)

class IGESData_DirChecker(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BlankStatusIgnored(self, *args) -> "void":
        """
        * Sets Blank Status to be ignored (should not be defined, or its value should be 0)
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_BlankStatusIgnored(self, *args)


    def BlankStatusRequired(self, *args) -> "void":
        """
        * Sets Blank Status to be required at a given value
        	:param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_BlankStatusRequired(self, *args)


    def Check(self, *args) -> "void":
        """
        * Performs the Checks on an IGESEntity, according to the recorded criteria In addition, does minimal Checks, such as admitted range for Status, or presence of Error status in some data (Color, ...)
        	:param ach:
        	:type ach: Interface_Check
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_Check(self, *args)


    def CheckTypeAndForm(self, *args) -> "void":
        """
        * Performs a Check only on Values of Type Number and Form Number This allows to do a check on an Entity not yet completely filled but of which Type and Form Number have been already set
        	:param ach:
        	:type ach: Interface_Check
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_CheckTypeAndForm(self, *args)


    def Color(self, *args) -> "void":
        """
        * Sets Color criterium If crit is DefVoid, Ignored : should not be defined If crit is DefAny, Required : must be defined (value or ref) Other values are not taken in account
        	:param crit:
        	:type crit: IGESData_DefType
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_Color(self, *args)


    def Correct(self, *args) -> "Standard_Boolean":
        """
        * Corrects the Directory Entry of an IGES Entity as far as it is possible according recorded criteria without any ambiguity : - if a numeric Status is required a given value, this value is enforced - if an item is required to be Void, or if it recorded as Erroneous, it is cleared (set to Void) - Type Number is enforced - finally Form Number is enforced only if one and only Value is admitted (no range, see Constructors of DirChecker)
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESData.IGESData_DirChecker_Correct(self, *args)


    def GraphicsIgnored(self, *args) -> "void":
        """
        * Sets Graphics data (LineFont, LineWeight, Color, Level, View) to be ignored according value of Hierarchy status : If hierarchy is not given, they are Ignored any way (that is, they should not be defined) If hierarchy is given, Graphics are Ignored if the Hierarchy status has the value given in argument 'hierarchy'
        	:param hierarchy: default value is -1
        	:type hierarchy: int
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_GraphicsIgnored(self, *args)


    def HierarchyStatusIgnored(self, *args) -> "void":
        """
        * Sets Hierarchy Status to be ignored (should not be defined, or its value should be 0)
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_HierarchyStatusIgnored(self, *args)


    def HierarchyStatusRequired(self, *args) -> "void":
        """
        * Sets Hierarchy Status to be required at a given value
        	:param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_HierarchyStatusRequired(self, *args)


    def __init__(self, *args):
        """
        * Returns a DirChecker, with no criterium at all to be checked
        	:rtype: None
        * Returns a DirChecker, with no criterium except Required Type
        	:param atype:
        	:type atype: int
        	:rtype: None
        * Returns a DirChecker, with no criterium except Required values for Type and Form numbers
        	:param atype:
        	:type atype: int
        	:param aform:
        	:type aform: int
        	:rtype: None
        * Returns a DirChecker, with no criterium except Required values for Type number (atype), and Required Range for Form number (which must be between aform1 and aform2 included)
        	:param atype:
        	:type atype: int
        	:param aform1:
        	:type aform1: int
        	:param aform2:
        	:type aform2: int
        	:rtype: None
        """
        _IGESData.IGESData_DirChecker_swiginit(self, _IGESData.new_IGESData_DirChecker(*args))

    def IsSet(self, *args) -> "Standard_Boolean":
        """
        * Returns True if at least one criterium has already been set Allows user to store a DirChecker (static variable) then ask if it has been set before setting it
        	:rtype: bool
        """
        return _IGESData.IGESData_DirChecker_IsSet(self, *args)


    def LineFont(self, *args) -> "void":
        """
        * Sets LineFont criterium If crit is DefVoid, Ignored : should not be defined If crit is DefAny, Required : must be defined (value or ref) If crit is DefValue, Required as a Value (error if Reference) Other values are not taken in account
        	:param crit:
        	:type crit: IGESData_DefType
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_LineFont(self, *args)


    def LineWeight(self, *args) -> "void":
        """
        * Sets LineWeight criterium If crit is DefVoid, Ignored : should not be defined If crit is DefValue, Required Other values are not taken in account
        	:param crit:
        	:type crit: IGESData_DefType
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_LineWeight(self, *args)


    def SetDefault(self, *args) -> "void":
        """
        * Sets a DirChecker with most current criteria, that is : Structure Ignored ( worths call Structure(crit = DefVoid) )
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_SetDefault(self, *args)


    def Structure(self, *args) -> "void":
        """
        * Sets Structure criterium. If crit is DefVoid, Ignored : should not be defined If crit is DefReference, Required : must be defined Other values are not taken in account
        	:param crit:
        	:type crit: IGESData_DefType
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_Structure(self, *args)


    def SubordinateStatusIgnored(self, *args) -> "void":
        """
        * Sets Subordinate Status to be ignored (should not be defined, or its value should be 0)
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_SubordinateStatusIgnored(self, *args)


    def SubordinateStatusRequired(self, *args) -> "void":
        """
        * Sets Subordinate Status to be required at a given value
        	:param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_SubordinateStatusRequired(self, *args)


    def UseFlagIgnored(self, *args) -> "void":
        """
        * Sets Blank Status to be ignored (should not be defined, or its value should be 0)
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_UseFlagIgnored(self, *args)


    def UseFlagRequired(self, *args) -> "void":
        """
        * Sets Blank Status to be required at a given value Give -1 to demand UseFlag not zero (but no precise value req.)
        	:param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_DirChecker_UseFlagRequired(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_DirChecker
IGESData_DirChecker.BlankStatusIgnored = new_instancemethod(_IGESData.IGESData_DirChecker_BlankStatusIgnored, None, IGESData_DirChecker)
IGESData_DirChecker.BlankStatusRequired = new_instancemethod(_IGESData.IGESData_DirChecker_BlankStatusRequired, None, IGESData_DirChecker)
IGESData_DirChecker.Check = new_instancemethod(_IGESData.IGESData_DirChecker_Check, None, IGESData_DirChecker)
IGESData_DirChecker.CheckTypeAndForm = new_instancemethod(_IGESData.IGESData_DirChecker_CheckTypeAndForm, None, IGESData_DirChecker)
IGESData_DirChecker.Color = new_instancemethod(_IGESData.IGESData_DirChecker_Color, None, IGESData_DirChecker)
IGESData_DirChecker.Correct = new_instancemethod(_IGESData.IGESData_DirChecker_Correct, None, IGESData_DirChecker)
IGESData_DirChecker.GraphicsIgnored = new_instancemethod(_IGESData.IGESData_DirChecker_GraphicsIgnored, None, IGESData_DirChecker)
IGESData_DirChecker.HierarchyStatusIgnored = new_instancemethod(_IGESData.IGESData_DirChecker_HierarchyStatusIgnored, None, IGESData_DirChecker)
IGESData_DirChecker.HierarchyStatusRequired = new_instancemethod(_IGESData.IGESData_DirChecker_HierarchyStatusRequired, None, IGESData_DirChecker)
IGESData_DirChecker.IsSet = new_instancemethod(_IGESData.IGESData_DirChecker_IsSet, None, IGESData_DirChecker)
IGESData_DirChecker.LineFont = new_instancemethod(_IGESData.IGESData_DirChecker_LineFont, None, IGESData_DirChecker)
IGESData_DirChecker.LineWeight = new_instancemethod(_IGESData.IGESData_DirChecker_LineWeight, None, IGESData_DirChecker)
IGESData_DirChecker.SetDefault = new_instancemethod(_IGESData.IGESData_DirChecker_SetDefault, None, IGESData_DirChecker)
IGESData_DirChecker.Structure = new_instancemethod(_IGESData.IGESData_DirChecker_Structure, None, IGESData_DirChecker)
IGESData_DirChecker.SubordinateStatusIgnored = new_instancemethod(_IGESData.IGESData_DirChecker_SubordinateStatusIgnored, None, IGESData_DirChecker)
IGESData_DirChecker.SubordinateStatusRequired = new_instancemethod(_IGESData.IGESData_DirChecker_SubordinateStatusRequired, None, IGESData_DirChecker)
IGESData_DirChecker.UseFlagIgnored = new_instancemethod(_IGESData.IGESData_DirChecker_UseFlagIgnored, None, IGESData_DirChecker)
IGESData_DirChecker.UseFlagRequired = new_instancemethod(_IGESData.IGESData_DirChecker_UseFlagRequired, None, IGESData_DirChecker)
IGESData_DirChecker_swigregister = _IGESData.IGESData_DirChecker_swigregister
IGESData_DirChecker_swigregister(IGESData_DirChecker)

class IGESData_DirPart(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * creates an empty DirPart, ready to be filled by Init
        	:rtype: None
        """
        _IGESData.IGESData_DirPart_swiginit(self, _IGESData.new_IGESData_DirPart(*args))

    def Init(self, *args) -> "void":
        """
        * fills DirPart with consistant data read from file
        	:param i1:
        	:type i1: int
        	:param i2:
        	:type i2: int
        	:param i3:
        	:type i3: int
        	:param i4:
        	:type i4: int
        	:param i5:
        	:type i5: int
        	:param i6:
        	:type i6: int
        	:param i7:
        	:type i7: int
        	:param i8:
        	:type i8: int
        	:param i9:
        	:type i9: int
        	:param i19:
        	:type i19: int
        	:param i11:
        	:type i11: int
        	:param i12:
        	:type i12: int
        	:param i13:
        	:type i13: int
        	:param i14:
        	:type i14: int
        	:param i15:
        	:type i15: int
        	:param i16:
        	:type i16: int
        	:param i17:
        	:type i17: int
        	:param res1:
        	:type res1: char *
        	:param res2:
        	:type res2: char *
        	:param label:
        	:type label: char *
        	:param subscript:
        	:type subscript: char *
        	:rtype: None
        """
        return _IGESData.IGESData_DirPart_Init(self, *args)


    def Type(self, *args) -> "IGESData_IGESType":
        """
        * returns 'type' and 'form' info, used to recognize the entity
        	:rtype: IGESData_IGESType
        """
        return _IGESData.IGESData_DirPart_Type(self, *args)


    def Values(self, *args) -> "void":
        """
        * returns values recorded in DirPart (content of cstrings are modified)
        	:param i1:
        	:type i1: int
        	:param i2:
        	:type i2: int
        	:param i3:
        	:type i3: int
        	:param i4:
        	:type i4: int
        	:param i5:
        	:type i5: int
        	:param i6:
        	:type i6: int
        	:param i7:
        	:type i7: int
        	:param i8:
        	:type i8: int
        	:param i9:
        	:type i9: int
        	:param i19:
        	:type i19: int
        	:param i11:
        	:type i11: int
        	:param i12:
        	:type i12: int
        	:param i13:
        	:type i13: int
        	:param i14:
        	:type i14: int
        	:param i15:
        	:type i15: int
        	:param i16:
        	:type i16: int
        	:param i17:
        	:type i17: int
        	:param res1:
        	:type res1: char *
        	:param res2:
        	:type res2: char *
        	:param label:
        	:type label: char *
        	:param subscript:
        	:type subscript: char *
        	:rtype: None
        """
        return _IGESData.IGESData_DirPart_Values(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_DirPart
IGESData_DirPart.Init = new_instancemethod(_IGESData.IGESData_DirPart_Init, None, IGESData_DirPart)
IGESData_DirPart.Type = new_instancemethod(_IGESData.IGESData_DirPart_Type, None, IGESData_DirPart)
IGESData_DirPart.Values = new_instancemethod(_IGESData.IGESData_DirPart_Values, None, IGESData_DirPart)
IGESData_DirPart_swigregister = _IGESData.IGESData_DirPart_swigregister
IGESData_DirPart_swigregister(IGESData_DirPart)

class IGESData_FileRecognizer(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Adds a new Recognizer to the Compound, at the end Several calls to Add work by adding in the order of calls : Hence, when Eval has failed to recognize, Evaluate will call Evaluate from the first added Recognizer if there is one, and to the second if there is still no result, and so on
        	:param reco:
        	:type reco: IGESData_FileRecognizer
        	:rtype: None
        """
        return _IGESData.IGESData_FileRecognizer_Add(self, *args)


    def Evaluate(self, *args) -> "Standard_Boolean":
        """
        * Evaluates if recognition has a result, returns it if yes In case of success, Returns True and puts result in 'res' In case of Failure, simply Returns False Works by calling deferred method Eval, and in case of failure, looks for Added Recognizers to work
        	:param akey:
        	:type akey: IGESData_IGESType
        	:param res:
        	:type res: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESData.IGESData_FileRecognizer_Evaluate(self, *args)


    def Result(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * Returns result of last recognition (call of Evaluate)
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_FileRecognizer_Result(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_FileRecognizer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_FileRecognizer
IGESData_FileRecognizer.Add = new_instancemethod(_IGESData.IGESData_FileRecognizer_Add, None, IGESData_FileRecognizer)
IGESData_FileRecognizer.Evaluate = new_instancemethod(_IGESData.IGESData_FileRecognizer_Evaluate, None, IGESData_FileRecognizer)
IGESData_FileRecognizer.Result = new_instancemethod(_IGESData.IGESData_FileRecognizer_Result, None, IGESData_FileRecognizer)
IGESData_FileRecognizer_swigregister = _IGESData.IGESData_FileRecognizer_swigregister
IGESData_FileRecognizer_swigregister(IGESData_FileRecognizer)

class IGESData_GeneralModule(OCC.Core.Interface.Interface_GeneralModule):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DirChecker(self, *args) -> "IGESData_DirChecker":
        """
        * Returns a DirChecker, specific for each type of Entity (identified by its Case Number) : this DirChecker defines constraints which must be respected by the DirectoryPart
        	:param CN:
        	:type CN: int
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: IGESData_DirChecker
        """
        return _IGESData.IGESData_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args) -> "void":
        """
        * Performs Specific Semantic Check for each type of Entity
        	:param CN:
        	:type CN: int
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param shares:
        	:type shares: Interface_ShareTool
        	:param ach:
        	:type ach: Interface_Check
        	:rtype: void
        """
        return _IGESData.IGESData_GeneralModule_OwnCheckCase(self, *args)


    def OwnCopyCase(self, *args) -> "void":
        """
        * Copies parameters which are specific of each Type of Entity
        	:param CN:
        	:type CN: int
        	:param entfrom:
        	:type entfrom: IGESData_IGESEntity
        	:param entto:
        	:type entto: IGESData_IGESEntity
        	:param TC:
        	:type TC: Interface_CopyTool
        	:rtype: void
        """
        return _IGESData.IGESData_GeneralModule_OwnCopyCase(self, *args)


    def OwnDeleteCase(self, *args) -> "void":
        """
        * Specific preparation for delete, acts on own parameters Default does nothing, to be redefined as required
        	:param CN:
        	:type CN: int
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: void
        """
        return _IGESData.IGESData_GeneralModule_OwnDeleteCase(self, *args)


    def OwnImpliedCase(self, *args) -> "void":
        """
        * Specific list of Entities implied by a given IGESEntity <ent> (in addition to Associativities). By default, there are none, but this method can be redefined as required
        	:param CN:
        	:type CN: int
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param iter:
        	:type iter: Interface_EntityIterator
        	:rtype: void
        """
        return _IGESData.IGESData_GeneralModule_OwnImpliedCase(self, *args)


    def OwnRenewCase(self, *args) -> "void":
        """
        * Renews parameters which are specific of each Type of Entity : the provided default does nothing, but this method may be redefined as required
        	:param CN:
        	:type CN: int
        	:param entfrom:
        	:type entfrom: IGESData_IGESEntity
        	:param entto:
        	:type entto: IGESData_IGESEntity
        	:param TC:
        	:type TC: Interface_CopyTool
        	:rtype: void
        """
        return _IGESData.IGESData_GeneralModule_OwnRenewCase(self, *args)


    def OwnSharedCase(self, *args) -> "void":
        """
        * Lists the Entities shared by a given IGESEntity <ent>, from its specific parameters : specific for each type
        	:param CN:
        	:type CN: int
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param iter:
        	:type iter: Interface_EntityIterator
        	:rtype: void
        """
        return _IGESData.IGESData_GeneralModule_OwnSharedCase(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_GeneralModule_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_GeneralModule
IGESData_GeneralModule.DirChecker = new_instancemethod(_IGESData.IGESData_GeneralModule_DirChecker, None, IGESData_GeneralModule)
IGESData_GeneralModule.OwnCheckCase = new_instancemethod(_IGESData.IGESData_GeneralModule_OwnCheckCase, None, IGESData_GeneralModule)
IGESData_GeneralModule.OwnCopyCase = new_instancemethod(_IGESData.IGESData_GeneralModule_OwnCopyCase, None, IGESData_GeneralModule)
IGESData_GeneralModule.OwnDeleteCase = new_instancemethod(_IGESData.IGESData_GeneralModule_OwnDeleteCase, None, IGESData_GeneralModule)
IGESData_GeneralModule.OwnImpliedCase = new_instancemethod(_IGESData.IGESData_GeneralModule_OwnImpliedCase, None, IGESData_GeneralModule)
IGESData_GeneralModule.OwnRenewCase = new_instancemethod(_IGESData.IGESData_GeneralModule_OwnRenewCase, None, IGESData_GeneralModule)
IGESData_GeneralModule.OwnSharedCase = new_instancemethod(_IGESData.IGESData_GeneralModule_OwnSharedCase, None, IGESData_GeneralModule)
IGESData_GeneralModule_swigregister = _IGESData.IGESData_GeneralModule_swigregister
IGESData_GeneralModule_swigregister(IGESData_GeneralModule)

class IGESData_GlobalNodeOfSpecificLib(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Adds a Module bound with a Protocol to the list : does nothing if already in the list, THAT IS, Same Type (exact match) and Same State (that is, IsEqual is not required) Once added, stores its attached Protocol in correspondance
        	:param amodule:
        	:type amodule: IGESData_SpecificModule
        	:param aprotocol:
        	:type aprotocol: IGESData_Protocol
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalNodeOfSpecificLib_Add(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty GlobalNode, with no Next
        	:rtype: None
        """
        _IGESData.IGESData_GlobalNodeOfSpecificLib_swiginit(self, _IGESData.new_IGESData_GlobalNodeOfSpecificLib(*args))

    def Module(self, *args) -> "opencascade::handle< IGESData_SpecificModule > const &":
        """
        * Returns the Module stored in a given GlobalNode
        	:rtype: opencascade::handle<IGESData_SpecificModule>
        """
        return _IGESData.IGESData_GlobalNodeOfSpecificLib_Module(self, *args)


    def Next(self, *args) -> "opencascade::handle< IGESData_GlobalNodeOfSpecificLib > const &":
        """
        * Returns the Next GlobalNode. If none is defined, returned value is a Null Handle
        	:rtype: opencascade::handle<IGESData_GlobalNodeOfSpecificLib>
        """
        return _IGESData.IGESData_GlobalNodeOfSpecificLib_Next(self, *args)


    def Protocol(self, *args) -> "opencascade::handle< IGESData_Protocol > const &":
        """
        * Returns the attached Protocol stored in a given GlobalNode
        	:rtype: opencascade::handle<IGESData_Protocol>
        """
        return _IGESData.IGESData_GlobalNodeOfSpecificLib_Protocol(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_GlobalNodeOfSpecificLib_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_GlobalNodeOfSpecificLib
IGESData_GlobalNodeOfSpecificLib.Add = new_instancemethod(_IGESData.IGESData_GlobalNodeOfSpecificLib_Add, None, IGESData_GlobalNodeOfSpecificLib)
IGESData_GlobalNodeOfSpecificLib.Module = new_instancemethod(_IGESData.IGESData_GlobalNodeOfSpecificLib_Module, None, IGESData_GlobalNodeOfSpecificLib)
IGESData_GlobalNodeOfSpecificLib.Next = new_instancemethod(_IGESData.IGESData_GlobalNodeOfSpecificLib_Next, None, IGESData_GlobalNodeOfSpecificLib)
IGESData_GlobalNodeOfSpecificLib.Protocol = new_instancemethod(_IGESData.IGESData_GlobalNodeOfSpecificLib_Protocol, None, IGESData_GlobalNodeOfSpecificLib)
IGESData_GlobalNodeOfSpecificLib_swigregister = _IGESData.IGESData_GlobalNodeOfSpecificLib_swigregister
IGESData_GlobalNodeOfSpecificLib_swigregister(IGESData_GlobalNodeOfSpecificLib)

class IGESData_GlobalNodeOfWriterLib(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Adds a Module bound with a Protocol to the list : does nothing if already in the list, THAT IS, Same Type (exact match) and Same State (that is, IsEqual is not required) Once added, stores its attached Protocol in correspondance
        	:param amodule:
        	:type amodule: IGESData_ReadWriteModule
        	:param aprotocol:
        	:type aprotocol: IGESData_Protocol
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalNodeOfWriterLib_Add(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty GlobalNode, with no Next
        	:rtype: None
        """
        _IGESData.IGESData_GlobalNodeOfWriterLib_swiginit(self, _IGESData.new_IGESData_GlobalNodeOfWriterLib(*args))

    def Module(self, *args) -> "opencascade::handle< IGESData_ReadWriteModule > const &":
        """
        * Returns the Module stored in a given GlobalNode
        	:rtype: opencascade::handle<IGESData_ReadWriteModule>
        """
        return _IGESData.IGESData_GlobalNodeOfWriterLib_Module(self, *args)


    def Next(self, *args) -> "opencascade::handle< IGESData_GlobalNodeOfWriterLib > const &":
        """
        * Returns the Next GlobalNode. If none is defined, returned value is a Null Handle
        	:rtype: opencascade::handle<IGESData_GlobalNodeOfWriterLib>
        """
        return _IGESData.IGESData_GlobalNodeOfWriterLib_Next(self, *args)


    def Protocol(self, *args) -> "opencascade::handle< IGESData_Protocol > const &":
        """
        * Returns the attached Protocol stored in a given GlobalNode
        	:rtype: opencascade::handle<IGESData_Protocol>
        """
        return _IGESData.IGESData_GlobalNodeOfWriterLib_Protocol(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_GlobalNodeOfWriterLib_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_GlobalNodeOfWriterLib
IGESData_GlobalNodeOfWriterLib.Add = new_instancemethod(_IGESData.IGESData_GlobalNodeOfWriterLib_Add, None, IGESData_GlobalNodeOfWriterLib)
IGESData_GlobalNodeOfWriterLib.Module = new_instancemethod(_IGESData.IGESData_GlobalNodeOfWriterLib_Module, None, IGESData_GlobalNodeOfWriterLib)
IGESData_GlobalNodeOfWriterLib.Next = new_instancemethod(_IGESData.IGESData_GlobalNodeOfWriterLib_Next, None, IGESData_GlobalNodeOfWriterLib)
IGESData_GlobalNodeOfWriterLib.Protocol = new_instancemethod(_IGESData.IGESData_GlobalNodeOfWriterLib_Protocol, None, IGESData_GlobalNodeOfWriterLib)
IGESData_GlobalNodeOfWriterLib_swigregister = _IGESData.IGESData_GlobalNodeOfWriterLib_swigregister
IGESData_GlobalNodeOfWriterLib_swigregister(IGESData_GlobalNodeOfWriterLib)

class IGESData_GlobalSection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ApplicationProtocol(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _IGESData.IGESData_GlobalSection_ApplicationProtocol(self, *args)


    def AuthorName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns the name of the IGES file author.
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_AuthorName(self, *args)


    def CompanyName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns the name of the company where the IGES file was written.
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_CompanyName(self, *args)


    def CopyRefs(self, *args) -> "void":
        """
        * Copies data referenced by Handle (that is, Strings) usefull to 'isolate' a GlobalSection after copy by '=' (from a Model to another Model for instance)
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_CopyRefs(self, *args)


    def Date(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns the IGES file creation date.
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_Date(self, *args)


    def DraftingStandard(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IGESData.IGESData_GlobalSection_DraftingStandard(self, *args)


    def EndMark(self, *args) -> "Standard_Character":
        """
        * Returns the record delimiter character.
        	:rtype: Standard_Character
        """
        return _IGESData.IGESData_GlobalSection_EndMark(self, *args)


    def FileName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns the name of the IGES file.
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_FileName(self, *args)


    def HasApplicationProtocol(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _IGESData.IGESData_GlobalSection_HasApplicationProtocol(self, *args)


    def HasLastChangeDate(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the date and time when the model was created or last modified are specified, i.e. not defaulted to NULL.
        	:rtype: bool
        """
        return _IGESData.IGESData_GlobalSection_HasLastChangeDate(self, *args)


    def HasMaxCoord(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the approximate maximum coordinate value found in the model is greater than 0.
        	:rtype: bool
        """
        return _IGESData.IGESData_GlobalSection_HasMaxCoord(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty GlobalSection, ready to be filled, Warning : No default value is provided
        	:rtype: None
        """
        _IGESData.IGESData_GlobalSection_swiginit(self, _IGESData.new_IGESData_GlobalSection(*args))

    def IGESVersion(self, *args) -> "Standard_Integer":
        """
        * Returns the IGES version that the IGES file was written in.
        	:rtype: int
        """
        return _IGESData.IGESData_GlobalSection_IGESVersion(self, *args)


    def Init(self, *args) -> "void":
        """
        * Fills GlobalSection from a ParamSet (i.e. taken from file) undefined parameters do not change default values when defined Fills Check about Corrections or Fails
        	:param params:
        	:type params: Interface_ParamSet
        	:param ach:
        	:type ach: Interface_Check
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_Init(self, *args)


    def IntegerBits(self, *args) -> "Standard_Integer":
        """
        * Returns the number of binary bits for integer representations.
        	:rtype: int
        """
        return _IGESData.IGESData_GlobalSection_IntegerBits(self, *args)


    def InterfaceVersion(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns the name of the pre-processor used to write the IGES file.
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_InterfaceVersion(self, *args)


    def LastChangeDate(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns the date and time when the model was created or last modified (for IGES 5.1 and later).
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_LastChangeDate(self, *args)


    def LineWeightGrad(self, *args) -> "Standard_Integer":
        """
        * Returns the maximum number of line weight gradations.
        	:rtype: int
        """
        return _IGESData.IGESData_GlobalSection_LineWeightGrad(self, *args)


    def MaxCoord(self, *args) -> "Standard_Real":
        """
        * Returns the approximate maximum coordinate value found in the model.
        	:rtype: float
        """
        return _IGESData.IGESData_GlobalSection_MaxCoord(self, *args)


    def MaxDigitsDouble(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IGESData.IGESData_GlobalSection_MaxDigitsDouble(self, *args)


    def MaxDigitsSingle(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IGESData.IGESData_GlobalSection_MaxDigitsSingle(self, *args)


    def MaxLineWeight(self, *args) -> "Standard_Real":
        """
        * Returns the of maximum line weight width in IGES file units.
        	:rtype: float
        """
        return _IGESData.IGESData_GlobalSection_MaxLineWeight(self, *args)


    def MaxMaxCoord(self, *args) -> "void":
        """
        :param val: default value is 0.0
        	:type val: float
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_MaxMaxCoord(self, *args)


    def MaxMaxCoords(self, *args) -> "void":
        """
        :param xyz:
        	:type xyz: gp_XYZ
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_MaxMaxCoords(self, *args)


    def MaxPower10Double(self, *args) -> "Standard_Integer":
        """
        * Returns the maximum power of a decimal representation of a double-precision floating point number in the sending system.
        	:rtype: int
        """
        return _IGESData.IGESData_GlobalSection_MaxPower10Double(self, *args)


    def MaxPower10Single(self, *args) -> "Standard_Integer":
        """
        * Returns the maximum power of a decimal representation of a single-precision floating point number in the sending system.
        	:rtype: int
        """
        return _IGESData.IGESData_GlobalSection_MaxPower10Single(self, *args)


    def NewDateString(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns a string built from year, month, day, hour, minute and second values. The form of the resulting string is defined as follows: - -1: YYMMDD.HHNNSS, - 0: YYYYMMDD.HHNNSS, - 1: YYYY-MM-DD:HH-NN-SS, where: - YYYY or YY is 4 or 2 digit year, - HH is hour (00-23), - MM is month (01-12), - NN is minute (00-59) - DD is day (01-31), - SS is second (00-59).
        	:param year:
        	:type year: int
        	:param month:
        	:type month: int
        	:param day:
        	:type day: int
        	:param hour:
        	:type hour: int
        	:param minut:
        	:type minut: int
        	:param second:
        	:type second: int
        	:param mode: default value is -1
        	:type mode: int
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        * Converts the string given in the form YYMMDD.HHNNSS or YYYYMMDD.HHNNSS to either YYMMDD.HHNNSS, YYYYMMDD.HHNNSS or YYYY-MM-DD:HH-NN-SS.
        	:param date:
        	:type date: TCollection_HAsciiString
        	:param mode: default value is 1
        	:type mode: int
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_NewDateString(*args)

    NewDateString = staticmethod(NewDateString)

    def Params(self, *args) -> "opencascade::handle< Interface_ParamSet >":
        """
        * Returns all contained data in the form of a ParamSet Remark : Strings are given under Hollerith form
        	:rtype: opencascade::handle<Interface_ParamSet>
        """
        return _IGESData.IGESData_GlobalSection_Params(self, *args)


    def ReceiveName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns the name of the receiving system.
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_ReceiveName(self, *args)


    def Resolution(self, *args) -> "Standard_Real":
        """
        * Returns the resolution used in the IGES file.
        	:rtype: float
        """
        return _IGESData.IGESData_GlobalSection_Resolution(self, *args)


    def Scale(self, *args) -> "Standard_Real":
        """
        * Returns the scale used in the IGES file.
        	:rtype: float
        """
        return _IGESData.IGESData_GlobalSection_Scale(self, *args)


    def SendName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns the name of the sending system.
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_SendName(self, *args)


    def Separator(self, *args) -> "Standard_Character":
        """
        * Returns the parameter delimiter character.
        	:rtype: Standard_Character
        """
        return _IGESData.IGESData_GlobalSection_Separator(self, *args)


    def SetApplicationProtocol(self, *args) -> "void":
        """
        :param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetApplicationProtocol(self, *args)


    def SetAuthorName(self, *args) -> "void":
        """
        :param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetAuthorName(self, *args)


    def SetCompanyName(self, *args) -> "void":
        """
        :param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetCompanyName(self, *args)


    def SetDate(self, *args) -> "void":
        """
        :param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetDate(self, *args)


    def SetDraftingStandard(self, *args) -> "void":
        """
        :param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetDraftingStandard(self, *args)


    def SetEndMark(self, *args) -> "void":
        """
        :param val:
        	:type val: Standard_Character
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetEndMark(self, *args)


    def SetFileName(self, *args) -> "void":
        """
        :param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetFileName(self, *args)


    def SetIGESVersion(self, *args) -> "void":
        """
        :param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetIGESVersion(self, *args)


    def SetIntegerBits(self, *args) -> "void":
        """
        :param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetIntegerBits(self, *args)


    def SetInterfaceVersion(self, *args) -> "void":
        """
        :param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetInterfaceVersion(self, *args)


    def SetLastChangeDate(self, *args) -> "void":
        """
        :rtype: None
        :param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetLastChangeDate(self, *args)


    def SetLineWeightGrad(self, *args) -> "void":
        """
        :param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetLineWeightGrad(self, *args)


    def SetMaxCoord(self, *args) -> "void":
        """
        :param val: default value is 0.0
        	:type val: float
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetMaxCoord(self, *args)


    def SetMaxDigitsDouble(self, *args) -> "void":
        """
        :param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetMaxDigitsDouble(self, *args)


    def SetMaxDigitsSingle(self, *args) -> "void":
        """
        :param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetMaxDigitsSingle(self, *args)


    def SetMaxLineWeight(self, *args) -> "void":
        """
        :param val:
        	:type val: float
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetMaxLineWeight(self, *args)


    def SetMaxPower10Double(self, *args) -> "void":
        """
        :param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetMaxPower10Double(self, *args)


    def SetMaxPower10Single(self, *args) -> "void":
        """
        :param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetMaxPower10Single(self, *args)


    def SetReceiveName(self, *args) -> "void":
        """
        :param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetReceiveName(self, *args)


    def SetResolution(self, *args) -> "void":
        """
        :param val:
        	:type val: float
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetResolution(self, *args)


    def SetScale(self, *args) -> "void":
        """
        :param val:
        	:type val: float
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetScale(self, *args)


    def SetSendName(self, *args) -> "void":
        """
        :param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetSendName(self, *args)


    def SetSeparator(self, *args) -> "void":
        """
        :param val:
        	:type val: Standard_Character
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetSeparator(self, *args)


    def SetSystemId(self, *args) -> "void":
        """
        :param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetSystemId(self, *args)


    def SetUnitFlag(self, *args) -> "void":
        """
        :param val:
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetUnitFlag(self, *args)


    def SetUnitName(self, *args) -> "void":
        """
        :param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_GlobalSection_SetUnitName(self, *args)


    def SystemId(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns the Native System ID of the system that created the IGES file.
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_SystemId(self, *args)


    def TranslatedFromHollerith(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns a string withpout its Hollerith marks (nnnH ahead). Remark : all strings stored in GlobalSection are expurged from Hollerith informations (without nnnH) If <astr> is not Hollerith form, it is simply copied
        	:param astr:
        	:type astr: TCollection_HAsciiString
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_TranslatedFromHollerith(self, *args)


    def UnitFlag(self, *args) -> "Standard_Integer":
        """
        * Returns the unit flag that was used to write the IGES file.
        	:rtype: int
        """
        return _IGESData.IGESData_GlobalSection_UnitFlag(self, *args)


    def UnitName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns the name of the unit the IGES file was written in.
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_GlobalSection_UnitName(self, *args)


    def UnitValue(self, *args) -> "Standard_Real":
        """
        * Returns the unit value (in meters) that the IGES file was written in.
        	:rtype: float
        """
        return _IGESData.IGESData_GlobalSection_UnitValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_GlobalSection
IGESData_GlobalSection.ApplicationProtocol = new_instancemethod(_IGESData.IGESData_GlobalSection_ApplicationProtocol, None, IGESData_GlobalSection)
IGESData_GlobalSection.AuthorName = new_instancemethod(_IGESData.IGESData_GlobalSection_AuthorName, None, IGESData_GlobalSection)
IGESData_GlobalSection.CompanyName = new_instancemethod(_IGESData.IGESData_GlobalSection_CompanyName, None, IGESData_GlobalSection)
IGESData_GlobalSection.CopyRefs = new_instancemethod(_IGESData.IGESData_GlobalSection_CopyRefs, None, IGESData_GlobalSection)
IGESData_GlobalSection.Date = new_instancemethod(_IGESData.IGESData_GlobalSection_Date, None, IGESData_GlobalSection)
IGESData_GlobalSection.DraftingStandard = new_instancemethod(_IGESData.IGESData_GlobalSection_DraftingStandard, None, IGESData_GlobalSection)
IGESData_GlobalSection.EndMark = new_instancemethod(_IGESData.IGESData_GlobalSection_EndMark, None, IGESData_GlobalSection)
IGESData_GlobalSection.FileName = new_instancemethod(_IGESData.IGESData_GlobalSection_FileName, None, IGESData_GlobalSection)
IGESData_GlobalSection.HasApplicationProtocol = new_instancemethod(_IGESData.IGESData_GlobalSection_HasApplicationProtocol, None, IGESData_GlobalSection)
IGESData_GlobalSection.HasLastChangeDate = new_instancemethod(_IGESData.IGESData_GlobalSection_HasLastChangeDate, None, IGESData_GlobalSection)
IGESData_GlobalSection.HasMaxCoord = new_instancemethod(_IGESData.IGESData_GlobalSection_HasMaxCoord, None, IGESData_GlobalSection)
IGESData_GlobalSection.IGESVersion = new_instancemethod(_IGESData.IGESData_GlobalSection_IGESVersion, None, IGESData_GlobalSection)
IGESData_GlobalSection.Init = new_instancemethod(_IGESData.IGESData_GlobalSection_Init, None, IGESData_GlobalSection)
IGESData_GlobalSection.IntegerBits = new_instancemethod(_IGESData.IGESData_GlobalSection_IntegerBits, None, IGESData_GlobalSection)
IGESData_GlobalSection.InterfaceVersion = new_instancemethod(_IGESData.IGESData_GlobalSection_InterfaceVersion, None, IGESData_GlobalSection)
IGESData_GlobalSection.LastChangeDate = new_instancemethod(_IGESData.IGESData_GlobalSection_LastChangeDate, None, IGESData_GlobalSection)
IGESData_GlobalSection.LineWeightGrad = new_instancemethod(_IGESData.IGESData_GlobalSection_LineWeightGrad, None, IGESData_GlobalSection)
IGESData_GlobalSection.MaxCoord = new_instancemethod(_IGESData.IGESData_GlobalSection_MaxCoord, None, IGESData_GlobalSection)
IGESData_GlobalSection.MaxDigitsDouble = new_instancemethod(_IGESData.IGESData_GlobalSection_MaxDigitsDouble, None, IGESData_GlobalSection)
IGESData_GlobalSection.MaxDigitsSingle = new_instancemethod(_IGESData.IGESData_GlobalSection_MaxDigitsSingle, None, IGESData_GlobalSection)
IGESData_GlobalSection.MaxLineWeight = new_instancemethod(_IGESData.IGESData_GlobalSection_MaxLineWeight, None, IGESData_GlobalSection)
IGESData_GlobalSection.MaxMaxCoord = new_instancemethod(_IGESData.IGESData_GlobalSection_MaxMaxCoord, None, IGESData_GlobalSection)
IGESData_GlobalSection.MaxMaxCoords = new_instancemethod(_IGESData.IGESData_GlobalSection_MaxMaxCoords, None, IGESData_GlobalSection)
IGESData_GlobalSection.MaxPower10Double = new_instancemethod(_IGESData.IGESData_GlobalSection_MaxPower10Double, None, IGESData_GlobalSection)
IGESData_GlobalSection.MaxPower10Single = new_instancemethod(_IGESData.IGESData_GlobalSection_MaxPower10Single, None, IGESData_GlobalSection)
IGESData_GlobalSection.Params = new_instancemethod(_IGESData.IGESData_GlobalSection_Params, None, IGESData_GlobalSection)
IGESData_GlobalSection.ReceiveName = new_instancemethod(_IGESData.IGESData_GlobalSection_ReceiveName, None, IGESData_GlobalSection)
IGESData_GlobalSection.Resolution = new_instancemethod(_IGESData.IGESData_GlobalSection_Resolution, None, IGESData_GlobalSection)
IGESData_GlobalSection.Scale = new_instancemethod(_IGESData.IGESData_GlobalSection_Scale, None, IGESData_GlobalSection)
IGESData_GlobalSection.SendName = new_instancemethod(_IGESData.IGESData_GlobalSection_SendName, None, IGESData_GlobalSection)
IGESData_GlobalSection.Separator = new_instancemethod(_IGESData.IGESData_GlobalSection_Separator, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetApplicationProtocol = new_instancemethod(_IGESData.IGESData_GlobalSection_SetApplicationProtocol, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetAuthorName = new_instancemethod(_IGESData.IGESData_GlobalSection_SetAuthorName, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetCompanyName = new_instancemethod(_IGESData.IGESData_GlobalSection_SetCompanyName, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetDate = new_instancemethod(_IGESData.IGESData_GlobalSection_SetDate, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetDraftingStandard = new_instancemethod(_IGESData.IGESData_GlobalSection_SetDraftingStandard, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetEndMark = new_instancemethod(_IGESData.IGESData_GlobalSection_SetEndMark, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetFileName = new_instancemethod(_IGESData.IGESData_GlobalSection_SetFileName, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetIGESVersion = new_instancemethod(_IGESData.IGESData_GlobalSection_SetIGESVersion, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetIntegerBits = new_instancemethod(_IGESData.IGESData_GlobalSection_SetIntegerBits, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetInterfaceVersion = new_instancemethod(_IGESData.IGESData_GlobalSection_SetInterfaceVersion, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetLastChangeDate = new_instancemethod(_IGESData.IGESData_GlobalSection_SetLastChangeDate, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetLineWeightGrad = new_instancemethod(_IGESData.IGESData_GlobalSection_SetLineWeightGrad, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetMaxCoord = new_instancemethod(_IGESData.IGESData_GlobalSection_SetMaxCoord, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetMaxDigitsDouble = new_instancemethod(_IGESData.IGESData_GlobalSection_SetMaxDigitsDouble, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetMaxDigitsSingle = new_instancemethod(_IGESData.IGESData_GlobalSection_SetMaxDigitsSingle, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetMaxLineWeight = new_instancemethod(_IGESData.IGESData_GlobalSection_SetMaxLineWeight, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetMaxPower10Double = new_instancemethod(_IGESData.IGESData_GlobalSection_SetMaxPower10Double, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetMaxPower10Single = new_instancemethod(_IGESData.IGESData_GlobalSection_SetMaxPower10Single, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetReceiveName = new_instancemethod(_IGESData.IGESData_GlobalSection_SetReceiveName, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetResolution = new_instancemethod(_IGESData.IGESData_GlobalSection_SetResolution, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetScale = new_instancemethod(_IGESData.IGESData_GlobalSection_SetScale, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetSendName = new_instancemethod(_IGESData.IGESData_GlobalSection_SetSendName, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetSeparator = new_instancemethod(_IGESData.IGESData_GlobalSection_SetSeparator, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetSystemId = new_instancemethod(_IGESData.IGESData_GlobalSection_SetSystemId, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetUnitFlag = new_instancemethod(_IGESData.IGESData_GlobalSection_SetUnitFlag, None, IGESData_GlobalSection)
IGESData_GlobalSection.SetUnitName = new_instancemethod(_IGESData.IGESData_GlobalSection_SetUnitName, None, IGESData_GlobalSection)
IGESData_GlobalSection.SystemId = new_instancemethod(_IGESData.IGESData_GlobalSection_SystemId, None, IGESData_GlobalSection)
IGESData_GlobalSection.TranslatedFromHollerith = new_instancemethod(_IGESData.IGESData_GlobalSection_TranslatedFromHollerith, None, IGESData_GlobalSection)
IGESData_GlobalSection.UnitFlag = new_instancemethod(_IGESData.IGESData_GlobalSection_UnitFlag, None, IGESData_GlobalSection)
IGESData_GlobalSection.UnitName = new_instancemethod(_IGESData.IGESData_GlobalSection_UnitName, None, IGESData_GlobalSection)
IGESData_GlobalSection.UnitValue = new_instancemethod(_IGESData.IGESData_GlobalSection_UnitValue, None, IGESData_GlobalSection)
IGESData_GlobalSection_swigregister = _IGESData.IGESData_GlobalSection_swigregister
IGESData_GlobalSection_swigregister(IGESData_GlobalSection)

def IGESData_GlobalSection_NewDateString(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    * Returns a string built from year, month, day, hour, minute and second values. The form of the resulting string is defined as follows: - -1: YYMMDD.HHNNSS, - 0: YYYYMMDD.HHNNSS, - 1: YYYY-MM-DD:HH-NN-SS, where: - YYYY or YY is 4 or 2 digit year, - HH is hour (00-23), - MM is month (01-12), - NN is minute (00-59) - DD is day (01-31), - SS is second (00-59).
    	:param year:
    	:type year: int
    	:param month:
    	:type month: int
    	:param day:
    	:type day: int
    	:param hour:
    	:type hour: int
    	:param minut:
    	:type minut: int
    	:param second:
    	:type second: int
    	:param mode: default value is -1
    	:type mode: int
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    * Converts the string given in the form YYMMDD.HHNNSS or YYYYMMDD.HHNNSS to either YYMMDD.HHNNSS, YYYYMMDD.HHNNSS or YYYY-MM-DD:HH-NN-SS.
    	:param date:
    	:type date: TCollection_HAsciiString
    	:param mode: default value is 1
    	:type mode: int
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _IGESData.IGESData_GlobalSection_NewDateString(*args)

class IGESData_IGESDumper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Dump(self, *args) -> "void":
        """
        :param ent:
        	:type ent: IGESData_IGESEntity
        	:param S:
        	:type S: Message_Messenger
        	:param own:
        	:type own: int
        	:param attached: default value is -1
        	:type attached: int
        	:rtype: None
        """
        return _IGESData.IGESData_IGESDumper_Dump(self, *args)


    def __init__(self, *args):
        """
        * Returns an IGESDumper ready to work. The IGESModel provides the numbering of Entities : as for any InterfaceModel, it gives each Entity a number; but for IGESEntities, the 'Number of Directory Entry' according to the definition of IGES Files, is also usefull
        	:param model:
        	:type model: IGESData_IGESModel
        	:param protocol:
        	:type protocol: IGESData_Protocol
        	:rtype: None
        """
        _IGESData.IGESData_IGESDumper_swiginit(self, _IGESData.new_IGESData_IGESDumper(*args))

    def OwnDump(self, *args) -> "void":
        """
        * Specific Dump for each IGES Entity, call by Dump (just above) <own> is the parameter <own> from Dump
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param S:
        	:type S: Message_Messenger
        	:param own:
        	:type own: int
        	:rtype: None
        """
        return _IGESData.IGESData_IGESDumper_OwnDump(self, *args)


    def PrintDNum(self, *args) -> "void":
        """
        * Prints onto an output, the 'Number of Directory Entry' which corresponds to an IGESEntity in the IGESModel, under the form 'D#nnn' (a Null Handle gives D#0)
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param S:
        	:type S: Message_Messenger
        	:rtype: None
        """
        return _IGESData.IGESData_IGESDumper_PrintDNum(self, *args)


    def PrintShort(self, *args) -> "void":
        """
        * Prints onto an output, the 'Number of Directory Entry' (see PrintDNum) plus IGES Type and Form Numbers, which gives 'D#nnn Type nnn Form nnn'
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param S:
        	:type S: Message_Messenger
        	:rtype: None
        """
        return _IGESData.IGESData_IGESDumper_PrintShort(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_IGESDumper
IGESData_IGESDumper.Dump = new_instancemethod(_IGESData.IGESData_IGESDumper_Dump, None, IGESData_IGESDumper)
IGESData_IGESDumper.OwnDump = new_instancemethod(_IGESData.IGESData_IGESDumper_OwnDump, None, IGESData_IGESDumper)
IGESData_IGESDumper.PrintDNum = new_instancemethod(_IGESData.IGESData_IGESDumper_PrintDNum, None, IGESData_IGESDumper)
IGESData_IGESDumper.PrintShort = new_instancemethod(_IGESData.IGESData_IGESDumper_PrintShort, None, IGESData_IGESDumper)
IGESData_IGESDumper_swigregister = _IGESData.IGESData_IGESDumper_swigregister
IGESData_IGESDumper_swigregister(IGESData_IGESDumper)

class IGESData_IGESEntity(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddProperty(self, *args) -> "void":
        """
        * Adds a Property in the list
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_AddProperty(self, *args)


    def ArePresentAssociativities(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Entity is defined with an Associativity list, even empty (that is, file contains its length 0) Else, the file contained NO idencation at all about this list.
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESEntity_ArePresentAssociativities(self, *args)


    def ArePresentProperties(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Entity is defined with a Property list, even empty (that is, file contains its length 0) Else, the file contained NO idencation at all about this list
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESEntity_ArePresentProperties(self, *args)


    def Associate(self, *args) -> "void":
        """
        * Sets 'me' in the Associativity list of another Entity
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_Associate(self, *args)


    def Associativities(self, *args) -> "Interface_EntityIterator":
        """
        * Returns the Associativity List under the form of an EntityIterator.
        	:rtype: Interface_EntityIterator
        """
        return _IGESData.IGESData_IGESEntity_Associativities(self, *args)


    def BlankStatus(self, *args) -> "Standard_Integer":
        """
        * gives Blank Status (0 visible, 1 blanked)
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_BlankStatus(self, *args)


    def CResValues(self, *args) -> "Standard_Boolean":
        """
        * returns 'reserved' alphanumeric values res1 and res2 res1 and res2 have to be reserved as Character[9 at least] (remark : their content is changed) returned values are ended by null character in 9th returned Boolean is False if res1 and res2 are blank, true else
        	:param res1:
        	:type res1: char *
        	:param res2:
        	:type res2: char *
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESEntity_CResValues(self, *args)


    def Color(self, *args) -> "opencascade::handle< IGESData_ColorEntity >":
        """
        * Returns the IGES entity which describes the color of the entity. Returns a null handle if this entity was defined as an integer.
        	:rtype: opencascade::handle<IGESData_ColorEntity>
        """
        return _IGESData.IGESData_IGESEntity_Color(self, *args)


    def CompoundLocation(self, *args) -> "gp_GTrsf":
        """
        * Returns Location by taking in account a Parent which has its own Location : that one will be combined to that of <self> The Parent is considered only if HasOneParent is True, else it is ignored and CompoundLocation = Location
        	:rtype: gp_GTrsf
        """
        return _IGESData.IGESData_IGESEntity_CompoundLocation(self, *args)


    def DefColor(self, *args) -> "IGESData_DefType":
        """
        * Returns the definition status of Color.
        	:rtype: IGESData_DefType
        """
        return _IGESData.IGESData_IGESEntity_DefColor(self, *args)


    def DefLevel(self, *args) -> "IGESData_DefList":
        """
        * Returns the definition status of Level
        	:rtype: IGESData_DefList
        """
        return _IGESData.IGESData_IGESEntity_DefLevel(self, *args)


    def DefLineFont(self, *args) -> "IGESData_DefType":
        """
        * Returns the definition status of LineFont
        	:rtype: IGESData_DefType
        """
        return _IGESData.IGESData_IGESEntity_DefLineFont(self, *args)


    def DefView(self, *args) -> "IGESData_DefList":
        """
        * Returns the definition status of the view. This can be: none, one or several.
        	:rtype: IGESData_DefList
        """
        return _IGESData.IGESData_IGESEntity_DefView(self, *args)


    def DirFieldEntity(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * Returns the Entity which has been recorded for a given Field Number, i.e. without any cast. Maps with : 3 : Structure 4 : LineFont 5 : LevelList 6 : View 7 : Transf(ormation Matrix) 8 : LabelDisplay 13 : Color. Other values give a null handle It can then be of any kind, while specific items have a Type
        	:param fieldnum:
        	:type fieldnum: int
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_IGESEntity_DirFieldEntity(self, *args)


    def Dissociate(self, *args) -> "void":
        """
        * Resets 'me' from the Associativity list of another Entity
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_Dissociate(self, *args)


    def FormNumber(self, *args) -> "Standard_Integer":
        """
        * Returns the form number for that type of an IGES entity. The default form number is 0.
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_FormNumber(self, *args)


    def HasLabelDisplay(self, *args) -> "Standard_Boolean":
        """
        * Returns True if a LabelDisplay mode is defined for this entity
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESEntity_HasLabelDisplay(self, *args)


    def HasName(self, *args) -> "Standard_Boolean":
        """
        * says if a Name is defined, as Short Label or as Name Property (Property is looked first, else ShortLabel is considered)
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESEntity_HasName(self, *args)


    def HasOneParent(self, *args) -> "Standard_Boolean":
        """
        * Returns True if an entity has one and only one parent, defined by a SingleParentEntity Type Associativity (explicit sharing). Thus, implicit sharing remains defined at model level (see class ToolLocation)
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESEntity_HasOneParent(self, *args)


    def HasShortLabel(self, *args) -> "Standard_Boolean":
        """
        * Returns true if a short label is defined. A short label is a non-blank 8-character string.
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESEntity_HasShortLabel(self, *args)


    def HasStructure(self, *args) -> "Standard_Boolean":
        """
        * returns True if an IGESEntity is defined with a Structure (it is normally reserved for certain classes, such as Macros)
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESEntity_HasStructure(self, *args)


    def HasSubScriptNumber(self, *args) -> "Standard_Boolean":
        """
        * Returns true if a subscript number is defined. A subscript number is an integer used to identify a label.
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESEntity_HasSubScriptNumber(self, *args)


    def HasTransf(self, *args) -> "Standard_Boolean":
        """
        * Returns True if a Transformation Matrix is defined
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESEntity_HasTransf(self, *args)


    def HierarchyStatus(self, *args) -> "Standard_Integer":
        """
        * gives Hierarchy status (0-1-2)
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_HierarchyStatus(self, *args)


    def IGESType(self, *args) -> "IGESData_IGESType":
        """
        * gives IGES typing info (includes 'Type' and 'Form' data)
        	:rtype: IGESData_IGESType
        """
        return _IGESData.IGESData_IGESEntity_IGESType(self, *args)


    def InitColor(self, *args) -> "void":
        """
        * Initializes Color data : if <ent> is not Null, it gives Color, else <rank> gives or erases (if zero) RankColor
        	:param ent:
        	:type ent: IGESData_ColorEntity
        	:param rank: default value is 0
        	:type rank: int
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_InitColor(self, *args)


    def InitDirFieldEntity(self, *args) -> "void":
        """
        * Initializes a directory field as an Entiy of any kind See DirFieldEntity for more details
        	:param fieldnum:
        	:type fieldnum: int
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_InitDirFieldEntity(self, *args)


    def InitLevel(self, *args) -> "void":
        """
        * Initializes Level : if <ent> is not Null, it gives LevelList, else <val> gives or erases (if zero) unique Level
        	:param ent:
        	:type ent: IGESData_LevelListEntity
        	:param val: default value is 0
        	:type val: int
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_InitLevel(self, *args)


    def InitLineFont(self, *args) -> "void":
        """
        * Initializes LineFont : if <ent> is not Null, it gives LineFont, else <rank> gives or erases (if zero) RankLineFont
        	:param ent:
        	:type ent: IGESData_LineFontEntity
        	:param rank: default value is 0
        	:type rank: int
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_InitLineFont(self, *args)


    def InitMisc(self, *args) -> "void":
        """
        * Initializes various data (those not yet seen above), or erases them if they are given as Null (Zero for <weightnum>) : <str> for Structure, <lab> for LabelDisplay, and <weightnum> for WeightNumber
        	:param str:
        	:type str: IGESData_IGESEntity
        	:param lab:
        	:type lab: IGESData_LabelDisplayEntity
        	:param weightnum:
        	:type weightnum: int
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_InitMisc(self, *args)


    def InitStatus(self, *args) -> "void":
        """
        * Initializes the Status of Directory Part
        	:param blank:
        	:type blank: int
        	:param subordinate:
        	:type subordinate: int
        	:param useflag:
        	:type useflag: int
        	:param hierarchy:
        	:type hierarchy: int
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_InitStatus(self, *args)


    def InitTransf(self, *args) -> "void":
        """
        * Initializes Transf, or erases it if <ent> is given Null
        	:param ent:
        	:type ent: IGESData_TransfEntity
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_InitTransf(self, *args)


    def InitView(self, *args) -> "void":
        """
        * Initializes View, or erases it if <ent> is given Null
        	:param ent:
        	:type ent: IGESData_ViewKindEntity
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_InitView(self, *args)


    def LabelDisplay(self, *args) -> "opencascade::handle< IGESData_LabelDisplayEntity >":
        """
        * Returns the Label Display Associativity Entity if there is one. Returns a null handle if there is none.
        	:rtype: opencascade::handle<IGESData_LabelDisplayEntity>
        """
        return _IGESData.IGESData_IGESEntity_LabelDisplay(self, *args)


    def Level(self, *args) -> "Standard_Integer":
        """
        * Returns the level the entity belongs to. Returns -1 if the entity belongs to more than one level.
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_Level(self, *args)


    def LevelList(self, *args) -> "opencascade::handle< IGESData_LevelListEntity >":
        """
        * Returns LevelList if Level is defined as a list. Returns a null handle if DefLevel is not DefSeveral.
        	:rtype: opencascade::handle<IGESData_LevelListEntity>
        """
        return _IGESData.IGESData_IGESEntity_LevelList(self, *args)


    def LineFont(self, *args) -> "opencascade::handle< IGESData_LineFontEntity >":
        """
        * Returns LineFont as an Entity (if defined as Reference) Returns a Null Handle if DefLineFont is not 'DefReference'
        	:rtype: opencascade::handle<IGESData_LineFontEntity>
        """
        return _IGESData.IGESData_IGESEntity_LineFont(self, *args)


    def LineWeight(self, *args) -> "Standard_Real":
        """
        * Returns the true Line Weight, computed from LineWeightNumber and Global Parameter in the Model by call to SetLineWeight
        	:rtype: float
        """
        return _IGESData.IGESData_IGESEntity_LineWeight(self, *args)


    def LineWeightNumber(self, *args) -> "Standard_Integer":
        """
        * Returns the LineWeight Number (0 not defined), see also LineWeight
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_LineWeightNumber(self, *args)


    def Location(self, *args) -> "gp_GTrsf":
        """
        * Returns Location given by Transf in Directory Part (see above) It must be considered for local definition : if the Entity is set in a 'Parent', that one can add its one Location, but this is not taken in account here : see CompoundLocation for that. If no Transf is defined, returns Identity If Transf is itself compound, gives the final result
        	:rtype: gp_GTrsf
        """
        return _IGESData.IGESData_IGESEntity_Location(self, *args)


    def NameValue(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * returns Name value as a String (Property Name or ShortLabel) if SubNumber is defined, it is concatenated after ShortLabel as follows label(number). Ignored with a Property Name
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_IGESEntity_NameValue(self, *args)


    def NbAssociativities(self, *args) -> "Standard_Integer":
        """
        * gives number of recorded associativities (0 no list defined)
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_NbAssociativities(self, *args)


    def NbProperties(self, *args) -> "Standard_Integer":
        """
        * Gives number of recorded properties (0 no list defined)
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_NbProperties(self, *args)


    def NbTypedAssociativities(self, *args) -> "Standard_Integer":
        """
        * gives how many Associativities have a given type
        	:param atype:
        	:type atype: Standard_Type
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_NbTypedAssociativities(self, *args)


    def NbTypedProperties(self, *args) -> "Standard_Integer":
        """
        * gives how many Properties have a given type
        	:param atype:
        	:type atype: Standard_Type
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_NbTypedProperties(self, *args)


    def Properties(self, *args) -> "Interface_EntityIterator":
        """
        * Returns Property List under the form of an EntityIterator
        	:rtype: Interface_EntityIterator
        """
        return _IGESData.IGESData_IGESEntity_Properties(self, *args)


    def RankColor(self, *args) -> "Standard_Integer":
        """
        * Returns the color definition as an integer value if the color was defined as a rank. Warning A negative value is returned if the color was defined as an entity.
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_RankColor(self, *args)


    def RankLineFont(self, *args) -> "Standard_Integer":
        """
        * Returns LineFont definition as an Integer (if defined as Rank) If LineFont is defined as an Entity, returns a negative value
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_RankLineFont(self, *args)


    def RemoveProperty(self, *args) -> "void":
        """
        * Removes a Property from the list
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_RemoveProperty(self, *args)


    def SetLabel(self, *args) -> "void":
        """
        * Sets a new Label to an IGES Entity If <sub> is given, it sets value of SubScriptNumber else, SubScriptNumber is erased
        	:param label:
        	:type label: TCollection_HAsciiString
        	:param sub: default value is -1
        	:type sub: int
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_SetLabel(self, *args)


    def SetLineWeight(self, *args) -> "void":
        """
        * computes and sets 'true' line weight according IGES rules from global data MaxLineWeight (maxv) and LineWeightGrad (gradw), or sets it to defw (Default) if LineWeightNumber is null
        	:param defw:
        	:type defw: float
        	:param maxw:
        	:type maxw: float
        	:param gradw:
        	:type gradw: int
        	:rtype: None
        """
        return _IGESData.IGESData_IGESEntity_SetLineWeight(self, *args)


    def ShortLabel(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns the label value for this IGES entity as a string. Warning If the label is blank, this string is null.
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_IGESEntity_ShortLabel(self, *args)


    def SingleView(self, *args) -> "opencascade::handle< IGESData_ViewKindEntity >":
        """
        * Returns the view as a single view if it was defined as such and not as a list of views. Warning A null handle is returned if DefView does not have the value DefOne.
        	:rtype: opencascade::handle<IGESData_ViewKindEntity>
        """
        return _IGESData.IGESData_IGESEntity_SingleView(self, *args)


    def Structure(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * Returns Structure (used by some types of IGES Entities only) Returns a Null Handle if Structure is not defined
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_IGESEntity_Structure(self, *args)


    def SubScriptNumber(self, *args) -> "Standard_Integer":
        """
        * Returns the integer subscript number used to identify this IGES entity. Warning 0 is returned if no subscript number is defined for this IGES entity.
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_SubScriptNumber(self, *args)


    def SubordinateStatus(self, *args) -> "Standard_Integer":
        """
        * gives Subordinate Switch (0-1-2-3)
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_SubordinateStatus(self, *args)


    def Transf(self, *args) -> "opencascade::handle< IGESData_TransfEntity >":
        """
        * Returns the Transformation Matrix (under IGES definition) Returns a Null Handle if there is none for a more complete use, see Location & CompoundLocation
        	:rtype: opencascade::handle<IGESData_TransfEntity>
        """
        return _IGESData.IGESData_IGESEntity_Transf(self, *args)


    def TypeNumber(self, *args) -> "Standard_Integer":
        """
        * gives IGES Type Number (often coupled with Form Number)
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_TypeNumber(self, *args)


    def TypedAssociativity(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * returns the Associativity of a given Type (if only one exists) Error if none or more than one
        	:param atype:
        	:type atype: Standard_Type
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_IGESEntity_TypedAssociativity(self, *args)


    def TypedProperty(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * returns the Property of a given Type Error if none or more than one
        	:param atype:
        	:type atype: Standard_Type
        	:param anum: default value is 0
        	:type anum: int
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_IGESEntity_TypedProperty(self, *args)


    def UniqueParent(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * Returns the Unique Parent (in the sense given by HasOneParent) Error if there is none or several
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_IGESEntity_UniqueParent(self, *args)


    def UseFlag(self, *args) -> "Standard_Integer":
        """
        * gives Entity's Use Flag (0 to 5)
        	:rtype: int
        """
        return _IGESData.IGESData_IGESEntity_UseFlag(self, *args)


    def VectorLocation(self, *args) -> "gp_GTrsf":
        """
        * Returns Location considered for Vectors, i.e. without its Translation Part. As Location, it gives local definition.
        	:rtype: gp_GTrsf
        """
        return _IGESData.IGESData_IGESEntity_VectorLocation(self, *args)


    def View(self, *args) -> "opencascade::handle< IGESData_ViewKindEntity >":
        """
        * Returns the view of this IGES entity. This view can be a single view or a list of views. Warning A null handle is returned if the view is not defined.
        	:rtype: opencascade::handle<IGESData_ViewKindEntity>
        """
        return _IGESData.IGESData_IGESEntity_View(self, *args)


    def ViewList(self, *args) -> "opencascade::handle< IGESData_ViewKindEntity >":
        """
        * Returns the view of this IGES entity as a list. Warning A null handle is returned if the definition status does not have the value DefSeveral.
        	:rtype: opencascade::handle<IGESData_ViewKindEntity>
        """
        return _IGESData.IGESData_IGESEntity_ViewList(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_IGESEntity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_IGESEntity
IGESData_IGESEntity.AddProperty = new_instancemethod(_IGESData.IGESData_IGESEntity_AddProperty, None, IGESData_IGESEntity)
IGESData_IGESEntity.ArePresentAssociativities = new_instancemethod(_IGESData.IGESData_IGESEntity_ArePresentAssociativities, None, IGESData_IGESEntity)
IGESData_IGESEntity.ArePresentProperties = new_instancemethod(_IGESData.IGESData_IGESEntity_ArePresentProperties, None, IGESData_IGESEntity)
IGESData_IGESEntity.Associate = new_instancemethod(_IGESData.IGESData_IGESEntity_Associate, None, IGESData_IGESEntity)
IGESData_IGESEntity.Associativities = new_instancemethod(_IGESData.IGESData_IGESEntity_Associativities, None, IGESData_IGESEntity)
IGESData_IGESEntity.BlankStatus = new_instancemethod(_IGESData.IGESData_IGESEntity_BlankStatus, None, IGESData_IGESEntity)
IGESData_IGESEntity.CResValues = new_instancemethod(_IGESData.IGESData_IGESEntity_CResValues, None, IGESData_IGESEntity)
IGESData_IGESEntity.Color = new_instancemethod(_IGESData.IGESData_IGESEntity_Color, None, IGESData_IGESEntity)
IGESData_IGESEntity.CompoundLocation = new_instancemethod(_IGESData.IGESData_IGESEntity_CompoundLocation, None, IGESData_IGESEntity)
IGESData_IGESEntity.DefColor = new_instancemethod(_IGESData.IGESData_IGESEntity_DefColor, None, IGESData_IGESEntity)
IGESData_IGESEntity.DefLevel = new_instancemethod(_IGESData.IGESData_IGESEntity_DefLevel, None, IGESData_IGESEntity)
IGESData_IGESEntity.DefLineFont = new_instancemethod(_IGESData.IGESData_IGESEntity_DefLineFont, None, IGESData_IGESEntity)
IGESData_IGESEntity.DefView = new_instancemethod(_IGESData.IGESData_IGESEntity_DefView, None, IGESData_IGESEntity)
IGESData_IGESEntity.DirFieldEntity = new_instancemethod(_IGESData.IGESData_IGESEntity_DirFieldEntity, None, IGESData_IGESEntity)
IGESData_IGESEntity.Dissociate = new_instancemethod(_IGESData.IGESData_IGESEntity_Dissociate, None, IGESData_IGESEntity)
IGESData_IGESEntity.FormNumber = new_instancemethod(_IGESData.IGESData_IGESEntity_FormNumber, None, IGESData_IGESEntity)
IGESData_IGESEntity.HasLabelDisplay = new_instancemethod(_IGESData.IGESData_IGESEntity_HasLabelDisplay, None, IGESData_IGESEntity)
IGESData_IGESEntity.HasName = new_instancemethod(_IGESData.IGESData_IGESEntity_HasName, None, IGESData_IGESEntity)
IGESData_IGESEntity.HasOneParent = new_instancemethod(_IGESData.IGESData_IGESEntity_HasOneParent, None, IGESData_IGESEntity)
IGESData_IGESEntity.HasShortLabel = new_instancemethod(_IGESData.IGESData_IGESEntity_HasShortLabel, None, IGESData_IGESEntity)
IGESData_IGESEntity.HasStructure = new_instancemethod(_IGESData.IGESData_IGESEntity_HasStructure, None, IGESData_IGESEntity)
IGESData_IGESEntity.HasSubScriptNumber = new_instancemethod(_IGESData.IGESData_IGESEntity_HasSubScriptNumber, None, IGESData_IGESEntity)
IGESData_IGESEntity.HasTransf = new_instancemethod(_IGESData.IGESData_IGESEntity_HasTransf, None, IGESData_IGESEntity)
IGESData_IGESEntity.HierarchyStatus = new_instancemethod(_IGESData.IGESData_IGESEntity_HierarchyStatus, None, IGESData_IGESEntity)
IGESData_IGESEntity.IGESType = new_instancemethod(_IGESData.IGESData_IGESEntity_IGESType, None, IGESData_IGESEntity)
IGESData_IGESEntity.InitColor = new_instancemethod(_IGESData.IGESData_IGESEntity_InitColor, None, IGESData_IGESEntity)
IGESData_IGESEntity.InitDirFieldEntity = new_instancemethod(_IGESData.IGESData_IGESEntity_InitDirFieldEntity, None, IGESData_IGESEntity)
IGESData_IGESEntity.InitLevel = new_instancemethod(_IGESData.IGESData_IGESEntity_InitLevel, None, IGESData_IGESEntity)
IGESData_IGESEntity.InitLineFont = new_instancemethod(_IGESData.IGESData_IGESEntity_InitLineFont, None, IGESData_IGESEntity)
IGESData_IGESEntity.InitMisc = new_instancemethod(_IGESData.IGESData_IGESEntity_InitMisc, None, IGESData_IGESEntity)
IGESData_IGESEntity.InitStatus = new_instancemethod(_IGESData.IGESData_IGESEntity_InitStatus, None, IGESData_IGESEntity)
IGESData_IGESEntity.InitTransf = new_instancemethod(_IGESData.IGESData_IGESEntity_InitTransf, None, IGESData_IGESEntity)
IGESData_IGESEntity.InitView = new_instancemethod(_IGESData.IGESData_IGESEntity_InitView, None, IGESData_IGESEntity)
IGESData_IGESEntity.LabelDisplay = new_instancemethod(_IGESData.IGESData_IGESEntity_LabelDisplay, None, IGESData_IGESEntity)
IGESData_IGESEntity.Level = new_instancemethod(_IGESData.IGESData_IGESEntity_Level, None, IGESData_IGESEntity)
IGESData_IGESEntity.LevelList = new_instancemethod(_IGESData.IGESData_IGESEntity_LevelList, None, IGESData_IGESEntity)
IGESData_IGESEntity.LineFont = new_instancemethod(_IGESData.IGESData_IGESEntity_LineFont, None, IGESData_IGESEntity)
IGESData_IGESEntity.LineWeight = new_instancemethod(_IGESData.IGESData_IGESEntity_LineWeight, None, IGESData_IGESEntity)
IGESData_IGESEntity.LineWeightNumber = new_instancemethod(_IGESData.IGESData_IGESEntity_LineWeightNumber, None, IGESData_IGESEntity)
IGESData_IGESEntity.Location = new_instancemethod(_IGESData.IGESData_IGESEntity_Location, None, IGESData_IGESEntity)
IGESData_IGESEntity.NameValue = new_instancemethod(_IGESData.IGESData_IGESEntity_NameValue, None, IGESData_IGESEntity)
IGESData_IGESEntity.NbAssociativities = new_instancemethod(_IGESData.IGESData_IGESEntity_NbAssociativities, None, IGESData_IGESEntity)
IGESData_IGESEntity.NbProperties = new_instancemethod(_IGESData.IGESData_IGESEntity_NbProperties, None, IGESData_IGESEntity)
IGESData_IGESEntity.NbTypedAssociativities = new_instancemethod(_IGESData.IGESData_IGESEntity_NbTypedAssociativities, None, IGESData_IGESEntity)
IGESData_IGESEntity.NbTypedProperties = new_instancemethod(_IGESData.IGESData_IGESEntity_NbTypedProperties, None, IGESData_IGESEntity)
IGESData_IGESEntity.Properties = new_instancemethod(_IGESData.IGESData_IGESEntity_Properties, None, IGESData_IGESEntity)
IGESData_IGESEntity.RankColor = new_instancemethod(_IGESData.IGESData_IGESEntity_RankColor, None, IGESData_IGESEntity)
IGESData_IGESEntity.RankLineFont = new_instancemethod(_IGESData.IGESData_IGESEntity_RankLineFont, None, IGESData_IGESEntity)
IGESData_IGESEntity.RemoveProperty = new_instancemethod(_IGESData.IGESData_IGESEntity_RemoveProperty, None, IGESData_IGESEntity)
IGESData_IGESEntity.SetLabel = new_instancemethod(_IGESData.IGESData_IGESEntity_SetLabel, None, IGESData_IGESEntity)
IGESData_IGESEntity.SetLineWeight = new_instancemethod(_IGESData.IGESData_IGESEntity_SetLineWeight, None, IGESData_IGESEntity)
IGESData_IGESEntity.ShortLabel = new_instancemethod(_IGESData.IGESData_IGESEntity_ShortLabel, None, IGESData_IGESEntity)
IGESData_IGESEntity.SingleView = new_instancemethod(_IGESData.IGESData_IGESEntity_SingleView, None, IGESData_IGESEntity)
IGESData_IGESEntity.Structure = new_instancemethod(_IGESData.IGESData_IGESEntity_Structure, None, IGESData_IGESEntity)
IGESData_IGESEntity.SubScriptNumber = new_instancemethod(_IGESData.IGESData_IGESEntity_SubScriptNumber, None, IGESData_IGESEntity)
IGESData_IGESEntity.SubordinateStatus = new_instancemethod(_IGESData.IGESData_IGESEntity_SubordinateStatus, None, IGESData_IGESEntity)
IGESData_IGESEntity.Transf = new_instancemethod(_IGESData.IGESData_IGESEntity_Transf, None, IGESData_IGESEntity)
IGESData_IGESEntity.TypeNumber = new_instancemethod(_IGESData.IGESData_IGESEntity_TypeNumber, None, IGESData_IGESEntity)
IGESData_IGESEntity.TypedAssociativity = new_instancemethod(_IGESData.IGESData_IGESEntity_TypedAssociativity, None, IGESData_IGESEntity)
IGESData_IGESEntity.TypedProperty = new_instancemethod(_IGESData.IGESData_IGESEntity_TypedProperty, None, IGESData_IGESEntity)
IGESData_IGESEntity.UniqueParent = new_instancemethod(_IGESData.IGESData_IGESEntity_UniqueParent, None, IGESData_IGESEntity)
IGESData_IGESEntity.UseFlag = new_instancemethod(_IGESData.IGESData_IGESEntity_UseFlag, None, IGESData_IGESEntity)
IGESData_IGESEntity.VectorLocation = new_instancemethod(_IGESData.IGESData_IGESEntity_VectorLocation, None, IGESData_IGESEntity)
IGESData_IGESEntity.View = new_instancemethod(_IGESData.IGESData_IGESEntity_View, None, IGESData_IGESEntity)
IGESData_IGESEntity.ViewList = new_instancemethod(_IGESData.IGESData_IGESEntity_ViewList, None, IGESData_IGESEntity)
IGESData_IGESEntity_swigregister = _IGESData.IGESData_IGESEntity_swigregister
IGESData_IGESEntity_swigregister(IGESData_IGESEntity)

class IGESData_IGESModel(OCC.Core.Interface.Interface_InterfaceModel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddStartLine(self, *args) -> "void":
        """
        * Adds a new string to the existing Start section at the end if atnum is 0 or not given, or before atnumth line.
        	:param line:
        	:type line: char *
        	:param atnum: default value is 0
        	:type atnum: int
        	:rtype: None
        """
        return _IGESData.IGESData_IGESModel_AddStartLine(self, *args)


    def ApplyStatic(self, *args) -> "Standard_Boolean":
        """
        * Sets some of the Global section parameters with the values defined by the translation parameters. param may be: - receiver (value read in XSTEP.iges.header.receiver), - author (value read in XSTEP.iges.header.author), - company (value read in XSTEP.iges.header.company). The default value for param is an empty string. Returns True when done and if param is given, False if param is unknown or empty. Note: Set the unit in the IGES file Global section via IGESData_BasicEditor class.
        	:param param: default value is 
        	:type param: char *
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESModel_ApplyStatic(self, *args)


    def ClearStartSection(self, *args) -> "void":
        """
        * Clears the IGES file Start Section
        	:rtype: None
        """
        return _IGESData.IGESData_IGESModel_ClearStartSection(self, *args)


    def DNum(self, *args) -> "Standard_Integer":
        """
        * Returns the equivalent DE Number for an Entity, i.e. 2*Number(ent)-1 , or 0 if <ent> is unknown from <self> This DE Number is used for File Writing for instance
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: int
        """
        return _IGESData.IGESData_IGESModel_DNum(self, *args)


    def Entity(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * Returns an IGES entity given by its rank number.
        	:param num:
        	:type num: int
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_IGESModel_Entity(self, *args)


    def GlobalSection(self, *args) -> "IGESData_GlobalSection const &":
        """
        * Returns the Global section of the IGES file.
        	:rtype: IGESData_GlobalSection
        """
        return _IGESData.IGESData_IGESModel_GlobalSection(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _IGESData.IGESData_IGESModel_swiginit(self, _IGESData.new_IGESData_IGESModel(*args))

    def NbStartLines(self, *args) -> "Standard_Integer":
        """
        * Returns the count of recorded Start Lines
        	:rtype: int
        """
        return _IGESData.IGESData_IGESModel_NbStartLines(self, *args)


    def PrintInfo(self, *args) -> "void":
        """
        * Prints label specific to IGES norm for a given entity, i.e. its directory entry number (2*Number-1)
        	:param ent:
        	:type ent: Standard_Transient
        	:param S:
        	:type S: Message_Messenger
        	:rtype: None
        """
        return _IGESData.IGESData_IGESModel_PrintInfo(self, *args)


    def SetGlobalSection(self, *args) -> "void":
        """
        * Sets the Global section of the IGES file.
        	:param header:
        	:type header: IGESData_GlobalSection
        	:rtype: None
        """
        return _IGESData.IGESData_IGESModel_SetGlobalSection(self, *args)


    def SetLineWeights(self, *args) -> "void":
        """
        * Sets LineWeights of contained Entities according header data (MaxLineWeight and LineWeightGrad) or to a default value for undefined weights
        	:param defw:
        	:type defw: float
        	:rtype: None
        """
        return _IGESData.IGESData_IGESModel_SetLineWeights(self, *args)


    def SetStartSection(self, *args) -> "void":
        """
        * Sets a new Start section from a list of strings. If copy is false, the Start section will be shared. Any modifications made to the strings later on, will have an effect on the Start section. If copy is true (default value), an independent copy of the strings is created and used as the Start section. Any modifications made to the strings later on, will have no effect on the Start section.
        	:param list:
        	:type list: TColStd_HSequenceOfHAsciiString
        	:param copy: default value is Standard_True
        	:type copy: bool
        	:rtype: None
        """
        return _IGESData.IGESData_IGESModel_SetStartSection(self, *args)


    def StartLine(self, *args) -> "char const *":
        """
        * Returns a line from the IGES file Start section by specifying its number. An empty string is returned if the number given is out of range, the range being from 1 to NbStartLines.
        	:param num:
        	:type num: int
        	:rtype: char *
        """
        return _IGESData.IGESData_IGESModel_StartLine(self, *args)


    def StartSection(self, *args) -> "opencascade::handle< TColStd_HSequenceOfHAsciiString >":
        """
        * Returns Model's Start Section (list of comment lines)
        	:rtype: opencascade::handle<TColStd_HSequenceOfHAsciiString>
        """
        return _IGESData.IGESData_IGESModel_StartSection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_IGESModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_IGESModel
IGESData_IGESModel.AddStartLine = new_instancemethod(_IGESData.IGESData_IGESModel_AddStartLine, None, IGESData_IGESModel)
IGESData_IGESModel.ApplyStatic = new_instancemethod(_IGESData.IGESData_IGESModel_ApplyStatic, None, IGESData_IGESModel)
IGESData_IGESModel.ClearStartSection = new_instancemethod(_IGESData.IGESData_IGESModel_ClearStartSection, None, IGESData_IGESModel)
IGESData_IGESModel.DNum = new_instancemethod(_IGESData.IGESData_IGESModel_DNum, None, IGESData_IGESModel)
IGESData_IGESModel.Entity = new_instancemethod(_IGESData.IGESData_IGESModel_Entity, None, IGESData_IGESModel)
IGESData_IGESModel.GlobalSection = new_instancemethod(_IGESData.IGESData_IGESModel_GlobalSection, None, IGESData_IGESModel)
IGESData_IGESModel.NbStartLines = new_instancemethod(_IGESData.IGESData_IGESModel_NbStartLines, None, IGESData_IGESModel)
IGESData_IGESModel.PrintInfo = new_instancemethod(_IGESData.IGESData_IGESModel_PrintInfo, None, IGESData_IGESModel)
IGESData_IGESModel.SetGlobalSection = new_instancemethod(_IGESData.IGESData_IGESModel_SetGlobalSection, None, IGESData_IGESModel)
IGESData_IGESModel.SetLineWeights = new_instancemethod(_IGESData.IGESData_IGESModel_SetLineWeights, None, IGESData_IGESModel)
IGESData_IGESModel.SetStartSection = new_instancemethod(_IGESData.IGESData_IGESModel_SetStartSection, None, IGESData_IGESModel)
IGESData_IGESModel.StartLine = new_instancemethod(_IGESData.IGESData_IGESModel_StartLine, None, IGESData_IGESModel)
IGESData_IGESModel.StartSection = new_instancemethod(_IGESData.IGESData_IGESModel_StartSection, None, IGESData_IGESModel)
IGESData_IGESModel_swigregister = _IGESData.IGESData_IGESModel_swigregister
IGESData_IGESModel_swigregister(IGESData_IGESModel)

class IGESData_IGESReaderData(OCC.Core.Interface.Interface_FileReaderData):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddGlobal(self, *args) -> "void":
        """
        * adds a parameter to global section's parameter list
        	:param atype:
        	:type atype: Interface_ParamType
        	:param aval:
        	:type aval: char *
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderData_AddGlobal(self, *args)


    def AddStartLine(self, *args) -> "void":
        """
        * adds a start line to start section
        	:param aval:
        	:type aval: char *
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderData_AddStartLine(self, *args)


    def DefaultLineWeight(self, *args) -> "Standard_Real":
        """
        * Returns the recorded Default Line Weight, if there is (else, returns 0)
        	:rtype: float
        """
        return _IGESData.IGESData_IGESReaderData_DefaultLineWeight(self, *args)


    def DirPart(self, *args) -> "IGESData_DirPart const &":
        """
        * returns DirPart identified by record no (half Dsect number)
        	:param num:
        	:type num: int
        	:rtype: IGESData_DirPart
        """
        return _IGESData.IGESData_IGESReaderData_DirPart(self, *args)


    def DirType(self, *args) -> "IGESData_IGESType":
        """
        * returns 'type' and 'form' info from a directory part
        	:param num:
        	:type num: int
        	:rtype: IGESData_IGESType
        """
        return _IGESData.IGESData_IGESReaderData_DirType(self, *args)


    def DirValues(self, *args) -> "void":
        """
        * returns values recorded in directory part n0 <num>
        	:param num:
        	:type num: int
        	:param i1:
        	:type i1: int
        	:param i2:
        	:type i2: int
        	:param i3:
        	:type i3: int
        	:param i4:
        	:type i4: int
        	:param i5:
        	:type i5: int
        	:param i6:
        	:type i6: int
        	:param i7:
        	:type i7: int
        	:param i8:
        	:type i8: int
        	:param i9:
        	:type i9: int
        	:param i10:
        	:type i10: int
        	:param i11:
        	:type i11: int
        	:param i12:
        	:type i12: int
        	:param i13:
        	:type i13: int
        	:param i14:
        	:type i14: int
        	:param i15:
        	:type i15: int
        	:param i16:
        	:type i16: int
        	:param i17:
        	:type i17: int
        	:param res1:
        	:type res1: char *
        	:param res2:
        	:type res2: char *
        	:param label:
        	:type label: char *
        	:param subs:
        	:type subs: char *
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderData_DirValues(self, *args)


    def GlobalCheck(self, *args) -> "opencascade::handle< Interface_Check >":
        """
        * Returns the recorded Global Check
        	:rtype: opencascade::handle<Interface_Check>
        """
        return _IGESData.IGESData_IGESReaderData_GlobalCheck(self, *args)


    def GlobalSection(self, *args) -> "IGESData_GlobalSection const &":
        """
        * returns header as GlobalSection
        	:rtype: IGESData_GlobalSection
        """
        return _IGESData.IGESData_IGESReaderData_GlobalSection(self, *args)


    def __init__(self, *args):
        """
        * creates IGESReaderData correctly dimensionned (for arrays) <nbe> count of entities, that is, half nb of directory lines <nbp> : count of parameters
        	:param nbe:
        	:type nbe: int
        	:param nbp:
        	:type nbp: int
        	:rtype: None
        """
        _IGESData.IGESData_IGESReaderData_swiginit(self, _IGESData.new_IGESData_IGESReaderData(*args))

    def SetDefaultLineWeight(self, *args) -> "void":
        """
        * allows to set a default line weight, will be later applied at load time, on Entities which have no specified line weight
        	:param defw:
        	:type defw: float
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderData_SetDefaultLineWeight(self, *args)


    def SetDirPart(self, *args) -> "void":
        """
        * fills a DirPart, designated by its rank (that is, (N+1)/2 if N is its first number in section D)
        	:param num:
        	:type num: int
        	:param i1:
        	:type i1: int
        	:param i2:
        	:type i2: int
        	:param i3:
        	:type i3: int
        	:param i4:
        	:type i4: int
        	:param i5:
        	:type i5: int
        	:param i6:
        	:type i6: int
        	:param i7:
        	:type i7: int
        	:param i8:
        	:type i8: int
        	:param i9:
        	:type i9: int
        	:param i10:
        	:type i10: int
        	:param i11:
        	:type i11: int
        	:param i12:
        	:type i12: int
        	:param i13:
        	:type i13: int
        	:param i14:
        	:type i14: int
        	:param i15:
        	:type i15: int
        	:param i16:
        	:type i16: int
        	:param i17:
        	:type i17: int
        	:param res1:
        	:type res1: char *
        	:param res2:
        	:type res2: char *
        	:param label:
        	:type label: char *
        	:param subs:
        	:type subs: char *
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderData_SetDirPart(self, *args)


    def SetEntityNumbers(self, *args) -> "void":
        """
        * determines reference numbers in EntityNumber fields (called by SetEntities from IGESReaderTool) works on 'Integer' type Parameters, because IGES does not distinguish Integer and Entity Refs : every Integer which is odd and less than twice NbRecords can be an Entity Ref ... (Ref Number is then (N+1)/2 if N is the Integer Value)
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderData_SetEntityNumbers(self, *args)


    def SetGlobalSection(self, *args) -> "void":
        """
        * reads header (as GlobalSection) content from the ParamSet after it has been filled by successive calls to AddGlobal
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderData_SetGlobalSection(self, *args)


    def StartSection(self, *args) -> "opencascade::handle< TColStd_HSequenceOfHAsciiString >":
        """
        * Returns the Start Section in once
        	:rtype: opencascade::handle<TColStd_HSequenceOfHAsciiString>
        """
        return _IGESData.IGESData_IGESReaderData_StartSection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_IGESReaderData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_IGESReaderData
IGESData_IGESReaderData.AddGlobal = new_instancemethod(_IGESData.IGESData_IGESReaderData_AddGlobal, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.AddStartLine = new_instancemethod(_IGESData.IGESData_IGESReaderData_AddStartLine, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.DefaultLineWeight = new_instancemethod(_IGESData.IGESData_IGESReaderData_DefaultLineWeight, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.DirPart = new_instancemethod(_IGESData.IGESData_IGESReaderData_DirPart, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.DirType = new_instancemethod(_IGESData.IGESData_IGESReaderData_DirType, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.DirValues = new_instancemethod(_IGESData.IGESData_IGESReaderData_DirValues, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.GlobalCheck = new_instancemethod(_IGESData.IGESData_IGESReaderData_GlobalCheck, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.GlobalSection = new_instancemethod(_IGESData.IGESData_IGESReaderData_GlobalSection, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.SetDefaultLineWeight = new_instancemethod(_IGESData.IGESData_IGESReaderData_SetDefaultLineWeight, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.SetDirPart = new_instancemethod(_IGESData.IGESData_IGESReaderData_SetDirPart, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.SetEntityNumbers = new_instancemethod(_IGESData.IGESData_IGESReaderData_SetEntityNumbers, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.SetGlobalSection = new_instancemethod(_IGESData.IGESData_IGESReaderData_SetGlobalSection, None, IGESData_IGESReaderData)
IGESData_IGESReaderData.StartSection = new_instancemethod(_IGESData.IGESData_IGESReaderData_StartSection, None, IGESData_IGESReaderData)
IGESData_IGESReaderData_swigregister = _IGESData.IGESData_IGESReaderData_swigregister
IGESData_IGESReaderData_swigregister(IGESData_IGESReaderData)

class IGESData_IGESReaderTool(OCC.Core.Interface.Interface_FileReaderTool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * creates IGESReaderTool to work with an IGESReaderData and an IGES Protocol. Actually, no Lib is used
        	:param reader:
        	:type reader: IGESData_IGESReaderData
        	:param protocol:
        	:type protocol: IGESData_Protocol
        	:rtype: None
        """
        _IGESData.IGESData_IGESReaderTool_swiginit(self, _IGESData.new_IGESData_IGESReaderTool(*args))

    def Prepare(self, *args) -> "void":
        """
        * binds empty entities to records, works with the Protocol (from IGESData) stored and later used RQ : Actually, sets DNum into IGES Entities Also loads the list of parameters for ParamReader
        	:param reco:
        	:type reco: IGESData_FileRecognizer
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderTool_Prepare(self, *args)


    def ReadAssocs(self, *args) -> "void":
        """
        * Reads Associativity List, if there is (if not, does nothing) criterium is : current parameter of PR remains inside params list, and Stage is 'Own' Same conditions as above; in addition, no parameter must be let after the list once read Note that 'Associated' entities are not declared 'Shared'
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param IR:
        	:type IR: IGESData_IGESReaderData
        	:param PR:
        	:type PR: IGESData_ParamReader
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderTool_ReadAssocs(self, *args)


    def ReadDir(self, *args) -> "void":
        """
        * Reads directory part componants from file; DP is the litteral directory part, IR detains entities referenced by DP
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param IR:
        	:type IR: IGESData_IGESReaderData
        	:param DP:
        	:type DP: IGESData_DirPart
        	:param ach:
        	:type ach: Interface_Check
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderTool_ReadDir(self, *args)


    def ReadOwnParams(self, *args) -> "void":
        """
        * Performs Reading of own Parameters for each IGESEntity Works with the ReaderLib loaded with ReadWriteModules for IGES In case of failure, tries UndefinedEntity from IGES
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param IR:
        	:type IR: IGESData_IGESReaderData
        	:param PR:
        	:type PR: IGESData_ParamReader
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderTool_ReadOwnParams(self, *args)


    def ReadProps(self, *args) -> "void":
        """
        * Reads Property List, if there is (if not, does nothing) criterium is : current parameter of PR remains inside params list, and Stage is 'Own' Current parameter must be a positive integer, which value gives the length of the list; else, a Fail is produced (into Check of PR) and reading process is stopped
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param IR:
        	:type IR: IGESData_IGESReaderData
        	:param PR:
        	:type PR: IGESData_ParamReader
        	:rtype: None
        """
        return _IGESData.IGESData_IGESReaderTool_ReadProps(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_IGESReaderTool
IGESData_IGESReaderTool.Prepare = new_instancemethod(_IGESData.IGESData_IGESReaderTool_Prepare, None, IGESData_IGESReaderTool)
IGESData_IGESReaderTool.ReadAssocs = new_instancemethod(_IGESData.IGESData_IGESReaderTool_ReadAssocs, None, IGESData_IGESReaderTool)
IGESData_IGESReaderTool.ReadDir = new_instancemethod(_IGESData.IGESData_IGESReaderTool_ReadDir, None, IGESData_IGESReaderTool)
IGESData_IGESReaderTool.ReadOwnParams = new_instancemethod(_IGESData.IGESData_IGESReaderTool_ReadOwnParams, None, IGESData_IGESReaderTool)
IGESData_IGESReaderTool.ReadProps = new_instancemethod(_IGESData.IGESData_IGESReaderTool_ReadProps, None, IGESData_IGESReaderTool)
IGESData_IGESReaderTool_swigregister = _IGESData.IGESData_IGESReaderTool_swigregister
IGESData_IGESReaderTool_swigregister(IGESData_IGESReaderTool)

class IGESData_IGESType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Form(self, *args) -> "Standard_Integer":
        """
        * returns 'form' data
        	:rtype: int
        """
        return _IGESData.IGESData_IGESType_Form(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param atype:
        	:type atype: int
        	:param aform:
        	:type aform: int
        	:rtype: None
        """
        _IGESData.IGESData_IGESType_swiginit(self, _IGESData.new_IGESData_IGESType(*args))

    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        * compares two IGESTypes, avoiding comparing their fields
        	:param another:
        	:type another: IGESData_IGESType
        	:rtype: bool
        """
        return _IGESData.IGESData_IGESType_IsEqual(self, *args)


    def Nullify(self, *args) -> "void":
        """
        * resets fields (usefull when an IGESType is stored as mask)
        	:rtype: None
        """
        return _IGESData.IGESData_IGESType_Nullify(self, *args)


    def Type(self, *args) -> "Standard_Integer":
        """
        * returns 'type' data
        	:rtype: int
        """
        return _IGESData.IGESData_IGESType_Type(self, *args)


    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_IGESType
IGESData_IGESType.Form = new_instancemethod(_IGESData.IGESData_IGESType_Form, None, IGESData_IGESType)
IGESData_IGESType.IsEqual = new_instancemethod(_IGESData.IGESData_IGESType_IsEqual, None, IGESData_IGESType)
IGESData_IGESType.Nullify = new_instancemethod(_IGESData.IGESData_IGESType_Nullify, None, IGESData_IGESType)
IGESData_IGESType.Type = new_instancemethod(_IGESData.IGESData_IGESType_Type, None, IGESData_IGESType)
IGESData_IGESType.__eq_wrapper__ = new_instancemethod(_IGESData.IGESData_IGESType___eq_wrapper__, None, IGESData_IGESType)
IGESData_IGESType_swigregister = _IGESData.IGESData_IGESType_swigregister
IGESData_IGESType_swigregister(IGESData_IGESType)

class IGESData_IGESWriter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Associativities(self, *args) -> "void":
        """
        * sends associativity list, as complement of parameters list error if not in sections DP or Stage not 'Associativity'
        	:param anent:
        	:type anent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_Associativities(self, *args)


    def DirPart(self, *args) -> "void":
        """
        * translates directory part of an Entity into a litteral DirPart Some infos are computed after sending parameters Error if not in sections DP or Stage not 'Dir'
        	:param anent:
        	:type anent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_DirPart(self, *args)


    def EndEntity(self, *args) -> "void":
        """
        * declares end of sending an entity (ends param list by ';')
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_EndEntity(self, *args)


    def FloatWriter(self, *args) -> "Interface_FloatWriter &":
        """
        * Returns the embedded FloatWriter, which controls sending Reals Use this method to access FloatWriter in order to consult or change its options (MainFormat, FormatForRange,ZeroSuppress), because it is returned as the address of its field
        	:rtype: Interface_FloatWriter
        """
        return _IGESData.IGESData_IGESWriter_FloatWriter(self, *args)


    def __init__(self, *args):
        """
        * Creates an IGESWriter, empty ready to work (see the methods SendModel and Print)
        	:param amodel:
        	:type amodel: IGESData_IGESModel
        	:rtype: None
        * Default constructor (not used) to satisfy the compiler
        	:rtype: None
        * Constructor by copy (not used) to satisfy the compiler
        	:param other:
        	:type other: IGESData_IGESWriter
        	:rtype: None
        """
        _IGESData.IGESData_IGESWriter_swiginit(self, _IGESData.new_IGESData_IGESWriter(*args))

    def OwnParams(self, *args) -> "void":
        """
        * sends own parameters of the entity, by sending firstly its type, then calling specific method WriteOwnParams Error if not in sections DP or Stage not 'Own'
        	:param anent:
        	:type anent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_OwnParams(self, *args)


    def PrintToString(self) -> "std::string":
        """PrintToString(IGESData_IGESWriter self) -> std::string"""
        return _IGESData.IGESData_IGESWriter_PrintToString(self)


    def Properties(self, *args) -> "void":
        """
        * sends property list, as complement of parameters list error if not in sections DP or Stage not 'Property'
        	:param anent:
        	:type anent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_Properties(self, *args)


    def SectionG(self, *args) -> "void":
        """
        * prepares sending of header, from a GlobalSection (stores it) error if SectionS was not called just before takes in account special characters (Separator, EndMark)
        	:param header:
        	:type header: IGESData_GlobalSection
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_SectionG(self, *args)


    def SectionS(self, *args) -> "void":
        """
        * declares sending of S section (only a declaration) error if state is not initial
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_SectionS(self, *args)


    def SectionStrings(self, *args) -> "opencascade::handle< TColStd_HSequenceOfHAsciiString >":
        """
        * Returns the list of strings for a section given its rank 1 : Start (if not empty) 2 : Global 3 or 4 : Parameters RQ: no string list for Directory section An empty section gives a null handle
        	:param numsec:
        	:type numsec: int
        	:rtype: opencascade::handle<TColStd_HSequenceOfHAsciiString>
        """
        return _IGESData.IGESData_IGESWriter_SectionStrings(self, *args)


    def SectionT(self, *args) -> "void":
        """
        * declares sending of T section (only a declaration) error if does not follow Entities sending
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_SectionT(self, *args)


    def SectionsDP(self, *args) -> "void":
        """
        * prepares sending of list of entities, as Sections D (directory list) and P (Parameters lists, one per entity) Entities will be then processed, one after the other error if SectionG has not be called just before
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_SectionsDP(self, *args)


    def SendBoolean(self, *args) -> "void":
        """
        * sends a Boolean parameter as an Integer value 0(False)/1(True)
        	:param val:
        	:type val: bool
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_SendBoolean(self, *args)


    def SendModel(self, *args) -> "void":
        """
        * Sends the complete IGESModel (Global Section, Entities as Directory Entries & Parameter Lists, etc...) i.e. fills a list of texts. Once filled, it can be sent by method Print
        	:param protocol:
        	:type protocol: IGESData_Protocol
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_SendModel(self, *args)


    def SendStartLine(self, *args) -> "void":
        """
        * Sends an additionnal Starting Line : this is the way used to send comments in an IGES File (at beginning of the file). If the line is more than 72 char.s long, it is splited into as many lines as required to send it completely
        	:param startline:
        	:type startline: char *
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_SendStartLine(self, *args)


    def SendString(self, *args) -> "void":
        """
        * sends a parameter under its exact form given as a string
        	:param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_SendString(self, *args)


    def SendVoid(self, *args) -> "void":
        """
        * sends a void parameter, that is null text
        	:rtype: None
        """
        return _IGESData.IGESData_IGESWriter_SendVoid(self, *args)


    def GetWriteMode(self) -> "Standard_Integer":
        """GetWriteMode(IGESData_IGESWriter self) -> Standard_Integer"""
        return _IGESData.IGESData_IGESWriter_GetWriteMode(self)


    def SetWriteMode(self, value: 'Standard_Integer') -> "void":
        """SetWriteMode(IGESData_IGESWriter self, Standard_Integer value)"""
        return _IGESData.IGESData_IGESWriter_SetWriteMode(self, value)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_IGESWriter
IGESData_IGESWriter.Associativities = new_instancemethod(_IGESData.IGESData_IGESWriter_Associativities, None, IGESData_IGESWriter)
IGESData_IGESWriter.DirPart = new_instancemethod(_IGESData.IGESData_IGESWriter_DirPart, None, IGESData_IGESWriter)
IGESData_IGESWriter.EndEntity = new_instancemethod(_IGESData.IGESData_IGESWriter_EndEntity, None, IGESData_IGESWriter)
IGESData_IGESWriter.FloatWriter = new_instancemethod(_IGESData.IGESData_IGESWriter_FloatWriter, None, IGESData_IGESWriter)
IGESData_IGESWriter.OwnParams = new_instancemethod(_IGESData.IGESData_IGESWriter_OwnParams, None, IGESData_IGESWriter)
IGESData_IGESWriter.PrintToString = new_instancemethod(_IGESData.IGESData_IGESWriter_PrintToString, None, IGESData_IGESWriter)
IGESData_IGESWriter.Properties = new_instancemethod(_IGESData.IGESData_IGESWriter_Properties, None, IGESData_IGESWriter)
IGESData_IGESWriter.SectionG = new_instancemethod(_IGESData.IGESData_IGESWriter_SectionG, None, IGESData_IGESWriter)
IGESData_IGESWriter.SectionS = new_instancemethod(_IGESData.IGESData_IGESWriter_SectionS, None, IGESData_IGESWriter)
IGESData_IGESWriter.SectionStrings = new_instancemethod(_IGESData.IGESData_IGESWriter_SectionStrings, None, IGESData_IGESWriter)
IGESData_IGESWriter.SectionT = new_instancemethod(_IGESData.IGESData_IGESWriter_SectionT, None, IGESData_IGESWriter)
IGESData_IGESWriter.SectionsDP = new_instancemethod(_IGESData.IGESData_IGESWriter_SectionsDP, None, IGESData_IGESWriter)
IGESData_IGESWriter.SendBoolean = new_instancemethod(_IGESData.IGESData_IGESWriter_SendBoolean, None, IGESData_IGESWriter)
IGESData_IGESWriter.SendModel = new_instancemethod(_IGESData.IGESData_IGESWriter_SendModel, None, IGESData_IGESWriter)
IGESData_IGESWriter.SendStartLine = new_instancemethod(_IGESData.IGESData_IGESWriter_SendStartLine, None, IGESData_IGESWriter)
IGESData_IGESWriter.SendString = new_instancemethod(_IGESData.IGESData_IGESWriter_SendString, None, IGESData_IGESWriter)
IGESData_IGESWriter.SendVoid = new_instancemethod(_IGESData.IGESData_IGESWriter_SendVoid, None, IGESData_IGESWriter)
IGESData_IGESWriter.GetWriteMode = new_instancemethod(_IGESData.IGESData_IGESWriter_GetWriteMode, None, IGESData_IGESWriter)
IGESData_IGESWriter.SetWriteMode = new_instancemethod(_IGESData.IGESData_IGESWriter_SetWriteMode, None, IGESData_IGESWriter)
IGESData_IGESWriter_swigregister = _IGESData.IGESData_IGESWriter_swigregister
IGESData_IGESWriter_swigregister(IGESData_IGESWriter)

class IGESData_NodeOfSpecificLib(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddNode(self, *args) -> "void":
        """
        * Adds a couple (Module,Protocol), that is, stores it into itself if not yet done, else creates a Next Node to do it
        	:param anode:
        	:type anode: IGESData_GlobalNodeOfSpecificLib
        	:rtype: None
        """
        return _IGESData.IGESData_NodeOfSpecificLib_AddNode(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty Node, with no Next
        	:rtype: None
        """
        _IGESData.IGESData_NodeOfSpecificLib_swiginit(self, _IGESData.new_IGESData_NodeOfSpecificLib(*args))

    def Module(self, *args) -> "opencascade::handle< IGESData_SpecificModule > const &":
        """
        * Returns the Module designated by a precise Node
        	:rtype: opencascade::handle<IGESData_SpecificModule>
        """
        return _IGESData.IGESData_NodeOfSpecificLib_Module(self, *args)


    def Next(self, *args) -> "opencascade::handle< IGESData_NodeOfSpecificLib > const &":
        """
        * Returns the Next Node. If none was defined, returned value is a Null Handle
        	:rtype: opencascade::handle<IGESData_NodeOfSpecificLib>
        """
        return _IGESData.IGESData_NodeOfSpecificLib_Next(self, *args)


    def Protocol(self, *args) -> "opencascade::handle< IGESData_Protocol > const &":
        """
        * Returns the Protocol designated by a precise Node
        	:rtype: opencascade::handle<IGESData_Protocol>
        """
        return _IGESData.IGESData_NodeOfSpecificLib_Protocol(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_NodeOfSpecificLib_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_NodeOfSpecificLib
IGESData_NodeOfSpecificLib.AddNode = new_instancemethod(_IGESData.IGESData_NodeOfSpecificLib_AddNode, None, IGESData_NodeOfSpecificLib)
IGESData_NodeOfSpecificLib.Module = new_instancemethod(_IGESData.IGESData_NodeOfSpecificLib_Module, None, IGESData_NodeOfSpecificLib)
IGESData_NodeOfSpecificLib.Next = new_instancemethod(_IGESData.IGESData_NodeOfSpecificLib_Next, None, IGESData_NodeOfSpecificLib)
IGESData_NodeOfSpecificLib.Protocol = new_instancemethod(_IGESData.IGESData_NodeOfSpecificLib_Protocol, None, IGESData_NodeOfSpecificLib)
IGESData_NodeOfSpecificLib_swigregister = _IGESData.IGESData_NodeOfSpecificLib_swigregister
IGESData_NodeOfSpecificLib_swigregister(IGESData_NodeOfSpecificLib)

class IGESData_NodeOfWriterLib(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddNode(self, *args) -> "void":
        """
        * Adds a couple (Module,Protocol), that is, stores it into itself if not yet done, else creates a Next Node to do it
        	:param anode:
        	:type anode: IGESData_GlobalNodeOfWriterLib
        	:rtype: None
        """
        return _IGESData.IGESData_NodeOfWriterLib_AddNode(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty Node, with no Next
        	:rtype: None
        """
        _IGESData.IGESData_NodeOfWriterLib_swiginit(self, _IGESData.new_IGESData_NodeOfWriterLib(*args))

    def Module(self, *args) -> "opencascade::handle< IGESData_ReadWriteModule > const &":
        """
        * Returns the Module designated by a precise Node
        	:rtype: opencascade::handle<IGESData_ReadWriteModule>
        """
        return _IGESData.IGESData_NodeOfWriterLib_Module(self, *args)


    def Next(self, *args) -> "opencascade::handle< IGESData_NodeOfWriterLib > const &":
        """
        * Returns the Next Node. If none was defined, returned value is a Null Handle
        	:rtype: opencascade::handle<IGESData_NodeOfWriterLib>
        """
        return _IGESData.IGESData_NodeOfWriterLib_Next(self, *args)


    def Protocol(self, *args) -> "opencascade::handle< IGESData_Protocol > const &":
        """
        * Returns the Protocol designated by a precise Node
        	:rtype: opencascade::handle<IGESData_Protocol>
        """
        return _IGESData.IGESData_NodeOfWriterLib_Protocol(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_NodeOfWriterLib_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_NodeOfWriterLib
IGESData_NodeOfWriterLib.AddNode = new_instancemethod(_IGESData.IGESData_NodeOfWriterLib_AddNode, None, IGESData_NodeOfWriterLib)
IGESData_NodeOfWriterLib.Module = new_instancemethod(_IGESData.IGESData_NodeOfWriterLib_Module, None, IGESData_NodeOfWriterLib)
IGESData_NodeOfWriterLib.Next = new_instancemethod(_IGESData.IGESData_NodeOfWriterLib_Next, None, IGESData_NodeOfWriterLib)
IGESData_NodeOfWriterLib.Protocol = new_instancemethod(_IGESData.IGESData_NodeOfWriterLib_Protocol, None, IGESData_NodeOfWriterLib)
IGESData_NodeOfWriterLib_swigregister = _IGESData.IGESData_NodeOfWriterLib_swigregister
IGESData_NodeOfWriterLib_swigregister(IGESData_NodeOfWriterLib)

class IGESData_ParamCursor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Advance(self, *args) -> "Standard_Boolean":
        """
        * Returns True if Advance command has been set
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamCursor_Advance(self, *args)


    def Count(self, *args) -> "Standard_Integer":
        """
        * Returns required count of items to be read
        	:rtype: int
        """
        return _IGESData.IGESData_ParamCursor_Count(self, *args)


    def __init__(self, *args):
        """
        * Creates a Cursor to read a precise parameter of ParamReader, identified by its number, then set Current Number to 'num + 1' (this constructor allows to simply give a Number to a method Read... from ParamReader, which will be translated into a ParamCursor by compiler)
        	:param num:
        	:type num: int
        	:rtype: None
        * Creates a Cursor to read a list of parameters (count 'nb') starting from a precise one (number 'num') included, then set Current Number of ParamNumber to the first following one ('num + nb') If size is given, it means that each parameter is made of more than one term. One term is the normal (default) case : for instance, a Parameter comprises one Integer, or one Entity ... Size gives the complete size of each Item if it is complex. To be used ONLY IF it is constant
        	:param num:
        	:type num: int
        	:param nb:
        	:type nb: int
        	:param size: default value is 1
        	:type size: int
        	:rtype: None
        """
        _IGESData.IGESData_ParamCursor_swiginit(self, _IGESData.new_IGESData_ParamCursor(*args))

    def ItemSize(self, *args) -> "Standard_Integer":
        """
        * Returns length of item (count of parameters per item)
        	:rtype: int
        """
        return _IGESData.IGESData_ParamCursor_ItemSize(self, *args)


    def Limit(self, *args) -> "Standard_Integer":
        """
        * Returns (excluded) upper limit number for reading parameters
        	:rtype: int
        """
        return _IGESData.IGESData_ParamCursor_Limit(self, *args)


    def Offset(self, *args) -> "Standard_Integer":
        """
        * Returns offset from which current term must be read in item
        	:rtype: int
        """
        return _IGESData.IGESData_ParamCursor_Offset(self, *args)


    def SetAdvance(self, *args) -> "void":
        """
        * Changes command to advance current cursor after reading parameters. If 'advance' True, sets advance, if 'False', resets it. ParamCursor is created by default with True.
        	:param advance:
        	:type advance: bool
        	:rtype: None
        """
        return _IGESData.IGESData_ParamCursor_SetAdvance(self, *args)


    def SetOne(self, *args) -> "void":
        """
        * Defines a term of one Parameter (very current case)
        	:param autoadv: default value is Standard_True
        	:type autoadv: bool
        	:rtype: None
        """
        return _IGESData.IGESData_ParamCursor_SetOne(self, *args)


    def SetTerm(self, *args) -> "void":
        """
        * Defines the size of a term to read in the item : this commands ParamReader to read 'size' parameters for each item, then skip the remainder of the item to the same term of next Item (that is, skip 'item size' - 'term size') //! In addition, Offset from beginning of Item is managed : After being created, and for the frist call to SetTerm, the part of Item to be read begins exactly as the Item begins But after a SetTerm, the next read will add an offset which is the size of former term. //! autoadv commands Advance management. If it is True (default), the last SetTerm (Item size has been covered) calls SetAdvance If it is False, SetAdvance must be called directly if necessary //! Error if a SetTerm overpasses the size of the Item
        	:param size:
        	:type size: int
        	:param autoadv: default value is Standard_True
        	:type autoadv: bool
        	:rtype: None
        """
        return _IGESData.IGESData_ParamCursor_SetTerm(self, *args)


    def SetXY(self, *args) -> "void":
        """
        * Defines a term of two Parameters for a XY (current case)
        	:param autoadv: default value is Standard_True
        	:type autoadv: bool
        	:rtype: None
        """
        return _IGESData.IGESData_ParamCursor_SetXY(self, *args)


    def SetXYZ(self, *args) -> "void":
        """
        * Defines a term of three Parameters for XYZ (current case)
        	:param autoadv: default value is Standard_True
        	:type autoadv: bool
        	:rtype: None
        """
        return _IGESData.IGESData_ParamCursor_SetXYZ(self, *args)


    def Start(self, *args) -> "Standard_Integer":
        """
        * Returns (included) starting number for reading parameters
        	:rtype: int
        """
        return _IGESData.IGESData_ParamCursor_Start(self, *args)


    def TermSize(self, *args) -> "Standard_Integer":
        """
        * Returns length of current term (count of parameters) in item
        	:rtype: int
        """
        return _IGESData.IGESData_ParamCursor_TermSize(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_ParamCursor
IGESData_ParamCursor.Advance = new_instancemethod(_IGESData.IGESData_ParamCursor_Advance, None, IGESData_ParamCursor)
IGESData_ParamCursor.Count = new_instancemethod(_IGESData.IGESData_ParamCursor_Count, None, IGESData_ParamCursor)
IGESData_ParamCursor.ItemSize = new_instancemethod(_IGESData.IGESData_ParamCursor_ItemSize, None, IGESData_ParamCursor)
IGESData_ParamCursor.Limit = new_instancemethod(_IGESData.IGESData_ParamCursor_Limit, None, IGESData_ParamCursor)
IGESData_ParamCursor.Offset = new_instancemethod(_IGESData.IGESData_ParamCursor_Offset, None, IGESData_ParamCursor)
IGESData_ParamCursor.SetAdvance = new_instancemethod(_IGESData.IGESData_ParamCursor_SetAdvance, None, IGESData_ParamCursor)
IGESData_ParamCursor.SetOne = new_instancemethod(_IGESData.IGESData_ParamCursor_SetOne, None, IGESData_ParamCursor)
IGESData_ParamCursor.SetTerm = new_instancemethod(_IGESData.IGESData_ParamCursor_SetTerm, None, IGESData_ParamCursor)
IGESData_ParamCursor.SetXY = new_instancemethod(_IGESData.IGESData_ParamCursor_SetXY, None, IGESData_ParamCursor)
IGESData_ParamCursor.SetXYZ = new_instancemethod(_IGESData.IGESData_ParamCursor_SetXYZ, None, IGESData_ParamCursor)
IGESData_ParamCursor.Start = new_instancemethod(_IGESData.IGESData_ParamCursor_Start, None, IGESData_ParamCursor)
IGESData_ParamCursor.TermSize = new_instancemethod(_IGESData.IGESData_ParamCursor_TermSize, None, IGESData_ParamCursor)
IGESData_ParamCursor_swigregister = _IGESData.IGESData_ParamCursor_swigregister
IGESData_ParamCursor_swigregister(IGESData_ParamCursor)

class IGESData_ParamReader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddFail(self, *args) -> "void":
        """
        :param afail:
        	:type afail: char *
        	:param bfail: default value is 
        	:type bfail: char *
        	:rtype: None
        * feeds the Check with a new fail (as a String or as a CString)
        	:param af:
        	:type af: TCollection_HAsciiString
        	:param bf:
        	:type bf: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_ParamReader_AddFail(self, *args)


    def AddWarning(self, *args) -> "void":
        """
        :param awarn:
        	:type awarn: char *
        	:param bwarn: default value is 
        	:type bwarn: char *
        	:rtype: None
        * feeds the Check with a new Warning message
        	:param aw:
        	:type aw: TCollection_HAsciiString
        	:param bw:
        	:type bw: TCollection_HAsciiString
        	:rtype: None
        """
        return _IGESData.IGESData_ParamReader_AddWarning(self, *args)


    def CCheck(self, *args) -> "opencascade::handle< Interface_Check > &":
        """
        * returns the check in a way which allows to work on it directly (i.e. messages added to the Check are added to ParamReader too)
        	:rtype: opencascade::handle<Interface_Check>
        """
        return _IGESData.IGESData_ParamReader_CCheck(self, *args)


    def Check(self, *args) -> "opencascade::handle< Interface_Check > const &":
        """
        * returns the Check Note that any error signaled above is also recorded into it
        	:rtype: opencascade::handle<Interface_Check>
        """
        return _IGESData.IGESData_ParamReader_Check(self, *args)


    def Clear(self, *args) -> "void":
        """
        * resets state (stage, current param number, check with no fail)
        	:rtype: None
        """
        return _IGESData.IGESData_ParamReader_Clear(self, *args)


    def Current(self, *args) -> "IGESData_ParamCursor":
        """
        * Creates a ParamCursor from the Current Number, to read one parameter, and to advance Current Number after reading
        	:rtype: IGESData_ParamCursor
        """
        return _IGESData.IGESData_ParamReader_Current(self, *args)


    def CurrentList(self, *args) -> "IGESData_ParamCursor":
        """
        * Creates a ParamCursor from the Current Number, to read a list of 'nb' items, and to advance Current Number after reading By default, each item is made of one parameter If size is given, it precises the number of params per item
        	:param nb:
        	:type nb: int
        	:param size: default value is 1
        	:type size: int
        	:rtype: IGESData_ParamCursor
        """
        return _IGESData.IGESData_ParamReader_CurrentList(self, *args)


    def CurrentNumber(self, *args) -> "Standard_Integer":
        """
        * returns the current parameter number This notion is involved by the organisation of an IGES list of parameter : it can be ended by two lists (Associativities and Properties), which can be empty, or even absent. Hence, it is necessary to know, at the end of specific reading, how many parameters have been read : the optionnal lists follow
        	:rtype: int
        """
        return _IGESData.IGESData_ParamReader_CurrentNumber(self, *args)


    def DefinedElseSkip(self, *args) -> "Standard_Boolean":
        """
        * Allows to simply process a parameter which can be defaulted. Waits on the Current Number a defined parameter or skips it : If the parameter <num> is defined, changes nothing and returns True Hence, the next reading with current cursor will concern <num> If it is void, advances Current Position by one, and returns False The next reading will concern <num+1> (except if <num> = NbParams) //! This allows to process Default values as follows (C++) : if (PR.DefinedElseSkip()) { .. PR.Read... (current parameter); } else { <current parameter> = default value .. nothing else to do with ParamReader } For Message
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_DefinedElseSkip(self, *args)


    def EndAll(self, *args) -> "void":
        """
        * passes directly to the end of reading process
        	:rtype: None
        """
        return _IGESData.IGESData_ParamReader_EndAll(self, *args)


    def EntityNumber(self, *args) -> "Standard_Integer":
        """
        * Returns the entity number in the file
        	:rtype: int
        """
        return _IGESData.IGESData_ParamReader_EntityNumber(self, *args)


    def HasFailed(self, *args) -> "Standard_Boolean":
        """
        * says if fails have been recorded into the Check
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_HasFailed(self, *args)


    def __init__(self, *args):
        """
        * Prepares a ParamReader, stage 'Own', current param = 1 It considers a part of the list, from <base> (excluded) for <nbpar> parameters; <nbpar> = 0 commands to take list length. Default is (1 to skip type)
        	:param list:
        	:type list: Interface_ParamList
        	:param ach:
        	:type ach: Interface_Check
        	:param base: default value is 1
        	:type base: int
        	:param nbpar: default value is 0
        	:type nbpar: int
        	:param num: default value is 0
        	:type num: int
        	:rtype: None
        """
        _IGESData.IGESData_ParamReader_swiginit(self, _IGESData.new_IGESData_ParamReader(*args))

    def IsCheckEmpty(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Check is Empty Else, it has to be recorded with the Read Entity
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_IsCheckEmpty(self, *args)


    def IsParamDefined(self, *args) -> "Standard_Boolean":
        """
        * says if a parameter is defined (not void) See also DefinedElseSkip
        	:param num:
        	:type num: int
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_IsParamDefined(self, *args)


    def IsParamEntity(self, *args) -> "Standard_Boolean":
        """
        * says if a parameter can be regarded as an entity reference (see Prepare from IGESReaderData for more explanation) Note that such a parameter can seen as be a plain Integer too
        	:param num:
        	:type num: int
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_IsParamEntity(self, *args)


    def Mend(self, *args) -> "void":
        """
        :param pref: default value is 
        	:type pref: char *
        	:rtype: None
        """
        return _IGESData.IGESData_ParamReader_Mend(self, *args)


    def NbParams(self, *args) -> "Standard_Integer":
        """
        * returns number of parameters (minus the first one) following method skip the first parameter (1 gives the 2nd)
        	:rtype: int
        """
        return _IGESData.IGESData_ParamReader_NbParams(self, *args)


    def NextStage(self, *args) -> "void":
        """
        * passes to next stage (must be linked with setting Current)
        	:rtype: None
        """
        return _IGESData.IGESData_ParamReader_NextStage(self, *args)


    def ParamEntity(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * directly returns entity referenced by a parameter
        	:param IR:
        	:type IR: IGESData_IGESReaderData
        	:param num:
        	:type num: int
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_ParamReader_ParamEntity(self, *args)


    def ParamNumber(self, *args) -> "Standard_Integer":
        """
        * returns entity number corresponding to a parameter if there is otherwise zero (according criterium IsParamEntity)
        	:param num:
        	:type num: int
        	:rtype: int
        """
        return _IGESData.IGESData_ParamReader_ParamNumber(self, *args)


    def ParamType(self, *args) -> "Interface_ParamType":
        """
        * returns type of parameter; note that 'Ident' or 'Sub' cannot be encountered, they correspond to 'Integer', see also below
        	:param num:
        	:type num: int
        	:rtype: Interface_ParamType
        """
        return _IGESData.IGESData_ParamReader_ParamType(self, *args)


    def ParamValue(self, *args) -> "char const *":
        """
        * returns litteral value of a parameter, as it was in file
        	:param num:
        	:type num: int
        	:rtype: char *
        """
        return _IGESData.IGESData_ParamReader_ParamValue(self, *args)


    def ReadBoolean(self, *args) -> "Standard_Boolean":
        """
        :param PC:
        	:type PC: IGESData_ParamCursor
        	:param amsg:
        	:type amsg: Message_Msg
        	:param val:
        	:type val: bool
        	:param exact: default value is Standard_True
        	:type exact: bool
        	:rtype: bool
        * Reads a Boolean value from parameter 'num' A Boolean is given as an Integer value 0 (False) or 1 (True) Anyway, an Integer is demanded (else, Check is filled) If exact is given True, those precise values are demanded Else, Correction is done, as False for 0 or <0, True for >0 (with a Warning error message, and return is True) In case of error (not an Integer, or not 0/1 and exact True), Check is filled with a Fail (using mess) and return is False
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: bool
        	:param exact: default value is Standard_True
        	:type exact: bool
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadBoolean(self, *args)


    def ReadEntList(self, *args) -> "Standard_Boolean":
        """
        :param IR:
        	:type IR: IGESData_IGESReaderData
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param amsg:
        	:type amsg: Message_Msg
        	:param val:
        	:type val: Interface_EntityList
        	:param ord: default value is Standard_True
        	:type ord: bool
        	:rtype: bool
        * Reads a list of Entities defined by PC Same conditions as for ReadEnts, for PC The list is given as an EntityList (index has no meaning; the EntityList starts from clear) If 'ord' is given True (default), entities will be added to the list in their original order Remark : Negative or Null Pointers are ignored Else ('ord' False), order is not garanteed (faster mode) If all params cannot be read as Entities, same as above Warning Give 'ord' to False ONLY if order is not significant
        	:param IR:
        	:type IR: IGESData_IGESReaderData
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: Interface_EntityList
        	:param ord: default value is Standard_True
        	:type ord: bool
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadEntList(self, *args)


    def ReadEnts(self, *args) -> "Standard_Boolean":
        """
        :param IR:
        	:type IR: IGESData_IGESReaderData
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param amsg:
        	:type amsg: Message_Msg
        	:param val:
        	:type val: IGESData_HArray1OfIGESEntity
        	:param index: default value is 1
        	:type index: int
        	:rtype: bool
        * Reads a list of Entities defined by PC Same conditions as for ReadInts, for PC and index The list is given as a HArray1, numered from 'index' If all params cannot be read as Entities, Check is filled (using mess) and return value is False Remark : Null references are accepted, they are ignored (negative pointers too : they provoke a Warning message) If the caller wants to check them, a loop on ReadEntity should be used
        	:param IR:
        	:type IR: IGESData_IGESReaderData
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: IGESData_HArray1OfIGESEntity
        	:param index: default value is 1
        	:type index: int
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadEnts(self, *args)


    def ReadInteger(self, *args) -> "Standard_Boolean":
        """
        :param PC:
        	:type PC: IGESData_ParamCursor
        	:param val:
        	:type val: int
        	:rtype: bool
        * Reads an Integer value designated by PC The method Current designates the current parameter and advances the Current Number by one after reading Note that if a count (not 1) is given, it is ignored If it is not an Integer, fills Check with a Fail (using mess) and returns False
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: int
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadInteger(self, *args)


    def ReadInts(self, *args) -> "Standard_Boolean":
        """
        :param PC:
        	:type PC: IGESData_ParamCursor
        	:param amsg:
        	:type amsg: Message_Msg
        	:param val:
        	:type val: TColStd_HArray1OfInteger
        	:param index: default value is 1
        	:type index: int
        	:rtype: bool
        * Reads a list of Integer values, defined by PC (with a count of parameters). PC can start from Current Number and command it to advance after reading (use method CurrentList to do this) The list is given as a HArray1, numered from 'index' If all params are not Integer, Check is filled (using mess) and return value is False
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: TColStd_HArray1OfInteger
        	:param index: default value is 1
        	:type index: int
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadInts(self, *args)


    def ReadReal(self, *args) -> "Standard_Boolean":
        """
        :param PC:
        	:type PC: IGESData_ParamCursor
        	:param val:
        	:type val: float
        	:rtype: bool
        * Reads a Real value from parameter 'num' An Integer is accepted (Check is filled with a Warning message) and causes return to be True (as normal case) In other cases, Check is filled with a Fail and return is False
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: float
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadReal(self, *args)


    def ReadReals(self, *args) -> "Standard_Boolean":
        """
        :param PC:
        	:type PC: IGESData_ParamCursor
        	:param amsg:
        	:type amsg: Message_Msg
        	:param val:
        	:type val: TColStd_HArray1OfReal
        	:param index: default value is 1
        	:type index: int
        	:rtype: bool
        * Reads a list of Real values defined by PC Same conditions as for ReadInts, for PC and index An Integer parameter is accepted, if at least one parameter is Integer, Check is filled with a 'Warning' message If all params are neither Real nor Integer, Check is filled (using mess) and return value is False
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: TColStd_HArray1OfReal
        	:param index: default value is 1
        	:type index: int
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadReals(self, *args)


    def ReadText(self, *args) -> "Standard_Boolean":
        """
        :param PC:
        	:type PC: IGESData_ParamCursor
        	:param amsg:
        	:type amsg: Message_Msg
        	:param val:
        	:type val: TCollection_HAsciiString
        	:rtype: bool
        * Reads a Text value from parameter 'num', as a String from Collection, that is, Hollerith text without leading 'nnnH' If it is not a String, fills Check with a Fail (using mess) and returns False
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: TCollection_HAsciiString
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadText(self, *args)


    def ReadTexts(self, *args) -> "Standard_Boolean":
        """
        :param PC:
        	:type PC: IGESData_ParamCursor
        	:param amsg:
        	:type amsg: Message_Msg
        	:param val:
        	:type val: Interface_HArray1OfHAsciiString
        	:param index: default value is 1
        	:type index: int
        	:rtype: bool
        * Reads a list of Hollerith Texts, defined by PC Texts are read as Hollerith texts without leading 'nnnH' Same conditions as for ReadInts, for PC and index If all params are not Text, Check is filled (using mess) and return value is False
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: Interface_HArray1OfHAsciiString
        	:param index: default value is 1
        	:type index: int
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadTexts(self, *args)


    def ReadXY(self, *args) -> "Standard_Boolean":
        """
        :param PC:
        	:type PC: IGESData_ParamCursor
        	:param amsg:
        	:type amsg: Message_Msg
        	:param val:
        	:type val: gp_XY
        	:rtype: bool
        * Reads a couple of Real values (X,Y) from parameter 'num' Integers are accepted (Check is filled with a Warning message) and cause return to be True (as normal case) In other cases, Check is filled with a Fail and return is False
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: gp_XY
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadXY(self, *args)


    def ReadXYZ(self, *args) -> "Standard_Boolean":
        """
        :param PC:
        	:type PC: IGESData_ParamCursor
        	:param amsg:
        	:type amsg: Message_Msg
        	:param val:
        	:type val: gp_XYZ
        	:rtype: bool
        * Reads a triplet of Real values (X,Y,Z) from parameter 'num' Integers are accepted (Check is filled with a Warning message) and cause return to be True (as normal case) In other cases, Check is filled with a Fail and return is False For Message
        	:param PC:
        	:type PC: IGESData_ParamCursor
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: gp_XYZ
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadXYZ(self, *args)


    def ReadingEntityNumber(self, *args) -> "Standard_Boolean":
        """
        :param num:
        	:type num: int
        	:param val:
        	:type val: int
        	:rtype: bool
        * Routine which reads an Entity Number (which allows to read the Entity in the IGESReaderData by BoundEntity), given its number in the list of Parameters Same conditions as ReadEntity for mess, val, and return value In particular, returns True and val to zero means Null Entity, and val not zero means Entity read by BoundEntity
        	:param num:
        	:type num: int
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: int
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadingEntityNumber(self, *args)


    def ReadingReal(self, *args) -> "Standard_Boolean":
        """
        :param num:
        	:type num: int
        	:param val:
        	:type val: float
        	:rtype: bool
        * Routine which reads a Real parameter, given its number Same conditions as ReadReal for mess, val, and return value
        	:param num:
        	:type num: int
        	:param mess:
        	:type mess: char *
        	:param val:
        	:type val: float
        	:rtype: bool
        """
        return _IGESData.IGESData_ParamReader_ReadingReal(self, *args)


    def SendFail(self, *args) -> "void":
        """
        :param amsg:
        	:type amsg: Message_Msg
        	:rtype: None
        """
        return _IGESData.IGESData_ParamReader_SendFail(self, *args)


    def SendWarning(self, *args) -> "void":
        """
        :param amsg:
        	:type amsg: Message_Msg
        	:rtype: None
        """
        return _IGESData.IGESData_ParamReader_SendWarning(self, *args)


    def SetCurrentNumber(self, *args) -> "void":
        """
        * sets current parameter number to a new value must be done at end of each step : set on first parameter following last read one; is done by some Read... methods (must be done directly if these method are not used) num greater than NbParams means that following lists are empty If current num is not managed, it remains at 1, which probably will cause error when successive steps of reading are made
        	:param num:
        	:type num: int
        	:rtype: None
        """
        return _IGESData.IGESData_ParamReader_SetCurrentNumber(self, *args)


    def Stage(self, *args) -> "IGESData_ReadStage":
        """
        * gives current stage (Own-Props-Assocs-End, begins at Own)
        	:rtype: IGESData_ReadStage
        """
        return _IGESData.IGESData_ParamReader_Stage(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_ParamReader
IGESData_ParamReader.AddFail = new_instancemethod(_IGESData.IGESData_ParamReader_AddFail, None, IGESData_ParamReader)
IGESData_ParamReader.AddWarning = new_instancemethod(_IGESData.IGESData_ParamReader_AddWarning, None, IGESData_ParamReader)
IGESData_ParamReader.CCheck = new_instancemethod(_IGESData.IGESData_ParamReader_CCheck, None, IGESData_ParamReader)
IGESData_ParamReader.Check = new_instancemethod(_IGESData.IGESData_ParamReader_Check, None, IGESData_ParamReader)
IGESData_ParamReader.Clear = new_instancemethod(_IGESData.IGESData_ParamReader_Clear, None, IGESData_ParamReader)
IGESData_ParamReader.Current = new_instancemethod(_IGESData.IGESData_ParamReader_Current, None, IGESData_ParamReader)
IGESData_ParamReader.CurrentList = new_instancemethod(_IGESData.IGESData_ParamReader_CurrentList, None, IGESData_ParamReader)
IGESData_ParamReader.CurrentNumber = new_instancemethod(_IGESData.IGESData_ParamReader_CurrentNumber, None, IGESData_ParamReader)
IGESData_ParamReader.DefinedElseSkip = new_instancemethod(_IGESData.IGESData_ParamReader_DefinedElseSkip, None, IGESData_ParamReader)
IGESData_ParamReader.EndAll = new_instancemethod(_IGESData.IGESData_ParamReader_EndAll, None, IGESData_ParamReader)
IGESData_ParamReader.EntityNumber = new_instancemethod(_IGESData.IGESData_ParamReader_EntityNumber, None, IGESData_ParamReader)
IGESData_ParamReader.HasFailed = new_instancemethod(_IGESData.IGESData_ParamReader_HasFailed, None, IGESData_ParamReader)
IGESData_ParamReader.IsCheckEmpty = new_instancemethod(_IGESData.IGESData_ParamReader_IsCheckEmpty, None, IGESData_ParamReader)
IGESData_ParamReader.IsParamDefined = new_instancemethod(_IGESData.IGESData_ParamReader_IsParamDefined, None, IGESData_ParamReader)
IGESData_ParamReader.IsParamEntity = new_instancemethod(_IGESData.IGESData_ParamReader_IsParamEntity, None, IGESData_ParamReader)
IGESData_ParamReader.Mend = new_instancemethod(_IGESData.IGESData_ParamReader_Mend, None, IGESData_ParamReader)
IGESData_ParamReader.NbParams = new_instancemethod(_IGESData.IGESData_ParamReader_NbParams, None, IGESData_ParamReader)
IGESData_ParamReader.NextStage = new_instancemethod(_IGESData.IGESData_ParamReader_NextStage, None, IGESData_ParamReader)
IGESData_ParamReader.ParamEntity = new_instancemethod(_IGESData.IGESData_ParamReader_ParamEntity, None, IGESData_ParamReader)
IGESData_ParamReader.ParamNumber = new_instancemethod(_IGESData.IGESData_ParamReader_ParamNumber, None, IGESData_ParamReader)
IGESData_ParamReader.ParamType = new_instancemethod(_IGESData.IGESData_ParamReader_ParamType, None, IGESData_ParamReader)
IGESData_ParamReader.ParamValue = new_instancemethod(_IGESData.IGESData_ParamReader_ParamValue, None, IGESData_ParamReader)
IGESData_ParamReader.ReadBoolean = new_instancemethod(_IGESData.IGESData_ParamReader_ReadBoolean, None, IGESData_ParamReader)
IGESData_ParamReader.ReadEntList = new_instancemethod(_IGESData.IGESData_ParamReader_ReadEntList, None, IGESData_ParamReader)
IGESData_ParamReader.ReadEnts = new_instancemethod(_IGESData.IGESData_ParamReader_ReadEnts, None, IGESData_ParamReader)
IGESData_ParamReader.ReadInteger = new_instancemethod(_IGESData.IGESData_ParamReader_ReadInteger, None, IGESData_ParamReader)
IGESData_ParamReader.ReadInts = new_instancemethod(_IGESData.IGESData_ParamReader_ReadInts, None, IGESData_ParamReader)
IGESData_ParamReader.ReadReal = new_instancemethod(_IGESData.IGESData_ParamReader_ReadReal, None, IGESData_ParamReader)
IGESData_ParamReader.ReadReals = new_instancemethod(_IGESData.IGESData_ParamReader_ReadReals, None, IGESData_ParamReader)
IGESData_ParamReader.ReadText = new_instancemethod(_IGESData.IGESData_ParamReader_ReadText, None, IGESData_ParamReader)
IGESData_ParamReader.ReadTexts = new_instancemethod(_IGESData.IGESData_ParamReader_ReadTexts, None, IGESData_ParamReader)
IGESData_ParamReader.ReadXY = new_instancemethod(_IGESData.IGESData_ParamReader_ReadXY, None, IGESData_ParamReader)
IGESData_ParamReader.ReadXYZ = new_instancemethod(_IGESData.IGESData_ParamReader_ReadXYZ, None, IGESData_ParamReader)
IGESData_ParamReader.ReadingEntityNumber = new_instancemethod(_IGESData.IGESData_ParamReader_ReadingEntityNumber, None, IGESData_ParamReader)
IGESData_ParamReader.ReadingReal = new_instancemethod(_IGESData.IGESData_ParamReader_ReadingReal, None, IGESData_ParamReader)
IGESData_ParamReader.SendFail = new_instancemethod(_IGESData.IGESData_ParamReader_SendFail, None, IGESData_ParamReader)
IGESData_ParamReader.SendWarning = new_instancemethod(_IGESData.IGESData_ParamReader_SendWarning, None, IGESData_ParamReader)
IGESData_ParamReader.SetCurrentNumber = new_instancemethod(_IGESData.IGESData_ParamReader_SetCurrentNumber, None, IGESData_ParamReader)
IGESData_ParamReader.Stage = new_instancemethod(_IGESData.IGESData_ParamReader_Stage, None, IGESData_ParamReader)
IGESData_ParamReader_swigregister = _IGESData.IGESData_ParamReader_swigregister
IGESData_ParamReader_swigregister(IGESData_ParamReader)

class IGESData_Protocol(OCC.Core.Interface.Interface_Protocol):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _IGESData.IGESData_Protocol_swiginit(self, _IGESData.new_IGESData_Protocol(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESData_Protocol_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_Protocol
IGESData_Protocol_swigregister = _IGESData.IGESData_Protocol_swigregister
IGESData_Protocol_swigregister(IGESData_Protocol)

class IGESData_ReadWriteModule(OCC.Core.Interface.Interface_ReaderModule):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CaseIGES(self, *args) -> "Standard_Integer":
        """
        * Defines Case Numbers corresponding to the Entity Types taken into account by a sub-class of ReadWriteModule (hence, each sub-class of ReadWriteModule has to redefine this method) Called by CaseNum. Its result will then be used to call Read, etc ...
        	:param typenum:
        	:type typenum: int
        	:param formnum:
        	:type formnum: int
        	:rtype: int
        """
        return _IGESData.IGESData_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args) -> "void":
        """
        * Reads own parameters from file for an Entity; <PR> gives access to them, <IR> detains parameter types and values For each class, there must be a specific action provided Note that Properties and Associativities Lists are Read by specific methods (see below), they are called under control of reading process (only one call) according Stage recorded in ParamReader
        	:param CN:
        	:type CN: int
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param IR:
        	:type IR: IGESData_IGESReaderData
        	:param PR:
        	:type PR: IGESData_ParamReader
        	:rtype: void
        """
        return _IGESData.IGESData_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args) -> "void":
        """
        * Writes own parameters to IGESWriter; defined for each class (to be redefined for other IGES ReadWriteModules) Warning : Properties and Associativities are directly managed by WriteIGES, must not be sent by this method
        	:param CN:
        	:type CN: int
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param IW:
        	:type IW: IGESData_IGESWriter
        	:rtype: void
        """
        return _IGESData.IGESData_ReadWriteModule_WriteOwnParams(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_ReadWriteModule_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_ReadWriteModule
IGESData_ReadWriteModule.CaseIGES = new_instancemethod(_IGESData.IGESData_ReadWriteModule_CaseIGES, None, IGESData_ReadWriteModule)
IGESData_ReadWriteModule.ReadOwnParams = new_instancemethod(_IGESData.IGESData_ReadWriteModule_ReadOwnParams, None, IGESData_ReadWriteModule)
IGESData_ReadWriteModule.WriteOwnParams = new_instancemethod(_IGESData.IGESData_ReadWriteModule_WriteOwnParams, None, IGESData_ReadWriteModule)
IGESData_ReadWriteModule_swigregister = _IGESData.IGESData_ReadWriteModule_swigregister
IGESData_ReadWriteModule_swigregister(IGESData_ReadWriteModule)

class IGESData_SpecificLib(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddProtocol(self, *args) -> "void":
        """
        * Adds a couple (Module-Protocol) to the Library, given the class of a Protocol. Takes Resources into account. (if <aprotocol> is not of type TheProtocol, it is not added)
        	:param aprotocol:
        	:type aprotocol: Standard_Transient
        	:rtype: None
        """
        return _IGESData.IGESData_SpecificLib_AddProtocol(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears the list of Modules of a library (can be used to redefine the order of Modules before action : Clear then refill the Library by calls to AddProtocol)
        	:rtype: None
        """
        return _IGESData.IGESData_SpecificLib_Clear(self, *args)


    def __init__(self, *args):
        """
        * Creates a Library which complies with a Protocol, that is : Same class (criterium IsInstance) This creation gets the Modules from the global set, those which are bound to the given Protocol and its Resources
        	:param aprotocol:
        	:type aprotocol: IGESData_Protocol
        	:rtype: None
        * Creates an empty Library : it will later by filled by method AddProtocol
        	:rtype: None
        """
        _IGESData.IGESData_SpecificLib_swiginit(self, _IGESData.new_IGESData_SpecificLib(*args))

    def Module(self, *args) -> "opencascade::handle< IGESData_SpecificModule > const &":
        """
        * Returns the current Module in the Iteration
        	:rtype: opencascade::handle<IGESData_SpecificModule>
        """
        return _IGESData.IGESData_SpecificLib_Module(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there are more Modules to iterate on
        	:rtype: bool
        """
        return _IGESData.IGESData_SpecificLib_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Iterates by getting the next Module in the list If there is none, the exception will be raised by Value
        	:rtype: None
        """
        return _IGESData.IGESData_SpecificLib_Next(self, *args)


    def Protocol(self, *args) -> "opencascade::handle< IGESData_Protocol > const &":
        """
        * Returns the current Protocol in the Iteration
        	:rtype: opencascade::handle<IGESData_Protocol>
        """
        return _IGESData.IGESData_SpecificLib_Protocol(self, *args)


    def Select(self, *args) -> "Standard_Boolean":
        """
        * Selects a Module from the Library, given an Object. Returns True if Select has succeeded, False else. Also Returns (as arguments) the selected Module and the Case Number determined by the associated Protocol. If Select has failed, <module> is Null Handle and CN is zero. (Select can work on any criterium, such as Object DynamicType)
        	:param obj:
        	:type obj: IGESData_IGESEntity
        	:param module:
        	:type module: IGESData_SpecificModule
        	:param CN:
        	:type CN: int
        	:rtype: bool
        """
        return _IGESData.IGESData_SpecificLib_Select(self, *args)


    def SetComplete(self, *args) -> "void":
        """
        * Sets a library to be defined with the complete Global list (all the couples Protocol/Modules recorded in it)
        	:rtype: None
        """
        return _IGESData.IGESData_SpecificLib_SetComplete(self, *args)


    def SetGlobal(*args) -> "void":
        """
        * Adds a couple (Module-Protocol) into the global definition set for this class of Library.
        	:param amodule:
        	:type amodule: IGESData_SpecificModule
        	:param aprotocol:
        	:type aprotocol: IGESData_Protocol
        	:rtype: void
        """
        return _IGESData.IGESData_SpecificLib_SetGlobal(*args)

    SetGlobal = staticmethod(SetGlobal)

    def Start(self, *args) -> "void":
        """
        * Starts Iteration on the Modules (sets it on the first one)
        	:rtype: None
        """
        return _IGESData.IGESData_SpecificLib_Start(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_SpecificLib
IGESData_SpecificLib.AddProtocol = new_instancemethod(_IGESData.IGESData_SpecificLib_AddProtocol, None, IGESData_SpecificLib)
IGESData_SpecificLib.Clear = new_instancemethod(_IGESData.IGESData_SpecificLib_Clear, None, IGESData_SpecificLib)
IGESData_SpecificLib.Module = new_instancemethod(_IGESData.IGESData_SpecificLib_Module, None, IGESData_SpecificLib)
IGESData_SpecificLib.More = new_instancemethod(_IGESData.IGESData_SpecificLib_More, None, IGESData_SpecificLib)
IGESData_SpecificLib.Next = new_instancemethod(_IGESData.IGESData_SpecificLib_Next, None, IGESData_SpecificLib)
IGESData_SpecificLib.Protocol = new_instancemethod(_IGESData.IGESData_SpecificLib_Protocol, None, IGESData_SpecificLib)
IGESData_SpecificLib.Select = new_instancemethod(_IGESData.IGESData_SpecificLib_Select, None, IGESData_SpecificLib)
IGESData_SpecificLib.SetComplete = new_instancemethod(_IGESData.IGESData_SpecificLib_SetComplete, None, IGESData_SpecificLib)
IGESData_SpecificLib.Start = new_instancemethod(_IGESData.IGESData_SpecificLib_Start, None, IGESData_SpecificLib)
IGESData_SpecificLib_swigregister = _IGESData.IGESData_SpecificLib_swigregister
IGESData_SpecificLib_swigregister(IGESData_SpecificLib)

def IGESData_SpecificLib_SetGlobal(*args) -> "void":
    """
    * Adds a couple (Module-Protocol) into the global definition set for this class of Library.
    	:param amodule:
    	:type amodule: IGESData_SpecificModule
    	:param aprotocol:
    	:type aprotocol: IGESData_Protocol
    	:rtype: void
    """
    return _IGESData.IGESData_SpecificLib_SetGlobal(*args)

class IGESData_SpecificModule(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def OwnCorrect(self, *args) -> "Standard_Boolean":
        """
        * Specific Automatic Correction on own Parameters of an Entity. It works by setting in accordance redundant data, if there are when there is no ambiguity (else, it does nothing). Remark that classic Corrections on Directory Entry (to set void data) are taken into account alsewhere. //! For instance, many 'Associativity Entities' have a Number of Properties which must have a fixed value. Or, a ConicalArc has its Form Number which records the kind of Conic, also determined from its coefficients But, a CircularArc of which Distances (Center-Start) and (Center-End) are not equal cannot be corrected ... //! Returns True if something has been corrected in <ent> By default, does nothing. If at least one of the Types processed by a sub-class of SpecificModule has a Correct procedure attached, this method can be redefined
        	:param CN:
        	:type CN: int
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESData.IGESData_SpecificModule_OwnCorrect(self, *args)


    def OwnDump(self, *args) -> "void":
        """
        * Specific Dump for each type of IGES Entity : it concerns only own parameters, the general data (Directory Part, Lists) are taken into account by the IGESDumper See class IGESDumper for the rules to follow for <own> and <attached> level
        	:param CN:
        	:type CN: int
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param dumper:
        	:type dumper: IGESData_IGESDumper
        	:param S:
        	:type S: Message_Messenger
        	:param own:
        	:type own: int
        	:rtype: void
        """
        return _IGESData.IGESData_SpecificModule_OwnDump(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_SpecificModule_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_SpecificModule
IGESData_SpecificModule.OwnCorrect = new_instancemethod(_IGESData.IGESData_SpecificModule_OwnCorrect, None, IGESData_SpecificModule)
IGESData_SpecificModule.OwnDump = new_instancemethod(_IGESData.IGESData_SpecificModule_OwnDump, None, IGESData_SpecificModule)
IGESData_SpecificModule_swigregister = _IGESData.IGESData_SpecificModule_swigregister
IGESData_SpecificModule_swigregister(IGESData_SpecificModule)

class IGESData_ToolLocation(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AnalyseLocation(self, *args) -> "Standard_Boolean":
        """
        * Analysis a Location given as a GTrsf, by trying to convert it to a Trsf (i.e. to a True Location of which effect is described by an Isometry or a Similarity) Works with the Precision given by default or by SetPrecision Calls ConvertLocation (see below)
        	:param loc:
        	:type loc: gp_GTrsf
        	:param result:
        	:type result: gp_Trsf
        	:rtype: bool
        """
        return _IGESData.IGESData_ToolLocation_AnalyseLocation(self, *args)


    def ConvertLocation(*args) -> "Standard_Boolean":
        """
        * Convertion of a Location, from GTrsf form to Trsf form Works with a precision given as argument. Returns True if the Conversion is possible, (hence, <result> contains the converted location), False else <unit>, if given, indicates the unit in which <loc> is defined in meters. It concerns the translation part (to be converted. //! As a class method, it can be called separately
        	:param prec:
        	:type prec: float
        	:param loc:
        	:type loc: gp_GTrsf
        	:param result:
        	:type result: gp_Trsf
        	:param uni: default value is 1
        	:type uni: float
        	:rtype: bool
        """
        return _IGESData.IGESData_ToolLocation_ConvertLocation(*args)

    ConvertLocation = staticmethod(ConvertLocation)

    def EffectiveLocation(self, *args) -> "gp_GTrsf":
        """
        * Returns the effective Location of an Entity, i.e. the composition of its proper Transformation Matrix (returned by Transf) and its Parent's Location (returned by ParentLocation)
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: gp_GTrsf
        """
        return _IGESData.IGESData_ToolLocation_EffectiveLocation(self, *args)


    def ExplicitLocation(self, *args) -> "gp_GTrsf":
        """
        * Returns the Explicit Location defined by the Transformation Matrix of <ent>. Identity if there is none
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: gp_GTrsf
        """
        return _IGESData.IGESData_ToolLocation_ExplicitLocation(self, *args)


    def HasParent(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <ent> is dependent from one and only one other Entity, either by Reference or by Associativity
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESData.IGESData_ToolLocation_HasParent(self, *args)


    def HasParentByAssociativity(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the Parent, if there is one, is defined by a SingleParentEntity Associativity Else, if HasParent is True, it is by Reference
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESData.IGESData_ToolLocation_HasParentByAssociativity(self, *args)


    def HasTransf(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <ent> has a Transformation Matrix in proper (referenced from its Directory Part)
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESData.IGESData_ToolLocation_HasTransf(self, *args)


    def __init__(self, *args):
        """
        * Creates a ToolLocation on a given Model, filled with the help of a Protocol (which allows to known Entities referenced by other ones)
        	:param amodel:
        	:type amodel: IGESData_IGESModel
        	:param protocol:
        	:type protocol: IGESData_Protocol
        	:rtype: None
        """
        _IGESData.IGESData_ToolLocation_swiginit(self, _IGESData.new_IGESData_ToolLocation(*args))

    def IsAmbiguous(self, *args) -> "Standard_Boolean":
        """
        * Returns True if more than one Parent has been determined for <ent>, by adding direct References and Associativities
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESData.IGESData_ToolLocation_IsAmbiguous(self, *args)


    def IsAssociativity(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <ent> is an Associativity (IGES Type 402). Then, Location does not apply.
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESData.IGESData_ToolLocation_IsAssociativity(self, *args)


    def IsTransf(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <ent> is kind of TransfEntity. Then, it has no location, while it can be used to define a Location)
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: bool
        """
        return _IGESData.IGESData_ToolLocation_IsTransf(self, *args)


    def Load(self, *args) -> "void":
        """
        * Does the effective work of determining Locations of Entities
        	:rtype: None
        """
        return _IGESData.IGESData_ToolLocation_Load(self, *args)


    def Parent(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * Returns the unique Parent recorded for <ent>. Returns a Null Handle if there is none
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_ToolLocation_Parent(self, *args)


    def ParentLocation(self, *args) -> "gp_GTrsf":
        """
        * Returns the effective Location of the Parent of <ent>, if there is one : this Location is itself given as compound according dependences on the Parent, if there are some. Returns an Identity Transformation if no Parent is recorded.
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: gp_GTrsf
        """
        return _IGESData.IGESData_ToolLocation_ParentLocation(self, *args)


    def ResetDependences(self, *args) -> "void":
        """
        * Resets all informations about dependences for <child>
        	:param child:
        	:type child: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_ToolLocation_ResetDependences(self, *args)


    def SetOwnAsDependent(self, *args) -> "void":
        """
        * Unitary action which defines Entities referenced by <ent> (except those in Directory Part and Associativities List) as Dependent (their Locations are related to that of <ent>)
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_ToolLocation_SetOwnAsDependent(self, *args)


    def SetParentAssoc(self, *args) -> "void":
        """
        * Sets the 'Associativity' information for <child> as being <parent> (it must be the Parent itself, not the Associativity)
        	:param parent:
        	:type parent: IGESData_IGESEntity
        	:param child:
        	:type child: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_ToolLocation_SetParentAssoc(self, *args)


    def SetPrecision(self, *args) -> "void":
        """
        * Sets a precision for the Analysis of Locations (default by constructor is 1.E-05)
        	:param prec:
        	:type prec: float
        	:rtype: None
        """
        return _IGESData.IGESData_ToolLocation_SetPrecision(self, *args)


    def SetReference(self, *args) -> "void":
        """
        * Sets the 'Reference' information for <child> as being <parent> Sets an Error Status if already set (see method IsAmbiguous)
        	:param parent:
        	:type parent: IGESData_IGESEntity
        	:param child:
        	:type child: IGESData_IGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_ToolLocation_SetReference(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_ToolLocation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_ToolLocation
IGESData_ToolLocation.AnalyseLocation = new_instancemethod(_IGESData.IGESData_ToolLocation_AnalyseLocation, None, IGESData_ToolLocation)
IGESData_ToolLocation.EffectiveLocation = new_instancemethod(_IGESData.IGESData_ToolLocation_EffectiveLocation, None, IGESData_ToolLocation)
IGESData_ToolLocation.ExplicitLocation = new_instancemethod(_IGESData.IGESData_ToolLocation_ExplicitLocation, None, IGESData_ToolLocation)
IGESData_ToolLocation.HasParent = new_instancemethod(_IGESData.IGESData_ToolLocation_HasParent, None, IGESData_ToolLocation)
IGESData_ToolLocation.HasParentByAssociativity = new_instancemethod(_IGESData.IGESData_ToolLocation_HasParentByAssociativity, None, IGESData_ToolLocation)
IGESData_ToolLocation.HasTransf = new_instancemethod(_IGESData.IGESData_ToolLocation_HasTransf, None, IGESData_ToolLocation)
IGESData_ToolLocation.IsAmbiguous = new_instancemethod(_IGESData.IGESData_ToolLocation_IsAmbiguous, None, IGESData_ToolLocation)
IGESData_ToolLocation.IsAssociativity = new_instancemethod(_IGESData.IGESData_ToolLocation_IsAssociativity, None, IGESData_ToolLocation)
IGESData_ToolLocation.IsTransf = new_instancemethod(_IGESData.IGESData_ToolLocation_IsTransf, None, IGESData_ToolLocation)
IGESData_ToolLocation.Load = new_instancemethod(_IGESData.IGESData_ToolLocation_Load, None, IGESData_ToolLocation)
IGESData_ToolLocation.Parent = new_instancemethod(_IGESData.IGESData_ToolLocation_Parent, None, IGESData_ToolLocation)
IGESData_ToolLocation.ParentLocation = new_instancemethod(_IGESData.IGESData_ToolLocation_ParentLocation, None, IGESData_ToolLocation)
IGESData_ToolLocation.ResetDependences = new_instancemethod(_IGESData.IGESData_ToolLocation_ResetDependences, None, IGESData_ToolLocation)
IGESData_ToolLocation.SetOwnAsDependent = new_instancemethod(_IGESData.IGESData_ToolLocation_SetOwnAsDependent, None, IGESData_ToolLocation)
IGESData_ToolLocation.SetParentAssoc = new_instancemethod(_IGESData.IGESData_ToolLocation_SetParentAssoc, None, IGESData_ToolLocation)
IGESData_ToolLocation.SetPrecision = new_instancemethod(_IGESData.IGESData_ToolLocation_SetPrecision, None, IGESData_ToolLocation)
IGESData_ToolLocation.SetReference = new_instancemethod(_IGESData.IGESData_ToolLocation_SetReference, None, IGESData_ToolLocation)
IGESData_ToolLocation_swigregister = _IGESData.IGESData_ToolLocation_swigregister
IGESData_ToolLocation_swigregister(IGESData_ToolLocation)

def IGESData_ToolLocation_ConvertLocation(*args) -> "Standard_Boolean":
    """
    * Convertion of a Location, from GTrsf form to Trsf form Works with a precision given as argument. Returns True if the Conversion is possible, (hence, <result> contains the converted location), False else <unit>, if given, indicates the unit in which <loc> is defined in meters. It concerns the translation part (to be converted. //! As a class method, it can be called separately
    	:param prec:
    	:type prec: float
    	:param loc:
    	:type loc: gp_GTrsf
    	:param result:
    	:type result: gp_Trsf
    	:param uni: default value is 1
    	:type uni: float
    	:rtype: bool
    """
    return _IGESData.IGESData_ToolLocation_ConvertLocation(*args)

class IGESData_WriterLib(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddProtocol(self, *args) -> "void":
        """
        * Adds a couple (Module-Protocol) to the Library, given the class of a Protocol. Takes Resources into account. (if <aprotocol> is not of type TheProtocol, it is not added)
        	:param aprotocol:
        	:type aprotocol: Standard_Transient
        	:rtype: None
        """
        return _IGESData.IGESData_WriterLib_AddProtocol(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears the list of Modules of a library (can be used to redefine the order of Modules before action : Clear then refill the Library by calls to AddProtocol)
        	:rtype: None
        """
        return _IGESData.IGESData_WriterLib_Clear(self, *args)


    def __init__(self, *args):
        """
        * Creates a Library which complies with a Protocol, that is : Same class (criterium IsInstance) This creation gets the Modules from the global set, those which are bound to the given Protocol and its Resources
        	:param aprotocol:
        	:type aprotocol: IGESData_Protocol
        	:rtype: None
        * Creates an empty Library : it will later by filled by method AddProtocol
        	:rtype: None
        """
        _IGESData.IGESData_WriterLib_swiginit(self, _IGESData.new_IGESData_WriterLib(*args))

    def Module(self, *args) -> "opencascade::handle< IGESData_ReadWriteModule > const &":
        """
        * Returns the current Module in the Iteration
        	:rtype: opencascade::handle<IGESData_ReadWriteModule>
        """
        return _IGESData.IGESData_WriterLib_Module(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there are more Modules to iterate on
        	:rtype: bool
        """
        return _IGESData.IGESData_WriterLib_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Iterates by getting the next Module in the list If there is none, the exception will be raised by Value
        	:rtype: None
        """
        return _IGESData.IGESData_WriterLib_Next(self, *args)


    def Protocol(self, *args) -> "opencascade::handle< IGESData_Protocol > const &":
        """
        * Returns the current Protocol in the Iteration
        	:rtype: opencascade::handle<IGESData_Protocol>
        """
        return _IGESData.IGESData_WriterLib_Protocol(self, *args)


    def Select(self, *args) -> "Standard_Boolean":
        """
        * Selects a Module from the Library, given an Object. Returns True if Select has succeeded, False else. Also Returns (as arguments) the selected Module and the Case Number determined by the associated Protocol. If Select has failed, <module> is Null Handle and CN is zero. (Select can work on any criterium, such as Object DynamicType)
        	:param obj:
        	:type obj: IGESData_IGESEntity
        	:param module:
        	:type module: IGESData_ReadWriteModule
        	:param CN:
        	:type CN: int
        	:rtype: bool
        """
        return _IGESData.IGESData_WriterLib_Select(self, *args)


    def SetComplete(self, *args) -> "void":
        """
        * Sets a library to be defined with the complete Global list (all the couples Protocol/Modules recorded in it)
        	:rtype: None
        """
        return _IGESData.IGESData_WriterLib_SetComplete(self, *args)


    def SetGlobal(*args) -> "void":
        """
        * Adds a couple (Module-Protocol) into the global definition set for this class of Library.
        	:param amodule:
        	:type amodule: IGESData_ReadWriteModule
        	:param aprotocol:
        	:type aprotocol: IGESData_Protocol
        	:rtype: void
        """
        return _IGESData.IGESData_WriterLib_SetGlobal(*args)

    SetGlobal = staticmethod(SetGlobal)

    def Start(self, *args) -> "void":
        """
        * Starts Iteration on the Modules (sets it on the first one)
        	:rtype: None
        """
        return _IGESData.IGESData_WriterLib_Start(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_WriterLib
IGESData_WriterLib.AddProtocol = new_instancemethod(_IGESData.IGESData_WriterLib_AddProtocol, None, IGESData_WriterLib)
IGESData_WriterLib.Clear = new_instancemethod(_IGESData.IGESData_WriterLib_Clear, None, IGESData_WriterLib)
IGESData_WriterLib.Module = new_instancemethod(_IGESData.IGESData_WriterLib_Module, None, IGESData_WriterLib)
IGESData_WriterLib.More = new_instancemethod(_IGESData.IGESData_WriterLib_More, None, IGESData_WriterLib)
IGESData_WriterLib.Next = new_instancemethod(_IGESData.IGESData_WriterLib_Next, None, IGESData_WriterLib)
IGESData_WriterLib.Protocol = new_instancemethod(_IGESData.IGESData_WriterLib_Protocol, None, IGESData_WriterLib)
IGESData_WriterLib.Select = new_instancemethod(_IGESData.IGESData_WriterLib_Select, None, IGESData_WriterLib)
IGESData_WriterLib.SetComplete = new_instancemethod(_IGESData.IGESData_WriterLib_SetComplete, None, IGESData_WriterLib)
IGESData_WriterLib.Start = new_instancemethod(_IGESData.IGESData_WriterLib_Start, None, IGESData_WriterLib)
IGESData_WriterLib_swigregister = _IGESData.IGESData_WriterLib_swigregister
IGESData_WriterLib_swigregister(IGESData_WriterLib)

def IGESData_WriterLib_SetGlobal(*args) -> "void":
    """
    * Adds a couple (Module-Protocol) into the global definition set for this class of Library.
    	:param amodule:
    	:type amodule: IGESData_ReadWriteModule
    	:param aprotocol:
    	:type aprotocol: IGESData_Protocol
    	:rtype: void
    """
    return _IGESData.IGESData_WriterLib_SetGlobal(*args)

class IGESData_ColorEntity(IGESData_IGESEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_IGESData_ColorEntity_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        _IGESData.IGESData_ColorEntity_swiginit(self, _IGESData.new_IGESData_ColorEntity())
    __swig_destroy__ = _IGESData.delete_IGESData_ColorEntity
IGESData_ColorEntity_swigregister = _IGESData.IGESData_ColorEntity_swigregister
IGESData_ColorEntity_swigregister(IGESData_ColorEntity)

class IGESData_DefaultGeneral(IGESData_GeneralModule):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a DefaultGeneral and puts it into GeneralLib, bound with a Protocol from IGESData
        	:rtype: None
        """
        _IGESData.IGESData_DefaultGeneral_swiginit(self, _IGESData.new_IGESData_DefaultGeneral(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESData_DefaultGeneral_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_DefaultGeneral
IGESData_DefaultGeneral_swigregister = _IGESData.IGESData_DefaultGeneral_swigregister
IGESData_DefaultGeneral_swigregister(IGESData_DefaultGeneral)

class IGESData_DefaultSpecific(IGESData_SpecificModule):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a DefaultSpecific and puts it into SpecificLib
        	:rtype: None
        """
        _IGESData.IGESData_DefaultSpecific_swiginit(self, _IGESData.new_IGESData_DefaultSpecific(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESData_DefaultSpecific_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_DefaultSpecific
IGESData_DefaultSpecific_swigregister = _IGESData.IGESData_DefaultSpecific_swigregister
IGESData_DefaultSpecific_swigregister(IGESData_DefaultSpecific)

class IGESData_FileProtocol(IGESData_Protocol):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        * Adds a resource
        	:param protocol:
        	:type protocol: IGESData_Protocol
        	:rtype: None
        """
        return _IGESData.IGESData_FileProtocol_Add(self, *args)


    def __init__(self, *args):
        """
        * Returns an empty FileProtocol
        	:rtype: None
        """
        _IGESData.IGESData_FileProtocol_swiginit(self, _IGESData.new_IGESData_FileProtocol(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESData_FileProtocol_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_FileProtocol
IGESData_FileProtocol.Add = new_instancemethod(_IGESData.IGESData_FileProtocol_Add, None, IGESData_FileProtocol)
IGESData_FileProtocol_swigregister = _IGESData.IGESData_FileProtocol_swigregister
IGESData_FileProtocol_swigregister(IGESData_FileProtocol)

class IGESData_LabelDisplayEntity(IGESData_IGESEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_IGESData_LabelDisplayEntity_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        _IGESData.IGESData_LabelDisplayEntity_swiginit(self, _IGESData.new_IGESData_LabelDisplayEntity())
    __swig_destroy__ = _IGESData.delete_IGESData_LabelDisplayEntity
IGESData_LabelDisplayEntity_swigregister = _IGESData.IGESData_LabelDisplayEntity_swigregister
IGESData_LabelDisplayEntity_swigregister(IGESData_LabelDisplayEntity)

class IGESData_LevelListEntity(IGESData_IGESEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def HasLevelNumber(self, *args) -> "Standard_Boolean":
        """
        * returns True if <level> is in the list
        	:param level:
        	:type level: int
        	:rtype: bool
        """
        return _IGESData.IGESData_LevelListEntity_HasLevelNumber(self, *args)


    def LevelNumber(self, *args) -> "Standard_Integer":
        """
        * returns the Level Number of <self>, indicated by <num> raises an exception if num is out of range
        	:param num:
        	:type num: int
        	:rtype: int
        """
        return _IGESData.IGESData_LevelListEntity_LevelNumber(self, *args)


    def NbLevelNumbers(self, *args) -> "Standard_Integer":
        """
        * Must return the count of levels
        	:rtype: int
        """
        return _IGESData.IGESData_LevelListEntity_NbLevelNumbers(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_LevelListEntity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_LevelListEntity
IGESData_LevelListEntity.HasLevelNumber = new_instancemethod(_IGESData.IGESData_LevelListEntity_HasLevelNumber, None, IGESData_LevelListEntity)
IGESData_LevelListEntity.LevelNumber = new_instancemethod(_IGESData.IGESData_LevelListEntity_LevelNumber, None, IGESData_LevelListEntity)
IGESData_LevelListEntity.NbLevelNumbers = new_instancemethod(_IGESData.IGESData_LevelListEntity_NbLevelNumbers, None, IGESData_LevelListEntity)
IGESData_LevelListEntity_swigregister = _IGESData.IGESData_LevelListEntity_swigregister
IGESData_LevelListEntity_swigregister(IGESData_LevelListEntity)

class IGESData_LineFontEntity(IGESData_IGESEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_IGESData_LineFontEntity_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        _IGESData.IGESData_LineFontEntity_swiginit(self, _IGESData.new_IGESData_LineFontEntity())
    __swig_destroy__ = _IGESData.delete_IGESData_LineFontEntity
IGESData_LineFontEntity_swigregister = _IGESData.IGESData_LineFontEntity_swigregister
IGESData_LineFontEntity_swigregister(IGESData_LineFontEntity)

class IGESData_NameEntity(IGESData_IGESEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Value(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Retyrns the alphanumeric value of the Name, to be defined
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_NameEntity_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_NameEntity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_NameEntity
IGESData_NameEntity.Value = new_instancemethod(_IGESData.IGESData_NameEntity_Value, None, IGESData_NameEntity)
IGESData_NameEntity_swigregister = _IGESData.IGESData_NameEntity_swigregister
IGESData_NameEntity_swigregister(IGESData_NameEntity)

class IGESData_SingleParentEntity(IGESData_IGESEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Child(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * Returns a Child given its rank
        	:param num:
        	:type num: int
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_SingleParentEntity_Child(self, *args)


    def NbChildren(self, *args) -> "Standard_Integer":
        """
        * Returns the count of Entities designated as children
        	:rtype: int
        """
        return _IGESData.IGESData_SingleParentEntity_NbChildren(self, *args)


    def SingleParent(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * Returns the parent designated by the Entity, if only one !
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_SingleParentEntity_SingleParent(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_SingleParentEntity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_SingleParentEntity
IGESData_SingleParentEntity.Child = new_instancemethod(_IGESData.IGESData_SingleParentEntity_Child, None, IGESData_SingleParentEntity)
IGESData_SingleParentEntity.NbChildren = new_instancemethod(_IGESData.IGESData_SingleParentEntity_NbChildren, None, IGESData_SingleParentEntity)
IGESData_SingleParentEntity.SingleParent = new_instancemethod(_IGESData.IGESData_SingleParentEntity_SingleParent, None, IGESData_SingleParentEntity)
IGESData_SingleParentEntity_swigregister = _IGESData.IGESData_SingleParentEntity_swigregister
IGESData_SingleParentEntity_swigregister(IGESData_SingleParentEntity)

class IGESData_TransfEntity(IGESData_IGESEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Value(self, *args) -> "gp_GTrsf":
        """
        * gives value of the transformation, as a GTrsf To be defined by an effective class of Transformation Entity Warning : Must take in account Composition : if a TransfEntity has in its Directory Part, a Transf, this means that it is Compound, Value must return the global result
        	:rtype: gp_GTrsf
        """
        return _IGESData.IGESData_TransfEntity_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_TransfEntity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_TransfEntity
IGESData_TransfEntity.Value = new_instancemethod(_IGESData.IGESData_TransfEntity_Value, None, IGESData_TransfEntity)
IGESData_TransfEntity_swigregister = _IGESData.IGESData_TransfEntity_swigregister
IGESData_TransfEntity_swigregister(IGESData_TransfEntity)

class IGESData_UndefinedEntity(IGESData_IGESEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeableContent(self, *args) -> "opencascade::handle< Interface_UndefinedContent >":
        """
        * Returns own data as an UndefinedContent, in order to touch it
        	:rtype: opencascade::handle<Interface_UndefinedContent>
        """
        return _IGESData.IGESData_UndefinedEntity_ChangeableContent(self, *args)


    def DirStatus(self, *args) -> "Standard_Integer":
        """
        * returns Directory Error Status (used for Copy)
        	:rtype: int
        """
        return _IGESData.IGESData_UndefinedEntity_DirStatus(self, *args)


    def __init__(self, *args):
        """
        * creates an unknown entity
        	:rtype: None
        """
        _IGESData.IGESData_UndefinedEntity_swiginit(self, _IGESData.new_IGESData_UndefinedEntity(*args))

    def IsOKDirPart(self, *args) -> "Standard_Boolean":
        """
        * says if DirPart is OK or not (if not, it is erroneous) Note that if it is not, Def* methods can return Error status
        	:rtype: bool
        """
        return _IGESData.IGESData_UndefinedEntity_IsOKDirPart(self, *args)


    def ReadDir(self, *args) -> "Standard_Boolean":
        """
        * Computes the Directory Error Status, to be called before standard ReadDir from IGESReaderTool Returns True if OK (hence, Directory can be loaded), Else returns False and the DirPart <DP> is modified (hence, Directory Error Status is non null; and standard Read will work with an acceptable DirectoryPart)
        	:param IR:
        	:type IR: IGESData_IGESReaderData
        	:param DP:
        	:type DP: IGESData_DirPart
        	:param ach:
        	:type ach: Interface_Check
        	:rtype: bool
        """
        return _IGESData.IGESData_UndefinedEntity_ReadDir(self, *args)


    def ReadOwnParams(self, *args) -> "void":
        """
        * reads own parameters from file; PR gives access to them, IR detains parameter types and values Here, reads all parameters, integers are considered as entity reference unless they cannot be; no list interpretation No property or associativity list is managed
        	:param IR:
        	:type IR: IGESData_IGESReaderData
        	:param PR:
        	:type PR: IGESData_ParamReader
        	:rtype: void
        """
        return _IGESData.IGESData_UndefinedEntity_ReadOwnParams(self, *args)


    def SetNewContent(self, *args) -> "void":
        """
        * Redefines a completely new UndefinedContent Used by a Copy which begins by ShallowCopy, for instance
        	:param cont:
        	:type cont: Interface_UndefinedContent
        	:rtype: None
        """
        return _IGESData.IGESData_UndefinedEntity_SetNewContent(self, *args)


    def SetOKDirPart(self, *args) -> "void":
        """
        * Erases the Directory Error Status Warning : Be sure that data are consistent to call this method ...
        	:rtype: None
        """
        return _IGESData.IGESData_UndefinedEntity_SetOKDirPart(self, *args)


    def UndefinedContent(self, *args) -> "opencascade::handle< Interface_UndefinedContent >":
        """
        * Returns own data as an UndefinedContent
        	:rtype: opencascade::handle<Interface_UndefinedContent>
        """
        return _IGESData.IGESData_UndefinedEntity_UndefinedContent(self, *args)


    def WriteOwnParams(self, *args) -> "void":
        """
        * writes parameters to IGESWriter, taken from UndefinedContent
        	:param IW:
        	:type IW: IGESData_IGESWriter
        	:rtype: void
        """
        return _IGESData.IGESData_UndefinedEntity_WriteOwnParams(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_UndefinedEntity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_UndefinedEntity
IGESData_UndefinedEntity.ChangeableContent = new_instancemethod(_IGESData.IGESData_UndefinedEntity_ChangeableContent, None, IGESData_UndefinedEntity)
IGESData_UndefinedEntity.DirStatus = new_instancemethod(_IGESData.IGESData_UndefinedEntity_DirStatus, None, IGESData_UndefinedEntity)
IGESData_UndefinedEntity.IsOKDirPart = new_instancemethod(_IGESData.IGESData_UndefinedEntity_IsOKDirPart, None, IGESData_UndefinedEntity)
IGESData_UndefinedEntity.ReadDir = new_instancemethod(_IGESData.IGESData_UndefinedEntity_ReadDir, None, IGESData_UndefinedEntity)
IGESData_UndefinedEntity.ReadOwnParams = new_instancemethod(_IGESData.IGESData_UndefinedEntity_ReadOwnParams, None, IGESData_UndefinedEntity)
IGESData_UndefinedEntity.SetNewContent = new_instancemethod(_IGESData.IGESData_UndefinedEntity_SetNewContent, None, IGESData_UndefinedEntity)
IGESData_UndefinedEntity.SetOKDirPart = new_instancemethod(_IGESData.IGESData_UndefinedEntity_SetOKDirPart, None, IGESData_UndefinedEntity)
IGESData_UndefinedEntity.UndefinedContent = new_instancemethod(_IGESData.IGESData_UndefinedEntity_UndefinedContent, None, IGESData_UndefinedEntity)
IGESData_UndefinedEntity.WriteOwnParams = new_instancemethod(_IGESData.IGESData_UndefinedEntity_WriteOwnParams, None, IGESData_UndefinedEntity)
IGESData_UndefinedEntity_swigregister = _IGESData.IGESData_UndefinedEntity_swigregister
IGESData_UndefinedEntity_swigregister(IGESData_UndefinedEntity)

class IGESData_ViewKindEntity(IGESData_IGESEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsSingle(self, *args) -> "Standard_Boolean":
        """
        * says if 'me' is a Single View (True) or a List of Views (False)
        	:rtype: bool
        """
        return _IGESData.IGESData_ViewKindEntity_IsSingle(self, *args)


    def NbViews(self, *args) -> "Standard_Integer":
        """
        * Returns the count of Views for a List of Views. For a Single View, may return simply 1
        	:rtype: int
        """
        return _IGESData.IGESData_ViewKindEntity_NbViews(self, *args)


    def ViewItem(self, *args) -> "opencascade::handle< IGESData_ViewKindEntity >":
        """
        * Returns the View n0. <num> for a List of Views. For a Single Views, may return <self> itself
        	:param num:
        	:type num: int
        	:rtype: opencascade::handle<IGESData_ViewKindEntity>
        """
        return _IGESData.IGESData_ViewKindEntity_ViewItem(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_ViewKindEntity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_ViewKindEntity
IGESData_ViewKindEntity.IsSingle = new_instancemethod(_IGESData.IGESData_ViewKindEntity_IsSingle, None, IGESData_ViewKindEntity)
IGESData_ViewKindEntity.NbViews = new_instancemethod(_IGESData.IGESData_ViewKindEntity_NbViews, None, IGESData_ViewKindEntity)
IGESData_ViewKindEntity.ViewItem = new_instancemethod(_IGESData.IGESData_ViewKindEntity_ViewItem, None, IGESData_ViewKindEntity)
IGESData_ViewKindEntity_swigregister = _IGESData.IGESData_ViewKindEntity_swigregister
IGESData_ViewKindEntity_swigregister(IGESData_ViewKindEntity)

class IGESData_FreeFormatEntity(IGESData_UndefinedEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddEntities(self, *args) -> "void":
        """
        * Adds a set of Entities, given as a HArray1OfIGESEntity Causes creation of : an Integer Parameter which gives count of Entities, then the list of Entities of the Array Error if an Entity is not an IGESEntity All these Entities will be interpreted as 'Positive Pointers' by IGESWriter
        	:param ents:
        	:type ents: IGESData_HArray1OfIGESEntity
        	:rtype: None
        """
        return _IGESData.IGESData_FreeFormatEntity_AddEntities(self, *args)


    def AddEntity(self, *args) -> "void":
        """
        * Adds a Parameter which references an Entity. If the Entity is Null, the added parameter will define a 'Null Pointer' (0) If <negative> is given True, this will command Sending to File (see IGESWriter) to produce a 'Negative Pointer' (Default is False)
        	:param ptype:
        	:type ptype: Interface_ParamType
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param negative: default value is Standard_False
        	:type negative: bool
        	:rtype: None
        """
        return _IGESData.IGESData_FreeFormatEntity_AddEntity(self, *args)


    def AddLiteral(self, *args) -> "void":
        """
        * Adds a literal Parameter to the list (as such)
        	:param ptype:
        	:type ptype: Interface_ParamType
        	:param val:
        	:type val: TCollection_HAsciiString
        	:rtype: None
        * Adds a literal Parameter to the list (builds an HAsciiString)
        	:param ptype:
        	:type ptype: Interface_ParamType
        	:param val:
        	:type val: char *
        	:rtype: None
        """
        return _IGESData.IGESData_FreeFormatEntity_AddLiteral(self, *args)


    def AddNegativePointers(self, *args) -> "void":
        """
        * Adds a list of Ranks of Parameters to be noted as Negative Pointers (this will be taken into account for Parameters which are Entities)
        	:param list:
        	:type list: TColStd_HSequenceOfInteger
        	:rtype: None
        """
        return _IGESData.IGESData_FreeFormatEntity_AddNegativePointers(self, *args)


    def ClearNegativePointers(self, *args) -> "void":
        """
        * Clears all informations about Negative Pointers, hence every Entity kind Parameter will be send normally, as Positive
        	:rtype: None
        """
        return _IGESData.IGESData_FreeFormatEntity_ClearNegativePointers(self, *args)


    def __init__(self, *args):
        """
        * Creates a completely empty FreeFormatEntity
        	:rtype: None
        """
        _IGESData.IGESData_FreeFormatEntity_swiginit(self, _IGESData.new_IGESData_FreeFormatEntity(*args))

    def IsNegativePointer(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <num> is noted as for a 'Negative Pointer' (see AddEntity for details). Senseful only if IsParamEntity answers True for <num>, else returns False.
        	:param num:
        	:type num: int
        	:rtype: bool
        """
        return _IGESData.IGESData_FreeFormatEntity_IsNegativePointer(self, *args)


    def IsParamEntity(self, *args) -> "Standard_Boolean":
        """
        * Returns True if a Parameter is recorded as an entity Error if num is not between 1 and NbParams
        	:param num:
        	:type num: int
        	:rtype: bool
        """
        return _IGESData.IGESData_FreeFormatEntity_IsParamEntity(self, *args)


    def NbParams(self, *args) -> "Standard_Integer":
        """
        * Gives count of recorded parameters
        	:rtype: int
        """
        return _IGESData.IGESData_FreeFormatEntity_NbParams(self, *args)


    def NegativePointers(self, *args) -> "opencascade::handle< TColStd_HSequenceOfInteger >":
        """
        * Returns the complete list of Ramks of Parameters which have been noted as Negative Pointers Warning : It is returned as a Null Handle if none was noted
        	:rtype: opencascade::handle<TColStd_HSequenceOfInteger>
        """
        return _IGESData.IGESData_FreeFormatEntity_NegativePointers(self, *args)


    def ParamData(self, *args) -> "Standard_Boolean":
        """
        * Returns data of a Parameter : its type, and the entity if it designates en entity ('ent') or its literal value else ('str') Returned value (Boolean) : True if it is an Entity, False else
        	:param num:
        	:type num: int
        	:param ptype:
        	:type ptype: Interface_ParamType
        	:param ent:
        	:type ent: IGESData_IGESEntity
        	:param val:
        	:type val: TCollection_HAsciiString
        	:rtype: bool
        """
        return _IGESData.IGESData_FreeFormatEntity_ParamData(self, *args)


    def ParamEntity(self, *args) -> "opencascade::handle< IGESData_IGESEntity >":
        """
        * Returns Entity corresponding to a Param, given its rank Error if out of range or if Param num does not designate an Entity
        	:param num:
        	:type num: int
        	:rtype: opencascade::handle<IGESData_IGESEntity>
        """
        return _IGESData.IGESData_FreeFormatEntity_ParamEntity(self, *args)


    def ParamType(self, *args) -> "Interface_ParamType":
        """
        * Returns the ParamType of a Param, given its rank Error if num is not between 1 and NbParams
        	:param num:
        	:type num: int
        	:rtype: Interface_ParamType
        """
        return _IGESData.IGESData_FreeFormatEntity_ParamType(self, *args)


    def ParamValue(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns litteral value of a Parameter, given its rank Error if num is out of range, or if Parameter is not literal
        	:param num:
        	:type num: int
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _IGESData.IGESData_FreeFormatEntity_ParamValue(self, *args)


    def SetFormNumber(self, *args) -> "void":
        """
        * Sets Form Number to a new Value (to called after SetTypeNumber)
        	:param formnum:
        	:type formnum: int
        	:rtype: None
        """
        return _IGESData.IGESData_FreeFormatEntity_SetFormNumber(self, *args)


    def SetTypeNumber(self, *args) -> "void":
        """
        * Sets Type Number to a new Value, and Form Number to Zero
        	:param typenum:
        	:type typenum: int
        	:rtype: None
        """
        return _IGESData.IGESData_FreeFormatEntity_SetTypeNumber(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESData_FreeFormatEntity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESData.delete_IGESData_FreeFormatEntity
IGESData_FreeFormatEntity.AddEntities = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_AddEntities, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.AddEntity = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_AddEntity, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.AddLiteral = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_AddLiteral, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.AddNegativePointers = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_AddNegativePointers, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.ClearNegativePointers = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_ClearNegativePointers, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.IsNegativePointer = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_IsNegativePointer, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.IsParamEntity = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_IsParamEntity, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.NbParams = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_NbParams, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.NegativePointers = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_NegativePointers, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.ParamData = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_ParamData, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.ParamEntity = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_ParamEntity, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.ParamType = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_ParamType, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.ParamValue = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_ParamValue, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.SetFormNumber = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_SetFormNumber, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity.SetTypeNumber = new_instancemethod(_IGESData.IGESData_FreeFormatEntity_SetTypeNumber, None, IGESData_FreeFormatEntity)
IGESData_FreeFormatEntity_swigregister = _IGESData.IGESData_FreeFormatEntity_swigregister
IGESData_FreeFormatEntity_swigregister(IGESData_FreeFormatEntity)

class IGESData_HArray1OfIGESEntity(IGESData_Array1OfIGESEntity, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IGESData.IGESData_HArray1OfIGESEntity_swiginit(self, _IGESData.new_IGESData_HArray1OfIGESEntity(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESData_HArray1OfIGESEntity_DownCast(t)

    __swig_destroy__ = _IGESData.delete_IGESData_HArray1OfIGESEntity
IGESData_HArray1OfIGESEntity.Array1 = new_instancemethod(_IGESData.IGESData_HArray1OfIGESEntity_Array1, None, IGESData_HArray1OfIGESEntity)
IGESData_HArray1OfIGESEntity.ChangeArray1 = new_instancemethod(_IGESData.IGESData_HArray1OfIGESEntity_ChangeArray1, None, IGESData_HArray1OfIGESEntity)
IGESData_HArray1OfIGESEntity_swigregister = _IGESData.IGESData_HArray1OfIGESEntity_swigregister
IGESData_HArray1OfIGESEntity_swigregister(IGESData_HArray1OfIGESEntity)



