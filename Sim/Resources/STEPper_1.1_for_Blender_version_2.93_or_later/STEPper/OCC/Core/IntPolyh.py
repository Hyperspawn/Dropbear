# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntPolyh module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intpolyh.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _IntPolyh.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IntPolyh')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IntPolyh')
    _IntPolyh = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntPolyh', [dirname(__file__)])
        except ImportError:
            import _IntPolyh
            return _IntPolyh
        try:
            _mod = imp.load_module('_IntPolyh', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IntPolyh = swig_import_helper()
    del swig_import_helper
else:
    import _IntPolyh
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntPolyh.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_IntPolyh.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_IntPolyh.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_IntPolyh.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_IntPolyh.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_IntPolyh.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_IntPolyh.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_IntPolyh.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_IntPolyh.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_IntPolyh.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_IntPolyh.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_IntPolyh.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_IntPolyh.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_IntPolyh.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_IntPolyh.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_IntPolyh.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_IntPolyh.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _IntPolyh.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IntPolyh.process_exception(error, method_name, class_name)
process_exception = _IntPolyh.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.Bnd
import OCC.Core.BVH
class IntPolyh_SeqOfStartPoints(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntPolyh.IntPolyh_SeqOfStartPoints_swiginit(self, _IntPolyh.new_IntPolyh_SeqOfStartPoints(*args))
    delNode = staticmethod(_IntPolyh.IntPolyh_SeqOfStartPoints_delNode)
    __swig_destroy__ = _IntPolyh.delete_IntPolyh_SeqOfStartPoints
IntPolyh_SeqOfStartPoints.begin = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_begin, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.end = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_end, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.cbegin = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_cbegin, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.cend = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_cend, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Size = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Size, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Length = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Length, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Lower = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Lower, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Upper = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Upper, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.IsEmpty = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_IsEmpty, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Reverse = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Reverse, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Exchange = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Exchange, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Clear = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Clear, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Assign = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Assign, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Set = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Set, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Remove = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Remove, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Append = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Append, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Prepend = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Prepend, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.InsertBefore = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_InsertBefore, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.InsertAfter = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_InsertAfter, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Split = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Split, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.First = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_First, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.ChangeFirst = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_ChangeFirst, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Last = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Last, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.ChangeLast = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_ChangeLast, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.Value = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_Value, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.ChangeValue = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_ChangeValue, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.__call__ = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints___call__, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints.SetValue = new_instancemethod(_IntPolyh.IntPolyh_SeqOfStartPoints_SetValue, None, IntPolyh_SeqOfStartPoints)
IntPolyh_SeqOfStartPoints_swigregister = _IntPolyh.IntPolyh_SeqOfStartPoints_swigregister
IntPolyh_SeqOfStartPoints_swigregister(IntPolyh_SeqOfStartPoints)

def IntPolyh_SeqOfStartPoints_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _IntPolyh.IntPolyh_SeqOfStartPoints_delNode(theNode, theAl)
IntPolyh_SeqOfStartPoints_delNode = _IntPolyh.IntPolyh_SeqOfStartPoints_delNode

class IntPolyh_ListOfCouples(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntPolyh.IntPolyh_ListOfCouples_swiginit(self, _IntPolyh.new_IntPolyh_ListOfCouples(*args))
    __swig_destroy__ = _IntPolyh.delete_IntPolyh_ListOfCouples
IntPolyh_ListOfCouples.begin = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_begin, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.end = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_end, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.cbegin = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_cbegin, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.cend = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_cend, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.Size = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_Size, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.Assign = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_Assign, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.Set = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_Set, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.Clear = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_Clear, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.First = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_First, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.Last = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_Last, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.Append = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_Append, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.Prepend = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_Prepend, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.RemoveFirst = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_RemoveFirst, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.Remove = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_Remove, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.InsertBefore = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_InsertBefore, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.InsertAfter = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_InsertAfter, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples.Reverse = new_instancemethod(_IntPolyh.IntPolyh_ListOfCouples_Reverse, None, IntPolyh_ListOfCouples)
IntPolyh_ListOfCouples_swigregister = _IntPolyh.IntPolyh_ListOfCouples_swigregister
IntPolyh_ListOfCouples_swigregister(IntPolyh_ListOfCouples)

class IntPolyh_Couple(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Angle(self, *args) -> "Standard_Real":
        """
        * Returns the angle
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Couple_Angle(self, *args)


    def Dump(self, *args) -> "void":
        """
        :param v:
        	:type v: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Couple_Dump(self, *args)


    def FirstValue(self, *args) -> "Standard_Integer":
        """
        * Returns the first index
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Couple_FirstValue(self, *args)


    def HashCode(self, *args) -> "Standard_Integer":
        """
        * Computes a hash code for this couple, in the range [1, theUpperBound] @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Couple_HashCode(self, *args)


    def __init__(self, *args):
        """
        * Constructor
        	:rtype: None
        * Constructor
        	:param theTriangle1:
        	:type theTriangle1: int
        	:param theTriangle2:
        	:type theTriangle2: int
        	:param theAngle: default value is -2.0
        	:type theAngle: float
        	:rtype: None
        """
        _IntPolyh.IntPolyh_Couple_swiginit(self, _IntPolyh.new_IntPolyh_Couple(*args))

    def IsAnalyzed(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the couple has been analyzed
        	:rtype: bool
        """
        return _IntPolyh.IntPolyh_Couple_IsAnalyzed(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the Couple is equal to <theOther>
        	:param theOther:
        	:type theOther: IntPolyh_Couple
        	:rtype: bool
        """
        return _IntPolyh.IntPolyh_Couple_IsEqual(self, *args)


    def SecondValue(self, *args) -> "Standard_Integer":
        """
        * Returns the second index
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Couple_SecondValue(self, *args)


    def SetAnalyzed(self, *args) -> "void":
        """
        * Sets the analyzed flag
        	:param theAnalyzed:
        	:type theAnalyzed: bool
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Couple_SetAnalyzed(self, *args)


    def SetAngle(self, *args) -> "void":
        """
        * Sets the angle
        	:param theAngle:
        	:type theAngle: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Couple_SetAngle(self, *args)


    def SetCoupleValue(self, *args) -> "void":
        """
        * Sets the triangles
        	:param theInd1:
        	:type theInd1: int
        	:param theInd2:
        	:type theInd2: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Couple_SetCoupleValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntPolyh.delete_IntPolyh_Couple
IntPolyh_Couple.Angle = new_instancemethod(_IntPolyh.IntPolyh_Couple_Angle, None, IntPolyh_Couple)
IntPolyh_Couple.Dump = new_instancemethod(_IntPolyh.IntPolyh_Couple_Dump, None, IntPolyh_Couple)
IntPolyh_Couple.FirstValue = new_instancemethod(_IntPolyh.IntPolyh_Couple_FirstValue, None, IntPolyh_Couple)
IntPolyh_Couple.HashCode = new_instancemethod(_IntPolyh.IntPolyh_Couple_HashCode, None, IntPolyh_Couple)
IntPolyh_Couple.__hash__ = new_instancemethod(_IntPolyh.IntPolyh_Couple___hash__, None, IntPolyh_Couple)
IntPolyh_Couple.IsAnalyzed = new_instancemethod(_IntPolyh.IntPolyh_Couple_IsAnalyzed, None, IntPolyh_Couple)
IntPolyh_Couple.IsEqual = new_instancemethod(_IntPolyh.IntPolyh_Couple_IsEqual, None, IntPolyh_Couple)
IntPolyh_Couple.SecondValue = new_instancemethod(_IntPolyh.IntPolyh_Couple_SecondValue, None, IntPolyh_Couple)
IntPolyh_Couple.SetAnalyzed = new_instancemethod(_IntPolyh.IntPolyh_Couple_SetAnalyzed, None, IntPolyh_Couple)
IntPolyh_Couple.SetAngle = new_instancemethod(_IntPolyh.IntPolyh_Couple_SetAngle, None, IntPolyh_Couple)
IntPolyh_Couple.SetCoupleValue = new_instancemethod(_IntPolyh.IntPolyh_Couple_SetCoupleValue, None, IntPolyh_Couple)
IntPolyh_Couple_swigregister = _IntPolyh.IntPolyh_Couple_swigregister
IntPolyh_Couple_swigregister(IntPolyh_Couple)

class IntPolyh_CoupleMapHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        * Computes a hash code for the given couple, in the range [1, theUpperBound] @param theCouple the couple which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param theCouple:
        	:type theCouple: IntPolyh_Couple
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_CoupleMapHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        :param theCouple1:
        	:type theCouple1: IntPolyh_Couple
        	:param theCouple2:
        	:type theCouple2: IntPolyh_Couple
        	:rtype: bool
        """
        return _IntPolyh.IntPolyh_CoupleMapHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _IntPolyh.IntPolyh_CoupleMapHasher_swiginit(self, _IntPolyh.new_IntPolyh_CoupleMapHasher())
    __swig_destroy__ = _IntPolyh.delete_IntPolyh_CoupleMapHasher
IntPolyh_CoupleMapHasher_swigregister = _IntPolyh.IntPolyh_CoupleMapHasher_swigregister
IntPolyh_CoupleMapHasher_swigregister(IntPolyh_CoupleMapHasher)

def IntPolyh_CoupleMapHasher_HashCode(*args) -> "Standard_Integer":
    """
    * Computes a hash code for the given couple, in the range [1, theUpperBound] @param theCouple the couple which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
    	:param theCouple:
    	:type theCouple: IntPolyh_Couple
    	:param theUpperBound:
    	:type theUpperBound: int
    	:rtype: int
    """
    return _IntPolyh.IntPolyh_CoupleMapHasher_HashCode(*args)

def IntPolyh_CoupleMapHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    :param theCouple1:
    	:type theCouple1: IntPolyh_Couple
    	:param theCouple2:
    	:type theCouple2: IntPolyh_Couple
    	:rtype: bool
    """
    return _IntPolyh.IntPolyh_CoupleMapHasher_IsEqual(*args)

class IntPolyh_Edge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Dump(self, *args) -> "void":
        """
        :param v:
        	:type v: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Edge_Dump(self, *args)


    def FirstPoint(self, *args) -> "Standard_Integer":
        """
        * Returns the first point
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Edge_FirstPoint(self, *args)


    def FirstTriangle(self, *args) -> "Standard_Integer":
        """
        * Returns the first triangle
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Edge_FirstTriangle(self, *args)


    def __init__(self, *args):
        """
        * Constructor
        	:rtype: None
        * Constructor
        	:param thePoint1:
        	:type thePoint1: int
        	:param thePoint2:
        	:type thePoint2: int
        	:param theTriangle1:
        	:type theTriangle1: int
        	:param theTriangle2:
        	:type theTriangle2: int
        	:rtype: None
        """
        _IntPolyh.IntPolyh_Edge_swiginit(self, _IntPolyh.new_IntPolyh_Edge(*args))

    def SecondPoint(self, *args) -> "Standard_Integer":
        """
        * Returns the second point
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Edge_SecondPoint(self, *args)


    def SecondTriangle(self, *args) -> "Standard_Integer":
        """
        * Returns the second triangle
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Edge_SecondTriangle(self, *args)


    def SetFirstPoint(self, *args) -> "void":
        """
        * Sets the first point
        	:param thePoint:
        	:type thePoint: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Edge_SetFirstPoint(self, *args)


    def SetFirstTriangle(self, *args) -> "void":
        """
        * Sets the first triangle
        	:param theTriangle:
        	:type theTriangle: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Edge_SetFirstTriangle(self, *args)


    def SetSecondPoint(self, *args) -> "void":
        """
        * Sets the second point
        	:param thePoint:
        	:type thePoint: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Edge_SetSecondPoint(self, *args)


    def SetSecondTriangle(self, *args) -> "void":
        """
        * Sets the second triangle
        	:param theTriangle:
        	:type theTriangle: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Edge_SetSecondTriangle(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntPolyh.delete_IntPolyh_Edge
IntPolyh_Edge.Dump = new_instancemethod(_IntPolyh.IntPolyh_Edge_Dump, None, IntPolyh_Edge)
IntPolyh_Edge.FirstPoint = new_instancemethod(_IntPolyh.IntPolyh_Edge_FirstPoint, None, IntPolyh_Edge)
IntPolyh_Edge.FirstTriangle = new_instancemethod(_IntPolyh.IntPolyh_Edge_FirstTriangle, None, IntPolyh_Edge)
IntPolyh_Edge.SecondPoint = new_instancemethod(_IntPolyh.IntPolyh_Edge_SecondPoint, None, IntPolyh_Edge)
IntPolyh_Edge.SecondTriangle = new_instancemethod(_IntPolyh.IntPolyh_Edge_SecondTriangle, None, IntPolyh_Edge)
IntPolyh_Edge.SetFirstPoint = new_instancemethod(_IntPolyh.IntPolyh_Edge_SetFirstPoint, None, IntPolyh_Edge)
IntPolyh_Edge.SetFirstTriangle = new_instancemethod(_IntPolyh.IntPolyh_Edge_SetFirstTriangle, None, IntPolyh_Edge)
IntPolyh_Edge.SetSecondPoint = new_instancemethod(_IntPolyh.IntPolyh_Edge_SetSecondPoint, None, IntPolyh_Edge)
IntPolyh_Edge.SetSecondTriangle = new_instancemethod(_IntPolyh.IntPolyh_Edge_SetSecondTriangle, None, IntPolyh_Edge)
IntPolyh_Edge_swigregister = _IntPolyh.IntPolyh_Edge_swigregister
IntPolyh_Edge_swigregister(IntPolyh_Edge)

class IntPolyh_Intersection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetLinePoint(self, *args) -> "void":
        """
        * Gets the parameters of the point in section line
        	:param IndexLine:
        	:type IndexLine: int
        	:param IndexPoint:
        	:type IndexPoint: int
        	:param x:
        	:type x: float
        	:param y:
        	:type y: float
        	:param z:
        	:type z: float
        	:param u1:
        	:type u1: float
        	:param v1:
        	:type v1: float
        	:param u2:
        	:type u2: float
        	:param v2:
        	:type v2: float
        	:param incidence:
        	:type incidence: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Intersection_GetLinePoint(self, *args)


    def GetTangentZonePoint(self, *args) -> "void":
        """
        * Gets the parameters of the point in tangent zone
        	:param IndexLine:
        	:type IndexLine: int
        	:param IndexPoint:
        	:type IndexPoint: int
        	:param x:
        	:type x: float
        	:param y:
        	:type y: float
        	:param z:
        	:type z: float
        	:param u1:
        	:type u1: float
        	:param v1:
        	:type v1: float
        	:param u2:
        	:type u2: float
        	:param v2:
        	:type v2: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Intersection_GetTangentZonePoint(self, *args)


    def __init__(self, *args):
        """
        * @name Constructors Constructor for intersection of two surfaces with default parameters. Performs intersection.
        	:param theS1:
        	:type theS1: Adaptor3d_HSurface
        	:param theS2:
        	:type theS2: Adaptor3d_HSurface
        	:rtype: None
        * Constructor for intersection of two surfaces with the given size of the sampling nets: - <theNbSU1> x <theNbSV1> - for the first surface <theS1>; - <theNbSU2> x <theNbSV2> - for the second surface <theS2>. Performs intersection.
        	:param theS1:
        	:type theS1: Adaptor3d_HSurface
        	:param theNbSU1:
        	:type theNbSU1: int
        	:param theNbSV1:
        	:type theNbSV1: int
        	:param theS2:
        	:type theS2: Adaptor3d_HSurface
        	:param theNbSU2:
        	:type theNbSU2: int
        	:param theNbSV2:
        	:type theNbSV2: int
        	:rtype: None
        * Constructor for intersection of two surfaces with the precomputed sampling. Performs intersection.
        	:param theS1:
        	:type theS1: Adaptor3d_HSurface
        	:param theUPars1:
        	:type theUPars1: TColStd_Array1OfReal
        	:param theVPars1:
        	:type theVPars1: TColStd_Array1OfReal
        	:param theS2:
        	:type theS2: Adaptor3d_HSurface
        	:param theUPars2:
        	:type theUPars2: TColStd_Array1OfReal
        	:param theVPars2:
        	:type theVPars2: TColStd_Array1OfReal
        	:rtype: None
        """
        _IntPolyh.IntPolyh_Intersection_swiginit(self, _IntPolyh.new_IntPolyh_Intersection(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * @name Getting the results Returns state of the operation
        	:rtype: bool
        """
        return _IntPolyh.IntPolyh_Intersection_IsDone(self, *args)


    def NbPointsInLine(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points in the given line
        	:param IndexLine:
        	:type IndexLine: int
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Intersection_NbPointsInLine(self, *args)


    def NbPointsInTangentZone(self, *args) -> "Standard_Integer":
        """
        * Returns number of points in tangent zone
        	:param Standard_Integer:
        	:type Standard_Integer: 
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Intersection_NbPointsInTangentZone(self, *args)


    def NbSectionLines(self, *args) -> "Standard_Integer":
        """
        * Returns the number of section lines
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Intersection_NbSectionLines(self, *args)


    def NbTangentZones(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntPolyh.IntPolyh_Intersection_NbTangentZones(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntPolyh.delete_IntPolyh_Intersection
IntPolyh_Intersection.GetLinePoint = new_instancemethod(_IntPolyh.IntPolyh_Intersection_GetLinePoint, None, IntPolyh_Intersection)
IntPolyh_Intersection.GetTangentZonePoint = new_instancemethod(_IntPolyh.IntPolyh_Intersection_GetTangentZonePoint, None, IntPolyh_Intersection)
IntPolyh_Intersection.IsDone = new_instancemethod(_IntPolyh.IntPolyh_Intersection_IsDone, None, IntPolyh_Intersection)
IntPolyh_Intersection.NbPointsInLine = new_instancemethod(_IntPolyh.IntPolyh_Intersection_NbPointsInLine, None, IntPolyh_Intersection)
IntPolyh_Intersection.NbPointsInTangentZone = new_instancemethod(_IntPolyh.IntPolyh_Intersection_NbPointsInTangentZone, None, IntPolyh_Intersection)
IntPolyh_Intersection.NbSectionLines = new_instancemethod(_IntPolyh.IntPolyh_Intersection_NbSectionLines, None, IntPolyh_Intersection)
IntPolyh_Intersection.NbTangentZones = new_instancemethod(_IntPolyh.IntPolyh_Intersection_NbTangentZones, None, IntPolyh_Intersection)
IntPolyh_Intersection_swigregister = _IntPolyh.IntPolyh_Intersection_swigregister
IntPolyh_Intersection_swigregister(IntPolyh_Intersection)

class IntPolyh_Point(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "IntPolyh_Point":
        """
        * Addition
        	:param P1:
        	:type P1: IntPolyh_Point
        	:rtype: IntPolyh_Point
        """
        return _IntPolyh.IntPolyh_Point_Add(self, *args)


    def Cross(self, *args) -> "void":
        """
        * Cross
        	:param P1:
        	:type P1: IntPolyh_Point
        	:param P2:
        	:type P2: IntPolyh_Point
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_Cross(self, *args)


    def Degenerated(self, *args) -> "Standard_Boolean":
        """
        * Returns the degenerated flag
        	:rtype: bool
        """
        return _IntPolyh.IntPolyh_Point_Degenerated(self, *args)


    def Divide(self, *args) -> "IntPolyh_Point":
        """
        * Division
        	:param rr:
        	:type rr: float
        	:rtype: IntPolyh_Point
        """
        return _IntPolyh.IntPolyh_Point_Divide(self, *args)


    def Dot(self, *args) -> "Standard_Real":
        """
        * Dot
        	:param P2:
        	:type P2: IntPolyh_Point
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Point_Dot(self, *args)


    def Dump(self, *args) -> "void":
        """
        * Dump
        	:rtype: None
        * Dump
        	:param i:
        	:type i: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_Dump(self, *args)


    def Equal(self, *args) -> "void":
        """
        * Assignment operator
        	:param Pt:
        	:type Pt: IntPolyh_Point
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_Equal(self, *args)


    def __init__(self, *args):
        """
        * Constructor
        	:rtype: None
        * Constructor
        	:param x:
        	:type x: float
        	:param y:
        	:type y: float
        	:param z:
        	:type z: float
        	:param u:
        	:type u: float
        	:param v:
        	:type v: float
        	:rtype: None
        """
        _IntPolyh.IntPolyh_Point_swiginit(self, _IntPolyh.new_IntPolyh_Point(*args))

    def Middle(self, *args) -> "void":
        """
        * Creates middle point from P1 and P2 and stores it to this
        	:param MySurface:
        	:type MySurface: Adaptor3d_HSurface
        	:param P1:
        	:type P1: IntPolyh_Point
        	:param P2:
        	:type P2: IntPolyh_Point
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_Middle(self, *args)


    def Multiplication(self, *args) -> "IntPolyh_Point":
        """
        * Multiplication
        	:param rr:
        	:type rr: float
        	:rtype: IntPolyh_Point
        """
        return _IntPolyh.IntPolyh_Point_Multiplication(self, *args)


    def PartOfCommon(self, *args) -> "Standard_Integer":
        """
        * Returns 0 if the point is not common with the other surface
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Point_PartOfCommon(self, *args)


    def SetDegenerated(self, *args) -> "void":
        """
        * Sets the degenerated flag
        	:param theFlag:
        	:type theFlag: bool
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_SetDegenerated(self, *args)


    def SetPartOfCommon(self, *args) -> "void":
        """
        * Sets the part of common
        	:param ii:
        	:type ii: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_SetPartOfCommon(self, *args)


    def SetU(self, *args) -> "void":
        """
        * Sets the U coordinate for the 2D point
        	:param u:
        	:type u: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_SetU(self, *args)


    def SetV(self, *args) -> "void":
        """
        * Sets the V coordinate for the 2D point
        	:param v:
        	:type v: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_SetV(self, *args)


    def SetX(self, *args) -> "void":
        """
        * Sets the X coordinate for the 3D point
        	:param x:
        	:type x: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_SetX(self, *args)


    def SetY(self, *args) -> "void":
        """
        * Sets the Y coordinate for the 3D point
        	:param y:
        	:type y: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_SetY(self, *args)


    def SetZ(self, *args) -> "void":
        """
        * Sets the Z coordinate for the 3D point
        	:param z:
        	:type z: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_SetZ(self, *args)


    def SquareDistance(self, *args) -> "Standard_Real":
        """
        * Square distance to the other point
        	:param P2:
        	:type P2: IntPolyh_Point
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Point_SquareDistance(self, *args)


    def SquareModulus(self, *args) -> "Standard_Real":
        """
        * Square modulus
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Point_SquareModulus(self, *args)


    def Sub(self, *args) -> "IntPolyh_Point":
        """
        * Subtraction
        	:param P1:
        	:type P1: IntPolyh_Point
        	:rtype: IntPolyh_Point
        """
        return _IntPolyh.IntPolyh_Point_Sub(self, *args)


    def U(self, *args) -> "Standard_Real":
        """
        * Returns the U coordinate of the 2D point
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Point_U(self, *args)


    def V(self, *args) -> "Standard_Real":
        """
        * Returns the V coordinate of the 2D point
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Point_V(self, *args)


    def X(self, *args) -> "Standard_Real":
        """
        * Returns X coordinate of the 3D point
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Point_X(self, *args)


    def Y(self, *args) -> "Standard_Real":
        """
        * Returns Y coordinate of the 3D point
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Point_Y(self, *args)


    def Z(self, *args) -> "Standard_Real":
        """
        * Returns the Z coordinate of the 3D point
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Point_Z(self, *args)


    def __mul__(self, *args) -> "IntPolyh_Point":
        """
        :param rr:
        	:type rr: float
        	:rtype: IntPolyh_Point
        """
        return _IntPolyh.IntPolyh_Point___mul__(self, *args)


    def __add__(self, *args) -> "IntPolyh_Point":
        """
        :param P1:
        	:type P1: IntPolyh_Point
        	:rtype: IntPolyh_Point
        """
        return _IntPolyh.IntPolyh_Point___add__(self, *args)


    def __sub__(self, *args) -> "IntPolyh_Point":
        """
        :param P1:
        	:type P1: IntPolyh_Point
        	:rtype: IntPolyh_Point
        """
        return _IntPolyh.IntPolyh_Point___sub__(self, *args)


    def __truediv__(self, *args):
        return _IntPolyh.IntPolyh_Point___truediv__(self, *args)
    __div__ = __truediv__



    def Set(self, *args) -> "void":
        """
        * Sets the point
        	:param x:
        	:type x: float
        	:param y:
        	:type y: float
        	:param z:
        	:type z: float
        	:param u:
        	:type u: float
        	:param v:
        	:type v: float
        	:param II: default value is 1
        	:type II: int
        	:rtype: None
        :param Pt:
        	:type Pt: IntPolyh_Point
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Point_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntPolyh.delete_IntPolyh_Point
IntPolyh_Point.Add = new_instancemethod(_IntPolyh.IntPolyh_Point_Add, None, IntPolyh_Point)
IntPolyh_Point.Cross = new_instancemethod(_IntPolyh.IntPolyh_Point_Cross, None, IntPolyh_Point)
IntPolyh_Point.Degenerated = new_instancemethod(_IntPolyh.IntPolyh_Point_Degenerated, None, IntPolyh_Point)
IntPolyh_Point.Divide = new_instancemethod(_IntPolyh.IntPolyh_Point_Divide, None, IntPolyh_Point)
IntPolyh_Point.Dot = new_instancemethod(_IntPolyh.IntPolyh_Point_Dot, None, IntPolyh_Point)
IntPolyh_Point.Dump = new_instancemethod(_IntPolyh.IntPolyh_Point_Dump, None, IntPolyh_Point)
IntPolyh_Point.Equal = new_instancemethod(_IntPolyh.IntPolyh_Point_Equal, None, IntPolyh_Point)
IntPolyh_Point.Middle = new_instancemethod(_IntPolyh.IntPolyh_Point_Middle, None, IntPolyh_Point)
IntPolyh_Point.Multiplication = new_instancemethod(_IntPolyh.IntPolyh_Point_Multiplication, None, IntPolyh_Point)
IntPolyh_Point.PartOfCommon = new_instancemethod(_IntPolyh.IntPolyh_Point_PartOfCommon, None, IntPolyh_Point)
IntPolyh_Point.SetDegenerated = new_instancemethod(_IntPolyh.IntPolyh_Point_SetDegenerated, None, IntPolyh_Point)
IntPolyh_Point.SetPartOfCommon = new_instancemethod(_IntPolyh.IntPolyh_Point_SetPartOfCommon, None, IntPolyh_Point)
IntPolyh_Point.SetU = new_instancemethod(_IntPolyh.IntPolyh_Point_SetU, None, IntPolyh_Point)
IntPolyh_Point.SetV = new_instancemethod(_IntPolyh.IntPolyh_Point_SetV, None, IntPolyh_Point)
IntPolyh_Point.SetX = new_instancemethod(_IntPolyh.IntPolyh_Point_SetX, None, IntPolyh_Point)
IntPolyh_Point.SetY = new_instancemethod(_IntPolyh.IntPolyh_Point_SetY, None, IntPolyh_Point)
IntPolyh_Point.SetZ = new_instancemethod(_IntPolyh.IntPolyh_Point_SetZ, None, IntPolyh_Point)
IntPolyh_Point.SquareDistance = new_instancemethod(_IntPolyh.IntPolyh_Point_SquareDistance, None, IntPolyh_Point)
IntPolyh_Point.SquareModulus = new_instancemethod(_IntPolyh.IntPolyh_Point_SquareModulus, None, IntPolyh_Point)
IntPolyh_Point.Sub = new_instancemethod(_IntPolyh.IntPolyh_Point_Sub, None, IntPolyh_Point)
IntPolyh_Point.U = new_instancemethod(_IntPolyh.IntPolyh_Point_U, None, IntPolyh_Point)
IntPolyh_Point.V = new_instancemethod(_IntPolyh.IntPolyh_Point_V, None, IntPolyh_Point)
IntPolyh_Point.X = new_instancemethod(_IntPolyh.IntPolyh_Point_X, None, IntPolyh_Point)
IntPolyh_Point.Y = new_instancemethod(_IntPolyh.IntPolyh_Point_Y, None, IntPolyh_Point)
IntPolyh_Point.Z = new_instancemethod(_IntPolyh.IntPolyh_Point_Z, None, IntPolyh_Point)
IntPolyh_Point.__mul__ = new_instancemethod(_IntPolyh.IntPolyh_Point___mul__, None, IntPolyh_Point)
IntPolyh_Point.__add__ = new_instancemethod(_IntPolyh.IntPolyh_Point___add__, None, IntPolyh_Point)
IntPolyh_Point.__sub__ = new_instancemethod(_IntPolyh.IntPolyh_Point___sub__, None, IntPolyh_Point)
IntPolyh_Point.Set = new_instancemethod(_IntPolyh.IntPolyh_Point_Set, None, IntPolyh_Point)
IntPolyh_Point_swigregister = _IntPolyh.IntPolyh_Point_swigregister
IntPolyh_Point_swigregister(IntPolyh_Point)

class IntPolyh_PointNormal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Point = _swig_property(_IntPolyh.IntPolyh_PointNormal_Point_get, _IntPolyh.IntPolyh_PointNormal_Point_set)
    Normal = _swig_property(_IntPolyh.IntPolyh_PointNormal_Normal_get, _IntPolyh.IntPolyh_PointNormal_Normal_set)

    __repr__ = _dumps_object


    def __init__(self):
        _IntPolyh.IntPolyh_PointNormal_swiginit(self, _IntPolyh.new_IntPolyh_PointNormal())
    __swig_destroy__ = _IntPolyh.delete_IntPolyh_PointNormal
IntPolyh_PointNormal_swigregister = _IntPolyh.IntPolyh_PointNormal_swigregister
IntPolyh_PointNormal_swigregister(IntPolyh_PointNormal)

class IntPolyh_SectionLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeValue(self, *args) -> "IntPolyh_StartPoint &":
        """
        :param nn:
        	:type nn: int
        	:rtype: IntPolyh_StartPoint
        """
        return _IntPolyh.IntPolyh_SectionLine_ChangeValue(self, *args)


    def Copy(self, *args) -> "IntPolyh_SectionLine &":
        """
        :param Other:
        	:type Other: IntPolyh_SectionLine
        	:rtype: IntPolyh_SectionLine
        """
        return _IntPolyh.IntPolyh_SectionLine_Copy(self, *args)


    def Destroy(self, *args) -> "void":
        """:rtype: None"""
        return _IntPolyh.IntPolyh_SectionLine_Destroy(self, *args)


    def Dump(self, *args) -> "void":
        """:rtype: None"""
        return _IntPolyh.IntPolyh_SectionLine_Dump(self, *args)


    def GetN(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntPolyh.IntPolyh_SectionLine_GetN(self, *args)


    def IncrementNbStartPoints(self, *args) -> "void":
        """:rtype: None"""
        return _IntPolyh.IntPolyh_SectionLine_IncrementNbStartPoints(self, *args)


    def Init(self, *args) -> "void":
        """
        :param nn:
        	:type nn: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_SectionLine_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param nn:
        	:type nn: int
        	:rtype: None
        """
        _IntPolyh.IntPolyh_SectionLine_swiginit(self, _IntPolyh.new_IntPolyh_SectionLine(*args))

    def NbStartPoints(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntPolyh.IntPolyh_SectionLine_NbStartPoints(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param SP:
        	:type SP: IntPolyh_StartPoint
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_SectionLine_Prepend(self, *args)


    def Value(self, *args) -> "IntPolyh_StartPoint const &":
        """
        :param nn:
        	:type nn: int
        	:rtype: IntPolyh_StartPoint
        """
        return _IntPolyh.IntPolyh_SectionLine_Value(self, *args)


    def Set(self, *args) -> "IntPolyh_SectionLine &":
        """
        :param Other:
        	:type Other: IntPolyh_SectionLine
        	:rtype: IntPolyh_SectionLine
        """
        return _IntPolyh.IntPolyh_SectionLine_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntPolyh.delete_IntPolyh_SectionLine
IntPolyh_SectionLine.ChangeValue = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_ChangeValue, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Copy = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Copy, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Destroy = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Destroy, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Dump = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Dump, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.GetN = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_GetN, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.IncrementNbStartPoints = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_IncrementNbStartPoints, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Init = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Init, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.NbStartPoints = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_NbStartPoints, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Prepend = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Prepend, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Value = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Value, None, IntPolyh_SectionLine)
IntPolyh_SectionLine.Set = new_instancemethod(_IntPolyh.IntPolyh_SectionLine_Set, None, IntPolyh_SectionLine)
IntPolyh_SectionLine_swigregister = _IntPolyh.IntPolyh_SectionLine_swigregister
IntPolyh_SectionLine_swigregister(IntPolyh_SectionLine)

class IntPolyh_StartPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChainList(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntPolyh.IntPolyh_StartPoint_ChainList(self, *args)


    def CheckSameSP(self, *args) -> "Standard_Integer":
        """
        :param SP:
        	:type SP: IntPolyh_StartPoint
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_StartPoint_CheckSameSP(self, *args)


    def Dump(self, *args) -> "void":
        """
        :rtype: None
        :param i:
        	:type i: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_StartPoint_Dump(self, *args)


    def E1(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntPolyh.IntPolyh_StartPoint_E1(self, *args)


    def E2(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntPolyh.IntPolyh_StartPoint_E2(self, *args)


    def GetAngle(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntPolyh.IntPolyh_StartPoint_GetAngle(self, *args)


    def GetEdgePoints(self, *args) -> "Standard_Integer":
        """
        :param Triangle:
        	:type Triangle: IntPolyh_Triangle
        	:param FirstEdgePoint:
        	:type FirstEdgePoint: int
        	:param SecondEdgePoint:
        	:type SecondEdgePoint: int
        	:param LastPoint:
        	:type LastPoint: int
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_StartPoint_GetEdgePoints(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param xx:
        	:type xx: float
        	:param yy:
        	:type yy: float
        	:param zz:
        	:type zz: float
        	:param uu1:
        	:type uu1: float
        	:param vv1:
        	:type vv1: float
        	:param uu2:
        	:type uu2: float
        	:param vv2:
        	:type vv2: float
        	:param T1:
        	:type T1: int
        	:param E1:
        	:type E1: int
        	:param LAM1:
        	:type LAM1: float
        	:param T2:
        	:type T2: int
        	:param E2:
        	:type E2: int
        	:param LAM2:
        	:type LAM2: float
        	:param List:
        	:type List: int
        	:rtype: None
        """
        _IntPolyh.IntPolyh_StartPoint_swiginit(self, _IntPolyh.new_IntPolyh_StartPoint(*args))

    def Lambda1(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntPolyh.IntPolyh_StartPoint_Lambda1(self, *args)


    def Lambda2(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntPolyh.IntPolyh_StartPoint_Lambda2(self, *args)


    def SetAngle(self, *args) -> "void":
        """
        :param ang:
        	:type ang: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_StartPoint_SetAngle(self, *args)


    def SetChainList(self, *args) -> "void":
        """
        :param ChList:
        	:type ChList: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_StartPoint_SetChainList(self, *args)


    def SetCoupleValue(self, *args) -> "void":
        """
        :param IT1:
        	:type IT1: int
        	:param IT2:
        	:type IT2: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_StartPoint_SetCoupleValue(self, *args)


    def SetEdge1(self, *args) -> "void":
        """
        :param IE1:
        	:type IE1: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_StartPoint_SetEdge1(self, *args)


    def SetEdge2(self, *args) -> "void":
        """
        :param IE2:
        	:type IE2: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_StartPoint_SetEdge2(self, *args)


    def SetLambda1(self, *args) -> "void":
        """
        :param LAM1:
        	:type LAM1: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_StartPoint_SetLambda1(self, *args)


    def SetLambda2(self, *args) -> "void":
        """
        :param LAM2:
        	:type LAM2: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_StartPoint_SetLambda2(self, *args)


    def SetUV1(self, *args) -> "void":
        """
        :param UU1:
        	:type UU1: float
        	:param VV1:
        	:type VV1: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_StartPoint_SetUV1(self, *args)


    def SetUV2(self, *args) -> "void":
        """
        :param UU2:
        	:type UU2: float
        	:param VV2:
        	:type VV2: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_StartPoint_SetUV2(self, *args)


    def SetXYZ(self, *args) -> "void":
        """
        :param XX:
        	:type XX: float
        	:param YY:
        	:type YY: float
        	:param ZZ:
        	:type ZZ: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_StartPoint_SetXYZ(self, *args)


    def T1(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntPolyh.IntPolyh_StartPoint_T1(self, *args)


    def T2(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _IntPolyh.IntPolyh_StartPoint_T2(self, *args)


    def U1(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntPolyh.IntPolyh_StartPoint_U1(self, *args)


    def U2(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntPolyh.IntPolyh_StartPoint_U2(self, *args)


    def V1(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntPolyh.IntPolyh_StartPoint_V1(self, *args)


    def V2(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntPolyh.IntPolyh_StartPoint_V2(self, *args)


    def X(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntPolyh.IntPolyh_StartPoint_X(self, *args)


    def Y(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntPolyh.IntPolyh_StartPoint_Y(self, *args)


    def Z(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _IntPolyh.IntPolyh_StartPoint_Z(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntPolyh.delete_IntPolyh_StartPoint
IntPolyh_StartPoint.ChainList = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_ChainList, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.CheckSameSP = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_CheckSameSP, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Dump = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Dump, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.E1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_E1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.E2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_E2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.GetAngle = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_GetAngle, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.GetEdgePoints = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_GetEdgePoints, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Lambda1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Lambda1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Lambda2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Lambda2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetAngle = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetAngle, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetChainList = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetChainList, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetCoupleValue = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetCoupleValue, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetEdge1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetEdge1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetEdge2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetEdge2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetLambda1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetLambda1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetLambda2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetLambda2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetUV1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetUV1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetUV2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetUV2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.SetXYZ = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_SetXYZ, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.T1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_T1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.T2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_T2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.U1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_U1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.U2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_U2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.V1 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_V1, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.V2 = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_V2, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.X = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_X, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Y = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Y, None, IntPolyh_StartPoint)
IntPolyh_StartPoint.Z = new_instancemethod(_IntPolyh.IntPolyh_StartPoint_Z, None, IntPolyh_StartPoint)
IntPolyh_StartPoint_swigregister = _IntPolyh.IntPolyh_StartPoint_swigregister
IntPolyh_StartPoint_swigregister(IntPolyh_StartPoint)

class IntPolyh_Tools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ComputeDeflection(*args) -> "Standard_Real":
        """
        * Computes the deflection tolerance on the surface for the given sampling.
        	:param theSurf:
        	:type theSurf: Adaptor3d_HSurface
        	:param theUPars:
        	:type theUPars: TColStd_Array1OfReal
        	:param theVPars:
        	:type theVPars: TColStd_Array1OfReal
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Tools_ComputeDeflection(*args)

    ComputeDeflection = staticmethod(ComputeDeflection)

    def FillArrayOfPointNormal(*args) -> "void":
        """
        * Fills the array <thePoints> with the points (triangulation nodes) on the surface and normal directions of the surface in these points.
        	:param theSurf:
        	:type theSurf: Adaptor3d_HSurface
        	:param theUPars:
        	:type theUPars: TColStd_Array1OfReal
        	:param theVPars:
        	:type theVPars: TColStd_Array1OfReal
        	:param thePoints:
        	:type thePoints: IntPolyh_ArrayOfPointNormal
        	:rtype: void
        """
        return _IntPolyh.IntPolyh_Tools_FillArrayOfPointNormal(*args)

    FillArrayOfPointNormal = staticmethod(FillArrayOfPointNormal)

    def IsEnlargePossible(*args) -> "Standard_Boolean &, Standard_Boolean &":
        """
        * Checks if the surface can be enlarged in U or V direction.
        	:param theSurf:
        	:type theSurf: Adaptor3d_HSurface
        	:param theUEnlarge:
        	:type theUEnlarge: bool
        	:param theVEnlarge:
        	:type theVEnlarge: bool
        	:rtype: void
        """
        return _IntPolyh.IntPolyh_Tools_IsEnlargePossible(*args)

    IsEnlargePossible = staticmethod(IsEnlargePossible)

    def MakeSampling(*args) -> "void":
        """
        * Makes the sampling of the given surface <theSurf> making the net of <theNbSU> x <theNbSV> sampling points. The flag <theEnlargeZone> controls the enlargement of the sampling zone on the surface. The parameters of the sampling points are stored into <theUPars> and <theVPars> arrays.
        	:param theSurf:
        	:type theSurf: Adaptor3d_HSurface
        	:param theNbSU:
        	:type theNbSU: int
        	:param theNbSV:
        	:type theNbSV: int
        	:param theEnlargeZone:
        	:type theEnlargeZone: bool
        	:param theUPars:
        	:type theUPars: TColStd_Array1OfReal
        	:param theVPars:
        	:type theVPars: TColStd_Array1OfReal
        	:rtype: void
        """
        return _IntPolyh.IntPolyh_Tools_MakeSampling(*args)

    MakeSampling = staticmethod(MakeSampling)

    __repr__ = _dumps_object


    def __init__(self):
        _IntPolyh.IntPolyh_Tools_swiginit(self, _IntPolyh.new_IntPolyh_Tools())
    __swig_destroy__ = _IntPolyh.delete_IntPolyh_Tools
IntPolyh_Tools_swigregister = _IntPolyh.IntPolyh_Tools_swigregister
IntPolyh_Tools_swigregister(IntPolyh_Tools)

def IntPolyh_Tools_ComputeDeflection(*args) -> "Standard_Real":
    """
    * Computes the deflection tolerance on the surface for the given sampling.
    	:param theSurf:
    	:type theSurf: Adaptor3d_HSurface
    	:param theUPars:
    	:type theUPars: TColStd_Array1OfReal
    	:param theVPars:
    	:type theVPars: TColStd_Array1OfReal
    	:rtype: float
    """
    return _IntPolyh.IntPolyh_Tools_ComputeDeflection(*args)

def IntPolyh_Tools_FillArrayOfPointNormal(*args) -> "void":
    """
    * Fills the array <thePoints> with the points (triangulation nodes) on the surface and normal directions of the surface in these points.
    	:param theSurf:
    	:type theSurf: Adaptor3d_HSurface
    	:param theUPars:
    	:type theUPars: TColStd_Array1OfReal
    	:param theVPars:
    	:type theVPars: TColStd_Array1OfReal
    	:param thePoints:
    	:type thePoints: IntPolyh_ArrayOfPointNormal
    	:rtype: void
    """
    return _IntPolyh.IntPolyh_Tools_FillArrayOfPointNormal(*args)

def IntPolyh_Tools_IsEnlargePossible(*args) -> "Standard_Boolean &, Standard_Boolean &":
    """
    * Checks if the surface can be enlarged in U or V direction.
    	:param theSurf:
    	:type theSurf: Adaptor3d_HSurface
    	:param theUEnlarge:
    	:type theUEnlarge: bool
    	:param theVEnlarge:
    	:type theVEnlarge: bool
    	:rtype: void
    """
    return _IntPolyh.IntPolyh_Tools_IsEnlargePossible(*args)

def IntPolyh_Tools_MakeSampling(*args) -> "void":
    """
    * Makes the sampling of the given surface <theSurf> making the net of <theNbSU> x <theNbSV> sampling points. The flag <theEnlargeZone> controls the enlargement of the sampling zone on the surface. The parameters of the sampling points are stored into <theUPars> and <theVPars> arrays.
    	:param theSurf:
    	:type theSurf: Adaptor3d_HSurface
    	:param theNbSU:
    	:type theNbSU: int
    	:param theNbSV:
    	:type theNbSV: int
    	:param theEnlargeZone:
    	:type theEnlargeZone: bool
    	:param theUPars:
    	:type theUPars: TColStd_Array1OfReal
    	:param theVPars:
    	:type theVPars: TColStd_Array1OfReal
    	:rtype: void
    """
    return _IntPolyh.IntPolyh_Tools_MakeSampling(*args)

class IntPolyh_Triangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BoundingBox(self, *args) -> "Bnd_Box const &":
        """
        * Returns the bounding box of the triangle.
        	:param thePoints:
        	:type thePoints: IntPolyh_ArrayOfPoints
        	:rtype: Bnd_Box
        """
        return _IntPolyh.IntPolyh_Triangle_BoundingBox(self, *args)


    def ComputeDeflection(self, *args) -> "Standard_Real":
        """
        * Computes the deflection for the triangle
        	:param theSurface:
        	:type theSurface: Adaptor3d_HSurface
        	:param thePoints:
        	:type thePoints: IntPolyh_ArrayOfPoints
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Triangle_ComputeDeflection(self, *args)


    def Deflection(self, *args) -> "Standard_Real":
        """
        * Returns the deflection of the triangle
        	:rtype: float
        """
        return _IntPolyh.IntPolyh_Triangle_Deflection(self, *args)


    def Dump(self, *args) -> "void":
        """
        * Dumps the contents of the triangle.
        	:param v:
        	:type v: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_Dump(self, *args)


    def FirstEdge(self, *args) -> "Standard_Integer":
        """
        * Returns the first edge
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_FirstEdge(self, *args)


    def FirstEdgeOrientation(self, *args) -> "Standard_Integer":
        """
        * Returns the orientation of the first edge
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_FirstEdgeOrientation(self, *args)


    def FirstPoint(self, *args) -> "Standard_Integer":
        """
        * Returns the first point
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_FirstPoint(self, *args)


    def GetEdgeNumber(self, *args) -> "Standard_Integer":
        """
        * Gets the edge number by the index
        	:param theEdgeIndex:
        	:type theEdgeIndex: int
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_GetEdgeNumber(self, *args)


    def GetEdgeOrientation(self, *args) -> "Standard_Integer":
        """
        * Gets the edges orientation by the index
        	:param theEdgeIndex:
        	:type theEdgeIndex: int
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_GetEdgeOrientation(self, *args)


    def GetNextTriangle(self, *args) -> "Standard_Integer":
        """
        * Gets the adjacent triangle
        	:param theTriangle:
        	:type theTriangle: int
        	:param theEdgeNum:
        	:type theEdgeNum: int
        	:param TEdges:
        	:type TEdges: IntPolyh_ArrayOfEdges
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_GetNextTriangle(self, *args)


    def HasIntersection(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the triangle has interfered the other triangle
        	:rtype: bool
        """
        return _IntPolyh.IntPolyh_Triangle_HasIntersection(self, *args)


    def __init__(self, *args):
        """
        * Constructor
        	:rtype: None
        * Constructor
        	:param thePoint1:
        	:type thePoint1: int
        	:param thePoint2:
        	:type thePoint2: int
        	:param thePoint3:
        	:type thePoint3: int
        	:rtype: None
        """
        _IntPolyh.IntPolyh_Triangle_swiginit(self, _IntPolyh.new_IntPolyh_Triangle(*args))

    def IsDegenerated(self, *args) -> "Standard_Boolean":
        """
        * Returns the Degenerated flag
        	:rtype: bool
        """
        return _IntPolyh.IntPolyh_Triangle_IsDegenerated(self, *args)


    def IsIntersectionPossible(self, *args) -> "Standard_Boolean":
        """
        * Returns possibility of the intersection
        	:rtype: bool
        """
        return _IntPolyh.IntPolyh_Triangle_IsIntersectionPossible(self, *args)


    def LinkEdges2Triangle(self, *args) -> "void":
        """
        * Links edges to triangle
        	:param TEdges:
        	:type TEdges: IntPolyh_ArrayOfEdges
        	:param theEdge1:
        	:type theEdge1: int
        	:param theEdge2:
        	:type theEdge2: int
        	:param theEdge3:
        	:type theEdge3: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_LinkEdges2Triangle(self, *args)


    def MiddleRefinement(self, *args) -> "void":
        """
        * Splits the triangle on two to decrease its deflection
        	:param theTriangleNumber:
        	:type theTriangleNumber: int
        	:param theSurface:
        	:type theSurface: Adaptor3d_HSurface
        	:param TPoints:
        	:type TPoints: IntPolyh_ArrayOfPoints
        	:param TTriangles:
        	:type TTriangles: IntPolyh_ArrayOfTriangles
        	:param TEdges:
        	:type TEdges: IntPolyh_ArrayOfEdges
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_MiddleRefinement(self, *args)


    def MultipleMiddleRefinement(self, *args) -> "void":
        """
        * Splits the current triangle and new triangles until the refinement criterion is not achieved
        	:param theRefineCriterion:
        	:type theRefineCriterion: float
        	:param theBox:
        	:type theBox: Bnd_Box
        	:param theTriangleNumber:
        	:type theTriangleNumber: int
        	:param theSurface:
        	:type theSurface: Adaptor3d_HSurface
        	:param TPoints:
        	:type TPoints: IntPolyh_ArrayOfPoints
        	:param TTriangles:
        	:type TTriangles: IntPolyh_ArrayOfTriangles
        	:param TEdges:
        	:type TEdges: IntPolyh_ArrayOfEdges
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_MultipleMiddleRefinement(self, *args)


    def SecondEdge(self, *args) -> "Standard_Integer":
        """
        * Returns the second edge
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_SecondEdge(self, *args)


    def SecondEdgeOrientation(self, *args) -> "Standard_Integer":
        """
        * Returns the orientation of the second edge
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_SecondEdgeOrientation(self, *args)


    def SecondPoint(self, *args) -> "Standard_Integer":
        """
        * Returns the second point
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_SecondPoint(self, *args)


    def SetDeflection(self, *args) -> "void":
        """
        * Sets the deflection
        	:param theDeflection:
        	:type theDeflection: float
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetDeflection(self, *args)


    def SetDegenerated(self, *args) -> "void":
        """
        * Sets the degenerated flag
        	:param theDegFlag:
        	:type theDegFlag: bool
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetDegenerated(self, *args)


    def SetEdge(self, *args) -> "void":
        """
        * Sets the edge by the index
        	:param theEdgeIndex:
        	:type theEdgeIndex: int
        	:param theEdgeNumber:
        	:type theEdgeNumber: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetEdge(self, *args)


    def SetEdgeAndOrientation(self, *args) -> "void":
        """
        * Sets the appropriate edge and orientation for the triangle.
        	:param theEdge:
        	:type theEdge: IntPolyh_Edge
        	:param theEdgeIndex:
        	:type theEdgeIndex: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetEdgeAndOrientation(self, *args)


    def SetEdgeOrientation(self, *args) -> "void":
        """
        * Sets the edges orientation by the index
        	:param theEdgeIndex:
        	:type theEdgeIndex: int
        	:param theEdgeOrientation:
        	:type theEdgeOrientation: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetEdgeOrientation(self, *args)


    def SetFirstEdge(self, *args) -> "void":
        """
        * Sets the first edge
        	:param theEdge:
        	:type theEdge: int
        	:param theEdgeOrientation:
        	:type theEdgeOrientation: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetFirstEdge(self, *args)


    def SetFirstPoint(self, *args) -> "void":
        """
        * Sets the first point
        	:param thePoint:
        	:type thePoint: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetFirstPoint(self, *args)


    def SetIntersection(self, *args) -> "void":
        """
        * Sets the flag of intersection
        	:param theInt:
        	:type theInt: bool
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetIntersection(self, *args)


    def SetIntersectionPossible(self, *args) -> "void":
        """
        * Sets the flag of possibility of intersection
        	:param theIP:
        	:type theIP: bool
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetIntersectionPossible(self, *args)


    def SetSecondEdge(self, *args) -> "void":
        """
        * Sets the second edge
        	:param theEdge:
        	:type theEdge: int
        	:param theEdgeOrientation:
        	:type theEdgeOrientation: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetSecondEdge(self, *args)


    def SetSecondPoint(self, *args) -> "void":
        """
        * Sets the second point
        	:param thePoint:
        	:type thePoint: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetSecondPoint(self, *args)


    def SetThirdEdge(self, *args) -> "void":
        """
        * Sets the third edge
        	:param theEdge:
        	:type theEdge: int
        	:param theEdgeOrientation:
        	:type theEdgeOrientation: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetThirdEdge(self, *args)


    def SetThirdPoint(self, *args) -> "void":
        """
        * Sets the third point
        	:param thePoint:
        	:type thePoint: int
        	:rtype: None
        """
        return _IntPolyh.IntPolyh_Triangle_SetThirdPoint(self, *args)


    def ThirdEdge(self, *args) -> "Standard_Integer":
        """
        * Returns the third edge
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_ThirdEdge(self, *args)


    def ThirdEdgeOrientation(self, *args) -> "Standard_Integer":
        """
        * Returns the orientation of the third edge
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_ThirdEdgeOrientation(self, *args)


    def ThirdPoint(self, *args) -> "Standard_Integer":
        """
        * Returns the third point
        	:rtype: int
        """
        return _IntPolyh.IntPolyh_Triangle_ThirdPoint(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntPolyh.delete_IntPolyh_Triangle
IntPolyh_Triangle.BoundingBox = new_instancemethod(_IntPolyh.IntPolyh_Triangle_BoundingBox, None, IntPolyh_Triangle)
IntPolyh_Triangle.ComputeDeflection = new_instancemethod(_IntPolyh.IntPolyh_Triangle_ComputeDeflection, None, IntPolyh_Triangle)
IntPolyh_Triangle.Deflection = new_instancemethod(_IntPolyh.IntPolyh_Triangle_Deflection, None, IntPolyh_Triangle)
IntPolyh_Triangle.Dump = new_instancemethod(_IntPolyh.IntPolyh_Triangle_Dump, None, IntPolyh_Triangle)
IntPolyh_Triangle.FirstEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_FirstEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.FirstEdgeOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_FirstEdgeOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.FirstPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_FirstPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle.GetEdgeNumber = new_instancemethod(_IntPolyh.IntPolyh_Triangle_GetEdgeNumber, None, IntPolyh_Triangle)
IntPolyh_Triangle.GetEdgeOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_GetEdgeOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.GetNextTriangle = new_instancemethod(_IntPolyh.IntPolyh_Triangle_GetNextTriangle, None, IntPolyh_Triangle)
IntPolyh_Triangle.HasIntersection = new_instancemethod(_IntPolyh.IntPolyh_Triangle_HasIntersection, None, IntPolyh_Triangle)
IntPolyh_Triangle.IsDegenerated = new_instancemethod(_IntPolyh.IntPolyh_Triangle_IsDegenerated, None, IntPolyh_Triangle)
IntPolyh_Triangle.IsIntersectionPossible = new_instancemethod(_IntPolyh.IntPolyh_Triangle_IsIntersectionPossible, None, IntPolyh_Triangle)
IntPolyh_Triangle.LinkEdges2Triangle = new_instancemethod(_IntPolyh.IntPolyh_Triangle_LinkEdges2Triangle, None, IntPolyh_Triangle)
IntPolyh_Triangle.MiddleRefinement = new_instancemethod(_IntPolyh.IntPolyh_Triangle_MiddleRefinement, None, IntPolyh_Triangle)
IntPolyh_Triangle.MultipleMiddleRefinement = new_instancemethod(_IntPolyh.IntPolyh_Triangle_MultipleMiddleRefinement, None, IntPolyh_Triangle)
IntPolyh_Triangle.SecondEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SecondEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.SecondEdgeOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SecondEdgeOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.SecondPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SecondPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetDeflection = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetDeflection, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetDegenerated = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetDegenerated, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetEdgeAndOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetEdgeAndOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetEdgeOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetEdgeOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetFirstEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetFirstEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetFirstPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetFirstPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetIntersection = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetIntersection, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetIntersectionPossible = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetIntersectionPossible, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetSecondEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetSecondEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetSecondPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetSecondPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetThirdEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetThirdEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.SetThirdPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_SetThirdPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle.ThirdEdge = new_instancemethod(_IntPolyh.IntPolyh_Triangle_ThirdEdge, None, IntPolyh_Triangle)
IntPolyh_Triangle.ThirdEdgeOrientation = new_instancemethod(_IntPolyh.IntPolyh_Triangle_ThirdEdgeOrientation, None, IntPolyh_Triangle)
IntPolyh_Triangle.ThirdPoint = new_instancemethod(_IntPolyh.IntPolyh_Triangle_ThirdPoint, None, IntPolyh_Triangle)
IntPolyh_Triangle_swigregister = _IntPolyh.IntPolyh_Triangle_swigregister
IntPolyh_Triangle_swigregister(IntPolyh_Triangle)



