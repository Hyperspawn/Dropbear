# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
RWObj module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_rwobj.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _RWObj.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWObj')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWObj')
    _RWObj = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWObj', [dirname(__file__)])
        except ImportError:
            import _RWObj
            return _RWObj
        try:
            _mod = imp.load_module('_RWObj', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWObj = swig_import_helper()
    del swig_import_helper
else:
    import _RWObj
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWObj.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_RWObj.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_RWObj.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_RWObj.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_RWObj.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_RWObj.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_RWObj.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_RWObj.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_RWObj.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_RWObj.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_RWObj.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_RWObj.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_RWObj.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_RWObj.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_RWObj.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_RWObj.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_RWObj.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _RWObj.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _RWObj.process_exception(error, method_name, class_name)
process_exception = _RWObj.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TCollection
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Quantity
import OCC.Core.Aspect
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.Bnd
import OCC.Core.Image
import OCC.Core.OSD
RWObj_SubMeshReason_NewObject = _RWObj.RWObj_SubMeshReason_NewObject
RWObj_SubMeshReason_NewGroup = _RWObj.RWObj_SubMeshReason_NewGroup
RWObj_SubMeshReason_NewMaterial = _RWObj.RWObj_SubMeshReason_NewMaterial
RWObj_SubMeshReason_NewSmoothGroup = _RWObj.RWObj_SubMeshReason_NewSmoothGroup
class RWObj_IShapeReceiver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def BindNamedShape(self, *args) -> "void":
        """
        * @param theShape shape to register @param theName shape name @param theMaterial shape material @param theIsRootShape indicates that this is a root object (free shape)
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theName:
        	:type theName: TCollection_AsciiString
        	:param theMaterial:
        	:type theMaterial: RWObj_Material *
        	:param theIsRootShape:
        	:type theIsRootShape: bool
        	:rtype: None
        """
        return _RWObj.RWObj_IShapeReceiver_BindNamedShape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWObj.delete_RWObj_IShapeReceiver
RWObj_IShapeReceiver.BindNamedShape = new_instancemethod(_RWObj.RWObj_IShapeReceiver_BindNamedShape, None, RWObj_IShapeReceiver)
RWObj_IShapeReceiver_swigregister = _RWObj.RWObj_IShapeReceiver_swigregister
RWObj_IShapeReceiver_swigregister(RWObj_IShapeReceiver)

class RWObj_Material(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Name = _swig_property(_RWObj.RWObj_Material_Name_get, _RWObj.RWObj_Material_Name_set)
    DiffuseTexture = _swig_property(_RWObj.RWObj_Material_DiffuseTexture_get, _RWObj.RWObj_Material_DiffuseTexture_set)
    SpecularTexture = _swig_property(_RWObj.RWObj_Material_SpecularTexture_get, _RWObj.RWObj_Material_SpecularTexture_set)
    BumpTexture = _swig_property(_RWObj.RWObj_Material_BumpTexture_get, _RWObj.RWObj_Material_BumpTexture_set)
    AmbientColor = _swig_property(_RWObj.RWObj_Material_AmbientColor_get, _RWObj.RWObj_Material_AmbientColor_set)
    DiffuseColor = _swig_property(_RWObj.RWObj_Material_DiffuseColor_get, _RWObj.RWObj_Material_DiffuseColor_set)
    SpecularColor = _swig_property(_RWObj.RWObj_Material_SpecularColor_get, _RWObj.RWObj_Material_SpecularColor_set)
    Shininess = _swig_property(_RWObj.RWObj_Material_Shininess_get, _RWObj.RWObj_Material_Shininess_set)
    Transparency = _swig_property(_RWObj.RWObj_Material_Transparency_get, _RWObj.RWObj_Material_Transparency_set)

    def __init__(self, *args):
        """:rtype: None"""
        _RWObj.RWObj_Material_swiginit(self, _RWObj.new_RWObj_Material(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _RWObj.delete_RWObj_Material
RWObj_Material_swigregister = _RWObj.RWObj_Material_swigregister
RWObj_Material_swigregister(RWObj_Material)

class RWObj_SubMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Object = _swig_property(_RWObj.RWObj_SubMesh_Object_get, _RWObj.RWObj_SubMesh_Object_set)
    Group = _swig_property(_RWObj.RWObj_SubMesh_Group_get, _RWObj.RWObj_SubMesh_Group_set)
    SmoothGroup = _swig_property(_RWObj.RWObj_SubMesh_SmoothGroup_get, _RWObj.RWObj_SubMesh_SmoothGroup_set)
    Material = _swig_property(_RWObj.RWObj_SubMesh_Material_get, _RWObj.RWObj_SubMesh_Material_set)

    __repr__ = _dumps_object


    def __init__(self):
        _RWObj.RWObj_SubMesh_swiginit(self, _RWObj.new_RWObj_SubMesh())
    __swig_destroy__ = _RWObj.delete_RWObj_SubMesh
RWObj_SubMesh_swigregister = _RWObj.RWObj_SubMesh_swigregister
RWObj_SubMesh_swigregister(RWObj_SubMesh)



