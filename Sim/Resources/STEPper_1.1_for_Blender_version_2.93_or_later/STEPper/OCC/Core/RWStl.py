# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
RWStl module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_rwstl.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _RWStl.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStl')
    _RWStl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStl', [dirname(__file__)])
        except ImportError:
            import _RWStl
            return _RWStl
        try:
            _mod = imp.load_module('_RWStl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStl = swig_import_helper()
    del swig_import_helper
else:
    import _RWStl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStl.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_RWStl.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_RWStl.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_RWStl.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_RWStl.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_RWStl.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_RWStl.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_RWStl.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_RWStl.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_RWStl.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_RWStl.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_RWStl.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_RWStl.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_RWStl.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_RWStl.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_RWStl.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_RWStl.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _RWStl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _RWStl.process_exception(error, method_name, class_name)
process_exception = _RWStl.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.OSD
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.Poly
import OCC.Core.gp
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TShort
class rwstl(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ReadAscii(*args) -> "opencascade::handle< Poly_Triangulation >":
        """
        * Read triangulation from an Ascii STL file In case of error, returns Null handle.
        	:param thePath:
        	:type thePath: OSD_Path
        	:param theProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
        	:type theProgInd: Message_ProgressIndicator
        	:rtype: opencascade::handle<Poly_Triangulation>
        """
        return _RWStl.rwstl_ReadAscii(*args)

    ReadAscii = staticmethod(ReadAscii)

    def ReadBinary(*args) -> "opencascade::handle< Poly_Triangulation >":
        """
        * Read triangulation from a binary STL file In case of error, returns Null handle.
        	:param thePath:
        	:type thePath: OSD_Path
        	:param theProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
        	:type theProgInd: Message_ProgressIndicator
        	:rtype: opencascade::handle<Poly_Triangulation>
        """
        return _RWStl.rwstl_ReadBinary(*args)

    ReadBinary = staticmethod(ReadBinary)

    def ReadFile(*args) -> "opencascade::handle< Poly_Triangulation >":
        """
        * Read specified STL file and returns its content as triangulation. In case of error, returns Null handle.
        	:param theFile:
        	:type theFile: OSD_Path
        	:param aProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
        	:type aProgInd: Message_ProgressIndicator
        	:rtype: opencascade::handle<Poly_Triangulation>
        * Read specified STL file and returns its content as triangulation. In case of error, returns Null handle.
        	:param theFile:
        	:type theFile: char *
        	:param aProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
        	:type aProgInd: Message_ProgressIndicator
        	:rtype: opencascade::handle<Poly_Triangulation>
        """
        return _RWStl.rwstl_ReadFile(*args)

    ReadFile = staticmethod(ReadFile)

    def WriteAscii(*args) -> "Standard_Boolean":
        """
        * write the meshing in a file following the Ascii format of an STL file. Returns false if the cannot be opened;
        	:param theMesh:
        	:type theMesh: Poly_Triangulation
        	:param thePath:
        	:type thePath: OSD_Path
        	:param theProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
        	:type theProgInd: Message_ProgressIndicator
        	:rtype: bool
        """
        return _RWStl.rwstl_WriteAscii(*args)

    WriteAscii = staticmethod(WriteAscii)

    def WriteBinary(*args) -> "Standard_Boolean":
        """
        * Write triangulation to binary STL file. binary format of an STL file. Returns false if the cannot be opened;
        	:param theMesh:
        	:type theMesh: Poly_Triangulation
        	:param thePath:
        	:type thePath: OSD_Path
        	:param theProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
        	:type theProgInd: Message_ProgressIndicator
        	:rtype: bool
        """
        return _RWStl.rwstl_WriteBinary(*args)

    WriteBinary = staticmethod(WriteBinary)

    __repr__ = _dumps_object


    def __init__(self):
        _RWStl.rwstl_swiginit(self, _RWStl.new_rwstl())
    __swig_destroy__ = _RWStl.delete_rwstl
rwstl_swigregister = _RWStl.rwstl_swigregister
rwstl_swigregister(rwstl)

def rwstl_ReadAscii(*args) -> "opencascade::handle< Poly_Triangulation >":
    """
    * Read triangulation from an Ascii STL file In case of error, returns Null handle.
    	:param thePath:
    	:type thePath: OSD_Path
    	:param theProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
    	:type theProgInd: Message_ProgressIndicator
    	:rtype: opencascade::handle<Poly_Triangulation>
    """
    return _RWStl.rwstl_ReadAscii(*args)

def rwstl_ReadBinary(*args) -> "opencascade::handle< Poly_Triangulation >":
    """
    * Read triangulation from a binary STL file In case of error, returns Null handle.
    	:param thePath:
    	:type thePath: OSD_Path
    	:param theProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
    	:type theProgInd: Message_ProgressIndicator
    	:rtype: opencascade::handle<Poly_Triangulation>
    """
    return _RWStl.rwstl_ReadBinary(*args)

def rwstl_ReadFile(*args) -> "opencascade::handle< Poly_Triangulation >":
    """
    * Read specified STL file and returns its content as triangulation. In case of error, returns Null handle.
    	:param theFile:
    	:type theFile: OSD_Path
    	:param aProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
    	:type aProgInd: Message_ProgressIndicator
    	:rtype: opencascade::handle<Poly_Triangulation>
    * Read specified STL file and returns its content as triangulation. In case of error, returns Null handle.
    	:param theFile:
    	:type theFile: char *
    	:param aProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
    	:type aProgInd: Message_ProgressIndicator
    	:rtype: opencascade::handle<Poly_Triangulation>
    """
    return _RWStl.rwstl_ReadFile(*args)

def rwstl_WriteAscii(*args) -> "Standard_Boolean":
    """
    * write the meshing in a file following the Ascii format of an STL file. Returns false if the cannot be opened;
    	:param theMesh:
    	:type theMesh: Poly_Triangulation
    	:param thePath:
    	:type thePath: OSD_Path
    	:param theProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
    	:type theProgInd: Message_ProgressIndicator
    	:rtype: bool
    """
    return _RWStl.rwstl_WriteAscii(*args)

def rwstl_WriteBinary(*args) -> "Standard_Boolean":
    """
    * Write triangulation to binary STL file. binary format of an STL file. Returns false if the cannot be opened;
    	:param theMesh:
    	:type theMesh: Poly_Triangulation
    	:param thePath:
    	:type thePath: OSD_Path
    	:param theProgInd: default value is opencascade::handle<Message_ProgressIndicator>()
    	:type theProgInd: Message_ProgressIndicator
    	:rtype: bool
    """
    return _RWStl.rwstl_WriteBinary(*args)



