# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
STEPConstruct module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepconstruct.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _STEPConstruct.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_STEPConstruct')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_STEPConstruct')
    _STEPConstruct = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_STEPConstruct', [dirname(__file__)])
        except ImportError:
            import _STEPConstruct
            return _STEPConstruct
        try:
            _mod = imp.load_module('_STEPConstruct', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _STEPConstruct = swig_import_helper()
    del swig_import_helper
else:
    import _STEPConstruct
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _STEPConstruct.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_STEPConstruct.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_STEPConstruct.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_STEPConstruct.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_STEPConstruct.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_STEPConstruct.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_STEPConstruct.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_STEPConstruct.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_STEPConstruct.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_STEPConstruct.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_STEPConstruct.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_STEPConstruct.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_STEPConstruct.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_STEPConstruct.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_STEPConstruct.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_STEPConstruct.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_STEPConstruct.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _STEPConstruct.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _STEPConstruct.process_exception(error, method_name, class_name)
process_exception = _STEPConstruct.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Transfer
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.StepShape
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.StepAP203
import OCC.Core.XSControl
import OCC.Core.IFSelect
import OCC.Core.TopTools
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.StepVisual
import OCC.Core.Quantity
class STEPConstruct_DataMapOfAsciiStringTransient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_swiginit(self, _STEPConstruct.new_STEPConstruct_DataMapOfAsciiStringTransient(*args))
    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_DataMapOfAsciiStringTransient
STEPConstruct_DataMapOfAsciiStringTransient.begin = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_begin, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.end = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_end, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.cbegin = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_cbegin, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.cend = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_cend, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.Exchange = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Exchange, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.Assign = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Assign, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.Set = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Set, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.ReSize = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_ReSize, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.Bind = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Bind, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.Bound = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Bound, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.IsBound = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_IsBound, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.UnBind = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_UnBind, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.Seek = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Seek, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.Find = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Find, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.ChangeSeek = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_ChangeSeek, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.ChangeFind = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_ChangeFind, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.__call__ = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient___call__, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.Clear = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Clear, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient.Size = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Size, None, STEPConstruct_DataMapOfAsciiStringTransient)
STEPConstruct_DataMapOfAsciiStringTransient_swigregister = _STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_swigregister
STEPConstruct_DataMapOfAsciiStringTransient_swigregister(STEPConstruct_DataMapOfAsciiStringTransient)

class STEPConstruct_DataMapOfPointTransient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STEPConstruct.STEPConstruct_DataMapOfPointTransient_swiginit(self, _STEPConstruct.new_STEPConstruct_DataMapOfPointTransient(*args))
    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_DataMapOfPointTransient
STEPConstruct_DataMapOfPointTransient.begin = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_begin, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.end = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_end, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.cbegin = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_cbegin, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.cend = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_cend, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.Exchange = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Exchange, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.Assign = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Assign, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.Set = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Set, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.ReSize = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_ReSize, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.Bind = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Bind, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.Bound = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Bound, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.IsBound = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_IsBound, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.UnBind = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_UnBind, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.Seek = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Seek, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.Find = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Find, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.ChangeSeek = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_ChangeSeek, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.ChangeFind = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_ChangeFind, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.__call__ = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient___call__, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.Clear = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Clear, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient.Size = new_instancemethod(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Size, None, STEPConstruct_DataMapOfPointTransient)
STEPConstruct_DataMapOfPointTransient_swigregister = _STEPConstruct.STEPConstruct_DataMapOfPointTransient_swigregister
STEPConstruct_DataMapOfPointTransient_swigregister(STEPConstruct_DataMapOfPointTransient)

class stepconstruct(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FindCDSR(*args) -> "Standard_Boolean":
        """
        * Find CDSR correcponding to the component in the specified assembly
        	:param ComponentBinder:
        	:type ComponentBinder: Transfer_Binder
        	:param AssemblySDR:
        	:type AssemblySDR: StepShape_ShapeDefinitionRepresentation
        	:param ComponentCDSR:
        	:type ComponentCDSR: StepShape_ContextDependentShapeRepresentation
        	:rtype: bool
        """
        return _STEPConstruct.stepconstruct_FindCDSR(*args)

    FindCDSR = staticmethod(FindCDSR)

    def FindEntity(*args) -> "opencascade::handle< StepRepr_RepresentationItem >":
        """
        * Returns STEP entity of the (sub)type of RepresentationItem which is a result of the tranalation of the Shape, or Null if no result is recorded
        	:param FinderProcess:
        	:type FinderProcess: Transfer_FinderProcess
        	:param Shape:
        	:type Shape: TopoDS_Shape
        	:rtype: opencascade::handle<StepRepr_RepresentationItem>
        * The same as above, but in the case if item not found, repeats search on the same shape without location. The Loc corresponds to the location with which result is found (either location of the Shape, or Null)
        	:param FinderProcess:
        	:type FinderProcess: Transfer_FinderProcess
        	:param Shape:
        	:type Shape: TopoDS_Shape
        	:param Loc:
        	:type Loc: TopLoc_Location
        	:rtype: opencascade::handle<StepRepr_RepresentationItem>
        """
        return _STEPConstruct.stepconstruct_FindEntity(*args)

    FindEntity = staticmethod(FindEntity)

    def FindShape(*args) -> "TopoDS_Shape":
        """
        * Returns Shape resulting from given STEP entity (Null if not mapped)
        	:param TransientProcess:
        	:type TransientProcess: Transfer_TransientProcess
        	:param item:
        	:type item: StepRepr_RepresentationItem
        	:rtype: TopoDS_Shape
        """
        return _STEPConstruct.stepconstruct_FindShape(*args)

    FindShape = staticmethod(FindShape)

    __repr__ = _dumps_object


    def __init__(self):
        _STEPConstruct.stepconstruct_swiginit(self, _STEPConstruct.new_stepconstruct())
    __swig_destroy__ = _STEPConstruct.delete_stepconstruct
stepconstruct_swigregister = _STEPConstruct.stepconstruct_swigregister
stepconstruct_swigregister(stepconstruct)

def stepconstruct_FindCDSR(*args) -> "Standard_Boolean":
    """
    * Find CDSR correcponding to the component in the specified assembly
    	:param ComponentBinder:
    	:type ComponentBinder: Transfer_Binder
    	:param AssemblySDR:
    	:type AssemblySDR: StepShape_ShapeDefinitionRepresentation
    	:param ComponentCDSR:
    	:type ComponentCDSR: StepShape_ContextDependentShapeRepresentation
    	:rtype: bool
    """
    return _STEPConstruct.stepconstruct_FindCDSR(*args)

def stepconstruct_FindEntity(*args) -> "opencascade::handle< StepRepr_RepresentationItem >":
    """
    * Returns STEP entity of the (sub)type of RepresentationItem which is a result of the tranalation of the Shape, or Null if no result is recorded
    	:param FinderProcess:
    	:type FinderProcess: Transfer_FinderProcess
    	:param Shape:
    	:type Shape: TopoDS_Shape
    	:rtype: opencascade::handle<StepRepr_RepresentationItem>
    * The same as above, but in the case if item not found, repeats search on the same shape without location. The Loc corresponds to the location with which result is found (either location of the Shape, or Null)
    	:param FinderProcess:
    	:type FinderProcess: Transfer_FinderProcess
    	:param Shape:
    	:type Shape: TopoDS_Shape
    	:param Loc:
    	:type Loc: TopLoc_Location
    	:rtype: opencascade::handle<StepRepr_RepresentationItem>
    """
    return _STEPConstruct.stepconstruct_FindEntity(*args)

def stepconstruct_FindShape(*args) -> "TopoDS_Shape":
    """
    * Returns Shape resulting from given STEP entity (Null if not mapped)
    	:param TransientProcess:
    	:type TransientProcess: Transfer_TransientProcess
    	:param item:
    	:type item: StepRepr_RepresentationItem
    	:rtype: TopoDS_Shape
    """
    return _STEPConstruct.stepconstruct_FindShape(*args)

class STEPConstruct_AP203Context(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        * Clears all fields describing entities specific to each part
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_AP203Context_Clear(self, *args)


    def DefaultApproval(self, *args) -> "opencascade::handle< StepBasic_Approval >":
        """
        * Returns default approval entity which is used when no other data are available
        	:rtype: opencascade::handle<StepBasic_Approval>
        """
        return _STEPConstruct.STEPConstruct_AP203Context_DefaultApproval(self, *args)


    def DefaultDateAndTime(self, *args) -> "opencascade::handle< StepBasic_DateAndTime >":
        """
        * Returns default date_and_time entity which is used when no other data are available
        	:rtype: opencascade::handle<StepBasic_DateAndTime>
        """
        return _STEPConstruct.STEPConstruct_AP203Context_DefaultDateAndTime(self, *args)


    def DefaultPersonAndOrganization(self, *args) -> "opencascade::handle< StepBasic_PersonAndOrganization >":
        """
        * Returns default person_and_organization entity which is used when no other data are available
        	:rtype: opencascade::handle<StepBasic_PersonAndOrganization>
        """
        return _STEPConstruct.STEPConstruct_AP203Context_DefaultPersonAndOrganization(self, *args)


    def DefaultSecurityClassificationLevel(self, *args) -> "opencascade::handle< StepBasic_SecurityClassificationLevel >":
        """
        * Returns default security_classification_level entity which is used when no other data are available
        	:rtype: opencascade::handle<StepBasic_SecurityClassificationLevel>
        """
        return _STEPConstruct.STEPConstruct_AP203Context_DefaultSecurityClassificationLevel(self, *args)


    def GetApproval(self, *args) -> "opencascade::handle< StepAP203_CcDesignApproval >":
        """:rtype: opencascade::handle<StepAP203_CcDesignApproval>"""
        return _STEPConstruct.STEPConstruct_AP203Context_GetApproval(self, *args)


    def GetApprovalDateTime(self, *args) -> "opencascade::handle< StepBasic_ApprovalDateTime >":
        """:rtype: opencascade::handle<StepBasic_ApprovalDateTime>"""
        return _STEPConstruct.STEPConstruct_AP203Context_GetApprovalDateTime(self, *args)


    def GetApprover(self, *args) -> "opencascade::handle< StepBasic_ApprovalPersonOrganization >":
        """:rtype: opencascade::handle<StepBasic_ApprovalPersonOrganization>"""
        return _STEPConstruct.STEPConstruct_AP203Context_GetApprover(self, *args)


    def GetClassificationDate(self, *args) -> "opencascade::handle< StepAP203_CcDesignDateAndTimeAssignment >":
        """:rtype: opencascade::handle<StepAP203_CcDesignDateAndTimeAssignment>"""
        return _STEPConstruct.STEPConstruct_AP203Context_GetClassificationDate(self, *args)


    def GetClassificationOfficer(self, *args) -> "opencascade::handle< StepAP203_CcDesignPersonAndOrganizationAssignment >":
        """:rtype: opencascade::handle<StepAP203_CcDesignPersonAndOrganizationAssignment>"""
        return _STEPConstruct.STEPConstruct_AP203Context_GetClassificationOfficer(self, *args)


    def GetCreationDate(self, *args) -> "opencascade::handle< StepAP203_CcDesignDateAndTimeAssignment >":
        """:rtype: opencascade::handle<StepAP203_CcDesignDateAndTimeAssignment>"""
        return _STEPConstruct.STEPConstruct_AP203Context_GetCreationDate(self, *args)


    def GetCreator(self, *args) -> "opencascade::handle< StepAP203_CcDesignPersonAndOrganizationAssignment >":
        """:rtype: opencascade::handle<StepAP203_CcDesignPersonAndOrganizationAssignment>"""
        return _STEPConstruct.STEPConstruct_AP203Context_GetCreator(self, *args)


    def GetDesignOwner(self, *args) -> "opencascade::handle< StepAP203_CcDesignPersonAndOrganizationAssignment >":
        """:rtype: opencascade::handle<StepAP203_CcDesignPersonAndOrganizationAssignment>"""
        return _STEPConstruct.STEPConstruct_AP203Context_GetDesignOwner(self, *args)


    def GetDesignSupplier(self, *args) -> "opencascade::handle< StepAP203_CcDesignPersonAndOrganizationAssignment >":
        """:rtype: opencascade::handle<StepAP203_CcDesignPersonAndOrganizationAssignment>"""
        return _STEPConstruct.STEPConstruct_AP203Context_GetDesignSupplier(self, *args)


    def GetProductCategoryRelationship(self, *args) -> "opencascade::handle< StepBasic_ProductCategoryRelationship >":
        """
        * Return entities (roots) instantiated for the part by method Init
        	:rtype: opencascade::handle<StepBasic_ProductCategoryRelationship>
        """
        return _STEPConstruct.STEPConstruct_AP203Context_GetProductCategoryRelationship(self, *args)


    def GetSecurity(self, *args) -> "opencascade::handle< StepAP203_CcDesignSecurityClassification >":
        """:rtype: opencascade::handle<StepAP203_CcDesignSecurityClassification>"""
        return _STEPConstruct.STEPConstruct_AP203Context_GetSecurity(self, *args)


    def Init(self, *args) -> "void":
        """
        * Takes SDR (part) which brings all standard data around part (common for AP203 and AP214) and creates all the additional entities required for AP203
        	:param sdr:
        	:type sdr: StepShape_ShapeDefinitionRepresentation
        	:rtype: None
        * Takes tool which describes standard data around part (common for AP203 and AP214) and creates all the additional entities required for AP203 //! The created entities can be obtained by calls to methods GetCreator(), GetDesignOwner(), GetDesignSupplier(), GetClassificationOfficer(), GetSecurity(), GetCreationDate(), GetClassificationDate(), GetApproval(), GetApprover(), GetApprovalDateTime(), GetProductCategoryRelationship()
        	:param SDRTool:
        	:type SDRTool: STEPConstruct_Part
        	:rtype: None
        * Takes NAUO which describes assembly link to component and creates the security_classification entity associated to it as required by the AP203 //! Instantiated (or existing previously) entities concerned can be obtained by calls to methods GetClassificationOfficer(), GetSecurity(), GetClassificationDate(), GetApproval(), GetApprover(), GetApprovalDateTime() Takes tool which describes standard data around part (common for AP203 and AP214) and takes from model (or creates if missing) all the additional entities required by AP203
        	:param nauo:
        	:type nauo: StepRepr_NextAssemblyUsageOccurrence
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_AP203Context_Init(self, *args)


    def InitApprovalRequisites(self, *args) -> "void":
        """
        * Initializes Approver and ApprovalDateTime entities according to Approval entity
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_AP203Context_InitApprovalRequisites(self, *args)


    def InitAssembly(self, *args) -> "void":
        """
        * Initializes all missing data which are required for assembly
        	:param nauo:
        	:type nauo: StepRepr_NextAssemblyUsageOccurrence
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_AP203Context_InitAssembly(self, *args)


    def InitRoles(self, *args) -> "void":
        """
        * Initializes constant fields (shared entities)
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_AP203Context_InitRoles(self, *args)


    def InitSecurityRequisites(self, *args) -> "void":
        """
        * Initializes ClassificationOfficer and ClassificationDate entities according to Security entity
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_AP203Context_InitSecurityRequisites(self, *args)


    def RoleApprover(self, *args) -> "opencascade::handle< StepBasic_ApprovalRole >":
        """
        * Return predefined PersonAndOrganizationRole and DateTimeRole entities named 'creator', 'design owner', 'design supplier', 'classification officer', 'creation date', 'classification date', 'approver'
        	:rtype: opencascade::handle<StepBasic_ApprovalRole>
        """
        return _STEPConstruct.STEPConstruct_AP203Context_RoleApprover(self, *args)


    def RoleClassificationDate(self, *args) -> "opencascade::handle< StepBasic_DateTimeRole >":
        """:rtype: opencascade::handle<StepBasic_DateTimeRole>"""
        return _STEPConstruct.STEPConstruct_AP203Context_RoleClassificationDate(self, *args)


    def RoleClassificationOfficer(self, *args) -> "opencascade::handle< StepBasic_PersonAndOrganizationRole >":
        """:rtype: opencascade::handle<StepBasic_PersonAndOrganizationRole>"""
        return _STEPConstruct.STEPConstruct_AP203Context_RoleClassificationOfficer(self, *args)


    def RoleCreationDate(self, *args) -> "opencascade::handle< StepBasic_DateTimeRole >":
        """:rtype: opencascade::handle<StepBasic_DateTimeRole>"""
        return _STEPConstruct.STEPConstruct_AP203Context_RoleCreationDate(self, *args)


    def RoleCreator(self, *args) -> "opencascade::handle< StepBasic_PersonAndOrganizationRole >":
        """:rtype: opencascade::handle<StepBasic_PersonAndOrganizationRole>"""
        return _STEPConstruct.STEPConstruct_AP203Context_RoleCreator(self, *args)


    def RoleDesignOwner(self, *args) -> "opencascade::handle< StepBasic_PersonAndOrganizationRole >":
        """:rtype: opencascade::handle<StepBasic_PersonAndOrganizationRole>"""
        return _STEPConstruct.STEPConstruct_AP203Context_RoleDesignOwner(self, *args)


    def RoleDesignSupplier(self, *args) -> "opencascade::handle< StepBasic_PersonAndOrganizationRole >":
        """:rtype: opencascade::handle<StepBasic_PersonAndOrganizationRole>"""
        return _STEPConstruct.STEPConstruct_AP203Context_RoleDesignSupplier(self, *args)


    def __init__(self, *args):
        """
        * Creates tool and fills constant fields
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_AP203Context_swiginit(self, _STEPConstruct.new_STEPConstruct_AP203Context(*args))

    def SetDefaultApproval(self, *args) -> "void":
        """
        * Sets default approval
        	:param app:
        	:type app: StepBasic_Approval
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_AP203Context_SetDefaultApproval(self, *args)


    def SetDefaultDateAndTime(self, *args) -> "void":
        """
        * Sets default date_and_time entity
        	:param dt:
        	:type dt: StepBasic_DateAndTime
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_AP203Context_SetDefaultDateAndTime(self, *args)


    def SetDefaultPersonAndOrganization(self, *args) -> "void":
        """
        * Sets default person_and_organization entity
        	:param po:
        	:type po: StepBasic_PersonAndOrganization
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_AP203Context_SetDefaultPersonAndOrganization(self, *args)


    def SetDefaultSecurityClassificationLevel(self, *args) -> "void":
        """
        * Sets default security_classification_level
        	:param sc:
        	:type sc: StepBasic_SecurityClassificationLevel
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_AP203Context_SetDefaultSecurityClassificationLevel(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_AP203Context
STEPConstruct_AP203Context.Clear = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_Clear, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.DefaultApproval = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_DefaultApproval, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.DefaultDateAndTime = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_DefaultDateAndTime, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.DefaultPersonAndOrganization = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_DefaultPersonAndOrganization, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.DefaultSecurityClassificationLevel = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_DefaultSecurityClassificationLevel, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.GetApproval = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_GetApproval, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.GetApprovalDateTime = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_GetApprovalDateTime, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.GetApprover = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_GetApprover, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.GetClassificationDate = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_GetClassificationDate, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.GetClassificationOfficer = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_GetClassificationOfficer, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.GetCreationDate = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_GetCreationDate, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.GetCreator = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_GetCreator, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.GetDesignOwner = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_GetDesignOwner, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.GetDesignSupplier = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_GetDesignSupplier, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.GetProductCategoryRelationship = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_GetProductCategoryRelationship, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.GetSecurity = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_GetSecurity, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.Init = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_Init, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.InitApprovalRequisites = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_InitApprovalRequisites, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.InitAssembly = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_InitAssembly, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.InitRoles = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_InitRoles, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.InitSecurityRequisites = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_InitSecurityRequisites, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.RoleApprover = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_RoleApprover, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.RoleClassificationDate = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_RoleClassificationDate, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.RoleClassificationOfficer = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_RoleClassificationOfficer, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.RoleCreationDate = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_RoleCreationDate, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.RoleCreator = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_RoleCreator, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.RoleDesignOwner = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_RoleDesignOwner, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.RoleDesignSupplier = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_RoleDesignSupplier, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.SetDefaultApproval = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_SetDefaultApproval, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.SetDefaultDateAndTime = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_SetDefaultDateAndTime, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.SetDefaultPersonAndOrganization = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_SetDefaultPersonAndOrganization, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context.SetDefaultSecurityClassificationLevel = new_instancemethod(_STEPConstruct.STEPConstruct_AP203Context_SetDefaultSecurityClassificationLevel, None, STEPConstruct_AP203Context)
STEPConstruct_AP203Context_swigregister = _STEPConstruct.STEPConstruct_AP203Context_swigregister
STEPConstruct_AP203Context_swigregister(STEPConstruct_AP203Context)

class STEPConstruct_Assembly(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CheckSRRReversesNAUO(*args) -> "Standard_Boolean":
        """
        * Checks whether SRR's definition of assembly and component contradicts with NAUO definition or not, according to model schema (AP214 or AP203)
        	:param theGraph:
        	:type theGraph: Interface_Graph
        	:param CDSR:
        	:type CDSR: StepShape_ContextDependentShapeRepresentation
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_Assembly_CheckSRRReversesNAUO(*args)

    CheckSRRReversesNAUO = staticmethod(CheckSRRReversesNAUO)

    def GetNAUO(self, *args) -> "opencascade::handle< StepRepr_NextAssemblyUsageOccurrence >":
        """
        * Returns NAUO object describing the assembly link
        	:rtype: opencascade::handle<StepRepr_NextAssemblyUsageOccurrence>
        """
        return _STEPConstruct.STEPConstruct_Assembly_GetNAUO(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initialises with starting values Ax0 : origin axis (typically, standard XYZ) Loc : location to which place the item Makes a MappedItem Resulting Value is returned by ItemValue
        	:param aSR:
        	:type aSR: StepShape_ShapeDefinitionRepresentation
        	:param SDR0:
        	:type SDR0: StepShape_ShapeDefinitionRepresentation
        	:param Ax0:
        	:type Ax0: StepGeom_Axis2Placement3d
        	:param Loc:
        	:type Loc: StepGeom_Axis2Placement3d
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Assembly_Init(self, *args)


    def ItemLocation(self, *args) -> "opencascade::handle< StepGeom_Axis2Placement3d >":
        """
        * Returns the location of the item, computed from starting aLoc
        	:rtype: opencascade::handle<StepGeom_Axis2Placement3d>
        """
        return _STEPConstruct.STEPConstruct_Assembly_ItemLocation(self, *args)


    def ItemValue(self, *args) -> "opencascade::handle< Standard_Transient >":
        """
        * Returns the Value If no Make... has been called, returns the starting SR
        	:rtype: opencascade::handle<Standard_Transient>
        """
        return _STEPConstruct.STEPConstruct_Assembly_ItemValue(self, *args)


    def MakeRelationship(self, *args) -> "void":
        """
        * Make a (ShapeRepresentationRelationship,...WithTransformation) Resulting Value is returned by ItemValue
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Assembly_MakeRelationship(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _STEPConstruct.STEPConstruct_Assembly_swiginit(self, _STEPConstruct.new_STEPConstruct_Assembly(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_Assembly
STEPConstruct_Assembly.GetNAUO = new_instancemethod(_STEPConstruct.STEPConstruct_Assembly_GetNAUO, None, STEPConstruct_Assembly)
STEPConstruct_Assembly.Init = new_instancemethod(_STEPConstruct.STEPConstruct_Assembly_Init, None, STEPConstruct_Assembly)
STEPConstruct_Assembly.ItemLocation = new_instancemethod(_STEPConstruct.STEPConstruct_Assembly_ItemLocation, None, STEPConstruct_Assembly)
STEPConstruct_Assembly.ItemValue = new_instancemethod(_STEPConstruct.STEPConstruct_Assembly_ItemValue, None, STEPConstruct_Assembly)
STEPConstruct_Assembly.MakeRelationship = new_instancemethod(_STEPConstruct.STEPConstruct_Assembly_MakeRelationship, None, STEPConstruct_Assembly)
STEPConstruct_Assembly_swigregister = _STEPConstruct.STEPConstruct_Assembly_swigregister
STEPConstruct_Assembly_swigregister(STEPConstruct_Assembly)

def STEPConstruct_Assembly_CheckSRRReversesNAUO(*args) -> "Standard_Boolean":
    """
    * Checks whether SRR's definition of assembly and component contradicts with NAUO definition or not, according to model schema (AP214 or AP203)
    	:param theGraph:
    	:type theGraph: Interface_Graph
    	:param CDSR:
    	:type CDSR: StepShape_ContextDependentShapeRepresentation
    	:rtype: bool
    """
    return _STEPConstruct.STEPConstruct_Assembly_CheckSRRReversesNAUO(*args)

class STEPConstruct_ContextTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AP203Context(self, *args) -> "STEPConstruct_AP203Context &":
        """
        * Returns tool which maintains context specific for AP203
        	:rtype: STEPConstruct_AP203Context
        """
        return _STEPConstruct.STEPConstruct_ContextTool_AP203Context(self, *args)


    def AddAPD(self, *args) -> "void":
        """
        :param enforce: default value is Standard_False
        	:type enforce: bool
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ContextTool_AddAPD(self, *args)


    def GetACname(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_ContextTool_GetACname(self, *args)


    def GetACschemaName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_ContextTool_GetACschemaName(self, *args)


    def GetACstatus(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_ContextTool_GetACstatus(self, *args)


    def GetACyear(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _STEPConstruct.STEPConstruct_ContextTool_GetACyear(self, *args)


    def GetAPD(self, *args) -> "opencascade::handle< StepBasic_ApplicationProtocolDefinition >":
        """:rtype: opencascade::handle<StepBasic_ApplicationProtocolDefinition>"""
        return _STEPConstruct.STEPConstruct_ContextTool_GetAPD(self, *args)


    def GetDefaultAxis(self, *args) -> "opencascade::handle< StepGeom_Axis2Placement3d >":
        """
        * Returns a default axis placement
        	:rtype: opencascade::handle<StepGeom_Axis2Placement3d>
        """
        return _STEPConstruct.STEPConstruct_ContextTool_GetDefaultAxis(self, *args)


    def GetProductName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Generates a product name basing on write.step.product.name parameter and current position in the assembly structure
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _STEPConstruct.STEPConstruct_ContextTool_GetProductName(self, *args)


    def GetRootsForAssemblyLink(self, *args) -> "opencascade::handle< TColStd_HSequenceOfTransient >":
        """
        * Produces and returns a full list of root entities required for assembly link identified by assembly (including NAUO and CDSR)
        	:param assembly:
        	:type assembly: STEPConstruct_Assembly
        	:rtype: opencascade::handle<TColStd_HSequenceOfTransient>
        """
        return _STEPConstruct.STEPConstruct_ContextTool_GetRootsForAssemblyLink(self, *args)


    def GetRootsForPart(self, *args) -> "opencascade::handle< TColStd_HSequenceOfTransient >":
        """
        * Produces and returns a full list of root entities required for part identified by SDRTool (including SDR itself)
        	:param SDRTool:
        	:type SDRTool: STEPConstruct_Part
        	:rtype: opencascade::handle<TColStd_HSequenceOfTransient>
        """
        return _STEPConstruct.STEPConstruct_ContextTool_GetRootsForPart(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns current index of assembly component on current level
        	:rtype: int
        """
        return _STEPConstruct.STEPConstruct_ContextTool_Index(self, *args)


    def IsAP203(self, *args) -> "Standard_Boolean":
        """
        * Returns True if APD.schema_name is config_control_design
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ContextTool_IsAP203(self, *args)


    def IsAP214(self, *args) -> "Standard_Boolean":
        """
        * Returns True if APD.schema_name is automotive_design
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ContextTool_IsAP214(self, *args)


    def IsAP242(self, *args) -> "Standard_Boolean":
        """
        * Returns True if APD.schema_name is ap242_managed_model_based_3d_engineering
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ContextTool_IsAP242(self, *args)


    def Level(self, *args) -> "Standard_Integer":
        """
        * Returns current assembly level
        	:rtype: int
        """
        return _STEPConstruct.STEPConstruct_ContextTool_Level(self, *args)


    def NextIndex(self, *args) -> "void":
        """:rtype: None"""
        return _STEPConstruct.STEPConstruct_ContextTool_NextIndex(self, *args)


    def NextLevel(self, *args) -> "void":
        """:rtype: None"""
        return _STEPConstruct.STEPConstruct_ContextTool_NextLevel(self, *args)


    def PrevIndex(self, *args) -> "void":
        """:rtype: None"""
        return _STEPConstruct.STEPConstruct_ContextTool_PrevIndex(self, *args)


    def PrevLevel(self, *args) -> "void":
        """:rtype: None"""
        return _STEPConstruct.STEPConstruct_ContextTool_PrevLevel(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param aStepModel:
        	:type aStepModel: StepData_StepModel
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_ContextTool_swiginit(self, _STEPConstruct.new_STEPConstruct_ContextTool(*args))

    def SetACname(self, *args) -> "void":
        """
        :param name:
        	:type name: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ContextTool_SetACname(self, *args)


    def SetACschemaName(self, *args) -> "void":
        """
        :param schemaName:
        	:type schemaName: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ContextTool_SetACschemaName(self, *args)


    def SetACstatus(self, *args) -> "void":
        """
        :param status:
        	:type status: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ContextTool_SetACstatus(self, *args)


    def SetACyear(self, *args) -> "void":
        """
        :param year:
        	:type year: int
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ContextTool_SetACyear(self, *args)


    def SetIndex(self, *args) -> "void":
        """
        * Changes current index of assembly component on current level
        	:param ind:
        	:type ind: int
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ContextTool_SetIndex(self, *args)


    def SetLevel(self, *args) -> "void":
        """
        * Changes current assembly level
        	:param lev:
        	:type lev: int
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ContextTool_SetLevel(self, *args)


    def SetModel(self, *args) -> "void":
        """
        * Initialize ApplicationProtocolDefinition by the first entity of that type found in the model
        	:param aStepModel:
        	:type aStepModel: StepData_StepModel
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ContextTool_SetModel(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_ContextTool
STEPConstruct_ContextTool.AP203Context = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_AP203Context, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.AddAPD = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_AddAPD, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.GetACname = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_GetACname, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.GetACschemaName = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_GetACschemaName, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.GetACstatus = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_GetACstatus, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.GetACyear = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_GetACyear, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.GetAPD = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_GetAPD, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.GetDefaultAxis = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_GetDefaultAxis, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.GetProductName = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_GetProductName, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.GetRootsForAssemblyLink = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_GetRootsForAssemblyLink, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.GetRootsForPart = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_GetRootsForPart, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.Index = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_Index, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.IsAP203 = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_IsAP203, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.IsAP214 = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_IsAP214, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.IsAP242 = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_IsAP242, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.Level = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_Level, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.NextIndex = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_NextIndex, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.NextLevel = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_NextLevel, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.PrevIndex = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_PrevIndex, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.PrevLevel = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_PrevLevel, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.SetACname = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_SetACname, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.SetACschemaName = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_SetACschemaName, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.SetACstatus = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_SetACstatus, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.SetACyear = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_SetACyear, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.SetIndex = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_SetIndex, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.SetLevel = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_SetLevel, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool.SetModel = new_instancemethod(_STEPConstruct.STEPConstruct_ContextTool_SetModel, None, STEPConstruct_ContextTool)
STEPConstruct_ContextTool_swigregister = _STEPConstruct.STEPConstruct_ContextTool_swigregister
STEPConstruct_ContextTool_swigregister(STEPConstruct_ContextTool)

class STEPConstruct_Part(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AC(self, *args) -> "opencascade::handle< StepBasic_ApplicationContext >":
        """:rtype: opencascade::handle<StepBasic_ApplicationContext>"""
        return _STEPConstruct.STEPConstruct_Part_AC(self, *args)


    def ACapplication(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_ACapplication(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _STEPConstruct.STEPConstruct_Part_IsDone(self, *args)


    def MakeSDR(self, *args) -> "void":
        """
        :param aShape:
        	:type aShape: StepShape_ShapeRepresentation
        	:param aName:
        	:type aName: TCollection_HAsciiString
        	:param AC:
        	:type AC: StepBasic_ApplicationContext
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_MakeSDR(self, *args)


    def PC(self, *args) -> "opencascade::handle< StepBasic_ProductContext >":
        """:rtype: opencascade::handle<StepBasic_ProductContext>"""
        return _STEPConstruct.STEPConstruct_Part_PC(self, *args)


    def PCdisciplineType(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_PCdisciplineType(self, *args)


    def PCname(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_PCname(self, *args)


    def PD(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition >":
        """:rtype: opencascade::handle<StepBasic_ProductDefinition>"""
        return _STEPConstruct.STEPConstruct_Part_PD(self, *args)


    def PDC(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionContext >":
        """:rtype: opencascade::handle<StepBasic_ProductDefinitionContext>"""
        return _STEPConstruct.STEPConstruct_Part_PDC(self, *args)


    def PDCname(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_PDCname(self, *args)


    def PDCstage(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_PDCstage(self, *args)


    def PDF(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """:rtype: opencascade::handle<StepBasic_ProductDefinitionFormation>"""
        return _STEPConstruct.STEPConstruct_Part_PDF(self, *args)


    def PDFdescription(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_PDFdescription(self, *args)


    def PDFid(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_PDFid(self, *args)


    def PDS(self, *args) -> "opencascade::handle< StepRepr_ProductDefinitionShape >":
        """:rtype: opencascade::handle<StepRepr_ProductDefinitionShape>"""
        return _STEPConstruct.STEPConstruct_Part_PDS(self, *args)


    def PDSdescription(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_PDSdescription(self, *args)


    def PDSname(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_PDSname(self, *args)


    def PDdescription(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_PDdescription(self, *args)


    def PRPC(self, *args) -> "opencascade::handle< StepBasic_ProductRelatedProductCategory >":
        """:rtype: opencascade::handle<StepBasic_ProductRelatedProductCategory>"""
        return _STEPConstruct.STEPConstruct_Part_PRPC(self, *args)


    def PRPCdescription(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_PRPCdescription(self, *args)


    def PRPCname(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_PRPCname(self, *args)


    def Pdescription(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_Pdescription(self, *args)


    def Pid(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_Pid(self, *args)


    def Pname(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _STEPConstruct.STEPConstruct_Part_Pname(self, *args)


    def Product(self, *args) -> "opencascade::handle< StepBasic_Product >":
        """:rtype: opencascade::handle<StepBasic_Product>"""
        return _STEPConstruct.STEPConstruct_Part_Product(self, *args)


    def ReadSDR(self, *args) -> "void":
        """
        :param aShape:
        	:type aShape: StepShape_ShapeDefinitionRepresentation
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_ReadSDR(self, *args)


    def SDRValue(self, *args) -> "opencascade::handle< StepShape_ShapeDefinitionRepresentation >":
        """
        * Returns SDR or Null if not done
        	:rtype: opencascade::handle<StepShape_ShapeDefinitionRepresentation>
        """
        return _STEPConstruct.STEPConstruct_Part_SDRValue(self, *args)


    def SRValue(self, *args) -> "opencascade::handle< StepShape_ShapeRepresentation >":
        """
        * Returns SDR->UsedRepresentation() or Null if not done
        	:rtype: opencascade::handle<StepShape_ShapeRepresentation>
        """
        return _STEPConstruct.STEPConstruct_Part_SRValue(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _STEPConstruct.STEPConstruct_Part_swiginit(self, _STEPConstruct.new_STEPConstruct_Part(*args))

    def SetACapplication(self, *args) -> "void":
        """
        :param text:
        	:type text: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetACapplication(self, *args)


    def SetPCdisciplineType(self, *args) -> "void":
        """
        :param label:
        	:type label: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPCdisciplineType(self, *args)


    def SetPCname(self, *args) -> "void":
        """
        :param name:
        	:type name: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPCname(self, *args)


    def SetPDCname(self, *args) -> "void":
        """
        :param label:
        	:type label: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPDCname(self, *args)


    def SetPDCstage(self, *args) -> "void":
        """
        :param label:
        	:type label: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPDCstage(self, *args)


    def SetPDFdescription(self, *args) -> "void":
        """
        :param text:
        	:type text: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPDFdescription(self, *args)


    def SetPDFid(self, *args) -> "void":
        """
        :param id:
        	:type id: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPDFid(self, *args)


    def SetPDSdescription(self, *args) -> "void":
        """
        :param text:
        	:type text: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPDSdescription(self, *args)


    def SetPDSname(self, *args) -> "void":
        """
        :param label:
        	:type label: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPDSname(self, *args)


    def SetPDdescription(self, *args) -> "void":
        """
        :param text:
        	:type text: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPDdescription(self, *args)


    def SetPRPCdescription(self, *args) -> "void":
        """
        :param text:
        	:type text: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPRPCdescription(self, *args)


    def SetPRPCname(self, *args) -> "void":
        """
        :param label:
        	:type label: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPRPCname(self, *args)


    def SetPdescription(self, *args) -> "void":
        """
        :param text:
        	:type text: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPdescription(self, *args)


    def SetPid(self, *args) -> "void":
        """
        :param id:
        	:type id: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPid(self, *args)


    def SetPname(self, *args) -> "void":
        """
        :param label:
        	:type label: TCollection_HAsciiString
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Part_SetPname(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_Part
STEPConstruct_Part.AC = new_instancemethod(_STEPConstruct.STEPConstruct_Part_AC, None, STEPConstruct_Part)
STEPConstruct_Part.ACapplication = new_instancemethod(_STEPConstruct.STEPConstruct_Part_ACapplication, None, STEPConstruct_Part)
STEPConstruct_Part.IsDone = new_instancemethod(_STEPConstruct.STEPConstruct_Part_IsDone, None, STEPConstruct_Part)
STEPConstruct_Part.MakeSDR = new_instancemethod(_STEPConstruct.STEPConstruct_Part_MakeSDR, None, STEPConstruct_Part)
STEPConstruct_Part.PC = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PC, None, STEPConstruct_Part)
STEPConstruct_Part.PCdisciplineType = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PCdisciplineType, None, STEPConstruct_Part)
STEPConstruct_Part.PCname = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PCname, None, STEPConstruct_Part)
STEPConstruct_Part.PD = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PD, None, STEPConstruct_Part)
STEPConstruct_Part.PDC = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PDC, None, STEPConstruct_Part)
STEPConstruct_Part.PDCname = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PDCname, None, STEPConstruct_Part)
STEPConstruct_Part.PDCstage = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PDCstage, None, STEPConstruct_Part)
STEPConstruct_Part.PDF = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PDF, None, STEPConstruct_Part)
STEPConstruct_Part.PDFdescription = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PDFdescription, None, STEPConstruct_Part)
STEPConstruct_Part.PDFid = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PDFid, None, STEPConstruct_Part)
STEPConstruct_Part.PDS = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PDS, None, STEPConstruct_Part)
STEPConstruct_Part.PDSdescription = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PDSdescription, None, STEPConstruct_Part)
STEPConstruct_Part.PDSname = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PDSname, None, STEPConstruct_Part)
STEPConstruct_Part.PDdescription = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PDdescription, None, STEPConstruct_Part)
STEPConstruct_Part.PRPC = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PRPC, None, STEPConstruct_Part)
STEPConstruct_Part.PRPCdescription = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PRPCdescription, None, STEPConstruct_Part)
STEPConstruct_Part.PRPCname = new_instancemethod(_STEPConstruct.STEPConstruct_Part_PRPCname, None, STEPConstruct_Part)
STEPConstruct_Part.Pdescription = new_instancemethod(_STEPConstruct.STEPConstruct_Part_Pdescription, None, STEPConstruct_Part)
STEPConstruct_Part.Pid = new_instancemethod(_STEPConstruct.STEPConstruct_Part_Pid, None, STEPConstruct_Part)
STEPConstruct_Part.Pname = new_instancemethod(_STEPConstruct.STEPConstruct_Part_Pname, None, STEPConstruct_Part)
STEPConstruct_Part.Product = new_instancemethod(_STEPConstruct.STEPConstruct_Part_Product, None, STEPConstruct_Part)
STEPConstruct_Part.ReadSDR = new_instancemethod(_STEPConstruct.STEPConstruct_Part_ReadSDR, None, STEPConstruct_Part)
STEPConstruct_Part.SDRValue = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SDRValue, None, STEPConstruct_Part)
STEPConstruct_Part.SRValue = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SRValue, None, STEPConstruct_Part)
STEPConstruct_Part.SetACapplication = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetACapplication, None, STEPConstruct_Part)
STEPConstruct_Part.SetPCdisciplineType = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPCdisciplineType, None, STEPConstruct_Part)
STEPConstruct_Part.SetPCname = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPCname, None, STEPConstruct_Part)
STEPConstruct_Part.SetPDCname = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPDCname, None, STEPConstruct_Part)
STEPConstruct_Part.SetPDCstage = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPDCstage, None, STEPConstruct_Part)
STEPConstruct_Part.SetPDFdescription = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPDFdescription, None, STEPConstruct_Part)
STEPConstruct_Part.SetPDFid = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPDFid, None, STEPConstruct_Part)
STEPConstruct_Part.SetPDSdescription = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPDSdescription, None, STEPConstruct_Part)
STEPConstruct_Part.SetPDSname = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPDSname, None, STEPConstruct_Part)
STEPConstruct_Part.SetPDdescription = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPDdescription, None, STEPConstruct_Part)
STEPConstruct_Part.SetPRPCdescription = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPRPCdescription, None, STEPConstruct_Part)
STEPConstruct_Part.SetPRPCname = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPRPCname, None, STEPConstruct_Part)
STEPConstruct_Part.SetPdescription = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPdescription, None, STEPConstruct_Part)
STEPConstruct_Part.SetPid = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPid, None, STEPConstruct_Part)
STEPConstruct_Part.SetPname = new_instancemethod(_STEPConstruct.STEPConstruct_Part_SetPname, None, STEPConstruct_Part)
STEPConstruct_Part_swigregister = _STEPConstruct.STEPConstruct_Part_swigregister
STEPConstruct_Part_swigregister(STEPConstruct_Part)

class STEPConstruct_PointHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        * Computes a hash code for the point, in the range [1, theUpperBound] @param thePoint the point which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _STEPConstruct.STEPConstruct_PointHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.
        	:param Point1:
        	:type Point1: gp_Pnt
        	:param Point2:
        	:type Point2: gp_Pnt
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_PointHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _STEPConstruct.STEPConstruct_PointHasher_swiginit(self, _STEPConstruct.new_STEPConstruct_PointHasher())
    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_PointHasher
STEPConstruct_PointHasher_swigregister = _STEPConstruct.STEPConstruct_PointHasher_swigregister
STEPConstruct_PointHasher_swigregister(STEPConstruct_PointHasher)

def STEPConstruct_PointHasher_HashCode(*args) -> "Standard_Integer":
    """
    * Computes a hash code for the point, in the range [1, theUpperBound] @param thePoint the point which hash code is to be computed @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
    	:param thePoint:
    	:type thePoint: gp_Pnt
    	:param theUpperBound:
    	:type theUpperBound: int
    	:rtype: int
    """
    return _STEPConstruct.STEPConstruct_PointHasher_HashCode(*args)

def STEPConstruct_PointHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    * Returns True when the two keys are the same. Two same keys must have the same hashcode, the contrary is not necessary.
    	:param Point1:
    	:type Point1: gp_Pnt
    	:param Point2:
    	:type Point2: gp_Pnt
    	:rtype: bool
    """
    return _STEPConstruct.STEPConstruct_PointHasher_IsEqual(*args)

class STEPConstruct_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FinderProcess(self, *args) -> "opencascade::handle< Transfer_FinderProcess > const &":
        """
        * Returns FinderProcess (writing; Null if not loaded)
        	:rtype: opencascade::handle<Transfer_FinderProcess>
        """
        return _STEPConstruct.STEPConstruct_Tool_FinderProcess(self, *args)


    def Graph(self, *args) -> "Interface_Graph const &":
        """
        * Returns current graph (recomputing if necessary)
        	:param recompute: default value is Standard_False
        	:type recompute: bool
        	:rtype: Interface_Graph
        """
        return _STEPConstruct.STEPConstruct_Tool_Graph(self, *args)


    def Model(self, *args) -> "opencascade::handle< Interface_InterfaceModel >":
        """
        * Returns current model (Null if not loaded)
        	:rtype: opencascade::handle<Interface_InterfaceModel>
        """
        return _STEPConstruct.STEPConstruct_Tool_Model(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty tool
        	:rtype: None
        * Creates a tool and loads it with worksession
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_Tool_swiginit(self, _STEPConstruct.new_STEPConstruct_Tool(*args))

    def TransientProcess(self, *args) -> "opencascade::handle< Transfer_TransientProcess > const &":
        """
        * Returns TransientProcess (reading; Null if not loaded)
        	:rtype: opencascade::handle<Transfer_TransientProcess>
        """
        return _STEPConstruct.STEPConstruct_Tool_TransientProcess(self, *args)


    def WS(self, *args) -> "opencascade::handle< XSControl_WorkSession > const &":
        """
        * Returns currently loaded WorkSession
        	:rtype: opencascade::handle<XSControl_WorkSession>
        """
        return _STEPConstruct.STEPConstruct_Tool_WS(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_Tool
STEPConstruct_Tool.FinderProcess = new_instancemethod(_STEPConstruct.STEPConstruct_Tool_FinderProcess, None, STEPConstruct_Tool)
STEPConstruct_Tool.Graph = new_instancemethod(_STEPConstruct.STEPConstruct_Tool_Graph, None, STEPConstruct_Tool)
STEPConstruct_Tool.Model = new_instancemethod(_STEPConstruct.STEPConstruct_Tool_Model, None, STEPConstruct_Tool)
STEPConstruct_Tool.TransientProcess = new_instancemethod(_STEPConstruct.STEPConstruct_Tool_TransientProcess, None, STEPConstruct_Tool)
STEPConstruct_Tool.WS = new_instancemethod(_STEPConstruct.STEPConstruct_Tool_WS, None, STEPConstruct_Tool)
STEPConstruct_Tool_swigregister = _STEPConstruct.STEPConstruct_Tool_swigregister
STEPConstruct_Tool_swigregister(STEPConstruct_Tool)

class STEPConstruct_UnitContext(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AreaDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if areaFactor is computed
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_UnitContext_AreaDone(self, *args)


    def AreaFactor(self, *args) -> "Standard_Real":
        """
        * Returns the areaFactor
        	:rtype: float
        """
        return _STEPConstruct.STEPConstruct_UnitContext_AreaFactor(self, *args)


    def ComputeFactors(self, *args) -> "Standard_Integer":
        """
        * Computes the length, plane angle and solid angle conversion factor . Returns a status, 0 if OK
        	:param aContext:
        	:type aContext: StepRepr_GlobalUnitAssignedContext
        	:rtype: int
        :param aUnit:
        	:type aUnit: StepBasic_NamedUnit
        	:rtype: int
        """
        return _STEPConstruct.STEPConstruct_UnitContext_ComputeFactors(self, *args)


    def ComputeTolerance(self, *args) -> "Standard_Integer":
        """
        * Computes the uncertainty value (for length)
        	:param aContext:
        	:type aContext: StepRepr_GlobalUncertaintyAssignedContext
        	:rtype: int
        """
        return _STEPConstruct.STEPConstruct_UnitContext_ComputeTolerance(self, *args)


    def ConvertSiPrefix(*args) -> "Standard_Real":
        """
        * Convert SI prefix defined by enumertaion to corresponding real factor (e.g. 1e6 for mega)
        	:param aPrefix:
        	:type aPrefix: StepBasic_SiPrefix
        	:rtype: float
        """
        return _STEPConstruct.STEPConstruct_UnitContext_ConvertSiPrefix(*args)

    ConvertSiPrefix = staticmethod(ConvertSiPrefix)

    def HasUncertainty(self, *args) -> "Standard_Boolean":
        """
        * Tells if a Uncertainty (for length) is recorded
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_UnitContext_HasUncertainty(self, *args)


    def Init(self, *args) -> "void":
        """
        * Creates new context (units are MM and radians, uncertainty equal to Tol3d)
        	:param Tol3d:
        	:type Tol3d: float
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_UnitContext_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if Init was called successfully
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_UnitContext_IsDone(self, *args)


    def LengthDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if ComputeFactors has calculated a LengthFactor
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_UnitContext_LengthDone(self, *args)


    def LengthFactor(self, *args) -> "Standard_Real":
        """
        * Returns the lengthFactor
        	:rtype: float
        """
        return _STEPConstruct.STEPConstruct_UnitContext_LengthFactor(self, *args)


    def PlaneAngleDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if ComputeFactors has calculated a PlaneAngleFactor
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_UnitContext_PlaneAngleDone(self, *args)


    def PlaneAngleFactor(self, *args) -> "Standard_Real":
        """
        * Returns the planeAngleFactor
        	:rtype: float
        """
        return _STEPConstruct.STEPConstruct_UnitContext_PlaneAngleFactor(self, *args)


    def __init__(self, *args):
        """
        * Creates empty tool
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_UnitContext_swiginit(self, _STEPConstruct.new_STEPConstruct_UnitContext(*args))

    def SolidAngleDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if ComputeFactors has calculated a SolidAngleFactor
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_UnitContext_SolidAngleDone(self, *args)


    def SolidAngleFactor(self, *args) -> "Standard_Real":
        """
        * Returns the solidAngleFactor
        	:rtype: float
        """
        return _STEPConstruct.STEPConstruct_UnitContext_SolidAngleFactor(self, *args)


    def StatusMessage(self, *args) -> "char const *":
        """
        * Returns a message for a given status (0 - empty) This message can then be added as warning for transfer
        	:param status:
        	:type status: int
        	:rtype: char *
        """
        return _STEPConstruct.STEPConstruct_UnitContext_StatusMessage(self, *args)


    def Uncertainty(self, *args) -> "Standard_Real":
        """
        * Returns the Uncertainty value (for length) It has been converted with LengthFactor
        	:rtype: float
        """
        return _STEPConstruct.STEPConstruct_UnitContext_Uncertainty(self, *args)


    def Value(self, *args) -> "opencascade::handle< StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx >":
        """
        * Returns context (or Null if not done)
        	:rtype: opencascade::handle<StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx>
        """
        return _STEPConstruct.STEPConstruct_UnitContext_Value(self, *args)


    def VolumeDone(self, *args) -> "Standard_Boolean":
        """
        * Returns true if volumeFactor is computed
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_UnitContext_VolumeDone(self, *args)


    def VolumeFactor(self, *args) -> "Standard_Real":
        """
        * Returns the volumeFactor
        	:rtype: float
        """
        return _STEPConstruct.STEPConstruct_UnitContext_VolumeFactor(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_UnitContext
STEPConstruct_UnitContext.AreaDone = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_AreaDone, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.AreaFactor = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_AreaFactor, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.ComputeFactors = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_ComputeFactors, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.ComputeTolerance = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_ComputeTolerance, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.HasUncertainty = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_HasUncertainty, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.Init = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_Init, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.IsDone = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_IsDone, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.LengthDone = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_LengthDone, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.LengthFactor = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_LengthFactor, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.PlaneAngleDone = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_PlaneAngleDone, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.PlaneAngleFactor = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_PlaneAngleFactor, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.SolidAngleDone = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_SolidAngleDone, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.SolidAngleFactor = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_SolidAngleFactor, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.StatusMessage = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_StatusMessage, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.Uncertainty = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_Uncertainty, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.Value = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_Value, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.VolumeDone = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_VolumeDone, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext.VolumeFactor = new_instancemethod(_STEPConstruct.STEPConstruct_UnitContext_VolumeFactor, None, STEPConstruct_UnitContext)
STEPConstruct_UnitContext_swigregister = _STEPConstruct.STEPConstruct_UnitContext_swigregister
STEPConstruct_UnitContext_swigregister(STEPConstruct_UnitContext)

def STEPConstruct_UnitContext_ConvertSiPrefix(*args) -> "Standard_Real":
    """
    * Convert SI prefix defined by enumertaion to corresponding real factor (e.g. 1e6 for mega)
    	:param aPrefix:
    	:type aPrefix: StepBasic_SiPrefix
    	:rtype: float
    """
    return _STEPConstruct.STEPConstruct_UnitContext_ConvertSiPrefix(*args)

class STEPConstruct_ExternRefs(STEPConstruct_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddExternRef(self, *args) -> "Standard_Integer":
        """
        * Create a new external reference with specified attributes attached to a given SDR <format> can be Null string, in that case this information is not written. Else, it can be 'STEP AP214' or 'STEP AP203' Returns index of a new extern ref
        	:param filename:
        	:type filename: char *
        	:param PD:
        	:type PD: StepBasic_ProductDefinition
        	:param format:
        	:type format: char *
        	:rtype: int
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_AddExternRef(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears internal fields (list of defined extern refs)
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_Clear(self, *args)


    def FileName(self, *args) -> "char const *":
        """
        * Returns filename for numth extern reference Returns Null if FileName is not defined or bad
        	:param num:
        	:type num: int
        	:rtype: char *
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_FileName(self, *args)


    def Format(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns format identification string for the extern document Returns Null handle if format is not defined
        	:param num:
        	:type num: int
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_Format(self, *args)


    def GetAP214APD(self, *args) -> "opencascade::handle< StepBasic_ApplicationProtocolDefinition >":
        """
        * Returns the ApplicationProtocolDefinition of the PDM schema NOTE: if not defined then create new APD with new Application Context
        	:rtype: opencascade::handle<StepBasic_ApplicationProtocolDefinition>
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_GetAP214APD(self, *args)


    def Init(self, *args) -> "Standard_Boolean":
        """
        * Initializes tool; returns True if succeeded
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_Init(self, *args)


    def LoadExternRefs(self, *args) -> "Standard_Boolean":
        """
        * Searches current STEP model for external references and loads them to the internal data structures NOTE: does not clear data structures before loading
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_LoadExternRefs(self, *args)


    def NbExternRefs(self, *args) -> "Standard_Integer":
        """
        * Returns number of defined extern references
        	:rtype: int
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_NbExternRefs(self, *args)


    def ProdDef(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition >":
        """
        * Returns ProductDefinition to which numth extern reference is associated. Returns Null if cannot be detected or if extern reference is not associated to SDR in a proper way.
        	:param num:
        	:type num: int
        	:rtype: opencascade::handle<StepBasic_ProductDefinition>
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_ProdDef(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty tool
        	:rtype: None
        * Creates a tool and initializes it
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_ExternRefs_swiginit(self, _STEPConstruct.new_STEPConstruct_ExternRefs(*args))

    def SetAP214APD(self, *args) -> "void":
        """
        * Set the ApplicationProtocolDefinition of the PDM schema
        	:param APD:
        	:type APD: StepBasic_ApplicationProtocolDefinition
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_SetAP214APD(self, *args)


    def WriteExternRefs(self, *args) -> "Standard_Integer":
        """
        * Adds all the currently defined external refs to the model Returns number of written extern refs
        	:param num:
        	:type num: int
        	:rtype: int
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_WriteExternRefs(self, *args)


    def checkAP214Shared(self, *args) -> "void":
        """
        * Check (create if it is null) all shared entities for the model
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ExternRefs_checkAP214Shared(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_ExternRefs
STEPConstruct_ExternRefs.AddExternRef = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_AddExternRef, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs.Clear = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_Clear, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs.FileName = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_FileName, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs.Format = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_Format, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs.GetAP214APD = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_GetAP214APD, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs.Init = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_Init, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs.LoadExternRefs = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_LoadExternRefs, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs.NbExternRefs = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_NbExternRefs, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs.ProdDef = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_ProdDef, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs.SetAP214APD = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_SetAP214APD, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs.WriteExternRefs = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_WriteExternRefs, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs.checkAP214Shared = new_instancemethod(_STEPConstruct.STEPConstruct_ExternRefs_checkAP214Shared, None, STEPConstruct_ExternRefs)
STEPConstruct_ExternRefs_swigregister = _STEPConstruct.STEPConstruct_ExternRefs_swigregister
STEPConstruct_ExternRefs_swigregister(STEPConstruct_ExternRefs)

class STEPConstruct_Styles(STEPConstruct_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddStyle(self, *args) -> "opencascade::handle< StepVisual_StyledItem >":
        """
        * Adds a style to a sequence
        	:param style:
        	:type style: StepVisual_StyledItem
        	:rtype: None
        * Create a style linking giving PSA to the item, and add it to the sequence of stored styles. If Override is not Null, then the resulting style will be of the subtype OverridingStyledItem.
        	:param item:
        	:type item: StepRepr_RepresentationItem
        	:param PSA:
        	:type PSA: StepVisual_PresentationStyleAssignment
        	:param Override:
        	:type Override: StepVisual_StyledItem
        	:rtype: opencascade::handle<StepVisual_StyledItem>
        * Create a style linking giving PSA to the Shape, and add it to the sequence of stored styles. If Override is not Null, then the resulting style will be of the subtype OverridingStyledItem. The Sape is used to find corresponding STEP entity by call to STEPConstruct::FindEntity(), then previous method is called.
        	:param Shape:
        	:type Shape: TopoDS_Shape
        	:param PSA:
        	:type PSA: StepVisual_PresentationStyleAssignment
        	:param Override:
        	:type Override: StepVisual_StyledItem
        	:rtype: opencascade::handle<StepVisual_StyledItem>
        """
        return _STEPConstruct.STEPConstruct_Styles_AddStyle(self, *args)


    def ClearStyles(self, *args) -> "void":
        """
        * Clears all defined styles and PSA sequence
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_Styles_ClearStyles(self, *args)


    def CreateMDGPR(self, *args) -> "Standard_Boolean":
        """
        * Create MDGPR, fill it with all the styles previously defined, and add it to the model
        	:param Context:
        	:type Context: StepRepr_RepresentationContext
        	:param MDGPR:
        	:type MDGPR: StepVisual_MechanicalDesignGeometricPresentationRepresentation
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_Styles_CreateMDGPR(self, *args)


    def CreateNAUOSRD(self, *args) -> "Standard_Boolean":
        """
        * Create MDGPR, fill it with all the styles previously defined, and add it to the model IMPORTANT: <initPDS> must be null when use for NAUO colors <initPDS> initialised only for SHUO case.
        	:param Context:
        	:type Context: StepRepr_RepresentationContext
        	:param CDSR:
        	:type CDSR: StepShape_ContextDependentShapeRepresentation
        	:param initPDS:
        	:type initPDS: StepRepr_ProductDefinitionShape
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_Styles_CreateNAUOSRD(self, *args)


    def DecodeColor(*args) -> "Standard_Boolean":
        """
        * Decodes STEP color and fills the Quantity_Color. Returns True if OK or False if color is not recognized
        	:param Colour:
        	:type Colour: StepVisual_Colour
        	:param Col:
        	:type Col: Quantity_Color
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_Styles_DecodeColor(*args)

    DecodeColor = staticmethod(DecodeColor)

    def EncodeColor(*args) -> "opencascade::handle< StepVisual_Colour >":
        """
        * Create STEP color entity by given Quantity_Color The analysis is performed for whether the color corresponds to one of standard colors predefined in STEP. In that case, PredefinedColour entity is created instead of RGBColour
        	:param Col:
        	:type Col: Quantity_Color
        	:rtype: opencascade::handle<StepVisual_Colour>
        * Create STEP color entity by given Quantity_Color The analysis is performed for whether the color corresponds to one of standard colors predefined in STEP. In that case, PredefinedColour entity is created instead of RGBColour
        	:param Col:
        	:type Col: Quantity_Color
        	:param DPDCs:
        	:type DPDCs: STEPConstruct_DataMapOfAsciiStringTransient
        	:param ColRGBs:
        	:type ColRGBs: STEPConstruct_DataMapOfPointTransient
        	:rtype: opencascade::handle<StepVisual_Colour>
        """
        return _STEPConstruct.STEPConstruct_Styles_EncodeColor(*args)

    EncodeColor = staticmethod(EncodeColor)

    def FindContext(self, *args) -> "opencascade::handle< StepRepr_RepresentationContext >":
        """
        * Searches the STEP model for the RepresentationContext in which given shape is defined. This context (if found) can be used then in call to CreateMDGPR()
        	:param Shape:
        	:type Shape: TopoDS_Shape
        	:rtype: opencascade::handle<StepRepr_RepresentationContext>
        """
        return _STEPConstruct.STEPConstruct_Styles_FindContext(self, *args)


    def GetColorPSA(self, *args) -> "opencascade::handle< StepVisual_PresentationStyleAssignment >":
        """
        * Returns a PresentationStyleAssignment entity which defines surface and curve colors as Col. This PSA is either created or taken from internal map where all PSAs created by this method are remembered.
        	:param item:
        	:type item: StepRepr_RepresentationItem
        	:param Col:
        	:type Col: StepVisual_Colour
        	:rtype: opencascade::handle<StepVisual_PresentationStyleAssignment>
        """
        return _STEPConstruct.STEPConstruct_Styles_GetColorPSA(self, *args)


    def GetColors(self, *args) -> "Standard_Boolean":
        """
        * Extract color definitions from the style entity For each type of color supported, result can be either NULL if it is not defined by that style, or last definition (if they are 1 or more)
        	:param style:
        	:type style: StepVisual_StyledItem
        	:param SurfCol:
        	:type SurfCol: StepVisual_Colour
        	:param BoundCol:
        	:type BoundCol: StepVisual_Colour
        	:param CurveCol:
        	:type CurveCol: StepVisual_Colour
        	:param IsComponent:
        	:type IsComponent: bool
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_Styles_GetColors(self, *args)


    def Init(self, *args) -> "Standard_Boolean":
        """
        * Initializes tool; returns True if succeeded
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_Styles_Init(self, *args)


    def LoadInvisStyles(self, *args) -> "Standard_Boolean":
        """
        * Searches the STEP model for the INISIBILITY enteties (which bring styles) and fills out sequence of styles
        	:param InvSyles:
        	:type InvSyles: TColStd_HSequenceOfTransient
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_Styles_LoadInvisStyles(self, *args)


    def LoadStyles(self, *args) -> "Standard_Boolean":
        """
        * Searches the STEP model for the MDGPR or DM entities (which bring styles) and fills sequence of styles
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_Styles_LoadStyles(self, *args)


    def MakeColorPSA(self, *args) -> "opencascade::handle< StepVisual_PresentationStyleAssignment >":
        """
        * Create a PresentationStyleAssignment entity which defines two colors (for filling surfaces and curves) if isForNAUO true then returns PresentationStyleByContext
        	:param item:
        	:type item: StepRepr_RepresentationItem
        	:param SurfCol:
        	:type SurfCol: StepVisual_Colour
        	:param CurveCol:
        	:type CurveCol: StepVisual_Colour
        	:param isForNAUO: default value is Standard_False
        	:type isForNAUO: bool
        	:rtype: opencascade::handle<StepVisual_PresentationStyleAssignment>
        """
        return _STEPConstruct.STEPConstruct_Styles_MakeColorPSA(self, *args)


    def NbStyles(self, *args) -> "Standard_Integer":
        """
        * Returns number of defined styles
        	:rtype: int
        """
        return _STEPConstruct.STEPConstruct_Styles_NbStyles(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty tool
        	:rtype: None
        * Creates a tool and initializes it
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_Styles_swiginit(self, _STEPConstruct.new_STEPConstruct_Styles(*args))

    def Style(self, *args) -> "opencascade::handle< StepVisual_StyledItem >":
        """
        * Returns style with given index
        	:param i:
        	:type i: int
        	:rtype: opencascade::handle<StepVisual_StyledItem>
        """
        return _STEPConstruct.STEPConstruct_Styles_Style(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_Styles
STEPConstruct_Styles.AddStyle = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_AddStyle, None, STEPConstruct_Styles)
STEPConstruct_Styles.ClearStyles = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_ClearStyles, None, STEPConstruct_Styles)
STEPConstruct_Styles.CreateMDGPR = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_CreateMDGPR, None, STEPConstruct_Styles)
STEPConstruct_Styles.CreateNAUOSRD = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_CreateNAUOSRD, None, STEPConstruct_Styles)
STEPConstruct_Styles.FindContext = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_FindContext, None, STEPConstruct_Styles)
STEPConstruct_Styles.GetColorPSA = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_GetColorPSA, None, STEPConstruct_Styles)
STEPConstruct_Styles.GetColors = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_GetColors, None, STEPConstruct_Styles)
STEPConstruct_Styles.Init = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_Init, None, STEPConstruct_Styles)
STEPConstruct_Styles.LoadInvisStyles = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_LoadInvisStyles, None, STEPConstruct_Styles)
STEPConstruct_Styles.LoadStyles = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_LoadStyles, None, STEPConstruct_Styles)
STEPConstruct_Styles.MakeColorPSA = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_MakeColorPSA, None, STEPConstruct_Styles)
STEPConstruct_Styles.NbStyles = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_NbStyles, None, STEPConstruct_Styles)
STEPConstruct_Styles.Style = new_instancemethod(_STEPConstruct.STEPConstruct_Styles_Style, None, STEPConstruct_Styles)
STEPConstruct_Styles_swigregister = _STEPConstruct.STEPConstruct_Styles_swigregister
STEPConstruct_Styles_swigregister(STEPConstruct_Styles)

def STEPConstruct_Styles_DecodeColor(*args) -> "Standard_Boolean":
    """
    * Decodes STEP color and fills the Quantity_Color. Returns True if OK or False if color is not recognized
    	:param Colour:
    	:type Colour: StepVisual_Colour
    	:param Col:
    	:type Col: Quantity_Color
    	:rtype: bool
    """
    return _STEPConstruct.STEPConstruct_Styles_DecodeColor(*args)

def STEPConstruct_Styles_EncodeColor(*args) -> "opencascade::handle< StepVisual_Colour >":
    """
    * Create STEP color entity by given Quantity_Color The analysis is performed for whether the color corresponds to one of standard colors predefined in STEP. In that case, PredefinedColour entity is created instead of RGBColour
    	:param Col:
    	:type Col: Quantity_Color
    	:rtype: opencascade::handle<StepVisual_Colour>
    * Create STEP color entity by given Quantity_Color The analysis is performed for whether the color corresponds to one of standard colors predefined in STEP. In that case, PredefinedColour entity is created instead of RGBColour
    	:param Col:
    	:type Col: Quantity_Color
    	:param DPDCs:
    	:type DPDCs: STEPConstruct_DataMapOfAsciiStringTransient
    	:param ColRGBs:
    	:type ColRGBs: STEPConstruct_DataMapOfPointTransient
    	:rtype: opencascade::handle<StepVisual_Colour>
    """
    return _STEPConstruct.STEPConstruct_Styles_EncodeColor(*args)

class STEPConstruct_ValidationProps(STEPConstruct_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddArea(self, *args) -> "Standard_Boolean":
        """
        * Adds surface area property for given shape (already mapped). Returns True if success, False in case of fail
        	:param Shape:
        	:type Shape: TopoDS_Shape
        	:param Area:
        	:type Area: float
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_AddArea(self, *args)


    def AddCentroid(self, *args) -> "Standard_Boolean":
        """
        * Adds centroid property for given shape (already mapped). Returns True if success, False in case of fail If instance is True, then centroid is assigned to an instance of component in assembly
        	:param Shape:
        	:type Shape: TopoDS_Shape
        	:param Pnt:
        	:type Pnt: gp_Pnt
        	:param instance: default value is Standard_False
        	:type instance: bool
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_AddCentroid(self, *args)


    def AddProp(self, *args) -> "Standard_Boolean":
        """
        * General method for adding (writing) a validation property for shape which should be already mapped on writing itself. It uses FindTarget() to find target STEP entity resulting from given shape, and associated context Returns True if success, False in case of fail
        	:param Shape:
        	:type Shape: TopoDS_Shape
        	:param Prop:
        	:type Prop: StepRepr_RepresentationItem
        	:param Descr:
        	:type Descr: char *
        	:param instance: default value is Standard_False
        	:type instance: bool
        	:rtype: bool
        * General method for adding (writing) a validation property for shape which should be already mapped on writing itself. It takes target and Context entities which correspond to shape Returns True if success, False in case of fail
        	:param target:
        	:type target: StepRepr_CharacterizedDefinition
        	:param Context:
        	:type Context: StepRepr_RepresentationContext
        	:param Prop:
        	:type Prop: StepRepr_RepresentationItem
        	:param Descr:
        	:type Descr: char *
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_AddProp(self, *args)


    def AddVolume(self, *args) -> "Standard_Boolean":
        """
        * Adds volume property for given shape (already mapped). Returns True if success, False in case of fail
        	:param Shape:
        	:type Shape: TopoDS_Shape
        	:param Vol:
        	:type Vol: float
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_AddVolume(self, *args)


    def FindTarget(self, *args) -> "Standard_Boolean":
        """
        * Finds target STEP entity to which validation props should be assigned, and corresponding context, starting from shape Returns True if success, False in case of fail
        	:param S:
        	:type S: TopoDS_Shape
        	:param target:
        	:type target: StepRepr_CharacterizedDefinition
        	:param Context:
        	:type Context: StepRepr_RepresentationContext
        	:param instance: default value is Standard_False
        	:type instance: bool
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_FindTarget(self, *args)


    def GetPropNAUO(self, *args) -> "opencascade::handle< StepRepr_NextAssemblyUsageOccurrence >":
        """
        * Returns CDSR associated with given PpD or NULL if not found (when, try GetPropSDR)
        	:param PD:
        	:type PD: StepRepr_PropertyDefinition
        	:rtype: opencascade::handle<StepRepr_NextAssemblyUsageOccurrence>
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_GetPropNAUO(self, *args)


    def GetPropPD(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition >":
        """
        * Returns SDR associated with given PpD or NULL if not found (when, try GetPropCDSR)
        	:param PD:
        	:type PD: StepRepr_PropertyDefinition
        	:rtype: opencascade::handle<StepBasic_ProductDefinition>
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_GetPropPD(self, *args)


    def GetPropPnt(self, *args) -> "Standard_Boolean":
        """
        * Returns value of Centriod property (or False if it is not)
        	:param item:
        	:type item: StepRepr_RepresentationItem
        	:param Context:
        	:type Context: StepRepr_RepresentationContext
        	:param Pnt:
        	:type Pnt: gp_Pnt
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_GetPropPnt(self, *args)


    def GetPropReal(self, *args) -> "Standard_Boolean":
        """
        * Returns value of Real-Valued property (Area or Volume) If Property is neither Area nor Volume, returns False Else returns True and isArea indicates whether property is area or volume
        	:param item:
        	:type item: StepRepr_RepresentationItem
        	:param Val:
        	:type Val: float
        	:param isArea:
        	:type isArea: bool
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_GetPropReal(self, *args)


    def GetPropShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns Shape associated with given SDR or Null Shape if not found
        	:param ProdDef:
        	:type ProdDef: StepBasic_ProductDefinition
        	:rtype: TopoDS_Shape
        * Returns Shape associated with given PpD or Null Shape if not found
        	:param PD:
        	:type PD: StepRepr_PropertyDefinition
        	:rtype: TopoDS_Shape
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_GetPropShape(self, *args)


    def Init(self, *args) -> "Standard_Boolean":
        """
        * Load worksession; returns True if succeeded
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_Init(self, *args)


    def LoadProps(self, *args) -> "Standard_Boolean":
        """
        * Searches for entities of the type PropertyDefinitionRepresentation in the model and fills the sequence by them
        	:param seq:
        	:type seq: TColStd_SequenceOfTransient
        	:rtype: bool
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_LoadProps(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty tool
        	:rtype: None
        * Creates a tool and loads it with worksession
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_ValidationProps_swiginit(self, _STEPConstruct.new_STEPConstruct_ValidationProps(*args))

    def SetAssemblyShape(self, *args) -> "void":
        """
        * Sets current assembly shape SDR (for FindCDSR calls)
        	:param shape:
        	:type shape: TopoDS_Shape
        	:rtype: None
        """
        return _STEPConstruct.STEPConstruct_ValidationProps_SetAssemblyShape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_ValidationProps
STEPConstruct_ValidationProps.AddArea = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_AddArea, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.AddCentroid = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_AddCentroid, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.AddProp = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_AddProp, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.AddVolume = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_AddVolume, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.FindTarget = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_FindTarget, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.GetPropNAUO = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_GetPropNAUO, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.GetPropPD = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_GetPropPD, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.GetPropPnt = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_GetPropPnt, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.GetPropReal = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_GetPropReal, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.GetPropShape = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_GetPropShape, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.Init = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_Init, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.LoadProps = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_LoadProps, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps.SetAssemblyShape = new_instancemethod(_STEPConstruct.STEPConstruct_ValidationProps_SetAssemblyShape, None, STEPConstruct_ValidationProps)
STEPConstruct_ValidationProps_swigregister = _STEPConstruct.STEPConstruct_ValidationProps_swigregister
STEPConstruct_ValidationProps_swigregister(STEPConstruct_ValidationProps)



