# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ShapeUpgrade module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_shapeupgrade.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ShapeUpgrade.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ShapeUpgrade')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ShapeUpgrade')
    _ShapeUpgrade = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeUpgrade', [dirname(__file__)])
        except ImportError:
            import _ShapeUpgrade
            return _ShapeUpgrade
        try:
            _mod = imp.load_module('_ShapeUpgrade', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ShapeUpgrade = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeUpgrade
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeUpgrade.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ShapeUpgrade.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ShapeUpgrade.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ShapeUpgrade.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ShapeUpgrade.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ShapeUpgrade.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ShapeUpgrade.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ShapeUpgrade.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ShapeUpgrade.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ShapeUpgrade.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ShapeUpgrade.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ShapeUpgrade.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ShapeUpgrade.process_exception(error, method_name, class_name)
process_exception = _ShapeUpgrade.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColGeom
import OCC.Core.Geom2d
import OCC.Core.TColGeom2d
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.ShapeBuild
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeExtend
import OCC.Core.ShapeAnalysis
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.IntRes2d

def Handle_ShapeUpgrade_RemoveLocations_Create() -> "opencascade::handle< ShapeUpgrade_RemoveLocations >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_Create()
Handle_ShapeUpgrade_RemoveLocations_Create = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_Create

def Handle_ShapeUpgrade_RemoveLocations_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_RemoveLocations >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_DownCast(t)
Handle_ShapeUpgrade_RemoveLocations_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_DownCast

def Handle_ShapeUpgrade_RemoveLocations_IsNull(t: 'opencascade::handle< ShapeUpgrade_RemoveLocations > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_IsNull(t)
Handle_ShapeUpgrade_RemoveLocations_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_IsNull

def Handle_ShapeUpgrade_SplitCurve_Create() -> "opencascade::handle< ShapeUpgrade_SplitCurve >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_Create()
Handle_ShapeUpgrade_SplitCurve_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_Create

def Handle_ShapeUpgrade_SplitCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitCurve >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_DownCast(t)
Handle_ShapeUpgrade_SplitCurve_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_DownCast

def Handle_ShapeUpgrade_SplitCurve_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitCurve > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_IsNull(t)
Handle_ShapeUpgrade_SplitCurve_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_IsNull

def Handle_ShapeUpgrade_SplitSurface_Create() -> "opencascade::handle< ShapeUpgrade_SplitSurface >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_Create()
Handle_ShapeUpgrade_SplitSurface_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_Create

def Handle_ShapeUpgrade_SplitSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitSurface >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_DownCast(t)
Handle_ShapeUpgrade_SplitSurface_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_DownCast

def Handle_ShapeUpgrade_SplitSurface_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitSurface > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_IsNull(t)
Handle_ShapeUpgrade_SplitSurface_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_IsNull

def Handle_ShapeUpgrade_Tool_Create() -> "opencascade::handle< ShapeUpgrade_Tool >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_Tool_Create()
Handle_ShapeUpgrade_Tool_Create = _ShapeUpgrade.Handle_ShapeUpgrade_Tool_Create

def Handle_ShapeUpgrade_Tool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_Tool >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_Tool_DownCast(t)
Handle_ShapeUpgrade_Tool_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_Tool_DownCast

def Handle_ShapeUpgrade_Tool_IsNull(t: 'opencascade::handle< ShapeUpgrade_Tool > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_Tool_IsNull(t)
Handle_ShapeUpgrade_Tool_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_Tool_IsNull

def Handle_ShapeUpgrade_UnifySameDomain_Create() -> "opencascade::handle< ShapeUpgrade_UnifySameDomain >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_Create()
Handle_ShapeUpgrade_UnifySameDomain_Create = _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_Create

def Handle_ShapeUpgrade_UnifySameDomain_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_UnifySameDomain >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_DownCast(t)
Handle_ShapeUpgrade_UnifySameDomain_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_DownCast

def Handle_ShapeUpgrade_UnifySameDomain_IsNull(t: 'opencascade::handle< ShapeUpgrade_UnifySameDomain > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_IsNull(t)
Handle_ShapeUpgrade_UnifySameDomain_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_IsNull

def Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_Create() -> "opencascade::handle< ShapeUpgrade_ConvertSurfaceToBezierBasis >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_Create()
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_Create = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_Create

def Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_ConvertSurfaceToBezierBasis >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast(t)
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast

def Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_IsNull(t: 'opencascade::handle< ShapeUpgrade_ConvertSurfaceToBezierBasis > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_IsNull(t)
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_IsNull

def Handle_ShapeUpgrade_EdgeDivide_Create() -> "opencascade::handle< ShapeUpgrade_EdgeDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_Create()
Handle_ShapeUpgrade_EdgeDivide_Create = _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_Create

def Handle_ShapeUpgrade_EdgeDivide_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_EdgeDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_DownCast(t)
Handle_ShapeUpgrade_EdgeDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_DownCast

def Handle_ShapeUpgrade_EdgeDivide_IsNull(t: 'opencascade::handle< ShapeUpgrade_EdgeDivide > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_IsNull(t)
Handle_ShapeUpgrade_EdgeDivide_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_IsNull

def Handle_ShapeUpgrade_FaceDivide_Create() -> "opencascade::handle< ShapeUpgrade_FaceDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_Create()
Handle_ShapeUpgrade_FaceDivide_Create = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_Create

def Handle_ShapeUpgrade_FaceDivide_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_FaceDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_DownCast(t)
Handle_ShapeUpgrade_FaceDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_DownCast

def Handle_ShapeUpgrade_FaceDivide_IsNull(t: 'opencascade::handle< ShapeUpgrade_FaceDivide > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_IsNull(t)
Handle_ShapeUpgrade_FaceDivide_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_IsNull

def Handle_ShapeUpgrade_FixSmallCurves_Create() -> "opencascade::handle< ShapeUpgrade_FixSmallCurves >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_Create()
Handle_ShapeUpgrade_FixSmallCurves_Create = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_Create

def Handle_ShapeUpgrade_FixSmallCurves_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_FixSmallCurves >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_DownCast(t)
Handle_ShapeUpgrade_FixSmallCurves_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_DownCast

def Handle_ShapeUpgrade_FixSmallCurves_IsNull(t: 'opencascade::handle< ShapeUpgrade_FixSmallCurves > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_IsNull(t)
Handle_ShapeUpgrade_FixSmallCurves_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_IsNull

def Handle_ShapeUpgrade_RemoveInternalWires_Create() -> "opencascade::handle< ShapeUpgrade_RemoveInternalWires >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_Create()
Handle_ShapeUpgrade_RemoveInternalWires_Create = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_Create

def Handle_ShapeUpgrade_RemoveInternalWires_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_RemoveInternalWires >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_DownCast(t)
Handle_ShapeUpgrade_RemoveInternalWires_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_DownCast

def Handle_ShapeUpgrade_RemoveInternalWires_IsNull(t: 'opencascade::handle< ShapeUpgrade_RemoveInternalWires > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_IsNull(t)
Handle_ShapeUpgrade_RemoveInternalWires_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_IsNull

def Handle_ShapeUpgrade_SplitCurve2d_Create() -> "opencascade::handle< ShapeUpgrade_SplitCurve2d >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_Create()
Handle_ShapeUpgrade_SplitCurve2d_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_Create

def Handle_ShapeUpgrade_SplitCurve2d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitCurve2d >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_DownCast(t)
Handle_ShapeUpgrade_SplitCurve2d_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_DownCast

def Handle_ShapeUpgrade_SplitCurve2d_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitCurve2d > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_IsNull(t)
Handle_ShapeUpgrade_SplitCurve2d_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_IsNull

def Handle_ShapeUpgrade_SplitCurve3d_Create() -> "opencascade::handle< ShapeUpgrade_SplitCurve3d >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_Create()
Handle_ShapeUpgrade_SplitCurve3d_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_Create

def Handle_ShapeUpgrade_SplitCurve3d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitCurve3d >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_DownCast(t)
Handle_ShapeUpgrade_SplitCurve3d_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_DownCast

def Handle_ShapeUpgrade_SplitCurve3d_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitCurve3d > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_IsNull(t)
Handle_ShapeUpgrade_SplitCurve3d_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_IsNull

def Handle_ShapeUpgrade_SplitSurfaceAngle_Create() -> "opencascade::handle< ShapeUpgrade_SplitSurfaceAngle >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_Create()
Handle_ShapeUpgrade_SplitSurfaceAngle_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_Create

def Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitSurfaceAngle >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast(t)
Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast

def Handle_ShapeUpgrade_SplitSurfaceAngle_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitSurfaceAngle > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_IsNull(t)
Handle_ShapeUpgrade_SplitSurfaceAngle_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_IsNull

def Handle_ShapeUpgrade_SplitSurfaceArea_Create() -> "opencascade::handle< ShapeUpgrade_SplitSurfaceArea >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_Create()
Handle_ShapeUpgrade_SplitSurfaceArea_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_Create

def Handle_ShapeUpgrade_SplitSurfaceArea_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitSurfaceArea >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_DownCast(t)
Handle_ShapeUpgrade_SplitSurfaceArea_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_DownCast

def Handle_ShapeUpgrade_SplitSurfaceArea_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitSurfaceArea > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_IsNull(t)
Handle_ShapeUpgrade_SplitSurfaceArea_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_IsNull

def Handle_ShapeUpgrade_SplitSurfaceContinuity_Create() -> "opencascade::handle< ShapeUpgrade_SplitSurfaceContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_Create()
Handle_ShapeUpgrade_SplitSurfaceContinuity_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_Create

def Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitSurfaceContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast(t)
Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast

def Handle_ShapeUpgrade_SplitSurfaceContinuity_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitSurfaceContinuity > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_IsNull(t)
Handle_ShapeUpgrade_SplitSurfaceContinuity_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_IsNull

def Handle_ShapeUpgrade_WireDivide_Create() -> "opencascade::handle< ShapeUpgrade_WireDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_Create()
Handle_ShapeUpgrade_WireDivide_Create = _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_Create

def Handle_ShapeUpgrade_WireDivide_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_WireDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_DownCast(t)
Handle_ShapeUpgrade_WireDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_DownCast

def Handle_ShapeUpgrade_WireDivide_IsNull(t: 'opencascade::handle< ShapeUpgrade_WireDivide > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_IsNull(t)
Handle_ShapeUpgrade_WireDivide_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_IsNull

def Handle_ShapeUpgrade_ClosedEdgeDivide_Create() -> "opencascade::handle< ShapeUpgrade_ClosedEdgeDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_Create()
Handle_ShapeUpgrade_ClosedEdgeDivide_Create = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_Create

def Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_ClosedEdgeDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast(t)
Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast

def Handle_ShapeUpgrade_ClosedEdgeDivide_IsNull(t: 'opencascade::handle< ShapeUpgrade_ClosedEdgeDivide > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_IsNull(t)
Handle_ShapeUpgrade_ClosedEdgeDivide_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_IsNull

def Handle_ShapeUpgrade_ClosedFaceDivide_Create() -> "opencascade::handle< ShapeUpgrade_ClosedFaceDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_Create()
Handle_ShapeUpgrade_ClosedFaceDivide_Create = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_Create

def Handle_ShapeUpgrade_ClosedFaceDivide_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_ClosedFaceDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_DownCast(t)
Handle_ShapeUpgrade_ClosedFaceDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_DownCast

def Handle_ShapeUpgrade_ClosedFaceDivide_IsNull(t: 'opencascade::handle< ShapeUpgrade_ClosedFaceDivide > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_IsNull(t)
Handle_ShapeUpgrade_ClosedFaceDivide_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_IsNull

def Handle_ShapeUpgrade_ConvertCurve2dToBezier_Create() -> "opencascade::handle< ShapeUpgrade_ConvertCurve2dToBezier >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_Create()
Handle_ShapeUpgrade_ConvertCurve2dToBezier_Create = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_Create

def Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_ConvertCurve2dToBezier >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast(t)
Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast

def Handle_ShapeUpgrade_ConvertCurve2dToBezier_IsNull(t: 'opencascade::handle< ShapeUpgrade_ConvertCurve2dToBezier > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_IsNull(t)
Handle_ShapeUpgrade_ConvertCurve2dToBezier_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_IsNull

def Handle_ShapeUpgrade_ConvertCurve3dToBezier_Create() -> "opencascade::handle< ShapeUpgrade_ConvertCurve3dToBezier >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_Create()
Handle_ShapeUpgrade_ConvertCurve3dToBezier_Create = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_Create

def Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_ConvertCurve3dToBezier >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast(t)
Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast

def Handle_ShapeUpgrade_ConvertCurve3dToBezier_IsNull(t: 'opencascade::handle< ShapeUpgrade_ConvertCurve3dToBezier > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_IsNull(t)
Handle_ShapeUpgrade_ConvertCurve3dToBezier_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_IsNull

def Handle_ShapeUpgrade_FaceDivideArea_Create() -> "opencascade::handle< ShapeUpgrade_FaceDivideArea >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_Create()
Handle_ShapeUpgrade_FaceDivideArea_Create = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_Create

def Handle_ShapeUpgrade_FaceDivideArea_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_FaceDivideArea >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_DownCast(t)
Handle_ShapeUpgrade_FaceDivideArea_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_DownCast

def Handle_ShapeUpgrade_FaceDivideArea_IsNull(t: 'opencascade::handle< ShapeUpgrade_FaceDivideArea > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_IsNull(t)
Handle_ShapeUpgrade_FaceDivideArea_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_IsNull

def Handle_ShapeUpgrade_FixSmallBezierCurves_Create() -> "opencascade::handle< ShapeUpgrade_FixSmallBezierCurves >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_Create()
Handle_ShapeUpgrade_FixSmallBezierCurves_Create = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_Create

def Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_FixSmallBezierCurves >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast(t)
Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast

def Handle_ShapeUpgrade_FixSmallBezierCurves_IsNull(t: 'opencascade::handle< ShapeUpgrade_FixSmallBezierCurves > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_IsNull(t)
Handle_ShapeUpgrade_FixSmallBezierCurves_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_IsNull

def Handle_ShapeUpgrade_SplitCurve2dContinuity_Create() -> "opencascade::handle< ShapeUpgrade_SplitCurve2dContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_Create()
Handle_ShapeUpgrade_SplitCurve2dContinuity_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_Create

def Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitCurve2dContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast(t)
Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast

def Handle_ShapeUpgrade_SplitCurve2dContinuity_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitCurve2dContinuity > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_IsNull(t)
Handle_ShapeUpgrade_SplitCurve2dContinuity_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_IsNull

def Handle_ShapeUpgrade_SplitCurve3dContinuity_Create() -> "opencascade::handle< ShapeUpgrade_SplitCurve3dContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_Create()
Handle_ShapeUpgrade_SplitCurve3dContinuity_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_Create

def Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitCurve3dContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast(t)
Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast

def Handle_ShapeUpgrade_SplitCurve3dContinuity_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitCurve3dContinuity > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_IsNull(t)
Handle_ShapeUpgrade_SplitCurve3dContinuity_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_IsNull
class shapeupgrade(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def C0BSplineToSequenceOfC1BSplineCurve(*args) -> "Standard_Boolean":
        """
        * Unifies same domain faces and edges of specified shape
        	:param BS:
        	:type BS: Geom_BSplineCurve
        	:param seqBS:
        	:type seqBS: TColGeom_HSequenceOfBoundedCurve
        	:rtype: bool
        * Converts C0 B-Spline curve into sequence of C1 B-Spline curves. This method splits B-Spline at the knots with multiplicities equal to degree, i.e. unlike method GeomConvert::C0BSplineToArrayOfC1BSplineCurve this one does not use any tolerance and therefore does not change the geometry of B-Spline. Returns True if C0 B-Spline was successfully splitted, else returns False (if BS is C1 B-Spline).
        	:param BS:
        	:type BS: Geom2d_BSplineCurve
        	:param seqBS:
        	:type seqBS: TColGeom2d_HSequenceOfBoundedCurve
        	:rtype: bool
        """
        return _ShapeUpgrade.shapeupgrade_C0BSplineToSequenceOfC1BSplineCurve(*args)

    C0BSplineToSequenceOfC1BSplineCurve = staticmethod(C0BSplineToSequenceOfC1BSplineCurve)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeUpgrade.shapeupgrade_swiginit(self, _ShapeUpgrade.new_shapeupgrade())
    __swig_destroy__ = _ShapeUpgrade.delete_shapeupgrade
shapeupgrade_swigregister = _ShapeUpgrade.shapeupgrade_swigregister
shapeupgrade_swigregister(shapeupgrade)

def shapeupgrade_C0BSplineToSequenceOfC1BSplineCurve(*args) -> "Standard_Boolean":
    """
    * Unifies same domain faces and edges of specified shape
    	:param BS:
    	:type BS: Geom_BSplineCurve
    	:param seqBS:
    	:type seqBS: TColGeom_HSequenceOfBoundedCurve
    	:rtype: bool
    * Converts C0 B-Spline curve into sequence of C1 B-Spline curves. This method splits B-Spline at the knots with multiplicities equal to degree, i.e. unlike method GeomConvert::C0BSplineToArrayOfC1BSplineCurve this one does not use any tolerance and therefore does not change the geometry of B-Spline. Returns True if C0 B-Spline was successfully splitted, else returns False (if BS is C1 B-Spline).
    	:param BS:
    	:type BS: Geom2d_BSplineCurve
    	:param seqBS:
    	:type seqBS: TColGeom2d_HSequenceOfBoundedCurve
    	:rtype: bool
    """
    return _ShapeUpgrade.shapeupgrade_C0BSplineToSequenceOfC1BSplineCurve(*args)

class ShapeUpgrade_RemoveLocations(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetResult(self, *args) -> "TopoDS_Shape":
        """
        * Returns shape with removed locatins.
        	:rtype: TopoDS_Shape
        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_GetResult(self, *args)


    def ModifiedShape(self, *args) -> "TopoDS_Shape":
        """
        * Returns modified shape obtained from initial shape.
        	:param theInitShape:
        	:type theInitShape: TopoDS_Shape
        	:rtype: TopoDS_Shape
        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_ModifiedShape(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        * Removes all location correspodingly to RemoveLevel.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_Remove(self, *args)


    def RemoveLevel(self, *args) -> "TopAbs_ShapeEnum":
        """
        * sets level starting with that location will be removed.Value of level can be set to TopAbs_SHAPE,TopAbs_COMPOUND,TopAbs_SOLID,TopAbs_SHELL,TopAbs_FACE.By default TopAbs_SHAPE. In this case location will be removed for all shape types for exception of compound.
        	:rtype: TopAbs_ShapeEnum
        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_RemoveLevel(self, *args)


    def SetRemoveLevel(self, *args) -> "void":
        """
        * sets level starting with that location will be removed, by default TopAbs_SHAPE. In this case locations will be kept for specified shape and if specified shape is TopAbs_COMPOUND for sub-shapes of first level.
        	:param theLevel:
        	:type theLevel: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_SetRemoveLevel(self, *args)


    def __init__(self, *args):
        """
        * Empy constructor
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_RemoveLocations_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_RemoveLocations(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_RemoveLocations_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_RemoveLocations
ShapeUpgrade_RemoveLocations.GetResult = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations_GetResult, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations.ModifiedShape = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations_ModifiedShape, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations.Remove = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations_Remove, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations.RemoveLevel = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations_RemoveLevel, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations.SetRemoveLevel = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveLocations_SetRemoveLevel, None, ShapeUpgrade_RemoveLocations)
ShapeUpgrade_RemoveLocations_swigregister = _ShapeUpgrade.ShapeUpgrade_RemoveLocations_swigregister
ShapeUpgrade_RemoveLocations_swigregister(ShapeUpgrade_RemoveLocations)

class ShapeUpgrade_ShapeDivide(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetContext(self, *args) -> "opencascade::handle< ShapeBuild_ReShape >":
        """
        * Returns context with all the modifications made during last call(s) to Perform() recorded
        	:rtype: opencascade::handle<ShapeBuild_ReShape>
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_GetContext(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initialize by a Shape.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Init(self, *args)


    def MsgRegistrator(self, *args) -> "opencascade::handle< ShapeExtend_BasicMsgRegistrator >":
        """
        * Returns message registrator
        	:rtype: opencascade::handle<ShapeExtend_BasicMsgRegistrator>
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_MsgRegistrator(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        * Performs splitting and computes the resulting shape If newContext is True (default), the internal context will be cleared at start, else previous substitutions will be acting.
        	:param newContext: default value is Standard_True
        	:type newContext: bool
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Perform(self, *args)


    def Result(self, *args) -> "TopoDS_Shape":
        """
        * Gives the resulting Shape, or Null shape if not done.
        	:rtype: TopoDS_Shape
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Result(self, *args)


    def SendMsg(self, *args) -> "void":
        """
        * Sends a message to be attached to the shape. Calls corresponding message of message registrator.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param message:
        	:type message: Message_Msg
        	:param gravity: default value is Message_Info
        	:type gravity: Message_Gravity
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SendMsg(self, *args)


    def SetContext(self, *args) -> "void":
        """
        * Sets context with recorded modifications to be applied during next call(s) to Perform(shape,Standard_False)
        	:param context:
        	:type context: ShapeBuild_ReShape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetContext(self, *args)


    def SetEdgeMode(self, *args) -> "void":
        """
        * Sets mode for splitting 3d curves from edges. 0 - only curve 3d from free edges. 1 - only curve 3d from shared edges. 2 - all curve 3d.
        	:param aEdgeMode:
        	:type aEdgeMode: int
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetEdgeMode(self, *args)


    def SetMaxTolerance(self, *args) -> "void":
        """
        * Sets maximal allowed tolerance
        	:param maxtol:
        	:type maxtol: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMaxTolerance(self, *args)


    def SetMinTolerance(self, *args) -> "void":
        """
        * Sets minimal allowed tolerance
        	:param mintol:
        	:type mintol: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMinTolerance(self, *args)


    def SetMsgRegistrator(self, *args) -> "void":
        """
        * Sets message registrator
        	:param msgreg:
        	:type msgreg: ShapeExtend_BasicMsgRegistrator
        	:rtype: void
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMsgRegistrator(self, *args)


    def SetPrecision(self, *args) -> "void":
        """
        * Defines the spatial precision used for splitting
        	:param Prec:
        	:type Prec: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetPrecision(self, *args)


    def SetSplitFaceTool(self, *args) -> "void":
        """
        * Sets the tool for splitting faces.
        	:param splitFaceTool:
        	:type splitFaceTool: ShapeUpgrade_FaceDivide
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetSplitFaceTool(self, *args)


    def SetSurfaceSegmentMode(self, *args) -> "void":
        """
        * Purpose sets mode for trimming (segment) surface by wire UV bounds.
        	:param Segment:
        	:type Segment: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetSurfaceSegmentMode(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * Initialize by a Shape.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivide(*args))

    def Status(self, *args) -> "Standard_Boolean":
        """
        * Queries the status of last call to Perform OK : no splitting was done (or no call to Perform) DONE1: some edges were splitted DONE2: surface was splitted FAIL1: some errors occured
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Status(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivide
ShapeUpgrade_ShapeDivide.GetContext = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_GetContext, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_Init, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.MsgRegistrator = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_MsgRegistrator, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_Perform, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.Result = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_Result, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SendMsg = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SendMsg, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetContext = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetContext, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetEdgeMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetEdgeMode, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetMaxTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMaxTolerance, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetMinTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMinTolerance, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetMsgRegistrator = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMsgRegistrator, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetPrecision = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetPrecision, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetSplitFaceTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetSplitFaceTool, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.SetSurfaceSegmentMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetSurfaceSegmentMode, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivide_Status, None, ShapeUpgrade_ShapeDivide)
ShapeUpgrade_ShapeDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivide_swigregister
ShapeUpgrade_ShapeDivide_swigregister(ShapeUpgrade_ShapeDivide)

class ShapeUpgrade_ShellSewing(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ApplySewing(self, *args) -> "TopoDS_Shape":
        """
        * Builds a new shape from a former one, by calling Sewing from BRepBuilderAPI. Rebuilt solids are oriented to be 'not infinite' //! If <tol> is not given (i.e. value 0. by default), it is computed as the mean tolerance recorded in <shape> //! If no shell has been sewed, this method returns the input shape
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param tol: default value is 0.0
        	:type tol: float
        	:rtype: TopoDS_Shape
        """
        return _ShapeUpgrade.ShapeUpgrade_ShellSewing_ApplySewing(self, *args)


    def __init__(self, *args):
        """
        * Creates a ShellSewing, empty
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ShellSewing_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShellSewing(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShellSewing
ShapeUpgrade_ShellSewing.ApplySewing = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShellSewing_ApplySewing, None, ShapeUpgrade_ShellSewing)
ShapeUpgrade_ShellSewing_swigregister = _ShapeUpgrade.ShapeUpgrade_ShellSewing_swigregister
ShapeUpgrade_ShellSewing_swigregister(ShapeUpgrade_ShellSewing)

class ShapeUpgrade_SplitCurve(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Build(self, *args) -> "void":
        """
        * If Segment is True, the result is composed with segments of the curve bounded by the SplitValues. If Segment is False, the result is composed with trimmed Curves all based on the same complete curve.
        	:param Segment:
        	:type Segment: bool
        	:rtype: void
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Build(self, *args)


    def Compute(self, *args) -> "void":
        """
        * Calculates points for correction/splitting of the curve
        	:rtype: void
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Compute(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes with curve first and last parameters.
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Init(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs correction/splitting of the curve. First defines splitting values by method Compute(), then calls method Build().
        	:param Segment: default value is Standard_True
        	:type Segment: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Perform(self, *args)


    def SetSplitValues(self, *args) -> "void":
        """
        * Sets the parameters where splitting has to be done.
        	:param SplitValues:
        	:type SplitValues: TColStd_HSequenceOfReal
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_SetSplitValues(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_SplitCurve_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitCurve(*args))

    def SplitValues(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal > const &":
        """
        * returns all the splitting values including the First and Last parameters of the input curve Merges input split values and new ones into myGlobalKnots
        	:rtype: opencascade::handle<TColStd_HSequenceOfReal>
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_SplitValues(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        * Returns the status OK - no splitting is needed DONE1 - splitting required and gives more than one segment DONE2 - splitting is required, but gives only one segment (initial) DONE3 - geometric form of the curve or parametrisation is modified
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitCurve
ShapeUpgrade_SplitCurve.Build = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_Build, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.Compute = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_Compute, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_Init, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_Perform, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.SetSplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_SetSplitValues, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.SplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_SplitValues, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve_Status, None, ShapeUpgrade_SplitCurve)
ShapeUpgrade_SplitCurve_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve_swigregister
ShapeUpgrade_SplitCurve_swigregister(ShapeUpgrade_SplitCurve)

class ShapeUpgrade_SplitSurface(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Build(self, *args) -> "void":
        """
        * Performs splitting of the supporting surface. If resulting surface is B-Spline and Segment is True, the result is composed with segments of the surface bounded by the U and V SplitValues (method Geom_BSplineSurface::Segment is used). If Segment is False, the result is composed with Geom_RectangularTrimmedSurface all based on the same complete surface. Fields myNbResultingRow and myNbResultingCol must be set to specify the size of resulting grid of surfaces.
        	:param Segment:
        	:type Segment: bool
        	:rtype: void
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Build(self, *args)


    def Compute(self, *args) -> "void":
        """
        * Calculates points for correction/splitting of the surface.
        	:param Segment: default value is Standard_True
        	:type Segment: bool
        	:rtype: void
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Compute(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes with single supporting surface.
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None
        * Initializes with single supporting surface with bounding parameters.
        	:param S:
        	:type S: Geom_Surface
        	:param UFirst:
        	:type UFirst: float
        	:param ULast:
        	:type ULast: float
        	:param VFirst:
        	:type VFirst: float
        	:param VLast:
        	:type VLast: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Init(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Performs correction/splitting of the surface. First defines splitting values by method Compute(), then calls method Build().
        	:param Segment: default value is Standard_True
        	:type Segment: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Perform(self, *args)


    def ResSurfaces(self, *args) -> "opencascade::handle< ShapeExtend_CompositeSurface > const &":
        """
        * Returns obtained surfaces after splitting as CompositeSurface
        	:rtype: opencascade::handle<ShapeExtend_CompositeSurface>
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_ResSurfaces(self, *args)


    def SetUSplitValues(self, *args) -> "void":
        """
        * Sets U parameters where splitting has to be done
        	:param UValues:
        	:type UValues: TColStd_HSequenceOfReal
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_SetUSplitValues(self, *args)


    def SetVSplitValues(self, *args) -> "void":
        """
        * Sets V parameters where splitting has to be done
        	:param VValues:
        	:type VValues: TColStd_HSequenceOfReal
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_SetVSplitValues(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_SplitSurface_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitSurface(*args))

    def Status(self, *args) -> "Standard_Boolean":
        """
        * Returns the status OK - no splitting is needed DONE1 - splitting required and gives more than one patch DONE2 - splitting is required, but gives only single patch (initial) DONE3 - geometric form of the surface or parametrisation is modified
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Status(self, *args)


    def USplitValues(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal > const &":
        """
        * returns all the U splitting values including the First and Last parameters of the input surface
        	:rtype: opencascade::handle<TColStd_HSequenceOfReal>
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_USplitValues(self, *args)


    def VSplitValues(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal > const &":
        """
        * returns all the splitting V values including the First and Last parameters of the input surface
        	:rtype: opencascade::handle<TColStd_HSequenceOfReal>
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_VSplitValues(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitSurface
ShapeUpgrade_SplitSurface.Build = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_Build, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.Compute = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_Compute, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_Init, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_Perform, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.ResSurfaces = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_ResSurfaces, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.SetUSplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_SetUSplitValues, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.SetVSplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_SetVSplitValues, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_Status, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.USplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_USplitValues, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface.VSplitValues = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurface_VSplitValues, None, ShapeUpgrade_SplitSurface)
ShapeUpgrade_SplitSurface_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurface_swigregister
ShapeUpgrade_SplitSurface_swigregister(ShapeUpgrade_SplitSurface)

class ShapeUpgrade_Tool(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Context(self, *args) -> "opencascade::handle< ShapeBuild_ReShape >":
        """
        * Returns context
        	:rtype: opencascade::handle<ShapeBuild_ReShape>
        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_Context(self, *args)


    def LimitTolerance(self, *args) -> "Standard_Real":
        """
        * Returns tolerance limited by [myMinTol,myMaxTol]
        	:param toler:
        	:type toler: float
        	:rtype: float
        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_LimitTolerance(self, *args)


    def MaxTolerance(self, *args) -> "Standard_Real":
        """
        * Returns maximal allowed tolerance
        	:rtype: float
        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_MaxTolerance(self, *args)


    def MinTolerance(self, *args) -> "Standard_Real":
        """
        * Returns minimal allowed tolerance
        	:rtype: float
        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_MinTolerance(self, *args)


    def Precision(self, *args) -> "Standard_Real":
        """
        * Returns basic precision value
        	:rtype: float
        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_Precision(self, *args)


    def Set(self, *args) -> "void":
        """
        * Copy all fields from another Root object
        	:param tool:
        	:type tool: ShapeUpgrade_Tool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_Set(self, *args)


    def SetContext(self, *args) -> "void":
        """
        * Sets context
        	:param context:
        	:type context: ShapeBuild_ReShape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetContext(self, *args)


    def SetMaxTolerance(self, *args) -> "void":
        """
        * Sets maximal allowed tolerance
        	:param maxtol:
        	:type maxtol: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetMaxTolerance(self, *args)


    def SetMinTolerance(self, *args) -> "void":
        """
        * Sets minimal allowed tolerance
        	:param mintol:
        	:type mintol: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetMinTolerance(self, *args)


    def SetPrecision(self, *args) -> "void":
        """
        * Sets basic precision value
        	:param preci:
        	:type preci: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetPrecision(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_Tool_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_Tool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_Tool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_Tool
ShapeUpgrade_Tool.Context = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_Context, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.LimitTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_LimitTolerance, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.MaxTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_MaxTolerance, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.MinTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_MinTolerance, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.Precision = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_Precision, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.Set = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_Set, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.SetContext = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_SetContext, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.SetMaxTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_SetMaxTolerance, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.SetMinTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_SetMinTolerance, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool.SetPrecision = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_Tool_SetPrecision, None, ShapeUpgrade_Tool)
ShapeUpgrade_Tool_swigregister = _ShapeUpgrade.ShapeUpgrade_Tool_swigregister
ShapeUpgrade_Tool_swigregister(ShapeUpgrade_Tool)

class ShapeUpgrade_UnifySameDomain(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AllowInternalEdges(self, *args) -> "void":
        """
        * Sets the flag defining whether it is allowed to create internal edges inside merged faces in the case of non-manifold topology. Without this flag merging through multi connected edge is forbidden. Default value is false.
        	:param theValue:
        	:type theValue: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_AllowInternalEdges(self, *args)


    def Build(self, *args) -> "void":
        """
        * Performs unification and builds the resulting shape.
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Build(self, *args)


    def History(self, *args) -> "opencascade::handle< BRepTools_History > const &":
        """
        * Returns the history of the processed shapes.
        	:rtype: opencascade::handle<BRepTools_History>
        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_History(self, *args)


    def Initialize(self, *args) -> "void":
        """
        * Initializes with a shape and necessary flags. It does not perform unification. If you intend to nullify the History place holder do it after initialization.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param UnifyEdges: default value is Standard_True
        	:type UnifyEdges: bool
        	:param UnifyFaces: default value is Standard_True
        	:type UnifyFaces: bool
        	:param ConcatBSplines: default value is Standard_False
        	:type ConcatBSplines: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Initialize(self, *args)


    def KeepShape(self, *args) -> "void":
        """
        * Sets the shape for avoid merging of the faces/edges. This shape can be vertex or edge. If the shape is a vertex it forbids merging of connected edges. If the shape is a edge it forbids merging of connected faces. This method can be called several times to keep several shapes.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_KeepShape(self, *args)


    def KeepShapes(self, *args) -> "void":
        """
        * Sets the map of shapes for avoid merging of the faces/edges. It allows passing a ready to use map instead of calling many times the method KeepShape.
        	:param theShapes:
        	:type theShapes: TopTools_MapOfShape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_KeepShapes(self, *args)


    def SetAngularTolerance(self, *args) -> "void":
        """
        * Sets the angular tolerance. If two shapes form a connection angle greater than this value they will not be merged. Default value is Precision::Angular().
        	:param theValue:
        	:type theValue: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_SetAngularTolerance(self, *args)


    def SetLinearTolerance(self, *args) -> "void":
        """
        * Sets the linear tolerance. It plays the role of chord error when taking decision about merging of shapes. Default value is Precision::Confusion().
        	:param theValue:
        	:type theValue: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_SetLinearTolerance(self, *args)


    def SetSafeInputMode(self, *args) -> "void":
        """
        * Sets the flag defining the behavior of the algorithm regarding modification of input shape. If this flag is equal to True then the input (original) shape can't be modified during modification process. Default value is true.
        	:param theValue:
        	:type theValue: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_SetSafeInputMode(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * Gives the resulting shape
        	:rtype: TopoDS_Shape
        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Shape(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        * Constructor defining input shape and necessary flags. It does not perform unification.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param UnifyEdges: default value is Standard_True
        	:type UnifyEdges: bool
        	:param UnifyFaces: default value is Standard_True
        	:type UnifyFaces: bool
        	:param ConcatBSplines: default value is Standard_False
        	:type ConcatBSplines: bool
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_UnifySameDomain(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_UnifySameDomain_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_UnifySameDomain
ShapeUpgrade_UnifySameDomain.AllowInternalEdges = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_AllowInternalEdges, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.Build = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Build, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.History = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_History, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.Initialize = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Initialize, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.KeepShape = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_KeepShape, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.KeepShapes = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_KeepShapes, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.SetAngularTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_SetAngularTolerance, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.SetLinearTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_SetLinearTolerance, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.SetSafeInputMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_SetSafeInputMode, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain.Shape = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Shape, None, ShapeUpgrade_UnifySameDomain)
ShapeUpgrade_UnifySameDomain_swigregister = _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_swigregister
ShapeUpgrade_UnifySameDomain_swigregister(ShapeUpgrade_UnifySameDomain)

class ShapeUpgrade_ConvertSurfaceToBezierBasis(ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetBSplineMode(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_BSplineSurface conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetBSplineMode(self, *args)


    def GetExtrusionMode(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_SurfaceOfLinearExtrusion conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetExtrusionMode(self, *args)


    def GetPlaneMode(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_Pline conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetPlaneMode(self, *args)


    def GetRevolutionMode(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_SurfaceOfRevolution conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetRevolutionMode(self, *args)


    def Segments(self, *args) -> "opencascade::handle< ShapeExtend_CompositeSurface >":
        """
        * Returns the grid of bezier based surfaces correspondent to original surface.
        	:rtype: opencascade::handle<ShapeExtend_CompositeSurface>
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_Segments(self, *args)


    def SetBSplineMode(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_BSplineSurface to Bezier
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetBSplineMode(self, *args)


    def SetExtrusionMode(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_SurfaceOfLinearExtrusion to Bezier
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetExtrusionMode(self, *args)


    def SetPlaneMode(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_Plane to Bezier
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetPlaneMode(self, *args)


    def SetRevolutionMode(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_SurfaceOfRevolution to Bezier
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetRevolutionMode(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ConvertSurfaceToBezierBasis(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ConvertSurfaceToBezierBasis
ShapeUpgrade_ConvertSurfaceToBezierBasis.GetBSplineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetBSplineMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.GetExtrusionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetExtrusionMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.GetPlaneMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetPlaneMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.GetRevolutionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetRevolutionMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.Segments = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_Segments, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.SetBSplineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetBSplineMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.SetExtrusionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetExtrusionMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.SetPlaneMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetPlaneMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis.SetRevolutionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetRevolutionMode, None, ShapeUpgrade_ConvertSurfaceToBezierBasis)
ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister = _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister
ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister(ShapeUpgrade_ConvertSurfaceToBezierBasis)

class ShapeUpgrade_EdgeDivide(ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Clear(self, *args)


    def Compute(self, *args) -> "Standard_Boolean":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Compute(self, *args)


    def GetSplitCurve2dTool(self, *args) -> "opencascade::handle< ShapeUpgrade_SplitCurve2d >":
        """
        * Returns the tool for splitting pcurves.
        	:rtype: opencascade::handle<ShapeUpgrade_SplitCurve2d>
        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetSplitCurve2dTool(self, *args)


    def GetSplitCurve3dTool(self, *args) -> "opencascade::handle< ShapeUpgrade_SplitCurve3d >":
        """
        * Returns the tool for splitting 3D curves.
        	:rtype: opencascade::handle<ShapeUpgrade_SplitCurve3d>
        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetSplitCurve3dTool(self, *args)


    def HasCurve2d(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_HasCurve2d(self, *args)


    def HasCurve3d(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_HasCurve3d(self, *args)


    def Knots2d(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal >":
        """:rtype: opencascade::handle<TColStd_HSequenceOfReal>"""
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Knots2d(self, *args)


    def Knots3d(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal >":
        """:rtype: opencascade::handle<TColStd_HSequenceOfReal>"""
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Knots3d(self, *args)


    def SetFace(self, *args) -> "void":
        """
        * Sets supporting surface by face
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetFace(self, *args)


    def SetSplitCurve2dTool(self, *args) -> "void":
        """
        * Sets the tool for splitting pcurves.
        	:param splitCurve2dTool:
        	:type splitCurve2dTool: ShapeUpgrade_SplitCurve2d
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetSplitCurve2dTool(self, *args)


    def SetSplitCurve3dTool(self, *args) -> "void":
        """
        * Sets the tool for splitting 3D curves.
        	:param splitCurve3dTool:
        	:type splitCurve3dTool: ShapeUpgrade_SplitCurve3d
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetSplitCurve3dTool(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_EdgeDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_EdgeDivide(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_EdgeDivide_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_EdgeDivide
ShapeUpgrade_EdgeDivide.Clear = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_Clear, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.Compute = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_Compute, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.GetSplitCurve2dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetSplitCurve2dTool, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.GetSplitCurve3dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetSplitCurve3dTool, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.HasCurve2d = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_HasCurve2d, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.HasCurve3d = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_HasCurve3d, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.Knots2d = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_Knots2d, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.Knots3d = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_Knots3d, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.SetFace = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetFace, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.SetSplitCurve2dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetSplitCurve2dTool, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide.SetSplitCurve3dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetSplitCurve3dTool, None, ShapeUpgrade_EdgeDivide)
ShapeUpgrade_EdgeDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_EdgeDivide_swigregister
ShapeUpgrade_EdgeDivide_swigregister(ShapeUpgrade_EdgeDivide)

class ShapeUpgrade_FaceDivide(ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetSplitSurfaceTool(self, *args) -> "opencascade::handle< ShapeUpgrade_SplitSurface >":
        """
        * Returns the tool for splitting surfaces. This tool must be already initialized.
        	:rtype: opencascade::handle<ShapeUpgrade_SplitSurface>
        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_GetSplitSurfaceTool(self, *args)


    def GetWireDivideTool(self, *args) -> "opencascade::handle< ShapeUpgrade_WireDivide >":
        """
        * Returns the tool for dividing edges on Face. This tool must be already initialized.
        	:rtype: opencascade::handle<ShapeUpgrade_WireDivide>
        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_GetWireDivideTool(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initialize by a Face.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Init(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        * Performs splitting and computes the resulting shell The context is used to keep track of former splittings in order to keep sharings. It is updated according to modifications made.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Perform(self, *args)


    def Result(self, *args) -> "TopoDS_Shape":
        """
        * Gives the resulting Shell, or Face, or Null shape if not done.
        	:rtype: TopoDS_Shape
        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Result(self, *args)


    def SetSplitSurfaceTool(self, *args) -> "void":
        """
        * Sets the tool for splitting surfaces.
        	:param splitSurfaceTool:
        	:type splitSurfaceTool: ShapeUpgrade_SplitSurface
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SetSplitSurfaceTool(self, *args)


    def SetSurfaceSegmentMode(self, *args) -> "void":
        """
        * Purpose sets mode for trimming (segment) surface by wire UV bounds.
        	:param Segment:
        	:type Segment: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SetSurfaceSegmentMode(self, *args)


    def SetWireDivideTool(self, *args) -> "void":
        """
        * Sets the tool for dividing edges on Face.
        	:param wireDivideTool:
        	:type wireDivideTool: ShapeUpgrade_WireDivide
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SetWireDivideTool(self, *args)


    def __init__(self, *args):
        """
        * Creates empty constructor.
        	:rtype: None
        * Initialize by a Face.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_FaceDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_FaceDivide(*args))

    def SplitCurves(self, *args) -> "Standard_Boolean":
        """
        * Performs splitting of curves of all the edges in the shape and divides these edges.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SplitCurves(self, *args)


    def SplitSurface(self, *args) -> "Standard_Boolean":
        """
        * Performs splitting of surface and computes the shell from source face.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SplitSurface(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        * Queries the status of last call to Perform OK : no splitting was done (or no call to Perform) DONE1: some edges were splitted DONE2: surface was splitted DONE3: surface was modified without splitting FAIL1: some fails encountered during splitting wires FAIL2: face cannot be splitted
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_FaceDivide_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_FaceDivide
ShapeUpgrade_FaceDivide.GetSplitSurfaceTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_GetSplitSurfaceTool, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.GetWireDivideTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_GetWireDivideTool, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_Init, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_Perform, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.Result = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_Result, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.SetSplitSurfaceTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_SetSplitSurfaceTool, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.SetSurfaceSegmentMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_SetSurfaceSegmentMode, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.SetWireDivideTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_SetWireDivideTool, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.SplitCurves = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_SplitCurves, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.SplitSurface = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_SplitSurface, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivide_Status, None, ShapeUpgrade_FaceDivide)
ShapeUpgrade_FaceDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_FaceDivide_swigregister
ShapeUpgrade_FaceDivide_swigregister(ShapeUpgrade_FaceDivide)

class ShapeUpgrade_FixSmallCurves(ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Approx(self, *args) -> "Standard_Boolean":
        """
        :param Curve3d:
        	:type Curve3d: Geom_Curve
        	:param Curve2d:
        	:type Curve2d: Geom2d_Curve
        	:param Curve2dR:
        	:type Curve2dR: Geom2d_Curve
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Approx(self, *args)


    def Init(self, *args) -> "void":
        """
        :param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Init(self, *args)


    def SetSplitCurve2dTool(self, *args) -> "void":
        """
        * Sets the tool for splitting pcurves.
        	:param splitCurve2dTool:
        	:type splitCurve2dTool: ShapeUpgrade_SplitCurve2d
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_SetSplitCurve2dTool(self, *args)


    def SetSplitCurve3dTool(self, *args) -> "void":
        """
        * Sets the tool for splitting 3D curves.
        	:param splitCurve3dTool:
        	:type splitCurve3dTool: ShapeUpgrade_SplitCurve3d
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_SetSplitCurve3dTool(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_FixSmallCurves(*args))

    def Status(self, *args) -> "Standard_Boolean":
        """
        * Queries the status of last call to Perform OK : DONE1: DONE2: FAIL1:
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_FixSmallCurves_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_FixSmallCurves
ShapeUpgrade_FixSmallCurves.Approx = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Approx, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Init, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves.SetSplitCurve2dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves_SetSplitCurve2dTool, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves.SetSplitCurve3dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves_SetSplitCurve3dTool, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Status, None, ShapeUpgrade_FixSmallCurves)
ShapeUpgrade_FixSmallCurves_swigregister = _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_swigregister
ShapeUpgrade_FixSmallCurves_swigregister(ShapeUpgrade_FixSmallCurves)

class ShapeUpgrade_RemoveInternalWires(ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetResult(self, *args) -> "TopoDS_Shape":
        """
        * Get result shape
        	:rtype: TopoDS_Shape
        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetResult(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initialize by a Shape.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Init(self, *args)


    def GetMinArea(self) -> "Standard_Real":
        """GetMinArea(ShapeUpgrade_RemoveInternalWires self) -> Standard_Real"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetMinArea(self)


    def SetMinArea(self, value: 'Standard_Real') -> "void":
        """SetMinArea(ShapeUpgrade_RemoveInternalWires self, Standard_Real value)"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_SetMinArea(self, value)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        * Removes all internal wires having area less than area specified as minimal allowed area
        	:rtype: bool
        * If specified sequence of shape contains - 1.wires then these wires will be removed if they have area less than allowed min area. 2.faces than internal wires from these faces will be removed if they have area less than allowed min area.
        	:param theSeqShapes:
        	:type theSeqShapes: TopTools_SequenceOfShape
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Perform(self, *args)


    def GetRemoveFaceMode(self) -> "Standard_Boolean":
        """GetRemoveFaceMode(ShapeUpgrade_RemoveInternalWires self) -> Standard_Boolean"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetRemoveFaceMode(self)


    def SetRemoveFaceMode(self, value: 'Standard_Boolean') -> "void":
        """SetRemoveFaceMode(ShapeUpgrade_RemoveInternalWires self, Standard_Boolean value)"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_SetRemoveFaceMode(self, value)


    def RemovedFaces(self, *args) -> "TopTools_SequenceOfShape const &":
        """
        * Returns sequence of removed faces.
        	:rtype: TopTools_SequenceOfShape
        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_RemovedFaces(self, *args)


    def RemovedWires(self, *args) -> "TopTools_SequenceOfShape const &":
        """
        * Returns sequence of removed faces.
        	:rtype: TopTools_SequenceOfShape
        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_RemovedWires(self, *args)


    def __init__(self, *args):
        """
        * Creates empty constructor.
        	:rtype: None
        :param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_RemoveInternalWires(*args))

    def Status(self, *args) -> "Standard_Boolean":
        """
        * Queries status of last call to Perform() : OK - nothing was done :DONE1 - internal wires were removed :DONE2 - small faces were removed. :FAIL1 - initial shape is not specified :FAIL2 - specified sub-shape is not belonged to inotial shape.
        	:param theStatus:
        	:type theStatus: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_RemoveInternalWires_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_RemoveInternalWires
ShapeUpgrade_RemoveInternalWires.GetResult = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetResult, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Init, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.GetMinArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetMinArea, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.SetMinArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_SetMinArea, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Perform, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.GetRemoveFaceMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetRemoveFaceMode, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.SetRemoveFaceMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_SetRemoveFaceMode, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.RemovedFaces = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_RemovedFaces, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.RemovedWires = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_RemovedWires, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Status, None, ShapeUpgrade_RemoveInternalWires)
ShapeUpgrade_RemoveInternalWires_swigregister = _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_swigregister
ShapeUpgrade_RemoveInternalWires_swigregister(ShapeUpgrade_RemoveInternalWires)

class ShapeUpgrade_ShapeConvertToBezier(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Get2dConversion(self, *args) -> "Standard_Boolean":
        """
        * Returns the 2D conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get2dConversion(self, *args)


    def Get3dCircleConversion(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_Circle conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dCircleConversion(self, *args)


    def Get3dConicConversion(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_Conic conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dConicConversion(self, *args)


    def Get3dConversion(self, *args) -> "Standard_Boolean":
        """
        * Returns the 3D conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dConversion(self, *args)


    def Get3dLineConversion(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_Line conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dLineConversion(self, *args)


    def GetBSplineMode(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_BSplineSurface conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetBSplineMode(self, *args)


    def GetExtrusionMode(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_SurfaceOfLinearExtrusion conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetExtrusionMode(self, *args)


    def GetPlaneMode(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_Pline conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetPlaneMode(self, *args)


    def GetRevolutionMode(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_SurfaceOfRevolution conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetRevolutionMode(self, *args)


    def GetSurfaceConversion(self, *args) -> "Standard_Boolean":
        """
        * Returns the surface conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetSurfaceConversion(self, *args)


    def Set2dConversion(self, *args) -> "void":
        """
        * Sets mode for conversion 2D curves to bezier.
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set2dConversion(self, *args)


    def Set3dCircleConversion(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_Circle to bezier.
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dCircleConversion(self, *args)


    def Set3dConicConversion(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_Conic to bezier.
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dConicConversion(self, *args)


    def Set3dConversion(self, *args) -> "void":
        """
        * Sets mode for conversion 3d curves to bezier.
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dConversion(self, *args)


    def Set3dLineConversion(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_Line to bezier.
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dLineConversion(self, *args)


    def SetBSplineMode(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_BSplineSurface to Bezier
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetBSplineMode(self, *args)


    def SetExtrusionMode(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_SurfaceOfLinearExtrusion to Bezier
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetExtrusionMode(self, *args)


    def SetPlaneMode(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_Plane to Bezier
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetPlaneMode(self, *args)


    def SetRevolutionMode(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_SurfaceOfRevolution to Bezier
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetRevolutionMode(self, *args)


    def SetSurfaceConversion(self, *args) -> "void":
        """
        * Sets mode for conversion surfaces curves to bezier basis.
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetSurfaceConversion(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        * Initialize by a Shape.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeConvertToBezier(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeConvertToBezier
ShapeUpgrade_ShapeConvertToBezier.Get2dConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get2dConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Get3dCircleConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dCircleConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Get3dConicConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dConicConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Get3dConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Get3dLineConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dLineConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.GetBSplineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetBSplineMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.GetExtrusionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetExtrusionMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.GetPlaneMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetPlaneMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.GetRevolutionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetRevolutionMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.GetSurfaceConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetSurfaceConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Set2dConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set2dConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Set3dCircleConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dCircleConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Set3dConicConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dConicConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Set3dConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.Set3dLineConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dLineConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.SetBSplineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetBSplineMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.SetExtrusionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetExtrusionMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.SetPlaneMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetPlaneMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.SetRevolutionMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetRevolutionMode, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier.SetSurfaceConversion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetSurfaceConversion, None, ShapeUpgrade_ShapeConvertToBezier)
ShapeUpgrade_ShapeConvertToBezier_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_swigregister
ShapeUpgrade_ShapeConvertToBezier_swigregister(ShapeUpgrade_ShapeConvertToBezier)

class ShapeUpgrade_ShapeDivideAngle(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitTool(self, *args) -> "void":
        """
        * Resets tool for splitting face with given angle
        	:param MaxAngle:
        	:type MaxAngle: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_InitTool(self, *args)


    def MaxAngle(self, *args) -> "Standard_Real":
        """
        * Returns maximal angle
        	:rtype: float
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_MaxAngle(self, *args)


    def SetMaxAngle(self, *args) -> "void":
        """
        * Set maximal angle (calls InitTool)
        	:param MaxAngle:
        	:type MaxAngle: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_SetMaxAngle(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:param MaxAngle:
        	:type MaxAngle: float
        	:rtype: None
        * Initialize by a Shape.
        	:param MaxAngle:
        	:type MaxAngle: float
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideAngle(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivideAngle
ShapeUpgrade_ShapeDivideAngle.InitTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_InitTool, None, ShapeUpgrade_ShapeDivideAngle)
ShapeUpgrade_ShapeDivideAngle.MaxAngle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_MaxAngle, None, ShapeUpgrade_ShapeDivideAngle)
ShapeUpgrade_ShapeDivideAngle.SetMaxAngle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_SetMaxAngle, None, ShapeUpgrade_ShapeDivideAngle)
ShapeUpgrade_ShapeDivideAngle_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_swigregister
ShapeUpgrade_ShapeDivideAngle_swigregister(ShapeUpgrade_ShapeDivideAngle)

class ShapeUpgrade_ShapeDivideArea(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetMaxArea(self) -> "Standard_Real":
        """GetMaxArea(ShapeUpgrade_ShapeDivideArea self) -> Standard_Real"""
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_GetMaxArea(self)


    def SetMaxArea(self, value: 'Standard_Real') -> "void":
        """SetMaxArea(ShapeUpgrade_ShapeDivideArea self, Standard_Real value)"""
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_SetMaxArea(self, value)


    def __init__(self, *args):
        """
        :rtype: None
        * Initialize by a Shape.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideArea(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivideArea
ShapeUpgrade_ShapeDivideArea.GetMaxArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_GetMaxArea, None, ShapeUpgrade_ShapeDivideArea)
ShapeUpgrade_ShapeDivideArea.SetMaxArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_SetMaxArea, None, ShapeUpgrade_ShapeDivideArea)
ShapeUpgrade_ShapeDivideArea_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_swigregister
ShapeUpgrade_ShapeDivideArea_swigregister(ShapeUpgrade_ShapeDivideArea)

class ShapeUpgrade_ShapeDivideClosed(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetNbSplitPoints(self, *args) -> "void":
        """
        * Sets the number of cuts applied to divide closed faces. The number of resulting faces will be num+1.
        	:param num:
        	:type num: int
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosed_SetNbSplitPoints(self, *args)


    def __init__(self, *args):
        """
        * Initialises tool with shape and default parameter.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosed_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideClosed(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivideClosed
ShapeUpgrade_ShapeDivideClosed.SetNbSplitPoints = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideClosed_SetNbSplitPoints, None, ShapeUpgrade_ShapeDivideClosed)
ShapeUpgrade_ShapeDivideClosed_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosed_swigregister
ShapeUpgrade_ShapeDivideClosed_swigregister(ShapeUpgrade_ShapeDivideClosed)

class ShapeUpgrade_ShapeDivideClosedEdges(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetNbSplitPoints(self, *args) -> "void":
        """
        * Sets the number of cuts applied to divide closed edges. The number of resulting faces will be num+1.
        	:param num:
        	:type num: int
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosedEdges_SetNbSplitPoints(self, *args)


    def __init__(self, *args):
        """
        * Initialises tool with shape and default parameter.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosedEdges_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideClosedEdges(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivideClosedEdges
ShapeUpgrade_ShapeDivideClosedEdges.SetNbSplitPoints = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideClosedEdges_SetNbSplitPoints, None, ShapeUpgrade_ShapeDivideClosedEdges)
ShapeUpgrade_ShapeDivideClosedEdges_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosedEdges_swigregister
ShapeUpgrade_ShapeDivideClosedEdges_swigregister(ShapeUpgrade_ShapeDivideClosedEdges)

class ShapeUpgrade_ShapeDivideContinuity(ShapeUpgrade_ShapeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetBoundaryCriterion(self, *args) -> "void":
        """
        * Defines a criterion of continuity for the boundary (all the Wires) //! The possible values are C0, G1, C1, G2, C2, C3, CN The default is C1 to respect the Cas.Cade Shape Validity. G1 and G2 are not authorized.
        	:param Criterion: default value is GeomAbs_C1
        	:type Criterion: GeomAbs_Shape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetBoundaryCriterion(self, *args)


    def SetPCurveCriterion(self, *args) -> "void":
        """
        * Defines a criterion of continuity for the boundary (all the pcurves of Wires) //! The possible values are C0, G1, C1, G2, C2, C3, CN The default is C1 to respect the Cas.Cade Shape Validity. G1 and G2 are not authorized.
        	:param Criterion: default value is GeomAbs_C1
        	:type Criterion: GeomAbs_Shape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetPCurveCriterion(self, *args)


    def SetSurfaceCriterion(self, *args) -> "void":
        """
        * Defines a criterion of continuity for the boundary (all the Wires) //! The possible values are C0, G1, C1, G2, C2, C3, CN The default is C1 to respect the Cas.Cade Shape Validity. G1 and G2 are not authorized.
        	:param Criterion: default value is GeomAbs_C1
        	:type Criterion: GeomAbs_Shape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetSurfaceCriterion(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * Sets tolerance.
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetTolerance(self, *args)


    def SetTolerance2d(self, *args) -> "void":
        """
        * Sets tolerance.
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetTolerance2d(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * Initialize by a Shape.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideContinuity(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivideContinuity
ShapeUpgrade_ShapeDivideContinuity.SetBoundaryCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetBoundaryCriterion, None, ShapeUpgrade_ShapeDivideContinuity)
ShapeUpgrade_ShapeDivideContinuity.SetPCurveCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetPCurveCriterion, None, ShapeUpgrade_ShapeDivideContinuity)
ShapeUpgrade_ShapeDivideContinuity.SetSurfaceCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetSurfaceCriterion, None, ShapeUpgrade_ShapeDivideContinuity)
ShapeUpgrade_ShapeDivideContinuity.SetTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetTolerance, None, ShapeUpgrade_ShapeDivideContinuity)
ShapeUpgrade_ShapeDivideContinuity.SetTolerance2d = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetTolerance2d, None, ShapeUpgrade_ShapeDivideContinuity)
ShapeUpgrade_ShapeDivideContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_swigregister
ShapeUpgrade_ShapeDivideContinuity_swigregister(ShapeUpgrade_ShapeDivideContinuity)

class ShapeUpgrade_SplitCurve2d(ShapeUpgrade_SplitCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetCurves(self, *args) -> "opencascade::handle< TColGeom2d_HArray1OfCurve > const &":
        """:rtype: opencascade::handle<TColGeom2d_HArray1OfCurve>"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_GetCurves(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes with pcurve with its first and last parameters.
        	:param C:
        	:type C: Geom2d_Curve
        	:rtype: None
        * Initializes with pcurve with its parameters.
        	:param C:
        	:type C: Geom2d_Curve
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_Init(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitCurve2d(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitCurve2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitCurve2d
ShapeUpgrade_SplitCurve2d.GetCurves = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2d_GetCurves, None, ShapeUpgrade_SplitCurve2d)
ShapeUpgrade_SplitCurve2d.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2d_Init, None, ShapeUpgrade_SplitCurve2d)
ShapeUpgrade_SplitCurve2d_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_swigregister
ShapeUpgrade_SplitCurve2d_swigregister(ShapeUpgrade_SplitCurve2d)

class ShapeUpgrade_SplitCurve3d(ShapeUpgrade_SplitCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetCurves(self, *args) -> "opencascade::handle< TColGeom_HArray1OfCurve > const &":
        """:rtype: opencascade::handle<TColGeom_HArray1OfCurve>"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_GetCurves(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes with curve with its first and last parameters.
        	:param C:
        	:type C: Geom_Curve
        	:rtype: None
        * Initializes with curve with its parameters.
        	:param C:
        	:type C: Geom_Curve
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_Init(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitCurve3d(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitCurve3d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitCurve3d
ShapeUpgrade_SplitCurve3d.GetCurves = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3d_GetCurves, None, ShapeUpgrade_SplitCurve3d)
ShapeUpgrade_SplitCurve3d.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3d_Init, None, ShapeUpgrade_SplitCurve3d)
ShapeUpgrade_SplitCurve3d_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_swigregister
ShapeUpgrade_SplitCurve3d_swigregister(ShapeUpgrade_SplitCurve3d)

class ShapeUpgrade_SplitSurfaceAngle(ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MaxAngle(self, *args) -> "Standard_Real":
        """
        * Returns maximal angle
        	:rtype: float
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_MaxAngle(self, *args)


    def SetMaxAngle(self, *args) -> "void":
        """
        * Set maximal angle
        	:param MaxAngle:
        	:type MaxAngle: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_SetMaxAngle(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:param MaxAngle:
        	:type MaxAngle: float
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitSurfaceAngle(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitSurfaceAngle
ShapeUpgrade_SplitSurfaceAngle.MaxAngle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_MaxAngle, None, ShapeUpgrade_SplitSurfaceAngle)
ShapeUpgrade_SplitSurfaceAngle.SetMaxAngle = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_SetMaxAngle, None, ShapeUpgrade_SplitSurfaceAngle)
ShapeUpgrade_SplitSurfaceAngle_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_swigregister
ShapeUpgrade_SplitSurfaceAngle_swigregister(ShapeUpgrade_SplitSurfaceAngle)

class ShapeUpgrade_SplitSurfaceArea(ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetNbParts(self) -> "Standard_Integer":
        """GetNbParts(ShapeUpgrade_SplitSurfaceArea self) -> Standard_Integer"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_GetNbParts(self)


    def SetNbParts(self, value: 'Standard_Integer') -> "void":
        """SetNbParts(ShapeUpgrade_SplitSurfaceArea self, Standard_Integer value)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_SetNbParts(self, value)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitSurfaceArea(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitSurfaceArea_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitSurfaceArea
ShapeUpgrade_SplitSurfaceArea.GetNbParts = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_GetNbParts, None, ShapeUpgrade_SplitSurfaceArea)
ShapeUpgrade_SplitSurfaceArea.SetNbParts = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_SetNbParts, None, ShapeUpgrade_SplitSurfaceArea)
ShapeUpgrade_SplitSurfaceArea_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_swigregister
ShapeUpgrade_SplitSurfaceArea_swigregister(ShapeUpgrade_SplitSurfaceArea)

class ShapeUpgrade_SplitSurfaceContinuity(ShapeUpgrade_SplitSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetCriterion(self, *args) -> "void":
        """
        * Sets criterion for splitting.
        	:param Criterion:
        	:type Criterion: GeomAbs_Shape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_SetCriterion(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * Sets tolerance.
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_SetTolerance(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitSurfaceContinuity(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitSurfaceContinuity
ShapeUpgrade_SplitSurfaceContinuity.SetCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_SetCriterion, None, ShapeUpgrade_SplitSurfaceContinuity)
ShapeUpgrade_SplitSurfaceContinuity.SetTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_SetTolerance, None, ShapeUpgrade_SplitSurfaceContinuity)
ShapeUpgrade_SplitSurfaceContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_swigregister
ShapeUpgrade_SplitSurfaceContinuity_swigregister(ShapeUpgrade_SplitSurfaceContinuity)

class ShapeUpgrade_WireDivide(ShapeUpgrade_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetEdgeDivideTool(self, *args) -> "opencascade::handle< ShapeUpgrade_EdgeDivide >":
        """
        * returns tool for splitting edges
        	:rtype: opencascade::handle<ShapeUpgrade_EdgeDivide>
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_GetEdgeDivideTool(self, *args)


    def GetFixSmallCurveTool(self, *args) -> "opencascade::handle< ShapeUpgrade_FixSmallCurves >":
        """
        * Returns tool for fixing small curves
        	:rtype: opencascade::handle<ShapeUpgrade_FixSmallCurves>
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_GetFixSmallCurveTool(self, *args)


    def GetTransferParamTool(self, *args) -> "opencascade::handle< ShapeAnalysis_TransferParameters >":
        """
        * Returns the tool for Transfer of parameters.
        	:rtype: opencascade::handle<ShapeAnalysis_TransferParameters>
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_GetTransferParamTool(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes by wire and face
        	:param W:
        	:type W: TopoDS_Wire
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        * Initializes by wire and surface
        	:param W:
        	:type W: TopoDS_Wire
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Init(self, *args)


    def Load(self, *args) -> "void":
        """
        * Loads working wire
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        * Creates wire of one edge and calls Load for wire
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Load(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Computes the resulting wire by splitting all the edges according to splitting criteria. All the modifications made are recorded in context (ShapeBuild_ReShape). This tool is applied to all edges before splitting them in order to keep sharings. If no supporting face or surface is defined, only 3d splitting criteria are used.
        	:rtype: void
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Perform(self, *args)


    def SetEdgeDivideTool(self, *args) -> "void":
        """
        * Sets tool for splitting edge
        	:param edgeDivideTool:
        	:type edgeDivideTool: ShapeUpgrade_EdgeDivide
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetEdgeDivideTool(self, *args)


    def SetEdgeMode(self, *args) -> "void":
        """
        * Sets mode for splitting 3d curves from edges. 0 - only curve 3d from free edges. 1 - only curve 3d from shared edges. 2 - all curve 3d.
        	:param EdgeMode:
        	:type EdgeMode: int
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetEdgeMode(self, *args)


    def SetFace(self, *args) -> "void":
        """
        * Sets supporting surface by face
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetFace(self, *args)


    def SetFixSmallCurveTool(self, *args) -> "void":
        """
        * Sets tool for fixing small curves with specified min tolerance;
        	:param FixSmallCurvesTool:
        	:type FixSmallCurvesTool: ShapeUpgrade_FixSmallCurves
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetFixSmallCurveTool(self, *args)


    def SetSplitCurve2dTool(self, *args) -> "void":
        """
        * Sets the tool for splitting pcurves.
        	:param splitCurve2dTool:
        	:type splitCurve2dTool: ShapeUpgrade_SplitCurve2d
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetSplitCurve2dTool(self, *args)


    def SetSplitCurve3dTool(self, *args) -> "void":
        """
        * Sets the tool for splitting 3D curves.
        	:param splitCurve3dTool:
        	:type splitCurve3dTool: ShapeUpgrade_SplitCurve3d
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetSplitCurve3dTool(self, *args)


    def SetSurface(self, *args) -> "void":
        """
        * Sets supporting surface
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None
        * Sets supporting surface with location
        	:param S:
        	:type S: Geom_Surface
        	:param L:
        	:type L: TopLoc_Location
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetSurface(self, *args)


    def SetTransferParamTool(self, *args) -> "void":
        """
        * Sets the tool for Transfer parameters between curves and pcurves.
        	:param TransferParam:
        	:type TransferParam: ShapeAnalysis_TransferParameters
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetTransferParamTool(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_WireDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_WireDivide(*args))

    def Status(self, *args) -> "Standard_Boolean":
        """
        * Queries status of last call to Perform() OK - no edges were splitted, wire left untouched DONE1 - some edges were splitted FAIL1 - some edges have no 3d curve (skipped) FAIL2 - some edges have no pcurve (skipped)
        	:param status:
        	:type status: ShapeExtend_Status
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Status(self, *args)


    def Wire(self, *args) -> "TopoDS_Wire const":
        """
        * Gives the resulting Wire (equal to initial one if not done or Null if not loaded)
        	:rtype: TopoDS_Wire
        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Wire(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_WireDivide_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_WireDivide
ShapeUpgrade_WireDivide.GetEdgeDivideTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_GetEdgeDivideTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.GetFixSmallCurveTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_GetFixSmallCurveTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.GetTransferParamTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_GetTransferParamTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.Init = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_Init, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.Load = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_Load, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.Perform = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_Perform, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetEdgeDivideTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetEdgeDivideTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetEdgeMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetEdgeMode, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetFace = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetFace, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetFixSmallCurveTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetFixSmallCurveTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetSplitCurve2dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetSplitCurve2dTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetSplitCurve3dTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetSplitCurve3dTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetSurface = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetSurface, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.SetTransferParamTool = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_SetTransferParamTool, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.Status = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_Status, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide.Wire = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_WireDivide_Wire, None, ShapeUpgrade_WireDivide)
ShapeUpgrade_WireDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_WireDivide_swigregister
ShapeUpgrade_WireDivide_swigregister(ShapeUpgrade_WireDivide)

class ShapeUpgrade_ClosedEdgeDivide(ShapeUpgrade_EdgeDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ClosedEdgeDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ClosedEdgeDivide(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ClosedEdgeDivide
ShapeUpgrade_ClosedEdgeDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_ClosedEdgeDivide_swigregister
ShapeUpgrade_ClosedEdgeDivide_swigregister(ShapeUpgrade_ClosedEdgeDivide)

class ShapeUpgrade_ClosedFaceDivide(ShapeUpgrade_FaceDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetNbSplitPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of splitting points
        	:rtype: int
        """
        return _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_GetNbSplitPoints(self, *args)


    def SetNbSplitPoints(self, *args) -> "void":
        """
        * Sets the number of cutting lines by which closed face will be splitted. The resulting faces will be num+1.
        	:param num:
        	:type num: int
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_SetNbSplitPoints(self, *args)


    def __init__(self, *args):
        """
        * Creates empty constructor.
        	:rtype: None
        * Initialize by a Face.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ClosedFaceDivide(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_ClosedFaceDivide_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ClosedFaceDivide
ShapeUpgrade_ClosedFaceDivide.GetNbSplitPoints = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_GetNbSplitPoints, None, ShapeUpgrade_ClosedFaceDivide)
ShapeUpgrade_ClosedFaceDivide.SetNbSplitPoints = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_SetNbSplitPoints, None, ShapeUpgrade_ClosedFaceDivide)
ShapeUpgrade_ClosedFaceDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_swigregister
ShapeUpgrade_ClosedFaceDivide_swigregister(ShapeUpgrade_ClosedFaceDivide)

class ShapeUpgrade_ConvertCurve2dToBezier(ShapeUpgrade_SplitCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ConvertCurve2dToBezier(*args))

    def SplitParams(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal >":
        """
        * Returns the list of splitted parameters in original curve parametrisation.
        	:rtype: opencascade::handle<TColStd_HSequenceOfReal>
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_SplitParams(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ConvertCurve2dToBezier
ShapeUpgrade_ConvertCurve2dToBezier.SplitParams = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_SplitParams, None, ShapeUpgrade_ConvertCurve2dToBezier)
ShapeUpgrade_ConvertCurve2dToBezier_swigregister = _ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_swigregister
ShapeUpgrade_ConvertCurve2dToBezier_swigregister(ShapeUpgrade_ConvertCurve2dToBezier)

class ShapeUpgrade_ConvertCurve3dToBezier(ShapeUpgrade_SplitCurve3d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetCircleMode(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_Circle conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetCircleMode(self, *args)


    def GetConicMode(self, *args) -> "Standard_Boolean":
        """
        * Performs converting and computes the resulting shape.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetConicMode(self, *args)


    def GetLineMode(self, *args) -> "Standard_Boolean":
        """
        * Returns the Geom_Line conversion mode.
        	:rtype: bool
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetLineMode(self, *args)


    def SetCircleMode(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_Circle to bezier.
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetCircleMode(self, *args)


    def SetConicMode(self, *args) -> "void":
        """
        * Returns the Geom_Conic conversion mode.
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetConicMode(self, *args)


    def SetLineMode(self, *args) -> "void":
        """
        * Sets mode for conversion Geom_Line to bezier.
        	:param mode:
        	:type mode: bool
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetLineMode(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_ConvertCurve3dToBezier(*args))

    def SplitParams(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal >":
        """
        * Returns the list of splitted parameters in original curve parametrisation.
        	:rtype: opencascade::handle<TColStd_HSequenceOfReal>
        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SplitParams(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ConvertCurve3dToBezier
ShapeUpgrade_ConvertCurve3dToBezier.GetCircleMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetCircleMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.GetConicMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetConicMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.GetLineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetLineMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.SetCircleMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetCircleMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.SetConicMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetConicMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.SetLineMode = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetLineMode, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier.SplitParams = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SplitParams, None, ShapeUpgrade_ConvertCurve3dToBezier)
ShapeUpgrade_ConvertCurve3dToBezier_swigregister = _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_swigregister
ShapeUpgrade_ConvertCurve3dToBezier_swigregister(ShapeUpgrade_ConvertCurve3dToBezier)

class ShapeUpgrade_FaceDivideArea(ShapeUpgrade_FaceDivide):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetMaxArea(self) -> "Standard_Real":
        """GetMaxArea(ShapeUpgrade_FaceDivideArea self) -> Standard_Real"""
        return _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_GetMaxArea(self)


    def SetMaxArea(self, value: 'Standard_Real') -> "void":
        """SetMaxArea(ShapeUpgrade_FaceDivideArea self, Standard_Real value)"""
        return _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_SetMaxArea(self, value)


    def __init__(self, *args):
        """
        * Creates empty constructor.
        	:rtype: None
        :param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_FaceDivideArea(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_FaceDivideArea_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_FaceDivideArea
ShapeUpgrade_FaceDivideArea.GetMaxArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivideArea_GetMaxArea, None, ShapeUpgrade_FaceDivideArea)
ShapeUpgrade_FaceDivideArea.SetMaxArea = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_FaceDivideArea_SetMaxArea, None, ShapeUpgrade_FaceDivideArea)
ShapeUpgrade_FaceDivideArea_swigregister = _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_swigregister
ShapeUpgrade_FaceDivideArea_swigregister(ShapeUpgrade_FaceDivideArea)

class ShapeUpgrade_FixSmallBezierCurves(ShapeUpgrade_FixSmallCurves):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """:rtype: None"""
        _ShapeUpgrade.ShapeUpgrade_FixSmallBezierCurves_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_FixSmallBezierCurves(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_FixSmallBezierCurves
ShapeUpgrade_FixSmallBezierCurves_swigregister = _ShapeUpgrade.ShapeUpgrade_FixSmallBezierCurves_swigregister
ShapeUpgrade_FixSmallBezierCurves_swigregister(ShapeUpgrade_FixSmallBezierCurves)

class ShapeUpgrade_SplitCurve2dContinuity(ShapeUpgrade_SplitCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetCriterion(self, *args) -> "void":
        """
        * Sets criterion for splitting.
        	:param Criterion:
        	:type Criterion: GeomAbs_Shape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_SetCriterion(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * Sets tolerance.
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_SetTolerance(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitCurve2dContinuity(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitCurve2dContinuity
ShapeUpgrade_SplitCurve2dContinuity.SetCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_SetCriterion, None, ShapeUpgrade_SplitCurve2dContinuity)
ShapeUpgrade_SplitCurve2dContinuity.SetTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_SetTolerance, None, ShapeUpgrade_SplitCurve2dContinuity)
ShapeUpgrade_SplitCurve2dContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_swigregister
ShapeUpgrade_SplitCurve2dContinuity_swigregister(ShapeUpgrade_SplitCurve2dContinuity)

class ShapeUpgrade_SplitCurve3dContinuity(ShapeUpgrade_SplitCurve3d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetCurve(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """:rtype: opencascade::handle<Geom_Curve>"""
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_GetCurve(self, *args)


    def SetCriterion(self, *args) -> "void":
        """
        * Sets criterion for splitting.
        	:param Criterion:
        	:type Criterion: GeomAbs_Shape
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_SetCriterion(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        * Sets tolerance.
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_SetTolerance(self, *args)


    def __init__(self, *args):
        """
        * Empty constructor.
        	:rtype: None
        """
        _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_swiginit(self, _ShapeUpgrade.new_ShapeUpgrade_SplitCurve3dContinuity(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitCurve3dContinuity
ShapeUpgrade_SplitCurve3dContinuity.GetCurve = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_GetCurve, None, ShapeUpgrade_SplitCurve3dContinuity)
ShapeUpgrade_SplitCurve3dContinuity.SetCriterion = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_SetCriterion, None, ShapeUpgrade_SplitCurve3dContinuity)
ShapeUpgrade_SplitCurve3dContinuity.SetTolerance = new_instancemethod(_ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_SetTolerance, None, ShapeUpgrade_SplitCurve3dContinuity)
ShapeUpgrade_SplitCurve3dContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_swigregister
ShapeUpgrade_SplitCurve3dContinuity_swigregister(ShapeUpgrade_SplitCurve3dContinuity)



