# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepAP209 module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepap209.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StepAP209.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepAP209')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepAP209')
    _StepAP209 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepAP209', [dirname(__file__)])
        except ImportError:
            import _StepAP209
            return _StepAP209
        try:
            _mod = imp.load_module('_StepAP209', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepAP209 = swig_import_helper()
    del swig_import_helper
else:
    import _StepAP209
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepAP209.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_StepAP209.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_StepAP209.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_StepAP209.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_StepAP209.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_StepAP209.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_StepAP209.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_StepAP209.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_StepAP209.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_StepAP209.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_StepAP209.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_StepAP209.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_StepAP209.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_StepAP209.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_StepAP209.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_StepAP209.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_StepAP209.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _StepAP209.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StepAP209.process_exception(error, method_name, class_name)
process_exception = _StepAP209.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.STEPConstruct
import OCC.Core.Transfer
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.StepShape
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.StepAP203
import OCC.Core.XSControl
import OCC.Core.IFSelect
import OCC.Core.TopTools
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.StepVisual
import OCC.Core.Quantity
import OCC.Core.StepFEA
import OCC.Core.StepElement
class StepAP209_Construct(OCC.Core.STEPConstruct.STEPConstruct_Tool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateAP203Structure(self, *args) -> "opencascade::handle< StepData_StepModel >":
        """
        * Create AP203 structure from existing AP209 structure
        	:rtype: opencascade::handle<StepData_StepModel>
        """
        return _StepAP209.StepAP209_Construct_CreateAP203Structure(self, *args)


    def CreateAdding203Entities(self, *args) -> "Standard_Boolean":
        """
        * Create approval.. , date.. , time.. , person.. and organization.. entities for 203 structure
        	:param PD:
        	:type PD: StepBasic_ProductDefinition
        	:param aModel:
        	:type aModel: StepData_StepModel
        	:rtype: bool
        """
        return _StepAP209.StepAP209_Construct_CreateAdding203Entities(self, *args)


    def CreateAddingEntities(self, *args) -> "Standard_Boolean":
        """
        * Create approval.. , date.. , time.. , person.. and organization.. entities for analysis structure
        	:param AnaPD:
        	:type AnaPD: StepBasic_ProductDefinition
        	:rtype: bool
        """
        return _StepAP209.StepAP209_Construct_CreateAddingEntities(self, *args)


    def CreateAnalysStructure(self, *args) -> "Standard_Boolean":
        """
        * Create empty structure for idealized_analysis_shape
        	:param Prod:
        	:type Prod: StepBasic_Product
        	:rtype: bool
        """
        return _StepAP209.StepAP209_Construct_CreateAnalysStructure(self, *args)


    def CreateFeaStructure(self, *args) -> "Standard_Boolean":
        """
        * Create fea structure
        	:param Prod:
        	:type Prod: StepBasic_Product
        	:rtype: bool
        """
        return _StepAP209.StepAP209_Construct_CreateFeaStructure(self, *args)


    def FeaModel(self, *args) -> "opencascade::handle< StepFEA_FeaModel >":
        """
        :param Prod:
        	:type Prod: StepBasic_Product
        	:rtype: opencascade::handle<StepFEA_FeaModel>
        :param PDF:
        	:type PDF: StepBasic_ProductDefinitionFormation
        	:rtype: opencascade::handle<StepFEA_FeaModel>
        :param PDS:
        	:type PDS: StepRepr_ProductDefinitionShape
        	:rtype: opencascade::handle<StepFEA_FeaModel>
        :param PD:
        	:type PD: StepBasic_ProductDefinition
        	:rtype: opencascade::handle<StepFEA_FeaModel>
        """
        return _StepAP209.StepAP209_Construct_FeaModel(self, *args)


    def GetCurElemSection(self, *args) -> "opencascade::handle< StepElement_HSequenceOfCurveElementSectionDefinition >":
        """
        * Getting list of curve_element_section_definitions for given element_representation
        	:param ElemRepr:
        	:type ElemRepr: StepFEA_Curve3dElementRepresentation
        	:rtype: opencascade::handle<StepElement_HSequenceOfCurveElementSectionDefinition>
        """
        return _StepAP209.StepAP209_Construct_GetCurElemSection(self, *args)


    def GetElemGeomRelat(self, *args) -> "opencascade::handle< StepFEA_HSequenceOfElementGeometricRelationship >":
        """:rtype: opencascade::handle<StepFEA_HSequenceOfElementGeometricRelationship>"""
        return _StepAP209.StepAP209_Construct_GetElemGeomRelat(self, *args)


    def GetElementMaterial(self, *args) -> "opencascade::handle< StepElement_HSequenceOfElementMaterial >":
        """:rtype: opencascade::handle<StepElement_HSequenceOfElementMaterial>"""
        return _StepAP209.StepAP209_Construct_GetElementMaterial(self, *args)


    def GetElements1D(self, *args) -> "opencascade::handle< StepFEA_HSequenceOfElementRepresentation >":
        """
        :param theFeaModel:
        	:type theFeaModel: StepFEA_FeaModel
        	:rtype: opencascade::handle<StepFEA_HSequenceOfElementRepresentation>
        """
        return _StepAP209.StepAP209_Construct_GetElements1D(self, *args)


    def GetElements2D(self, *args) -> "opencascade::handle< StepFEA_HSequenceOfElementRepresentation >":
        """
        :param theFEAModel:
        	:type theFEAModel: StepFEA_FeaModel
        	:rtype: opencascade::handle<StepFEA_HSequenceOfElementRepresentation>
        """
        return _StepAP209.StepAP209_Construct_GetElements2D(self, *args)


    def GetElements3D(self, *args) -> "opencascade::handle< StepFEA_HSequenceOfElementRepresentation >":
        """
        :param theFEAModel:
        	:type theFEAModel: StepFEA_FeaModel
        	:rtype: opencascade::handle<StepFEA_HSequenceOfElementRepresentation>
        """
        return _StepAP209.StepAP209_Construct_GetElements3D(self, *args)


    def GetFeaAxis2Placement3d(self, *args) -> "opencascade::handle< StepFEA_FeaAxis2Placement3d >":
        """
        :param theFeaModel:
        	:type theFeaModel: StepFEA_FeaModel
        	:rtype: opencascade::handle<StepFEA_FeaAxis2Placement3d>
        """
        return _StepAP209.StepAP209_Construct_GetFeaAxis2Placement3d(self, *args)


    def GetShReprForElem(self, *args) -> "opencascade::handle< StepShape_ShapeRepresentation >":
        """
        :param ElemRepr:
        	:type ElemRepr: StepFEA_ElementRepresentation
        	:rtype: opencascade::handle<StepShape_ShapeRepresentation>
        """
        return _StepAP209.StepAP209_Construct_GetShReprForElem(self, *args)


    def IdealShape(self, *args) -> "opencascade::handle< StepShape_ShapeRepresentation >":
        """
        :param Prod:
        	:type Prod: StepBasic_Product
        	:rtype: opencascade::handle<StepShape_ShapeRepresentation>
        :param PDF:
        	:type PDF: StepBasic_ProductDefinitionFormation
        	:rtype: opencascade::handle<StepShape_ShapeRepresentation>
        :param PD:
        	:type PD: StepBasic_ProductDefinition
        	:rtype: opencascade::handle<StepShape_ShapeRepresentation>
        :param PDS:
        	:type PDS: StepRepr_ProductDefinitionShape
        	:rtype: opencascade::handle<StepShape_ShapeRepresentation>
        """
        return _StepAP209.StepAP209_Construct_IdealShape(self, *args)


    def Init(self, *args) -> "Standard_Boolean":
        """
        * Initializes tool; returns True if succeeded
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: bool
        """
        return _StepAP209.StepAP209_Construct_Init(self, *args)


    def IsAnalys(self, *args) -> "Standard_Boolean":
        """
        :param PD:
        	:type PD: StepBasic_ProductDefinitionFormation
        	:rtype: bool
        """
        return _StepAP209.StepAP209_Construct_IsAnalys(self, *args)


    def IsDesing(self, *args) -> "Standard_Boolean":
        """
        :param PD:
        	:type PD: StepBasic_ProductDefinitionFormation
        	:rtype: bool
        """
        return _StepAP209.StepAP209_Construct_IsDesing(self, *args)


    def NominShape(self, *args) -> "opencascade::handle< StepShape_ShapeRepresentation >":
        """
        :param Prod:
        	:type Prod: StepBasic_Product
        	:rtype: opencascade::handle<StepShape_ShapeRepresentation>
        :param PDF:
        	:type PDF: StepBasic_ProductDefinitionFormation
        	:rtype: opencascade::handle<StepShape_ShapeRepresentation>
        """
        return _StepAP209.StepAP209_Construct_NominShape(self, *args)


    def ReplaceCcDesingToApplied(self, *args) -> "Standard_Boolean":
        """
        * Put into model entities Applied... for AP209 instead of entities CcDesing... from AP203.
        	:rtype: bool
        """
        return _StepAP209.StepAP209_Construct_ReplaceCcDesingToApplied(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty tool
        	:rtype: None
        * Creates a tool and initializes it
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: None
        """
        _StepAP209.StepAP209_Construct_swiginit(self, _StepAP209.new_StepAP209_Construct(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP209.delete_StepAP209_Construct
StepAP209_Construct.CreateAP203Structure = new_instancemethod(_StepAP209.StepAP209_Construct_CreateAP203Structure, None, StepAP209_Construct)
StepAP209_Construct.CreateAdding203Entities = new_instancemethod(_StepAP209.StepAP209_Construct_CreateAdding203Entities, None, StepAP209_Construct)
StepAP209_Construct.CreateAddingEntities = new_instancemethod(_StepAP209.StepAP209_Construct_CreateAddingEntities, None, StepAP209_Construct)
StepAP209_Construct.CreateAnalysStructure = new_instancemethod(_StepAP209.StepAP209_Construct_CreateAnalysStructure, None, StepAP209_Construct)
StepAP209_Construct.CreateFeaStructure = new_instancemethod(_StepAP209.StepAP209_Construct_CreateFeaStructure, None, StepAP209_Construct)
StepAP209_Construct.FeaModel = new_instancemethod(_StepAP209.StepAP209_Construct_FeaModel, None, StepAP209_Construct)
StepAP209_Construct.GetCurElemSection = new_instancemethod(_StepAP209.StepAP209_Construct_GetCurElemSection, None, StepAP209_Construct)
StepAP209_Construct.GetElemGeomRelat = new_instancemethod(_StepAP209.StepAP209_Construct_GetElemGeomRelat, None, StepAP209_Construct)
StepAP209_Construct.GetElementMaterial = new_instancemethod(_StepAP209.StepAP209_Construct_GetElementMaterial, None, StepAP209_Construct)
StepAP209_Construct.GetElements1D = new_instancemethod(_StepAP209.StepAP209_Construct_GetElements1D, None, StepAP209_Construct)
StepAP209_Construct.GetElements2D = new_instancemethod(_StepAP209.StepAP209_Construct_GetElements2D, None, StepAP209_Construct)
StepAP209_Construct.GetElements3D = new_instancemethod(_StepAP209.StepAP209_Construct_GetElements3D, None, StepAP209_Construct)
StepAP209_Construct.GetFeaAxis2Placement3d = new_instancemethod(_StepAP209.StepAP209_Construct_GetFeaAxis2Placement3d, None, StepAP209_Construct)
StepAP209_Construct.GetShReprForElem = new_instancemethod(_StepAP209.StepAP209_Construct_GetShReprForElem, None, StepAP209_Construct)
StepAP209_Construct.IdealShape = new_instancemethod(_StepAP209.StepAP209_Construct_IdealShape, None, StepAP209_Construct)
StepAP209_Construct.Init = new_instancemethod(_StepAP209.StepAP209_Construct_Init, None, StepAP209_Construct)
StepAP209_Construct.IsAnalys = new_instancemethod(_StepAP209.StepAP209_Construct_IsAnalys, None, StepAP209_Construct)
StepAP209_Construct.IsDesing = new_instancemethod(_StepAP209.StepAP209_Construct_IsDesing, None, StepAP209_Construct)
StepAP209_Construct.NominShape = new_instancemethod(_StepAP209.StepAP209_Construct_NominShape, None, StepAP209_Construct)
StepAP209_Construct.ReplaceCcDesingToApplied = new_instancemethod(_StepAP209.StepAP209_Construct_ReplaceCcDesingToApplied, None, StepAP209_Construct)
StepAP209_Construct_swigregister = _StepAP209.StepAP209_Construct_swigregister
StepAP209_Construct_swigregister(StepAP209_Construct)



