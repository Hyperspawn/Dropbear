# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepToGeom module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_steptogeom.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StepToGeom.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepToGeom')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepToGeom')
    _StepToGeom = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepToGeom', [dirname(__file__)])
        except ImportError:
            import _StepToGeom
            return _StepToGeom
        try:
            _mod = imp.load_module('_StepToGeom', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepToGeom = swig_import_helper()
    del swig_import_helper
else:
    import _StepToGeom
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepToGeom.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_StepToGeom.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_StepToGeom.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_StepToGeom.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_StepToGeom.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_StepToGeom.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_StepToGeom.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_StepToGeom.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_StepToGeom.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_StepToGeom.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_StepToGeom.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_StepToGeom.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_StepToGeom.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_StepToGeom.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_StepToGeom.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_StepToGeom.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_StepToGeom.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _StepToGeom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StepToGeom.process_exception(error, method_name, class_name)
process_exception = _StepToGeom.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
class steptogeom(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeAxis1Placement(*args) -> "opencascade::handle< Geom_Axis1Placement >":
        """
        :param SA:
        	:type SA: StepGeom_Axis1Placement
        	:rtype: opencascade::handle<Geom_Axis1Placement>
        """
        return _StepToGeom.steptogeom_MakeAxis1Placement(*args)

    MakeAxis1Placement = staticmethod(MakeAxis1Placement)

    def MakeAxis2Placement(*args) -> "opencascade::handle< Geom_Axis2Placement >":
        """
        :param SA:
        	:type SA: StepGeom_Axis2Placement3d
        	:rtype: opencascade::handle<Geom_Axis2Placement>
        """
        return _StepToGeom.steptogeom_MakeAxis2Placement(*args)

    MakeAxis2Placement = staticmethod(MakeAxis2Placement)

    def MakeAxisPlacement(*args) -> "opencascade::handle< Geom2d_AxisPlacement >":
        """
        :param SA:
        	:type SA: StepGeom_Axis2Placement2d
        	:rtype: opencascade::handle<Geom2d_AxisPlacement>
        """
        return _StepToGeom.steptogeom_MakeAxisPlacement(*args)

    MakeAxisPlacement = staticmethod(MakeAxisPlacement)

    def MakeBSplineCurve(*args) -> "opencascade::handle< Geom_BSplineCurve >":
        """
        :param SC:
        	:type SC: StepGeom_BSplineCurve
        	:rtype: opencascade::handle<Geom_BSplineCurve>
        """
        return _StepToGeom.steptogeom_MakeBSplineCurve(*args)

    MakeBSplineCurve = staticmethod(MakeBSplineCurve)

    def MakeBSplineCurve2d(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        :param SC:
        	:type SC: StepGeom_BSplineCurve
        	:rtype: opencascade::handle<Geom2d_BSplineCurve>
        """
        return _StepToGeom.steptogeom_MakeBSplineCurve2d(*args)

    MakeBSplineCurve2d = staticmethod(MakeBSplineCurve2d)

    def MakeBSplineSurface(*args) -> "opencascade::handle< Geom_BSplineSurface >":
        """
        :param SS:
        	:type SS: StepGeom_BSplineSurface
        	:rtype: opencascade::handle<Geom_BSplineSurface>
        """
        return _StepToGeom.steptogeom_MakeBSplineSurface(*args)

    MakeBSplineSurface = staticmethod(MakeBSplineSurface)

    def MakeBoundedCurve(*args) -> "opencascade::handle< Geom_BoundedCurve >":
        """
        :param SC:
        	:type SC: StepGeom_BoundedCurve
        	:rtype: opencascade::handle<Geom_BoundedCurve>
        """
        return _StepToGeom.steptogeom_MakeBoundedCurve(*args)

    MakeBoundedCurve = staticmethod(MakeBoundedCurve)

    def MakeBoundedCurve2d(*args) -> "opencascade::handle< Geom2d_BoundedCurve >":
        """
        :param SC:
        	:type SC: StepGeom_BoundedCurve
        	:rtype: opencascade::handle<Geom2d_BoundedCurve>
        """
        return _StepToGeom.steptogeom_MakeBoundedCurve2d(*args)

    MakeBoundedCurve2d = staticmethod(MakeBoundedCurve2d)

    def MakeBoundedSurface(*args) -> "opencascade::handle< Geom_BoundedSurface >":
        """
        :param SS:
        	:type SS: StepGeom_BoundedSurface
        	:rtype: opencascade::handle<Geom_BoundedSurface>
        """
        return _StepToGeom.steptogeom_MakeBoundedSurface(*args)

    MakeBoundedSurface = staticmethod(MakeBoundedSurface)

    def MakeCartesianPoint(*args) -> "opencascade::handle< Geom_CartesianPoint >":
        """
        :param SP:
        	:type SP: StepGeom_CartesianPoint
        	:rtype: opencascade::handle<Geom_CartesianPoint>
        """
        return _StepToGeom.steptogeom_MakeCartesianPoint(*args)

    MakeCartesianPoint = staticmethod(MakeCartesianPoint)

    def MakeCartesianPoint2d(*args) -> "opencascade::handle< Geom2d_CartesianPoint >":
        """
        :param SP:
        	:type SP: StepGeom_CartesianPoint
        	:rtype: opencascade::handle<Geom2d_CartesianPoint>
        """
        return _StepToGeom.steptogeom_MakeCartesianPoint2d(*args)

    MakeCartesianPoint2d = staticmethod(MakeCartesianPoint2d)

    def MakeCircle(*args) -> "opencascade::handle< Geom_Circle >":
        """
        :param SC:
        	:type SC: StepGeom_Circle
        	:rtype: opencascade::handle<Geom_Circle>
        """
        return _StepToGeom.steptogeom_MakeCircle(*args)

    MakeCircle = staticmethod(MakeCircle)

    def MakeCircle2d(*args) -> "opencascade::handle< Geom2d_Circle >":
        """
        :param SC:
        	:type SC: StepGeom_Circle
        	:rtype: opencascade::handle<Geom2d_Circle>
        """
        return _StepToGeom.steptogeom_MakeCircle2d(*args)

    MakeCircle2d = staticmethod(MakeCircle2d)

    def MakeConic(*args) -> "opencascade::handle< Geom_Conic >":
        """
        :param SC:
        	:type SC: StepGeom_Conic
        	:rtype: opencascade::handle<Geom_Conic>
        """
        return _StepToGeom.steptogeom_MakeConic(*args)

    MakeConic = staticmethod(MakeConic)

    def MakeConic2d(*args) -> "opencascade::handle< Geom2d_Conic >":
        """
        :param SC:
        	:type SC: StepGeom_Conic
        	:rtype: opencascade::handle<Geom2d_Conic>
        """
        return _StepToGeom.steptogeom_MakeConic2d(*args)

    MakeConic2d = staticmethod(MakeConic2d)

    def MakeConicalSurface(*args) -> "opencascade::handle< Geom_ConicalSurface >":
        """
        :param SS:
        	:type SS: StepGeom_ConicalSurface
        	:rtype: opencascade::handle<Geom_ConicalSurface>
        """
        return _StepToGeom.steptogeom_MakeConicalSurface(*args)

    MakeConicalSurface = staticmethod(MakeConicalSurface)

    def MakeCurve(*args) -> "opencascade::handle< Geom_Curve >":
        """
        :param SC:
        	:type SC: StepGeom_Curve
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _StepToGeom.steptogeom_MakeCurve(*args)

    MakeCurve = staticmethod(MakeCurve)

    def MakeCurve2d(*args) -> "opencascade::handle< Geom2d_Curve >":
        """
        :param SC:
        	:type SC: StepGeom_Curve
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _StepToGeom.steptogeom_MakeCurve2d(*args)

    MakeCurve2d = staticmethod(MakeCurve2d)

    def MakeCylindricalSurface(*args) -> "opencascade::handle< Geom_CylindricalSurface >":
        """
        :param SS:
        	:type SS: StepGeom_CylindricalSurface
        	:rtype: opencascade::handle<Geom_CylindricalSurface>
        """
        return _StepToGeom.steptogeom_MakeCylindricalSurface(*args)

    MakeCylindricalSurface = staticmethod(MakeCylindricalSurface)

    def MakeDirection(*args) -> "opencascade::handle< Geom_Direction >":
        """
        :param SD:
        	:type SD: StepGeom_Direction
        	:rtype: opencascade::handle<Geom_Direction>
        """
        return _StepToGeom.steptogeom_MakeDirection(*args)

    MakeDirection = staticmethod(MakeDirection)

    def MakeDirection2d(*args) -> "opencascade::handle< Geom2d_Direction >":
        """
        :param SD:
        	:type SD: StepGeom_Direction
        	:rtype: opencascade::handle<Geom2d_Direction>
        """
        return _StepToGeom.steptogeom_MakeDirection2d(*args)

    MakeDirection2d = staticmethod(MakeDirection2d)

    def MakeElementarySurface(*args) -> "opencascade::handle< Geom_ElementarySurface >":
        """
        :param SS:
        	:type SS: StepGeom_ElementarySurface
        	:rtype: opencascade::handle<Geom_ElementarySurface>
        """
        return _StepToGeom.steptogeom_MakeElementarySurface(*args)

    MakeElementarySurface = staticmethod(MakeElementarySurface)

    def MakeEllipse(*args) -> "opencascade::handle< Geom_Ellipse >":
        """
        :param SC:
        	:type SC: StepGeom_Ellipse
        	:rtype: opencascade::handle<Geom_Ellipse>
        """
        return _StepToGeom.steptogeom_MakeEllipse(*args)

    MakeEllipse = staticmethod(MakeEllipse)

    def MakeEllipse2d(*args) -> "opencascade::handle< Geom2d_Ellipse >":
        """
        :param SC:
        	:type SC: StepGeom_Ellipse
        	:rtype: opencascade::handle<Geom2d_Ellipse>
        """
        return _StepToGeom.steptogeom_MakeEllipse2d(*args)

    MakeEllipse2d = staticmethod(MakeEllipse2d)

    def MakeHyperbola(*args) -> "opencascade::handle< Geom_Hyperbola >":
        """
        :param SC:
        	:type SC: StepGeom_Hyperbola
        	:rtype: opencascade::handle<Geom_Hyperbola>
        """
        return _StepToGeom.steptogeom_MakeHyperbola(*args)

    MakeHyperbola = staticmethod(MakeHyperbola)

    def MakeHyperbola2d(*args) -> "opencascade::handle< Geom2d_Hyperbola >":
        """
        :param SC:
        	:type SC: StepGeom_Hyperbola
        	:rtype: opencascade::handle<Geom2d_Hyperbola>
        """
        return _StepToGeom.steptogeom_MakeHyperbola2d(*args)

    MakeHyperbola2d = staticmethod(MakeHyperbola2d)

    def MakeLine(*args) -> "opencascade::handle< Geom_Line >":
        """
        :param SC:
        	:type SC: StepGeom_Line
        	:rtype: opencascade::handle<Geom_Line>
        """
        return _StepToGeom.steptogeom_MakeLine(*args)

    MakeLine = staticmethod(MakeLine)

    def MakeLine2d(*args) -> "opencascade::handle< Geom2d_Line >":
        """
        :param SC:
        	:type SC: StepGeom_Line
        	:rtype: opencascade::handle<Geom2d_Line>
        """
        return _StepToGeom.steptogeom_MakeLine2d(*args)

    MakeLine2d = staticmethod(MakeLine2d)

    def MakeParabola(*args) -> "opencascade::handle< Geom_Parabola >":
        """
        :param SC:
        	:type SC: StepGeom_Parabola
        	:rtype: opencascade::handle<Geom_Parabola>
        """
        return _StepToGeom.steptogeom_MakeParabola(*args)

    MakeParabola = staticmethod(MakeParabola)

    def MakeParabola2d(*args) -> "opencascade::handle< Geom2d_Parabola >":
        """
        :param SC:
        	:type SC: StepGeom_Parabola
        	:rtype: opencascade::handle<Geom2d_Parabola>
        """
        return _StepToGeom.steptogeom_MakeParabola2d(*args)

    MakeParabola2d = staticmethod(MakeParabola2d)

    def MakePlane(*args) -> "opencascade::handle< Geom_Plane >":
        """
        :param SP:
        	:type SP: StepGeom_Plane
        	:rtype: opencascade::handle<Geom_Plane>
        """
        return _StepToGeom.steptogeom_MakePlane(*args)

    MakePlane = staticmethod(MakePlane)

    def MakePolyline(*args) -> "opencascade::handle< Geom_BSplineCurve >":
        """
        :param SPL:
        	:type SPL: StepGeom_Polyline
        	:rtype: opencascade::handle<Geom_BSplineCurve>
        """
        return _StepToGeom.steptogeom_MakePolyline(*args)

    MakePolyline = staticmethod(MakePolyline)

    def MakePolyline2d(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        :param SPL:
        	:type SPL: StepGeom_Polyline
        	:rtype: opencascade::handle<Geom2d_BSplineCurve>
        """
        return _StepToGeom.steptogeom_MakePolyline2d(*args)

    MakePolyline2d = staticmethod(MakePolyline2d)

    def MakeRectangularTrimmedSurface(*args) -> "opencascade::handle< Geom_RectangularTrimmedSurface >":
        """
        :param SS:
        	:type SS: StepGeom_RectangularTrimmedSurface
        	:rtype: opencascade::handle<Geom_RectangularTrimmedSurface>
        """
        return _StepToGeom.steptogeom_MakeRectangularTrimmedSurface(*args)

    MakeRectangularTrimmedSurface = staticmethod(MakeRectangularTrimmedSurface)

    def MakeSphericalSurface(*args) -> "opencascade::handle< Geom_SphericalSurface >":
        """
        :param SS:
        	:type SS: StepGeom_SphericalSurface
        	:rtype: opencascade::handle<Geom_SphericalSurface>
        """
        return _StepToGeom.steptogeom_MakeSphericalSurface(*args)

    MakeSphericalSurface = staticmethod(MakeSphericalSurface)

    def MakeSurface(*args) -> "opencascade::handle< Geom_Surface >":
        """
        :param SS:
        	:type SS: StepGeom_Surface
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _StepToGeom.steptogeom_MakeSurface(*args)

    MakeSurface = staticmethod(MakeSurface)

    def MakeSurfaceOfLinearExtrusion(*args) -> "opencascade::handle< Geom_SurfaceOfLinearExtrusion >":
        """
        :param SS:
        	:type SS: StepGeom_SurfaceOfLinearExtrusion
        	:rtype: opencascade::handle<Geom_SurfaceOfLinearExtrusion>
        """
        return _StepToGeom.steptogeom_MakeSurfaceOfLinearExtrusion(*args)

    MakeSurfaceOfLinearExtrusion = staticmethod(MakeSurfaceOfLinearExtrusion)

    def MakeSurfaceOfRevolution(*args) -> "opencascade::handle< Geom_SurfaceOfRevolution >":
        """
        :param SS:
        	:type SS: StepGeom_SurfaceOfRevolution
        	:rtype: opencascade::handle<Geom_SurfaceOfRevolution>
        """
        return _StepToGeom.steptogeom_MakeSurfaceOfRevolution(*args)

    MakeSurfaceOfRevolution = staticmethod(MakeSurfaceOfRevolution)

    def MakeSweptSurface(*args) -> "opencascade::handle< Geom_SweptSurface >":
        """
        :param SS:
        	:type SS: StepGeom_SweptSurface
        	:rtype: opencascade::handle<Geom_SweptSurface>
        """
        return _StepToGeom.steptogeom_MakeSweptSurface(*args)

    MakeSweptSurface = staticmethod(MakeSweptSurface)

    def MakeToroidalSurface(*args) -> "opencascade::handle< Geom_ToroidalSurface >":
        """
        :param SS:
        	:type SS: StepGeom_ToroidalSurface
        	:rtype: opencascade::handle<Geom_ToroidalSurface>
        """
        return _StepToGeom.steptogeom_MakeToroidalSurface(*args)

    MakeToroidalSurface = staticmethod(MakeToroidalSurface)

    def MakeTransformation2d(*args) -> "Standard_Boolean":
        """
        :param SCTO:
        	:type SCTO: StepGeom_CartesianTransformationOperator2d
        	:param CT:
        	:type CT: gp_Trsf2d
        	:rtype: bool
        """
        return _StepToGeom.steptogeom_MakeTransformation2d(*args)

    MakeTransformation2d = staticmethod(MakeTransformation2d)

    def MakeTransformation3d(*args) -> "Standard_Boolean":
        """
        :param SCTO:
        	:type SCTO: StepGeom_CartesianTransformationOperator3d
        	:param CT:
        	:type CT: gp_Trsf
        	:rtype: bool
        """
        return _StepToGeom.steptogeom_MakeTransformation3d(*args)

    MakeTransformation3d = staticmethod(MakeTransformation3d)

    def MakeTrimmedCurve(*args) -> "opencascade::handle< Geom_TrimmedCurve >":
        """
        :param SC:
        	:type SC: StepGeom_TrimmedCurve
        	:rtype: opencascade::handle<Geom_TrimmedCurve>
        """
        return _StepToGeom.steptogeom_MakeTrimmedCurve(*args)

    MakeTrimmedCurve = staticmethod(MakeTrimmedCurve)

    def MakeTrimmedCurve2d(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        :param SC:
        	:type SC: StepGeom_TrimmedCurve
        	:rtype: opencascade::handle<Geom2d_BSplineCurve>
        """
        return _StepToGeom.steptogeom_MakeTrimmedCurve2d(*args)

    MakeTrimmedCurve2d = staticmethod(MakeTrimmedCurve2d)

    def MakeVectorWithMagnitude(*args) -> "opencascade::handle< Geom_VectorWithMagnitude >":
        """
        :param SV:
        	:type SV: StepGeom_Vector
        	:rtype: opencascade::handle<Geom_VectorWithMagnitude>
        """
        return _StepToGeom.steptogeom_MakeVectorWithMagnitude(*args)

    MakeVectorWithMagnitude = staticmethod(MakeVectorWithMagnitude)

    def MakeVectorWithMagnitude2d(*args) -> "opencascade::handle< Geom2d_VectorWithMagnitude >":
        """
        :param SV:
        	:type SV: StepGeom_Vector
        	:rtype: opencascade::handle<Geom2d_VectorWithMagnitude>
        """
        return _StepToGeom.steptogeom_MakeVectorWithMagnitude2d(*args)

    MakeVectorWithMagnitude2d = staticmethod(MakeVectorWithMagnitude2d)

    __repr__ = _dumps_object


    def __init__(self):
        _StepToGeom.steptogeom_swiginit(self, _StepToGeom.new_steptogeom())
    __swig_destroy__ = _StepToGeom.delete_steptogeom
steptogeom_swigregister = _StepToGeom.steptogeom_swigregister
steptogeom_swigregister(steptogeom)

def steptogeom_MakeAxis1Placement(*args) -> "opencascade::handle< Geom_Axis1Placement >":
    """
    :param SA:
    	:type SA: StepGeom_Axis1Placement
    	:rtype: opencascade::handle<Geom_Axis1Placement>
    """
    return _StepToGeom.steptogeom_MakeAxis1Placement(*args)

def steptogeom_MakeAxis2Placement(*args) -> "opencascade::handle< Geom_Axis2Placement >":
    """
    :param SA:
    	:type SA: StepGeom_Axis2Placement3d
    	:rtype: opencascade::handle<Geom_Axis2Placement>
    """
    return _StepToGeom.steptogeom_MakeAxis2Placement(*args)

def steptogeom_MakeAxisPlacement(*args) -> "opencascade::handle< Geom2d_AxisPlacement >":
    """
    :param SA:
    	:type SA: StepGeom_Axis2Placement2d
    	:rtype: opencascade::handle<Geom2d_AxisPlacement>
    """
    return _StepToGeom.steptogeom_MakeAxisPlacement(*args)

def steptogeom_MakeBSplineCurve(*args) -> "opencascade::handle< Geom_BSplineCurve >":
    """
    :param SC:
    	:type SC: StepGeom_BSplineCurve
    	:rtype: opencascade::handle<Geom_BSplineCurve>
    """
    return _StepToGeom.steptogeom_MakeBSplineCurve(*args)

def steptogeom_MakeBSplineCurve2d(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
    """
    :param SC:
    	:type SC: StepGeom_BSplineCurve
    	:rtype: opencascade::handle<Geom2d_BSplineCurve>
    """
    return _StepToGeom.steptogeom_MakeBSplineCurve2d(*args)

def steptogeom_MakeBSplineSurface(*args) -> "opencascade::handle< Geom_BSplineSurface >":
    """
    :param SS:
    	:type SS: StepGeom_BSplineSurface
    	:rtype: opencascade::handle<Geom_BSplineSurface>
    """
    return _StepToGeom.steptogeom_MakeBSplineSurface(*args)

def steptogeom_MakeBoundedCurve(*args) -> "opencascade::handle< Geom_BoundedCurve >":
    """
    :param SC:
    	:type SC: StepGeom_BoundedCurve
    	:rtype: opencascade::handle<Geom_BoundedCurve>
    """
    return _StepToGeom.steptogeom_MakeBoundedCurve(*args)

def steptogeom_MakeBoundedCurve2d(*args) -> "opencascade::handle< Geom2d_BoundedCurve >":
    """
    :param SC:
    	:type SC: StepGeom_BoundedCurve
    	:rtype: opencascade::handle<Geom2d_BoundedCurve>
    """
    return _StepToGeom.steptogeom_MakeBoundedCurve2d(*args)

def steptogeom_MakeBoundedSurface(*args) -> "opencascade::handle< Geom_BoundedSurface >":
    """
    :param SS:
    	:type SS: StepGeom_BoundedSurface
    	:rtype: opencascade::handle<Geom_BoundedSurface>
    """
    return _StepToGeom.steptogeom_MakeBoundedSurface(*args)

def steptogeom_MakeCartesianPoint(*args) -> "opencascade::handle< Geom_CartesianPoint >":
    """
    :param SP:
    	:type SP: StepGeom_CartesianPoint
    	:rtype: opencascade::handle<Geom_CartesianPoint>
    """
    return _StepToGeom.steptogeom_MakeCartesianPoint(*args)

def steptogeom_MakeCartesianPoint2d(*args) -> "opencascade::handle< Geom2d_CartesianPoint >":
    """
    :param SP:
    	:type SP: StepGeom_CartesianPoint
    	:rtype: opencascade::handle<Geom2d_CartesianPoint>
    """
    return _StepToGeom.steptogeom_MakeCartesianPoint2d(*args)

def steptogeom_MakeCircle(*args) -> "opencascade::handle< Geom_Circle >":
    """
    :param SC:
    	:type SC: StepGeom_Circle
    	:rtype: opencascade::handle<Geom_Circle>
    """
    return _StepToGeom.steptogeom_MakeCircle(*args)

def steptogeom_MakeCircle2d(*args) -> "opencascade::handle< Geom2d_Circle >":
    """
    :param SC:
    	:type SC: StepGeom_Circle
    	:rtype: opencascade::handle<Geom2d_Circle>
    """
    return _StepToGeom.steptogeom_MakeCircle2d(*args)

def steptogeom_MakeConic(*args) -> "opencascade::handle< Geom_Conic >":
    """
    :param SC:
    	:type SC: StepGeom_Conic
    	:rtype: opencascade::handle<Geom_Conic>
    """
    return _StepToGeom.steptogeom_MakeConic(*args)

def steptogeom_MakeConic2d(*args) -> "opencascade::handle< Geom2d_Conic >":
    """
    :param SC:
    	:type SC: StepGeom_Conic
    	:rtype: opencascade::handle<Geom2d_Conic>
    """
    return _StepToGeom.steptogeom_MakeConic2d(*args)

def steptogeom_MakeConicalSurface(*args) -> "opencascade::handle< Geom_ConicalSurface >":
    """
    :param SS:
    	:type SS: StepGeom_ConicalSurface
    	:rtype: opencascade::handle<Geom_ConicalSurface>
    """
    return _StepToGeom.steptogeom_MakeConicalSurface(*args)

def steptogeom_MakeCurve(*args) -> "opencascade::handle< Geom_Curve >":
    """
    :param SC:
    	:type SC: StepGeom_Curve
    	:rtype: opencascade::handle<Geom_Curve>
    """
    return _StepToGeom.steptogeom_MakeCurve(*args)

def steptogeom_MakeCurve2d(*args) -> "opencascade::handle< Geom2d_Curve >":
    """
    :param SC:
    	:type SC: StepGeom_Curve
    	:rtype: opencascade::handle<Geom2d_Curve>
    """
    return _StepToGeom.steptogeom_MakeCurve2d(*args)

def steptogeom_MakeCylindricalSurface(*args) -> "opencascade::handle< Geom_CylindricalSurface >":
    """
    :param SS:
    	:type SS: StepGeom_CylindricalSurface
    	:rtype: opencascade::handle<Geom_CylindricalSurface>
    """
    return _StepToGeom.steptogeom_MakeCylindricalSurface(*args)

def steptogeom_MakeDirection(*args) -> "opencascade::handle< Geom_Direction >":
    """
    :param SD:
    	:type SD: StepGeom_Direction
    	:rtype: opencascade::handle<Geom_Direction>
    """
    return _StepToGeom.steptogeom_MakeDirection(*args)

def steptogeom_MakeDirection2d(*args) -> "opencascade::handle< Geom2d_Direction >":
    """
    :param SD:
    	:type SD: StepGeom_Direction
    	:rtype: opencascade::handle<Geom2d_Direction>
    """
    return _StepToGeom.steptogeom_MakeDirection2d(*args)

def steptogeom_MakeElementarySurface(*args) -> "opencascade::handle< Geom_ElementarySurface >":
    """
    :param SS:
    	:type SS: StepGeom_ElementarySurface
    	:rtype: opencascade::handle<Geom_ElementarySurface>
    """
    return _StepToGeom.steptogeom_MakeElementarySurface(*args)

def steptogeom_MakeEllipse(*args) -> "opencascade::handle< Geom_Ellipse >":
    """
    :param SC:
    	:type SC: StepGeom_Ellipse
    	:rtype: opencascade::handle<Geom_Ellipse>
    """
    return _StepToGeom.steptogeom_MakeEllipse(*args)

def steptogeom_MakeEllipse2d(*args) -> "opencascade::handle< Geom2d_Ellipse >":
    """
    :param SC:
    	:type SC: StepGeom_Ellipse
    	:rtype: opencascade::handle<Geom2d_Ellipse>
    """
    return _StepToGeom.steptogeom_MakeEllipse2d(*args)

def steptogeom_MakeHyperbola(*args) -> "opencascade::handle< Geom_Hyperbola >":
    """
    :param SC:
    	:type SC: StepGeom_Hyperbola
    	:rtype: opencascade::handle<Geom_Hyperbola>
    """
    return _StepToGeom.steptogeom_MakeHyperbola(*args)

def steptogeom_MakeHyperbola2d(*args) -> "opencascade::handle< Geom2d_Hyperbola >":
    """
    :param SC:
    	:type SC: StepGeom_Hyperbola
    	:rtype: opencascade::handle<Geom2d_Hyperbola>
    """
    return _StepToGeom.steptogeom_MakeHyperbola2d(*args)

def steptogeom_MakeLine(*args) -> "opencascade::handle< Geom_Line >":
    """
    :param SC:
    	:type SC: StepGeom_Line
    	:rtype: opencascade::handle<Geom_Line>
    """
    return _StepToGeom.steptogeom_MakeLine(*args)

def steptogeom_MakeLine2d(*args) -> "opencascade::handle< Geom2d_Line >":
    """
    :param SC:
    	:type SC: StepGeom_Line
    	:rtype: opencascade::handle<Geom2d_Line>
    """
    return _StepToGeom.steptogeom_MakeLine2d(*args)

def steptogeom_MakeParabola(*args) -> "opencascade::handle< Geom_Parabola >":
    """
    :param SC:
    	:type SC: StepGeom_Parabola
    	:rtype: opencascade::handle<Geom_Parabola>
    """
    return _StepToGeom.steptogeom_MakeParabola(*args)

def steptogeom_MakeParabola2d(*args) -> "opencascade::handle< Geom2d_Parabola >":
    """
    :param SC:
    	:type SC: StepGeom_Parabola
    	:rtype: opencascade::handle<Geom2d_Parabola>
    """
    return _StepToGeom.steptogeom_MakeParabola2d(*args)

def steptogeom_MakePlane(*args) -> "opencascade::handle< Geom_Plane >":
    """
    :param SP:
    	:type SP: StepGeom_Plane
    	:rtype: opencascade::handle<Geom_Plane>
    """
    return _StepToGeom.steptogeom_MakePlane(*args)

def steptogeom_MakePolyline(*args) -> "opencascade::handle< Geom_BSplineCurve >":
    """
    :param SPL:
    	:type SPL: StepGeom_Polyline
    	:rtype: opencascade::handle<Geom_BSplineCurve>
    """
    return _StepToGeom.steptogeom_MakePolyline(*args)

def steptogeom_MakePolyline2d(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
    """
    :param SPL:
    	:type SPL: StepGeom_Polyline
    	:rtype: opencascade::handle<Geom2d_BSplineCurve>
    """
    return _StepToGeom.steptogeom_MakePolyline2d(*args)

def steptogeom_MakeRectangularTrimmedSurface(*args) -> "opencascade::handle< Geom_RectangularTrimmedSurface >":
    """
    :param SS:
    	:type SS: StepGeom_RectangularTrimmedSurface
    	:rtype: opencascade::handle<Geom_RectangularTrimmedSurface>
    """
    return _StepToGeom.steptogeom_MakeRectangularTrimmedSurface(*args)

def steptogeom_MakeSphericalSurface(*args) -> "opencascade::handle< Geom_SphericalSurface >":
    """
    :param SS:
    	:type SS: StepGeom_SphericalSurface
    	:rtype: opencascade::handle<Geom_SphericalSurface>
    """
    return _StepToGeom.steptogeom_MakeSphericalSurface(*args)

def steptogeom_MakeSurface(*args) -> "opencascade::handle< Geom_Surface >":
    """
    :param SS:
    	:type SS: StepGeom_Surface
    	:rtype: opencascade::handle<Geom_Surface>
    """
    return _StepToGeom.steptogeom_MakeSurface(*args)

def steptogeom_MakeSurfaceOfLinearExtrusion(*args) -> "opencascade::handle< Geom_SurfaceOfLinearExtrusion >":
    """
    :param SS:
    	:type SS: StepGeom_SurfaceOfLinearExtrusion
    	:rtype: opencascade::handle<Geom_SurfaceOfLinearExtrusion>
    """
    return _StepToGeom.steptogeom_MakeSurfaceOfLinearExtrusion(*args)

def steptogeom_MakeSurfaceOfRevolution(*args) -> "opencascade::handle< Geom_SurfaceOfRevolution >":
    """
    :param SS:
    	:type SS: StepGeom_SurfaceOfRevolution
    	:rtype: opencascade::handle<Geom_SurfaceOfRevolution>
    """
    return _StepToGeom.steptogeom_MakeSurfaceOfRevolution(*args)

def steptogeom_MakeSweptSurface(*args) -> "opencascade::handle< Geom_SweptSurface >":
    """
    :param SS:
    	:type SS: StepGeom_SweptSurface
    	:rtype: opencascade::handle<Geom_SweptSurface>
    """
    return _StepToGeom.steptogeom_MakeSweptSurface(*args)

def steptogeom_MakeToroidalSurface(*args) -> "opencascade::handle< Geom_ToroidalSurface >":
    """
    :param SS:
    	:type SS: StepGeom_ToroidalSurface
    	:rtype: opencascade::handle<Geom_ToroidalSurface>
    """
    return _StepToGeom.steptogeom_MakeToroidalSurface(*args)

def steptogeom_MakeTransformation2d(*args) -> "Standard_Boolean":
    """
    :param SCTO:
    	:type SCTO: StepGeom_CartesianTransformationOperator2d
    	:param CT:
    	:type CT: gp_Trsf2d
    	:rtype: bool
    """
    return _StepToGeom.steptogeom_MakeTransformation2d(*args)

def steptogeom_MakeTransformation3d(*args) -> "Standard_Boolean":
    """
    :param SCTO:
    	:type SCTO: StepGeom_CartesianTransformationOperator3d
    	:param CT:
    	:type CT: gp_Trsf
    	:rtype: bool
    """
    return _StepToGeom.steptogeom_MakeTransformation3d(*args)

def steptogeom_MakeTrimmedCurve(*args) -> "opencascade::handle< Geom_TrimmedCurve >":
    """
    :param SC:
    	:type SC: StepGeom_TrimmedCurve
    	:rtype: opencascade::handle<Geom_TrimmedCurve>
    """
    return _StepToGeom.steptogeom_MakeTrimmedCurve(*args)

def steptogeom_MakeTrimmedCurve2d(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
    """
    :param SC:
    	:type SC: StepGeom_TrimmedCurve
    	:rtype: opencascade::handle<Geom2d_BSplineCurve>
    """
    return _StepToGeom.steptogeom_MakeTrimmedCurve2d(*args)

def steptogeom_MakeVectorWithMagnitude(*args) -> "opencascade::handle< Geom_VectorWithMagnitude >":
    """
    :param SV:
    	:type SV: StepGeom_Vector
    	:rtype: opencascade::handle<Geom_VectorWithMagnitude>
    """
    return _StepToGeom.steptogeom_MakeVectorWithMagnitude(*args)

def steptogeom_MakeVectorWithMagnitude2d(*args) -> "opencascade::handle< Geom2d_VectorWithMagnitude >":
    """
    :param SV:
    	:type SV: StepGeom_Vector
    	:rtype: opencascade::handle<Geom2d_VectorWithMagnitude>
    """
    return _StepToGeom.steptogeom_MakeVectorWithMagnitude2d(*args)



