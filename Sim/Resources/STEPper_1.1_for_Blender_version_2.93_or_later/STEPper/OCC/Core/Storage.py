# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Storage module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_storage.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Storage.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Storage')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Storage')
    _Storage = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Storage', [dirname(__file__)])
        except ImportError:
            import _Storage
            return _Storage
        try:
            _mod = imp.load_module('_Storage', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Storage = swig_import_helper()
    del swig_import_helper
else:
    import _Storage
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Storage.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Storage.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Storage.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Storage.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Storage.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Storage.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Storage.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Storage.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Storage.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Storage.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Storage.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Storage.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Storage.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Storage.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Storage.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Storage.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Storage.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Storage.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Storage.process_exception(error, method_name, class_name)
process_exception = _Storage.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
Storage_AddSolve = _Storage.Storage_AddSolve
Storage_WriteSolve = _Storage.Storage_WriteSolve
Storage_ReadSolve = _Storage.Storage_ReadSolve
Storage_VSOk = _Storage.Storage_VSOk
Storage_VSOpenError = _Storage.Storage_VSOpenError
Storage_VSModeError = _Storage.Storage_VSModeError
Storage_VSCloseError = _Storage.Storage_VSCloseError
Storage_VSAlreadyOpen = _Storage.Storage_VSAlreadyOpen
Storage_VSNotOpen = _Storage.Storage_VSNotOpen
Storage_VSSectionNotFound = _Storage.Storage_VSSectionNotFound
Storage_VSWriteError = _Storage.Storage_VSWriteError
Storage_VSFormatError = _Storage.Storage_VSFormatError
Storage_VSUnknownType = _Storage.Storage_VSUnknownType
Storage_VSTypeMismatch = _Storage.Storage_VSTypeMismatch
Storage_VSInternalError = _Storage.Storage_VSInternalError
Storage_VSExtCharParityError = _Storage.Storage_VSExtCharParityError
Storage_VSWrongFileDriver = _Storage.Storage_VSWrongFileDriver
Storage_VSNone = _Storage.Storage_VSNone
Storage_VSRead = _Storage.Storage_VSRead
Storage_VSWrite = _Storage.Storage_VSWrite
Storage_VSReadWrite = _Storage.Storage_VSReadWrite
class Storage_PType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_PType_swiginit(self, _Storage.new_Storage_PType(*args))
    __swig_destroy__ = _Storage.delete_Storage_PType
Storage_PType.begin = new_instancemethod(_Storage.Storage_PType_begin, None, Storage_PType)
Storage_PType.end = new_instancemethod(_Storage.Storage_PType_end, None, Storage_PType)
Storage_PType.cbegin = new_instancemethod(_Storage.Storage_PType_cbegin, None, Storage_PType)
Storage_PType.cend = new_instancemethod(_Storage.Storage_PType_cend, None, Storage_PType)
Storage_PType.Exchange = new_instancemethod(_Storage.Storage_PType_Exchange, None, Storage_PType)
Storage_PType.Assign = new_instancemethod(_Storage.Storage_PType_Assign, None, Storage_PType)
Storage_PType.Set = new_instancemethod(_Storage.Storage_PType_Set, None, Storage_PType)
Storage_PType.ReSize = new_instancemethod(_Storage.Storage_PType_ReSize, None, Storage_PType)
Storage_PType.Add = new_instancemethod(_Storage.Storage_PType_Add, None, Storage_PType)
Storage_PType.Contains = new_instancemethod(_Storage.Storage_PType_Contains, None, Storage_PType)
Storage_PType.Substitute = new_instancemethod(_Storage.Storage_PType_Substitute, None, Storage_PType)
Storage_PType.Swap = new_instancemethod(_Storage.Storage_PType_Swap, None, Storage_PType)
Storage_PType.RemoveLast = new_instancemethod(_Storage.Storage_PType_RemoveLast, None, Storage_PType)
Storage_PType.RemoveFromIndex = new_instancemethod(_Storage.Storage_PType_RemoveFromIndex, None, Storage_PType)
Storage_PType.RemoveKey = new_instancemethod(_Storage.Storage_PType_RemoveKey, None, Storage_PType)
Storage_PType.FindKey = new_instancemethod(_Storage.Storage_PType_FindKey, None, Storage_PType)
Storage_PType.FindFromIndex = new_instancemethod(_Storage.Storage_PType_FindFromIndex, None, Storage_PType)
Storage_PType.ChangeFromIndex = new_instancemethod(_Storage.Storage_PType_ChangeFromIndex, None, Storage_PType)
Storage_PType.__call__ = new_instancemethod(_Storage.Storage_PType___call__, None, Storage_PType)
Storage_PType.FindIndex = new_instancemethod(_Storage.Storage_PType_FindIndex, None, Storage_PType)
Storage_PType.ChangeFromKey = new_instancemethod(_Storage.Storage_PType_ChangeFromKey, None, Storage_PType)
Storage_PType.Seek = new_instancemethod(_Storage.Storage_PType_Seek, None, Storage_PType)
Storage_PType.ChangeSeek = new_instancemethod(_Storage.Storage_PType_ChangeSeek, None, Storage_PType)
Storage_PType.FindFromKey = new_instancemethod(_Storage.Storage_PType_FindFromKey, None, Storage_PType)
Storage_PType.Clear = new_instancemethod(_Storage.Storage_PType_Clear, None, Storage_PType)
Storage_PType.Size = new_instancemethod(_Storage.Storage_PType_Size, None, Storage_PType)
Storage_PType_swigregister = _Storage.Storage_PType_swigregister
Storage_PType_swigregister(Storage_PType)

class Storage_ArrayOfCallBack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_ArrayOfCallBack_swiginit(self, _Storage.new_Storage_ArrayOfCallBack(*args))
    __swig_destroy__ = _Storage.delete_Storage_ArrayOfCallBack

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Storage_ArrayOfCallBack.begin = new_instancemethod(_Storage.Storage_ArrayOfCallBack_begin, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.end = new_instancemethod(_Storage.Storage_ArrayOfCallBack_end, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.cbegin = new_instancemethod(_Storage.Storage_ArrayOfCallBack_cbegin, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.cend = new_instancemethod(_Storage.Storage_ArrayOfCallBack_cend, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Init = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Init, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Size = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Size, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Length = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Length, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.IsEmpty = new_instancemethod(_Storage.Storage_ArrayOfCallBack_IsEmpty, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Lower = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Lower, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Upper = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Upper, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.IsDeletable = new_instancemethod(_Storage.Storage_ArrayOfCallBack_IsDeletable, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.IsAllocated = new_instancemethod(_Storage.Storage_ArrayOfCallBack_IsAllocated, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Assign = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Assign, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Move = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Move, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Set = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Set, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.First = new_instancemethod(_Storage.Storage_ArrayOfCallBack_First, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.ChangeFirst = new_instancemethod(_Storage.Storage_ArrayOfCallBack_ChangeFirst, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Last = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Last, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.ChangeLast = new_instancemethod(_Storage.Storage_ArrayOfCallBack_ChangeLast, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Value = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Value, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.ChangeValue = new_instancemethod(_Storage.Storage_ArrayOfCallBack_ChangeValue, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.__call__ = new_instancemethod(_Storage.Storage_ArrayOfCallBack___call__, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.SetValue = new_instancemethod(_Storage.Storage_ArrayOfCallBack_SetValue, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack.Resize = new_instancemethod(_Storage.Storage_ArrayOfCallBack_Resize, None, Storage_ArrayOfCallBack)
Storage_ArrayOfCallBack_swigregister = _Storage.Storage_ArrayOfCallBack_swigregister
Storage_ArrayOfCallBack_swigregister(Storage_ArrayOfCallBack)

class Storage_MapOfPers(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_MapOfPers_swiginit(self, _Storage.new_Storage_MapOfPers(*args))
    __swig_destroy__ = _Storage.delete_Storage_MapOfPers
Storage_MapOfPers.begin = new_instancemethod(_Storage.Storage_MapOfPers_begin, None, Storage_MapOfPers)
Storage_MapOfPers.end = new_instancemethod(_Storage.Storage_MapOfPers_end, None, Storage_MapOfPers)
Storage_MapOfPers.cbegin = new_instancemethod(_Storage.Storage_MapOfPers_cbegin, None, Storage_MapOfPers)
Storage_MapOfPers.cend = new_instancemethod(_Storage.Storage_MapOfPers_cend, None, Storage_MapOfPers)
Storage_MapOfPers.Exchange = new_instancemethod(_Storage.Storage_MapOfPers_Exchange, None, Storage_MapOfPers)
Storage_MapOfPers.Assign = new_instancemethod(_Storage.Storage_MapOfPers_Assign, None, Storage_MapOfPers)
Storage_MapOfPers.Set = new_instancemethod(_Storage.Storage_MapOfPers_Set, None, Storage_MapOfPers)
Storage_MapOfPers.ReSize = new_instancemethod(_Storage.Storage_MapOfPers_ReSize, None, Storage_MapOfPers)
Storage_MapOfPers.Bind = new_instancemethod(_Storage.Storage_MapOfPers_Bind, None, Storage_MapOfPers)
Storage_MapOfPers.Bound = new_instancemethod(_Storage.Storage_MapOfPers_Bound, None, Storage_MapOfPers)
Storage_MapOfPers.IsBound = new_instancemethod(_Storage.Storage_MapOfPers_IsBound, None, Storage_MapOfPers)
Storage_MapOfPers.UnBind = new_instancemethod(_Storage.Storage_MapOfPers_UnBind, None, Storage_MapOfPers)
Storage_MapOfPers.Seek = new_instancemethod(_Storage.Storage_MapOfPers_Seek, None, Storage_MapOfPers)
Storage_MapOfPers.Find = new_instancemethod(_Storage.Storage_MapOfPers_Find, None, Storage_MapOfPers)
Storage_MapOfPers.ChangeSeek = new_instancemethod(_Storage.Storage_MapOfPers_ChangeSeek, None, Storage_MapOfPers)
Storage_MapOfPers.ChangeFind = new_instancemethod(_Storage.Storage_MapOfPers_ChangeFind, None, Storage_MapOfPers)
Storage_MapOfPers.__call__ = new_instancemethod(_Storage.Storage_MapOfPers___call__, None, Storage_MapOfPers)
Storage_MapOfPers.Clear = new_instancemethod(_Storage.Storage_MapOfPers_Clear, None, Storage_MapOfPers)
Storage_MapOfPers.Size = new_instancemethod(_Storage.Storage_MapOfPers_Size, None, Storage_MapOfPers)
Storage_MapOfPers_swigregister = _Storage.Storage_MapOfPers_swigregister
Storage_MapOfPers_swigregister(Storage_MapOfPers)

class Storage_MapOfCallBack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_MapOfCallBack_swiginit(self, _Storage.new_Storage_MapOfCallBack(*args))
    __swig_destroy__ = _Storage.delete_Storage_MapOfCallBack
Storage_MapOfCallBack.begin = new_instancemethod(_Storage.Storage_MapOfCallBack_begin, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.end = new_instancemethod(_Storage.Storage_MapOfCallBack_end, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.cbegin = new_instancemethod(_Storage.Storage_MapOfCallBack_cbegin, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.cend = new_instancemethod(_Storage.Storage_MapOfCallBack_cend, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Exchange = new_instancemethod(_Storage.Storage_MapOfCallBack_Exchange, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Assign = new_instancemethod(_Storage.Storage_MapOfCallBack_Assign, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Set = new_instancemethod(_Storage.Storage_MapOfCallBack_Set, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.ReSize = new_instancemethod(_Storage.Storage_MapOfCallBack_ReSize, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Bind = new_instancemethod(_Storage.Storage_MapOfCallBack_Bind, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Bound = new_instancemethod(_Storage.Storage_MapOfCallBack_Bound, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.IsBound = new_instancemethod(_Storage.Storage_MapOfCallBack_IsBound, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.UnBind = new_instancemethod(_Storage.Storage_MapOfCallBack_UnBind, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Seek = new_instancemethod(_Storage.Storage_MapOfCallBack_Seek, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Find = new_instancemethod(_Storage.Storage_MapOfCallBack_Find, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.ChangeSeek = new_instancemethod(_Storage.Storage_MapOfCallBack_ChangeSeek, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.ChangeFind = new_instancemethod(_Storage.Storage_MapOfCallBack_ChangeFind, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.__call__ = new_instancemethod(_Storage.Storage_MapOfCallBack___call__, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Clear = new_instancemethod(_Storage.Storage_MapOfCallBack_Clear, None, Storage_MapOfCallBack)
Storage_MapOfCallBack.Size = new_instancemethod(_Storage.Storage_MapOfCallBack_Size, None, Storage_MapOfCallBack)
Storage_MapOfCallBack_swigregister = _Storage.Storage_MapOfCallBack_swigregister
Storage_MapOfCallBack_swigregister(Storage_MapOfCallBack)

class Storage_ArrayOfSchema(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_ArrayOfSchema_swiginit(self, _Storage.new_Storage_ArrayOfSchema(*args))
    __swig_destroy__ = _Storage.delete_Storage_ArrayOfSchema

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Storage_ArrayOfSchema.begin = new_instancemethod(_Storage.Storage_ArrayOfSchema_begin, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.end = new_instancemethod(_Storage.Storage_ArrayOfSchema_end, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.cbegin = new_instancemethod(_Storage.Storage_ArrayOfSchema_cbegin, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.cend = new_instancemethod(_Storage.Storage_ArrayOfSchema_cend, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Init = new_instancemethod(_Storage.Storage_ArrayOfSchema_Init, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Size = new_instancemethod(_Storage.Storage_ArrayOfSchema_Size, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Length = new_instancemethod(_Storage.Storage_ArrayOfSchema_Length, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.IsEmpty = new_instancemethod(_Storage.Storage_ArrayOfSchema_IsEmpty, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Lower = new_instancemethod(_Storage.Storage_ArrayOfSchema_Lower, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Upper = new_instancemethod(_Storage.Storage_ArrayOfSchema_Upper, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.IsDeletable = new_instancemethod(_Storage.Storage_ArrayOfSchema_IsDeletable, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.IsAllocated = new_instancemethod(_Storage.Storage_ArrayOfSchema_IsAllocated, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Assign = new_instancemethod(_Storage.Storage_ArrayOfSchema_Assign, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Move = new_instancemethod(_Storage.Storage_ArrayOfSchema_Move, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Set = new_instancemethod(_Storage.Storage_ArrayOfSchema_Set, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.First = new_instancemethod(_Storage.Storage_ArrayOfSchema_First, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.ChangeFirst = new_instancemethod(_Storage.Storage_ArrayOfSchema_ChangeFirst, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Last = new_instancemethod(_Storage.Storage_ArrayOfSchema_Last, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.ChangeLast = new_instancemethod(_Storage.Storage_ArrayOfSchema_ChangeLast, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Value = new_instancemethod(_Storage.Storage_ArrayOfSchema_Value, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.ChangeValue = new_instancemethod(_Storage.Storage_ArrayOfSchema_ChangeValue, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.__call__ = new_instancemethod(_Storage.Storage_ArrayOfSchema___call__, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.SetValue = new_instancemethod(_Storage.Storage_ArrayOfSchema_SetValue, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema.Resize = new_instancemethod(_Storage.Storage_ArrayOfSchema_Resize, None, Storage_ArrayOfSchema)
Storage_ArrayOfSchema_swigregister = _Storage.Storage_ArrayOfSchema_swigregister
Storage_ArrayOfSchema_swigregister(Storage_ArrayOfSchema)

class Storage_SeqOfRoot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_SeqOfRoot_swiginit(self, _Storage.new_Storage_SeqOfRoot(*args))
    delNode = staticmethod(_Storage.Storage_SeqOfRoot_delNode)
    __swig_destroy__ = _Storage.delete_Storage_SeqOfRoot
Storage_SeqOfRoot.begin = new_instancemethod(_Storage.Storage_SeqOfRoot_begin, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.end = new_instancemethod(_Storage.Storage_SeqOfRoot_end, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.cbegin = new_instancemethod(_Storage.Storage_SeqOfRoot_cbegin, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.cend = new_instancemethod(_Storage.Storage_SeqOfRoot_cend, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Size = new_instancemethod(_Storage.Storage_SeqOfRoot_Size, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Length = new_instancemethod(_Storage.Storage_SeqOfRoot_Length, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Lower = new_instancemethod(_Storage.Storage_SeqOfRoot_Lower, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Upper = new_instancemethod(_Storage.Storage_SeqOfRoot_Upper, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.IsEmpty = new_instancemethod(_Storage.Storage_SeqOfRoot_IsEmpty, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Reverse = new_instancemethod(_Storage.Storage_SeqOfRoot_Reverse, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Exchange = new_instancemethod(_Storage.Storage_SeqOfRoot_Exchange, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Clear = new_instancemethod(_Storage.Storage_SeqOfRoot_Clear, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Assign = new_instancemethod(_Storage.Storage_SeqOfRoot_Assign, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Set = new_instancemethod(_Storage.Storage_SeqOfRoot_Set, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Remove = new_instancemethod(_Storage.Storage_SeqOfRoot_Remove, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Append = new_instancemethod(_Storage.Storage_SeqOfRoot_Append, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Prepend = new_instancemethod(_Storage.Storage_SeqOfRoot_Prepend, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.InsertBefore = new_instancemethod(_Storage.Storage_SeqOfRoot_InsertBefore, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.InsertAfter = new_instancemethod(_Storage.Storage_SeqOfRoot_InsertAfter, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Split = new_instancemethod(_Storage.Storage_SeqOfRoot_Split, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.First = new_instancemethod(_Storage.Storage_SeqOfRoot_First, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.ChangeFirst = new_instancemethod(_Storage.Storage_SeqOfRoot_ChangeFirst, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Last = new_instancemethod(_Storage.Storage_SeqOfRoot_Last, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.ChangeLast = new_instancemethod(_Storage.Storage_SeqOfRoot_ChangeLast, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.Value = new_instancemethod(_Storage.Storage_SeqOfRoot_Value, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.ChangeValue = new_instancemethod(_Storage.Storage_SeqOfRoot_ChangeValue, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.__call__ = new_instancemethod(_Storage.Storage_SeqOfRoot___call__, None, Storage_SeqOfRoot)
Storage_SeqOfRoot.SetValue = new_instancemethod(_Storage.Storage_SeqOfRoot_SetValue, None, Storage_SeqOfRoot)
Storage_SeqOfRoot_swigregister = _Storage.Storage_SeqOfRoot_swigregister
Storage_SeqOfRoot_swigregister(Storage_SeqOfRoot)

def Storage_SeqOfRoot_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Storage.Storage_SeqOfRoot_delNode(theNode, theAl)
Storage_SeqOfRoot_delNode = _Storage.Storage_SeqOfRoot_delNode

class Storage_HArrayOfSchema(Storage_ArrayOfSchema, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_HArrayOfSchema_swiginit(self, _Storage.new_Storage_HArrayOfSchema(*args))
    __swig_destroy__ = _Storage.delete_Storage_HArrayOfSchema
Storage_HArrayOfSchema.Array1 = new_instancemethod(_Storage.Storage_HArrayOfSchema_Array1, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema.ChangeArray1 = new_instancemethod(_Storage.Storage_HArrayOfSchema_ChangeArray1, None, Storage_HArrayOfSchema)
Storage_HArrayOfSchema_swigregister = _Storage.Storage_HArrayOfSchema_swigregister
Storage_HArrayOfSchema_swigregister(Storage_HArrayOfSchema)

class Storage_HPArray(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_HPArray_swiginit(self, _Storage.new_Storage_HPArray(*args))
    __swig_destroy__ = _Storage.delete_Storage_HPArray
Storage_HPArray.Array1 = new_instancemethod(_Storage.Storage_HPArray_Array1, None, Storage_HPArray)
Storage_HPArray.ChangeArray1 = new_instancemethod(_Storage.Storage_HPArray_ChangeArray1, None, Storage_HPArray)
Storage_HPArray_swigregister = _Storage.Storage_HPArray_swigregister
Storage_HPArray_swigregister(Storage_HPArray)

class Storage_HArrayOfCallBack(Storage_ArrayOfCallBack, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_HArrayOfCallBack_swiginit(self, _Storage.new_Storage_HArrayOfCallBack(*args))
    __swig_destroy__ = _Storage.delete_Storage_HArrayOfCallBack
Storage_HArrayOfCallBack.Array1 = new_instancemethod(_Storage.Storage_HArrayOfCallBack_Array1, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack.ChangeArray1 = new_instancemethod(_Storage.Storage_HArrayOfCallBack_ChangeArray1, None, Storage_HArrayOfCallBack)
Storage_HArrayOfCallBack_swigregister = _Storage.Storage_HArrayOfCallBack_swigregister
Storage_HArrayOfCallBack_swigregister(Storage_HArrayOfCallBack)

class Storage_HSeqOfRoot(Storage_SeqOfRoot, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_HSeqOfRoot_swiginit(self, _Storage.new_Storage_HSeqOfRoot(*args))
    __swig_destroy__ = _Storage.delete_Storage_HSeqOfRoot
Storage_HSeqOfRoot.Sequence = new_instancemethod(_Storage.Storage_HSeqOfRoot_Sequence, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.Append = new_instancemethod(_Storage.Storage_HSeqOfRoot_Append, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot.ChangeSequence = new_instancemethod(_Storage.Storage_HSeqOfRoot_ChangeSequence, None, Storage_HSeqOfRoot)
Storage_HSeqOfRoot_swigregister = _Storage.Storage_HSeqOfRoot_swigregister
Storage_HSeqOfRoot_swigregister(Storage_HSeqOfRoot)



