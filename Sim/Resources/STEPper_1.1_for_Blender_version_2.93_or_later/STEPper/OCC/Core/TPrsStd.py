# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TPrsStd module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tprsstd.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TPrsStd.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TPrsStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TPrsStd')
    _TPrsStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TPrsStd', [dirname(__file__)])
        except ImportError:
            import _TPrsStd
            return _TPrsStd
        try:
            _mod = imp.load_module('_TPrsStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TPrsStd = swig_import_helper()
    del swig_import_helper
else:
    import _TPrsStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TPrsStd.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TPrsStd.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TPrsStd.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TPrsStd.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TPrsStd.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TPrsStd.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TPrsStd.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TPrsStd.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TPrsStd.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TPrsStd.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TPrsStd.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TPrsStd.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TPrsStd.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TPrsStd.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TPrsStd.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TPrsStd.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TPrsStd.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TPrsStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TPrsStd.process_exception(error, method_name, class_name)
process_exception = _TPrsStd.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TDataXtd
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.gp
import OCC.Core.TNaming
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.TDataStd
import OCC.Core.Quantity
import OCC.Core.Poly
import OCC.Core.TColgp
import OCC.Core.TShort
import OCC.Core.AIS
import OCC.Core.SelectMgr
import OCC.Core.PrsMgr
import OCC.Core.Prs3d
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Aspect
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Bnd
import OCC.Core.Image
import OCC.Core.OSD
import OCC.Core.HLRAlgo
import OCC.Core.V3d
import OCC.Core.SelectBasics
import OCC.Core.Select3D
import OCC.Core.StdSelect
import OCC.Core.DsgPrs

def Handle_TPrsStd_Driver_Create() -> "opencascade::handle< TPrsStd_Driver >":
    return _TPrsStd.Handle_TPrsStd_Driver_Create()
Handle_TPrsStd_Driver_Create = _TPrsStd.Handle_TPrsStd_Driver_Create

def Handle_TPrsStd_Driver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_Driver >":
    return _TPrsStd.Handle_TPrsStd_Driver_DownCast(t)
Handle_TPrsStd_Driver_DownCast = _TPrsStd.Handle_TPrsStd_Driver_DownCast

def Handle_TPrsStd_Driver_IsNull(t: 'opencascade::handle< TPrsStd_Driver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_Driver_IsNull(t)
Handle_TPrsStd_Driver_IsNull = _TPrsStd.Handle_TPrsStd_Driver_IsNull

def Handle_TPrsStd_DriverTable_Create() -> "opencascade::handle< TPrsStd_DriverTable >":
    return _TPrsStd.Handle_TPrsStd_DriverTable_Create()
Handle_TPrsStd_DriverTable_Create = _TPrsStd.Handle_TPrsStd_DriverTable_Create

def Handle_TPrsStd_DriverTable_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_DriverTable >":
    return _TPrsStd.Handle_TPrsStd_DriverTable_DownCast(t)
Handle_TPrsStd_DriverTable_DownCast = _TPrsStd.Handle_TPrsStd_DriverTable_DownCast

def Handle_TPrsStd_DriverTable_IsNull(t: 'opencascade::handle< TPrsStd_DriverTable > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_DriverTable_IsNull(t)
Handle_TPrsStd_DriverTable_IsNull = _TPrsStd.Handle_TPrsStd_DriverTable_IsNull

def Handle_TPrsStd_AxisDriver_Create() -> "opencascade::handle< TPrsStd_AxisDriver >":
    return _TPrsStd.Handle_TPrsStd_AxisDriver_Create()
Handle_TPrsStd_AxisDriver_Create = _TPrsStd.Handle_TPrsStd_AxisDriver_Create

def Handle_TPrsStd_AxisDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_AxisDriver >":
    return _TPrsStd.Handle_TPrsStd_AxisDriver_DownCast(t)
Handle_TPrsStd_AxisDriver_DownCast = _TPrsStd.Handle_TPrsStd_AxisDriver_DownCast

def Handle_TPrsStd_AxisDriver_IsNull(t: 'opencascade::handle< TPrsStd_AxisDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_AxisDriver_IsNull(t)
Handle_TPrsStd_AxisDriver_IsNull = _TPrsStd.Handle_TPrsStd_AxisDriver_IsNull

def Handle_TPrsStd_ConstraintDriver_Create() -> "opencascade::handle< TPrsStd_ConstraintDriver >":
    return _TPrsStd.Handle_TPrsStd_ConstraintDriver_Create()
Handle_TPrsStd_ConstraintDriver_Create = _TPrsStd.Handle_TPrsStd_ConstraintDriver_Create

def Handle_TPrsStd_ConstraintDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_ConstraintDriver >":
    return _TPrsStd.Handle_TPrsStd_ConstraintDriver_DownCast(t)
Handle_TPrsStd_ConstraintDriver_DownCast = _TPrsStd.Handle_TPrsStd_ConstraintDriver_DownCast

def Handle_TPrsStd_ConstraintDriver_IsNull(t: 'opencascade::handle< TPrsStd_ConstraintDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_ConstraintDriver_IsNull(t)
Handle_TPrsStd_ConstraintDriver_IsNull = _TPrsStd.Handle_TPrsStd_ConstraintDriver_IsNull

def Handle_TPrsStd_GeometryDriver_Create() -> "opencascade::handle< TPrsStd_GeometryDriver >":
    return _TPrsStd.Handle_TPrsStd_GeometryDriver_Create()
Handle_TPrsStd_GeometryDriver_Create = _TPrsStd.Handle_TPrsStd_GeometryDriver_Create

def Handle_TPrsStd_GeometryDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_GeometryDriver >":
    return _TPrsStd.Handle_TPrsStd_GeometryDriver_DownCast(t)
Handle_TPrsStd_GeometryDriver_DownCast = _TPrsStd.Handle_TPrsStd_GeometryDriver_DownCast

def Handle_TPrsStd_GeometryDriver_IsNull(t: 'opencascade::handle< TPrsStd_GeometryDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_GeometryDriver_IsNull(t)
Handle_TPrsStd_GeometryDriver_IsNull = _TPrsStd.Handle_TPrsStd_GeometryDriver_IsNull

def Handle_TPrsStd_NamedShapeDriver_Create() -> "opencascade::handle< TPrsStd_NamedShapeDriver >":
    return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_Create()
Handle_TPrsStd_NamedShapeDriver_Create = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_Create

def Handle_TPrsStd_NamedShapeDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_NamedShapeDriver >":
    return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_DownCast(t)
Handle_TPrsStd_NamedShapeDriver_DownCast = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_DownCast

def Handle_TPrsStd_NamedShapeDriver_IsNull(t: 'opencascade::handle< TPrsStd_NamedShapeDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_IsNull(t)
Handle_TPrsStd_NamedShapeDriver_IsNull = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_IsNull

def Handle_TPrsStd_PlaneDriver_Create() -> "opencascade::handle< TPrsStd_PlaneDriver >":
    return _TPrsStd.Handle_TPrsStd_PlaneDriver_Create()
Handle_TPrsStd_PlaneDriver_Create = _TPrsStd.Handle_TPrsStd_PlaneDriver_Create

def Handle_TPrsStd_PlaneDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_PlaneDriver >":
    return _TPrsStd.Handle_TPrsStd_PlaneDriver_DownCast(t)
Handle_TPrsStd_PlaneDriver_DownCast = _TPrsStd.Handle_TPrsStd_PlaneDriver_DownCast

def Handle_TPrsStd_PlaneDriver_IsNull(t: 'opencascade::handle< TPrsStd_PlaneDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_PlaneDriver_IsNull(t)
Handle_TPrsStd_PlaneDriver_IsNull = _TPrsStd.Handle_TPrsStd_PlaneDriver_IsNull

def Handle_TPrsStd_PointDriver_Create() -> "opencascade::handle< TPrsStd_PointDriver >":
    return _TPrsStd.Handle_TPrsStd_PointDriver_Create()
Handle_TPrsStd_PointDriver_Create = _TPrsStd.Handle_TPrsStd_PointDriver_Create

def Handle_TPrsStd_PointDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_PointDriver >":
    return _TPrsStd.Handle_TPrsStd_PointDriver_DownCast(t)
Handle_TPrsStd_PointDriver_DownCast = _TPrsStd.Handle_TPrsStd_PointDriver_DownCast

def Handle_TPrsStd_PointDriver_IsNull(t: 'opencascade::handle< TPrsStd_PointDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_PointDriver_IsNull(t)
Handle_TPrsStd_PointDriver_IsNull = _TPrsStd.Handle_TPrsStd_PointDriver_IsNull
class TPrsStd_DataMapOfGUIDDriver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TPrsStd.TPrsStd_DataMapOfGUIDDriver_swiginit(self, _TPrsStd.new_TPrsStd_DataMapOfGUIDDriver(*args))
    __swig_destroy__ = _TPrsStd.delete_TPrsStd_DataMapOfGUIDDriver
TPrsStd_DataMapOfGUIDDriver.begin = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_begin, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.end = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_end, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.cbegin = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_cbegin, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.cend = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_cend, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Exchange = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Exchange, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Assign = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Assign, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Set = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Set, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.ReSize = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_ReSize, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Bind = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Bind, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Bound = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Bound, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.IsBound = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_IsBound, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.UnBind = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_UnBind, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Seek = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Seek, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Find = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Find, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.ChangeSeek = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_ChangeSeek, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.ChangeFind = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_ChangeFind, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.__call__ = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver___call__, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Clear = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Clear, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver.Size = new_instancemethod(_TPrsStd.TPrsStd_DataMapOfGUIDDriver_Size, None, TPrsStd_DataMapOfGUIDDriver)
TPrsStd_DataMapOfGUIDDriver_swigregister = _TPrsStd.TPrsStd_DataMapOfGUIDDriver_swigregister
TPrsStd_DataMapOfGUIDDriver_swigregister(TPrsStd_DataMapOfGUIDDriver)

class TPrsStd_ConstraintTools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ComputeAngle(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngle(*args)

    ComputeAngle = staticmethod(ComputeAngle)

    def ComputeAngleForOneFace(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args)

    ComputeAngleForOneFace = staticmethod(ComputeAngleForOneFace)

    def ComputeCoincident(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeCoincident(*args)

    ComputeCoincident = staticmethod(ComputeCoincident)

    def ComputeConcentric(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeConcentric(*args)

    ComputeConcentric = staticmethod(ComputeConcentric)

    def ComputeDiameter(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeDiameter(*args)

    ComputeDiameter = staticmethod(ComputeDiameter)

    def ComputeDistance(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeDistance(*args)

    ComputeDistance = staticmethod(ComputeDistance)

    def ComputeEqualDistance(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualDistance(*args)

    ComputeEqualDistance = staticmethod(ComputeEqualDistance)

    def ComputeEqualRadius(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualRadius(*args)

    ComputeEqualRadius = staticmethod(ComputeEqualRadius)

    def ComputeFix(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeFix(*args)

    ComputeFix = staticmethod(ComputeFix)

    def ComputeMaxRadius(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMaxRadius(*args)

    ComputeMaxRadius = staticmethod(ComputeMaxRadius)

    def ComputeMidPoint(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMidPoint(*args)

    ComputeMidPoint = staticmethod(ComputeMidPoint)

    def ComputeMinRadius(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMinRadius(*args)

    ComputeMinRadius = staticmethod(ComputeMinRadius)

    def ComputeOffset(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeOffset(*args)

    ComputeOffset = staticmethod(ComputeOffset)

    def ComputeOthers(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeOthers(*args)

    ComputeOthers = staticmethod(ComputeOthers)

    def ComputeParallel(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeParallel(*args)

    ComputeParallel = staticmethod(ComputeParallel)

    def ComputePerpendicular(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputePerpendicular(*args)

    ComputePerpendicular = staticmethod(ComputePerpendicular)

    def ComputePlacement(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputePlacement(*args)

    ComputePlacement = staticmethod(ComputePlacement)

    def ComputeRadius(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeRadius(*args)

    ComputeRadius = staticmethod(ComputeRadius)

    def ComputeRound(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeRound(*args)

    ComputeRound = staticmethod(ComputeRound)

    def ComputeSymmetry(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeSymmetry(*args)

    ComputeSymmetry = staticmethod(ComputeSymmetry)

    def ComputeTangent(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeTangent(*args)

    ComputeTangent = staticmethod(ComputeTangent)

    def ComputeTextAndValue(*args) -> "Standard_Real &":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param aValue:
        	:type aValue: float
        	:param aText:
        	:type aText: TCollection_ExtendedString
        	:param anIsAngle:
        	:type anIsAngle: bool
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeTextAndValue(*args)

    ComputeTextAndValue = staticmethod(ComputeTextAndValue)

    def UpdateOnlyValue(*args) -> "void":
        """
        :param aConst:
        	:type aConst: TDataXtd_Constraint
        	:param anAIS:
        	:type anAIS: AIS_InteractiveObject
        	:rtype: void
        """
        return _TPrsStd.TPrsStd_ConstraintTools_UpdateOnlyValue(*args)

    UpdateOnlyValue = staticmethod(UpdateOnlyValue)

    __repr__ = _dumps_object


    def __init__(self):
        _TPrsStd.TPrsStd_ConstraintTools_swiginit(self, _TPrsStd.new_TPrsStd_ConstraintTools())
    __swig_destroy__ = _TPrsStd.delete_TPrsStd_ConstraintTools
TPrsStd_ConstraintTools_swigregister = _TPrsStd.TPrsStd_ConstraintTools_swigregister
TPrsStd_ConstraintTools_swigregister(TPrsStd_ConstraintTools)

def TPrsStd_ConstraintTools_ComputeAngle(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngle(*args)

def TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args)

def TPrsStd_ConstraintTools_ComputeCoincident(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeCoincident(*args)

def TPrsStd_ConstraintTools_ComputeConcentric(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeConcentric(*args)

def TPrsStd_ConstraintTools_ComputeDiameter(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeDiameter(*args)

def TPrsStd_ConstraintTools_ComputeDistance(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeDistance(*args)

def TPrsStd_ConstraintTools_ComputeEqualDistance(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualDistance(*args)

def TPrsStd_ConstraintTools_ComputeEqualRadius(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualRadius(*args)

def TPrsStd_ConstraintTools_ComputeFix(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeFix(*args)

def TPrsStd_ConstraintTools_ComputeMaxRadius(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMaxRadius(*args)

def TPrsStd_ConstraintTools_ComputeMidPoint(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMidPoint(*args)

def TPrsStd_ConstraintTools_ComputeMinRadius(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMinRadius(*args)

def TPrsStd_ConstraintTools_ComputeOffset(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeOffset(*args)

def TPrsStd_ConstraintTools_ComputeOthers(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeOthers(*args)

def TPrsStd_ConstraintTools_ComputeParallel(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeParallel(*args)

def TPrsStd_ConstraintTools_ComputePerpendicular(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputePerpendicular(*args)

def TPrsStd_ConstraintTools_ComputePlacement(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputePlacement(*args)

def TPrsStd_ConstraintTools_ComputeRadius(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeRadius(*args)

def TPrsStd_ConstraintTools_ComputeRound(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeRound(*args)

def TPrsStd_ConstraintTools_ComputeSymmetry(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeSymmetry(*args)

def TPrsStd_ConstraintTools_ComputeTangent(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeTangent(*args)

def TPrsStd_ConstraintTools_ComputeTextAndValue(*args) -> "Standard_Real &":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param aValue:
    	:type aValue: float
    	:param aText:
    	:type aText: TCollection_ExtendedString
    	:param anIsAngle:
    	:type anIsAngle: bool
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeTextAndValue(*args)

def TPrsStd_ConstraintTools_UpdateOnlyValue(*args) -> "void":
    """
    :param aConst:
    	:type aConst: TDataXtd_Constraint
    	:param anAIS:
    	:type anAIS: AIS_InteractiveObject
    	:rtype: void
    """
    return _TPrsStd.TPrsStd_ConstraintTools_UpdateOnlyValue(*args)

class TPrsStd_Driver(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Update(self, *args) -> "Standard_Boolean":
        """
        * Updates the interactive object ais with information found on the attributes associated with the label L.
        	:param L:
        	:type L: TDF_Label
        	:param ais:
        	:type ais: AIS_InteractiveObject
        	:rtype: bool
        """
        return _TPrsStd.TPrsStd_Driver_Update(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_Driver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_Driver
TPrsStd_Driver.Update = new_instancemethod(_TPrsStd.TPrsStd_Driver_Update, None, TPrsStd_Driver)
TPrsStd_Driver_swigregister = _TPrsStd.TPrsStd_Driver_swigregister
TPrsStd_Driver_swigregister(TPrsStd_Driver)

class TPrsStd_DriverTable(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDriver(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the driver has been added successfully to the driver table.
        	:param guid:
        	:type guid: Standard_GUID
        	:param driver:
        	:type driver: TPrsStd_Driver
        	:rtype: bool
        """
        return _TPrsStd.TPrsStd_DriverTable_AddDriver(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Removes all drivers. Returns true if the driver has been removed successfully. If this method is used, the InitStandardDrivers method should be called to fill the table with standard drivers.
        	:rtype: None
        """
        return _TPrsStd.TPrsStd_DriverTable_Clear(self, *args)


    def FindDriver(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the driver was found.
        	:param guid:
        	:type guid: Standard_GUID
        	:param driver:
        	:type driver: TPrsStd_Driver
        	:rtype: bool
        """
        return _TPrsStd.TPrsStd_DriverTable_FindDriver(self, *args)


    def Get(*args) -> "opencascade::handle< TPrsStd_DriverTable >":
        """
        * Returns the static table. If it does not exist, creates it and fills it with standard drivers.
        	:rtype: opencascade::handle<TPrsStd_DriverTable>
        """
        return _TPrsStd.TPrsStd_DriverTable_Get(*args)

    Get = staticmethod(Get)

    def InitStandardDrivers(self, *args) -> "void":
        """
        * Fills the table with standard drivers
        	:rtype: None
        """
        return _TPrsStd.TPrsStd_DriverTable_InitStandardDrivers(self, *args)


    def RemoveDriver(self, *args) -> "Standard_Boolean":
        """
        * Removes a driver with the given GUID. Returns true if the driver has been removed successfully.
        	:param guid:
        	:type guid: Standard_GUID
        	:rtype: bool
        """
        return _TPrsStd.TPrsStd_DriverTable_RemoveDriver(self, *args)


    def __init__(self, *args):
        """
        * Default constructor
        	:rtype: None
        """
        _TPrsStd.TPrsStd_DriverTable_swiginit(self, _TPrsStd.new_TPrsStd_DriverTable(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_DriverTable_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_DriverTable
TPrsStd_DriverTable.AddDriver = new_instancemethod(_TPrsStd.TPrsStd_DriverTable_AddDriver, None, TPrsStd_DriverTable)
TPrsStd_DriverTable.Clear = new_instancemethod(_TPrsStd.TPrsStd_DriverTable_Clear, None, TPrsStd_DriverTable)
TPrsStd_DriverTable.FindDriver = new_instancemethod(_TPrsStd.TPrsStd_DriverTable_FindDriver, None, TPrsStd_DriverTable)
TPrsStd_DriverTable.InitStandardDrivers = new_instancemethod(_TPrsStd.TPrsStd_DriverTable_InitStandardDrivers, None, TPrsStd_DriverTable)
TPrsStd_DriverTable.RemoveDriver = new_instancemethod(_TPrsStd.TPrsStd_DriverTable_RemoveDriver, None, TPrsStd_DriverTable)
TPrsStd_DriverTable_swigregister = _TPrsStd.TPrsStd_DriverTable_swigregister
TPrsStd_DriverTable_swigregister(TPrsStd_DriverTable)

def TPrsStd_DriverTable_Get(*args) -> "opencascade::handle< TPrsStd_DriverTable >":
    """
    * Returns the static table. If it does not exist, creates it and fills it with standard drivers.
    	:rtype: opencascade::handle<TPrsStd_DriverTable>
    """
    return _TPrsStd.TPrsStd_DriverTable_Get(*args)

class TPrsStd_AxisDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty axis driver.
        	:rtype: None
        """
        _TPrsStd.TPrsStd_AxisDriver_swiginit(self, _TPrsStd.new_TPrsStd_AxisDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_AxisDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_AxisDriver
TPrsStd_AxisDriver_swigregister = _TPrsStd.TPrsStd_AxisDriver_swigregister
TPrsStd_AxisDriver_swigregister(TPrsStd_AxisDriver)

class TPrsStd_ConstraintDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty constraint driver.
        	:rtype: None
        """
        _TPrsStd.TPrsStd_ConstraintDriver_swiginit(self, _TPrsStd.new_TPrsStd_ConstraintDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_ConstraintDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_ConstraintDriver
TPrsStd_ConstraintDriver_swigregister = _TPrsStd.TPrsStd_ConstraintDriver_swigregister
TPrsStd_ConstraintDriver_swigregister(TPrsStd_ConstraintDriver)

class TPrsStd_GeometryDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty geometry driver.
        	:rtype: None
        """
        _TPrsStd.TPrsStd_GeometryDriver_swiginit(self, _TPrsStd.new_TPrsStd_GeometryDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_GeometryDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_GeometryDriver
TPrsStd_GeometryDriver_swigregister = _TPrsStd.TPrsStd_GeometryDriver_swigregister
TPrsStd_GeometryDriver_swigregister(TPrsStd_GeometryDriver)

class TPrsStd_NamedShapeDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty named shape driver.
        	:rtype: None
        """
        _TPrsStd.TPrsStd_NamedShapeDriver_swiginit(self, _TPrsStd.new_TPrsStd_NamedShapeDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_NamedShapeDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_NamedShapeDriver
TPrsStd_NamedShapeDriver_swigregister = _TPrsStd.TPrsStd_NamedShapeDriver_swigregister
TPrsStd_NamedShapeDriver_swigregister(TPrsStd_NamedShapeDriver)

class TPrsStd_PlaneDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty plane driver.
        	:rtype: None
        """
        _TPrsStd.TPrsStd_PlaneDriver_swiginit(self, _TPrsStd.new_TPrsStd_PlaneDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_PlaneDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_PlaneDriver
TPrsStd_PlaneDriver_swigregister = _TPrsStd.TPrsStd_PlaneDriver_swigregister
TPrsStd_PlaneDriver_swigregister(TPrsStd_PlaneDriver)

class TPrsStd_PointDriver(TPrsStd_Driver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty point driver.
        	:rtype: None
        """
        _TPrsStd.TPrsStd_PointDriver_swiginit(self, _TPrsStd.new_TPrsStd_PointDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_PointDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_PointDriver
TPrsStd_PointDriver_swigregister = _TPrsStd.TPrsStd_PointDriver_swigregister
TPrsStd_PointDriver_swigregister(TPrsStd_PointDriver)



