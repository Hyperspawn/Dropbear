# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TShort module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tshort.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TShort.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TShort')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TShort')
    _TShort = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TShort', [dirname(__file__)])
        except ImportError:
            import _TShort
            return _TShort
        try:
            _mod = imp.load_module('_TShort', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TShort = swig_import_helper()
    del swig_import_helper
else:
    import _TShort
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TShort.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TShort.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TShort.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TShort.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TShort.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TShort.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TShort.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TShort.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TShort.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TShort.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TShort.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TShort.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TShort.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TShort.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TShort.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TShort.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TShort.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TShort.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TShort.process_exception(error, method_name, class_name)
process_exception = _TShort.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection

def Handle_TShort_HArray1OfShortReal_Create() -> "opencascade::handle< TShort_HArray1OfShortReal >":
    return _TShort.Handle_TShort_HArray1OfShortReal_Create()
Handle_TShort_HArray1OfShortReal_Create = _TShort.Handle_TShort_HArray1OfShortReal_Create

def Handle_TShort_HArray1OfShortReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TShort_HArray1OfShortReal >":
    return _TShort.Handle_TShort_HArray1OfShortReal_DownCast(t)
Handle_TShort_HArray1OfShortReal_DownCast = _TShort.Handle_TShort_HArray1OfShortReal_DownCast

def Handle_TShort_HArray1OfShortReal_IsNull(t: 'opencascade::handle< TShort_HArray1OfShortReal > const &') -> "bool":
    return _TShort.Handle_TShort_HArray1OfShortReal_IsNull(t)
Handle_TShort_HArray1OfShortReal_IsNull = _TShort.Handle_TShort_HArray1OfShortReal_IsNull

def Handle_TShort_HArray2OfShortReal_Create() -> "opencascade::handle< TShort_HArray2OfShortReal >":
    return _TShort.Handle_TShort_HArray2OfShortReal_Create()
Handle_TShort_HArray2OfShortReal_Create = _TShort.Handle_TShort_HArray2OfShortReal_Create

def Handle_TShort_HArray2OfShortReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TShort_HArray2OfShortReal >":
    return _TShort.Handle_TShort_HArray2OfShortReal_DownCast(t)
Handle_TShort_HArray2OfShortReal_DownCast = _TShort.Handle_TShort_HArray2OfShortReal_DownCast

def Handle_TShort_HArray2OfShortReal_IsNull(t: 'opencascade::handle< TShort_HArray2OfShortReal > const &') -> "bool":
    return _TShort.Handle_TShort_HArray2OfShortReal_IsNull(t)
Handle_TShort_HArray2OfShortReal_IsNull = _TShort.Handle_TShort_HArray2OfShortReal_IsNull

def Handle_TShort_HSequenceOfShortReal_Create() -> "opencascade::handle< TShort_HSequenceOfShortReal >":
    return _TShort.Handle_TShort_HSequenceOfShortReal_Create()
Handle_TShort_HSequenceOfShortReal_Create = _TShort.Handle_TShort_HSequenceOfShortReal_Create

def Handle_TShort_HSequenceOfShortReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TShort_HSequenceOfShortReal >":
    return _TShort.Handle_TShort_HSequenceOfShortReal_DownCast(t)
Handle_TShort_HSequenceOfShortReal_DownCast = _TShort.Handle_TShort_HSequenceOfShortReal_DownCast

def Handle_TShort_HSequenceOfShortReal_IsNull(t: 'opencascade::handle< TShort_HSequenceOfShortReal > const &') -> "bool":
    return _TShort.Handle_TShort_HSequenceOfShortReal_IsNull(t)
Handle_TShort_HSequenceOfShortReal_IsNull = _TShort.Handle_TShort_HSequenceOfShortReal_IsNull
class TShort_SequenceOfShortReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TShort.TShort_SequenceOfShortReal_swiginit(self, _TShort.new_TShort_SequenceOfShortReal(*args))
    delNode = staticmethod(_TShort.TShort_SequenceOfShortReal_delNode)
    __swig_destroy__ = _TShort.delete_TShort_SequenceOfShortReal
TShort_SequenceOfShortReal.begin = new_instancemethod(_TShort.TShort_SequenceOfShortReal_begin, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.end = new_instancemethod(_TShort.TShort_SequenceOfShortReal_end, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.cbegin = new_instancemethod(_TShort.TShort_SequenceOfShortReal_cbegin, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.cend = new_instancemethod(_TShort.TShort_SequenceOfShortReal_cend, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Size = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Size, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Length = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Length, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Lower = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Lower, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Upper = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Upper, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.IsEmpty = new_instancemethod(_TShort.TShort_SequenceOfShortReal_IsEmpty, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Reverse = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Reverse, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Exchange = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Exchange, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Clear = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Clear, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Assign = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Assign, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Set = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Set, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Remove = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Remove, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Append = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Append, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Prepend = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Prepend, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.InsertBefore = new_instancemethod(_TShort.TShort_SequenceOfShortReal_InsertBefore, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.InsertAfter = new_instancemethod(_TShort.TShort_SequenceOfShortReal_InsertAfter, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Split = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Split, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.First = new_instancemethod(_TShort.TShort_SequenceOfShortReal_First, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.ChangeFirst = new_instancemethod(_TShort.TShort_SequenceOfShortReal_ChangeFirst, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Last = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Last, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.ChangeLast = new_instancemethod(_TShort.TShort_SequenceOfShortReal_ChangeLast, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.Value = new_instancemethod(_TShort.TShort_SequenceOfShortReal_Value, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.ChangeValue = new_instancemethod(_TShort.TShort_SequenceOfShortReal_ChangeValue, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.__call__ = new_instancemethod(_TShort.TShort_SequenceOfShortReal___call__, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal.SetValue = new_instancemethod(_TShort.TShort_SequenceOfShortReal_SetValue, None, TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal_swigregister = _TShort.TShort_SequenceOfShortReal_swigregister
TShort_SequenceOfShortReal_swigregister(TShort_SequenceOfShortReal)

def TShort_SequenceOfShortReal_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TShort.TShort_SequenceOfShortReal_delNode(theNode, theAl)
TShort_SequenceOfShortReal_delNode = _TShort.TShort_SequenceOfShortReal_delNode

class TShort_Array2OfShortReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TShort.TShort_Array2OfShortReal_swiginit(self, _TShort.new_TShort_Array2OfShortReal(*args))
    __swig_destroy__ = _TShort.delete_TShort_Array2OfShortReal
TShort_Array2OfShortReal.Init = new_instancemethod(_TShort.TShort_Array2OfShortReal_Init, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.Size = new_instancemethod(_TShort.TShort_Array2OfShortReal_Size, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.Length = new_instancemethod(_TShort.TShort_Array2OfShortReal_Length, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.NbRows = new_instancemethod(_TShort.TShort_Array2OfShortReal_NbRows, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.NbColumns = new_instancemethod(_TShort.TShort_Array2OfShortReal_NbColumns, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.RowLength = new_instancemethod(_TShort.TShort_Array2OfShortReal_RowLength, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.ColLength = new_instancemethod(_TShort.TShort_Array2OfShortReal_ColLength, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.LowerRow = new_instancemethod(_TShort.TShort_Array2OfShortReal_LowerRow, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.UpperRow = new_instancemethod(_TShort.TShort_Array2OfShortReal_UpperRow, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.LowerCol = new_instancemethod(_TShort.TShort_Array2OfShortReal_LowerCol, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.UpperCol = new_instancemethod(_TShort.TShort_Array2OfShortReal_UpperCol, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.IsDeletable = new_instancemethod(_TShort.TShort_Array2OfShortReal_IsDeletable, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.Assign = new_instancemethod(_TShort.TShort_Array2OfShortReal_Assign, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.Move = new_instancemethod(_TShort.TShort_Array2OfShortReal_Move, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.Set = new_instancemethod(_TShort.TShort_Array2OfShortReal_Set, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.Value = new_instancemethod(_TShort.TShort_Array2OfShortReal_Value, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.ChangeValue = new_instancemethod(_TShort.TShort_Array2OfShortReal_ChangeValue, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.__call__ = new_instancemethod(_TShort.TShort_Array2OfShortReal___call__, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.SetValue = new_instancemethod(_TShort.TShort_Array2OfShortReal_SetValue, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal.Resize = new_instancemethod(_TShort.TShort_Array2OfShortReal_Resize, None, TShort_Array2OfShortReal)
TShort_Array2OfShortReal_swigregister = _TShort.TShort_Array2OfShortReal_swigregister
TShort_Array2OfShortReal_swigregister(TShort_Array2OfShortReal)

class TShort_Array1OfShortReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TShort.TShort_Array1OfShortReal_swiginit(self, _TShort.new_TShort_Array1OfShortReal(*args))
    __swig_destroy__ = _TShort.delete_TShort_Array1OfShortReal

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TShort_Array1OfShortReal.begin = new_instancemethod(_TShort.TShort_Array1OfShortReal_begin, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.end = new_instancemethod(_TShort.TShort_Array1OfShortReal_end, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.cbegin = new_instancemethod(_TShort.TShort_Array1OfShortReal_cbegin, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.cend = new_instancemethod(_TShort.TShort_Array1OfShortReal_cend, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.Init = new_instancemethod(_TShort.TShort_Array1OfShortReal_Init, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.Size = new_instancemethod(_TShort.TShort_Array1OfShortReal_Size, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.Length = new_instancemethod(_TShort.TShort_Array1OfShortReal_Length, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.IsEmpty = new_instancemethod(_TShort.TShort_Array1OfShortReal_IsEmpty, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.Lower = new_instancemethod(_TShort.TShort_Array1OfShortReal_Lower, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.Upper = new_instancemethod(_TShort.TShort_Array1OfShortReal_Upper, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.IsDeletable = new_instancemethod(_TShort.TShort_Array1OfShortReal_IsDeletable, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.IsAllocated = new_instancemethod(_TShort.TShort_Array1OfShortReal_IsAllocated, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.Assign = new_instancemethod(_TShort.TShort_Array1OfShortReal_Assign, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.Move = new_instancemethod(_TShort.TShort_Array1OfShortReal_Move, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.Set = new_instancemethod(_TShort.TShort_Array1OfShortReal_Set, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.First = new_instancemethod(_TShort.TShort_Array1OfShortReal_First, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.ChangeFirst = new_instancemethod(_TShort.TShort_Array1OfShortReal_ChangeFirst, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.Last = new_instancemethod(_TShort.TShort_Array1OfShortReal_Last, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.ChangeLast = new_instancemethod(_TShort.TShort_Array1OfShortReal_ChangeLast, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.Value = new_instancemethod(_TShort.TShort_Array1OfShortReal_Value, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.ChangeValue = new_instancemethod(_TShort.TShort_Array1OfShortReal_ChangeValue, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.__call__ = new_instancemethod(_TShort.TShort_Array1OfShortReal___call__, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.SetValue = new_instancemethod(_TShort.TShort_Array1OfShortReal_SetValue, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal.Resize = new_instancemethod(_TShort.TShort_Array1OfShortReal_Resize, None, TShort_Array1OfShortReal)
TShort_Array1OfShortReal_swigregister = _TShort.TShort_Array1OfShortReal_swigregister
TShort_Array1OfShortReal_swigregister(TShort_Array1OfShortReal)

class TShort_HArray1OfShortReal(TShort_Array1OfShortReal, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TShort.TShort_HArray1OfShortReal_swiginit(self, _TShort.new_TShort_HArray1OfShortReal(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TShort_HArray1OfShortReal_DownCast(t)

    __swig_destroy__ = _TShort.delete_TShort_HArray1OfShortReal
TShort_HArray1OfShortReal.Array1 = new_instancemethod(_TShort.TShort_HArray1OfShortReal_Array1, None, TShort_HArray1OfShortReal)
TShort_HArray1OfShortReal.ChangeArray1 = new_instancemethod(_TShort.TShort_HArray1OfShortReal_ChangeArray1, None, TShort_HArray1OfShortReal)
TShort_HArray1OfShortReal_swigregister = _TShort.TShort_HArray1OfShortReal_swigregister
TShort_HArray1OfShortReal_swigregister(TShort_HArray1OfShortReal)

class TShort_HArray2OfShortReal(TShort_Array2OfShortReal, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TShort.TShort_HArray2OfShortReal_swiginit(self, _TShort.new_TShort_HArray2OfShortReal(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TShort_HArray2OfShortReal_DownCast(t)

    __swig_destroy__ = _TShort.delete_TShort_HArray2OfShortReal
TShort_HArray2OfShortReal.Array2 = new_instancemethod(_TShort.TShort_HArray2OfShortReal_Array2, None, TShort_HArray2OfShortReal)
TShort_HArray2OfShortReal.ChangeArray2 = new_instancemethod(_TShort.TShort_HArray2OfShortReal_ChangeArray2, None, TShort_HArray2OfShortReal)
TShort_HArray2OfShortReal_swigregister = _TShort.TShort_HArray2OfShortReal_swigregister
TShort_HArray2OfShortReal_swigregister(TShort_HArray2OfShortReal)

class TShort_HSequenceOfShortReal(TShort_SequenceOfShortReal, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TShort.TShort_HSequenceOfShortReal_swiginit(self, _TShort.new_TShort_HSequenceOfShortReal(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TShort_HSequenceOfShortReal_DownCast(t)

    __swig_destroy__ = _TShort.delete_TShort_HSequenceOfShortReal
TShort_HSequenceOfShortReal.Sequence = new_instancemethod(_TShort.TShort_HSequenceOfShortReal_Sequence, None, TShort_HSequenceOfShortReal)
TShort_HSequenceOfShortReal.Append = new_instancemethod(_TShort.TShort_HSequenceOfShortReal_Append, None, TShort_HSequenceOfShortReal)
TShort_HSequenceOfShortReal.ChangeSequence = new_instancemethod(_TShort.TShort_HSequenceOfShortReal_ChangeSequence, None, TShort_HSequenceOfShortReal)
TShort_HSequenceOfShortReal_swigregister = _TShort.TShort_HSequenceOfShortReal_swigregister
TShort_HSequenceOfShortReal_swigregister(TShort_HSequenceOfShortReal)



