# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Tesselator.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Tesselator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Tesselator')
    _Tesselator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Tesselator', [dirname(__file__)])
        except ImportError:
            import _Tesselator
            return _Tesselator
        try:
            _mod = imp.load_module('_Tesselator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Tesselator = swig_import_helper()
    del swig_import_helper
else:
    import _Tesselator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Tesselator.process_exception(error, method_name, class_name)
process_exception = _Tesselator.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Tesselator.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Tesselator.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Tesselator.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Tesselator.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Tesselator.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Tesselator.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Tesselator.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Tesselator.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Tesselator.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Tesselator.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Tesselator.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Tesselator.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Tesselator.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Tesselator.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Tesselator.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Tesselator.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Tesselator.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Tesselator.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _Tesselator.vector_float_swiginit(self, _Tesselator.new_vector_float(*args))
    __swig_destroy__ = _Tesselator.delete_vector_float
vector_float.iterator = new_instancemethod(_Tesselator.vector_float_iterator, None, vector_float)
vector_float.__nonzero__ = new_instancemethod(_Tesselator.vector_float___nonzero__, None, vector_float)
vector_float.__bool__ = new_instancemethod(_Tesselator.vector_float___bool__, None, vector_float)
vector_float.__len__ = new_instancemethod(_Tesselator.vector_float___len__, None, vector_float)
vector_float.__getslice__ = new_instancemethod(_Tesselator.vector_float___getslice__, None, vector_float)
vector_float.__setslice__ = new_instancemethod(_Tesselator.vector_float___setslice__, None, vector_float)
vector_float.__delslice__ = new_instancemethod(_Tesselator.vector_float___delslice__, None, vector_float)
vector_float.__delitem__ = new_instancemethod(_Tesselator.vector_float___delitem__, None, vector_float)
vector_float.__getitem__ = new_instancemethod(_Tesselator.vector_float___getitem__, None, vector_float)
vector_float.__setitem__ = new_instancemethod(_Tesselator.vector_float___setitem__, None, vector_float)
vector_float.pop = new_instancemethod(_Tesselator.vector_float_pop, None, vector_float)
vector_float.append = new_instancemethod(_Tesselator.vector_float_append, None, vector_float)
vector_float.empty = new_instancemethod(_Tesselator.vector_float_empty, None, vector_float)
vector_float.size = new_instancemethod(_Tesselator.vector_float_size, None, vector_float)
vector_float.swap = new_instancemethod(_Tesselator.vector_float_swap, None, vector_float)
vector_float.begin = new_instancemethod(_Tesselator.vector_float_begin, None, vector_float)
vector_float.end = new_instancemethod(_Tesselator.vector_float_end, None, vector_float)
vector_float.rbegin = new_instancemethod(_Tesselator.vector_float_rbegin, None, vector_float)
vector_float.rend = new_instancemethod(_Tesselator.vector_float_rend, None, vector_float)
vector_float.clear = new_instancemethod(_Tesselator.vector_float_clear, None, vector_float)
vector_float.get_allocator = new_instancemethod(_Tesselator.vector_float_get_allocator, None, vector_float)
vector_float.pop_back = new_instancemethod(_Tesselator.vector_float_pop_back, None, vector_float)
vector_float.erase = new_instancemethod(_Tesselator.vector_float_erase, None, vector_float)
vector_float.push_back = new_instancemethod(_Tesselator.vector_float_push_back, None, vector_float)
vector_float.front = new_instancemethod(_Tesselator.vector_float_front, None, vector_float)
vector_float.back = new_instancemethod(_Tesselator.vector_float_back, None, vector_float)
vector_float.assign = new_instancemethod(_Tesselator.vector_float_assign, None, vector_float)
vector_float.resize = new_instancemethod(_Tesselator.vector_float_resize, None, vector_float)
vector_float.insert = new_instancemethod(_Tesselator.vector_float_insert, None, vector_float)
vector_float.reserve = new_instancemethod(_Tesselator.vector_float_reserve, None, vector_float)
vector_float.capacity = new_instancemethod(_Tesselator.vector_float_capacity, None, vector_float)
vector_float_swigregister = _Tesselator.vector_float_swigregister
vector_float_swigregister(vector_float)

class ShapeTesselator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, aShape: 'TopoDS_Shape'):
        """__init__(ShapeTesselator self, TopoDS_Shape aShape) -> ShapeTesselator"""
        _Tesselator.ShapeTesselator_swiginit(self, _Tesselator.new_ShapeTesselator(aShape))
    __swig_destroy__ = _Tesselator.delete_ShapeTesselator

    def Compute(self, compute_edges: 'bool'=False, mesh_quality: 'float'=1.0, parallel: 'bool'=False) -> "void":
        """Compute(ShapeTesselator self, bool compute_edges=False, float mesh_quality=1.0, bool parallel=False)"""
        return _Tesselator.ShapeTesselator_Compute(self, compute_edges, mesh_quality, parallel)


    def GetVertex(self, ivert: 'int') -> "void":
        """GetVertex(ShapeTesselator self, int ivert)"""
        return _Tesselator.ShapeTesselator_GetVertex(self, ivert)


    def GetNormal(self, inorm: 'int') -> "void":
        """GetNormal(ShapeTesselator self, int inorm)"""
        return _Tesselator.ShapeTesselator_GetNormal(self, inorm)


    def GetTriangleIndex(self, triangleIdx: 'int') -> "void":
        """GetTriangleIndex(ShapeTesselator self, int triangleIdx)"""
        return _Tesselator.ShapeTesselator_GetTriangleIndex(self, triangleIdx)


    def GetEdgeVertex(self, iEdge: 'int', ivert: 'int') -> "void":
        """GetEdgeVertex(ShapeTesselator self, int iEdge, int ivert)"""
        return _Tesselator.ShapeTesselator_GetEdgeVertex(self, iEdge, ivert)


    def VerticesList(self) -> "float *":
        """VerticesList(ShapeTesselator self) -> float *"""
        return _Tesselator.ShapeTesselator_VerticesList(self)


    def ObjGetTriangleCount(self) -> "int":
        """ObjGetTriangleCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetTriangleCount(self)


    def ObjGetInvalidTriangleCount(self) -> "int":
        """ObjGetInvalidTriangleCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetInvalidTriangleCount(self)


    def ObjGetVertexCount(self) -> "int":
        """ObjGetVertexCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetVertexCount(self)


    def ObjGetNormalCount(self) -> "int":
        """ObjGetNormalCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetNormalCount(self)


    def ObjGetEdgeCount(self) -> "int":
        """ObjGetEdgeCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetEdgeCount(self)


    def ObjEdgeGetVertexCount(self, iEdge: 'int') -> "int":
        """ObjEdgeGetVertexCount(ShapeTesselator self, int iEdge) -> int"""
        return _Tesselator.ShapeTesselator_ObjEdgeGetVertexCount(self, iEdge)


    def ExportShapeToX3DIndexedFaceSet(self) -> "std::string":
        """ExportShapeToX3DIndexedFaceSet(ShapeTesselator self) -> std::string"""
        return _Tesselator.ShapeTesselator_ExportShapeToX3DIndexedFaceSet(self)


    def ExportShapeToThreejsJSONString(self, shape_function_name: 'char *') -> "std::string":
        """ExportShapeToThreejsJSONString(ShapeTesselator self, char * shape_function_name) -> std::string"""
        return _Tesselator.ShapeTesselator_ExportShapeToThreejsJSONString(self, shape_function_name)


    def ExportShapeToX3D(self, filename: 'char *', diffR: 'int'=1, diffG: 'int'=0, diffB: 'int'=0) -> "void":
        """ExportShapeToX3D(ShapeTesselator self, char * filename, int diffR=1, int diffG=0, int diffB=0)"""
        return _Tesselator.ShapeTesselator_ExportShapeToX3D(self, filename, diffR, diffG, diffB)


    def GetVerticesPositionAsTuple(self) -> "std::vector< float,std::allocator< float > >":
        """GetVerticesPositionAsTuple(ShapeTesselator self) -> vector_float"""
        return _Tesselator.ShapeTesselator_GetVerticesPositionAsTuple(self)


    def GetNormalsAsTuple(self) -> "std::vector< float,std::allocator< float > >":
        """GetNormalsAsTuple(ShapeTesselator self) -> vector_float"""
        return _Tesselator.ShapeTesselator_GetNormalsAsTuple(self)

ShapeTesselator.Compute = new_instancemethod(_Tesselator.ShapeTesselator_Compute, None, ShapeTesselator)
ShapeTesselator.GetVertex = new_instancemethod(_Tesselator.ShapeTesselator_GetVertex, None, ShapeTesselator)
ShapeTesselator.GetNormal = new_instancemethod(_Tesselator.ShapeTesselator_GetNormal, None, ShapeTesselator)
ShapeTesselator.GetTriangleIndex = new_instancemethod(_Tesselator.ShapeTesselator_GetTriangleIndex, None, ShapeTesselator)
ShapeTesselator.GetEdgeVertex = new_instancemethod(_Tesselator.ShapeTesselator_GetEdgeVertex, None, ShapeTesselator)
ShapeTesselator.VerticesList = new_instancemethod(_Tesselator.ShapeTesselator_VerticesList, None, ShapeTesselator)
ShapeTesselator.ObjGetTriangleCount = new_instancemethod(_Tesselator.ShapeTesselator_ObjGetTriangleCount, None, ShapeTesselator)
ShapeTesselator.ObjGetInvalidTriangleCount = new_instancemethod(_Tesselator.ShapeTesselator_ObjGetInvalidTriangleCount, None, ShapeTesselator)
ShapeTesselator.ObjGetVertexCount = new_instancemethod(_Tesselator.ShapeTesselator_ObjGetVertexCount, None, ShapeTesselator)
ShapeTesselator.ObjGetNormalCount = new_instancemethod(_Tesselator.ShapeTesselator_ObjGetNormalCount, None, ShapeTesselator)
ShapeTesselator.ObjGetEdgeCount = new_instancemethod(_Tesselator.ShapeTesselator_ObjGetEdgeCount, None, ShapeTesselator)
ShapeTesselator.ObjEdgeGetVertexCount = new_instancemethod(_Tesselator.ShapeTesselator_ObjEdgeGetVertexCount, None, ShapeTesselator)
ShapeTesselator.ExportShapeToX3DIndexedFaceSet = new_instancemethod(_Tesselator.ShapeTesselator_ExportShapeToX3DIndexedFaceSet, None, ShapeTesselator)
ShapeTesselator.ExportShapeToThreejsJSONString = new_instancemethod(_Tesselator.ShapeTesselator_ExportShapeToThreejsJSONString, None, ShapeTesselator)
ShapeTesselator.ExportShapeToX3D = new_instancemethod(_Tesselator.ShapeTesselator_ExportShapeToX3D, None, ShapeTesselator)
ShapeTesselator.GetVerticesPositionAsTuple = new_instancemethod(_Tesselator.ShapeTesselator_GetVerticesPositionAsTuple, None, ShapeTesselator)
ShapeTesselator.GetNormalsAsTuple = new_instancemethod(_Tesselator.ShapeTesselator_GetNormalsAsTuple, None, ShapeTesselator)
ShapeTesselator_swigregister = _Tesselator.ShapeTesselator_swigregister
ShapeTesselator_swigregister(ShapeTesselator)



