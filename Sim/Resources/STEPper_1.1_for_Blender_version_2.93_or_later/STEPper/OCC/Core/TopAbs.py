# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopAbs module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_topabs.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TopAbs.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopAbs')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopAbs')
    _TopAbs = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopAbs', [dirname(__file__)])
        except ImportError:
            import _TopAbs
            return _TopAbs
        try:
            _mod = imp.load_module('_TopAbs', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopAbs = swig_import_helper()
    del swig_import_helper
else:
    import _TopAbs
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopAbs.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TopAbs.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TopAbs.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TopAbs.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TopAbs.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TopAbs.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TopAbs.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TopAbs.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TopAbs.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TopAbs.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TopAbs.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TopAbs.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TopAbs.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TopAbs.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TopAbs.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TopAbs.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TopAbs.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TopAbs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopAbs.process_exception(error, method_name, class_name)
process_exception = _TopAbs.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
TopAbs_FORWARD = _TopAbs.TopAbs_FORWARD
TopAbs_REVERSED = _TopAbs.TopAbs_REVERSED
TopAbs_INTERNAL = _TopAbs.TopAbs_INTERNAL
TopAbs_EXTERNAL = _TopAbs.TopAbs_EXTERNAL
TopAbs_COMPOUND = _TopAbs.TopAbs_COMPOUND
TopAbs_COMPSOLID = _TopAbs.TopAbs_COMPSOLID
TopAbs_SOLID = _TopAbs.TopAbs_SOLID
TopAbs_SHELL = _TopAbs.TopAbs_SHELL
TopAbs_FACE = _TopAbs.TopAbs_FACE
TopAbs_WIRE = _TopAbs.TopAbs_WIRE
TopAbs_EDGE = _TopAbs.TopAbs_EDGE
TopAbs_VERTEX = _TopAbs.TopAbs_VERTEX
TopAbs_SHAPE = _TopAbs.TopAbs_SHAPE
TopAbs_IN = _TopAbs.TopAbs_IN
TopAbs_OUT = _TopAbs.TopAbs_OUT
TopAbs_ON = _TopAbs.TopAbs_ON
TopAbs_UNKNOWN = _TopAbs.TopAbs_UNKNOWN
class topabs(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Complement(*args) -> "TopAbs_Orientation":
        """
        * Reverses the interior/exterior status of each side of the object. So, to take the complement of an object means to reverse the interior/exterior status of its boundary, i.e. inside becomes outside. The method returns the complementary orientation, following the rules in the table below: FORWARD REVERSED REVERSED FORWARD INTERNAL EXTERNAL EXTERNAL INTERNAL //! Complement complements the material side. Inside becomes outside.
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:rtype: TopAbs_Orientation
        """
        return _TopAbs.topabs_Complement(*args)

    Complement = staticmethod(Complement)

    def Compose(*args) -> "TopAbs_Orientation":
        """
        * Compose the Orientation <Or1> and <Or2>. This composition is not symmetric (if you switch <Or1> and <Or2> the result is different). It assumes that <Or1> is the Orientation of a Shape S1 containing a Shape S2 of Orientation Or2. The result is the cumulated orientation of S2 in S1. The composition law is : //! \ Or2 FORWARD REVERSED INTERNAL EXTERNAL Or1 ------------------------------------- FORWARD | FORWARD REVERSED INTERNAL EXTERNAL | REVERSED | REVERSED FORWARD INTERNAL EXTERNAL | INTERNAL | INTERNAL INTERNAL INTERNAL INTERNAL | EXTERNAL | EXTERNAL EXTERNAL EXTERNAL EXTERNAL Note: The top corner in the table is the most important for the purposes of Open CASCADE topology and shape sharing.
        	:param Or1:
        	:type Or1: TopAbs_Orientation
        	:param Or2:
        	:type Or2: TopAbs_Orientation
        	:rtype: TopAbs_Orientation
        """
        return _TopAbs.topabs_Compose(*args)

    Compose = staticmethod(Compose)

    def Print(*args) -> "Standard_OStream &":
        """
        * Prints the name of Shape type as a String on the Stream.
        	:param theShapeType:
        	:type theShapeType: TopAbs_ShapeEnum
        	:param theStream:
        	:type theStream: Standard_OStream
        	:rtype: Standard_OStream
        * Prints the name of the Orientation as a String on the Stream.
        	:param theOrientation:
        	:type theOrientation: TopAbs_Orientation
        	:param theStream:
        	:type theStream: Standard_OStream
        	:rtype: Standard_OStream
        * Prints the name of the State <St> as a String on the Stream <S> and returns <S>.
        	:param St:
        	:type St: TopAbs_State
        	:param S:
        	:type S: Standard_OStream
        	:rtype: Standard_OStream
        """
        return _TopAbs.topabs_Print(*args)

    Print = staticmethod(Print)

    def Reverse(*args) -> "TopAbs_Orientation":
        """
        * xchanges the interior/exterior status of the two sides. This is what happens when the sense of direction is reversed. The following rules apply: //! FORWARD REVERSED REVERSED FORWARD INTERNAL INTERNAL EXTERNAL EXTERNAL //! Reverse exchange the material sides.
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:rtype: TopAbs_Orientation
        """
        return _TopAbs.topabs_Reverse(*args)

    Reverse = staticmethod(Reverse)

    def ShapeOrientationFromString(*args) -> "Standard_Boolean":
        """
        * Returns the shape orientation from the given string identifier (using case-insensitive comparison). @param theOrientationString string identifier returns shape orientation or TopAbs_FORWARD if string identifier is invalid
        	:param theOrientationString:
        	:type theOrientationString: char *
        	:rtype: TopAbs_Orientation
        * Determines the shape orientation from the given string identifier (using case-insensitive comparison). @param theOrientationString string identifier @param theOrientation detected shape orientation returns True if string identifier is known
        	:param theOrientationString:
        	:type theOrientationString: char *
        	:param theOrientation:
        	:type theOrientation: TopAbs_Orientation
        	:rtype: bool
        """
        return _TopAbs.topabs_ShapeOrientationFromString(*args)

    ShapeOrientationFromString = staticmethod(ShapeOrientationFromString)

    def ShapeOrientationToString(*args) -> "char const *":
        """
        * Returns the string name for a given shape orientation. @param theOrientation shape orientation returns string identifier from the list FORWARD, REVERSED, INTERNAL, EXTERNAL
        	:param theOrientation:
        	:type theOrientation: TopAbs_Orientation
        	:rtype: char *
        """
        return _TopAbs.topabs_ShapeOrientationToString(*args)

    ShapeOrientationToString = staticmethod(ShapeOrientationToString)

    def ShapeTypeFromString(*args) -> "Standard_Boolean":
        """
        * Returns the shape type from the given string identifier (using case-insensitive comparison). @param theTypeString string identifier returns shape type or TopAbs_SHAPE if string identifier is invalid
        	:param theTypeString:
        	:type theTypeString: char *
        	:rtype: TopAbs_ShapeEnum
        * Determines the shape type from the given string identifier (using case-insensitive comparison). @param theTypeString string identifier @param theType detected shape type returns True if string identifier is known
        	:param theTypeString:
        	:type theTypeString: char *
        	:param theType:
        	:type theType: TopAbs_ShapeEnum
        	:rtype: bool
        """
        return _TopAbs.topabs_ShapeTypeFromString(*args)

    ShapeTypeFromString = staticmethod(ShapeTypeFromString)

    def ShapeTypeToString(*args) -> "char const *":
        """
        * Returns the string name for a given shape type. @param theType shape type returns string identifier from the list COMPOUND, COMPSOLID, SOLID, SHELL, FACE, WIRE, EDGE, VERTEX, SHAPE
        	:param theType:
        	:type theType: TopAbs_ShapeEnum
        	:rtype: char *
        """
        return _TopAbs.topabs_ShapeTypeToString(*args)

    ShapeTypeToString = staticmethod(ShapeTypeToString)

    __repr__ = _dumps_object


    def __init__(self):
        _TopAbs.topabs_swiginit(self, _TopAbs.new_topabs())
    __swig_destroy__ = _TopAbs.delete_topabs
topabs_swigregister = _TopAbs.topabs_swigregister
topabs_swigregister(topabs)

def topabs_Complement(*args) -> "TopAbs_Orientation":
    """
    * Reverses the interior/exterior status of each side of the object. So, to take the complement of an object means to reverse the interior/exterior status of its boundary, i.e. inside becomes outside. The method returns the complementary orientation, following the rules in the table below: FORWARD REVERSED REVERSED FORWARD INTERNAL EXTERNAL EXTERNAL INTERNAL //! Complement complements the material side. Inside becomes outside.
    	:param Or:
    	:type Or: TopAbs_Orientation
    	:rtype: TopAbs_Orientation
    """
    return _TopAbs.topabs_Complement(*args)

def topabs_Compose(*args) -> "TopAbs_Orientation":
    """
    * Compose the Orientation <Or1> and <Or2>. This composition is not symmetric (if you switch <Or1> and <Or2> the result is different). It assumes that <Or1> is the Orientation of a Shape S1 containing a Shape S2 of Orientation Or2. The result is the cumulated orientation of S2 in S1. The composition law is : //! \ Or2 FORWARD REVERSED INTERNAL EXTERNAL Or1 ------------------------------------- FORWARD | FORWARD REVERSED INTERNAL EXTERNAL | REVERSED | REVERSED FORWARD INTERNAL EXTERNAL | INTERNAL | INTERNAL INTERNAL INTERNAL INTERNAL | EXTERNAL | EXTERNAL EXTERNAL EXTERNAL EXTERNAL Note: The top corner in the table is the most important for the purposes of Open CASCADE topology and shape sharing.
    	:param Or1:
    	:type Or1: TopAbs_Orientation
    	:param Or2:
    	:type Or2: TopAbs_Orientation
    	:rtype: TopAbs_Orientation
    """
    return _TopAbs.topabs_Compose(*args)

def topabs_Print(*args) -> "Standard_OStream &":
    """
    * Prints the name of Shape type as a String on the Stream.
    	:param theShapeType:
    	:type theShapeType: TopAbs_ShapeEnum
    	:param theStream:
    	:type theStream: Standard_OStream
    	:rtype: Standard_OStream
    * Prints the name of the Orientation as a String on the Stream.
    	:param theOrientation:
    	:type theOrientation: TopAbs_Orientation
    	:param theStream:
    	:type theStream: Standard_OStream
    	:rtype: Standard_OStream
    * Prints the name of the State <St> as a String on the Stream <S> and returns <S>.
    	:param St:
    	:type St: TopAbs_State
    	:param S:
    	:type S: Standard_OStream
    	:rtype: Standard_OStream
    """
    return _TopAbs.topabs_Print(*args)

def topabs_Reverse(*args) -> "TopAbs_Orientation":
    """
    * xchanges the interior/exterior status of the two sides. This is what happens when the sense of direction is reversed. The following rules apply: //! FORWARD REVERSED REVERSED FORWARD INTERNAL INTERNAL EXTERNAL EXTERNAL //! Reverse exchange the material sides.
    	:param Or:
    	:type Or: TopAbs_Orientation
    	:rtype: TopAbs_Orientation
    """
    return _TopAbs.topabs_Reverse(*args)

def topabs_ShapeOrientationFromString(*args) -> "Standard_Boolean":
    """
    * Returns the shape orientation from the given string identifier (using case-insensitive comparison). @param theOrientationString string identifier returns shape orientation or TopAbs_FORWARD if string identifier is invalid
    	:param theOrientationString:
    	:type theOrientationString: char *
    	:rtype: TopAbs_Orientation
    * Determines the shape orientation from the given string identifier (using case-insensitive comparison). @param theOrientationString string identifier @param theOrientation detected shape orientation returns True if string identifier is known
    	:param theOrientationString:
    	:type theOrientationString: char *
    	:param theOrientation:
    	:type theOrientation: TopAbs_Orientation
    	:rtype: bool
    """
    return _TopAbs.topabs_ShapeOrientationFromString(*args)

def topabs_ShapeOrientationToString(*args) -> "char const *":
    """
    * Returns the string name for a given shape orientation. @param theOrientation shape orientation returns string identifier from the list FORWARD, REVERSED, INTERNAL, EXTERNAL
    	:param theOrientation:
    	:type theOrientation: TopAbs_Orientation
    	:rtype: char *
    """
    return _TopAbs.topabs_ShapeOrientationToString(*args)

def topabs_ShapeTypeFromString(*args) -> "Standard_Boolean":
    """
    * Returns the shape type from the given string identifier (using case-insensitive comparison). @param theTypeString string identifier returns shape type or TopAbs_SHAPE if string identifier is invalid
    	:param theTypeString:
    	:type theTypeString: char *
    	:rtype: TopAbs_ShapeEnum
    * Determines the shape type from the given string identifier (using case-insensitive comparison). @param theTypeString string identifier @param theType detected shape type returns True if string identifier is known
    	:param theTypeString:
    	:type theTypeString: char *
    	:param theType:
    	:type theType: TopAbs_ShapeEnum
    	:rtype: bool
    """
    return _TopAbs.topabs_ShapeTypeFromString(*args)

def topabs_ShapeTypeToString(*args) -> "char const *":
    """
    * Returns the string name for a given shape type. @param theType shape type returns string identifier from the list COMPOUND, COMPSOLID, SOLID, SHELL, FACE, WIRE, EDGE, VERTEX, SHAPE
    	:param theType:
    	:type theType: TopAbs_ShapeEnum
    	:rtype: char *
    """
    return _TopAbs.topabs_ShapeTypeToString(*args)



