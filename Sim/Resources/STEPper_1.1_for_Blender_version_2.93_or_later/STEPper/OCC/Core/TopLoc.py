# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopLoc module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_toploc.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TopLoc.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopLoc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopLoc')
    _TopLoc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopLoc', [dirname(__file__)])
        except ImportError:
            import _TopLoc
            return _TopLoc
        try:
            _mod = imp.load_module('_TopLoc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopLoc = swig_import_helper()
    del swig_import_helper
else:
    import _TopLoc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopLoc.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TopLoc.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TopLoc.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TopLoc.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TopLoc.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TopLoc.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TopLoc.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TopLoc.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TopLoc.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TopLoc.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TopLoc.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TopLoc.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TopLoc.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TopLoc.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TopLoc.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TopLoc.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TopLoc.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TopLoc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopLoc.process_exception(error, method_name, class_name)
process_exception = _TopLoc.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp

def Handle_TopLoc_Datum3D_Create() -> "opencascade::handle< TopLoc_Datum3D >":
    return _TopLoc.Handle_TopLoc_Datum3D_Create()
Handle_TopLoc_Datum3D_Create = _TopLoc.Handle_TopLoc_Datum3D_Create

def Handle_TopLoc_Datum3D_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopLoc_Datum3D >":
    return _TopLoc.Handle_TopLoc_Datum3D_DownCast(t)
Handle_TopLoc_Datum3D_DownCast = _TopLoc.Handle_TopLoc_Datum3D_DownCast

def Handle_TopLoc_Datum3D_IsNull(t: 'opencascade::handle< TopLoc_Datum3D > const &') -> "bool":
    return _TopLoc.Handle_TopLoc_Datum3D_IsNull(t)
Handle_TopLoc_Datum3D_IsNull = _TopLoc.Handle_TopLoc_Datum3D_IsNull

def Handle_TopLoc_SListNodeOfItemLocation_Create() -> "opencascade::handle< TopLoc_SListNodeOfItemLocation >":
    return _TopLoc.Handle_TopLoc_SListNodeOfItemLocation_Create()
Handle_TopLoc_SListNodeOfItemLocation_Create = _TopLoc.Handle_TopLoc_SListNodeOfItemLocation_Create

def Handle_TopLoc_SListNodeOfItemLocation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopLoc_SListNodeOfItemLocation >":
    return _TopLoc.Handle_TopLoc_SListNodeOfItemLocation_DownCast(t)
Handle_TopLoc_SListNodeOfItemLocation_DownCast = _TopLoc.Handle_TopLoc_SListNodeOfItemLocation_DownCast

def Handle_TopLoc_SListNodeOfItemLocation_IsNull(t: 'opencascade::handle< TopLoc_SListNodeOfItemLocation > const &') -> "bool":
    return _TopLoc.Handle_TopLoc_SListNodeOfItemLocation_IsNull(t)
Handle_TopLoc_SListNodeOfItemLocation_IsNull = _TopLoc.Handle_TopLoc_SListNodeOfItemLocation_IsNull
class TopLoc_MapOfLocation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopLoc.TopLoc_MapOfLocation_swiginit(self, _TopLoc.new_TopLoc_MapOfLocation(*args))
    __swig_destroy__ = _TopLoc.delete_TopLoc_MapOfLocation
TopLoc_MapOfLocation.cbegin = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_cbegin, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.cend = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_cend, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Exchange = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Exchange, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Assign = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Assign, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Set = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Set, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.ReSize = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_ReSize, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Add = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Add, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Added = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Added, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Remove = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Remove, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Clear = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Clear, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Size = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Size, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.IsEqual = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_IsEqual, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Contains = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Contains, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Union = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Union, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Unite = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Unite, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.HasIntersection = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_HasIntersection, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Intersection = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Intersection, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Intersect = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Intersect, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Subtraction = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Subtraction, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Subtract = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Subtract, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Difference = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Difference, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation.Differ = new_instancemethod(_TopLoc.TopLoc_MapOfLocation_Differ, None, TopLoc_MapOfLocation)
TopLoc_MapOfLocation_swigregister = _TopLoc.TopLoc_MapOfLocation_swigregister
TopLoc_MapOfLocation_swigregister(TopLoc_MapOfLocation)

class TopLoc_IndexedMapOfLocation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopLoc.TopLoc_IndexedMapOfLocation_swiginit(self, _TopLoc.new_TopLoc_IndexedMapOfLocation(*args))
    __swig_destroy__ = _TopLoc.delete_TopLoc_IndexedMapOfLocation
TopLoc_IndexedMapOfLocation.cbegin = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_cbegin, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.cend = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_cend, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Exchange = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Exchange, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Assign = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Assign, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Set = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Set, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.ReSize = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_ReSize, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Add = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Add, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Contains = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Contains, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Substitute = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Substitute, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Swap = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Swap, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.RemoveLast = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_RemoveLast, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.RemoveFromIndex = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_RemoveFromIndex, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.RemoveKey = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_RemoveKey, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.FindKey = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_FindKey, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.__call__ = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation___call__, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.FindIndex = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_FindIndex, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Clear = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Clear, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation.Size = new_instancemethod(_TopLoc.TopLoc_IndexedMapOfLocation_Size, None, TopLoc_IndexedMapOfLocation)
TopLoc_IndexedMapOfLocation_swigregister = _TopLoc.TopLoc_IndexedMapOfLocation_swigregister
TopLoc_IndexedMapOfLocation_swigregister(TopLoc_IndexedMapOfLocation)

class TopLoc_MapLocationHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashCode = staticmethod(_TopLoc.TopLoc_MapLocationHasher_HashCode)
    IsEqual = staticmethod(_TopLoc.TopLoc_MapLocationHasher_IsEqual)

    def __init__(self):
        _TopLoc.TopLoc_MapLocationHasher_swiginit(self, _TopLoc.new_TopLoc_MapLocationHasher())
    __swig_destroy__ = _TopLoc.delete_TopLoc_MapLocationHasher
TopLoc_MapLocationHasher_swigregister = _TopLoc.TopLoc_MapLocationHasher_swigregister
TopLoc_MapLocationHasher_swigregister(TopLoc_MapLocationHasher)

def TopLoc_MapLocationHasher_HashCode(theKey: 'TopLoc_Location', theUpperBound: 'Standard_Integer const') -> "Standard_Integer":
    return _TopLoc.TopLoc_MapLocationHasher_HashCode(theKey, theUpperBound)
TopLoc_MapLocationHasher_HashCode = _TopLoc.TopLoc_MapLocationHasher_HashCode

def TopLoc_MapLocationHasher_IsEqual(theKey1: 'TopLoc_Location', theKey2: 'TopLoc_Location') -> "Standard_Boolean":
    return _TopLoc.TopLoc_MapLocationHasher_IsEqual(theKey1, theKey2)
TopLoc_MapLocationHasher_IsEqual = _TopLoc.TopLoc_MapLocationHasher_IsEqual

class TopLoc_Datum3D(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TopLoc_Datum3D self, int depth=-1) -> std::string
        DumpJsonToString(TopLoc_Datum3D self) -> std::string
        """
        return _TopLoc.TopLoc_Datum3D_DumpJsonToString(self, depth)


    def ShallowDumpToString(self) -> "std::string":
        """ShallowDumpToString(TopLoc_Datum3D self) -> std::string"""
        return _TopLoc.TopLoc_Datum3D_ShallowDumpToString(self)


    def __init__(self, *args):
        """
        * Constructs a default Datum3D.
        	:rtype: None
        * Constructs a Datum3D form a Trsf from gp. An error is raised if the Trsf is not a rigid transformation.
        	:param T:
        	:type T: gp_Trsf
        	:rtype: None
        """
        _TopLoc.TopLoc_Datum3D_swiginit(self, _TopLoc.new_TopLoc_Datum3D(*args))

    def Transformation(self, *args) -> "gp_Trsf const":
        """
        * Returns a gp_Trsf which, when applied to this datum, produces the default datum.
        	:rtype: gp_Trsf
        """
        return _TopLoc.TopLoc_Datum3D_Transformation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TopLoc_Datum3D_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopLoc.delete_TopLoc_Datum3D
TopLoc_Datum3D.DumpJsonToString = new_instancemethod(_TopLoc.TopLoc_Datum3D_DumpJsonToString, None, TopLoc_Datum3D)
TopLoc_Datum3D.ShallowDumpToString = new_instancemethod(_TopLoc.TopLoc_Datum3D_ShallowDumpToString, None, TopLoc_Datum3D)
TopLoc_Datum3D.Transformation = new_instancemethod(_TopLoc.TopLoc_Datum3D_Transformation, None, TopLoc_Datum3D)
TopLoc_Datum3D_swigregister = _TopLoc.TopLoc_Datum3D_swigregister
TopLoc_Datum3D_swigregister(TopLoc_Datum3D)

class TopLoc_ItemLocation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TopLoc_ItemLocation self, int depth=-1) -> std::string
        DumpJsonToString(TopLoc_ItemLocation self) -> std::string
        """
        return _TopLoc.TopLoc_ItemLocation_DumpJsonToString(self, depth)


    def __init__(self, *args):
        """
        * Sets the elementary Datum to <D> Sets the exponent to <P>
        	:param D:
        	:type D: TopLoc_Datum3D
        	:param P:
        	:type P: int
        	:rtype: None
        """
        _TopLoc.TopLoc_ItemLocation_swiginit(self, _TopLoc.new_TopLoc_ItemLocation(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopLoc.delete_TopLoc_ItemLocation
TopLoc_ItemLocation.DumpJsonToString = new_instancemethod(_TopLoc.TopLoc_ItemLocation_DumpJsonToString, None, TopLoc_ItemLocation)
TopLoc_ItemLocation_swigregister = _TopLoc.TopLoc_ItemLocation_swigregister
TopLoc_ItemLocation_swigregister(TopLoc_ItemLocation)

class TopLoc_Location(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Divided(self, *args) -> "TopLoc_Location":
        """
        * Returns <self> / <Other>.
        	:param Other:
        	:type Other: TopLoc_Location
        	:rtype: TopLoc_Location
        """
        return _TopLoc.TopLoc_Location_Divided(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TopLoc_Location self, int depth=-1) -> std::string
        DumpJsonToString(TopLoc_Location self) -> std::string
        """
        return _TopLoc.TopLoc_Location_DumpJsonToString(self, depth)


    def FirstDatum(self, *args) -> "opencascade::handle< TopLoc_Datum3D > const &":
        """
        * Returns the first elementary datum of the Location. Use the NextLocation function recursively to access the other data comprising this location. Exceptions Standard_NoSuchObject if this location is empty.
        	:rtype: opencascade::handle<TopLoc_Datum3D>
        """
        return _TopLoc.TopLoc_Location_FirstDatum(self, *args)


    def FirstPower(self, *args) -> "Standard_Integer":
        """
        * Returns the power elevation of the first elementary datum. Exceptions Standard_NoSuchObject if this location is empty.
        	:rtype: int
        """
        return _TopLoc.TopLoc_Location_FirstPower(self, *args)


    def HashCode(self, *args) -> "Standard_Integer":
        """
        * Returns a hashed value for this local coordinate system. This value is used, with map tables, to store and retrieve the object easily, and is in the range [1, theUpperBound]. @param theUpperBound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theUpperBound]
        	:param theUpperBound:
        	:type theUpperBound: int
        	:rtype: int
        """
        return _TopLoc.TopLoc_Location_HashCode(self, *args)


    def __hash__(self) -> "Standard_Integer":
        """__hash__(TopLoc_Location self) -> Standard_Integer"""
        return _TopLoc.TopLoc_Location___hash__(self)


    def Identity(self, *args) -> "void":
        """
        * Resets this location to the Identity transformation.
        	:rtype: None
        """
        return _TopLoc.TopLoc_Location_Identity(self, *args)


    def Inverted(self, *args) -> "TopLoc_Location":
        """
        * Returns the inverse of <self>. //! <self> * Inverted() is an Identity.
        	:rtype: TopLoc_Location
        """
        return _TopLoc.TopLoc_Location_Inverted(self, *args)


    def IsDifferent(self, *args) -> "Standard_Boolean":
        """
        * Returns true if this location and the location Other do not have the same elementary data, i.e. do not contain the same series of TopLoc_Datum3D and respective powers. This method is an alias for operator !=.
        	:param Other:
        	:type Other: TopLoc_Location
        	:rtype: bool
        """
        return _TopLoc.TopLoc_Location_IsDifferent(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        * Returns true if this location and the location Other have the same elementary data, i.e. contain the same series of TopLoc_Datum3D and respective powers. This method is an alias for operator ==.
        	:param Other:
        	:type Other: TopLoc_Location
        	:rtype: bool
        """
        return _TopLoc.TopLoc_Location_IsEqual(self, *args)


    def IsIdentity(self, *args) -> "Standard_Boolean":
        """
        * Returns true if this location is equal to the Identity transformation.
        	:rtype: bool
        """
        return _TopLoc.TopLoc_Location_IsIdentity(self, *args)


    def Multiplied(self, *args) -> "TopLoc_Location":
        """
        * Returns <self> * <Other>, the elementary datums are concatenated.
        	:param Other:
        	:type Other: TopLoc_Location
        	:rtype: TopLoc_Location
        """
        return _TopLoc.TopLoc_Location_Multiplied(self, *args)


    def NextLocation(self, *args) -> "TopLoc_Location const &":
        """
        * Returns a Location representing <self> without the first datum. We have the relation : //! <self> = NextLocation() * FirstDatum() ^ FirstPower() Exceptions Standard_NoSuchObject if this location is empty.
        	:rtype: TopLoc_Location
        """
        return _TopLoc.TopLoc_Location_NextLocation(self, *args)


    def Powered(self, *args) -> "TopLoc_Location":
        """
        * Returns me at the power <pwr>. If <pwr> is zero returns Identity. <pwr> can be lower than zero (usual meaning for powers).
        	:param pwr:
        	:type pwr: int
        	:rtype: TopLoc_Location
        """
        return _TopLoc.TopLoc_Location_Powered(self, *args)


    def Predivided(self, *args) -> "TopLoc_Location":
        """
        * Returns <Other>.Inverted() * <self>.
        	:param Other:
        	:type Other: TopLoc_Location
        	:rtype: TopLoc_Location
        """
        return _TopLoc.TopLoc_Location_Predivided(self, *args)


    def ShallowDumpToString(self) -> "std::string":
        """ShallowDumpToString(TopLoc_Location self) -> std::string"""
        return _TopLoc.TopLoc_Location_ShallowDumpToString(self)


    def __init__(self, *args):
        """
        * Constructs an empty local coordinate system object. Note: A Location constructed from a default datum is said to be 'empty'.
        	:rtype: None
        * Constructs the local coordinate system object defined by the transformation T. T invokes in turn, a TopLoc_Datum3D object.
        	:param T:
        	:type T: gp_Trsf
        	:rtype: None
        * Constructs the local coordinate system object defined by the 3D datum D. Exceptions Standard_ConstructionError if the transformation T does not represent a 3D coordinate system.
        	:param D:
        	:type D: TopLoc_Datum3D
        	:rtype: None
        """
        _TopLoc.TopLoc_Location_swiginit(self, _TopLoc.new_TopLoc_Location(*args))

    def Transformation(self, *args) -> "gp_Trsf const":
        """
        * Returns the transformation associated to the coordinate system.
        	:rtype: gp_Trsf
        """
        return _TopLoc.TopLoc_Location_Transformation(self, *args)


    def __mul__(self, *args) -> "TopLoc_Location":
        """
        :param Other:
        	:type Other: TopLoc_Location
        	:rtype: TopLoc_Location
        """
        return _TopLoc.TopLoc_Location___mul__(self, *args)


    def __truediv__(self, *args):
        return _TopLoc.TopLoc_Location___truediv__(self, *args)
    __div__ = __truediv__



    def __eq_wrapper__(self, other: 'TopLoc_Location') -> "bool":
        """__eq_wrapper__(TopLoc_Location self, TopLoc_Location other) -> bool"""
        return _TopLoc.TopLoc_Location___eq_wrapper__(self, other)


    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _TopLoc.delete_TopLoc_Location
TopLoc_Location.Divided = new_instancemethod(_TopLoc.TopLoc_Location_Divided, None, TopLoc_Location)
TopLoc_Location.DumpJsonToString = new_instancemethod(_TopLoc.TopLoc_Location_DumpJsonToString, None, TopLoc_Location)
TopLoc_Location.FirstDatum = new_instancemethod(_TopLoc.TopLoc_Location_FirstDatum, None, TopLoc_Location)
TopLoc_Location.FirstPower = new_instancemethod(_TopLoc.TopLoc_Location_FirstPower, None, TopLoc_Location)
TopLoc_Location.HashCode = new_instancemethod(_TopLoc.TopLoc_Location_HashCode, None, TopLoc_Location)
TopLoc_Location.__hash__ = new_instancemethod(_TopLoc.TopLoc_Location___hash__, None, TopLoc_Location)
TopLoc_Location.Identity = new_instancemethod(_TopLoc.TopLoc_Location_Identity, None, TopLoc_Location)
TopLoc_Location.Inverted = new_instancemethod(_TopLoc.TopLoc_Location_Inverted, None, TopLoc_Location)
TopLoc_Location.IsDifferent = new_instancemethod(_TopLoc.TopLoc_Location_IsDifferent, None, TopLoc_Location)
TopLoc_Location.IsEqual = new_instancemethod(_TopLoc.TopLoc_Location_IsEqual, None, TopLoc_Location)
TopLoc_Location.IsIdentity = new_instancemethod(_TopLoc.TopLoc_Location_IsIdentity, None, TopLoc_Location)
TopLoc_Location.Multiplied = new_instancemethod(_TopLoc.TopLoc_Location_Multiplied, None, TopLoc_Location)
TopLoc_Location.NextLocation = new_instancemethod(_TopLoc.TopLoc_Location_NextLocation, None, TopLoc_Location)
TopLoc_Location.Powered = new_instancemethod(_TopLoc.TopLoc_Location_Powered, None, TopLoc_Location)
TopLoc_Location.Predivided = new_instancemethod(_TopLoc.TopLoc_Location_Predivided, None, TopLoc_Location)
TopLoc_Location.ShallowDumpToString = new_instancemethod(_TopLoc.TopLoc_Location_ShallowDumpToString, None, TopLoc_Location)
TopLoc_Location.Transformation = new_instancemethod(_TopLoc.TopLoc_Location_Transformation, None, TopLoc_Location)
TopLoc_Location.__mul__ = new_instancemethod(_TopLoc.TopLoc_Location___mul__, None, TopLoc_Location)
TopLoc_Location.__eq_wrapper__ = new_instancemethod(_TopLoc.TopLoc_Location___eq_wrapper__, None, TopLoc_Location)
TopLoc_Location_swigregister = _TopLoc.TopLoc_Location_swigregister
TopLoc_Location_swigregister(TopLoc_Location)

class TopLoc_SListNodeOfItemLocation(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Tail(self, *args) -> "TopLoc_SListOfItemLocation &":
        """:rtype: TopLoc_SListOfItemLocation"""
        return _TopLoc.TopLoc_SListNodeOfItemLocation_Tail(self, *args)


    def __init__(self, *args):
        """
        :param I:
        	:type I: TopLoc_ItemLocation
        	:param aTail:
        	:type aTail: TopLoc_SListOfItemLocation
        	:rtype: None
        """
        _TopLoc.TopLoc_SListNodeOfItemLocation_swiginit(self, _TopLoc.new_TopLoc_SListNodeOfItemLocation(*args))

    def Value(self, *args) -> "TopLoc_ItemLocation &":
        """:rtype: TopLoc_ItemLocation"""
        return _TopLoc.TopLoc_SListNodeOfItemLocation_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TopLoc_SListNodeOfItemLocation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopLoc.delete_TopLoc_SListNodeOfItemLocation
TopLoc_SListNodeOfItemLocation.Tail = new_instancemethod(_TopLoc.TopLoc_SListNodeOfItemLocation_Tail, None, TopLoc_SListNodeOfItemLocation)
TopLoc_SListNodeOfItemLocation.Value = new_instancemethod(_TopLoc.TopLoc_SListNodeOfItemLocation_Value, None, TopLoc_SListNodeOfItemLocation)
TopLoc_SListNodeOfItemLocation_swigregister = _TopLoc.TopLoc_SListNodeOfItemLocation_swigregister
TopLoc_SListNodeOfItemLocation_swigregister(TopLoc_SListNodeOfItemLocation)

class TopLoc_SListOfItemLocation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Assign(self, *args) -> "TopLoc_SListOfItemLocation &":
        """
        * Sets a list from an other one. The lists are shared. The list itself is returned.
        	:param Other:
        	:type Other: TopLoc_SListOfItemLocation
        	:rtype: TopLoc_SListOfItemLocation
        """
        return _TopLoc.TopLoc_SListOfItemLocation_Assign(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Sets the list to be empty.
        	:rtype: None
        """
        return _TopLoc.TopLoc_SListOfItemLocation_Clear(self, *args)


    def Construct(self, *args) -> "void":
        """
        * Replaces the list by a list with <anItem> as Value and the list <self> as tail.
        	:param anItem:
        	:type anItem: TopLoc_ItemLocation
        	:rtype: None
        """
        return _TopLoc.TopLoc_SListOfItemLocation_Construct(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * Returne true if this list is empty
        	:rtype: bool
        """
        return _TopLoc.TopLoc_SListOfItemLocation_IsEmpty(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the iterator has a current value. This is !IsEmpty()
        	:rtype: bool
        """
        return _TopLoc.TopLoc_SListOfItemLocation_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Moves the iterator to the next object in the list. If the iterator is empty it will stay empty. This is ToTail()
        	:rtype: None
        """
        return _TopLoc.TopLoc_SListOfItemLocation_Next(self, *args)


    def Tail(self, *args) -> "TopLoc_SListOfItemLocation const &":
        """
        * Returns the current tail of the list. On an empty list the tail is the list itself.
        	:rtype: TopLoc_SListOfItemLocation
        """
        return _TopLoc.TopLoc_SListOfItemLocation_Tail(self, *args)


    def ToTail(self, *args) -> "void":
        """
        * Replaces the list <self> by its tail.
        	:rtype: None
        """
        return _TopLoc.TopLoc_SListOfItemLocation_ToTail(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty List.
        	:rtype: None
        * Creates a List with <anItem> as value and <aTail> as tail.
        	:param anItem:
        	:type anItem: TopLoc_ItemLocation
        	:param aTail:
        	:type aTail: TopLoc_SListOfItemLocation
        	:rtype: None
        * Creates a list from an other one. The lists are shared.
        	:param Other:
        	:type Other: TopLoc_SListOfItemLocation
        	:rtype: None
        * Move constructor
        	:param theOther:
        	:type theOther: TopLoc_SListOfItemLocation
        	:rtype: None
        """
        _TopLoc.TopLoc_SListOfItemLocation_swiginit(self, _TopLoc.new_TopLoc_SListOfItemLocation(*args))

    def Value(self, *args) -> "TopLoc_ItemLocation const &":
        """
        * Returns the current value of the list. An error is raised if the list is empty.
        	:rtype: TopLoc_ItemLocation
        """
        return _TopLoc.TopLoc_SListOfItemLocation_Value(self, *args)


    def Set(self, *args) -> "TopLoc_SListOfItemLocation &":
        """
        * Assignment
        	:param Other:
        	:type Other: TopLoc_SListOfItemLocation
        	:rtype: TopLoc_SListOfItemLocation
        * Move operator
        	:param theOther:
        	:type theOther: TopLoc_SListOfItemLocation
        	:rtype: TopLoc_SListOfItemLocation
        """
        return _TopLoc.TopLoc_SListOfItemLocation_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopLoc.delete_TopLoc_SListOfItemLocation
TopLoc_SListOfItemLocation.Assign = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Assign, None, TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Clear = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Clear, None, TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Construct = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Construct, None, TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.IsEmpty = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_IsEmpty, None, TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.More = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_More, None, TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Next = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Next, None, TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Tail = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Tail, None, TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.ToTail = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_ToTail, None, TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Value = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Value, None, TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation.Set = new_instancemethod(_TopLoc.TopLoc_SListOfItemLocation_Set, None, TopLoc_SListOfItemLocation)
TopLoc_SListOfItemLocation_swigregister = _TopLoc.TopLoc_SListOfItemLocation_swigregister
TopLoc_SListOfItemLocation_swigregister(TopLoc_SListOfItemLocation)



