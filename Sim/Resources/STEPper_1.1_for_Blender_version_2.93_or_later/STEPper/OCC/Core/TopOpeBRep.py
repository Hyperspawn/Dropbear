# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopOpeBRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_topopebrep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TopOpeBRep.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopOpeBRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopOpeBRep')
    _TopOpeBRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopOpeBRep', [dirname(__file__)])
        except ImportError:
            import _TopOpeBRep
            return _TopOpeBRep
        try:
            _mod = imp.load_module('_TopOpeBRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopOpeBRep = swig_import_helper()
    del swig_import_helper
else:
    import _TopOpeBRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopOpeBRep.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TopOpeBRep.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TopOpeBRep.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TopOpeBRep.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TopOpeBRep.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TopOpeBRep.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TopOpeBRep.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TopOpeBRep.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TopOpeBRep.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TopOpeBRep.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TopOpeBRep.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TopOpeBRep.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TopOpeBRep.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TopOpeBRep.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TopOpeBRep.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TopOpeBRep.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TopOpeBRep.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TopOpeBRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopOpeBRep.process_exception(error, method_name, class_name)
process_exception = _TopOpeBRep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BRepTopAdaptor
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.IntRes2d
import OCC.Core.IntPatch
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
import OCC.Core.IntAna
import OCC.Core.TopOpeBRepDS
import OCC.Core.TopOpeBRepTool
import OCC.Core.TopTools
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.IntCurvesFace
import OCC.Core.TopExp
import OCC.Core.Extrema
TopOpeBRep_P2DUNK = _TopOpeBRep.TopOpeBRep_P2DUNK
TopOpeBRep_P2DINT = _TopOpeBRep.TopOpeBRep_P2DINT
TopOpeBRep_P2DSGF = _TopOpeBRep.TopOpeBRep_P2DSGF
TopOpeBRep_P2DSGL = _TopOpeBRep.TopOpeBRep_P2DSGL
TopOpeBRep_P2DNEW = _TopOpeBRep.TopOpeBRep_P2DNEW
TopOpeBRep_ANALYTIC = _TopOpeBRep.TopOpeBRep_ANALYTIC
TopOpeBRep_RESTRICTION = _TopOpeBRep.TopOpeBRep_RESTRICTION
TopOpeBRep_WALKING = _TopOpeBRep.TopOpeBRep_WALKING
TopOpeBRep_LINE = _TopOpeBRep.TopOpeBRep_LINE
TopOpeBRep_CIRCLE = _TopOpeBRep.TopOpeBRep_CIRCLE
TopOpeBRep_ELLIPSE = _TopOpeBRep.TopOpeBRep_ELLIPSE
TopOpeBRep_PARABOLA = _TopOpeBRep.TopOpeBRep_PARABOLA
TopOpeBRep_HYPERBOLA = _TopOpeBRep.TopOpeBRep_HYPERBOLA
TopOpeBRep_OTHERTYPE = _TopOpeBRep.TopOpeBRep_OTHERTYPE

def Handle_TopOpeBRep_FFDumper_Create() -> "opencascade::handle< TopOpeBRep_FFDumper >":
    return _TopOpeBRep.Handle_TopOpeBRep_FFDumper_Create()
Handle_TopOpeBRep_FFDumper_Create = _TopOpeBRep.Handle_TopOpeBRep_FFDumper_Create

def Handle_TopOpeBRep_FFDumper_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopOpeBRep_FFDumper >":
    return _TopOpeBRep.Handle_TopOpeBRep_FFDumper_DownCast(t)
Handle_TopOpeBRep_FFDumper_DownCast = _TopOpeBRep.Handle_TopOpeBRep_FFDumper_DownCast

def Handle_TopOpeBRep_FFDumper_IsNull(t: 'opencascade::handle< TopOpeBRep_FFDumper > const &') -> "bool":
    return _TopOpeBRep.Handle_TopOpeBRep_FFDumper_IsNull(t)
Handle_TopOpeBRep_FFDumper_IsNull = _TopOpeBRep.Handle_TopOpeBRep_FFDumper_IsNull

def Handle_TopOpeBRep_Hctxee2d_Create() -> "opencascade::handle< TopOpeBRep_Hctxee2d >":
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_Create()
Handle_TopOpeBRep_Hctxee2d_Create = _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_Create

def Handle_TopOpeBRep_Hctxee2d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopOpeBRep_Hctxee2d >":
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_DownCast(t)
Handle_TopOpeBRep_Hctxee2d_DownCast = _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_DownCast

def Handle_TopOpeBRep_Hctxee2d_IsNull(t: 'opencascade::handle< TopOpeBRep_Hctxee2d > const &') -> "bool":
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_IsNull(t)
Handle_TopOpeBRep_Hctxee2d_IsNull = _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_IsNull

def Handle_TopOpeBRep_Hctxff2d_Create() -> "opencascade::handle< TopOpeBRep_Hctxff2d >":
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_Create()
Handle_TopOpeBRep_Hctxff2d_Create = _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_Create

def Handle_TopOpeBRep_Hctxff2d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopOpeBRep_Hctxff2d >":
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_DownCast(t)
Handle_TopOpeBRep_Hctxff2d_DownCast = _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_DownCast

def Handle_TopOpeBRep_Hctxff2d_IsNull(t: 'opencascade::handle< TopOpeBRep_Hctxff2d > const &') -> "bool":
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_IsNull(t)
Handle_TopOpeBRep_Hctxff2d_IsNull = _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_IsNull

def Handle_TopOpeBRep_HArray1OfVPointInter_Create() -> "opencascade::handle< TopOpeBRep_HArray1OfVPointInter >":
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_Create()
Handle_TopOpeBRep_HArray1OfVPointInter_Create = _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_Create

def Handle_TopOpeBRep_HArray1OfVPointInter_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopOpeBRep_HArray1OfVPointInter >":
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_DownCast(t)
Handle_TopOpeBRep_HArray1OfVPointInter_DownCast = _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_DownCast

def Handle_TopOpeBRep_HArray1OfVPointInter_IsNull(t: 'opencascade::handle< TopOpeBRep_HArray1OfVPointInter > const &') -> "bool":
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_IsNull(t)
Handle_TopOpeBRep_HArray1OfVPointInter_IsNull = _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_IsNull

def Handle_TopOpeBRep_HArray1OfLineInter_Create() -> "opencascade::handle< TopOpeBRep_HArray1OfLineInter >":
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_Create()
Handle_TopOpeBRep_HArray1OfLineInter_Create = _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_Create

def Handle_TopOpeBRep_HArray1OfLineInter_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopOpeBRep_HArray1OfLineInter >":
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_DownCast(t)
Handle_TopOpeBRep_HArray1OfLineInter_DownCast = _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_DownCast

def Handle_TopOpeBRep_HArray1OfLineInter_IsNull(t: 'opencascade::handle< TopOpeBRep_HArray1OfLineInter > const &') -> "bool":
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_IsNull(t)
Handle_TopOpeBRep_HArray1OfLineInter_IsNull = _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_IsNull
class TopOpeBRep_DataMapOfTopolTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_DataMapOfTopolTool(*args))
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_DataMapOfTopolTool
TopOpeBRep_DataMapOfTopolTool.begin = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_begin, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.end = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_end, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.cbegin = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_cbegin, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.cend = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_cend, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.Exchange = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Exchange, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.Assign = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Assign, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.Set = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Set, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.ReSize = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_ReSize, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.Bind = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Bind, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.Bound = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Bound, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.IsBound = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_IsBound, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.UnBind = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_UnBind, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.Seek = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Seek, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.Find = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Find, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.ChangeSeek = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_ChangeSeek, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.ChangeFind = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_ChangeFind, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.__call__ = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool___call__, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.Clear = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Clear, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool.Size = new_instancemethod(_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Size, None, TopOpeBRep_DataMapOfTopolTool)
TopOpeBRep_DataMapOfTopolTool_swigregister = _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_swigregister
TopOpeBRep_DataMapOfTopolTool_swigregister(TopOpeBRep_DataMapOfTopolTool)

class TopOpeBRep_SequenceOfPoint2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_SequenceOfPoint2d(*args))
    delNode = staticmethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_delNode)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_SequenceOfPoint2d
TopOpeBRep_SequenceOfPoint2d.begin = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_begin, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.end = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_end, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.cbegin = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_cbegin, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.cend = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_cend, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Size = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Size, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Length = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Length, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Lower = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Lower, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Upper = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Upper, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.IsEmpty = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_IsEmpty, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Reverse = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Reverse, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Exchange = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Exchange, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Clear = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Clear, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Assign = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Assign, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Set = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Set, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Remove = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Remove, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Append = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Append, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Prepend = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Prepend, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.InsertBefore = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_InsertBefore, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.InsertAfter = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_InsertAfter, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Split = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Split, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.First = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_First, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.ChangeFirst = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_ChangeFirst, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Last = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Last, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.ChangeLast = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_ChangeLast, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.Value = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Value, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.ChangeValue = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_ChangeValue, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.__call__ = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d___call__, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d.SetValue = new_instancemethod(_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_SetValue, None, TopOpeBRep_SequenceOfPoint2d)
TopOpeBRep_SequenceOfPoint2d_swigregister = _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_swigregister
TopOpeBRep_SequenceOfPoint2d_swigregister(TopOpeBRep_SequenceOfPoint2d)

def TopOpeBRep_SequenceOfPoint2d_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_delNode(theNode, theAl)
TopOpeBRep_SequenceOfPoint2d_delNode = _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_delNode

class TopOpeBRep_Array1OfLineInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_Array1OfLineInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Array1OfLineInter(*args))
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Array1OfLineInter

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TopOpeBRep_Array1OfLineInter.begin = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_begin, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.end = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_end, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.cbegin = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_cbegin, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.cend = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_cend, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.Init = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_Init, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.Size = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_Size, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.Length = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_Length, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.IsEmpty = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_IsEmpty, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.Lower = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_Lower, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.Upper = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_Upper, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.IsDeletable = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_IsDeletable, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.IsAllocated = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_IsAllocated, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.Assign = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_Assign, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.Move = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_Move, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.Set = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_Set, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.First = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_First, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.ChangeFirst = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_ChangeFirst, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.Last = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_Last, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.ChangeLast = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_ChangeLast, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.Value = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_Value, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.ChangeValue = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_ChangeValue, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.__call__ = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter___call__, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.SetValue = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_SetValue, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter.Resize = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfLineInter_Resize, None, TopOpeBRep_Array1OfLineInter)
TopOpeBRep_Array1OfLineInter_swigregister = _TopOpeBRep.TopOpeBRep_Array1OfLineInter_swigregister
TopOpeBRep_Array1OfLineInter_swigregister(TopOpeBRep_Array1OfLineInter)

class TopOpeBRep_ListOfBipoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_ListOfBipoint_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ListOfBipoint(*args))
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ListOfBipoint
TopOpeBRep_ListOfBipoint.begin = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_begin, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.end = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_end, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.cbegin = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_cbegin, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.cend = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_cend, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.Size = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_Size, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.Assign = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_Assign, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.Set = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_Set, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.Clear = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_Clear, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.First = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_First, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.Last = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_Last, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.Append = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_Append, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.Prepend = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_Prepend, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.RemoveFirst = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_RemoveFirst, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.Remove = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_Remove, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.InsertBefore = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_InsertBefore, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.InsertAfter = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_InsertAfter, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint.Reverse = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListOfBipoint_Reverse, None, TopOpeBRep_ListOfBipoint)
TopOpeBRep_ListOfBipoint_swigregister = _TopOpeBRep.TopOpeBRep_ListOfBipoint_swigregister
TopOpeBRep_ListOfBipoint_swigregister(TopOpeBRep_ListOfBipoint)

class TopOpeBRep_ListIteratorOfListOfBipoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ListIteratorOfListOfBipoint(*args))
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ListIteratorOfListOfBipoint
TopOpeBRep_ListIteratorOfListOfBipoint.More = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_More, None, TopOpeBRep_ListIteratorOfListOfBipoint)
TopOpeBRep_ListIteratorOfListOfBipoint.Next = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_Next, None, TopOpeBRep_ListIteratorOfListOfBipoint)
TopOpeBRep_ListIteratorOfListOfBipoint.Value = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_Value, None, TopOpeBRep_ListIteratorOfListOfBipoint)
TopOpeBRep_ListIteratorOfListOfBipoint.ChangeValue = new_instancemethod(_TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_ChangeValue, None, TopOpeBRep_ListIteratorOfListOfBipoint)
TopOpeBRep_ListIteratorOfListOfBipoint_swigregister = _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_swigregister
TopOpeBRep_ListIteratorOfListOfBipoint_swigregister(TopOpeBRep_ListIteratorOfListOfBipoint)

class TopOpeBRep_Array1OfVPointInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Array1OfVPointInter(*args))
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Array1OfVPointInter

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TopOpeBRep_Array1OfVPointInter.begin = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_begin, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.end = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_end, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.cbegin = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_cbegin, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.cend = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_cend, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.Init = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Init, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.Size = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Size, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.Length = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Length, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.IsEmpty = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_IsEmpty, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.Lower = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Lower, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.Upper = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Upper, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.IsDeletable = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_IsDeletable, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.IsAllocated = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_IsAllocated, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.Assign = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Assign, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.Move = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Move, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.Set = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Set, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.First = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_First, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.ChangeFirst = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_ChangeFirst, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.Last = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Last, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.ChangeLast = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_ChangeLast, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.Value = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Value, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.ChangeValue = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_ChangeValue, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.__call__ = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter___call__, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.SetValue = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_SetValue, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter.Resize = new_instancemethod(_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Resize, None, TopOpeBRep_Array1OfVPointInter)
TopOpeBRep_Array1OfVPointInter_swigregister = _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_swigregister
TopOpeBRep_Array1OfVPointInter_swigregister(TopOpeBRep_Array1OfVPointInter)

class topopebrep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Print(*args) -> "Standard_OStream &":
        """
        * Prints the name of <TLC> as a String on the Stream <S> and returns <S>.
        	:param TLC:
        	:type TLC: TopOpeBRep_TypeLineCurve
        	:param OS:
        	:type OS: Standard_OStream
        	:rtype: Standard_OStream
        """
        return _TopOpeBRep.topopebrep_Print(*args)

    Print = staticmethod(Print)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRep.topopebrep_swiginit(self, _TopOpeBRep.new_topopebrep())
    __swig_destroy__ = _TopOpeBRep.delete_topopebrep
topopebrep_swigregister = _TopOpeBRep.topopebrep_swigregister
topopebrep_swigregister(topopebrep)

def topopebrep_Print(*args) -> "Standard_OStream &":
    """
    * Prints the name of <TLC> as a String on the Stream <S> and returns <S>.
    	:param TLC:
    	:type TLC: TopOpeBRep_TypeLineCurve
    	:param OS:
    	:type OS: Standard_OStream
    	:rtype: Standard_OStream
    """
    return _TopOpeBRep.topopebrep_Print(*args)

class TopOpeBRep_Bipoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def I1(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_Bipoint_I1(self, *args)


    def I2(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_Bipoint_I2(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param I1:
        	:type I1: int
        	:param I2:
        	:type I2: int
        	:rtype: None
        """
        _TopOpeBRep.TopOpeBRep_Bipoint_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Bipoint(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Bipoint
TopOpeBRep_Bipoint.I1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_Bipoint_I1, None, TopOpeBRep_Bipoint)
TopOpeBRep_Bipoint.I2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_Bipoint_I2, None, TopOpeBRep_Bipoint)
TopOpeBRep_Bipoint_swigregister = _TopOpeBRep.TopOpeBRep_Bipoint_swigregister
TopOpeBRep_Bipoint_swigregister(TopOpeBRep_Bipoint)

class TopOpeBRep_DSFiller(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeEdgesFiller(self, *args) -> "TopOpeBRep_EdgesFiller &":
        """:rtype: TopOpeBRep_EdgesFiller"""
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeEdgesFiller(self, *args)


    def ChangeFaceEdgeFiller(self, *args) -> "TopOpeBRep_FaceEdgeFiller &":
        """:rtype: TopOpeBRep_FaceEdgeFiller"""
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeFaceEdgeFiller(self, *args)


    def ChangeFacesFiller(self, *args) -> "TopOpeBRep_FacesFiller &":
        """:rtype: TopOpeBRep_FacesFiller"""
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeFacesFiller(self, *args)


    def ChangeShapeIntersector(self, *args) -> "TopOpeBRep_ShapeIntersector &":
        """:rtype: TopOpeBRep_ShapeIntersector"""
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeShapeIntersector(self, *args)


    def ChangeShapeIntersector2d(self, *args) -> "TopOpeBRep_ShapeIntersector2d &":
        """:rtype: TopOpeBRep_ShapeIntersector2d"""
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeShapeIntersector2d(self, *args)


    def Checker(self, *args) -> "void":
        """
        :param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Checker(self, *args)


    def Complete(self, *args) -> "void":
        """
        :param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Complete(self, *args)


    def CompleteDS(self, *args) -> "void":
        """
        * Update the data structure with relevant informations deduced from the intersections. //! Shells containing an intersected face. Wires containing an intersected edge.
        	:param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_CompleteDS(self, *args)


    def CompleteDS2d(self, *args) -> "void":
        """
        * Update the data structure with relevant informations deduced from the intersections 2d. //! Shells containing an intersected face. Wires containing an intersected edge. //! search for interference identity using edge connexity //NYI
        	:param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_CompleteDS2d(self, *args)


    def Filter(self, *args) -> "void":
        """
        :param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Filter(self, *args)


    def GapFiller(self, *args) -> "void":
        """
        :param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_GapFiller(self, *args)


    def Insert(self, *args) -> "void":
        """
        * Stores in <DS> the intersections of <S1> and <S2>. if orientFORWARD = True S FORWARD,REVERSED --> FORWARD S EXTERNAL,INTERNAL --> EXTERNAL,INTERNAL
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:param orientFORWARD: default value is Standard_True
        	:type orientFORWARD: bool
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Insert(self, *args)


    def Insert1d(self, *args) -> "void":
        """
        * Stores in <DS> the intersections of <S1> and <S2>. S1 and S2 are edges or wires. S1 edges have a 2d representation in face F1 S2 edges have a 2d representation in face F2 F1 is the face which surface is taken as reference for 2d description of S1 and S2 edges. if orientFORWARD = True S FORWARD,REVERSED --> FORWARD S EXTERNAL,INTERNAL --> EXTERNAL,INTERNAL
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:param orientFORWARD: default value is Standard_False
        	:type orientFORWARD: bool
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Insert1d(self, *args)


    def Insert2d(self, *args) -> "void":
        """
        * Stores in <DS> the intersections of <S1> and <S2>. S1 et S2 contain only SameDomain Face
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Insert2d(self, *args)


    def InsertIntersection(self, *args) -> "void":
        """
        * Stores in <DS> the intersections of <S1> and <S2>. if orientFORWARD = True S FORWAR,REVERSED --> FORWARD S EXTERNAL,INTERNAL --> EXTERNAL,INTERNAL
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:param orientFORWARD: default value is Standard_True
        	:type orientFORWARD: bool
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_InsertIntersection(self, *args)


    def InsertIntersection2d(self, *args) -> "void":
        """
        * S1, S2 set of tangent face lance les intersections 2d pour coder correctement les faces SameDomain.
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_InsertIntersection2d(self, *args)


    def IsContext1d(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_IsContext1d(self, *args)


    def IsMadeOf1d(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_IsMadeOf1d(self, *args)


    def PShapeClassifier(self, *args) -> "TopOpeBRepTool_PShapeClassifier":
        """
        * return field myPShapeClassifier. set field myPShapeClassifier.
        	:rtype: TopOpeBRepTool_PShapeClassifier
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_PShapeClassifier(self, *args)


    def Reducer(self, *args) -> "void":
        """
        :param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Reducer(self, *args)


    def RemoveUnsharedGeometry(self, *args) -> "void":
        """
        :param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_RemoveUnsharedGeometry(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_DSFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_DSFiller(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_DSFiller
TopOpeBRep_DSFiller.ChangeEdgesFiller = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_ChangeEdgesFiller, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.ChangeFaceEdgeFiller = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_ChangeFaceEdgeFiller, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.ChangeFacesFiller = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_ChangeFacesFiller, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.ChangeShapeIntersector = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_ChangeShapeIntersector, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.ChangeShapeIntersector2d = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_ChangeShapeIntersector2d, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.Checker = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_Checker, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.Complete = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_Complete, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.CompleteDS = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_CompleteDS, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.CompleteDS2d = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_CompleteDS2d, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.Filter = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_Filter, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.GapFiller = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_GapFiller, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.Insert = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_Insert, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.Insert1d = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_Insert1d, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.Insert2d = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_Insert2d, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.InsertIntersection = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_InsertIntersection, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.InsertIntersection2d = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_InsertIntersection2d, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.IsContext1d = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_IsContext1d, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.IsMadeOf1d = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_IsMadeOf1d, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.PShapeClassifier = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_PShapeClassifier, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.Reducer = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_Reducer, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller.RemoveUnsharedGeometry = new_instancemethod(_TopOpeBRep.TopOpeBRep_DSFiller_RemoveUnsharedGeometry, None, TopOpeBRep_DSFiller)
TopOpeBRep_DSFiller_swigregister = _TopOpeBRep.TopOpeBRep_DSFiller_swigregister
TopOpeBRep_DSFiller_swigregister(TopOpeBRep_DSFiller)

class TopOpeBRep_EdgesFiller(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Face(self, *args) -> "TopoDS_Shape const":
        """
        :param I:
        	:type I: int
        	:param F:
        	:type F: TopoDS_Shape
        	:rtype: None
        :param I:
        	:type I: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_EdgesFiller_Face(self, *args)


    def Insert(self, *args) -> "void":
        """
        :param E1:
        	:type E1: TopoDS_Shape
        	:param E2:
        	:type E2: TopoDS_Shape
        	:param EI:
        	:type EI: TopOpeBRep_EdgesIntersector
        	:param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_EdgesFiller_Insert(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_EdgesFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_EdgesFiller(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_EdgesFiller
TopOpeBRep_EdgesFiller.Face = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesFiller_Face, None, TopOpeBRep_EdgesFiller)
TopOpeBRep_EdgesFiller.Insert = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesFiller_Insert, None, TopOpeBRep_EdgesFiller)
TopOpeBRep_EdgesFiller_swigregister = _TopOpeBRep.TopOpeBRep_EdgesFiller_swigregister
TopOpeBRep_EdgesFiller_swigregister(TopOpeBRep_EdgesFiller)

class TopOpeBRep_EdgesIntersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Curve(self, *args) -> "Geom2dAdaptor_Curve const &":
        """
        :param Index:
        	:type Index: int
        	:rtype: Geom2dAdaptor_Curve
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Curve(self, *args)


    def Dimension(self, *args) -> "Standard_Integer":
        """
        :param D:
        	:type D: int
        	:rtype: None
        * set working space dimension D = 1 for E &|| W, 2 for E in F
        	:rtype: int
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Dimension(self, *args)


    def Dump(self, *args) -> "void":
        """
        :param str:
        	:type str: TCollection_AsciiString
        	:param ie1: default value is 0
        	:type ie1: int
        	:param ie2: default value is 0
        	:type ie2: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Dump(self, *args)


    def Edge(self, *args) -> "TopoDS_Shape const":
        """
        :param Index:
        	:type Index: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Edge(self, *args)


    def Face(self, *args) -> "TopoDS_Shape const":
        """
        :param Index:
        	:type Index: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Face(self, *args)


    def FacesSameOriented(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_FacesSameOriented(self, *args)


    def ForceTolerances(self, *args) -> "void":
        """
        :param Tol1:
        	:type Tol1: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_ForceTolerances(self, *args)


    def HasSegment(self, *args) -> "Standard_Boolean":
        """
        * true if at least one intersection segment.
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_HasSegment(self, *args)


    def InitPoint(self, *args) -> "void":
        """
        :param selectkeep: default value is Standard_True
        	:type selectkeep: bool
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_InitPoint(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_IsEmpty(self, *args)


    def MorePoint(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_MorePoint(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_NbPoints(self, *args)


    def NbSegments(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_NbSegments(self, *args)


    def NextPoint(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_NextPoint(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param E1:
        	:type E1: TopoDS_Shape
        	:param E2:
        	:type E2: TopoDS_Shape
        	:param ReduceSegments: default value is Standard_True
        	:type ReduceSegments: bool
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Perform(self, *args)


    def Point(self, *args) -> "TopOpeBRep_Point2d const &":
        """
        :rtype: TopOpeBRep_Point2d
        :param I:
        	:type I: int
        	:rtype: TopOpeBRep_Point2d
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Point(self, *args)


    def Points(self, *args) -> "TopOpeBRep_SequenceOfPoint2d const &":
        """:rtype: TopOpeBRep_SequenceOfPoint2d"""
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Points(self, *args)


    def ReduceSegment(self, *args) -> "Standard_Boolean":
        """
        :param P1:
        	:type P1: TopOpeBRep_Point2d
        	:param P2:
        	:type P2: TopOpeBRep_Point2d
        	:param Pn:
        	:type Pn: TopOpeBRep_Point2d
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_ReduceSegment(self, *args)


    def SameDomain(self, *args) -> "Standard_Boolean":
        """
        * = mySameDomain.
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_SameDomain(self, *args)


    def SetFaces(self, *args) -> "void":
        """
        :param F1:
        	:type F1: TopoDS_Shape
        	:param F2:
        	:type F2: TopoDS_Shape
        	:rtype: None
        :param F1:
        	:type F1: TopoDS_Shape
        	:param F2:
        	:type F2: TopoDS_Shape
        	:param B1:
        	:type B1: Bnd_Box
        	:param B2:
        	:type B2: Bnd_Box
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_SetFaces(self, *args)


    def Status1(self, *args) -> "TopOpeBRep_P2Dstatus":
        """:rtype: TopOpeBRep_P2Dstatus"""
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Status1(self, *args)


    def Surface(self, *args) -> "BRepAdaptor_Surface const &":
        """
        :param Index:
        	:type Index: int
        	:rtype: BRepAdaptor_Surface
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Surface(self, *args)


    def SurfacesSameOriented(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_SurfacesSameOriented(self, *args)


    def ToleranceMax(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_ToleranceMax(self, *args)


    def Tolerances(self, *args) -> "void":
        """
        :param tol1:
        	:type tol1: float
        	:param tol2:
        	:type tol2: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Tolerances(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_EdgesIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_EdgesIntersector(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_EdgesIntersector
TopOpeBRep_EdgesIntersector.Curve = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_Curve, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.Dimension = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_Dimension, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.Dump = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_Dump, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.Edge = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_Edge, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.Face = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_Face, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.FacesSameOriented = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_FacesSameOriented, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.ForceTolerances = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_ForceTolerances, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.HasSegment = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_HasSegment, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.InitPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_InitPoint, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.IsEmpty = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_IsEmpty, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.MorePoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_MorePoint, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.NbPoints = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_NbPoints, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.NbSegments = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_NbSegments, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.NextPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_NextPoint, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.Perform = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_Perform, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.Point = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_Point, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.Points = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_Points, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.ReduceSegment = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_ReduceSegment, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.SameDomain = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_SameDomain, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.SetFaces = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_SetFaces, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.Status1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_Status1, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.Surface = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_Surface, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.SurfacesSameOriented = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_SurfacesSameOriented, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.ToleranceMax = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_ToleranceMax, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector.Tolerances = new_instancemethod(_TopOpeBRep.TopOpeBRep_EdgesIntersector_Tolerances, None, TopOpeBRep_EdgesIntersector)
TopOpeBRep_EdgesIntersector_swigregister = _TopOpeBRep.TopOpeBRep_EdgesIntersector_swigregister
TopOpeBRep_EdgesIntersector_swigregister(TopOpeBRep_EdgesIntersector)

class TopOpeBRep_FFDumper(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpDSP(self, *args) -> "void":
        """
        :param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:param GK:
        	:type GK: TopOpeBRepDS_Kind
        	:param G:
        	:type G: int
        	:param newinDS:
        	:type newinDS: bool
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_DumpDSP(self, *args)


    def DumpLine(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:rtype: None
        :param L:
        	:type L: TopOpeBRep_LineInter
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_DumpLine(self, *args)


    def DumpVP(self, *args) -> "void":
        """
        :param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:rtype: None
        :param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:param ISI:
        	:type ISI: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_DumpVP(self, *args)


    def ExploreIndex(self, *args) -> "Standard_Integer":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param ISI:
        	:type ISI: int
        	:rtype: int
        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_ExploreIndex(self, *args)


    def Init(self, *args) -> "void":
        """
        :param PFF:
        	:type PFF: TopOpeBRep_PFacesFiller
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_Init(self, *args)


    def PFacesFillerDummy(self, *args) -> "TopOpeBRep_PFacesFiller":
        """:rtype: TopOpeBRep_PFacesFiller"""
        return _TopOpeBRep.TopOpeBRep_FFDumper_PFacesFillerDummy(self, *args)


    def __init__(self, *args):
        """
        :param PFF:
        	:type PFF: TopOpeBRep_PFacesFiller
        	:rtype: None
        """
        _TopOpeBRep.TopOpeBRep_FFDumper_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FFDumper(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_FFDumper_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FFDumper
TopOpeBRep_FFDumper.DumpDSP = new_instancemethod(_TopOpeBRep.TopOpeBRep_FFDumper_DumpDSP, None, TopOpeBRep_FFDumper)
TopOpeBRep_FFDumper.DumpLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FFDumper_DumpLine, None, TopOpeBRep_FFDumper)
TopOpeBRep_FFDumper.DumpVP = new_instancemethod(_TopOpeBRep.TopOpeBRep_FFDumper_DumpVP, None, TopOpeBRep_FFDumper)
TopOpeBRep_FFDumper.ExploreIndex = new_instancemethod(_TopOpeBRep.TopOpeBRep_FFDumper_ExploreIndex, None, TopOpeBRep_FFDumper)
TopOpeBRep_FFDumper.Init = new_instancemethod(_TopOpeBRep.TopOpeBRep_FFDumper_Init, None, TopOpeBRep_FFDumper)
TopOpeBRep_FFDumper.PFacesFillerDummy = new_instancemethod(_TopOpeBRep.TopOpeBRep_FFDumper_PFacesFillerDummy, None, TopOpeBRep_FFDumper)
TopOpeBRep_FFDumper_swigregister = _TopOpeBRep.TopOpeBRep_FFDumper_swigregister
TopOpeBRep_FFDumper_swigregister(TopOpeBRep_FFDumper)

class TopOpeBRep_FFTransitionTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ProcessEdgeONTransition(*args) -> "TopOpeBRepDS_Transition":
        """
        * compute transition on 'IntPatch_Restriction line' edge <R> when crossing edge <E> of face <F> at point <VP>. VP is given on edge <E> of face <F> of index <Index> (1 or 2). <VP> has been classified by FacesFiller as TopAbs_ON an edge <R> of the other face than <F> of current (face/face) intersection. Transition depends on the orientation of E in F. This method should be provided by IntPatch_Line (NYI)
        	:param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:param Index:
        	:type Index: int
        	:param R:
        	:type R: TopoDS_Shape
        	:param E:
        	:type E: TopoDS_Shape
        	:param F:
        	:type F: TopoDS_Shape
        	:rtype: TopOpeBRepDS_Transition
        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessEdgeONTransition(*args)

    ProcessEdgeONTransition = staticmethod(ProcessEdgeONTransition)

    def ProcessEdgeTransition(*args) -> "TopOpeBRepDS_Transition":
        """
        :param P:
        	:type P: TopOpeBRep_VPointInter
        	:param Index:
        	:type Index: int
        	:param LineOrientation:
        	:type LineOrientation: TopAbs_Orientation
        	:rtype: TopOpeBRepDS_Transition
        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessEdgeTransition(*args)

    ProcessEdgeTransition = staticmethod(ProcessEdgeTransition)

    def ProcessFaceTransition(*args) -> "TopOpeBRepDS_Transition":
        """
        :param L:
        	:type L: TopOpeBRep_LineInter
        	:param Index:
        	:type Index: int
        	:param FaceOrientation:
        	:type FaceOrientation: TopAbs_Orientation
        	:rtype: TopOpeBRepDS_Transition
        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessFaceTransition(*args)

    ProcessFaceTransition = staticmethod(ProcessFaceTransition)

    def ProcessLineTransition(*args) -> "TopOpeBRepDS_Transition":
        """
        :param P:
        	:type P: TopOpeBRep_VPointInter
        	:param Index:
        	:type Index: int
        	:param EdgeOrientation:
        	:type EdgeOrientation: TopAbs_Orientation
        	:rtype: TopOpeBRepDS_Transition
        :param P:
        	:type P: TopOpeBRep_VPointInter
        	:param L:
        	:type L: TopOpeBRep_LineInter
        	:rtype: TopOpeBRepDS_Transition
        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessLineTransition(*args)

    ProcessLineTransition = staticmethod(ProcessLineTransition)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRep.TopOpeBRep_FFTransitionTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FFTransitionTool())
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FFTransitionTool
TopOpeBRep_FFTransitionTool_swigregister = _TopOpeBRep.TopOpeBRep_FFTransitionTool_swigregister
TopOpeBRep_FFTransitionTool_swigregister(TopOpeBRep_FFTransitionTool)

def TopOpeBRep_FFTransitionTool_ProcessEdgeONTransition(*args) -> "TopOpeBRepDS_Transition":
    """
    * compute transition on 'IntPatch_Restriction line' edge <R> when crossing edge <E> of face <F> at point <VP>. VP is given on edge <E> of face <F> of index <Index> (1 or 2). <VP> has been classified by FacesFiller as TopAbs_ON an edge <R> of the other face than <F> of current (face/face) intersection. Transition depends on the orientation of E in F. This method should be provided by IntPatch_Line (NYI)
    	:param VP:
    	:type VP: TopOpeBRep_VPointInter
    	:param Index:
    	:type Index: int
    	:param R:
    	:type R: TopoDS_Shape
    	:param E:
    	:type E: TopoDS_Shape
    	:param F:
    	:type F: TopoDS_Shape
    	:rtype: TopOpeBRepDS_Transition
    """
    return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessEdgeONTransition(*args)

def TopOpeBRep_FFTransitionTool_ProcessEdgeTransition(*args) -> "TopOpeBRepDS_Transition":
    """
    :param P:
    	:type P: TopOpeBRep_VPointInter
    	:param Index:
    	:type Index: int
    	:param LineOrientation:
    	:type LineOrientation: TopAbs_Orientation
    	:rtype: TopOpeBRepDS_Transition
    """
    return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessEdgeTransition(*args)

def TopOpeBRep_FFTransitionTool_ProcessFaceTransition(*args) -> "TopOpeBRepDS_Transition":
    """
    :param L:
    	:type L: TopOpeBRep_LineInter
    	:param Index:
    	:type Index: int
    	:param FaceOrientation:
    	:type FaceOrientation: TopAbs_Orientation
    	:rtype: TopOpeBRepDS_Transition
    """
    return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessFaceTransition(*args)

def TopOpeBRep_FFTransitionTool_ProcessLineTransition(*args) -> "TopOpeBRepDS_Transition":
    """
    :param P:
    	:type P: TopOpeBRep_VPointInter
    	:param Index:
    	:type Index: int
    	:param EdgeOrientation:
    	:type EdgeOrientation: TopAbs_Orientation
    	:rtype: TopOpeBRepDS_Transition
    :param P:
    	:type P: TopOpeBRep_VPointInter
    	:param L:
    	:type L: TopOpeBRep_LineInter
    	:rtype: TopOpeBRepDS_Transition
    """
    return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessLineTransition(*args)

class TopOpeBRep_FaceEdgeFiller(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Insert(self, *args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Shape
        	:param E:
        	:type E: TopoDS_Shape
        	:param FEINT:
        	:type FEINT: TopOpeBRep_FaceEdgeIntersector
        	:param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeFiller_Insert(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_FaceEdgeFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FaceEdgeFiller(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FaceEdgeFiller
TopOpeBRep_FaceEdgeFiller.Insert = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeFiller_Insert, None, TopOpeBRep_FaceEdgeFiller)
TopOpeBRep_FaceEdgeFiller_swigregister = _TopOpeBRep.TopOpeBRep_FaceEdgeFiller_swigregister
TopOpeBRep_FaceEdgeFiller_swigregister(TopOpeBRep_FaceEdgeFiller)

class TopOpeBRep_FaceEdgeIntersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ForceTolerance(self, *args) -> "void":
        """
        * Force the tolerance values used by the next Perform(S1,S2) call.
        	:param tol:
        	:type tol: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_ForceTolerance(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * trace only
        	:rtype: int
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Index(self, *args)


    def InitPoint(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_InitPoint(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_IsEmpty(self, *args)


    def IsVertex(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param P:
        	:type P: gp_Pnt
        	:param Tol:
        	:type Tol: float
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: bool
        :param I:
        	:type I: int
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_IsVertex(self, *args)


    def MorePoint(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_MorePoint(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_NbPoints(self, *args)


    def NextPoint(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_NextPoint(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * parametre de Value() sur l'arete
        	:rtype: float
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Parameter(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Shape
        	:param E:
        	:type E: TopoDS_Shape
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * returns intersected face or edge according to value of <Index> = 1 or 2
        	:param Index:
        	:type Index: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Shape(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        * IN ou ON / a la face. Les points OUT ne sont pas retournes.
        	:rtype: TopAbs_State
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_State(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        * Return the tolerance value used in the last Perform() call If ForceTolerance() has been called, return the given value. If not, return value extracted from shapes.
        	:rtype: float
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Tolerance(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FaceEdgeIntersector(*args))

    def Transition(self, *args) -> "TopOpeBRepDS_Transition":
        """
        * Index = 1 transition par rapport a la face, en cheminant sur l'arete
        	:param Index:
        	:type Index: int
        	:param FaceOrientation:
        	:type FaceOrientation: TopAbs_Orientation
        	:rtype: TopOpeBRepDS_Transition
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Transition(self, *args)


    def UVPoint(self, *args) -> "void":
        """
        * parametre de Value() sur la face
        	:param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_UVPoint(self, *args)


    def Value(self, *args) -> "gp_Pnt":
        """
        * return the 3D point of the current intersection point.
        	:rtype: gp_Pnt
        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FaceEdgeIntersector
TopOpeBRep_FaceEdgeIntersector.ForceTolerance = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_ForceTolerance, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.Index = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Index, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.InitPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_InitPoint, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.IsEmpty = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_IsEmpty, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.IsVertex = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_IsVertex, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.MorePoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_MorePoint, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.NbPoints = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_NbPoints, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.NextPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_NextPoint, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.Parameter = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Parameter, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.Perform = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Perform, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.Shape = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Shape, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.State = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_State, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.Tolerance = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Tolerance, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.Transition = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Transition, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.UVPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_UVPoint, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector.Value = new_instancemethod(_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Value, None, TopOpeBRep_FaceEdgeIntersector)
TopOpeBRep_FaceEdgeIntersector_swigregister = _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_swigregister
TopOpeBRep_FaceEdgeIntersector_swigregister(TopOpeBRep_FaceEdgeIntersector)

class TopOpeBRep_FacesFiller(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddShapesLine(self, *args) -> "void":
        """
        * compute 3d curve, pcurves and face/curve interferences for current NDSC. Add them to the DS.
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_AddShapesLine(self, *args)


    def ChangeDataStructure(self, *args) -> "TopOpeBRepDS_DataStructure &":
        """:rtype: TopOpeBRepDS_DataStructure"""
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ChangeDataStructure(self, *args)


    def ChangeFacesIntersector(self, *args) -> "TopOpeBRep_FacesIntersector &":
        """:rtype: TopOpeBRep_FacesIntersector"""
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ChangeFacesIntersector(self, *args)


    def ChangePointClassifier(self, *args) -> "TopOpeBRep_PointClassifier &":
        """:rtype: TopOpeBRep_PointClassifier"""
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ChangePointClassifier(self, *args)


    def CheckLine(self, *args) -> "Standard_Boolean":
        """
        :param L:
        	:type L: TopOpeBRep_LineInter
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_CheckLine(self, *args)


    def EqualpPonR(*args) -> "Standard_Boolean":
        """
        :param Lrest:
        	:type Lrest: TopOpeBRep_LineInter
        	:param VP1:
        	:type VP1: TopOpeBRep_VPointInter
        	:param VP2:
        	:type VP2: TopOpeBRep_VPointInter
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_EqualpPonR(*args)

    EqualpPonR = staticmethod(EqualpPonR)

    def Face(self, *args) -> "TopoDS_Face const":
        """
        :param I:
        	:type I: int
        	:rtype: TopoDS_Face
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_Face(self, *args)


    def FaceFaceTransition(self, *args) -> "TopOpeBRepDS_Transition const &":
        """
        :param L:
        	:type L: TopOpeBRep_LineInter
        	:param I:
        	:type I: int
        	:rtype: TopOpeBRepDS_Transition
        :param I:
        	:type I: int
        	:rtype: TopOpeBRepDS_Transition
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_FaceFaceTransition(self, *args)


    def FillLine(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_FacesFiller_FillLine(self, *args)


    def FillLineVPonR(self, *args) -> "void":
        """
        * VP processing for restriction line and line sharing same domain with section edges : - if restriction : Adds restriction edges as section edges and compute face/edge interference. - if same domain : If line share same domain with section edges, compute parts of line IN/IN the two faces, and compute curve/point interference for VP boundaries.
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_FillLineVPonR(self, *args)


    def GetESL(self, *args) -> "void":
        """
        * Get map <mapES > of restriction edges having parts IN one of the 2 faces.
        	:param LES:
        	:type LES: TopTools_ListOfShape
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetESL(self, *args)


    def GetFFGeometry(self, *args) -> "Standard_Boolean":
        """
        * search for G = geometry of Point which is identical to <DSP> among the DS Points created in the CURRENT face/face intersection ( current Insert() call).
        	:param DSP:
        	:type DSP: TopOpeBRepDS_Point
        	:param K:
        	:type K: TopOpeBRepDS_Kind
        	:param G:
        	:type G: int
        	:rtype: bool
        * search for G = geometry of Point which is identical to <VP> among the DS Points created in the CURRENT face/face intersection ( current Insert() call).
        	:param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:param K:
        	:type K: TopOpeBRepDS_Kind
        	:param G:
        	:type G: int
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetFFGeometry(self, *args)


    def GetGeometry(self, *args) -> "Standard_Boolean":
        """
        * Get the geometry of a DS point <DSP>. Search for it with ScanInterfList (previous method). if found, set <G> to the geometry of the interference found. else, add the point <DSP> in the <DS> and set <G> to the value of the new geometry such created. returns the value of ScanInterfList().
        	:param IT:
        	:type IT: TopOpeBRepDS_ListIteratorOfListOfInterference
        	:param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:param G:
        	:type G: int
        	:param K:
        	:type K: TopOpeBRepDS_Kind
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetGeometry(self, *args)


    def GetTraceIndex(self, *args) -> "void":
        """
        :param exF1:
        	:type exF1: int
        	:param exF2:
        	:type exF2: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetTraceIndex(self, *args)


    def HDataStructure(self, *args) -> "opencascade::handle< TopOpeBRepDS_HDataStructure >":
        """:rtype: opencascade::handle<TopOpeBRepDS_HDataStructure>"""
        return _TopOpeBRep.TopOpeBRep_FacesFiller_HDataStructure(self, *args)


    def Insert(self, *args) -> "void":
        """
        * Stores in <DS> the intersections of <S1> and <S2>.
        	:param F1:
        	:type F1: TopoDS_Shape
        	:param F2:
        	:type F2: TopoDS_Shape
        	:param FACINT:
        	:type FACINT: TopOpeBRep_FacesIntersector
        	:param HDS:
        	:type HDS: TopOpeBRepDS_HDataStructure
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_Insert(self, *args)


    def IsVPtransLok(*args) -> "Standard_Boolean":
        """
        * Computes the transition <T> of the VPoint <iVP> on the edge of <SI12>. Returns <False> if the status is unknown.
        	:param L:
        	:type L: TopOpeBRep_LineInter
        	:param iVP:
        	:type iVP: int
        	:param SI12:
        	:type SI12: int
        	:param T:
        	:type T: TopOpeBRepDS_Transition
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_IsVPtransLok(*args)

    IsVPtransLok = staticmethod(IsVPtransLok)

    def LSameDomainERL(*args) -> "Standard_Boolean":
        """
        * Returns <True> if <L> shares a same geometric domain with at least one of the section edges of <ERL>.
        	:param L:
        	:type L: TopOpeBRep_LineInter
        	:param ERL:
        	:type ERL: TopTools_ListOfShape
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_LSameDomainERL(*args)

    LSameDomainERL = staticmethod(LSameDomainERL)

    def Lminmax(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Computes <pmin> and <pmax> the upper and lower bounds of <L> enclosing all vpoints.
        	:param L:
        	:type L: TopOpeBRep_LineInter
        	:param pmin:
        	:type pmin: float
        	:param pmax:
        	:type pmax: float
        	:rtype: void
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_Lminmax(*args)

    Lminmax = staticmethod(Lminmax)

    def LoadLine(self, *args) -> "void":
        """
        :param L:
        	:type L: TopOpeBRep_LineInter
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_LoadLine(self, *args)


    def MakeGeometry(self, *args) -> "Standard_Integer":
        """
        :param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:param ShapeIndex:
        	:type ShapeIndex: int
        	:param K:
        	:type K: TopOpeBRepDS_Kind
        	:rtype: int
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_MakeGeometry(self, *args)


    def PDataStructureDummy(self, *args) -> "TopOpeBRepDS_PDataStructure":
        """:rtype: TopOpeBRepDS_PDataStructure"""
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PDataStructureDummy(self, *args)


    def PFacesIntersectorDummy(self, *args) -> "TopOpeBRep_PFacesIntersector":
        """:rtype: TopOpeBRep_PFacesIntersector"""
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PFacesIntersectorDummy(self, *args)


    def PLineInterDummy(self, *args) -> "TopOpeBRep_PLineInter":
        """:rtype: TopOpeBRep_PLineInter"""
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PLineInterDummy(self, *args)


    def PShapeClassifier(self, *args) -> "TopOpeBRepTool_PShapeClassifier":
        """
        * return field myPShapeClassifier.
        	:rtype: TopOpeBRepTool_PShapeClassifier
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PShapeClassifier(self, *args)


    def ProcessLine(self, *args) -> "void":
        """
        * Process current intersection line (set by LoadLine)
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessLine(self, *args)


    def ProcessRLine(self, *args) -> "void":
        """
        * Process current restriction line, adding restriction edge and computing face/edge interference.
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessRLine(self, *args)


    def ProcessSectionEdges(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessSectionEdges(self, *args)


    def ProcessVPInotonR(self, *args) -> "void":
        """
        * processing ProcessVPnotonR for VPI.
        	:param VPI:
        	:type VPI: TopOpeBRep_VPointInterIterator
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPInotonR(self, *args)


    def ProcessVPIonR(self, *args) -> "void":
        """
        * processing ProcessVPonR for VPI.
        	:param VPI:
        	:type VPI: TopOpeBRep_VPointInterIterator
        	:param trans1:
        	:type trans1: TopOpeBRepDS_Transition
        	:param F1:
        	:type F1: TopoDS_Shape
        	:param ShapeIndex:
        	:type ShapeIndex: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPIonR(self, *args)


    def ProcessVPR(self, *args) -> "void":
        """
        * calling the followings ProcessVPIonR and ProcessVPonR.
        	:param FF:
        	:type FF: TopOpeBRep_FacesFiller
        	:param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPR(self, *args)


    def ProcessVPnotonR(self, *args) -> "void":
        """
        * adds <VP>'s geometrical point to the DS (if not stored) and computes curve point interference.
        	:param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPnotonR(self, *args)


    def ProcessVPonR(self, *args) -> "void":
        """
        * adds <VP>'s geometric point (if not stored) and computes (curve or edge)/(point or vertex) interference.
        	:param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:param trans1:
        	:type trans1: TopOpeBRepDS_Transition
        	:param F1:
        	:type F1: TopoDS_Shape
        	:param ShapeIndex:
        	:type ShapeIndex: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPonR(self, *args)


    def ProcessVPonclosingR(self, *args) -> "void":
        """
        * VP processing on closing arc.
        	:param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:param F1:
        	:type F1: TopoDS_Shape
        	:param ShapeIndex:
        	:type ShapeIndex: int
        	:param transEdge:
        	:type transEdge: TopOpeBRepDS_Transition
        	:param PVKind:
        	:type PVKind: TopOpeBRepDS_Kind
        	:param PVIndex:
        	:type PVIndex: int
        	:param EPIfound:
        	:type EPIfound: bool
        	:param IEPI:
        	:type IEPI: TopOpeBRepDS_Interference
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPonclosingR(self, *args)


    def ProcessVPondgE(self, *args) -> "Standard_Boolean":
        """
        * VP processing on degenerated arc.
        	:param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:param ShapeIndex:
        	:type ShapeIndex: int
        	:param PVKind:
        	:type PVKind: TopOpeBRepDS_Kind
        	:param PVIndex:
        	:type PVIndex: int
        	:param EPIfound:
        	:type EPIfound: bool
        	:param IEPI:
        	:type IEPI: TopOpeBRepDS_Interference
        	:param CPIfound:
        	:type CPIfound: bool
        	:param ICPI:
        	:type ICPI: TopOpeBRepDS_Interference
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPondgE(self, *args)


    def ResetDSC(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ResetDSC(self, *args)


    def SetPShapeClassifier(self, *args) -> "void":
        """
        * set field myPShapeClassifier.
        	:param PSC:
        	:type PSC: TopOpeBRepTool_PShapeClassifier
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_SetPShapeClassifier(self, *args)


    def SetTraceIndex(self, *args) -> "void":
        """
        :param exF1:
        	:type exF1: int
        	:param exF2:
        	:type exF2: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_SetTraceIndex(self, *args)


    def StoreCurveInterference(self, *args) -> "void":
        """
        * Add interference <I> to list myDSCIL. on a given line, at first call, add a new DS curve.
        	:param I:
        	:type I: TopOpeBRepDS_Interference
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_StoreCurveInterference(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_FacesFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FacesFiller(*args))

    def TransvpOK(*args) -> "Standard_Boolean":
        """
        * Computes transition on line for VP<iVP> on edge restriction of <SI>. If <isINOUT> : returns <true> if transition computed is IN/OUT else : returns <true> if transition computed is OUT/IN.
        	:param L:
        	:type L: TopOpeBRep_LineInter
        	:param iVP:
        	:type iVP: int
        	:param SI:
        	:type SI: int
        	:param isINOUT:
        	:type isINOUT: bool
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_TransvpOK(*args)

    TransvpOK = staticmethod(TransvpOK)

    def VPParamOnER(*args) -> "Standard_Real":
        """
        * Returns parameter u of vp on the restriction edge.
        	:param vp:
        	:type vp: TopOpeBRep_VPointInter
        	:param Lrest:
        	:type Lrest: TopOpeBRep_LineInter
        	:rtype: float
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VPParamOnER(*args)

    VPParamOnER = staticmethod(VPParamOnER)

    def VP_Position(self, *args) -> "void":
        """
        * compute position of VPoints of lines
        	:param FACINT:
        	:type FACINT: TopOpeBRep_FacesIntersector
        	:rtype: None
        * compute position of VPoints of line L
        	:param L:
        	:type L: TopOpeBRep_LineInter
        	:rtype: None
        * compute position of VP with current faces, according to VP.ShapeIndex() .
        	:param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:param VPC:
        	:type VPC: TopOpeBRep_VPointInterClassifier
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VP_Position(self, *args)


    def VP_PositionOnL(self, *args) -> "void":
        """
        * compute position of VPoints of non-restriction line L.
        	:param L:
        	:type L: TopOpeBRep_LineInter
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VP_PositionOnL(self, *args)


    def VP_PositionOnR(self, *args) -> "void":
        """
        * compute position of VPoints of restriction line L.
        	:param L:
        	:type L: TopOpeBRep_LineInter
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VP_PositionOnR(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FacesFiller
TopOpeBRep_FacesFiller.AddShapesLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_AddShapesLine, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ChangeDataStructure = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ChangeDataStructure, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ChangeFacesIntersector = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ChangeFacesIntersector, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ChangePointClassifier = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ChangePointClassifier, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.CheckLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_CheckLine, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.Face = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_Face, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.FaceFaceTransition = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_FaceFaceTransition, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.FillLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_FillLine, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.FillLineVPonR = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_FillLineVPonR, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.GetESL = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_GetESL, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.GetFFGeometry = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_GetFFGeometry, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.GetGeometry = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_GetGeometry, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.GetTraceIndex = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_GetTraceIndex, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.HDataStructure = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_HDataStructure, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.Insert = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_Insert, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.LoadLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_LoadLine, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.MakeGeometry = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_MakeGeometry, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.PDataStructureDummy = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_PDataStructureDummy, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.PFacesIntersectorDummy = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_PFacesIntersectorDummy, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.PLineInterDummy = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_PLineInterDummy, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.PShapeClassifier = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_PShapeClassifier, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ProcessLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ProcessLine, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ProcessRLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ProcessRLine, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ProcessSectionEdges = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ProcessSectionEdges, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ProcessVPInotonR = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPInotonR, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ProcessVPIonR = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPIonR, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ProcessVPR = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPR, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ProcessVPnotonR = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPnotonR, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ProcessVPonR = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPonR, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ProcessVPonclosingR = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPonclosingR, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ProcessVPondgE = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPondgE, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.ResetDSC = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_ResetDSC, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.SetPShapeClassifier = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_SetPShapeClassifier, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.SetTraceIndex = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_SetTraceIndex, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.StoreCurveInterference = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_StoreCurveInterference, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.VP_Position = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_VP_Position, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.VP_PositionOnL = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_VP_PositionOnL, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller.VP_PositionOnR = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesFiller_VP_PositionOnR, None, TopOpeBRep_FacesFiller)
TopOpeBRep_FacesFiller_swigregister = _TopOpeBRep.TopOpeBRep_FacesFiller_swigregister
TopOpeBRep_FacesFiller_swigregister(TopOpeBRep_FacesFiller)

def TopOpeBRep_FacesFiller_EqualpPonR(*args) -> "Standard_Boolean":
    """
    :param Lrest:
    	:type Lrest: TopOpeBRep_LineInter
    	:param VP1:
    	:type VP1: TopOpeBRep_VPointInter
    	:param VP2:
    	:type VP2: TopOpeBRep_VPointInter
    	:rtype: bool
    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_EqualpPonR(*args)

def TopOpeBRep_FacesFiller_IsVPtransLok(*args) -> "Standard_Boolean":
    """
    * Computes the transition <T> of the VPoint <iVP> on the edge of <SI12>. Returns <False> if the status is unknown.
    	:param L:
    	:type L: TopOpeBRep_LineInter
    	:param iVP:
    	:type iVP: int
    	:param SI12:
    	:type SI12: int
    	:param T:
    	:type T: TopOpeBRepDS_Transition
    	:rtype: bool
    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_IsVPtransLok(*args)

def TopOpeBRep_FacesFiller_LSameDomainERL(*args) -> "Standard_Boolean":
    """
    * Returns <True> if <L> shares a same geometric domain with at least one of the section edges of <ERL>.
    	:param L:
    	:type L: TopOpeBRep_LineInter
    	:param ERL:
    	:type ERL: TopTools_ListOfShape
    	:rtype: bool
    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_LSameDomainERL(*args)

def TopOpeBRep_FacesFiller_Lminmax(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Computes <pmin> and <pmax> the upper and lower bounds of <L> enclosing all vpoints.
    	:param L:
    	:type L: TopOpeBRep_LineInter
    	:param pmin:
    	:type pmin: float
    	:param pmax:
    	:type pmax: float
    	:rtype: void
    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_Lminmax(*args)

def TopOpeBRep_FacesFiller_TransvpOK(*args) -> "Standard_Boolean":
    """
    * Computes transition on line for VP<iVP> on edge restriction of <SI>. If <isINOUT> : returns <true> if transition computed is IN/OUT else : returns <true> if transition computed is OUT/IN.
    	:param L:
    	:type L: TopOpeBRep_LineInter
    	:param iVP:
    	:type iVP: int
    	:param SI:
    	:type SI: int
    	:param isINOUT:
    	:type isINOUT: bool
    	:rtype: bool
    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_TransvpOK(*args)

def TopOpeBRep_FacesFiller_VPParamOnER(*args) -> "Standard_Real":
    """
    * Returns parameter u of vp on the restriction edge.
    	:param vp:
    	:type vp: TopOpeBRep_VPointInter
    	:param Lrest:
    	:type Lrest: TopOpeBRep_LineInter
    	:rtype: float
    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_VPParamOnER(*args)

class TopOpeBRep_FacesIntersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeLine(self, *args) -> "TopOpeBRep_LineInter &":
        """
        :param IL:
        	:type IL: int
        	:rtype: TopOpeBRep_LineInter
        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_ChangeLine(self, *args)


    def CurrentLine(self, *args) -> "TopOpeBRep_LineInter &":
        """:rtype: TopOpeBRep_LineInter"""
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_CurrentLine(self, *args)


    def CurrentLineIndex(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_CurrentLineIndex(self, *args)


    def Face(self, *args) -> "TopoDS_Shape const":
        """
        * returns first or second intersected face.
        	:param Index:
        	:type Index: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Face(self, *args)


    def ForceTolerances(self, *args) -> "void":
        """
        * Force the tolerance values used by the next Perform(S1,S2) call.
        	:param tolarc:
        	:type tolarc: float
        	:param toltang:
        	:type toltang: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_ForceTolerances(self, *args)


    def GetTolerances(self, *args) -> "void":
        """
        * Return the tolerance values used in the last Perform() call If ForceTolerances() has been called, return the given values. If not, return values extracted from shapes.
        	:param tolarc:
        	:type tolarc: float
        	:param toltang:
        	:type toltang: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_GetTolerances(self, *args)


    def InitLine(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_InitLine(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_IsDone(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_IsEmpty(self, *args)


    def IsRestriction(self, *args) -> "Standard_Boolean":
        """
        * returns true if edge <E> is found as same as the edge associated with a RESTRICTION line.
        	:param E:
        	:type E: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_IsRestriction(self, *args)


    def Lines(self, *args) -> "opencascade::handle< TopOpeBRep_HArray1OfLineInter >":
        """:rtype: opencascade::handle<TopOpeBRep_HArray1OfLineInter>"""
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Lines(self, *args)


    def MoreLine(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_MoreLine(self, *args)


    def NbLines(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_NbLines(self, *args)


    def NextLine(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_NextLine(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Computes the intersection of faces S1 and S2.
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None
        * Computes the intersection of faces S1 and S2.
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param B1:
        	:type B1: Bnd_Box
        	:param B2:
        	:type B2: Bnd_Box
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Perform(self, *args)


    def PrepareLines(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_PrepareLines(self, *args)


    def Restrictions(self, *args) -> "TopTools_IndexedMapOfShape const &":
        """
        * returns the map of edges found as TopeBRepBRep_RESTRICTION
        	:rtype: TopTools_IndexedMapOfShape
        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Restrictions(self, *args)


    def SameDomain(self, *args) -> "Standard_Boolean":
        """
        * Returns True if Perform() arguments are two faces with the same surface.
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_SameDomain(self, *args)


    def SurfacesSameOriented(self, *args) -> "Standard_Boolean":
        """
        * Returns True if Perform() arguments are two faces SameDomain() and normals on both side. Raise if SameDomain is False
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_SurfacesSameOriented(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_FacesIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FacesIntersector(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FacesIntersector
TopOpeBRep_FacesIntersector.ChangeLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_ChangeLine, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.CurrentLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_CurrentLine, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.CurrentLineIndex = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_CurrentLineIndex, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.Face = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_Face, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.ForceTolerances = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_ForceTolerances, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.GetTolerances = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_GetTolerances, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.InitLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_InitLine, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.IsDone = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_IsDone, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.IsEmpty = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_IsEmpty, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.IsRestriction = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_IsRestriction, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.Lines = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_Lines, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.MoreLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_MoreLine, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.NbLines = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_NbLines, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.NextLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_NextLine, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.Perform = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_Perform, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.PrepareLines = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_PrepareLines, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.Restrictions = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_Restrictions, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.SameDomain = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_SameDomain, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector.SurfacesSameOriented = new_instancemethod(_TopOpeBRep.TopOpeBRep_FacesIntersector_SurfacesSameOriented, None, TopOpeBRep_FacesIntersector)
TopOpeBRep_FacesIntersector_swigregister = _TopOpeBRep.TopOpeBRep_FacesIntersector_swigregister
TopOpeBRep_FacesIntersector_swigregister(TopOpeBRep_FacesIntersector)

class TopOpeBRep_GeomTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeBSpline1fromWALKING2d(*args) -> "opencascade::handle< Geom2d_Curve >":
        """
        :param L:
        	:type L: TopOpeBRep_LineInter
        	:param SI:
        	:type SI: int
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeBSpline1fromWALKING2d(*args)

    MakeBSpline1fromWALKING2d = staticmethod(MakeBSpline1fromWALKING2d)

    def MakeBSpline1fromWALKING3d(*args) -> "opencascade::handle< Geom_Curve >":
        """
        :param L:
        	:type L: TopOpeBRep_LineInter
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeBSpline1fromWALKING3d(*args)

    MakeBSpline1fromWALKING3d = staticmethod(MakeBSpline1fromWALKING3d)

    def MakeCurve(*args) -> "void":
        """
        :param min:
        	:type min: float
        	:param max:
        	:type max: float
        	:param L:
        	:type L: TopOpeBRep_LineInter
        	:param C:
        	:type C: Geom_Curve
        	:rtype: void
        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeCurve(*args)

    MakeCurve = staticmethod(MakeCurve)

    def MakeCurves(*args) -> "void":
        """
        * Make the DS curve <C> and the pcurves <PC1,PC2> from intersection line <L> lying on shapes <S1,S2>. <min,max> = <L> bounds
        	:param min:
        	:type min: float
        	:param max:
        	:type max: float
        	:param L:
        	:type L: TopOpeBRep_LineInter
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param C:
        	:type C: TopOpeBRepDS_Curve
        	:param PC1:
        	:type PC1: Geom2d_Curve
        	:param PC2:
        	:type PC2: Geom2d_Curve
        	:rtype: void
        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeCurves(*args)

    MakeCurves = staticmethod(MakeCurves)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRep.TopOpeBRep_GeomTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_GeomTool())
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_GeomTool
TopOpeBRep_GeomTool_swigregister = _TopOpeBRep.TopOpeBRep_GeomTool_swigregister
TopOpeBRep_GeomTool_swigregister(TopOpeBRep_GeomTool)

def TopOpeBRep_GeomTool_MakeBSpline1fromWALKING2d(*args) -> "opencascade::handle< Geom2d_Curve >":
    """
    :param L:
    	:type L: TopOpeBRep_LineInter
    	:param SI:
    	:type SI: int
    	:rtype: opencascade::handle<Geom2d_Curve>
    """
    return _TopOpeBRep.TopOpeBRep_GeomTool_MakeBSpline1fromWALKING2d(*args)

def TopOpeBRep_GeomTool_MakeBSpline1fromWALKING3d(*args) -> "opencascade::handle< Geom_Curve >":
    """
    :param L:
    	:type L: TopOpeBRep_LineInter
    	:rtype: opencascade::handle<Geom_Curve>
    """
    return _TopOpeBRep.TopOpeBRep_GeomTool_MakeBSpline1fromWALKING3d(*args)

def TopOpeBRep_GeomTool_MakeCurve(*args) -> "void":
    """
    :param min:
    	:type min: float
    	:param max:
    	:type max: float
    	:param L:
    	:type L: TopOpeBRep_LineInter
    	:param C:
    	:type C: Geom_Curve
    	:rtype: void
    """
    return _TopOpeBRep.TopOpeBRep_GeomTool_MakeCurve(*args)

def TopOpeBRep_GeomTool_MakeCurves(*args) -> "void":
    """
    * Make the DS curve <C> and the pcurves <PC1,PC2> from intersection line <L> lying on shapes <S1,S2>. <min,max> = <L> bounds
    	:param min:
    	:type min: float
    	:param max:
    	:type max: float
    	:param L:
    	:type L: TopOpeBRep_LineInter
    	:param S1:
    	:type S1: TopoDS_Shape
    	:param S2:
    	:type S2: TopoDS_Shape
    	:param C:
    	:type C: TopOpeBRepDS_Curve
    	:param PC1:
    	:type PC1: Geom2d_Curve
    	:param PC2:
    	:type PC2: Geom2d_Curve
    	:rtype: void
    """
    return _TopOpeBRep.TopOpeBRep_GeomTool_MakeCurves(*args)

class TopOpeBRep_Hctxee2d(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Curve(self, *args) -> "Geom2dAdaptor_Curve const &":
        """
        :param I:
        	:type I: int
        	:rtype: Geom2dAdaptor_Curve
        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_Curve(self, *args)


    def Domain(self, *args) -> "IntRes2d_Domain const &":
        """
        :param I:
        	:type I: int
        	:rtype: IntRes2d_Domain
        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_Domain(self, *args)


    def Edge(self, *args) -> "TopoDS_Shape const":
        """
        :param I:
        	:type I: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_Edge(self, *args)


    def SetEdges(self, *args) -> "void":
        """
        :param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:param BAS1:
        	:type BAS1: BRepAdaptor_Surface
        	:param BAS2:
        	:type BAS2: BRepAdaptor_Surface
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_SetEdges(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_Hctxee2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Hctxee2d(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_Hctxee2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Hctxee2d
TopOpeBRep_Hctxee2d.Curve = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxee2d_Curve, None, TopOpeBRep_Hctxee2d)
TopOpeBRep_Hctxee2d.Domain = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxee2d_Domain, None, TopOpeBRep_Hctxee2d)
TopOpeBRep_Hctxee2d.Edge = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxee2d_Edge, None, TopOpeBRep_Hctxee2d)
TopOpeBRep_Hctxee2d.SetEdges = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxee2d_SetEdges, None, TopOpeBRep_Hctxee2d)
TopOpeBRep_Hctxee2d_swigregister = _TopOpeBRep.TopOpeBRep_Hctxee2d_swigregister
TopOpeBRep_Hctxee2d_swigregister(TopOpeBRep_Hctxee2d)

class TopOpeBRep_Hctxff2d(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Face(self, *args) -> "TopoDS_Face const":
        """
        :param I:
        	:type I: int
        	:rtype: TopoDS_Face
        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_Face(self, *args)


    def FaceSameOrientedWithRef(self, *args) -> "Standard_Boolean":
        """
        :param I:
        	:type I: int
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_FaceSameOrientedWithRef(self, *args)


    def FacesSameOriented(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_FacesSameOriented(self, *args)


    def GetMaxTolerance(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_GetMaxTolerance(self, *args)


    def GetTolerances(self, *args) -> "void":
        """
        :param Tol1:
        	:type Tol1: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_GetTolerances(self, *args)


    def HSurface(self, *args) -> "opencascade::handle< BRepAdaptor_HSurface >":
        """
        :param I:
        	:type I: int
        	:rtype: opencascade::handle<BRepAdaptor_HSurface>
        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_HSurface(self, *args)


    def SetFaces(self, *args) -> "void":
        """
        :param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SetFaces(self, *args)


    def SetHSurfaces(self, *args) -> "void":
        """
        :param S1:
        	:type S1: BRepAdaptor_HSurface
        	:param S2:
        	:type S2: BRepAdaptor_HSurface
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SetHSurfaces(self, *args)


    def SetTolerances(self, *args) -> "void":
        """
        :param Tol1:
        	:type Tol1: float
        	:param Tol2:
        	:type Tol2: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SetTolerances(self, *args)


    def SurfacesSameOriented(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SurfacesSameOriented(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_Hctxff2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Hctxff2d(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_Hctxff2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Hctxff2d
TopOpeBRep_Hctxff2d.Face = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxff2d_Face, None, TopOpeBRep_Hctxff2d)
TopOpeBRep_Hctxff2d.FaceSameOrientedWithRef = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxff2d_FaceSameOrientedWithRef, None, TopOpeBRep_Hctxff2d)
TopOpeBRep_Hctxff2d.FacesSameOriented = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxff2d_FacesSameOriented, None, TopOpeBRep_Hctxff2d)
TopOpeBRep_Hctxff2d.GetMaxTolerance = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxff2d_GetMaxTolerance, None, TopOpeBRep_Hctxff2d)
TopOpeBRep_Hctxff2d.GetTolerances = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxff2d_GetTolerances, None, TopOpeBRep_Hctxff2d)
TopOpeBRep_Hctxff2d.HSurface = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxff2d_HSurface, None, TopOpeBRep_Hctxff2d)
TopOpeBRep_Hctxff2d.SetFaces = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxff2d_SetFaces, None, TopOpeBRep_Hctxff2d)
TopOpeBRep_Hctxff2d.SetHSurfaces = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxff2d_SetHSurfaces, None, TopOpeBRep_Hctxff2d)
TopOpeBRep_Hctxff2d.SetTolerances = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxff2d_SetTolerances, None, TopOpeBRep_Hctxff2d)
TopOpeBRep_Hctxff2d.SurfacesSameOriented = new_instancemethod(_TopOpeBRep.TopOpeBRep_Hctxff2d_SurfacesSameOriented, None, TopOpeBRep_Hctxff2d)
TopOpeBRep_Hctxff2d_swigregister = _TopOpeBRep.TopOpeBRep_Hctxff2d_swigregister
TopOpeBRep_Hctxff2d_swigregister(TopOpeBRep_Hctxff2d)

class TopOpeBRep_LineInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Arc(self, *args) -> "TopoDS_Shape const":
        """
        * returns the edge of a RESTRICTION line (or a null edge).
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Arc(self, *args)


    def ArcIsEdge(self, *args) -> "Standard_Boolean":
        """
        * returns true if Arc() edge (of a RESTRICTION line) is an edge of the original face <Index> (1 or 2).
        	:param I:
        	:type I: int
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_ArcIsEdge(self, *args)


    def Bounds(self, *args) -> "void":
        """
        :param f:
        	:type f: float
        	:param l:
        	:type l: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Bounds(self, *args)


    def ChangeVPoint(self, *args) -> "TopOpeBRep_VPointInter &":
        """
        :param I:
        	:type I: int
        	:rtype: TopOpeBRep_VPointInter
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_ChangeVPoint(self, *args)


    def ComputeFaceFaceTransition(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_LineInter_ComputeFaceFaceTransition(self, *args)


    def Curve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        :rtype: opencascade::handle<Geom_Curve>
        :param parmin:
        	:type parmin: float
        	:param parmax:
        	:type parmax: float
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Curve(self, *args)


    def DumpBipoint(self, *args) -> "void":
        """
        :param B:
        	:type B: TopOpeBRep_Bipoint
        	:param s1:
        	:type s1: TCollection_AsciiString
        	:param s2:
        	:type s2: TCollection_AsciiString
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpBipoint(self, *args)


    def DumpLineTransitionsToString(self) -> "std::string":
        """DumpLineTransitionsToString(TopOpeBRep_LineInter self) -> std::string"""
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpLineTransitionsToString(self)


    def DumpType(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpType(self, *args)


    def DumpVPoint(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:param s1:
        	:type s1: TCollection_AsciiString
        	:param s2:
        	:type s2: TCollection_AsciiString
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpVPoint(self, *args)


    def FaceFaceTransition(self, *args) -> "TopOpeBRepDS_Transition const &":
        """
        :param I:
        	:type I: int
        	:rtype: TopOpeBRepDS_Transition
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_FaceFaceTransition(self, *args)


    def GetTraceIndex(self, *args) -> "void":
        """
        :param exF1:
        	:type exF1: int
        	:param exF2:
        	:type exF2: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_GetTraceIndex(self, *args)


    def HasFirstPoint(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_LineInter_HasFirstPoint(self, *args)


    def HasLastPoint(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_LineInter_HasLastPoint(self, *args)


    def HasVInternal(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_LineInter_HasVInternal(self, *args)


    def HasVPonR(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_LineInter_HasVPonR(self, *args)


    def INL(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_LineInter_INL(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        :param I:
        	:type I: int
        	:rtype: None
        :rtype: int
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Index(self, *args)


    def IsPeriodic(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_LineInter_IsPeriodic(self, *args)


    def IsVClosed(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_LineInter_IsVClosed(self, *args)


    def LineG(self, *args) -> "opencascade::handle< IntPatch_GLine > const &":
        """:rtype: opencascade::handle<IntPatch_GLine>"""
        return _TopOpeBRep.TopOpeBRep_LineInter_LineG(self, *args)


    def LineR(self, *args) -> "opencascade::handle< IntPatch_RLine > const &":
        """:rtype: opencascade::handle<IntPatch_RLine>"""
        return _TopOpeBRep.TopOpeBRep_LineInter_LineR(self, *args)


    def LineW(self, *args) -> "opencascade::handle< IntPatch_WLine > const &":
        """:rtype: opencascade::handle<IntPatch_WLine>"""
        return _TopOpeBRep.TopOpeBRep_LineInter_LineW(self, *args)


    def NbVPoint(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_LineInter_NbVPoint(self, *args)


    def NbWPoint(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_LineInter_NbWPoint(self, *args)


    def OK(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_LineInter_OK(self, *args)


    def Period(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TopOpeBRep.TopOpeBRep_LineInter_Period(self, *args)


    def SetFaces(self, *args) -> "void":
        """
        :param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetFaces(self, *args)


    def SetHasVPonR(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_LineInter_SetHasVPonR(self, *args)


    def SetINL(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_LineInter_SetINL(self, *args)


    def SetIsVClosed(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_LineInter_SetIsVClosed(self, *args)


    def SetLine(self, *args) -> "void":
        """
        :param L:
        	:type L: IntPatch_Line
        	:param S1:
        	:type S1: BRepAdaptor_Surface
        	:param S2:
        	:type S2: BRepAdaptor_Surface
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetLine(self, *args)


    def SetOK(self, *args) -> "void":
        """
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetOK(self, *args)


    def SetTraceIndex(self, *args) -> "void":
        """
        :param exF1:
        	:type exF1: int
        	:param exF2:
        	:type exF2: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetTraceIndex(self, *args)


    def SetVPBounds(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_LineInter_SetVPBounds(self, *args)


    def SituationS1(self, *args) -> "IntSurf_Situation":
        """:rtype: IntSurf_Situation"""
        return _TopOpeBRep.TopOpeBRep_LineInter_SituationS1(self, *args)


    def SituationS2(self, *args) -> "IntSurf_Situation":
        """:rtype: IntSurf_Situation"""
        return _TopOpeBRep.TopOpeBRep_LineInter_SituationS2(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_LineInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_LineInter(*args))

    def TransitionOnS1(self, *args) -> "IntSurf_TypeTrans":
        """:rtype: IntSurf_TypeTrans"""
        return _TopOpeBRep.TopOpeBRep_LineInter_TransitionOnS1(self, *args)


    def TransitionOnS2(self, *args) -> "IntSurf_TypeTrans":
        """:rtype: IntSurf_TypeTrans"""
        return _TopOpeBRep.TopOpeBRep_LineInter_TransitionOnS2(self, *args)


    def TypeLineCurve(self, *args) -> "TopOpeBRep_TypeLineCurve":
        """:rtype: TopOpeBRep_TypeLineCurve"""
        return _TopOpeBRep.TopOpeBRep_LineInter_TypeLineCurve(self, *args)


    def VPBounds(self, *args) -> "void":
        """
        :param f:
        	:type f: int
        	:param l:
        	:type l: int
        	:param n:
        	:type n: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_VPBounds(self, *args)


    def VPoint(self, *args) -> "TopOpeBRep_VPointInter const &":
        """
        :param I:
        	:type I: int
        	:rtype: TopOpeBRep_VPointInter
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_VPoint(self, *args)


    def WPoint(self, *args) -> "TopOpeBRep_WPointInter const &":
        """
        :param I:
        	:type I: int
        	:rtype: TopOpeBRep_WPointInter
        """
        return _TopOpeBRep.TopOpeBRep_LineInter_WPoint(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_LineInter
TopOpeBRep_LineInter.Arc = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_Arc, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.ArcIsEdge = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_ArcIsEdge, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.Bounds = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_Bounds, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.ChangeVPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_ChangeVPoint, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.ComputeFaceFaceTransition = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_ComputeFaceFaceTransition, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.Curve = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_Curve, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.DumpBipoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_DumpBipoint, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.DumpLineTransitionsToString = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_DumpLineTransitionsToString, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.DumpType = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_DumpType, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.DumpVPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_DumpVPoint, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.FaceFaceTransition = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_FaceFaceTransition, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.GetTraceIndex = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_GetTraceIndex, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.HasFirstPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_HasFirstPoint, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.HasLastPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_HasLastPoint, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.HasVInternal = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_HasVInternal, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.HasVPonR = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_HasVPonR, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.INL = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_INL, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.Index = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_Index, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.IsPeriodic = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_IsPeriodic, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.IsVClosed = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_IsVClosed, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.LineG = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_LineG, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.LineR = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_LineR, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.LineW = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_LineW, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.NbVPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_NbVPoint, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.NbWPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_NbWPoint, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.OK = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_OK, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.Period = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_Period, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.SetFaces = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_SetFaces, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.SetHasVPonR = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_SetHasVPonR, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.SetINL = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_SetINL, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.SetIsVClosed = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_SetIsVClosed, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.SetLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_SetLine, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.SetOK = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_SetOK, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.SetTraceIndex = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_SetTraceIndex, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.SetVPBounds = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_SetVPBounds, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.SituationS1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_SituationS1, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.SituationS2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_SituationS2, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.TransitionOnS1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_TransitionOnS1, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.TransitionOnS2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_TransitionOnS2, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.TypeLineCurve = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_TypeLineCurve, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.VPBounds = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_VPBounds, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.VPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_VPoint, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter.WPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_LineInter_WPoint, None, TopOpeBRep_LineInter)
TopOpeBRep_LineInter_swigregister = _TopOpeBRep.TopOpeBRep_LineInter_swigregister
TopOpeBRep_LineInter_swigregister(TopOpeBRep_LineInter)

class TopOpeBRep_Point2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeTransition(self, *args) -> "TopOpeBRepDS_Transition &":
        """
        :param I:
        	:type I: int
        	:rtype: TopOpeBRepDS_Transition
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_ChangeTransition(self, *args)


    def Dump(self, *args) -> "void":
        """
        :param ie1: default value is 0
        	:type ie1: int
        	:param ie2: default value is 0
        	:type ie2: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Dump(self, *args)


    def EdgesConfig(self, *args) -> "TopOpeBRepDS_Config":
        """:rtype: TopOpeBRepDS_Config"""
        return _TopOpeBRep.TopOpeBRep_Point2d_EdgesConfig(self, *args)


    def HasPint(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_Point2d_HasPint(self, *args)


    def Hctxee2d(self, *args) -> "opencascade::handle< TopOpeBRep_Hctxee2d >":
        """:rtype: opencascade::handle<TopOpeBRep_Hctxee2d>"""
        return _TopOpeBRep.TopOpeBRep_Point2d_Hctxee2d(self, *args)


    def Hctxff2d(self, *args) -> "opencascade::handle< TopOpeBRep_Hctxff2d >":
        """:rtype: opencascade::handle<TopOpeBRep_Hctxff2d>"""
        return _TopOpeBRep.TopOpeBRep_Point2d_Hctxff2d(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_Point2d_Index(self, *args)


    def IsPointOfSegment(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_Point2d_IsPointOfSegment(self, *args)


    def IsVertex(self, *args) -> "Standard_Boolean":
        """
        :param I:
        	:type I: int
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_IsVertex(self, *args)


    def Keep(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_Point2d_Keep(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        :param I:
        	:type I: int
        	:rtype: float
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Parameter(self, *args)


    def Pint(self, *args) -> "IntRes2d_IntersectionPoint const &":
        """:rtype: IntRes2d_IntersectionPoint"""
        return _TopOpeBRep.TopOpeBRep_Point2d_Pint(self, *args)


    def SegmentAncestors(self, *args) -> "Standard_Boolean":
        """
        :param IP1:
        	:type IP1: int
        	:param IP2:
        	:type IP2: int
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SegmentAncestors(self, *args)


    def SetEdgesConfig(self, *args) -> "void":
        """
        :param C:
        	:type C: TopOpeBRepDS_Config
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetEdgesConfig(self, *args)


    def SetHctxee2d(self, *args) -> "void":
        """
        :param ee2d:
        	:type ee2d: TopOpeBRep_Hctxee2d
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetHctxee2d(self, *args)


    def SetHctxff2d(self, *args) -> "void":
        """
        :param ff2d:
        	:type ff2d: TopOpeBRep_Hctxff2d
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetHctxff2d(self, *args)


    def SetIndex(self, *args) -> "void":
        """
        :param X:
        	:type X: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetIndex(self, *args)


    def SetIsPointOfSegment(self, *args) -> "void":
        """
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetIsPointOfSegment(self, *args)


    def SetIsVertex(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:param B:
        	:type B: bool
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetIsVertex(self, *args)


    def SetKeep(self, *args) -> "void":
        """
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetKeep(self, *args)


    def SetParameter(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:param P:
        	:type P: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetParameter(self, *args)


    def SetPint(self, *args) -> "void":
        """
        :param P:
        	:type P: IntRes2d_IntersectionPoint
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetPint(self, *args)


    def SetSegmentAncestors(self, *args) -> "void":
        """
        :param IP1:
        	:type IP1: int
        	:param IP2:
        	:type IP2: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetSegmentAncestors(self, *args)


    def SetStatus(self, *args) -> "void":
        """
        :param S:
        	:type S: TopOpeBRep_P2Dstatus
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetStatus(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        :param T:
        	:type T: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetTolerance(self, *args)


    def SetTransition(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:param T:
        	:type T: TopOpeBRepDS_Transition
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetTransition(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetValue(self, *args)


    def SetValue2d(self, *args) -> "void":
        """
        :param P:
        	:type P: gp_Pnt2d
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetValue2d(self, *args)


    def SetVertex(self, *args) -> "void":
        """
        :param I:
        	:type I: int
        	:param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetVertex(self, *args)


    def Status(self, *args) -> "TopOpeBRep_P2Dstatus":
        """:rtype: TopOpeBRep_P2Dstatus"""
        return _TopOpeBRep.TopOpeBRep_Point2d_Status(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TopOpeBRep.TopOpeBRep_Point2d_Tolerance(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_Point2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Point2d(*args))

    def Transition(self, *args) -> "TopOpeBRepDS_Transition const &":
        """
        :param I:
        	:type I: int
        	:rtype: TopOpeBRepDS_Transition
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Transition(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """:rtype: gp_Pnt"""
        return _TopOpeBRep.TopOpeBRep_Point2d_Value(self, *args)


    def Value2d(self, *args) -> "gp_Pnt2d const":
        """:rtype: gp_Pnt2d"""
        return _TopOpeBRep.TopOpeBRep_Point2d_Value2d(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex const":
        """
        :param I:
        	:type I: int
        	:rtype: TopoDS_Vertex
        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Point2d
TopOpeBRep_Point2d.ChangeTransition = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_ChangeTransition, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Dump = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Dump, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.EdgesConfig = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_EdgesConfig, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.HasPint = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_HasPint, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Hctxee2d = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Hctxee2d, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Hctxff2d = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Hctxff2d, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Index = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Index, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.IsPointOfSegment = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_IsPointOfSegment, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.IsVertex = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_IsVertex, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Keep = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Keep, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Parameter = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Parameter, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Pint = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Pint, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SegmentAncestors = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SegmentAncestors, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetEdgesConfig = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetEdgesConfig, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetHctxee2d = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetHctxee2d, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetHctxff2d = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetHctxff2d, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetIndex = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetIndex, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetIsPointOfSegment = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetIsPointOfSegment, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetIsVertex = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetIsVertex, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetKeep = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetKeep, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetParameter = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetParameter, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetPint = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetPint, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetSegmentAncestors = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetSegmentAncestors, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetStatus = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetStatus, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetTolerance = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetTolerance, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetTransition = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetTransition, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetValue = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetValue, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetValue2d = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetValue2d, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.SetVertex = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_SetVertex, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Status = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Status, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Tolerance = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Tolerance, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Transition = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Transition, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Value = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Value, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Value2d = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Value2d, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d.Vertex = new_instancemethod(_TopOpeBRep.TopOpeBRep_Point2d_Vertex, None, TopOpeBRep_Point2d)
TopOpeBRep_Point2d_swigregister = _TopOpeBRep.TopOpeBRep_Point2d_swigregister
TopOpeBRep_Point2d_swigregister(TopOpeBRep_Point2d)

class TopOpeBRep_PointClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Classify(self, *args) -> "TopAbs_State":
        """
        * compute position of point <P> regarding with the face <F>.
        	:param F:
        	:type F: TopoDS_Face
        	:param P:
        	:type P: gp_Pnt2d
        	:param Tol:
        	:type Tol: float
        	:rtype: TopAbs_State
        """
        return _TopOpeBRep.TopOpeBRep_PointClassifier_Classify(self, *args)


    def Init(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_PointClassifier_Init(self, *args)


    def Load(self, *args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_PointClassifier_Load(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """:rtype: TopAbs_State"""
        return _TopOpeBRep.TopOpeBRep_PointClassifier_State(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_PointClassifier_swiginit(self, _TopOpeBRep.new_TopOpeBRep_PointClassifier(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_PointClassifier
TopOpeBRep_PointClassifier.Classify = new_instancemethod(_TopOpeBRep.TopOpeBRep_PointClassifier_Classify, None, TopOpeBRep_PointClassifier)
TopOpeBRep_PointClassifier.Init = new_instancemethod(_TopOpeBRep.TopOpeBRep_PointClassifier_Init, None, TopOpeBRep_PointClassifier)
TopOpeBRep_PointClassifier.Load = new_instancemethod(_TopOpeBRep.TopOpeBRep_PointClassifier_Load, None, TopOpeBRep_PointClassifier)
TopOpeBRep_PointClassifier.State = new_instancemethod(_TopOpeBRep.TopOpeBRep_PointClassifier_State, None, TopOpeBRep_PointClassifier)
TopOpeBRep_PointClassifier_swigregister = _TopOpeBRep.TopOpeBRep_PointClassifier_swigregister
TopOpeBRep_PointClassifier_swigregister(TopOpeBRep_PointClassifier)

class TopOpeBRep_PointGeomTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsEqual(*args) -> "Standard_Boolean":
        """
        :param DSP1:
        	:type DSP1: TopOpeBRepDS_Point
        	:param DSP2:
        	:type DSP2: TopOpeBRepDS_Point
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_PointGeomTool_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def MakePoint(*args) -> "TopOpeBRepDS_Point":
        """
        :param IP:
        	:type IP: TopOpeBRep_VPointInter
        	:rtype: TopOpeBRepDS_Point
        :param P2D:
        	:type P2D: TopOpeBRep_Point2d
        	:rtype: TopOpeBRepDS_Point
        :param FEI:
        	:type FEI: TopOpeBRep_FaceEdgeIntersector
        	:rtype: TopOpeBRepDS_Point
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: TopOpeBRepDS_Point
        """
        return _TopOpeBRep.TopOpeBRep_PointGeomTool_MakePoint(*args)

    MakePoint = staticmethod(MakePoint)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRep.TopOpeBRep_PointGeomTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_PointGeomTool())
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_PointGeomTool
TopOpeBRep_PointGeomTool_swigregister = _TopOpeBRep.TopOpeBRep_PointGeomTool_swigregister
TopOpeBRep_PointGeomTool_swigregister(TopOpeBRep_PointGeomTool)

def TopOpeBRep_PointGeomTool_IsEqual(*args) -> "Standard_Boolean":
    """
    :param DSP1:
    	:type DSP1: TopOpeBRepDS_Point
    	:param DSP2:
    	:type DSP2: TopOpeBRepDS_Point
    	:rtype: bool
    """
    return _TopOpeBRep.TopOpeBRep_PointGeomTool_IsEqual(*args)

def TopOpeBRep_PointGeomTool_MakePoint(*args) -> "TopOpeBRepDS_Point":
    """
    :param IP:
    	:type IP: TopOpeBRep_VPointInter
    	:rtype: TopOpeBRepDS_Point
    :param P2D:
    	:type P2D: TopOpeBRep_Point2d
    	:rtype: TopOpeBRepDS_Point
    :param FEI:
    	:type FEI: TopOpeBRep_FaceEdgeIntersector
    	:rtype: TopOpeBRepDS_Point
    :param S:
    	:type S: TopoDS_Shape
    	:rtype: TopOpeBRepDS_Point
    """
    return _TopOpeBRep.TopOpeBRep_PointGeomTool_MakePoint(*args)

class TopOpeBRep_ShapeIntersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeEdgesIntersector(self, *args) -> "TopOpeBRep_EdgesIntersector &":
        """
        * return the current intersection of two Edges.
        	:rtype: TopOpeBRep_EdgesIntersector
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeEdgesIntersector(self, *args)


    def ChangeFaceEdgeIntersector(self, *args) -> "TopOpeBRep_FaceEdgeIntersector &":
        """
        * return the current intersection of a Face and an Edge.
        	:rtype: TopOpeBRep_FaceEdgeIntersector
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeFaceEdgeIntersector(self, *args)


    def ChangeFacesIntersector(self, *args) -> "TopOpeBRep_FacesIntersector &":
        """
        * return the current intersection of two Faces.
        	:rtype: TopOpeBRep_FacesIntersector
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeFacesIntersector(self, *args)


    def CurrentGeomShape(self, *args) -> "TopoDS_Shape const":
        """
        * return geometric shape <Index> ( = 1 or 2 ) of current intersection.
        	:param Index:
        	:type Index: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_CurrentGeomShape(self, *args)


    def DumpCurrent(self, *args) -> "void":
        """
        :param K:
        	:type K: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_DumpCurrent(self, *args)


    def GetTolerances(self, *args) -> "void":
        """
        * return MAX of intersection tolerances with which FacesIntersector from TopOpeBRep was working.
        	:param tol1:
        	:type tol1: float
        	:param tol2:
        	:type tol2: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_GetTolerances(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        :param K:
        	:type K: int
        	:rtype: int
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_Index(self, *args)


    def InitIntersection(self, *args) -> "void":
        """
        * Initialize the intersection of shapes S1,S2.
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None
        * Initialize the intersection of shapes S1,S2.
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_InitIntersection(self, *args)


    def MoreIntersection(self, *args) -> "Standard_Boolean":
        """
        * returns True if there are more intersection between two the shapes.
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_MoreIntersection(self, *args)


    def NextIntersection(self, *args) -> "void":
        """
        * search for the next intersection between the two shapes.
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_NextIntersection(self, *args)


    def RejectedFaces(self, *args) -> "void":
        """
        :param anObj:
        	:type anObj: TopoDS_Shape
        	:param aReference:
        	:type aReference: TopoDS_Shape
        	:param aListOfShape:
        	:type aListOfShape: TopTools_ListOfShape
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_RejectedFaces(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * return the shape <Index> ( = 1 or 2) given to InitIntersection(). Index = 1 will return S1, Index = 2 will return S2.
        	:param Index:
        	:type Index: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_Shape(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_ShapeIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ShapeIntersector(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ShapeIntersector
TopOpeBRep_ShapeIntersector.ChangeEdgesIntersector = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeEdgesIntersector, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector.ChangeFaceEdgeIntersector = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeFaceEdgeIntersector, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector.ChangeFacesIntersector = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeFacesIntersector, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector.CurrentGeomShape = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_CurrentGeomShape, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector.DumpCurrent = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_DumpCurrent, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector.GetTolerances = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_GetTolerances, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector.Index = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_Index, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector.InitIntersection = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_InitIntersection, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector.MoreIntersection = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_MoreIntersection, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector.NextIntersection = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_NextIntersection, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector.RejectedFaces = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_RejectedFaces, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector.Shape = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector_Shape, None, TopOpeBRep_ShapeIntersector)
TopOpeBRep_ShapeIntersector_swigregister = _TopOpeBRep.TopOpeBRep_ShapeIntersector_swigregister
TopOpeBRep_ShapeIntersector_swigregister(TopOpeBRep_ShapeIntersector)

class TopOpeBRep_ShapeIntersector2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeEdgesIntersector(self, *args) -> "TopOpeBRep_EdgesIntersector &":
        """
        * return the current intersection of two Edges.
        	:rtype: TopOpeBRep_EdgesIntersector
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_ChangeEdgesIntersector(self, *args)


    def CurrentGeomShape(self, *args) -> "TopoDS_Shape const":
        """
        * return geometric shape <Index> ( = 1 or 2 ) of current intersection.
        	:param Index:
        	:type Index: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_CurrentGeomShape(self, *args)


    def DumpCurrent(self, *args) -> "void":
        """
        :param K:
        	:type K: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_DumpCurrent(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        :param K:
        	:type K: int
        	:rtype: int
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_Index(self, *args)


    def InitIntersection(self, *args) -> "void":
        """
        * Initialize the intersection of shapes S1,S2.
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_InitIntersection(self, *args)


    def MoreIntersection(self, *args) -> "Standard_Boolean":
        """
        * returns True if there are more intersection between two the shapes.
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_MoreIntersection(self, *args)


    def NextIntersection(self, *args) -> "void":
        """
        * search for the next intersection between the two shapes.
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_NextIntersection(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * return the shape <Index> ( = 1 or 2) given to InitIntersection(). Index = 1 will return S1, Index = 2 will return S2.
        	:param Index:
        	:type Index: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_Shape(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ShapeIntersector2d(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ShapeIntersector2d
TopOpeBRep_ShapeIntersector2d.ChangeEdgesIntersector = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector2d_ChangeEdgesIntersector, None, TopOpeBRep_ShapeIntersector2d)
TopOpeBRep_ShapeIntersector2d.CurrentGeomShape = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector2d_CurrentGeomShape, None, TopOpeBRep_ShapeIntersector2d)
TopOpeBRep_ShapeIntersector2d.DumpCurrent = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector2d_DumpCurrent, None, TopOpeBRep_ShapeIntersector2d)
TopOpeBRep_ShapeIntersector2d.Index = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector2d_Index, None, TopOpeBRep_ShapeIntersector2d)
TopOpeBRep_ShapeIntersector2d.InitIntersection = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector2d_InitIntersection, None, TopOpeBRep_ShapeIntersector2d)
TopOpeBRep_ShapeIntersector2d.MoreIntersection = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector2d_MoreIntersection, None, TopOpeBRep_ShapeIntersector2d)
TopOpeBRep_ShapeIntersector2d.NextIntersection = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector2d_NextIntersection, None, TopOpeBRep_ShapeIntersector2d)
TopOpeBRep_ShapeIntersector2d.Shape = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeIntersector2d_Shape, None, TopOpeBRep_ShapeIntersector2d)
TopOpeBRep_ShapeIntersector2d_swigregister = _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_swigregister
TopOpeBRep_ShapeIntersector2d_swigregister(TopOpeBRep_ShapeIntersector2d)

class TopOpeBRep_ShapeScanner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddBoxesMakeCOB(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param TS:
        	:type TS: TopAbs_ShapeEnum
        	:param TA: default value is TopAbs_SHAPE
        	:type TA: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_AddBoxesMakeCOB(self, *args)


    def BoxSort(self, *args) -> "TopOpeBRepTool_BoxSort const &":
        """:rtype: TopOpeBRepTool_BoxSort"""
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_BoxSort(self, *args)


    def ChangeBoxSort(self, *args) -> "TopOpeBRepTool_BoxSort &":
        """:rtype: TopOpeBRepTool_BoxSort"""
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_ChangeBoxSort(self, *args)


    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Clear(self, *args)


    def Current(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Current(self, *args)


    def DumpCurrentToString(self) -> "std::string":
        """DumpCurrentToString(TopOpeBRep_ShapeScanner self) -> std::string"""
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_DumpCurrentToString(self)


    def Index(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Index(self, *args)


    def Init(self, *args) -> "void":
        """
        :param E:
        	:type E: TopoDS_Shape
        	:rtype: None
        :param X:
        	:type X: TopOpeBRepTool_ShapeExplorer
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_More(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Next(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_ShapeScanner_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ShapeScanner(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ShapeScanner
TopOpeBRep_ShapeScanner.AddBoxesMakeCOB = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeScanner_AddBoxesMakeCOB, None, TopOpeBRep_ShapeScanner)
TopOpeBRep_ShapeScanner.BoxSort = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeScanner_BoxSort, None, TopOpeBRep_ShapeScanner)
TopOpeBRep_ShapeScanner.ChangeBoxSort = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeScanner_ChangeBoxSort, None, TopOpeBRep_ShapeScanner)
TopOpeBRep_ShapeScanner.Clear = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeScanner_Clear, None, TopOpeBRep_ShapeScanner)
TopOpeBRep_ShapeScanner.Current = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeScanner_Current, None, TopOpeBRep_ShapeScanner)
TopOpeBRep_ShapeScanner.DumpCurrentToString = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeScanner_DumpCurrentToString, None, TopOpeBRep_ShapeScanner)
TopOpeBRep_ShapeScanner.Index = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeScanner_Index, None, TopOpeBRep_ShapeScanner)
TopOpeBRep_ShapeScanner.Init = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeScanner_Init, None, TopOpeBRep_ShapeScanner)
TopOpeBRep_ShapeScanner.More = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeScanner_More, None, TopOpeBRep_ShapeScanner)
TopOpeBRep_ShapeScanner.Next = new_instancemethod(_TopOpeBRep.TopOpeBRep_ShapeScanner_Next, None, TopOpeBRep_ShapeScanner)
TopOpeBRep_ShapeScanner_swigregister = _TopOpeBRep.TopOpeBRep_ShapeScanner_swigregister
TopOpeBRep_ShapeScanner_swigregister(TopOpeBRep_ShapeScanner)

class TopOpeBRep_VPointInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ArcOnS1(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_ArcOnS1(self, *args)


    def ArcOnS2(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_ArcOnS2(self, *args)


    def ChangeKeep(self, *args) -> "void":
        """
        * updates VPointInter flag 'keep' with <keep>.
        	:param keep:
        	:type keep: bool
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ChangeKeep(self, *args)


    def Dump(self, *args) -> "Standard_OStream &":
        """
        :param I:
        	:type I: int
        	:param F:
        	:type F: TopoDS_Face
        	:param OS:
        	:type OS: Standard_OStream
        	:rtype: Standard_OStream
        :param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:param OS:
        	:type OS: Standard_OStream
        	:rtype: Standard_OStream
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Dump(self, *args)


    def Edge(self, *args) -> "TopoDS_Shape const":
        """
        * get the edge of shape I (1,2) containing the point. Returned shape is null if the VPoint is not on an edge of shape I (1,2).
        	:param I:
        	:type I: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Edge(self, *args)


    def EdgeON(self, *args) -> "TopoDS_Shape const":
        """
        * set the shape Eon of shape I (1,2) containing the point, and parameter <Par> of point on <Eon>.
        	:param Eon:
        	:type Eon: TopoDS_Shape
        	:param Par:
        	:type Par: float
        	:param I:
        	:type I: int
        	:rtype: None
        * get the edge of shape I (1,2) containing the point.
        	:param I:
        	:type I: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EdgeON(self, *args)


    def EdgeONParameter(self, *args) -> "Standard_Real":
        """
        * get the parameter on edge of shape I (1,2) containing the point.
        	:param I:
        	:type I: int
        	:rtype: float
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EdgeONParameter(self, *args)


    def EdgeParameter(self, *args) -> "Standard_Real":
        """
        * get the parameter on edge of shape I (1,2) containing the point
        	:param I:
        	:type I: int
        	:rtype: float
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EdgeParameter(self, *args)


    def EqualpP(self, *args) -> "Standard_Boolean":
        """
        * returns <True> if the 3d points and the parameters of the VPoints are same
        	:param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EqualpP(self, *args)


    def GetShapes(self, *args) -> "void":
        """
        :param I1:
        	:type I1: int
        	:param I2:
        	:type I2: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_GetShapes(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        :param I:
        	:type I: int
        	:rtype: None
        :rtype: int
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Index(self, *args)


    def IsInternal(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsInternal(self, *args)


    def IsMultiple(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the point belongs to several intersection lines.
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsMultiple(self, *args)


    def IsOnDomS1(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsOnDomS1(self, *args)


    def IsOnDomS2(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsOnDomS2(self, *args)


    def IsVertex(self, *args) -> "Standard_Boolean":
        """
        :param I:
        	:type I: int
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsVertex(self, *args)


    def IsVertexOnS1(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the point is a vertex on the initial restriction facet of the first surface.
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsVertexOnS1(self, *args)


    def IsVertexOnS2(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the point is a vertex on the initial restriction facet of the second surface.
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsVertexOnS2(self, *args)


    def Keep(self, *args) -> "Standard_Boolean":
        """
        * Returns value of myKeep (does not evaluate states) False at creation of VPoint. Updated by State(State from TopAbs,Integer from Standard)
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Keep(self, *args)


    def PThePointOfIntersectionDummy(self, *args) -> "TopOpeBRep_PThePointOfIntersection":
        """:rtype: TopOpeBRep_PThePointOfIntersection"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_PThePointOfIntersectionDummy(self, *args)


    def ParameterOnArc1(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnArc1(self, *args)


    def ParameterOnArc2(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnArc2(self, *args)


    def ParameterOnLine(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnLine(self, *args)


    def ParametersOnS1(self, *args) -> "void":
        """
        :param u:
        	:type u: float
        	:param v:
        	:type v: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParametersOnS1(self, *args)


    def ParametersOnS2(self, *args) -> "void":
        """
        :param u:
        	:type u: float
        	:param v:
        	:type v: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParametersOnS2(self, *args)


    def ParonE(self, *args) -> "Standard_Boolean":
        """
        * returns <false> if the vpoint is not given on arc <E>, else returns <par> parameter on <E>
        	:param E:
        	:type E: TopoDS_Edge
        	:param par:
        	:type par: float
        	:rtype: bool
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParonE(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        :param P:
        	:type P: IntPatch_Point
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_SetPoint(self, *args)


    def SetShapes(self, *args) -> "void":
        """
        :param I1:
        	:type I1: int
        	:param I2:
        	:type I2: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_SetShapes(self, *args)


    def ShapeIndex(self, *args) -> "void":
        """
        * returns value of filed myShapeIndex = 0,1,2,3 0 means the VPoint is on no restriction 1 means the VPoint is on the restriction 1 2 means the VPoint is on the restriction 2 3 means the VPoint is on the restrictions 1 and 2
        	:rtype: int
        * set value of shape supporting me (0,1,2,3).
        	:param I:
        	:type I: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ShapeIndex(self, *args)


    def State(self, *args) -> "void":
        """
        * get state of VPoint within the domain of geometric shape domain <I> (= 1 or 2).
        	:param I:
        	:type I: int
        	:rtype: TopAbs_State
        * Set the state of VPoint within the domain of the geometric shape <I> (= 1 or 2).
        	:param S:
        	:type S: TopAbs_State
        	:param I:
        	:type I: int
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_State(self, *args)


    def SurfaceParameters(self, *args) -> "gp_Pnt2d":
        """
        * get the parameter on surface of shape I (1,2) containing the point
        	:param I:
        	:type I: int
        	:rtype: gp_Pnt2d
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_SurfaceParameters(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_Tolerance(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_VPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_VPointInter(*args))

    def TransitionLineArc1(self, *args) -> "IntSurf_Transition":
        """:rtype: IntSurf_Transition"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionLineArc1(self, *args)


    def TransitionLineArc2(self, *args) -> "IntSurf_Transition":
        """:rtype: IntSurf_Transition"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionLineArc2(self, *args)


    def TransitionOnS1(self, *args) -> "IntSurf_Transition":
        """:rtype: IntSurf_Transition"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionOnS1(self, *args)


    def TransitionOnS2(self, *args) -> "IntSurf_Transition":
        """:rtype: IntSurf_Transition"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionOnS2(self, *args)


    def UpdateKeep(self, *args) -> "void":
        """
        * set myKeep value according to current states.
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_UpdateKeep(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """:rtype: gp_Pnt"""
        return _TopOpeBRep.TopOpeBRep_VPointInter_Value(self, *args)


    def Vertex(self, *args) -> "TopoDS_Shape const":
        """
        :param I:
        	:type I: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Vertex(self, *args)


    def VertexOnS1(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the information about the point when it is on the domain of the first patch, i-e when the function IsVertexOnS1 returns True. Otherwise, an exception is raised.
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_VertexOnS1(self, *args)


    def VertexOnS2(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the information about the point when it is on the domain of the second patch, i-e when the function IsVertexOnS2 returns True. Otherwise, an exception is raised.
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_VertexOnS2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_VPointInter
TopOpeBRep_VPointInter.ArcOnS1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_ArcOnS1, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.ArcOnS2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_ArcOnS2, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.ChangeKeep = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_ChangeKeep, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.Dump = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_Dump, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.Edge = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_Edge, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.EdgeON = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_EdgeON, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.EdgeONParameter = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_EdgeONParameter, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.EdgeParameter = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_EdgeParameter, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.EqualpP = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_EqualpP, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.GetShapes = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_GetShapes, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.Index = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_Index, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.IsInternal = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_IsInternal, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.IsMultiple = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_IsMultiple, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.IsOnDomS1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_IsOnDomS1, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.IsOnDomS2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_IsOnDomS2, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.IsVertex = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_IsVertex, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.IsVertexOnS1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_IsVertexOnS1, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.IsVertexOnS2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_IsVertexOnS2, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.Keep = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_Keep, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.PThePointOfIntersectionDummy = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_PThePointOfIntersectionDummy, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.ParameterOnArc1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnArc1, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.ParameterOnArc2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnArc2, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.ParameterOnLine = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnLine, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.ParametersOnS1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_ParametersOnS1, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.ParametersOnS2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_ParametersOnS2, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.ParonE = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_ParonE, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.SetPoint = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_SetPoint, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.SetShapes = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_SetShapes, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.ShapeIndex = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_ShapeIndex, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.State = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_State, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.SurfaceParameters = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_SurfaceParameters, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.Tolerance = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_Tolerance, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.TransitionLineArc1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_TransitionLineArc1, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.TransitionLineArc2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_TransitionLineArc2, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.TransitionOnS1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_TransitionOnS1, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.TransitionOnS2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_TransitionOnS2, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.UpdateKeep = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_UpdateKeep, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.Value = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_Value, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.Vertex = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_Vertex, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.VertexOnS1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_VertexOnS1, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter.VertexOnS2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInter_VertexOnS2, None, TopOpeBRep_VPointInter)
TopOpeBRep_VPointInter_swigregister = _TopOpeBRep.TopOpeBRep_VPointInter_swigregister
TopOpeBRep_VPointInter_swigregister(TopOpeBRep_VPointInter)

class TopOpeBRep_VPointInterClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Edge(self, *args) -> "TopoDS_Shape const":
        """
        * returns the edge containing the VPoint <VP> used in the last VPointPosition() call. Edge is defined if the state previously computed is ON, else Edge is a null shape.
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRep.TopOpeBRep_VPointInterClassifier_Edge(self, *args)


    def EdgeParameter(self, *args) -> "Standard_Real":
        """
        * returns the parameter of the VPoint <VP> on Edge()
        	:rtype: float
        """
        return _TopOpeBRep.TopOpeBRep_VPointInterClassifier_EdgeParameter(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_VPointInterClassifier_swiginit(self, _TopOpeBRep.new_TopOpeBRep_VPointInterClassifier(*args))

    def VPointPosition(self, *args) -> "TopAbs_State":
        """
        * compute position of VPoint <VP> regarding with face <F>. <ShapeIndex> (= 1,2) indicates which (u,v) point of <VP> is used. when state is ON, set VP.EdgeON() with the edge containing <VP> and associated parameter. returns state of VP on ShapeIndex.
        	:param F:
        	:type F: TopoDS_Shape
        	:param VP:
        	:type VP: TopOpeBRep_VPointInter
        	:param ShapeIndex:
        	:type ShapeIndex: int
        	:param PC:
        	:type PC: TopOpeBRep_PointClassifier
        	:param AssumeINON:
        	:type AssumeINON: bool
        	:param Tol:
        	:type Tol: float
        	:rtype: TopAbs_State
        """
        return _TopOpeBRep.TopOpeBRep_VPointInterClassifier_VPointPosition(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_VPointInterClassifier
TopOpeBRep_VPointInterClassifier.Edge = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInterClassifier_Edge, None, TopOpeBRep_VPointInterClassifier)
TopOpeBRep_VPointInterClassifier.EdgeParameter = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInterClassifier_EdgeParameter, None, TopOpeBRep_VPointInterClassifier)
TopOpeBRep_VPointInterClassifier.VPointPosition = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInterClassifier_VPointPosition, None, TopOpeBRep_VPointInterClassifier)
TopOpeBRep_VPointInterClassifier_swigregister = _TopOpeBRep.TopOpeBRep_VPointInterClassifier_swigregister
TopOpeBRep_VPointInterClassifier_swigregister(TopOpeBRep_VPointInterClassifier)

class TopOpeBRep_VPointInterIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeCurrentVP(self, *args) -> "TopOpeBRep_VPointInter &":
        """:rtype: TopOpeBRep_VPointInter"""
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_ChangeCurrentVP(self, *args)


    def CurrentVP(self, *args) -> "TopOpeBRep_VPointInter const &":
        """:rtype: TopOpeBRep_VPointInter"""
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_CurrentVP(self, *args)


    def CurrentVPIndex(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_CurrentVPIndex(self, *args)


    def Init(self, *args) -> "void":
        """
        :param LI:
        	:type LI: TopOpeBRep_LineInter
        	:param checkkeep: default value is Standard_False
        	:type checkkeep: bool
        	:rtype: None
        :rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_Next(self, *args)


    def PLineInterDummy(self, *args) -> "TopOpeBRep_PLineInter":
        """:rtype: TopOpeBRep_PLineInter"""
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_PLineInterDummy(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param LI:
        	:type LI: TopOpeBRep_LineInter
        	:rtype: None
        """
        _TopOpeBRep.TopOpeBRep_VPointInterIterator_swiginit(self, _TopOpeBRep.new_TopOpeBRep_VPointInterIterator(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_VPointInterIterator
TopOpeBRep_VPointInterIterator.ChangeCurrentVP = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInterIterator_ChangeCurrentVP, None, TopOpeBRep_VPointInterIterator)
TopOpeBRep_VPointInterIterator.CurrentVP = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInterIterator_CurrentVP, None, TopOpeBRep_VPointInterIterator)
TopOpeBRep_VPointInterIterator.CurrentVPIndex = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInterIterator_CurrentVPIndex, None, TopOpeBRep_VPointInterIterator)
TopOpeBRep_VPointInterIterator.Init = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInterIterator_Init, None, TopOpeBRep_VPointInterIterator)
TopOpeBRep_VPointInterIterator.More = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInterIterator_More, None, TopOpeBRep_VPointInterIterator)
TopOpeBRep_VPointInterIterator.Next = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInterIterator_Next, None, TopOpeBRep_VPointInterIterator)
TopOpeBRep_VPointInterIterator.PLineInterDummy = new_instancemethod(_TopOpeBRep.TopOpeBRep_VPointInterIterator_PLineInterDummy, None, TopOpeBRep_VPointInterIterator)
TopOpeBRep_VPointInterIterator_swigregister = _TopOpeBRep.TopOpeBRep_VPointInterIterator_swigregister
TopOpeBRep_VPointInterIterator_swigregister(TopOpeBRep_VPointInterIterator)

class TopOpeBRep_WPointInter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def PPntOn2SDummy(self, *args) -> "TopOpeBRep_PPntOn2S":
        """:rtype: TopOpeBRep_PPntOn2S"""
        return _TopOpeBRep.TopOpeBRep_WPointInter_PPntOn2SDummy(self, *args)


    def Parameters(self, *args) -> "void":
        """
        :param U1:
        	:type U1: float
        	:param V1:
        	:type V1: float
        	:param U2:
        	:type U2: float
        	:param V2:
        	:type V2: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_Parameters(self, *args)


    def ParametersOnS1(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_ParametersOnS1(self, *args)


    def ParametersOnS2(self, *args) -> "void":
        """
        :param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_ParametersOnS2(self, *args)


    def Set(self, *args) -> "void":
        """
        :param P:
        	:type P: IntSurf_PntOn2S
        	:rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_Set(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRep.TopOpeBRep_WPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_WPointInter(*args))

    def Value(self, *args) -> "gp_Pnt const":
        """:rtype: gp_Pnt"""
        return _TopOpeBRep.TopOpeBRep_WPointInter_Value(self, *args)


    def ValueOnS1(self, *args) -> "gp_Pnt2d":
        """:rtype: gp_Pnt2d"""
        return _TopOpeBRep.TopOpeBRep_WPointInter_ValueOnS1(self, *args)


    def ValueOnS2(self, *args) -> "gp_Pnt2d":
        """:rtype: gp_Pnt2d"""
        return _TopOpeBRep.TopOpeBRep_WPointInter_ValueOnS2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_WPointInter
TopOpeBRep_WPointInter.PPntOn2SDummy = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInter_PPntOn2SDummy, None, TopOpeBRep_WPointInter)
TopOpeBRep_WPointInter.Parameters = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInter_Parameters, None, TopOpeBRep_WPointInter)
TopOpeBRep_WPointInter.ParametersOnS1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInter_ParametersOnS1, None, TopOpeBRep_WPointInter)
TopOpeBRep_WPointInter.ParametersOnS2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInter_ParametersOnS2, None, TopOpeBRep_WPointInter)
TopOpeBRep_WPointInter.Set = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInter_Set, None, TopOpeBRep_WPointInter)
TopOpeBRep_WPointInter.Value = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInter_Value, None, TopOpeBRep_WPointInter)
TopOpeBRep_WPointInter.ValueOnS1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInter_ValueOnS1, None, TopOpeBRep_WPointInter)
TopOpeBRep_WPointInter.ValueOnS2 = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInter_ValueOnS2, None, TopOpeBRep_WPointInter)
TopOpeBRep_WPointInter_swigregister = _TopOpeBRep.TopOpeBRep_WPointInter_swigregister
TopOpeBRep_WPointInter_swigregister(TopOpeBRep_WPointInter)

class TopOpeBRep_WPointInterIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurrentWP(self, *args) -> "TopOpeBRep_WPointInter const &":
        """:rtype: TopOpeBRep_WPointInter"""
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_CurrentWP(self, *args)


    def Init(self, *args) -> "void":
        """
        :param LI:
        	:type LI: TopOpeBRep_LineInter
        	:rtype: None
        :rtype: None
        """
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_Next(self, *args)


    def PLineInterDummy(self, *args) -> "TopOpeBRep_PLineInter":
        """:rtype: TopOpeBRep_PLineInter"""
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_PLineInterDummy(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param LI:
        	:type LI: TopOpeBRep_LineInter
        	:rtype: None
        """
        _TopOpeBRep.TopOpeBRep_WPointInterIterator_swiginit(self, _TopOpeBRep.new_TopOpeBRep_WPointInterIterator(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_WPointInterIterator
TopOpeBRep_WPointInterIterator.CurrentWP = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInterIterator_CurrentWP, None, TopOpeBRep_WPointInterIterator)
TopOpeBRep_WPointInterIterator.Init = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInterIterator_Init, None, TopOpeBRep_WPointInterIterator)
TopOpeBRep_WPointInterIterator.More = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInterIterator_More, None, TopOpeBRep_WPointInterIterator)
TopOpeBRep_WPointInterIterator.Next = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInterIterator_Next, None, TopOpeBRep_WPointInterIterator)
TopOpeBRep_WPointInterIterator.PLineInterDummy = new_instancemethod(_TopOpeBRep.TopOpeBRep_WPointInterIterator_PLineInterDummy, None, TopOpeBRep_WPointInterIterator)
TopOpeBRep_WPointInterIterator_swigregister = _TopOpeBRep.TopOpeBRep_WPointInterIterator_swigregister
TopOpeBRep_WPointInterIterator_swigregister(TopOpeBRep_WPointInterIterator)

class TopOpeBRep_HArray1OfVPointInter(TopOpeBRep_Array1OfVPointInter, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_HArray1OfVPointInter(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_HArray1OfVPointInter_DownCast(t)

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_HArray1OfVPointInter
TopOpeBRep_HArray1OfVPointInter.Array1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_Array1, None, TopOpeBRep_HArray1OfVPointInter)
TopOpeBRep_HArray1OfVPointInter.ChangeArray1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_ChangeArray1, None, TopOpeBRep_HArray1OfVPointInter)
TopOpeBRep_HArray1OfVPointInter_swigregister = _TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_swigregister
TopOpeBRep_HArray1OfVPointInter_swigregister(TopOpeBRep_HArray1OfVPointInter)

class TopOpeBRep_HArray1OfLineInter(TopOpeBRep_Array1OfLineInter, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_HArray1OfLineInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_HArray1OfLineInter(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_HArray1OfLineInter_DownCast(t)

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_HArray1OfLineInter
TopOpeBRep_HArray1OfLineInter.Array1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_HArray1OfLineInter_Array1, None, TopOpeBRep_HArray1OfLineInter)
TopOpeBRep_HArray1OfLineInter.ChangeArray1 = new_instancemethod(_TopOpeBRep.TopOpeBRep_HArray1OfLineInter_ChangeArray1, None, TopOpeBRep_HArray1OfLineInter)
TopOpeBRep_HArray1OfLineInter_swigregister = _TopOpeBRep.TopOpeBRep_HArray1OfLineInter_swigregister
TopOpeBRep_HArray1OfLineInter_swigregister(TopOpeBRep_HArray1OfLineInter)



