# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopOpeBRepTool module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_topopebreptool.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TopOpeBRepTool.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopOpeBRepTool')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopOpeBRepTool')
    _TopOpeBRepTool = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopOpeBRepTool', [dirname(__file__)])
        except ImportError:
            import _TopOpeBRepTool
            return _TopOpeBRepTool
        try:
            _mod = imp.load_module('_TopOpeBRepTool', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopOpeBRepTool = swig_import_helper()
    del swig_import_helper
else:
    import _TopOpeBRepTool
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopOpeBRepTool.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TopOpeBRepTool.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TopOpeBRepTool.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TopOpeBRepTool.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TopOpeBRepTool.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TopOpeBRepTool.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TopOpeBRepTool.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TopOpeBRepTool.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TopOpeBRepTool.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TopOpeBRepTool.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TopOpeBRepTool.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TopOpeBRepTool.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TopOpeBRepTool.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TopOpeBRepTool.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TopOpeBRepTool.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TopOpeBRepTool.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TopOpeBRepTool.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TopOpeBRepTool.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopOpeBRepTool.process_exception(error, method_name, class_name)
process_exception = _TopOpeBRepTool.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TCollection
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
import OCC.Core.IntCurvesFace
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.TopExp
import OCC.Core.Extrema
TopOpeBRepTool_BSPLINE1 = _TopOpeBRepTool.TopOpeBRepTool_BSPLINE1
TopOpeBRepTool_APPROX = _TopOpeBRepTool.TopOpeBRepTool_APPROX
TopOpeBRepTool_INTERPOL = _TopOpeBRepTool.TopOpeBRepTool_INTERPOL

def Handle_TopOpeBRepTool_HBoxTool_Create() -> "opencascade::handle< TopOpeBRepTool_HBoxTool >":
    return _TopOpeBRepTool.Handle_TopOpeBRepTool_HBoxTool_Create()
Handle_TopOpeBRepTool_HBoxTool_Create = _TopOpeBRepTool.Handle_TopOpeBRepTool_HBoxTool_Create

def Handle_TopOpeBRepTool_HBoxTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopOpeBRepTool_HBoxTool >":
    return _TopOpeBRepTool.Handle_TopOpeBRepTool_HBoxTool_DownCast(t)
Handle_TopOpeBRepTool_HBoxTool_DownCast = _TopOpeBRepTool.Handle_TopOpeBRepTool_HBoxTool_DownCast

def Handle_TopOpeBRepTool_HBoxTool_IsNull(t: 'opencascade::handle< TopOpeBRepTool_HBoxTool > const &') -> "bool":
    return _TopOpeBRepTool.Handle_TopOpeBRepTool_HBoxTool_IsNull(t)
Handle_TopOpeBRepTool_HBoxTool_IsNull = _TopOpeBRepTool.Handle_TopOpeBRepTool_HBoxTool_IsNull
class TopOpeBRepTool_IndexedDataMapOfShapeconnexity(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_IndexedDataMapOfShapeconnexity(*args))
    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_IndexedDataMapOfShapeconnexity
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.begin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_begin, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.end = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_end, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.cbegin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_cbegin, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.cend = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_cend, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.Exchange = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_Exchange, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.Assign = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_Assign, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.Set = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_Set, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.ReSize = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_ReSize, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.Add = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_Add, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.Contains = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_Contains, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.Substitute = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_Substitute, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.Swap = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_Swap, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.RemoveLast = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_RemoveLast, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.RemoveFromIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_RemoveFromIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.RemoveKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_RemoveKey, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.FindKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_FindKey, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.FindFromIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_FindFromIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.ChangeFromIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_ChangeFromIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.__call__ = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity___call__, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.FindIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_FindIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.ChangeFromKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_ChangeFromKey, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.Seek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_Seek, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.ChangeSeek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_ChangeSeek, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.FindFromKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_FindFromKey, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.Clear = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_Clear, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity.Size = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_Size, None, TopOpeBRepTool_IndexedDataMapOfShapeconnexity)
TopOpeBRepTool_IndexedDataMapOfShapeconnexity_swigregister = _TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeconnexity_swigregister
TopOpeBRepTool_IndexedDataMapOfShapeconnexity_swigregister(TopOpeBRepTool_IndexedDataMapOfShapeconnexity)

class TopOpeBRepTool_DataMapOfShapeface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_DataMapOfShapeface(*args))
    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_DataMapOfShapeface
TopOpeBRepTool_DataMapOfShapeface.begin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_begin, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.end = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_end, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.cbegin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_cbegin, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.cend = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_cend, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.Exchange = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_Exchange, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.Assign = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_Assign, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.Set = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_Set, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.ReSize = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_ReSize, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.Bind = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_Bind, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.Bound = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_Bound, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.IsBound = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_IsBound, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.UnBind = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_UnBind, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.Seek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_Seek, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.Find = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_Find, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.ChangeSeek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_ChangeSeek, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.ChangeFind = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_ChangeFind, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.__call__ = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface___call__, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.Clear = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_Clear, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface.Size = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_Size, None, TopOpeBRepTool_DataMapOfShapeface)
TopOpeBRepTool_DataMapOfShapeface_swigregister = _TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeface_swigregister
TopOpeBRepTool_DataMapOfShapeface_swigregister(TopOpeBRepTool_DataMapOfShapeface)

class TopOpeBRepTool_DataMapOfOrientedShapeC2DF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_DataMapOfOrientedShapeC2DF(*args))
    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_DataMapOfOrientedShapeC2DF
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.begin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_begin, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.end = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_end, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.cbegin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_cbegin, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.cend = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_cend, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.Exchange = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_Exchange, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.Assign = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_Assign, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.Set = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_Set, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.ReSize = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_ReSize, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.Bind = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_Bind, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.Bound = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_Bound, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.IsBound = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_IsBound, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.UnBind = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_UnBind, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.Seek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_Seek, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.Find = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_Find, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.ChangeSeek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_ChangeSeek, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.ChangeFind = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_ChangeFind, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.__call__ = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF___call__, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.Clear = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_Clear, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF.Size = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_Size, None, TopOpeBRepTool_DataMapOfOrientedShapeC2DF)
TopOpeBRepTool_DataMapOfOrientedShapeC2DF_swigregister = _TopOpeBRepTool.TopOpeBRepTool_DataMapOfOrientedShapeC2DF_swigregister
TopOpeBRepTool_DataMapOfOrientedShapeC2DF_swigregister(TopOpeBRepTool_DataMapOfOrientedShapeC2DF)

class TopOpeBRepTool_DataMapOfShapeListOfC2DF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_DataMapOfShapeListOfC2DF(*args))
    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_DataMapOfShapeListOfC2DF
TopOpeBRepTool_DataMapOfShapeListOfC2DF.begin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_begin, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.end = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_end, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.cbegin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_cbegin, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.cend = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_cend, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.Exchange = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_Exchange, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.Assign = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_Assign, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.Set = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_Set, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.ReSize = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_ReSize, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.Bind = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_Bind, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.Bound = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_Bound, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.IsBound = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_IsBound, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.UnBind = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_UnBind, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.Seek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_Seek, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.Find = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_Find, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.ChangeSeek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_ChangeSeek, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.ChangeFind = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_ChangeFind, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.__call__ = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF___call__, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.Clear = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_Clear, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF.Size = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_Size, None, TopOpeBRepTool_DataMapOfShapeListOfC2DF)
TopOpeBRepTool_DataMapOfShapeListOfC2DF_swigregister = _TopOpeBRepTool.TopOpeBRepTool_DataMapOfShapeListOfC2DF_swigregister
TopOpeBRepTool_DataMapOfShapeListOfC2DF_swigregister(TopOpeBRepTool_DataMapOfShapeListOfC2DF)

class TopOpeBRepTool_IndexedDataMapOfShapeBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_IndexedDataMapOfShapeBox(*args))
    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_IndexedDataMapOfShapeBox
TopOpeBRepTool_IndexedDataMapOfShapeBox.begin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_begin, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.end = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_end, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.cbegin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_cbegin, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.cend = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_cend, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.Exchange = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_Exchange, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.Assign = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_Assign, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.Set = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_Set, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.ReSize = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_ReSize, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.Add = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_Add, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.Contains = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_Contains, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.Substitute = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_Substitute, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.Swap = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_Swap, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.RemoveLast = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_RemoveLast, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.RemoveFromIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_RemoveFromIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.RemoveKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_RemoveKey, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.FindKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_FindKey, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.FindFromIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_FindFromIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.ChangeFromIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_ChangeFromIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.__call__ = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox___call__, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.FindIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_FindIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.ChangeFromKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_ChangeFromKey, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.Seek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_Seek, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.ChangeSeek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_ChangeSeek, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.FindFromKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_FindFromKey, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.Clear = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_Clear, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox.Size = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_Size, None, TopOpeBRepTool_IndexedDataMapOfShapeBox)
TopOpeBRepTool_IndexedDataMapOfShapeBox_swigregister = _TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox_swigregister
TopOpeBRepTool_IndexedDataMapOfShapeBox_swigregister(TopOpeBRepTool_IndexedDataMapOfShapeBox)

class TopOpeBRepTool_IndexedDataMapOfShapeBox2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_IndexedDataMapOfShapeBox2d(*args))
    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_IndexedDataMapOfShapeBox2d
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.begin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_begin, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.end = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_end, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.cbegin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_cbegin, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.cend = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_cend, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.Exchange = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_Exchange, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.Assign = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_Assign, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.Set = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_Set, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.ReSize = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_ReSize, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.Add = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_Add, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.Contains = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_Contains, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.Substitute = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_Substitute, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.Swap = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_Swap, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.RemoveLast = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_RemoveLast, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.RemoveFromIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_RemoveFromIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.RemoveKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_RemoveKey, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.FindKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_FindKey, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.FindFromIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_FindFromIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.ChangeFromIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_ChangeFromIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.__call__ = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d___call__, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.FindIndex = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_FindIndex, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.ChangeFromKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_ChangeFromKey, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.Seek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_Seek, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.ChangeSeek = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_ChangeSeek, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.FindFromKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_FindFromKey, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.Clear = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_Clear, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d.Size = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_Size, None, TopOpeBRepTool_IndexedDataMapOfShapeBox2d)
TopOpeBRepTool_IndexedDataMapOfShapeBox2d_swigregister = _TopOpeBRepTool.TopOpeBRepTool_IndexedDataMapOfShapeBox2d_swigregister
TopOpeBRepTool_IndexedDataMapOfShapeBox2d_swigregister(TopOpeBRepTool_IndexedDataMapOfShapeBox2d)

class TopOpeBRepTool_ListOfC2DF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_ListOfC2DF(*args))
    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_ListOfC2DF
TopOpeBRepTool_ListOfC2DF.begin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_begin, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.end = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_end, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.cbegin = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_cbegin, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.cend = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_cend, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.Size = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_Size, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.Assign = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_Assign, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.Set = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_Set, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.Clear = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_Clear, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.First = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_First, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.Last = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_Last, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.Append = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_Append, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.Prepend = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_Prepend, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.RemoveFirst = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_RemoveFirst, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.Remove = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_Remove, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.InsertBefore = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_InsertBefore, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.InsertAfter = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_InsertAfter, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF.Reverse = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_Reverse, None, TopOpeBRepTool_ListOfC2DF)
TopOpeBRepTool_ListOfC2DF_swigregister = _TopOpeBRepTool.TopOpeBRepTool_ListOfC2DF_swigregister
TopOpeBRepTool_ListOfC2DF_swigregister(TopOpeBRepTool_ListOfC2DF)

class TopOpeBRepTool_ListIteratorOfListOfC2DF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRepTool.TopOpeBRepTool_ListIteratorOfListOfC2DF_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_ListIteratorOfListOfC2DF(*args))
    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_ListIteratorOfListOfC2DF
TopOpeBRepTool_ListIteratorOfListOfC2DF.More = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListIteratorOfListOfC2DF_More, None, TopOpeBRepTool_ListIteratorOfListOfC2DF)
TopOpeBRepTool_ListIteratorOfListOfC2DF.Next = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListIteratorOfListOfC2DF_Next, None, TopOpeBRepTool_ListIteratorOfListOfC2DF)
TopOpeBRepTool_ListIteratorOfListOfC2DF.Value = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListIteratorOfListOfC2DF_Value, None, TopOpeBRepTool_ListIteratorOfListOfC2DF)
TopOpeBRepTool_ListIteratorOfListOfC2DF.ChangeValue = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ListIteratorOfListOfC2DF_ChangeValue, None, TopOpeBRepTool_ListIteratorOfListOfC2DF)
TopOpeBRepTool_ListIteratorOfListOfC2DF_swigregister = _TopOpeBRepTool.TopOpeBRepTool_ListIteratorOfListOfC2DF_swigregister
TopOpeBRepTool_ListIteratorOfListOfC2DF_swigregister(TopOpeBRepTool_ListIteratorOfListOfC2DF)

class topopebreptool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CorrectONUVISO(*args) -> "Standard_Boolean":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param Fsp:
        	:type Fsp: TopoDS_Face
        	:rtype: bool
        """
        return _TopOpeBRepTool.topopebreptool_CorrectONUVISO(*args)

    CorrectONUVISO = staticmethod(CorrectONUVISO)

    def MakeFaces(*args) -> "Standard_Boolean":
        """
        * Builds up the correct list of faces <LOFF> from <LOF>, using faulty shapes from map <MshNOK>. <LOF> is the list of <F>'s descendant faces. returns false if building fails
        	:param F:
        	:type F: TopoDS_Face
        	:param LOF:
        	:type LOF: TopTools_ListOfShape
        	:param MshNOK:
        	:type MshNOK: TopTools_IndexedMapOfOrientedShape
        	:param LOFF:
        	:type LOFF: TopTools_ListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.topopebreptool_MakeFaces(*args)

    MakeFaces = staticmethod(MakeFaces)

    def Print(*args) -> "Standard_OStream &":
        """
        * Prints <OCT> as string on stream <S>; returns <S>.
        	:param OCT:
        	:type OCT: TopOpeBRepTool_OutCurveType
        	:param S:
        	:type S: Standard_OStream
        	:rtype: Standard_OStream
        """
        return _TopOpeBRepTool.topopebreptool_Print(*args)

    Print = staticmethod(Print)

    def PurgeClosingEdges(*args) -> "Standard_Boolean":
        """
        * Fuse edges (in a wire) of a shape where we have useless vertex. In case face <FF> is built on UV-non-connexed wires (with the two closing edges FORWARD and REVERSED, in spite of one only), we find out the faulty edge, add the faulty shapes (edge,wire,face) to <MshNOK>. <FF> is a face descendant of <F>. <MWisOld>(wire) = 1 if wire is wire of <F> 0 wire results from <F>'s wire splitted. returns false if purge fails
        	:param F:
        	:type F: TopoDS_Face
        	:param FF:
        	:type FF: TopoDS_Face
        	:param MWisOld:
        	:type MWisOld: TopTools_DataMapOfShapeInteger
        	:param MshNOK:
        	:type MshNOK: TopTools_IndexedMapOfOrientedShape
        	:rtype: bool
        :param F:
        	:type F: TopoDS_Face
        	:param LOF:
        	:type LOF: TopTools_ListOfShape
        	:param MWisOld:
        	:type MWisOld: TopTools_DataMapOfShapeInteger
        	:param MshNOK:
        	:type MshNOK: TopTools_IndexedMapOfOrientedShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.topopebreptool_PurgeClosingEdges(*args)

    PurgeClosingEdges = staticmethod(PurgeClosingEdges)

    def Regularize(*args) -> "Standard_Boolean":
        """
        * Returns <False> if the face is valid (the UV representation of the face is a set of pcurves connexed by points with connexity 2). Else, splits <aFace> in order to return a list of valid faces.
        	:param aFace:
        	:type aFace: TopoDS_Face
        	:param aListOfFaces:
        	:type aListOfFaces: TopTools_ListOfShape
        	:param ESplits:
        	:type ESplits: TopTools_DataMapOfShapeListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.topopebreptool_Regularize(*args)

    Regularize = staticmethod(Regularize)

    def RegularizeFace(*args) -> "Standard_Boolean":
        """
        * Classify wire's splits of map <OldWiresnewWires> in order to compute <aListOfFaces>, the splits of <aFace>.
        	:param aFace:
        	:type aFace: TopoDS_Face
        	:param OldWiresnewWires:
        	:type OldWiresnewWires: TopTools_DataMapOfShapeListOfShape
        	:param aListOfFaces:
        	:type aListOfFaces: TopTools_ListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.topopebreptool_RegularizeFace(*args)

    RegularizeFace = staticmethod(RegularizeFace)

    def RegularizeShells(*args) -> "Standard_Boolean":
        """
        * Returns <False> if the shell is valid (the solid is a set of faces connexed by edges with connexity 2). Else, splits faces of the shell; <OldFacesnewFaces> describes (face, splits of face).
        	:param aSolid:
        	:type aSolid: TopoDS_Solid
        	:param OldSheNewShe:
        	:type OldSheNewShe: TopTools_DataMapOfShapeListOfShape
        	:param FSplits:
        	:type FSplits: TopTools_DataMapOfShapeListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.topopebreptool_RegularizeShells(*args)

    RegularizeShells = staticmethod(RegularizeShells)

    def RegularizeWires(*args) -> "Standard_Boolean":
        """
        * Returns <False> if the face is valid (the UV representation of the face is a set of pcurves connexed by points with connexity 2). Else, splits wires of the face, these are boundaries of the new faces to build up; <OldWiresNewWires> describes (wire, splits of wire); <ESplits> describes (edge, edge's splits)
        	:param aFace:
        	:type aFace: TopoDS_Face
        	:param OldWiresNewWires:
        	:type OldWiresNewWires: TopTools_DataMapOfShapeListOfShape
        	:param ESplits:
        	:type ESplits: TopTools_DataMapOfShapeListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.topopebreptool_RegularizeWires(*args)

    RegularizeWires = staticmethod(RegularizeWires)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRepTool.topopebreptool_swiginit(self, _TopOpeBRepTool.new_topopebreptool())
    __swig_destroy__ = _TopOpeBRepTool.delete_topopebreptool
topopebreptool_swigregister = _TopOpeBRepTool.topopebreptool_swigregister
topopebreptool_swigregister(topopebreptool)

def topopebreptool_CorrectONUVISO(*args) -> "Standard_Boolean":
    """
    :param F:
    	:type F: TopoDS_Face
    	:param Fsp:
    	:type Fsp: TopoDS_Face
    	:rtype: bool
    """
    return _TopOpeBRepTool.topopebreptool_CorrectONUVISO(*args)

def topopebreptool_MakeFaces(*args) -> "Standard_Boolean":
    """
    * Builds up the correct list of faces <LOFF> from <LOF>, using faulty shapes from map <MshNOK>. <LOF> is the list of <F>'s descendant faces. returns false if building fails
    	:param F:
    	:type F: TopoDS_Face
    	:param LOF:
    	:type LOF: TopTools_ListOfShape
    	:param MshNOK:
    	:type MshNOK: TopTools_IndexedMapOfOrientedShape
    	:param LOFF:
    	:type LOFF: TopTools_ListOfShape
    	:rtype: bool
    """
    return _TopOpeBRepTool.topopebreptool_MakeFaces(*args)

def topopebreptool_Print(*args) -> "Standard_OStream &":
    """
    * Prints <OCT> as string on stream <S>; returns <S>.
    	:param OCT:
    	:type OCT: TopOpeBRepTool_OutCurveType
    	:param S:
    	:type S: Standard_OStream
    	:rtype: Standard_OStream
    """
    return _TopOpeBRepTool.topopebreptool_Print(*args)

def topopebreptool_PurgeClosingEdges(*args) -> "Standard_Boolean":
    """
    * Fuse edges (in a wire) of a shape where we have useless vertex. In case face <FF> is built on UV-non-connexed wires (with the two closing edges FORWARD and REVERSED, in spite of one only), we find out the faulty edge, add the faulty shapes (edge,wire,face) to <MshNOK>. <FF> is a face descendant of <F>. <MWisOld>(wire) = 1 if wire is wire of <F> 0 wire results from <F>'s wire splitted. returns false if purge fails
    	:param F:
    	:type F: TopoDS_Face
    	:param FF:
    	:type FF: TopoDS_Face
    	:param MWisOld:
    	:type MWisOld: TopTools_DataMapOfShapeInteger
    	:param MshNOK:
    	:type MshNOK: TopTools_IndexedMapOfOrientedShape
    	:rtype: bool
    :param F:
    	:type F: TopoDS_Face
    	:param LOF:
    	:type LOF: TopTools_ListOfShape
    	:param MWisOld:
    	:type MWisOld: TopTools_DataMapOfShapeInteger
    	:param MshNOK:
    	:type MshNOK: TopTools_IndexedMapOfOrientedShape
    	:rtype: bool
    """
    return _TopOpeBRepTool.topopebreptool_PurgeClosingEdges(*args)

def topopebreptool_Regularize(*args) -> "Standard_Boolean":
    """
    * Returns <False> if the face is valid (the UV representation of the face is a set of pcurves connexed by points with connexity 2). Else, splits <aFace> in order to return a list of valid faces.
    	:param aFace:
    	:type aFace: TopoDS_Face
    	:param aListOfFaces:
    	:type aListOfFaces: TopTools_ListOfShape
    	:param ESplits:
    	:type ESplits: TopTools_DataMapOfShapeListOfShape
    	:rtype: bool
    """
    return _TopOpeBRepTool.topopebreptool_Regularize(*args)

def topopebreptool_RegularizeFace(*args) -> "Standard_Boolean":
    """
    * Classify wire's splits of map <OldWiresnewWires> in order to compute <aListOfFaces>, the splits of <aFace>.
    	:param aFace:
    	:type aFace: TopoDS_Face
    	:param OldWiresnewWires:
    	:type OldWiresnewWires: TopTools_DataMapOfShapeListOfShape
    	:param aListOfFaces:
    	:type aListOfFaces: TopTools_ListOfShape
    	:rtype: bool
    """
    return _TopOpeBRepTool.topopebreptool_RegularizeFace(*args)

def topopebreptool_RegularizeShells(*args) -> "Standard_Boolean":
    """
    * Returns <False> if the shell is valid (the solid is a set of faces connexed by edges with connexity 2). Else, splits faces of the shell; <OldFacesnewFaces> describes (face, splits of face).
    	:param aSolid:
    	:type aSolid: TopoDS_Solid
    	:param OldSheNewShe:
    	:type OldSheNewShe: TopTools_DataMapOfShapeListOfShape
    	:param FSplits:
    	:type FSplits: TopTools_DataMapOfShapeListOfShape
    	:rtype: bool
    """
    return _TopOpeBRepTool.topopebreptool_RegularizeShells(*args)

def topopebreptool_RegularizeWires(*args) -> "Standard_Boolean":
    """
    * Returns <False> if the face is valid (the UV representation of the face is a set of pcurves connexed by points with connexity 2). Else, splits wires of the face, these are boundaries of the new faces to build up; <OldWiresNewWires> describes (wire, splits of wire); <ESplits> describes (edge, edge's splits)
    	:param aFace:
    	:type aFace: TopoDS_Face
    	:param OldWiresNewWires:
    	:type OldWiresNewWires: TopTools_DataMapOfShapeListOfShape
    	:param ESplits:
    	:type ESplits: TopTools_DataMapOfShapeListOfShape
    	:rtype: bool
    """
    return _TopOpeBRepTool.topopebreptool_RegularizeWires(*args)

class TopOpeBRepTool_AncestorsTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeAncestors(*args) -> "void":
        """
        * same as package method TopExp::MapShapeListOfShapes()
        	:param S:
        	:type S: TopoDS_Shape
        	:param TS:
        	:type TS: TopAbs_ShapeEnum
        	:param TA:
        	:type TA: TopAbs_ShapeEnum
        	:param M:
        	:type M: TopTools_IndexedDataMapOfShapeListOfShape
        	:rtype: void
        """
        return _TopOpeBRepTool.TopOpeBRepTool_AncestorsTool_MakeAncestors(*args)

    MakeAncestors = staticmethod(MakeAncestors)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRepTool.TopOpeBRepTool_AncestorsTool_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_AncestorsTool())
    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_AncestorsTool
TopOpeBRepTool_AncestorsTool_swigregister = _TopOpeBRepTool.TopOpeBRepTool_AncestorsTool_swigregister
TopOpeBRepTool_AncestorsTool_swigregister(TopOpeBRepTool_AncestorsTool)

def TopOpeBRepTool_AncestorsTool_MakeAncestors(*args) -> "void":
    """
    * same as package method TopExp::MapShapeListOfShapes()
    	:param S:
    	:type S: TopoDS_Shape
    	:param TS:
    	:type TS: TopAbs_ShapeEnum
    	:param TA:
    	:type TA: TopAbs_ShapeEnum
    	:param M:
    	:type M: TopTools_IndexedDataMapOfShapeListOfShape
    	:rtype: void
    """
    return _TopOpeBRepTool.TopOpeBRepTool_AncestorsTool_MakeAncestors(*args)

class TopOpeBRepTool_BoxSort(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddBoxes(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param TS:
        	:type TS: TopAbs_ShapeEnum
        	:param TA: default value is TopAbs_SHAPE
        	:type TA: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_AddBoxes(self, *args)


    def AddBoxesMakeCOB(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param TS:
        	:type TS: TopAbs_ShapeEnum
        	:param TA: default value is TopAbs_SHAPE
        	:type TA: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_AddBoxesMakeCOB(self, *args)


    def Box(self, *args) -> "Bnd_Box const &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: Bnd_Box
        """
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_Box(self, *args)


    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_Clear(self, *args)


    def Compare(self, *args) -> "TColStd_ListIteratorOfListOfInteger const &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: TColStd_ListIteratorOfListOfInteger
        """
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_Compare(self, *args)


    def HAB(self, *args) -> "opencascade::handle< Bnd_HArray1OfBox > const &":
        """:rtype: opencascade::handle<Bnd_HArray1OfBox>"""
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_HAB(self, *args)


    def HABShape(self, *args) -> "TopoDS_Shape const":
        """
        :param I:
        	:type I: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_HABShape(self, *args)


    def HBoxTool(self, *args) -> "opencascade::handle< TopOpeBRepTool_HBoxTool > const &":
        """:rtype: opencascade::handle<TopOpeBRepTool_HBoxTool>"""
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_HBoxTool(self, *args)


    def MakeCOB(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param TS:
        	:type TS: TopAbs_ShapeEnum
        	:param TA: default value is TopAbs_SHAPE
        	:type TA: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_MakeCOB(self, *args)


    def MakeHAB(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param TS:
        	:type TS: TopAbs_ShapeEnum
        	:param TA: default value is TopAbs_SHAPE
        	:type TA: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_MakeHAB(self, *args)


    def MakeHABCOB(*args) -> "void":
        """
        :param HAB:
        	:type HAB: Bnd_HArray1OfBox
        	:param COB:
        	:type COB: Bnd_Box
        	:rtype: void
        """
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_MakeHABCOB(*args)

    MakeHABCOB = staticmethod(MakeHABCOB)

    def SetHBoxTool(self, *args) -> "void":
        """
        :param T:
        	:type T: TopOpeBRepTool_HBoxTool
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_SetHBoxTool(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param T:
        	:type T: TopOpeBRepTool_HBoxTool
        	:rtype: None
        """
        _TopOpeBRepTool.TopOpeBRepTool_BoxSort_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_BoxSort(*args))

    def TouchedShape(self, *args) -> "TopoDS_Shape const":
        """
        :param I:
        	:type I: TColStd_ListIteratorOfListOfInteger
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_TouchedShape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_BoxSort
TopOpeBRepTool_BoxSort.AddBoxes = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_AddBoxes, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort.AddBoxesMakeCOB = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_AddBoxesMakeCOB, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort.Box = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_Box, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort.Clear = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_Clear, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort.Compare = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_Compare, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort.HAB = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_HAB, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort.HABShape = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_HABShape, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort.HBoxTool = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_HBoxTool, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort.MakeCOB = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_MakeCOB, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort.MakeHAB = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_MakeHAB, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort.SetHBoxTool = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_SetHBoxTool, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort.TouchedShape = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_BoxSort_TouchedShape, None, TopOpeBRepTool_BoxSort)
TopOpeBRepTool_BoxSort_swigregister = _TopOpeBRepTool.TopOpeBRepTool_BoxSort_swigregister
TopOpeBRepTool_BoxSort_swigregister(TopOpeBRepTool_BoxSort)

def TopOpeBRepTool_BoxSort_MakeHABCOB(*args) -> "void":
    """
    :param HAB:
    	:type HAB: Bnd_HArray1OfBox
    	:param COB:
    	:type COB: Bnd_Box
    	:rtype: void
    """
    return _TopOpeBRepTool.TopOpeBRepTool_BoxSort_MakeHABCOB(*args)

class TopOpeBRepTool_C2DF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Face(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _TopOpeBRepTool.TopOpeBRepTool_C2DF_Face(self, *args)


    def IsFace(self, *args) -> "Standard_Boolean":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_C2DF_IsFace(self, *args)


    def IsPC(self, *args) -> "Standard_Boolean":
        """
        :param PC:
        	:type PC: Geom2d_Curve
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_C2DF_IsPC(self, *args)


    def PC(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        :param f2d:
        	:type f2d: float
        	:param l2d:
        	:type l2d: float
        	:param tol:
        	:type tol: float
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _TopOpeBRepTool.TopOpeBRepTool_C2DF_PC(self, *args)


    def SetFace(self, *args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_C2DF_SetFace(self, *args)


    def SetPC(self, *args) -> "void":
        """
        :param PC:
        	:type PC: Geom2d_Curve
        	:param f2d:
        	:type f2d: float
        	:param l2d:
        	:type l2d: float
        	:param tol:
        	:type tol: float
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_C2DF_SetPC(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param PC:
        	:type PC: Geom2d_Curve
        	:param f2d:
        	:type f2d: float
        	:param l2d:
        	:type l2d: float
        	:param tol:
        	:type tol: float
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _TopOpeBRepTool.TopOpeBRepTool_C2DF_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_C2DF(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_C2DF
TopOpeBRepTool_C2DF.Face = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_C2DF_Face, None, TopOpeBRepTool_C2DF)
TopOpeBRepTool_C2DF.IsFace = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_C2DF_IsFace, None, TopOpeBRepTool_C2DF)
TopOpeBRepTool_C2DF.IsPC = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_C2DF_IsPC, None, TopOpeBRepTool_C2DF)
TopOpeBRepTool_C2DF.PC = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_C2DF_PC, None, TopOpeBRepTool_C2DF)
TopOpeBRepTool_C2DF.SetFace = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_C2DF_SetFace, None, TopOpeBRepTool_C2DF)
TopOpeBRepTool_C2DF.SetPC = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_C2DF_SetPC, None, TopOpeBRepTool_C2DF)
TopOpeBRepTool_C2DF_swigregister = _TopOpeBRepTool.TopOpeBRepTool_C2DF_swigregister
TopOpeBRepTool_C2DF_swigregister(TopOpeBRepTool_C2DF)

class TopOpeBRepTool_CLASSI(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add2d(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CLASSI_Add2d(self, *args)


    def ClassiBnd2d(self, *args) -> "Standard_Integer":
        """
        :param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param tol:
        	:type tol: float
        	:param checklarge:
        	:type checklarge: bool
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CLASSI_ClassiBnd2d(self, *args)


    def Classilist(self, *args) -> "Standard_Boolean":
        """
        :param lS:
        	:type lS: TopTools_ListOfShape
        	:param mapgreasma:
        	:type mapgreasma: TopTools_DataMapOfShapeListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CLASSI_Classilist(self, *args)


    def Classip2d(self, *args) -> "Standard_Integer":
        """
        :param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param stabnd2d12:
        	:type stabnd2d12: int
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CLASSI_Classip2d(self, *args)


    def GetBox2d(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param Box2d:
        	:type Box2d: Bnd_Box2d
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CLASSI_GetBox2d(self, *args)


    def Getface(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param fa:
        	:type fa: TopOpeBRepTool_face
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CLASSI_Getface(self, *args)


    def HasInit2d(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_CLASSI_HasInit2d(self, *args)


    def Init2d(self, *args) -> "void":
        """
        :param Fref:
        	:type Fref: TopoDS_Face
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CLASSI_Init2d(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRepTool.TopOpeBRepTool_CLASSI_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_CLASSI(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_CLASSI
TopOpeBRepTool_CLASSI.Add2d = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CLASSI_Add2d, None, TopOpeBRepTool_CLASSI)
TopOpeBRepTool_CLASSI.ClassiBnd2d = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CLASSI_ClassiBnd2d, None, TopOpeBRepTool_CLASSI)
TopOpeBRepTool_CLASSI.Classilist = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CLASSI_Classilist, None, TopOpeBRepTool_CLASSI)
TopOpeBRepTool_CLASSI.Classip2d = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CLASSI_Classip2d, None, TopOpeBRepTool_CLASSI)
TopOpeBRepTool_CLASSI.GetBox2d = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CLASSI_GetBox2d, None, TopOpeBRepTool_CLASSI)
TopOpeBRepTool_CLASSI.Getface = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CLASSI_Getface, None, TopOpeBRepTool_CLASSI)
TopOpeBRepTool_CLASSI.HasInit2d = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CLASSI_HasInit2d, None, TopOpeBRepTool_CLASSI)
TopOpeBRepTool_CLASSI.Init2d = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CLASSI_Init2d, None, TopOpeBRepTool_CLASSI)
TopOpeBRepTool_CLASSI_swigregister = _TopOpeBRepTool.TopOpeBRepTool_CLASSI_swigregister
TopOpeBRepTool_CLASSI_swigregister(TopOpeBRepTool_CLASSI)

class TopOpeBRepTool_CORRISO(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddNewConnexity(self, *args) -> "Standard_Boolean":
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_AddNewConnexity(self, *args)


    def Connexity(self, *args) -> "Standard_Boolean":
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:param Eds:
        	:type Eds: TopTools_ListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_Connexity(self, *args)


    def EdgeOUTofBoundsUV(self, *args) -> "Standard_Integer":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param onU:
        	:type onU: bool
        	:param tolx:
        	:type tolx: float
        	:param parspE:
        	:type parspE: float
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_EdgeOUTofBoundsUV(self, *args)


    def EdgeWithFaultyUV(self, *args) -> "Standard_Boolean":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param Ivfaulty:
        	:type Ivfaulty: int
        	:rtype: bool
        :param EdsToCheck:
        	:type EdsToCheck: TopTools_ListOfShape
        	:param nfybounds:
        	:type nfybounds: int
        	:param fyE:
        	:type fyE: TopoDS_Shape
        	:param Ifaulty:
        	:type Ifaulty: int
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_EdgeWithFaultyUV(self, *args)


    def EdgesOUTofBoundsUV(self, *args) -> "Standard_Boolean":
        """
        :param EdsToCheck:
        	:type EdsToCheck: TopTools_ListOfShape
        	:param onU:
        	:type onU: bool
        	:param tolx:
        	:type tolx: float
        	:param FyEds:
        	:type FyEds: TopTools_DataMapOfOrientedShapeInteger
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_EdgesOUTofBoundsUV(self, *args)


    def EdgesWithFaultyUV(self, *args) -> "Standard_Boolean":
        """
        :param EdsToCheck:
        	:type EdsToCheck: TopTools_ListOfShape
        	:param nfybounds:
        	:type nfybounds: int
        	:param FyEds:
        	:type FyEds: TopTools_DataMapOfOrientedShapeInteger
        	:param stopatfirst: default value is Standard_False
        	:type stopatfirst: bool
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_EdgesWithFaultyUV(self, *args)


    def Eds(self, *args) -> "TopTools_ListOfShape const &":
        """:rtype: TopTools_ListOfShape"""
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_Eds(self, *args)


    def Fref(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_Fref(self, *args)


    def GASref(self, *args) -> "GeomAdaptor_Surface const &":
        """:rtype: GeomAdaptor_Surface"""
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_GASref(self, *args)


    def GetnewS(self, *args) -> "Standard_Boolean":
        """
        :param newS:
        	:type newS: TopoDS_Face
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_GetnewS(self, *args)


    def Init(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_Init(self, *args)


    def PurgeFyClosingE(self, *args) -> "Standard_Boolean":
        """
        :param ClEds:
        	:type ClEds: TopTools_ListOfShape
        	:param fyClEds:
        	:type fyClEds: TopTools_ListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_PurgeFyClosingE(self, *args)


    def Refclosed(self, *args) -> "Standard_Boolean":
        """
        :param x:
        	:type x: int
        	:param xperiod:
        	:type xperiod: float
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_Refclosed(self, *args)


    def RemoveOldConnexity(self, *args) -> "Standard_Boolean":
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_RemoveOldConnexity(self, *args)


    def S(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_S(self, *args)


    def SetConnexity(self, *args) -> "Standard_Boolean":
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:param Eds:
        	:type Eds: TopTools_ListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_SetConnexity(self, *args)


    def SetUVRep(self, *args) -> "Standard_Boolean":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param C2DF:
        	:type C2DF: TopOpeBRepTool_C2DF
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_SetUVRep(self, *args)


    def Tol(self, *args) -> "Standard_Real":
        """
        :param I:
        	:type I: int
        	:param tol3d:
        	:type tol3d: float
        	:rtype: float
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_Tol(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param FRef:
        	:type FRef: TopoDS_Face
        	:rtype: None
        """
        _TopOpeBRepTool.TopOpeBRepTool_CORRISO_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_CORRISO(*args))

    def TrslUV(self, *args) -> "Standard_Boolean":
        """
        :param onU:
        	:type onU: bool
        	:param FyEds:
        	:type FyEds: TopTools_DataMapOfOrientedShapeInteger
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_TrslUV(self, *args)


    def UVClosed(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_UVClosed(self, *args)


    def UVRep(self, *args) -> "Standard_Boolean":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param C2DF:
        	:type C2DF: TopOpeBRepTool_C2DF
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CORRISO_UVRep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_CORRISO
TopOpeBRepTool_CORRISO.AddNewConnexity = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_AddNewConnexity, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.Connexity = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_Connexity, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.EdgeOUTofBoundsUV = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_EdgeOUTofBoundsUV, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.EdgeWithFaultyUV = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_EdgeWithFaultyUV, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.EdgesOUTofBoundsUV = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_EdgesOUTofBoundsUV, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.EdgesWithFaultyUV = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_EdgesWithFaultyUV, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.Eds = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_Eds, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.Fref = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_Fref, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.GASref = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_GASref, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.GetnewS = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_GetnewS, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.Init = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_Init, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.PurgeFyClosingE = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_PurgeFyClosingE, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.Refclosed = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_Refclosed, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.RemoveOldConnexity = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_RemoveOldConnexity, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.S = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_S, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.SetConnexity = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_SetConnexity, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.SetUVRep = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_SetUVRep, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.Tol = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_Tol, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.TrslUV = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_TrslUV, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.UVClosed = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_UVClosed, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO.UVRep = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CORRISO_UVRep, None, TopOpeBRepTool_CORRISO)
TopOpeBRepTool_CORRISO_swigregister = _TopOpeBRepTool.TopOpeBRepTool_CORRISO_swigregister
TopOpeBRepTool_CORRISO_swigregister(TopOpeBRepTool_CORRISO)

class TopOpeBRepTool_CurveTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeGeomTool(self, *args) -> "TopOpeBRepTool_GeomTool &":
        """:rtype: TopOpeBRepTool_GeomTool"""
        return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_ChangeGeomTool(self, *args)


    def GetGeomTool(self, *args) -> "TopOpeBRepTool_GeomTool const &":
        """:rtype: TopOpeBRepTool_GeomTool"""
        return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_GetGeomTool(self, *args)


    def IsProjectable(*args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param C:
        	:type C: Geom_Curve
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_IsProjectable(*args)

    IsProjectable = staticmethod(IsProjectable)

    def MakeBSpline1fromPnt(*args) -> "opencascade::handle< Geom_Curve >":
        """
        :param P:
        	:type P: TColgp_Array1OfPnt
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_MakeBSpline1fromPnt(*args)

    MakeBSpline1fromPnt = staticmethod(MakeBSpline1fromPnt)

    def MakeBSpline1fromPnt2d(*args) -> "opencascade::handle< Geom2d_Curve >":
        """
        :param P:
        	:type P: TColgp_Array1OfPnt2d
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_MakeBSpline1fromPnt2d(*args)

    MakeBSpline1fromPnt2d = staticmethod(MakeBSpline1fromPnt2d)

    def MakeCurves(self, *args) -> "Standard_Boolean":
        """
        * Approximates curves. Returns False in the case of failure
        	:param min:
        	:type min: float
        	:param max:
        	:type max: float
        	:param C3D:
        	:type C3D: Geom_Curve
        	:param PC1:
        	:type PC1: Geom2d_Curve
        	:param PC2:
        	:type PC2: Geom2d_Curve
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param C3DN:
        	:type C3DN: Geom_Curve
        	:param PC1N:
        	:type PC1N: Geom2d_Curve
        	:param PC2N:
        	:type PC2N: Geom2d_Curve
        	:param Tol3d:
        	:type Tol3d: float
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_MakeCurves(self, *args)


    def MakePCurveOnFace(*args) -> "Standard_Real &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param C:
        	:type C: Geom_Curve
        	:param TolReached2d:
        	:type TolReached2d: float
        	:param first: default value is 0.0
        	:type first: float
        	:param last: default value is 0.0
        	:type last: float
        	:rtype: opencascade::handle<Geom2d_Curve>
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_MakePCurveOnFace(*args)

    MakePCurveOnFace = staticmethod(MakePCurveOnFace)

    def SetGeomTool(self, *args) -> "void":
        """
        :param GT:
        	:type GT: TopOpeBRepTool_GeomTool
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_SetGeomTool(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param OCT:
        	:type OCT: TopOpeBRepTool_OutCurveType
        	:rtype: None
        :param GT:
        	:type GT: TopOpeBRepTool_GeomTool
        	:rtype: None
        """
        _TopOpeBRepTool.TopOpeBRepTool_CurveTool_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_CurveTool(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_CurveTool
TopOpeBRepTool_CurveTool.ChangeGeomTool = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CurveTool_ChangeGeomTool, None, TopOpeBRepTool_CurveTool)
TopOpeBRepTool_CurveTool.GetGeomTool = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CurveTool_GetGeomTool, None, TopOpeBRepTool_CurveTool)
TopOpeBRepTool_CurveTool.MakeCurves = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CurveTool_MakeCurves, None, TopOpeBRepTool_CurveTool)
TopOpeBRepTool_CurveTool.SetGeomTool = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_CurveTool_SetGeomTool, None, TopOpeBRepTool_CurveTool)
TopOpeBRepTool_CurveTool_swigregister = _TopOpeBRepTool.TopOpeBRepTool_CurveTool_swigregister
TopOpeBRepTool_CurveTool_swigregister(TopOpeBRepTool_CurveTool)

def TopOpeBRepTool_CurveTool_IsProjectable(*args) -> "Standard_Boolean":
    """
    :param S:
    	:type S: TopoDS_Shape
    	:param C:
    	:type C: Geom_Curve
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_IsProjectable(*args)

def TopOpeBRepTool_CurveTool_MakeBSpline1fromPnt(*args) -> "opencascade::handle< Geom_Curve >":
    """
    :param P:
    	:type P: TColgp_Array1OfPnt
    	:rtype: opencascade::handle<Geom_Curve>
    """
    return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_MakeBSpline1fromPnt(*args)

def TopOpeBRepTool_CurveTool_MakeBSpline1fromPnt2d(*args) -> "opencascade::handle< Geom2d_Curve >":
    """
    :param P:
    	:type P: TColgp_Array1OfPnt2d
    	:rtype: opencascade::handle<Geom2d_Curve>
    """
    return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_MakeBSpline1fromPnt2d(*args)

def TopOpeBRepTool_CurveTool_MakePCurveOnFace(*args) -> "Standard_Real &":
    """
    :param S:
    	:type S: TopoDS_Shape
    	:param C:
    	:type C: Geom_Curve
    	:param TolReached2d:
    	:type TolReached2d: float
    	:param first: default value is 0.0
    	:type first: float
    	:param last: default value is 0.0
    	:type last: float
    	:rtype: opencascade::handle<Geom2d_Curve>
    """
    return _TopOpeBRepTool.TopOpeBRepTool_CurveTool_MakePCurveOnFace(*args)

class TopOpeBRepTool_FuseEdges(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AvoidEdges(self, *args) -> "void":
        """
        * set edges to avoid being fused
        	:param theMapEdg:
        	:type theMapEdg: TopTools_IndexedMapOfShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_FuseEdges_AvoidEdges(self, *args)


    def Edges(self, *args) -> "void":
        """
        * returns all the list of edges to be fused each list of the map represent a set of connex edges that can be fused.
        	:param theMapLstEdg:
        	:type theMapLstEdg: TopTools_DataMapOfIntegerListOfShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_FuseEdges_Edges(self, *args)


    def Faces(self, *args) -> "void":
        """
        * returns the map of modified faces.
        	:param theMapFac:
        	:type theMapFac: TopTools_DataMapOfShapeShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_FuseEdges_Faces(self, *args)


    def NbVertices(self, *args) -> "Standard_Integer":
        """
        * returns the number of vertices candidate to be removed
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_FuseEdges_NbVertices(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Using map of list of connex edges, fuse each list to one edge and then update myShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_FuseEdges_Perform(self, *args)


    def ResultEdges(self, *args) -> "void":
        """
        * returns all the fused edges. each integer entry in the map corresponds to the integer in the DataMapOfIntegerListOfShape we get in method Edges. That is to say, to the list of edges in theMapLstEdg(i) corresponds the resulting edge theMapEdge(i)
        	:param theMapEdg:
        	:type theMapEdg: TopTools_DataMapOfIntegerShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_FuseEdges_ResultEdges(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * returns myShape modified with the list of internal edges removed from it.
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRepTool.TopOpeBRepTool_FuseEdges_Shape(self, *args)


    def __init__(self, *args):
        """
        * Initialise members and build construction of map of ancestors.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param PerformNow: default value is Standard_False
        	:type PerformNow: bool
        	:rtype: None
        """
        _TopOpeBRepTool.TopOpeBRepTool_FuseEdges_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_FuseEdges(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_FuseEdges
TopOpeBRepTool_FuseEdges.AvoidEdges = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_FuseEdges_AvoidEdges, None, TopOpeBRepTool_FuseEdges)
TopOpeBRepTool_FuseEdges.Edges = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_FuseEdges_Edges, None, TopOpeBRepTool_FuseEdges)
TopOpeBRepTool_FuseEdges.Faces = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_FuseEdges_Faces, None, TopOpeBRepTool_FuseEdges)
TopOpeBRepTool_FuseEdges.NbVertices = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_FuseEdges_NbVertices, None, TopOpeBRepTool_FuseEdges)
TopOpeBRepTool_FuseEdges.Perform = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_FuseEdges_Perform, None, TopOpeBRepTool_FuseEdges)
TopOpeBRepTool_FuseEdges.ResultEdges = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_FuseEdges_ResultEdges, None, TopOpeBRepTool_FuseEdges)
TopOpeBRepTool_FuseEdges.Shape = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_FuseEdges_Shape, None, TopOpeBRepTool_FuseEdges)
TopOpeBRepTool_FuseEdges_swigregister = _TopOpeBRepTool.TopOpeBRepTool_FuseEdges_swigregister
TopOpeBRepTool_FuseEdges_swigregister(TopOpeBRepTool_FuseEdges)

class TopOpeBRepTool_GeomTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CompC3D(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_CompC3D(self, *args)


    def CompPC1(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_CompPC1(self, *args)


    def CompPC2(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_CompPC2(self, *args)


    def Define(self, *args) -> "void":
        """
        :param TypeC3D:
        	:type TypeC3D: TopOpeBRepTool_OutCurveType
        	:param CompC3D:
        	:type CompC3D: bool
        	:param CompPC1:
        	:type CompPC1: bool
        	:param CompPC2:
        	:type CompPC2: bool
        	:rtype: None
        :param TypeC3D:
        	:type TypeC3D: TopOpeBRepTool_OutCurveType
        	:rtype: None
        :param GT:
        	:type GT: TopOpeBRepTool_GeomTool
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_Define(self, *args)


    def DefineCurves(self, *args) -> "void":
        """
        :param CompC3D:
        	:type CompC3D: bool
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_DefineCurves(self, *args)


    def DefinePCurves1(self, *args) -> "void":
        """
        :param CompPC1:
        	:type CompPC1: bool
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_DefinePCurves1(self, *args)


    def DefinePCurves2(self, *args) -> "void":
        """
        :param CompPC2:
        	:type CompPC2: bool
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_DefinePCurves2(self, *args)


    def GetTolerances(self, *args) -> "void":
        """
        :param tol3d:
        	:type tol3d: float
        	:param tol2d:
        	:type tol2d: float
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_GetTolerances(self, *args)


    def NbPntMax(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_NbPntMax(self, *args)


    def SetNbPntMax(self, *args) -> "void":
        """
        :param NbPntMax:
        	:type NbPntMax: int
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_SetNbPntMax(self, *args)


    def SetTolerances(self, *args) -> "void":
        """
        :param tol3d:
        	:type tol3d: float
        	:param tol2d:
        	:type tol2d: float
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_SetTolerances(self, *args)


    def __init__(self, *args):
        """
        * Boolean flags <CompC3D>, <CompPC1>, <CompPC2> indicate whether the corresponding result curves <C3D>, <PC1>, <PC2> of MakeCurves method must or not be computed from an intersection line <L>. When the line <L> is a walking one, <TypeC3D> is the kind of the 3D curve <C3D> to compute : - BSPLINE1 to compute a BSpline of degree 1 on the walking points of <L>, - APPROX to build an approximation curve on the walking points of <L>.
        	:param TypeC3D: default value is TopOpeBRepTool_BSPLINE1
        	:type TypeC3D: TopOpeBRepTool_OutCurveType
        	:param CompC3D: default value is Standard_True
        	:type CompC3D: bool
        	:param CompPC1: default value is Standard_True
        	:type CompPC1: bool
        	:param CompPC2: default value is Standard_True
        	:type CompPC2: bool
        	:rtype: None
        """
        _TopOpeBRepTool.TopOpeBRepTool_GeomTool_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_GeomTool(*args))

    def TypeC3D(self, *args) -> "TopOpeBRepTool_OutCurveType":
        """:rtype: TopOpeBRepTool_OutCurveType"""
        return _TopOpeBRepTool.TopOpeBRepTool_GeomTool_TypeC3D(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_GeomTool
TopOpeBRepTool_GeomTool.CompC3D = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_CompC3D, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool.CompPC1 = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_CompPC1, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool.CompPC2 = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_CompPC2, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool.Define = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_Define, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool.DefineCurves = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_DefineCurves, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool.DefinePCurves1 = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_DefinePCurves1, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool.DefinePCurves2 = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_DefinePCurves2, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool.GetTolerances = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_GetTolerances, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool.NbPntMax = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_NbPntMax, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool.SetNbPntMax = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_SetNbPntMax, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool.SetTolerances = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_SetTolerances, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool.TypeC3D = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_GeomTool_TypeC3D, None, TopOpeBRepTool_GeomTool)
TopOpeBRepTool_GeomTool_swigregister = _TopOpeBRepTool.TopOpeBRepTool_GeomTool_swigregister
TopOpeBRepTool_GeomTool_swigregister(TopOpeBRepTool_GeomTool)

class TopOpeBRepTool_HBoxTool(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddBox(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_AddBox(self, *args)


    def AddBoxes(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param TS:
        	:type TS: TopAbs_ShapeEnum
        	:param TA: default value is TopAbs_SHAPE
        	:type TA: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_AddBoxes(self, *args)


    def Box(self, *args) -> "Bnd_Box const &":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: Bnd_Box
        :param I:
        	:type I: int
        	:rtype: Bnd_Box
        """
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_Box(self, *args)


    def ChangeIMS(self, *args) -> "TopOpeBRepTool_IndexedDataMapOfShapeBox &":
        """:rtype: TopOpeBRepTool_IndexedDataMapOfShapeBox"""
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_ChangeIMS(self, *args)


    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_Clear(self, *args)


    def ComputeBox(*args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param B:
        	:type B: Bnd_Box
        	:rtype: void
        """
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_ComputeBox(*args)

    ComputeBox = staticmethod(ComputeBox)

    def ComputeBoxOnVertices(*args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param B:
        	:type B: Bnd_Box
        	:rtype: void
        """
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_ComputeBoxOnVertices(*args)

    ComputeBoxOnVertices = staticmethod(ComputeBoxOnVertices)

    def DumpB(*args) -> "void":
        """
        :param B:
        	:type B: Bnd_Box
        	:rtype: void
        """
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_DumpB(*args)

    DumpB = staticmethod(DumpB)

    def Extent(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_Extent(self, *args)


    def HasBox(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_HasBox(self, *args)


    def IMS(self, *args) -> "TopOpeBRepTool_IndexedDataMapOfShapeBox const &":
        """:rtype: TopOpeBRepTool_IndexedDataMapOfShapeBox"""
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_IMS(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_Index(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        :param I:
        	:type I: int
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_Shape(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_HBoxTool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRepTool_HBoxTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_HBoxTool
TopOpeBRepTool_HBoxTool.AddBox = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_HBoxTool_AddBox, None, TopOpeBRepTool_HBoxTool)
TopOpeBRepTool_HBoxTool.AddBoxes = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_HBoxTool_AddBoxes, None, TopOpeBRepTool_HBoxTool)
TopOpeBRepTool_HBoxTool.Box = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_HBoxTool_Box, None, TopOpeBRepTool_HBoxTool)
TopOpeBRepTool_HBoxTool.ChangeIMS = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_HBoxTool_ChangeIMS, None, TopOpeBRepTool_HBoxTool)
TopOpeBRepTool_HBoxTool.Clear = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_HBoxTool_Clear, None, TopOpeBRepTool_HBoxTool)
TopOpeBRepTool_HBoxTool.Extent = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_HBoxTool_Extent, None, TopOpeBRepTool_HBoxTool)
TopOpeBRepTool_HBoxTool.HasBox = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_HBoxTool_HasBox, None, TopOpeBRepTool_HBoxTool)
TopOpeBRepTool_HBoxTool.IMS = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_HBoxTool_IMS, None, TopOpeBRepTool_HBoxTool)
TopOpeBRepTool_HBoxTool.Index = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_HBoxTool_Index, None, TopOpeBRepTool_HBoxTool)
TopOpeBRepTool_HBoxTool.Shape = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_HBoxTool_Shape, None, TopOpeBRepTool_HBoxTool)
TopOpeBRepTool_HBoxTool_swigregister = _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_swigregister
TopOpeBRepTool_HBoxTool_swigregister(TopOpeBRepTool_HBoxTool)

def TopOpeBRepTool_HBoxTool_ComputeBox(*args) -> "void":
    """
    :param S:
    	:type S: TopoDS_Shape
    	:param B:
    	:type B: Bnd_Box
    	:rtype: void
    """
    return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_ComputeBox(*args)

def TopOpeBRepTool_HBoxTool_ComputeBoxOnVertices(*args) -> "void":
    """
    :param S:
    	:type S: TopoDS_Shape
    	:param B:
    	:type B: Bnd_Box
    	:rtype: void
    """
    return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_ComputeBoxOnVertices(*args)

def TopOpeBRepTool_HBoxTool_DumpB(*args) -> "void":
    """
    :param B:
    	:type B: Bnd_Box
    	:rtype: void
    """
    return _TopOpeBRepTool.TopOpeBRepTool_HBoxTool_DumpB(*args)

class TopOpeBRepTool_PurgeInternalEdges(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Faces(self, *args) -> "void":
        """
        * returns the list internal edges associated with the faces of the myShape. If PerformNow was False when created, then call the private Perform method that do the main job.
        	:param theMapFacLstEdg:
        	:type theMapFacLstEdg: TopTools_DataMapOfShapeListOfShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_Faces(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * returns False if the list of internal edges has not been extracted
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_IsDone(self, *args)


    def NbEdges(self, *args) -> "Standard_Integer":
        """
        * returns the number of edges candidate to be removed
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_NbEdges(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Using the list of internal edge from each face, rebuild myShape by removing thoses edges.
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        * returns myShape modified with the list of internal edges removed from it.
        	:rtype: TopoDS_Shape
        """
        return _TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_Shape(self, *args)


    def __init__(self, *args):
        """
        * Initialize members and begin exploration of shape depending of the value of PerformNow
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None
        """
        _TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_PurgeInternalEdges(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_PurgeInternalEdges
TopOpeBRepTool_PurgeInternalEdges.Faces = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_Faces, None, TopOpeBRepTool_PurgeInternalEdges)
TopOpeBRepTool_PurgeInternalEdges.IsDone = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_IsDone, None, TopOpeBRepTool_PurgeInternalEdges)
TopOpeBRepTool_PurgeInternalEdges.NbEdges = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_NbEdges, None, TopOpeBRepTool_PurgeInternalEdges)
TopOpeBRepTool_PurgeInternalEdges.Perform = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_Perform, None, TopOpeBRepTool_PurgeInternalEdges)
TopOpeBRepTool_PurgeInternalEdges.Shape = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_Shape, None, TopOpeBRepTool_PurgeInternalEdges)
TopOpeBRepTool_PurgeInternalEdges_swigregister = _TopOpeBRepTool.TopOpeBRepTool_PurgeInternalEdges_swigregister
TopOpeBRepTool_PurgeInternalEdges_swigregister(TopOpeBRepTool_PurgeInternalEdges)

class TopOpeBRepTool_REGUS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetFsplits(self, *args) -> "void":
        """
        :param Fsplits:
        	:type Fsplits: TopTools_DataMapOfShapeListOfShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_GetFsplits(self, *args)


    def GetOshNsh(self, *args) -> "void":
        """
        :param OshNsh:
        	:type OshNsh: TopTools_DataMapOfShapeListOfShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_GetOshNsh(self, *args)


    def Init(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_Init(self, *args)


    def InitBlock(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_InitBlock(self, *args)


    def MapS(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_MapS(self, *args)


    def NearestF(self, *args) -> "Standard_Boolean":
        """
        :param e:
        	:type e: TopoDS_Edge
        	:param lof:
        	:type lof: TopTools_ListOfShape
        	:param ffound:
        	:type ffound: TopoDS_Face
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_NearestF(self, *args)


    def NextinBlock(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_NextinBlock(self, *args)


    def REGU(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_REGU(self, *args)


    def S(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_S(self, *args)


    def SetFsplits(self, *args) -> "void":
        """
        :param Fsplits:
        	:type Fsplits: TopTools_DataMapOfShapeListOfShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_SetFsplits(self, *args)


    def SetOshNsh(self, *args) -> "void":
        """
        :param OshNsh:
        	:type OshNsh: TopTools_DataMapOfShapeListOfShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_SetOshNsh(self, *args)


    def SplitF(*args) -> "Standard_Boolean":
        """
        :param Fanc:
        	:type Fanc: TopoDS_Face
        	:param FSplits:
        	:type FSplits: TopTools_ListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_SplitF(*args)

    SplitF = staticmethod(SplitF)

    def SplitFaces(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_SplitFaces(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRepTool.TopOpeBRepTool_REGUS_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_REGUS(*args))

    def WireToFace(*args) -> "Standard_Boolean":
        """
        :param Fanc:
        	:type Fanc: TopoDS_Face
        	:param nWs:
        	:type nWs: TopTools_ListOfShape
        	:param nFs:
        	:type nFs: TopTools_ListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUS_WireToFace(*args)

    WireToFace = staticmethod(WireToFace)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_REGUS
TopOpeBRepTool_REGUS.GetFsplits = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_GetFsplits, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS.GetOshNsh = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_GetOshNsh, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS.Init = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_Init, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS.InitBlock = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_InitBlock, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS.MapS = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_MapS, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS.NearestF = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_NearestF, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS.NextinBlock = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_NextinBlock, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS.REGU = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_REGU, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS.S = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_S, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS.SetFsplits = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_SetFsplits, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS.SetOshNsh = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_SetOshNsh, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS.SplitFaces = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUS_SplitFaces, None, TopOpeBRepTool_REGUS)
TopOpeBRepTool_REGUS_swigregister = _TopOpeBRepTool.TopOpeBRepTool_REGUS_swigregister
TopOpeBRepTool_REGUS_swigregister(TopOpeBRepTool_REGUS)

def TopOpeBRepTool_REGUS_SplitF(*args) -> "Standard_Boolean":
    """
    :param Fanc:
    	:type Fanc: TopoDS_Face
    	:param FSplits:
    	:type FSplits: TopTools_ListOfShape
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_REGUS_SplitF(*args)

def TopOpeBRepTool_REGUS_WireToFace(*args) -> "Standard_Boolean":
    """
    :param Fanc:
    	:type Fanc: TopoDS_Face
    	:param nWs:
    	:type nWs: TopTools_ListOfShape
    	:param nFs:
    	:type nFs: TopTools_ListOfShape
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_REGUS_WireToFace(*args)

class TopOpeBRepTool_REGUW(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddNewConnexity(self, *args) -> "Standard_Boolean":
        """
        :param v:
        	:type v: TopoDS_Vertex
        	:param OriKey:
        	:type OriKey: int
        	:param e:
        	:type e: TopoDS_Edge
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_AddNewConnexity(self, *args)


    def Connexity(self, *args) -> "Standard_Boolean":
        """
        :param v:
        	:type v: TopoDS_Vertex
        	:param co:
        	:type co: TopOpeBRepTool_connexity
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_Connexity(self, *args)


    def Fref(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_Fref(self, *args)


    def GetEsplits(self, *args) -> "void":
        """
        :param Esplits:
        	:type Esplits: TopTools_DataMapOfShapeListOfShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_GetEsplits(self, *args)


    def GetOwNw(self, *args) -> "void":
        """
        :param OwNw:
        	:type OwNw: TopTools_DataMapOfShapeListOfShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_GetOwNw(self, *args)


    def GetSplits(self, *args) -> "Standard_Boolean":
        """
        :param Splits:
        	:type Splits: TopTools_ListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_GetSplits(self, *args)


    def HasInit(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_HasInit(self, *args)


    def Init(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_Init(self, *args)


    def InitBlock(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_InitBlock(self, *args)


    def MapS(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_MapS(self, *args)


    def NearestE(self, *args) -> "Standard_Boolean":
        """
        :param loe:
        	:type loe: TopTools_ListOfShape
        	:param efound:
        	:type efound: TopoDS_Edge
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_NearestE(self, *args)


    def NextinBlock(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_NextinBlock(self, *args)


    def REGU(self, *args) -> "Standard_Boolean":
        """
        :param istep:
        	:type istep: int
        	:param Scur:
        	:type Scur: TopoDS_Shape
        	:param Splits:
        	:type Splits: TopTools_ListOfShape
        	:rtype: bool
        :rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_REGU(self, *args)


    def RemoveOldConnexity(self, *args) -> "Standard_Boolean":
        """
        :param v:
        	:type v: TopoDS_Vertex
        	:param OriKey:
        	:type OriKey: int
        	:param e:
        	:type e: TopoDS_Edge
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_RemoveOldConnexity(self, *args)


    def S(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_S(self, *args)


    def SetEsplits(self, *args) -> "void":
        """
        :param Esplits:
        	:type Esplits: TopTools_DataMapOfShapeListOfShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_SetEsplits(self, *args)


    def SetOwNw(self, *args) -> "void":
        """
        :param OwNw:
        	:type OwNw: TopTools_DataMapOfShapeListOfShape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_SetOwNw(self, *args)


    def SplitEds(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_SplitEds(self, *args)


    def __init__(self, *args):
        """
        :param FRef:
        	:type FRef: TopoDS_Face
        	:rtype: None
        """
        _TopOpeBRepTool.TopOpeBRepTool_REGUW_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_REGUW(*args))

    def UpdateMultiple(self, *args) -> "Standard_Boolean":
        """
        :param v:
        	:type v: TopoDS_Vertex
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_REGUW_UpdateMultiple(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_REGUW
TopOpeBRepTool_REGUW.AddNewConnexity = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_AddNewConnexity, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.Connexity = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_Connexity, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.Fref = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_Fref, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.GetEsplits = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_GetEsplits, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.GetOwNw = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_GetOwNw, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.GetSplits = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_GetSplits, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.HasInit = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_HasInit, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.Init = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_Init, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.InitBlock = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_InitBlock, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.MapS = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_MapS, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.NearestE = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_NearestE, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.NextinBlock = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_NextinBlock, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.REGU = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_REGU, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.RemoveOldConnexity = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_RemoveOldConnexity, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.S = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_S, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.SetEsplits = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_SetEsplits, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.SetOwNw = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_SetOwNw, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.SplitEds = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_SplitEds, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW.UpdateMultiple = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_REGUW_UpdateMultiple, None, TopOpeBRepTool_REGUW)
TopOpeBRepTool_REGUW_swigregister = _TopOpeBRepTool.TopOpeBRepTool_REGUW_swigregister
TopOpeBRepTool_REGUW_swigregister(TopOpeBRepTool_REGUW)

class TopOpeBRepTool_ShapeClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeSolidClassifier(self, *args) -> "TopOpeBRepTool_SolidClassifier &":
        """:rtype: TopOpeBRepTool_SolidClassifier"""
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_ChangeSolidClassifier(self, *args)


    def ClearAll(self, *args) -> "void":
        """
        * reset all internal data (SolidClassifier included)
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_ClearAll(self, *args)


    def ClearCurrent(self, *args) -> "void":
        """
        * reset all internal data (except SolidClassified)
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_ClearCurrent(self, *args)


    def P2D(self, *args) -> "gp_Pnt2d const":
        """:rtype: gp_Pnt2d"""
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_P2D(self, *args)


    def P3D(self, *args) -> "gp_Pnt const":
        """:rtype: gp_Pnt"""
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_P3D(self, *args)


    def SameDomain(self, *args) -> "void":
        """
        :rtype: int
        * set mode for next StateShapeShape call samedomain = true --> S,Sref are same domain --> point on restriction (ON S) is used to classify S. samedomain = false --> S,Sref are not domain --> point not on restriction of S (IN S) is used to classify S. samedomain value is used only in next StateShapeShape call
        	:param samedomain:
        	:type samedomain: int
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_SameDomain(self, *args)


    def SetReference(self, *args) -> "void":
        """
        * Set SRef as reference shape the next StateShapeReference(S,AvoidS) calls will classify S with SRef.
        	:param SRef:
        	:type SRef: TopoDS_Shape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_SetReference(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        * return field myState
        	:rtype: TopAbs_State
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_State(self, *args)


    def StateP2DReference(self, *args) -> "void":
        """
        * classify point P2D with myRef
        	:param P2D:
        	:type P2D: gp_Pnt2d
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_StateP2DReference(self, *args)


    def StateP3DReference(self, *args) -> "void":
        """
        * classify point P3D with myRef
        	:param P3D:
        	:type P3D: gp_Pnt
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_StateP3DReference(self, *args)


    def StateShapeReference(self, *args) -> "TopAbs_State":
        """
        * classify shape S compared with reference shape. AvoidS is not used in classification; AvoidS may be IsNull(). (usefull to avoid ON or UNKNOWN state in special cases)
        	:param S:
        	:type S: TopoDS_Shape
        	:param AvoidS:
        	:type AvoidS: TopoDS_Shape
        	:rtype: TopAbs_State
        * classify shape S compared with reference shape. LAvoidS is list of S subshapes to avoid in classification (usefull to avoid ON or UNKNOWN state in special cases)
        	:param S:
        	:type S: TopoDS_Shape
        	:param LAvoidS:
        	:type LAvoidS: TopTools_ListOfShape
        	:rtype: TopAbs_State
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_StateShapeReference(self, *args)


    def StateShapeShape(self, *args) -> "TopAbs_State":
        """
        * classify shape S compared with shape SRef. samedomain = 0 : S1,S2 are not same domain samedomain = 1 : S1,S2 are same domain
        	:param S:
        	:type S: TopoDS_Shape
        	:param SRef:
        	:type SRef: TopoDS_Shape
        	:param samedomain: default value is 0
        	:type samedomain: int
        	:rtype: TopAbs_State
        * classify shape S compared with shape SRef. AvoidS is not used in classification; AvoidS may be IsNull(). (usefull to avoid ON or UNKNOWN state in special cases)
        	:param S:
        	:type S: TopoDS_Shape
        	:param AvoidS:
        	:type AvoidS: TopoDS_Shape
        	:param SRef:
        	:type SRef: TopoDS_Shape
        	:rtype: TopAbs_State
        * classify shape S compared with shape SRef. LAvoidS is list of S subshapes to avoid in classification AvoidS is not used in classification; AvoidS may be IsNull(). (usefull to avoid ON or UNKNOWN state in special cases)
        	:param S:
        	:type S: TopoDS_Shape
        	:param LAvoidS:
        	:type LAvoidS: TopTools_ListOfShape
        	:param SRef:
        	:type SRef: TopoDS_Shape
        	:rtype: TopAbs_State
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_StateShapeShape(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        * SRef is the reference shape. StateShapeShape(S) calls will classify S with SRef.
        	:param SRef:
        	:type SRef: TopoDS_Shape
        	:rtype: None
        """
        _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_ShapeClassifier(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_ShapeClassifier
TopOpeBRepTool_ShapeClassifier.ChangeSolidClassifier = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_ChangeSolidClassifier, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier.ClearAll = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_ClearAll, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier.ClearCurrent = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_ClearCurrent, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier.P2D = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_P2D, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier.P3D = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_P3D, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier.SameDomain = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_SameDomain, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier.SetReference = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_SetReference, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier.State = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_State, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier.StateP2DReference = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_StateP2DReference, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier.StateP3DReference = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_StateP3DReference, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier.StateShapeReference = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_StateShapeReference, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier.StateShapeShape = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_StateShapeShape, None, TopOpeBRepTool_ShapeClassifier)
TopOpeBRepTool_ShapeClassifier_swigregister = _TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier_swigregister
TopOpeBRepTool_ShapeClassifier_swigregister(TopOpeBRepTool_ShapeClassifier)

class TopOpeBRepTool_ShapeExplorer(OCC.Core.TopExp.TopExp_Explorer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpCurrentToString(self) -> "std::string":
        """DumpCurrentToString(TopOpeBRepTool_ShapeExplorer self) -> std::string"""
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeExplorer_DumpCurrentToString(self)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Index of current sub-shape
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeExplorer_Index(self, *args)


    def Init(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param ToFind:
        	:type ToFind: TopAbs_ShapeEnum
        	:param ToAvoid: default value is TopAbs_SHAPE
        	:type ToAvoid: TopAbs_ShapeEnum
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeExplorer_Init(self, *args)


    def Next(self, *args) -> "void":
        """
        * Moves to the next Shape in the exploration.
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeExplorer_Next(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty explorer, becomes usefull after Init.
        	:rtype: None
        * Creates an Explorer on the Shape <S>. //! <ToFind> is the type of shapes to search. TopAbs_VERTEX, TopAbs_EDGE, ... //! <ToAvoid> is the type of shape to skip in the exploration. If <ToAvoid> is equal or less complex than <ToFind> or if <ToAVoid> is SHAPE it has no effect on the exploration.
        	:param S:
        	:type S: TopoDS_Shape
        	:param ToFind:
        	:type ToFind: TopAbs_ShapeEnum
        	:param ToAvoid: default value is TopAbs_SHAPE
        	:type ToAvoid: TopAbs_ShapeEnum
        	:rtype: None
        """
        _TopOpeBRepTool.TopOpeBRepTool_ShapeExplorer_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_ShapeExplorer(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_ShapeExplorer
TopOpeBRepTool_ShapeExplorer.DumpCurrentToString = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeExplorer_DumpCurrentToString, None, TopOpeBRepTool_ShapeExplorer)
TopOpeBRepTool_ShapeExplorer.Index = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeExplorer_Index, None, TopOpeBRepTool_ShapeExplorer)
TopOpeBRepTool_ShapeExplorer.Init = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeExplorer_Init, None, TopOpeBRepTool_ShapeExplorer)
TopOpeBRepTool_ShapeExplorer.Next = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_ShapeExplorer_Next, None, TopOpeBRepTool_ShapeExplorer)
TopOpeBRepTool_ShapeExplorer_swigregister = _TopOpeBRepTool.TopOpeBRepTool_ShapeExplorer_swigregister
TopOpeBRepTool_ShapeExplorer_swigregister(TopOpeBRepTool_ShapeExplorer)

class TopOpeBRepTool_ShapeTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AdjustOnPeriodic(*args) -> "Standard_Real &, Standard_Real &":
        """
        * ajust u,v values in UVBounds of the domain of the geometric shape <S>, according to Uperiodicity and VPeriodicity of the domain. <S> is assumed to be a face. u and/or v is/are not modified when the domain is not periodic in U and/or V .
        	:param S:
        	:type S: TopoDS_Shape
        	:param u:
        	:type u: float
        	:param v:
        	:type v: float
        	:rtype: void
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_AdjustOnPeriodic(*args)

    AdjustOnPeriodic = staticmethod(AdjustOnPeriodic)

    def BASISCURVE(*args) -> "opencascade::handle< Geom_Curve >":
        """
        :param C:
        	:type C: Geom_Curve
        	:rtype: opencascade::handle<Geom_Curve>
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: opencascade::handle<Geom_Curve>
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_BASISCURVE(*args)

    BASISCURVE = staticmethod(BASISCURVE)

    def BASISSURFACE(*args) -> "opencascade::handle< Geom_Surface >":
        """
        :param S:
        	:type S: Geom_Surface
        	:rtype: opencascade::handle<Geom_Surface>
        :param F:
        	:type F: TopoDS_Face
        	:rtype: opencascade::handle<Geom_Surface>
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_BASISSURFACE(*args)

    BASISSURFACE = staticmethod(BASISSURFACE)

    def Closed(*args) -> "Standard_Boolean":
        """
        * indicates wheter shape S1 is a closing shape on S2 or not.
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Closed(*args)

    Closed = staticmethod(Closed)

    def CurvesSameOriented(*args) -> "Standard_Boolean":
        """
        :param C1:
        	:type C1: BRepAdaptor_Curve
        	:param C2:
        	:type C2: BRepAdaptor_Curve
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_CurvesSameOriented(*args)

    CurvesSameOriented = staticmethod(CurvesSameOriented)

    def EdgeData(*args) -> "Standard_Real &":
        """
        * Compute tangent T, normal N, curvature C at point of parameter P on curve BRAC. Returns the tolerance indicating if T,N are null.
        	:param BRAC:
        	:type BRAC: BRepAdaptor_Curve
        	:param P:
        	:type P: float
        	:param T:
        	:type T: gp_Dir
        	:param N:
        	:type N: gp_Dir
        	:param C:
        	:type C: float
        	:rtype: float
        * Same as previous on edge E.
        	:param E:
        	:type E: TopoDS_Shape
        	:param P:
        	:type P: float
        	:param T:
        	:type T: gp_Dir
        	:param N:
        	:type N: gp_Dir
        	:param C:
        	:type C: float
        	:rtype: float
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_EdgeData(*args)

    EdgeData = staticmethod(EdgeData)

    def EdgesSameOriented(*args) -> "Standard_Boolean":
        """
        :param E1:
        	:type E1: TopoDS_Shape
        	:param E2:
        	:type E2: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_EdgesSameOriented(*args)

    EdgesSameOriented = staticmethod(EdgesSameOriented)

    def FacesSameOriented(*args) -> "Standard_Boolean":
        """
        :param F1:
        	:type F1: TopoDS_Shape
        	:param F2:
        	:type F2: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_FacesSameOriented(*args)

    FacesSameOriented = staticmethod(FacesSameOriented)

    def PeriodizeParameter(*args) -> "Standard_Real":
        """
        :param par:
        	:type par: float
        	:param EE:
        	:type EE: TopoDS_Shape
        	:param FF:
        	:type FF: TopoDS_Shape
        	:rtype: float
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_PeriodizeParameter(*args)

    PeriodizeParameter = staticmethod(PeriodizeParameter)

    def Pnt(*args) -> "gp_Pnt":
        """
        * Returns 3D point of vertex <S>.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: gp_Pnt
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Pnt(*args)

    Pnt = staticmethod(Pnt)

    def Resolution3d(*args) -> "Standard_Real":
        """
        :param SU:
        	:type SU: Geom_Surface
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: float
        :param F:
        	:type F: TopoDS_Face
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: float
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Resolution3d(*args)

    Resolution3d = staticmethod(Resolution3d)

    def Resolution3dU(*args) -> "Standard_Real":
        """
        :param SU:
        	:type SU: Geom_Surface
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: float
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Resolution3dU(*args)

    Resolution3dU = staticmethod(Resolution3dU)

    def Resolution3dV(*args) -> "Standard_Real":
        """
        :param SU:
        	:type SU: Geom_Surface
        	:param Tol2d:
        	:type Tol2d: float
        	:rtype: float
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Resolution3dV(*args)

    Resolution3dV = staticmethod(Resolution3dV)

    def ShapesSameOriented(*args) -> "Standard_Boolean":
        """
        :param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_ShapesSameOriented(*args)

    ShapesSameOriented = staticmethod(ShapesSameOriented)

    def SurfacesSameOriented(*args) -> "Standard_Boolean":
        """
        :param S1:
        	:type S1: BRepAdaptor_Surface
        	:param S2:
        	:type S2: BRepAdaptor_Surface
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_SurfacesSameOriented(*args)

    SurfacesSameOriented = staticmethod(SurfacesSameOriented)

    def Tolerance(*args) -> "Standard_Real":
        """
        * Returns the tolerance of the shape <S>. If the shape <S> is Null, returns 0.
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: float
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Tolerance(*args)

    Tolerance = staticmethod(Tolerance)

    def UVBOUNDS(*args) -> "Standard_Boolean &, Standard_Boolean &, Standard_Real &, Standard_Real &, Standard_Real &, Standard_Real &":
        """
        :param S:
        	:type S: Geom_Surface
        	:param UPeri:
        	:type UPeri: bool
        	:param VPeri:
        	:type VPeri: bool
        	:param Umin:
        	:type Umin: float
        	:param Umax:
        	:type Umax: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vmax:
        	:type Vmax: float
        	:rtype: void
        :param F:
        	:type F: TopoDS_Face
        	:param UPeri:
        	:type UPeri: bool
        	:param VPeri:
        	:type VPeri: bool
        	:param Umin:
        	:type Umin: float
        	:param Umax:
        	:type Umax: float
        	:param Vmin:
        	:type Vmin: float
        	:param Vmax:
        	:type Vmax: float
        	:rtype: void
        """
        return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_UVBOUNDS(*args)

    UVBOUNDS = staticmethod(UVBOUNDS)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_ShapeTool())
    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_ShapeTool
TopOpeBRepTool_ShapeTool_swigregister = _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_swigregister
TopOpeBRepTool_ShapeTool_swigregister(TopOpeBRepTool_ShapeTool)

def TopOpeBRepTool_ShapeTool_AdjustOnPeriodic(*args) -> "Standard_Real &, Standard_Real &":
    """
    * ajust u,v values in UVBounds of the domain of the geometric shape <S>, according to Uperiodicity and VPeriodicity of the domain. <S> is assumed to be a face. u and/or v is/are not modified when the domain is not periodic in U and/or V .
    	:param S:
    	:type S: TopoDS_Shape
    	:param u:
    	:type u: float
    	:param v:
    	:type v: float
    	:rtype: void
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_AdjustOnPeriodic(*args)

def TopOpeBRepTool_ShapeTool_BASISCURVE(*args) -> "opencascade::handle< Geom_Curve >":
    """
    :param C:
    	:type C: Geom_Curve
    	:rtype: opencascade::handle<Geom_Curve>
    :param E:
    	:type E: TopoDS_Edge
    	:rtype: opencascade::handle<Geom_Curve>
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_BASISCURVE(*args)

def TopOpeBRepTool_ShapeTool_BASISSURFACE(*args) -> "opencascade::handle< Geom_Surface >":
    """
    :param S:
    	:type S: Geom_Surface
    	:rtype: opencascade::handle<Geom_Surface>
    :param F:
    	:type F: TopoDS_Face
    	:rtype: opencascade::handle<Geom_Surface>
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_BASISSURFACE(*args)

def TopOpeBRepTool_ShapeTool_Closed(*args) -> "Standard_Boolean":
    """
    * indicates wheter shape S1 is a closing shape on S2 or not.
    	:param S1:
    	:type S1: TopoDS_Shape
    	:param S2:
    	:type S2: TopoDS_Shape
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Closed(*args)

def TopOpeBRepTool_ShapeTool_CurvesSameOriented(*args) -> "Standard_Boolean":
    """
    :param C1:
    	:type C1: BRepAdaptor_Curve
    	:param C2:
    	:type C2: BRepAdaptor_Curve
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_CurvesSameOriented(*args)

def TopOpeBRepTool_ShapeTool_EdgeData(*args) -> "Standard_Real &":
    """
    * Compute tangent T, normal N, curvature C at point of parameter P on curve BRAC. Returns the tolerance indicating if T,N are null.
    	:param BRAC:
    	:type BRAC: BRepAdaptor_Curve
    	:param P:
    	:type P: float
    	:param T:
    	:type T: gp_Dir
    	:param N:
    	:type N: gp_Dir
    	:param C:
    	:type C: float
    	:rtype: float
    * Same as previous on edge E.
    	:param E:
    	:type E: TopoDS_Shape
    	:param P:
    	:type P: float
    	:param T:
    	:type T: gp_Dir
    	:param N:
    	:type N: gp_Dir
    	:param C:
    	:type C: float
    	:rtype: float
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_EdgeData(*args)

def TopOpeBRepTool_ShapeTool_EdgesSameOriented(*args) -> "Standard_Boolean":
    """
    :param E1:
    	:type E1: TopoDS_Shape
    	:param E2:
    	:type E2: TopoDS_Shape
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_EdgesSameOriented(*args)

def TopOpeBRepTool_ShapeTool_FacesSameOriented(*args) -> "Standard_Boolean":
    """
    :param F1:
    	:type F1: TopoDS_Shape
    	:param F2:
    	:type F2: TopoDS_Shape
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_FacesSameOriented(*args)

def TopOpeBRepTool_ShapeTool_PeriodizeParameter(*args) -> "Standard_Real":
    """
    :param par:
    	:type par: float
    	:param EE:
    	:type EE: TopoDS_Shape
    	:param FF:
    	:type FF: TopoDS_Shape
    	:rtype: float
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_PeriodizeParameter(*args)

def TopOpeBRepTool_ShapeTool_Pnt(*args) -> "gp_Pnt":
    """
    * Returns 3D point of vertex <S>.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: gp_Pnt
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Pnt(*args)

def TopOpeBRepTool_ShapeTool_Resolution3d(*args) -> "Standard_Real":
    """
    :param SU:
    	:type SU: Geom_Surface
    	:param Tol2d:
    	:type Tol2d: float
    	:rtype: float
    :param F:
    	:type F: TopoDS_Face
    	:param Tol2d:
    	:type Tol2d: float
    	:rtype: float
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Resolution3d(*args)

def TopOpeBRepTool_ShapeTool_Resolution3dU(*args) -> "Standard_Real":
    """
    :param SU:
    	:type SU: Geom_Surface
    	:param Tol2d:
    	:type Tol2d: float
    	:rtype: float
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Resolution3dU(*args)

def TopOpeBRepTool_ShapeTool_Resolution3dV(*args) -> "Standard_Real":
    """
    :param SU:
    	:type SU: Geom_Surface
    	:param Tol2d:
    	:type Tol2d: float
    	:rtype: float
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Resolution3dV(*args)

def TopOpeBRepTool_ShapeTool_ShapesSameOriented(*args) -> "Standard_Boolean":
    """
    :param S1:
    	:type S1: TopoDS_Shape
    	:param S2:
    	:type S2: TopoDS_Shape
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_ShapesSameOriented(*args)

def TopOpeBRepTool_ShapeTool_SurfacesSameOriented(*args) -> "Standard_Boolean":
    """
    :param S1:
    	:type S1: BRepAdaptor_Surface
    	:param S2:
    	:type S2: BRepAdaptor_Surface
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_SurfacesSameOriented(*args)

def TopOpeBRepTool_ShapeTool_Tolerance(*args) -> "Standard_Real":
    """
    * Returns the tolerance of the shape <S>. If the shape <S> is Null, returns 0.
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: float
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_Tolerance(*args)

def TopOpeBRepTool_ShapeTool_UVBOUNDS(*args) -> "Standard_Boolean &, Standard_Boolean &, Standard_Real &, Standard_Real &, Standard_Real &, Standard_Real &":
    """
    :param S:
    	:type S: Geom_Surface
    	:param UPeri:
    	:type UPeri: bool
    	:param VPeri:
    	:type VPeri: bool
    	:param Umin:
    	:type Umin: float
    	:param Umax:
    	:type Umax: float
    	:param Vmin:
    	:type Vmin: float
    	:param Vmax:
    	:type Vmax: float
    	:rtype: void
    :param F:
    	:type F: TopoDS_Face
    	:param UPeri:
    	:type UPeri: bool
    	:param VPeri:
    	:type VPeri: bool
    	:param Umin:
    	:type Umin: float
    	:param Umax:
    	:type Umax: float
    	:param Vmin:
    	:type Vmin: float
    	:param Vmax:
    	:type Vmax: float
    	:rtype: void
    """
    return _TopOpeBRepTool.TopOpeBRepTool_ShapeTool_UVBOUNDS(*args)

class TopOpeBRepTool_SolidClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Classify(self, *args) -> "TopAbs_State":
        """
        * compute the position of point <P> regarding with the geometric domain of the solid <S>.
        	:param S:
        	:type S: TopoDS_Solid
        	:param P:
        	:type P: gp_Pnt
        	:param Tol:
        	:type Tol: float
        	:rtype: TopAbs_State
        * compute the position of point <P> regarding with the geometric domain of the shell <S>.
        	:param S:
        	:type S: TopoDS_Shell
        	:param P:
        	:type P: gp_Pnt
        	:param Tol:
        	:type Tol: float
        	:rtype: TopAbs_State
        """
        return _TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_Classify(self, *args)


    def Clear(self, *args) -> "void":
        """:rtype: None"""
        return _TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_Clear(self, *args)


    def LoadShell(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shell
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_LoadShell(self, *args)


    def LoadSolid(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Solid
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_LoadSolid(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """:rtype: TopAbs_State"""
        return _TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_State(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_SolidClassifier(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_SolidClassifier
TopOpeBRepTool_SolidClassifier.Classify = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_Classify, None, TopOpeBRepTool_SolidClassifier)
TopOpeBRepTool_SolidClassifier.Clear = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_Clear, None, TopOpeBRepTool_SolidClassifier)
TopOpeBRepTool_SolidClassifier.LoadShell = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_LoadShell, None, TopOpeBRepTool_SolidClassifier)
TopOpeBRepTool_SolidClassifier.LoadSolid = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_LoadSolid, None, TopOpeBRepTool_SolidClassifier)
TopOpeBRepTool_SolidClassifier.State = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_State, None, TopOpeBRepTool_SolidClassifier)
TopOpeBRepTool_SolidClassifier_swigregister = _TopOpeBRepTool.TopOpeBRepTool_SolidClassifier_swigregister
TopOpeBRepTool_SolidClassifier_swigregister(TopOpeBRepTool_SolidClassifier)

class TopOpeBRepTool_TOOL(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ClosedE(*args) -> "Standard_Boolean":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param vclo:
        	:type vclo: TopoDS_Vertex
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_ClosedE(*args)

    ClosedE = staticmethod(ClosedE)

    def ClosedS(*args) -> "Standard_Boolean":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_ClosedS(*args)

    ClosedS = staticmethod(ClosedS)

    def CurvE(*args) -> "Standard_Real &":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param par:
        	:type par: float
        	:param tg0:
        	:type tg0: gp_Dir
        	:param Curv:
        	:type Curv: float
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_CurvE(*args)

    CurvE = staticmethod(CurvE)

    def CurvF(*args) -> "Standard_Real &, Standard_Boolean &":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param uv:
        	:type uv: gp_Pnt2d
        	:param tg0:
        	:type tg0: gp_Dir
        	:param Curv:
        	:type Curv: float
        	:param direct:
        	:type direct: bool
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_CurvF(*args)

    CurvF = staticmethod(CurvF)

    def EdgeONFace(*args) -> "Standard_Boolean &":
        """
        :param par:
        	:type par: float
        	:param ed:
        	:type ed: TopoDS_Edge
        	:param uv:
        	:type uv: gp_Pnt2d
        	:param fa:
        	:type fa: TopoDS_Face
        	:param isonfa:
        	:type isonfa: bool
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_EdgeONFace(*args)

    EdgeONFace = staticmethod(EdgeONFace)

    def Getduv(*args) -> "Standard_Boolean":
        """
        :param f:
        	:type f: TopoDS_Face
        	:param uv:
        	:type uv: gp_Pnt2d
        	:param dir:
        	:type dir: gp_Vec
        	:param factor:
        	:type factor: float
        	:param duv:
        	:type duv: gp_Dir2d
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Getduv(*args)

    Getduv = staticmethod(Getduv)

    def Getstp3dF(*args) -> "Standard_Boolean":
        """
        :param p:
        	:type p: gp_Pnt
        	:param f:
        	:type f: TopoDS_Face
        	:param uv:
        	:type uv: gp_Pnt2d
        	:param st:
        	:type st: TopAbs_State
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Getstp3dF(*args)

    Getstp3dF = staticmethod(Getstp3dF)

    def IsClosingE(*args) -> "Standard_Boolean":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        :param E:
        	:type E: TopoDS_Edge
        	:param W:
        	:type W: TopoDS_Shape
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_IsClosingE(*args)

    IsClosingE = staticmethod(IsClosingE)

    def IsQuad(*args) -> "Standard_Boolean":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        :param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_IsQuad(*args)

    IsQuad = staticmethod(IsQuad)

    def IsonCLO(*args) -> "Standard_Boolean":
        """
        :param PC:
        	:type PC: Geom2d_Curve
        	:param onU:
        	:type onU: bool
        	:param xfirst:
        	:type xfirst: float
        	:param xperiod:
        	:type xperiod: float
        	:param xtol:
        	:type xtol: float
        	:rtype: bool
        :param C2DF:
        	:type C2DF: TopOpeBRepTool_C2DF
        	:param onU:
        	:type onU: bool
        	:param xfirst:
        	:type xfirst: float
        	:param xperiod:
        	:type xperiod: float
        	:param xtol:
        	:type xtol: float
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_IsonCLO(*args)

    IsonCLO = staticmethod(IsonCLO)

    def Matter(*args) -> "Standard_Real &":
        """
        :param d1:
        	:type d1: gp_Vec
        	:param d2:
        	:type d2: gp_Vec
        	:param ref:
        	:type ref: gp_Vec
        	:rtype: float
        :param d1:
        	:type d1: gp_Vec2d
        	:param d2:
        	:type d2: gp_Vec2d
        	:rtype: float
        :param xx1:
        	:type xx1: gp_Dir
        	:param nt1:
        	:type nt1: gp_Dir
        	:param xx2:
        	:type xx2: gp_Dir
        	:param nt2:
        	:type nt2: gp_Dir
        	:param tola:
        	:type tola: float
        	:param Ang:
        	:type Ang: float
        	:rtype: bool
        :param f1:
        	:type f1: TopoDS_Face
        	:param f2:
        	:type f2: TopoDS_Face
        	:param e:
        	:type e: TopoDS_Edge
        	:param pare:
        	:type pare: float
        	:param tola:
        	:type tola: float
        	:param Ang:
        	:type Ang: float
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Matter(*args)

    Matter = staticmethod(Matter)

    def MatterKPtg(*args) -> "Standard_Real &":
        """
        :param f1:
        	:type f1: TopoDS_Face
        	:param f2:
        	:type f2: TopoDS_Face
        	:param e:
        	:type e: TopoDS_Edge
        	:param Ang:
        	:type Ang: float
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_MatterKPtg(*args)

    MatterKPtg = staticmethod(MatterKPtg)

    def MkShell(*args) -> "void":
        """
        :param lF:
        	:type lF: TopTools_ListOfShape
        	:param She:
        	:type She: TopoDS_Shape
        	:rtype: void
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_MkShell(*args)

    MkShell = staticmethod(MkShell)

    def NgApp(*args) -> "Standard_Boolean":
        """
        :param par:
        	:type par: float
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param tola:
        	:type tola: float
        	:param ngApp:
        	:type ngApp: gp_Dir
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_NgApp(*args)

    NgApp = staticmethod(NgApp)

    def NggeomF(*args) -> "Standard_Boolean":
        """
        :param uv:
        	:type uv: gp_Pnt2d
        	:param F:
        	:type F: TopoDS_Face
        	:param ng:
        	:type ng: gp_Vec
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_NggeomF(*args)

    NggeomF = staticmethod(NggeomF)

    def Nt(*args) -> "Standard_Boolean":
        """
        :param uv:
        	:type uv: gp_Pnt2d
        	:param f:
        	:type f: TopoDS_Face
        	:param normt:
        	:type normt: gp_Dir
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Nt(*args)

    Nt = staticmethod(Nt)

    def OnBoundary(*args) -> "Standard_Integer":
        """
        :param par:
        	:type par: float
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_OnBoundary(*args)

    OnBoundary = staticmethod(OnBoundary)

    def OriinSor(*args) -> "Standard_Integer":
        """
        :param sub:
        	:type sub: TopoDS_Shape
        	:param S:
        	:type S: TopoDS_Shape
        	:param checkclo: default value is Standard_False
        	:type checkclo: bool
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_OriinSor(*args)

    OriinSor = staticmethod(OriinSor)

    def OriinSorclosed(*args) -> "Standard_Integer":
        """
        :param sub:
        	:type sub: TopoDS_Shape
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_OriinSorclosed(*args)

    OriinSorclosed = staticmethod(OriinSorclosed)

    def ParE(*args) -> "Standard_Real":
        """
        :param Iv:
        	:type Iv: int
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: float
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_ParE(*args)

    ParE = staticmethod(ParE)

    def ParE2d(*args) -> "Standard_Real &, Standard_Real &":
        """
        :param p2d:
        	:type p2d: gp_Pnt2d
        	:param e:
        	:type e: TopoDS_Edge
        	:param f:
        	:type f: TopoDS_Face
        	:param par:
        	:type par: float
        	:param dist:
        	:type dist: float
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_ParE2d(*args)

    ParE2d = staticmethod(ParE2d)

    def ParISO(*args) -> "Standard_Real &":
        """
        :param p2d:
        	:type p2d: gp_Pnt2d
        	:param e:
        	:type e: TopoDS_Edge
        	:param f:
        	:type f: TopoDS_Face
        	:param pare:
        	:type pare: float
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_ParISO(*args)

    ParISO = staticmethod(ParISO)

    def Remove(*args) -> "Standard_Boolean":
        """
        :param loS:
        	:type loS: TopTools_ListOfShape
        	:param toremove:
        	:type toremove: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Remove(*args)

    Remove = staticmethod(Remove)

    def SplitE(*args) -> "Standard_Boolean":
        """
        :param Eanc:
        	:type Eanc: TopoDS_Edge
        	:param Splits:
        	:type Splits: TopTools_ListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_SplitE(*args)

    SplitE = staticmethod(SplitE)

    def Tg2d(*args) -> "gp_Vec2d":
        """
        :param iv:
        	:type iv: int
        	:param E:
        	:type E: TopoDS_Edge
        	:param C2DF:
        	:type C2DF: TopOpeBRepTool_C2DF
        	:rtype: gp_Vec2d
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Tg2d(*args)

    Tg2d = staticmethod(Tg2d)

    def Tg2dApp(*args) -> "gp_Vec2d":
        """
        :param iv:
        	:type iv: int
        	:param E:
        	:type E: TopoDS_Edge
        	:param C2DF:
        	:type C2DF: TopOpeBRepTool_C2DF
        	:param factor:
        	:type factor: float
        	:rtype: gp_Vec2d
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Tg2dApp(*args)

    Tg2dApp = staticmethod(Tg2dApp)

    def TgINSIDE(*args) -> "Standard_Integer &":
        """
        :param v:
        	:type v: TopoDS_Vertex
        	:param E:
        	:type E: TopoDS_Edge
        	:param Tg:
        	:type Tg: gp_Vec
        	:param OvinE:
        	:type OvinE: int
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TgINSIDE(*args)

    TgINSIDE = staticmethod(TgINSIDE)

    def TggeomE(*args) -> "Standard_Boolean":
        """
        :param par:
        	:type par: float
        	:param BC:
        	:type BC: BRepAdaptor_Curve
        	:param Tg:
        	:type Tg: gp_Vec
        	:rtype: bool
        :param par:
        	:type par: float
        	:param E:
        	:type E: TopoDS_Edge
        	:param Tg:
        	:type Tg: gp_Vec
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TggeomE(*args)

    TggeomE = staticmethod(TggeomE)

    def TolP(*args) -> "Standard_Real":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: float
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TolP(*args)

    TolP = staticmethod(TolP)

    def TolUV(*args) -> "Standard_Real":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param tol3d:
        	:type tol3d: float
        	:rtype: float
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TolUV(*args)

    TolUV = staticmethod(TolUV)

    def TrslUV(*args) -> "void":
        """
        :param t2d:
        	:type t2d: gp_Vec2d
        	:param C2DF:
        	:type C2DF: TopOpeBRepTool_C2DF
        	:rtype: void
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TrslUV(*args)

    TrslUV = staticmethod(TrslUV)

    def TrslUVModifE(*args) -> "Standard_Boolean":
        """
        :param t2d:
        	:type t2d: gp_Vec2d
        	:param F:
        	:type F: TopoDS_Face
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TrslUVModifE(*args)

    TrslUVModifE = staticmethod(TrslUVModifE)

    def UVF(*args) -> "gp_Pnt2d":
        """
        :param par:
        	:type par: float
        	:param C2DF:
        	:type C2DF: TopOpeBRepTool_C2DF
        	:rtype: gp_Pnt2d
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_UVF(*args)

    UVF = staticmethod(UVF)

    def UVISO(*args) -> "Standard_Boolean &, Standard_Boolean &":
        """
        :param PC:
        	:type PC: Geom2d_Curve
        	:param isou:
        	:type isou: bool
        	:param isov:
        	:type isov: bool
        	:param d2d:
        	:type d2d: gp_Dir2d
        	:param o2d:
        	:type o2d: gp_Pnt2d
        	:rtype: bool
        :param C2DF:
        	:type C2DF: TopOpeBRepTool_C2DF
        	:param isou:
        	:type isou: bool
        	:param isov:
        	:type isov: bool
        	:param d2d:
        	:type d2d: gp_Dir2d
        	:param o2d:
        	:type o2d: gp_Pnt2d
        	:rtype: bool
        :param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param isou:
        	:type isou: bool
        	:param isov:
        	:type isov: bool
        	:param d2d:
        	:type d2d: gp_Dir2d
        	:param o2d:
        	:type o2d: gp_Pnt2d
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_UVISO(*args)

    UVISO = staticmethod(UVISO)

    def Vertex(*args) -> "TopoDS_Vertex":
        """
        :param Iv:
        	:type Iv: int
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: TopoDS_Vertex
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Vertex(*args)

    Vertex = staticmethod(Vertex)

    def Vertices(*args) -> "void":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param Vces:
        	:type Vces: TopTools_Array1OfShape
        	:rtype: void
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Vertices(*args)

    Vertices = staticmethod(Vertices)

    def WireToFace(*args) -> "Standard_Boolean":
        """
        :param Fref:
        	:type Fref: TopoDS_Face
        	:param mapWlow:
        	:type mapWlow: TopTools_DataMapOfShapeListOfShape
        	:param lFs:
        	:type lFs: TopTools_ListOfShape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_WireToFace(*args)

    WireToFace = staticmethod(WireToFace)

    def XX(*args) -> "Standard_Boolean":
        """
        :param uv:
        	:type uv: gp_Pnt2d
        	:param f:
        	:type f: TopoDS_Face
        	:param par:
        	:type par: float
        	:param e:
        	:type e: TopoDS_Edge
        	:param xx:
        	:type xx: gp_Dir
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_XX(*args)

    XX = staticmethod(XX)

    def minDUV(*args) -> "Standard_Real":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: float
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_minDUV(*args)

    minDUV = staticmethod(minDUV)

    def outUVbounds(*args) -> "Standard_Boolean":
        """
        :param uv:
        	:type uv: gp_Pnt2d
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_outUVbounds(*args)

    outUVbounds = staticmethod(outUVbounds)

    def stuvF(*args) -> "Standard_Integer &, Standard_Integer &":
        """
        :param uv:
        	:type uv: gp_Pnt2d
        	:param F:
        	:type F: TopoDS_Face
        	:param onU:
        	:type onU: int
        	:param onV:
        	:type onV: int
        	:rtype: void
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_stuvF(*args)

    stuvF = staticmethod(stuvF)

    def tryNgApp(*args) -> "Standard_Boolean":
        """
        :param par:
        	:type par: float
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param tola:
        	:type tola: float
        	:param ng:
        	:type ng: gp_Dir
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_tryNgApp(*args)

    tryNgApp = staticmethod(tryNgApp)

    def tryOriEinF(*args) -> "Standard_Integer":
        """
        :param par:
        	:type par: float
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_tryOriEinF(*args)

    tryOriEinF = staticmethod(tryOriEinF)

    def tryTg2dApp(*args) -> "gp_Vec2d":
        """
        :param iv:
        	:type iv: int
        	:param E:
        	:type E: TopoDS_Edge
        	:param C2DF:
        	:type C2DF: TopOpeBRepTool_C2DF
        	:param factor:
        	:type factor: float
        	:rtype: gp_Vec2d
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_tryTg2dApp(*args)

    tryTg2dApp = staticmethod(tryTg2dApp)

    def uvApp(*args) -> "Standard_Boolean":
        """
        :param f:
        	:type f: TopoDS_Face
        	:param e:
        	:type e: TopoDS_Edge
        	:param par:
        	:type par: float
        	:param eps:
        	:type eps: float
        	:param uvapp:
        	:type uvapp: gp_Pnt2d
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_TOOL_uvApp(*args)

    uvApp = staticmethod(uvApp)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRepTool.TopOpeBRepTool_TOOL_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_TOOL())
    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_TOOL
TopOpeBRepTool_TOOL_swigregister = _TopOpeBRepTool.TopOpeBRepTool_TOOL_swigregister
TopOpeBRepTool_TOOL_swigregister(TopOpeBRepTool_TOOL)

def TopOpeBRepTool_TOOL_ClosedE(*args) -> "Standard_Boolean":
    """
    :param E:
    	:type E: TopoDS_Edge
    	:param vclo:
    	:type vclo: TopoDS_Vertex
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_ClosedE(*args)

def TopOpeBRepTool_TOOL_ClosedS(*args) -> "Standard_Boolean":
    """
    :param F:
    	:type F: TopoDS_Face
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_ClosedS(*args)

def TopOpeBRepTool_TOOL_CurvE(*args) -> "Standard_Real &":
    """
    :param E:
    	:type E: TopoDS_Edge
    	:param par:
    	:type par: float
    	:param tg0:
    	:type tg0: gp_Dir
    	:param Curv:
    	:type Curv: float
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_CurvE(*args)

def TopOpeBRepTool_TOOL_CurvF(*args) -> "Standard_Real &, Standard_Boolean &":
    """
    :param F:
    	:type F: TopoDS_Face
    	:param uv:
    	:type uv: gp_Pnt2d
    	:param tg0:
    	:type tg0: gp_Dir
    	:param Curv:
    	:type Curv: float
    	:param direct:
    	:type direct: bool
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_CurvF(*args)

def TopOpeBRepTool_TOOL_EdgeONFace(*args) -> "Standard_Boolean &":
    """
    :param par:
    	:type par: float
    	:param ed:
    	:type ed: TopoDS_Edge
    	:param uv:
    	:type uv: gp_Pnt2d
    	:param fa:
    	:type fa: TopoDS_Face
    	:param isonfa:
    	:type isonfa: bool
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_EdgeONFace(*args)

def TopOpeBRepTool_TOOL_Getduv(*args) -> "Standard_Boolean":
    """
    :param f:
    	:type f: TopoDS_Face
    	:param uv:
    	:type uv: gp_Pnt2d
    	:param dir:
    	:type dir: gp_Vec
    	:param factor:
    	:type factor: float
    	:param duv:
    	:type duv: gp_Dir2d
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Getduv(*args)

def TopOpeBRepTool_TOOL_Getstp3dF(*args) -> "Standard_Boolean":
    """
    :param p:
    	:type p: gp_Pnt
    	:param f:
    	:type f: TopoDS_Face
    	:param uv:
    	:type uv: gp_Pnt2d
    	:param st:
    	:type st: TopAbs_State
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Getstp3dF(*args)

def TopOpeBRepTool_TOOL_IsClosingE(*args) -> "Standard_Boolean":
    """
    :param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: bool
    :param E:
    	:type E: TopoDS_Edge
    	:param W:
    	:type W: TopoDS_Shape
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_IsClosingE(*args)

def TopOpeBRepTool_TOOL_IsQuad(*args) -> "Standard_Boolean":
    """
    :param E:
    	:type E: TopoDS_Edge
    	:rtype: bool
    :param F:
    	:type F: TopoDS_Face
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_IsQuad(*args)

def TopOpeBRepTool_TOOL_IsonCLO(*args) -> "Standard_Boolean":
    """
    :param PC:
    	:type PC: Geom2d_Curve
    	:param onU:
    	:type onU: bool
    	:param xfirst:
    	:type xfirst: float
    	:param xperiod:
    	:type xperiod: float
    	:param xtol:
    	:type xtol: float
    	:rtype: bool
    :param C2DF:
    	:type C2DF: TopOpeBRepTool_C2DF
    	:param onU:
    	:type onU: bool
    	:param xfirst:
    	:type xfirst: float
    	:param xperiod:
    	:type xperiod: float
    	:param xtol:
    	:type xtol: float
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_IsonCLO(*args)

def TopOpeBRepTool_TOOL_Matter(*args) -> "Standard_Real &":
    """
    :param d1:
    	:type d1: gp_Vec
    	:param d2:
    	:type d2: gp_Vec
    	:param ref:
    	:type ref: gp_Vec
    	:rtype: float
    :param d1:
    	:type d1: gp_Vec2d
    	:param d2:
    	:type d2: gp_Vec2d
    	:rtype: float
    :param xx1:
    	:type xx1: gp_Dir
    	:param nt1:
    	:type nt1: gp_Dir
    	:param xx2:
    	:type xx2: gp_Dir
    	:param nt2:
    	:type nt2: gp_Dir
    	:param tola:
    	:type tola: float
    	:param Ang:
    	:type Ang: float
    	:rtype: bool
    :param f1:
    	:type f1: TopoDS_Face
    	:param f2:
    	:type f2: TopoDS_Face
    	:param e:
    	:type e: TopoDS_Edge
    	:param pare:
    	:type pare: float
    	:param tola:
    	:type tola: float
    	:param Ang:
    	:type Ang: float
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Matter(*args)

def TopOpeBRepTool_TOOL_MatterKPtg(*args) -> "Standard_Real &":
    """
    :param f1:
    	:type f1: TopoDS_Face
    	:param f2:
    	:type f2: TopoDS_Face
    	:param e:
    	:type e: TopoDS_Edge
    	:param Ang:
    	:type Ang: float
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_MatterKPtg(*args)

def TopOpeBRepTool_TOOL_MkShell(*args) -> "void":
    """
    :param lF:
    	:type lF: TopTools_ListOfShape
    	:param She:
    	:type She: TopoDS_Shape
    	:rtype: void
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_MkShell(*args)

def TopOpeBRepTool_TOOL_NgApp(*args) -> "Standard_Boolean":
    """
    :param par:
    	:type par: float
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:param tola:
    	:type tola: float
    	:param ngApp:
    	:type ngApp: gp_Dir
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_NgApp(*args)

def TopOpeBRepTool_TOOL_NggeomF(*args) -> "Standard_Boolean":
    """
    :param uv:
    	:type uv: gp_Pnt2d
    	:param F:
    	:type F: TopoDS_Face
    	:param ng:
    	:type ng: gp_Vec
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_NggeomF(*args)

def TopOpeBRepTool_TOOL_Nt(*args) -> "Standard_Boolean":
    """
    :param uv:
    	:type uv: gp_Pnt2d
    	:param f:
    	:type f: TopoDS_Face
    	:param normt:
    	:type normt: gp_Dir
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Nt(*args)

def TopOpeBRepTool_TOOL_OnBoundary(*args) -> "Standard_Integer":
    """
    :param par:
    	:type par: float
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: int
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_OnBoundary(*args)

def TopOpeBRepTool_TOOL_OriinSor(*args) -> "Standard_Integer":
    """
    :param sub:
    	:type sub: TopoDS_Shape
    	:param S:
    	:type S: TopoDS_Shape
    	:param checkclo: default value is Standard_False
    	:type checkclo: bool
    	:rtype: int
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_OriinSor(*args)

def TopOpeBRepTool_TOOL_OriinSorclosed(*args) -> "Standard_Integer":
    """
    :param sub:
    	:type sub: TopoDS_Shape
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: int
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_OriinSorclosed(*args)

def TopOpeBRepTool_TOOL_ParE(*args) -> "Standard_Real":
    """
    :param Iv:
    	:type Iv: int
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: float
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_ParE(*args)

def TopOpeBRepTool_TOOL_ParE2d(*args) -> "Standard_Real &, Standard_Real &":
    """
    :param p2d:
    	:type p2d: gp_Pnt2d
    	:param e:
    	:type e: TopoDS_Edge
    	:param f:
    	:type f: TopoDS_Face
    	:param par:
    	:type par: float
    	:param dist:
    	:type dist: float
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_ParE2d(*args)

def TopOpeBRepTool_TOOL_ParISO(*args) -> "Standard_Real &":
    """
    :param p2d:
    	:type p2d: gp_Pnt2d
    	:param e:
    	:type e: TopoDS_Edge
    	:param f:
    	:type f: TopoDS_Face
    	:param pare:
    	:type pare: float
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_ParISO(*args)

def TopOpeBRepTool_TOOL_Remove(*args) -> "Standard_Boolean":
    """
    :param loS:
    	:type loS: TopTools_ListOfShape
    	:param toremove:
    	:type toremove: TopoDS_Shape
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Remove(*args)

def TopOpeBRepTool_TOOL_SplitE(*args) -> "Standard_Boolean":
    """
    :param Eanc:
    	:type Eanc: TopoDS_Edge
    	:param Splits:
    	:type Splits: TopTools_ListOfShape
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_SplitE(*args)

def TopOpeBRepTool_TOOL_Tg2d(*args) -> "gp_Vec2d":
    """
    :param iv:
    	:type iv: int
    	:param E:
    	:type E: TopoDS_Edge
    	:param C2DF:
    	:type C2DF: TopOpeBRepTool_C2DF
    	:rtype: gp_Vec2d
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Tg2d(*args)

def TopOpeBRepTool_TOOL_Tg2dApp(*args) -> "gp_Vec2d":
    """
    :param iv:
    	:type iv: int
    	:param E:
    	:type E: TopoDS_Edge
    	:param C2DF:
    	:type C2DF: TopOpeBRepTool_C2DF
    	:param factor:
    	:type factor: float
    	:rtype: gp_Vec2d
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Tg2dApp(*args)

def TopOpeBRepTool_TOOL_TgINSIDE(*args) -> "Standard_Integer &":
    """
    :param v:
    	:type v: TopoDS_Vertex
    	:param E:
    	:type E: TopoDS_Edge
    	:param Tg:
    	:type Tg: gp_Vec
    	:param OvinE:
    	:type OvinE: int
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TgINSIDE(*args)

def TopOpeBRepTool_TOOL_TggeomE(*args) -> "Standard_Boolean":
    """
    :param par:
    	:type par: float
    	:param BC:
    	:type BC: BRepAdaptor_Curve
    	:param Tg:
    	:type Tg: gp_Vec
    	:rtype: bool
    :param par:
    	:type par: float
    	:param E:
    	:type E: TopoDS_Edge
    	:param Tg:
    	:type Tg: gp_Vec
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TggeomE(*args)

def TopOpeBRepTool_TOOL_TolP(*args) -> "Standard_Real":
    """
    :param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: float
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TolP(*args)

def TopOpeBRepTool_TOOL_TolUV(*args) -> "Standard_Real":
    """
    :param F:
    	:type F: TopoDS_Face
    	:param tol3d:
    	:type tol3d: float
    	:rtype: float
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TolUV(*args)

def TopOpeBRepTool_TOOL_TrslUV(*args) -> "void":
    """
    :param t2d:
    	:type t2d: gp_Vec2d
    	:param C2DF:
    	:type C2DF: TopOpeBRepTool_C2DF
    	:rtype: void
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TrslUV(*args)

def TopOpeBRepTool_TOOL_TrslUVModifE(*args) -> "Standard_Boolean":
    """
    :param t2d:
    	:type t2d: gp_Vec2d
    	:param F:
    	:type F: TopoDS_Face
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_TrslUVModifE(*args)

def TopOpeBRepTool_TOOL_UVF(*args) -> "gp_Pnt2d":
    """
    :param par:
    	:type par: float
    	:param C2DF:
    	:type C2DF: TopOpeBRepTool_C2DF
    	:rtype: gp_Pnt2d
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_UVF(*args)

def TopOpeBRepTool_TOOL_UVISO(*args) -> "Standard_Boolean &, Standard_Boolean &":
    """
    :param PC:
    	:type PC: Geom2d_Curve
    	:param isou:
    	:type isou: bool
    	:param isov:
    	:type isov: bool
    	:param d2d:
    	:type d2d: gp_Dir2d
    	:param o2d:
    	:type o2d: gp_Pnt2d
    	:rtype: bool
    :param C2DF:
    	:type C2DF: TopOpeBRepTool_C2DF
    	:param isou:
    	:type isou: bool
    	:param isov:
    	:type isov: bool
    	:param d2d:
    	:type d2d: gp_Dir2d
    	:param o2d:
    	:type o2d: gp_Pnt2d
    	:rtype: bool
    :param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:param isou:
    	:type isou: bool
    	:param isov:
    	:type isov: bool
    	:param d2d:
    	:type d2d: gp_Dir2d
    	:param o2d:
    	:type o2d: gp_Pnt2d
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_UVISO(*args)

def TopOpeBRepTool_TOOL_Vertex(*args) -> "TopoDS_Vertex":
    """
    :param Iv:
    	:type Iv: int
    	:param E:
    	:type E: TopoDS_Edge
    	:rtype: TopoDS_Vertex
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Vertex(*args)

def TopOpeBRepTool_TOOL_Vertices(*args) -> "void":
    """
    :param E:
    	:type E: TopoDS_Edge
    	:param Vces:
    	:type Vces: TopTools_Array1OfShape
    	:rtype: void
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_Vertices(*args)

def TopOpeBRepTool_TOOL_WireToFace(*args) -> "Standard_Boolean":
    """
    :param Fref:
    	:type Fref: TopoDS_Face
    	:param mapWlow:
    	:type mapWlow: TopTools_DataMapOfShapeListOfShape
    	:param lFs:
    	:type lFs: TopTools_ListOfShape
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_WireToFace(*args)

def TopOpeBRepTool_TOOL_XX(*args) -> "Standard_Boolean":
    """
    :param uv:
    	:type uv: gp_Pnt2d
    	:param f:
    	:type f: TopoDS_Face
    	:param par:
    	:type par: float
    	:param e:
    	:type e: TopoDS_Edge
    	:param xx:
    	:type xx: gp_Dir
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_XX(*args)

def TopOpeBRepTool_TOOL_minDUV(*args) -> "Standard_Real":
    """
    :param F:
    	:type F: TopoDS_Face
    	:rtype: float
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_minDUV(*args)

def TopOpeBRepTool_TOOL_outUVbounds(*args) -> "Standard_Boolean":
    """
    :param uv:
    	:type uv: gp_Pnt2d
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_outUVbounds(*args)

def TopOpeBRepTool_TOOL_stuvF(*args) -> "Standard_Integer &, Standard_Integer &":
    """
    :param uv:
    	:type uv: gp_Pnt2d
    	:param F:
    	:type F: TopoDS_Face
    	:param onU:
    	:type onU: int
    	:param onV:
    	:type onV: int
    	:rtype: void
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_stuvF(*args)

def TopOpeBRepTool_TOOL_tryNgApp(*args) -> "Standard_Boolean":
    """
    :param par:
    	:type par: float
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:param tola:
    	:type tola: float
    	:param ng:
    	:type ng: gp_Dir
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_tryNgApp(*args)

def TopOpeBRepTool_TOOL_tryOriEinF(*args) -> "Standard_Integer":
    """
    :param par:
    	:type par: float
    	:param E:
    	:type E: TopoDS_Edge
    	:param F:
    	:type F: TopoDS_Face
    	:rtype: int
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_tryOriEinF(*args)

def TopOpeBRepTool_TOOL_tryTg2dApp(*args) -> "gp_Vec2d":
    """
    :param iv:
    	:type iv: int
    	:param E:
    	:type E: TopoDS_Edge
    	:param C2DF:
    	:type C2DF: TopOpeBRepTool_C2DF
    	:param factor:
    	:type factor: float
    	:rtype: gp_Vec2d
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_tryTg2dApp(*args)

def TopOpeBRepTool_TOOL_uvApp(*args) -> "Standard_Boolean":
    """
    :param f:
    	:type f: TopoDS_Face
    	:param e:
    	:type e: TopoDS_Edge
    	:param par:
    	:type par: float
    	:param eps:
    	:type eps: float
    	:param uvapp:
    	:type uvapp: gp_Pnt2d
    	:rtype: bool
    """
    return _TopOpeBRepTool.TopOpeBRepTool_TOOL_uvApp(*args)

class TopOpeBRepTool_connexity(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddItem(self, *args) -> "void":
        """
        :param OriKey:
        	:type OriKey: int
        	:param Item:
        	:type Item: TopTools_ListOfShape
        	:rtype: None
        :param OriKey:
        	:type OriKey: int
        	:param Item:
        	:type Item: TopoDS_Shape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_connexity_AddItem(self, *args)


    def AllItems(self, *args) -> "Standard_Integer":
        """
        :param Item:
        	:type Item: TopTools_ListOfShape
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_connexity_AllItems(self, *args)


    def ChangeItem(self, *args) -> "TopTools_ListOfShape &":
        """
        :param OriKey:
        	:type OriKey: int
        	:rtype: TopTools_ListOfShape
        """
        return _TopOpeBRepTool.TopOpeBRepTool_connexity_ChangeItem(self, *args)


    def IsFaulty(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_connexity_IsFaulty(self, *args)


    def IsInternal(self, *args) -> "Standard_Integer":
        """
        :param Item:
        	:type Item: TopTools_ListOfShape
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_connexity_IsInternal(self, *args)


    def IsMultiple(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_connexity_IsMultiple(self, *args)


    def Item(self, *args) -> "Standard_Integer":
        """
        :param OriKey:
        	:type OriKey: int
        	:param Item:
        	:type Item: TopTools_ListOfShape
        	:rtype: int
        """
        return _TopOpeBRepTool.TopOpeBRepTool_connexity_Item(self, *args)


    def Key(self, *args) -> "TopoDS_Shape const":
        """:rtype: TopoDS_Shape"""
        return _TopOpeBRepTool.TopOpeBRepTool_connexity_Key(self, *args)


    def RemoveItem(self, *args) -> "Standard_Boolean":
        """
        :param OriKey:
        	:type OriKey: int
        	:param Item:
        	:type Item: TopoDS_Shape
        	:rtype: bool
        :param Item:
        	:type Item: TopoDS_Shape
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_connexity_RemoveItem(self, *args)


    def SetKey(self, *args) -> "void":
        """
        :param Key:
        	:type Key: TopoDS_Shape
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_connexity_SetKey(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param Key:
        	:type Key: TopoDS_Shape
        	:rtype: None
        """
        _TopOpeBRepTool.TopOpeBRepTool_connexity_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_connexity(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_connexity
TopOpeBRepTool_connexity.AddItem = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_connexity_AddItem, None, TopOpeBRepTool_connexity)
TopOpeBRepTool_connexity.AllItems = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_connexity_AllItems, None, TopOpeBRepTool_connexity)
TopOpeBRepTool_connexity.ChangeItem = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_connexity_ChangeItem, None, TopOpeBRepTool_connexity)
TopOpeBRepTool_connexity.IsFaulty = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_connexity_IsFaulty, None, TopOpeBRepTool_connexity)
TopOpeBRepTool_connexity.IsInternal = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_connexity_IsInternal, None, TopOpeBRepTool_connexity)
TopOpeBRepTool_connexity.IsMultiple = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_connexity_IsMultiple, None, TopOpeBRepTool_connexity)
TopOpeBRepTool_connexity.Item = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_connexity_Item, None, TopOpeBRepTool_connexity)
TopOpeBRepTool_connexity.Key = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_connexity_Key, None, TopOpeBRepTool_connexity)
TopOpeBRepTool_connexity.RemoveItem = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_connexity_RemoveItem, None, TopOpeBRepTool_connexity)
TopOpeBRepTool_connexity.SetKey = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_connexity_SetKey, None, TopOpeBRepTool_connexity)
TopOpeBRepTool_connexity_swigregister = _TopOpeBRepTool.TopOpeBRepTool_connexity_swigregister
TopOpeBRepTool_connexity_swigregister(TopOpeBRepTool_connexity)

class TopOpeBRepTool_face(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Ffinite(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _TopOpeBRepTool.TopOpeBRepTool_face_Ffinite(self, *args)


    def Finite(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_face_Finite(self, *args)


    def Init(self, *args) -> "Standard_Boolean":
        """
        :param W:
        	:type W: TopoDS_Wire
        	:param Fref:
        	:type Fref: TopoDS_Face
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_face_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_face_IsDone(self, *args)


    def RealF(self, *args) -> "TopoDS_Face":
        """:rtype: TopoDS_Face"""
        return _TopOpeBRepTool.TopOpeBRepTool_face_RealF(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRepTool.TopOpeBRepTool_face_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_face(*args))

    def W(self, *args) -> "TopoDS_Wire const":
        """:rtype: TopoDS_Wire"""
        return _TopOpeBRepTool.TopOpeBRepTool_face_W(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_face
TopOpeBRepTool_face.Ffinite = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_face_Ffinite, None, TopOpeBRepTool_face)
TopOpeBRepTool_face.Finite = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_face_Finite, None, TopOpeBRepTool_face)
TopOpeBRepTool_face.Init = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_face_Init, None, TopOpeBRepTool_face)
TopOpeBRepTool_face.IsDone = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_face_IsDone, None, TopOpeBRepTool_face)
TopOpeBRepTool_face.RealF = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_face_RealF, None, TopOpeBRepTool_face)
TopOpeBRepTool_face.W = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_face_W, None, TopOpeBRepTool_face)
TopOpeBRepTool_face_swigregister = _TopOpeBRepTool.TopOpeBRepTool_face_swigregister
TopOpeBRepTool_face_swigregister(TopOpeBRepTool_face)

class TopOpeBRepTool_makeTransition(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Getfactor(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TopOpeBRepTool.TopOpeBRepTool_makeTransition_Getfactor(self, *args)


    def HasRest(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_makeTransition_HasRest(self, *args)


    def Initialize(self, *args) -> "Standard_Boolean":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param pbef:
        	:type pbef: float
        	:param paft:
        	:type paft: float
        	:param parE:
        	:type parE: float
        	:param FS:
        	:type FS: TopoDS_Face
        	:param uv:
        	:type uv: gp_Pnt2d
        	:param factor:
        	:type factor: float
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_makeTransition_Initialize(self, *args)


    def IsT2d(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopOpeBRepTool.TopOpeBRepTool_makeTransition_IsT2d(self, *args)


    def MkT2donE(self, *args) -> "Standard_Boolean":
        """
        :param stb:
        	:type stb: TopAbs_State
        	:param sta:
        	:type sta: TopAbs_State
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_makeTransition_MkT2donE(self, *args)


    def MkT3dproj(self, *args) -> "Standard_Boolean":
        """
        :param stb:
        	:type stb: TopAbs_State
        	:param sta:
        	:type sta: TopAbs_State
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_makeTransition_MkT3dproj(self, *args)


    def MkT3onE(self, *args) -> "Standard_Boolean":
        """
        :param stb:
        	:type stb: TopAbs_State
        	:param sta:
        	:type sta: TopAbs_State
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_makeTransition_MkT3onE(self, *args)


    def MkTonE(self, *args) -> "Standard_Boolean":
        """
        :param stb:
        	:type stb: TopAbs_State
        	:param sta:
        	:type sta: TopAbs_State
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_makeTransition_MkTonE(self, *args)


    def SetRest(self, *args) -> "Standard_Boolean":
        """
        :param ES:
        	:type ES: TopoDS_Edge
        	:param parES:
        	:type parES: float
        	:rtype: bool
        """
        return _TopOpeBRepTool.TopOpeBRepTool_makeTransition_SetRest(self, *args)


    def Setfactor(self, *args) -> "void":
        """
        :param factor:
        	:type factor: float
        	:rtype: None
        """
        return _TopOpeBRepTool.TopOpeBRepTool_makeTransition_Setfactor(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _TopOpeBRepTool.TopOpeBRepTool_makeTransition_swiginit(self, _TopOpeBRepTool.new_TopOpeBRepTool_makeTransition(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRepTool.delete_TopOpeBRepTool_makeTransition
TopOpeBRepTool_makeTransition.Getfactor = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_makeTransition_Getfactor, None, TopOpeBRepTool_makeTransition)
TopOpeBRepTool_makeTransition.HasRest = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_makeTransition_HasRest, None, TopOpeBRepTool_makeTransition)
TopOpeBRepTool_makeTransition.Initialize = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_makeTransition_Initialize, None, TopOpeBRepTool_makeTransition)
TopOpeBRepTool_makeTransition.IsT2d = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_makeTransition_IsT2d, None, TopOpeBRepTool_makeTransition)
TopOpeBRepTool_makeTransition.MkT2donE = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_makeTransition_MkT2donE, None, TopOpeBRepTool_makeTransition)
TopOpeBRepTool_makeTransition.MkT3dproj = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_makeTransition_MkT3dproj, None, TopOpeBRepTool_makeTransition)
TopOpeBRepTool_makeTransition.MkT3onE = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_makeTransition_MkT3onE, None, TopOpeBRepTool_makeTransition)
TopOpeBRepTool_makeTransition.MkTonE = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_makeTransition_MkTonE, None, TopOpeBRepTool_makeTransition)
TopOpeBRepTool_makeTransition.SetRest = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_makeTransition_SetRest, None, TopOpeBRepTool_makeTransition)
TopOpeBRepTool_makeTransition.Setfactor = new_instancemethod(_TopOpeBRepTool.TopOpeBRepTool_makeTransition_Setfactor, None, TopOpeBRepTool_makeTransition)
TopOpeBRepTool_makeTransition_swigregister = _TopOpeBRepTool.TopOpeBRepTool_makeTransition_swigregister
TopOpeBRepTool_makeTransition_swigregister(TopOpeBRepTool_makeTransition)



