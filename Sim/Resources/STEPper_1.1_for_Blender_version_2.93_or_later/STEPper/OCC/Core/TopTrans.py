# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopTrans module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_toptrans.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TopTrans.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopTrans')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopTrans')
    _TopTrans = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopTrans', [dirname(__file__)])
        except ImportError:
            import _TopTrans
            return _TopTrans
        try:
            _mod = imp.load_module('_TopTrans', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopTrans = swig_import_helper()
    del swig_import_helper
else:
    import _TopTrans
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopTrans.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TopTrans.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TopTrans.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TopTrans.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TopTrans.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TopTrans.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TopTrans.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TopTrans.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TopTrans.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TopTrans.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TopTrans.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TopTrans.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TopTrans.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TopTrans.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TopTrans.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TopTrans.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TopTrans.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TopTrans.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopTrans.process_exception(error, method_name, class_name)
process_exception = _TopTrans.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TopAbs
class TopTrans_Array2OfOrientation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopTrans.TopTrans_Array2OfOrientation_swiginit(self, _TopTrans.new_TopTrans_Array2OfOrientation(*args))
    __swig_destroy__ = _TopTrans.delete_TopTrans_Array2OfOrientation
TopTrans_Array2OfOrientation.Init = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_Init, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.Size = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_Size, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.Length = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_Length, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.NbRows = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_NbRows, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.NbColumns = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_NbColumns, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.RowLength = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_RowLength, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.ColLength = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_ColLength, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.LowerRow = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_LowerRow, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.UpperRow = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_UpperRow, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.LowerCol = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_LowerCol, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.UpperCol = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_UpperCol, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.IsDeletable = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_IsDeletable, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.Assign = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_Assign, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.Move = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_Move, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.Set = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_Set, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.Value = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_Value, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.ChangeValue = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_ChangeValue, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.__call__ = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation___call__, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.SetValue = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_SetValue, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation.Resize = new_instancemethod(_TopTrans.TopTrans_Array2OfOrientation_Resize, None, TopTrans_Array2OfOrientation)
TopTrans_Array2OfOrientation_swigregister = _TopTrans.TopTrans_Array2OfOrientation_swigregister
TopTrans_Array2OfOrientation_swigregister(TopTrans_Array2OfOrientation)

class TopTrans_CurveTransition(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Compare(self, *args) -> "void":
        """
        * Add a curve element to the boundary. If Or is REVERSED the curve is before the intersection, else if Or is FORWARD the curv is after the intersection and if Or is INTERNAL the intersection is in the middle of the curv.
        	:param Tole:
        	:type Tole: float
        	:param Tang:
        	:type Tang: gp_Dir
        	:param Norm:
        	:type Norm: gp_Dir
        	:param Curv:
        	:type Curv: float
        	:param S:
        	:type S: TopAbs_Orientation
        	:param Or:
        	:type Or: TopAbs_Orientation
        	:rtype: None
        """
        return _TopTrans.TopTrans_CurveTransition_Compare(self, *args)


    def Reset(self, *args) -> "void":
        """
        * Initialize a Transition with the local description of a Curve.
        	:param Tgt:
        	:type Tgt: gp_Dir
        	:param Norm:
        	:type Norm: gp_Dir
        	:param Curv:
        	:type Curv: float
        	:rtype: None
        * Initialize a Transition with the local description of a straigth line.
        	:param Tgt:
        	:type Tgt: gp_Dir
        	:rtype: None
        """
        return _TopTrans.TopTrans_CurveTransition_Reset(self, *args)


    def StateAfter(self, *args) -> "TopAbs_State":
        """
        * returns the state of the curve after the intersection, this is the position relative to the boundary of a point very close to the intersection on the positive side of the tangent.
        	:rtype: TopAbs_State
        """
        return _TopTrans.TopTrans_CurveTransition_StateAfter(self, *args)


    def StateBefore(self, *args) -> "TopAbs_State":
        """
        * returns the state of the curve before the intersection, this is the position relative to the boundary of a point very close to the intersection on the negative side of the tangent.
        	:rtype: TopAbs_State
        """
        return _TopTrans.TopTrans_CurveTransition_StateBefore(self, *args)


    def __init__(self, *args):
        """
        * Create an empty Curve Transition.
        	:rtype: None
        """
        _TopTrans.TopTrans_CurveTransition_swiginit(self, _TopTrans.new_TopTrans_CurveTransition(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopTrans.delete_TopTrans_CurveTransition
TopTrans_CurveTransition.Compare = new_instancemethod(_TopTrans.TopTrans_CurveTransition_Compare, None, TopTrans_CurveTransition)
TopTrans_CurveTransition.Reset = new_instancemethod(_TopTrans.TopTrans_CurveTransition_Reset, None, TopTrans_CurveTransition)
TopTrans_CurveTransition.StateAfter = new_instancemethod(_TopTrans.TopTrans_CurveTransition_StateAfter, None, TopTrans_CurveTransition)
TopTrans_CurveTransition.StateBefore = new_instancemethod(_TopTrans.TopTrans_CurveTransition_StateBefore, None, TopTrans_CurveTransition)
TopTrans_CurveTransition_swigregister = _TopTrans.TopTrans_CurveTransition_swigregister
TopTrans_CurveTransition_swigregister(TopTrans_CurveTransition)

class TopTrans_SurfaceTransition(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Compare(self, *args) -> "void":
        """
        * Add a face element to the boundary. //! - S defines topological orientation for the face : S FORWARD means: along the intersection curve on the reference surface, transition states while crossing the face are OUT,IN. S REVERSED means states are IN,OUT. S INTERNAL means states are IN,IN. //! - O defines curve's position on face : O FORWARD means the face is before the intersection O REVERSED means the face is AFTER O INTERNAL means the curve intersection is in the face. PREQUESITORY : Norm oriented OUTSIDE 'geometric matter'
        	:param Tole:
        	:type Tole: float
        	:param Norm:
        	:type Norm: gp_Dir
        	:param MaxD:
        	:type MaxD: gp_Dir
        	:param MinD:
        	:type MinD: gp_Dir
        	:param MaxCurv:
        	:type MaxCurv: float
        	:param MinCurv:
        	:type MinCurv: float
        	:param S:
        	:type S: TopAbs_Orientation
        	:param O:
        	:type O: TopAbs_Orientation
        	:rtype: None
        * Add a plane or a cylindric face to the boundary.
        	:param Tole:
        	:type Tole: float
        	:param Norm:
        	:type Norm: gp_Dir
        	:param S:
        	:type S: TopAbs_Orientation
        	:param O:
        	:type O: TopAbs_Orientation
        	:rtype: None
        """
        return _TopTrans.TopTrans_SurfaceTransition_Compare(self, *args)


    def GetAfter(*args) -> "TopAbs_State":
        """
        :param Tran:
        	:type Tran: TopAbs_Orientation
        	:rtype: TopAbs_State
        """
        return _TopTrans.TopTrans_SurfaceTransition_GetAfter(*args)

    GetAfter = staticmethod(GetAfter)

    def GetBefore(*args) -> "TopAbs_State":
        """
        :param Tran:
        	:type Tran: TopAbs_Orientation
        	:rtype: TopAbs_State
        """
        return _TopTrans.TopTrans_SurfaceTransition_GetBefore(*args)

    GetBefore = staticmethod(GetBefore)

    def Reset(self, *args) -> "void":
        """
        * Initialize a Surface Transition with the local description of the intersection curve and of the reference surface. PREQUESITORY : Norm oriented OUTSIDE 'geometric matter'
        	:param Tgt:
        	:type Tgt: gp_Dir
        	:param Norm:
        	:type Norm: gp_Dir
        	:param MaxD:
        	:type MaxD: gp_Dir
        	:param MinD:
        	:type MinD: gp_Dir
        	:param MaxCurv:
        	:type MaxCurv: float
        	:param MinCurv:
        	:type MinCurv: float
        	:rtype: None
        * Initialize a Surface Transition with the local description of a straight line.
        	:param Tgt:
        	:type Tgt: gp_Dir
        	:param Norm:
        	:type Norm: gp_Dir
        	:rtype: None
        """
        return _TopTrans.TopTrans_SurfaceTransition_Reset(self, *args)


    def StateAfter(self, *args) -> "TopAbs_State":
        """
        * Returns the state of the reference surface after interference, this is the position relative to the surface of a point very close to the intersection on the positive side of the tangent.
        	:rtype: TopAbs_State
        """
        return _TopTrans.TopTrans_SurfaceTransition_StateAfter(self, *args)


    def StateBefore(self, *args) -> "TopAbs_State":
        """
        * Returns the state of the reference surface before the interference, this is the position relative to the surface of a point very close to the intersection on the negative side of the tangent.
        	:rtype: TopAbs_State
        """
        return _TopTrans.TopTrans_SurfaceTransition_StateBefore(self, *args)


    def __init__(self, *args):
        """
        * Create an empty Surface Transition.
        	:rtype: None
        """
        _TopTrans.TopTrans_SurfaceTransition_swiginit(self, _TopTrans.new_TopTrans_SurfaceTransition(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopTrans.delete_TopTrans_SurfaceTransition
TopTrans_SurfaceTransition.Compare = new_instancemethod(_TopTrans.TopTrans_SurfaceTransition_Compare, None, TopTrans_SurfaceTransition)
TopTrans_SurfaceTransition.Reset = new_instancemethod(_TopTrans.TopTrans_SurfaceTransition_Reset, None, TopTrans_SurfaceTransition)
TopTrans_SurfaceTransition.StateAfter = new_instancemethod(_TopTrans.TopTrans_SurfaceTransition_StateAfter, None, TopTrans_SurfaceTransition)
TopTrans_SurfaceTransition.StateBefore = new_instancemethod(_TopTrans.TopTrans_SurfaceTransition_StateBefore, None, TopTrans_SurfaceTransition)
TopTrans_SurfaceTransition_swigregister = _TopTrans.TopTrans_SurfaceTransition_swigregister
TopTrans_SurfaceTransition_swigregister(TopTrans_SurfaceTransition)

def TopTrans_SurfaceTransition_GetAfter(*args) -> "TopAbs_State":
    """
    :param Tran:
    	:type Tran: TopAbs_Orientation
    	:rtype: TopAbs_State
    """
    return _TopTrans.TopTrans_SurfaceTransition_GetAfter(*args)

def TopTrans_SurfaceTransition_GetBefore(*args) -> "TopAbs_State":
    """
    :param Tran:
    	:type Tran: TopAbs_Orientation
    	:rtype: TopAbs_State
    """
    return _TopTrans.TopTrans_SurfaceTransition_GetBefore(*args)



