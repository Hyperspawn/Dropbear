# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopoDSToStep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_topodstostep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TopoDSToStep.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopoDSToStep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopoDSToStep')
    _TopoDSToStep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopoDSToStep', [dirname(__file__)])
        except ImportError:
            import _TopoDSToStep
            return _TopoDSToStep
        try:
            _mod = imp.load_module('_TopoDSToStep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopoDSToStep = swig_import_helper()
    del swig_import_helper
else:
    import _TopoDSToStep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopoDSToStep.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TopoDSToStep.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TopoDSToStep.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TopoDSToStep.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TopoDSToStep.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TopoDSToStep.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TopoDSToStep.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TopoDSToStep.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TopoDSToStep.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TopoDSToStep.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TopoDSToStep.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TopoDSToStep.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TopoDSToStep.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TopoDSToStep.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TopoDSToStep.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TopoDSToStep.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TopoDSToStep.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TopoDSToStep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopoDSToStep.process_exception(error, method_name, class_name)
process_exception = _TopoDSToStep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Transfer
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.StepShape
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.StepRepr
import OCC.Core.StepBasic
TopoDSToStep_EdgeDone = _TopoDSToStep.TopoDSToStep_EdgeDone
TopoDSToStep_NonManifoldEdge = _TopoDSToStep.TopoDSToStep_NonManifoldEdge
TopoDSToStep_EdgeOther = _TopoDSToStep.TopoDSToStep_EdgeOther
TopoDSToStep_BuilderDone = _TopoDSToStep.TopoDSToStep_BuilderDone
TopoDSToStep_NoFaceMapped = _TopoDSToStep.TopoDSToStep_NoFaceMapped
TopoDSToStep_BuilderOther = _TopoDSToStep.TopoDSToStep_BuilderOther
TopoDSToStep_VertexDone = _TopoDSToStep.TopoDSToStep_VertexDone
TopoDSToStep_VertexOther = _TopoDSToStep.TopoDSToStep_VertexOther
TopoDSToStep_WireDone = _TopoDSToStep.TopoDSToStep_WireDone
TopoDSToStep_NonManifoldWire = _TopoDSToStep.TopoDSToStep_NonManifoldWire
TopoDSToStep_WireOther = _TopoDSToStep.TopoDSToStep_WireOther
TopoDSToStep_FaceDone = _TopoDSToStep.TopoDSToStep_FaceDone
TopoDSToStep_InfiniteFace = _TopoDSToStep.TopoDSToStep_InfiniteFace
TopoDSToStep_NonManifoldFace = _TopoDSToStep.TopoDSToStep_NonManifoldFace
TopoDSToStep_NoWireMapped = _TopoDSToStep.TopoDSToStep_NoWireMapped
TopoDSToStep_FaceOther = _TopoDSToStep.TopoDSToStep_FaceOther
TopoDSToStep_FacetedDone = _TopoDSToStep.TopoDSToStep_FacetedDone
TopoDSToStep_SurfaceNotPlane = _TopoDSToStep.TopoDSToStep_SurfaceNotPlane
TopoDSToStep_PCurveNotLinear = _TopoDSToStep.TopoDSToStep_PCurveNotLinear
class topodstostep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddResult(*args) -> "void":
        """
        * Adds an entity into the list of results (binders) for shape stored in FinderProcess
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:param Shape:
        	:type Shape: TopoDS_Shape
        	:param entity:
        	:type entity: Standard_Transient
        	:rtype: void
        * Adds all entities recorded in Tool into the map of results (binders) stored in FinderProcess
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:param Tool:
        	:type Tool: TopoDSToStep_Tool
        	:rtype: void
        """
        return _TopoDSToStep.topodstostep_AddResult(*args)

    AddResult = staticmethod(AddResult)

    def DecodeBuilderError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param E:
        	:type E: TopoDSToStep_BuilderError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _TopoDSToStep.topodstostep_DecodeBuilderError(*args)

    DecodeBuilderError = staticmethod(DecodeBuilderError)

    def DecodeEdgeError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param E:
        	:type E: TopoDSToStep_MakeEdgeError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _TopoDSToStep.topodstostep_DecodeEdgeError(*args)

    DecodeEdgeError = staticmethod(DecodeEdgeError)

    def DecodeFaceError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param E:
        	:type E: TopoDSToStep_MakeFaceError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _TopoDSToStep.topodstostep_DecodeFaceError(*args)

    DecodeFaceError = staticmethod(DecodeFaceError)

    def DecodeVertexError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        * Returns a new shape without undirect surfaces.
        	:param E:
        	:type E: TopoDSToStep_MakeVertexError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _TopoDSToStep.topodstostep_DecodeVertexError(*args)

    DecodeVertexError = staticmethod(DecodeVertexError)

    def DecodeWireError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        :param E:
        	:type E: TopoDSToStep_MakeWireError
        	:rtype: opencascade::handle<TCollection_HAsciiString>
        """
        return _TopoDSToStep.topodstostep_DecodeWireError(*args)

    DecodeWireError = staticmethod(DecodeWireError)

    __repr__ = _dumps_object


    def __init__(self):
        _TopoDSToStep.topodstostep_swiginit(self, _TopoDSToStep.new_topodstostep())
    __swig_destroy__ = _TopoDSToStep.delete_topodstostep
topodstostep_swigregister = _TopoDSToStep.topodstostep_swigregister
topodstostep_swigregister(topodstostep)

def topodstostep_AddResult(*args) -> "void":
    """
    * Adds an entity into the list of results (binders) for shape stored in FinderProcess
    	:param FP:
    	:type FP: Transfer_FinderProcess
    	:param Shape:
    	:type Shape: TopoDS_Shape
    	:param entity:
    	:type entity: Standard_Transient
    	:rtype: void
    * Adds all entities recorded in Tool into the map of results (binders) stored in FinderProcess
    	:param FP:
    	:type FP: Transfer_FinderProcess
    	:param Tool:
    	:type Tool: TopoDSToStep_Tool
    	:rtype: void
    """
    return _TopoDSToStep.topodstostep_AddResult(*args)

def topodstostep_DecodeBuilderError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param E:
    	:type E: TopoDSToStep_BuilderError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _TopoDSToStep.topodstostep_DecodeBuilderError(*args)

def topodstostep_DecodeEdgeError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param E:
    	:type E: TopoDSToStep_MakeEdgeError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _TopoDSToStep.topodstostep_DecodeEdgeError(*args)

def topodstostep_DecodeFaceError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param E:
    	:type E: TopoDSToStep_MakeFaceError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _TopoDSToStep.topodstostep_DecodeFaceError(*args)

def topodstostep_DecodeVertexError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    * Returns a new shape without undirect surfaces.
    	:param E:
    	:type E: TopoDSToStep_MakeVertexError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _TopoDSToStep.topodstostep_DecodeVertexError(*args)

def topodstostep_DecodeWireError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    :param E:
    	:type E: TopoDSToStep_MakeWireError
    	:rtype: opencascade::handle<TCollection_HAsciiString>
    """
    return _TopoDSToStep.topodstostep_DecodeWireError(*args)

class TopoDSToStep_FacetedTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CheckTopoDSShape(*args) -> "TopoDSToStep_FacetedError":
        """
        :param SH:
        	:type SH: TopoDS_Shape
        	:rtype: TopoDSToStep_FacetedError
        """
        return _TopoDSToStep.TopoDSToStep_FacetedTool_CheckTopoDSShape(*args)

    CheckTopoDSShape = staticmethod(CheckTopoDSShape)

    __repr__ = _dumps_object


    def __init__(self):
        _TopoDSToStep.TopoDSToStep_FacetedTool_swiginit(self, _TopoDSToStep.new_TopoDSToStep_FacetedTool())
    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_FacetedTool
TopoDSToStep_FacetedTool_swigregister = _TopoDSToStep.TopoDSToStep_FacetedTool_swigregister
TopoDSToStep_FacetedTool_swigregister(TopoDSToStep_FacetedTool)

def TopoDSToStep_FacetedTool_CheckTopoDSShape(*args) -> "TopoDSToStep_FacetedError":
    """
    :param SH:
    	:type SH: TopoDS_Shape
    	:rtype: TopoDSToStep_FacetedError
    """
    return _TopoDSToStep.TopoDSToStep_FacetedTool_CheckTopoDSShape(*args)

class TopoDSToStep_Root(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsDone(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopoDSToStep.TopoDSToStep_Root_IsDone(self, *args)


    def GetTolerance(self) -> "Standard_Real":
        """GetTolerance(TopoDSToStep_Root self) -> Standard_Real"""
        return _TopoDSToStep.TopoDSToStep_Root_GetTolerance(self)


    def SetTolerance(self, value: 'Standard_Real') -> "void":
        """SetTolerance(TopoDSToStep_Root self, Standard_Real value)"""
        return _TopoDSToStep.TopoDSToStep_Root_SetTolerance(self, value)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_Root
TopoDSToStep_Root.IsDone = new_instancemethod(_TopoDSToStep.TopoDSToStep_Root_IsDone, None, TopoDSToStep_Root)
TopoDSToStep_Root.GetTolerance = new_instancemethod(_TopoDSToStep.TopoDSToStep_Root_GetTolerance, None, TopoDSToStep_Root)
TopoDSToStep_Root.SetTolerance = new_instancemethod(_TopoDSToStep.TopoDSToStep_Root_SetTolerance, None, TopoDSToStep_Root)
TopoDSToStep_Root_swigregister = _TopoDSToStep.TopoDSToStep_Root_swigregister
TopoDSToStep_Root_swigregister(TopoDSToStep_Root)

class TopoDSToStep_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Bind(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param T:
        	:type T: StepShape_TopologicalRepresentationItem
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_Tool_Bind(self, *args)


    def CurrentEdge(self, *args) -> "TopoDS_Edge const":
        """:rtype: TopoDS_Edge"""
        return _TopoDSToStep.TopoDSToStep_Tool_CurrentEdge(self, *args)


    def CurrentFace(self, *args) -> "TopoDS_Face const":
        """:rtype: TopoDS_Face"""
        return _TopoDSToStep.TopoDSToStep_Tool_CurrentFace(self, *args)


    def CurrentShell(self, *args) -> "TopoDS_Shell const":
        """:rtype: TopoDS_Shell"""
        return _TopoDSToStep.TopoDSToStep_Tool_CurrentShell(self, *args)


    def CurrentVertex(self, *args) -> "TopoDS_Vertex const":
        """:rtype: TopoDS_Vertex"""
        return _TopoDSToStep.TopoDSToStep_Tool_CurrentVertex(self, *args)


    def CurrentWire(self, *args) -> "TopoDS_Wire const":
        """:rtype: TopoDS_Wire"""
        return _TopoDSToStep.TopoDSToStep_Tool_CurrentWire(self, *args)


    def Faceted(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopoDSToStep.TopoDSToStep_Tool_Faceted(self, *args)


    def Find(self, *args) -> "opencascade::handle< StepShape_TopologicalRepresentationItem >":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: opencascade::handle<StepShape_TopologicalRepresentationItem>
        """
        return _TopoDSToStep.TopoDSToStep_Tool_Find(self, *args)


    def Init(self, *args) -> "void":
        """
        :param M:
        	:type M: MoniTool_DataMapOfShapeTransient
        	:param FacetedContext:
        	:type FacetedContext: bool
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_Tool_Init(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        """
        return _TopoDSToStep.TopoDSToStep_Tool_IsBound(self, *args)


    def Lowest3DTolerance(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _TopoDSToStep.TopoDSToStep_Tool_Lowest3DTolerance(self, *args)


    def Map(self, *args) -> "MoniTool_DataMapOfShapeTransient const &":
        """:rtype: MoniTool_DataMapOfShapeTransient"""
        return _TopoDSToStep.TopoDSToStep_Tool_Map(self, *args)


    def PCurveMode(self, *args) -> "Standard_Integer":
        """
        * Returns mode for writing pcurves (initialized by parameter write.surfacecurve.mode)
        	:rtype: int
        """
        return _TopoDSToStep.TopoDSToStep_Tool_PCurveMode(self, *args)


    def SetCurrentEdge(self, *args) -> "void":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetCurrentEdge(self, *args)


    def SetCurrentFace(self, *args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetCurrentFace(self, *args)


    def SetCurrentShell(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shell
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetCurrentShell(self, *args)


    def SetCurrentVertex(self, *args) -> "void":
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetCurrentVertex(self, *args)


    def SetCurrentWire(self, *args) -> "void":
        """
        :param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetCurrentWire(self, *args)


    def SetSurfaceReversed(self, *args) -> "void":
        """
        :param B:
        	:type B: bool
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetSurfaceReversed(self, *args)


    def SurfaceReversed(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _TopoDSToStep.TopoDSToStep_Tool_SurfaceReversed(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param M:
        	:type M: MoniTool_DataMapOfShapeTransient
        	:param FacetedContext:
        	:type FacetedContext: bool
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_Tool_swiginit(self, _TopoDSToStep.new_TopoDSToStep_Tool(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_Tool
TopoDSToStep_Tool.Bind = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_Bind, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.CurrentEdge = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_CurrentEdge, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.CurrentFace = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_CurrentFace, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.CurrentShell = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_CurrentShell, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.CurrentVertex = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_CurrentVertex, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.CurrentWire = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_CurrentWire, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.Faceted = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_Faceted, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.Find = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_Find, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.Init = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_Init, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.IsBound = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_IsBound, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.Lowest3DTolerance = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_Lowest3DTolerance, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.Map = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_Map, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.PCurveMode = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_PCurveMode, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.SetCurrentEdge = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_SetCurrentEdge, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.SetCurrentFace = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_SetCurrentFace, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.SetCurrentShell = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_SetCurrentShell, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.SetCurrentVertex = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_SetCurrentVertex, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.SetCurrentWire = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_SetCurrentWire, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.SetSurfaceReversed = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_SetSurfaceReversed, None, TopoDSToStep_Tool)
TopoDSToStep_Tool.SurfaceReversed = new_instancemethod(_TopoDSToStep.TopoDSToStep_Tool_SurfaceReversed, None, TopoDSToStep_Tool)
TopoDSToStep_Tool_swigregister = _TopoDSToStep.TopoDSToStep_Tool_swigregister
TopoDSToStep_Tool_swigregister(TopoDSToStep_Tool)

class TopoDSToStep_Builder(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "TopoDSToStep_BuilderError":
        """:rtype: TopoDSToStep_BuilderError"""
        return _TopoDSToStep.TopoDSToStep_Builder_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_Builder_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: TopoDS_Shape
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_Builder_swiginit(self, _TopoDSToStep.new_TopoDSToStep_Builder(*args))

    def Value(self, *args) -> "opencascade::handle< StepShape_TopologicalRepresentationItem > const &":
        """:rtype: opencascade::handle<StepShape_TopologicalRepresentationItem>"""
        return _TopoDSToStep.TopoDSToStep_Builder_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_Builder
TopoDSToStep_Builder.Error = new_instancemethod(_TopoDSToStep.TopoDSToStep_Builder_Error, None, TopoDSToStep_Builder)
TopoDSToStep_Builder.Init = new_instancemethod(_TopoDSToStep.TopoDSToStep_Builder_Init, None, TopoDSToStep_Builder)
TopoDSToStep_Builder.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_Builder_Value, None, TopoDSToStep_Builder)
TopoDSToStep_Builder_swigregister = _TopoDSToStep.TopoDSToStep_Builder_swigregister
TopoDSToStep_Builder_swigregister(TopoDSToStep_Builder)

class TopoDSToStep_MakeBrepWithVoids(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: TopoDS_Solid
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeBrepWithVoids_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeBrepWithVoids(*args))

    def Value(self, *args) -> "opencascade::handle< StepShape_BrepWithVoids > const &":
        """:rtype: opencascade::handle<StepShape_BrepWithVoids>"""
        return _TopoDSToStep.TopoDSToStep_MakeBrepWithVoids_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeBrepWithVoids
TopoDSToStep_MakeBrepWithVoids.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeBrepWithVoids_Value, None, TopoDSToStep_MakeBrepWithVoids)
TopoDSToStep_MakeBrepWithVoids_swigregister = _TopoDSToStep.TopoDSToStep_MakeBrepWithVoids_swigregister
TopoDSToStep_MakeBrepWithVoids_swigregister(TopoDSToStep_MakeBrepWithVoids)

class TopoDSToStep_MakeFacetedBrep(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: TopoDS_Shell
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        :param S:
        	:type S: TopoDS_Solid
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeFacetedBrep_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeFacetedBrep(*args))

    def Value(self, *args) -> "opencascade::handle< StepShape_FacetedBrep > const &":
        """:rtype: opencascade::handle<StepShape_FacetedBrep>"""
        return _TopoDSToStep.TopoDSToStep_MakeFacetedBrep_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeFacetedBrep
TopoDSToStep_MakeFacetedBrep.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeFacetedBrep_Value, None, TopoDSToStep_MakeFacetedBrep)
TopoDSToStep_MakeFacetedBrep_swigregister = _TopoDSToStep.TopoDSToStep_MakeFacetedBrep_swigregister
TopoDSToStep_MakeFacetedBrep_swigregister(TopoDSToStep_MakeFacetedBrep)

class TopoDSToStep_MakeFacetedBrepAndBrepWithVoids(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: TopoDS_Solid
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeFacetedBrepAndBrepWithVoids(*args))

    def Value(self, *args) -> "opencascade::handle< StepShape_FacetedBrepAndBrepWithVoids > const &":
        """:rtype: opencascade::handle<StepShape_FacetedBrepAndBrepWithVoids>"""
        return _TopoDSToStep.TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeFacetedBrepAndBrepWithVoids
TopoDSToStep_MakeFacetedBrepAndBrepWithVoids.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_Value, None, TopoDSToStep_MakeFacetedBrepAndBrepWithVoids)
TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_swigregister = _TopoDSToStep.TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_swigregister
TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_swigregister(TopoDSToStep_MakeFacetedBrepAndBrepWithVoids)

class TopoDSToStep_MakeGeometricCurveSet(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SH:
        	:type SH: TopoDS_Shape
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeGeometricCurveSet_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeGeometricCurveSet(*args))

    def Value(self, *args) -> "opencascade::handle< StepShape_GeometricCurveSet > const &":
        """:rtype: opencascade::handle<StepShape_GeometricCurveSet>"""
        return _TopoDSToStep.TopoDSToStep_MakeGeometricCurveSet_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeGeometricCurveSet
TopoDSToStep_MakeGeometricCurveSet.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeGeometricCurveSet_Value, None, TopoDSToStep_MakeGeometricCurveSet)
TopoDSToStep_MakeGeometricCurveSet_swigregister = _TopoDSToStep.TopoDSToStep_MakeGeometricCurveSet_swigregister
TopoDSToStep_MakeGeometricCurveSet_swigregister(TopoDSToStep_MakeGeometricCurveSet)

class TopoDSToStep_MakeManifoldSolidBrep(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param S:
        	:type S: TopoDS_Shell
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        :param S:
        	:type S: TopoDS_Solid
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeManifoldSolidBrep_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeManifoldSolidBrep(*args))

    def Value(self, *args) -> "opencascade::handle< StepShape_ManifoldSolidBrep > const &":
        """:rtype: opencascade::handle<StepShape_ManifoldSolidBrep>"""
        return _TopoDSToStep.TopoDSToStep_MakeManifoldSolidBrep_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeManifoldSolidBrep
TopoDSToStep_MakeManifoldSolidBrep.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeManifoldSolidBrep_Value, None, TopoDSToStep_MakeManifoldSolidBrep)
TopoDSToStep_MakeManifoldSolidBrep_swigregister = _TopoDSToStep.TopoDSToStep_MakeManifoldSolidBrep_swigregister
TopoDSToStep_MakeManifoldSolidBrep_swigregister(TopoDSToStep_MakeManifoldSolidBrep)

class TopoDSToStep_MakeShellBasedSurfaceModel(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param F:
        	:type F: TopoDS_Face
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        :param S:
        	:type S: TopoDS_Shell
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        :param S:
        	:type S: TopoDS_Solid
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeShellBasedSurfaceModel_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeShellBasedSurfaceModel(*args))

    def Value(self, *args) -> "opencascade::handle< StepShape_ShellBasedSurfaceModel > const &":
        """:rtype: opencascade::handle<StepShape_ShellBasedSurfaceModel>"""
        return _TopoDSToStep.TopoDSToStep_MakeShellBasedSurfaceModel_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeShellBasedSurfaceModel
TopoDSToStep_MakeShellBasedSurfaceModel.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeShellBasedSurfaceModel_Value, None, TopoDSToStep_MakeShellBasedSurfaceModel)
TopoDSToStep_MakeShellBasedSurfaceModel_swigregister = _TopoDSToStep.TopoDSToStep_MakeShellBasedSurfaceModel_swigregister
TopoDSToStep_MakeShellBasedSurfaceModel_swigregister(TopoDSToStep_MakeShellBasedSurfaceModel)

class TopoDSToStep_MakeStepEdge(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "TopoDSToStep_MakeEdgeError":
        """:rtype: TopoDSToStep_MakeEdgeError"""
        return _TopoDSToStep.TopoDSToStep_MakeStepEdge_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param E:
        	:type E: TopoDS_Edge
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_MakeStepEdge_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param E:
        	:type E: TopoDS_Edge
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeStepEdge_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeStepEdge(*args))

    def Value(self, *args) -> "opencascade::handle< StepShape_TopologicalRepresentationItem > const &":
        """:rtype: opencascade::handle<StepShape_TopologicalRepresentationItem>"""
        return _TopoDSToStep.TopoDSToStep_MakeStepEdge_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepEdge
TopoDSToStep_MakeStepEdge.Error = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepEdge_Error, None, TopoDSToStep_MakeStepEdge)
TopoDSToStep_MakeStepEdge.Init = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepEdge_Init, None, TopoDSToStep_MakeStepEdge)
TopoDSToStep_MakeStepEdge.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepEdge_Value, None, TopoDSToStep_MakeStepEdge)
TopoDSToStep_MakeStepEdge_swigregister = _TopoDSToStep.TopoDSToStep_MakeStepEdge_swigregister
TopoDSToStep_MakeStepEdge_swigregister(TopoDSToStep_MakeStepEdge)

class TopoDSToStep_MakeStepFace(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "TopoDSToStep_MakeFaceError":
        """:rtype: TopoDSToStep_MakeFaceError"""
        return _TopoDSToStep.TopoDSToStep_MakeStepFace_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param F:
        	:type F: TopoDS_Face
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_MakeStepFace_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param F:
        	:type F: TopoDS_Face
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeStepFace_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeStepFace(*args))

    def Value(self, *args) -> "opencascade::handle< StepShape_TopologicalRepresentationItem > const &":
        """:rtype: opencascade::handle<StepShape_TopologicalRepresentationItem>"""
        return _TopoDSToStep.TopoDSToStep_MakeStepFace_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepFace
TopoDSToStep_MakeStepFace.Error = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepFace_Error, None, TopoDSToStep_MakeStepFace)
TopoDSToStep_MakeStepFace.Init = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepFace_Init, None, TopoDSToStep_MakeStepFace)
TopoDSToStep_MakeStepFace.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepFace_Value, None, TopoDSToStep_MakeStepFace)
TopoDSToStep_MakeStepFace_swigregister = _TopoDSToStep.TopoDSToStep_MakeStepFace_swigregister
TopoDSToStep_MakeStepFace_swigregister(TopoDSToStep_MakeStepFace)

class TopoDSToStep_MakeStepVertex(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "TopoDSToStep_MakeVertexError":
        """:rtype: TopoDSToStep_MakeVertexError"""
        return _TopoDSToStep.TopoDSToStep_MakeStepVertex_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param V:
        	:type V: TopoDS_Vertex
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_MakeStepVertex_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param V:
        	:type V: TopoDS_Vertex
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeStepVertex_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeStepVertex(*args))

    def Value(self, *args) -> "opencascade::handle< StepShape_TopologicalRepresentationItem > const &":
        """:rtype: opencascade::handle<StepShape_TopologicalRepresentationItem>"""
        return _TopoDSToStep.TopoDSToStep_MakeStepVertex_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepVertex
TopoDSToStep_MakeStepVertex.Error = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepVertex_Error, None, TopoDSToStep_MakeStepVertex)
TopoDSToStep_MakeStepVertex.Init = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepVertex_Init, None, TopoDSToStep_MakeStepVertex)
TopoDSToStep_MakeStepVertex.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepVertex_Value, None, TopoDSToStep_MakeStepVertex)
TopoDSToStep_MakeStepVertex_swigregister = _TopoDSToStep.TopoDSToStep_MakeStepVertex_swigregister
TopoDSToStep_MakeStepVertex_swigregister(TopoDSToStep_MakeStepVertex)

class TopoDSToStep_MakeStepWire(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "TopoDSToStep_MakeWireError":
        """:rtype: TopoDSToStep_MakeWireError"""
        return _TopoDSToStep.TopoDSToStep_MakeStepWire_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        :param W:
        	:type W: TopoDS_Wire
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_MakeStepWire_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param W:
        	:type W: TopoDS_Wire
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeStepWire_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeStepWire(*args))

    def Value(self, *args) -> "opencascade::handle< StepShape_TopologicalRepresentationItem > const &":
        """:rtype: opencascade::handle<StepShape_TopologicalRepresentationItem>"""
        return _TopoDSToStep.TopoDSToStep_MakeStepWire_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepWire
TopoDSToStep_MakeStepWire.Error = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepWire_Error, None, TopoDSToStep_MakeStepWire)
TopoDSToStep_MakeStepWire.Init = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepWire_Init, None, TopoDSToStep_MakeStepWire)
TopoDSToStep_MakeStepWire.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_MakeStepWire_Value, None, TopoDSToStep_MakeStepWire)
TopoDSToStep_MakeStepWire_swigregister = _TopoDSToStep.TopoDSToStep_MakeStepWire_swigregister
TopoDSToStep_MakeStepWire_swigregister(TopoDSToStep_MakeStepWire)

class TopoDSToStep_WireframeBuilder(TopoDSToStep_Root):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Error(self, *args) -> "TopoDSToStep_BuilderError":
        """:rtype: TopoDSToStep_BuilderError"""
        return _TopoDSToStep.TopoDSToStep_WireframeBuilder_Error(self, *args)


    def GetTrimmedCurveFromEdge(self, *args) -> "Standard_Boolean":
        """
        * Extraction of Trimmed Curves from TopoDS_Edge for the Creation of a GeometricallyBoundedWireframeRepresentation
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:param M:
        	:type M: MoniTool_DataMapOfShapeTransient
        	:param L:
        	:type L: TColStd_HSequenceOfTransient
        	:rtype: bool
        """
        return _TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromEdge(self, *args)


    def GetTrimmedCurveFromFace(self, *args) -> "Standard_Boolean":
        """
        * Extraction of Trimmed Curves from TopoDS_Face for the Creation of a GeometricallyBoundedWireframeRepresentation
        	:param F:
        	:type F: TopoDS_Face
        	:param M:
        	:type M: MoniTool_DataMapOfShapeTransient
        	:param L:
        	:type L: TColStd_HSequenceOfTransient
        	:rtype: bool
        """
        return _TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromFace(self, *args)


    def GetTrimmedCurveFromShape(self, *args) -> "Standard_Boolean":
        """
        * Extraction of Trimmed Curves from any TopoDS_Shape for the Creation of a GeometricallyBoundedWireframeRepresentation
        	:param S:
        	:type S: TopoDS_Shape
        	:param M:
        	:type M: MoniTool_DataMapOfShapeTransient
        	:param L:
        	:type L: TColStd_HSequenceOfTransient
        	:rtype: bool
        """
        return _TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromShape(self, *args)


    def Init(self, *args) -> "void":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        return _TopoDSToStep.TopoDSToStep_WireframeBuilder_Init(self, *args)


    def __init__(self, *args):
        """
        :rtype: None
        :param S:
        	:type S: TopoDS_Shape
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_WireframeBuilder_swiginit(self, _TopoDSToStep.new_TopoDSToStep_WireframeBuilder(*args))

    def Value(self, *args) -> "opencascade::handle< TColStd_HSequenceOfTransient > const &":
        """:rtype: opencascade::handle<TColStd_HSequenceOfTransient>"""
        return _TopoDSToStep.TopoDSToStep_WireframeBuilder_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_WireframeBuilder
TopoDSToStep_WireframeBuilder.Error = new_instancemethod(_TopoDSToStep.TopoDSToStep_WireframeBuilder_Error, None, TopoDSToStep_WireframeBuilder)
TopoDSToStep_WireframeBuilder.GetTrimmedCurveFromEdge = new_instancemethod(_TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromEdge, None, TopoDSToStep_WireframeBuilder)
TopoDSToStep_WireframeBuilder.GetTrimmedCurveFromFace = new_instancemethod(_TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromFace, None, TopoDSToStep_WireframeBuilder)
TopoDSToStep_WireframeBuilder.GetTrimmedCurveFromShape = new_instancemethod(_TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromShape, None, TopoDSToStep_WireframeBuilder)
TopoDSToStep_WireframeBuilder.Init = new_instancemethod(_TopoDSToStep.TopoDSToStep_WireframeBuilder_Init, None, TopoDSToStep_WireframeBuilder)
TopoDSToStep_WireframeBuilder.Value = new_instancemethod(_TopoDSToStep.TopoDSToStep_WireframeBuilder_Value, None, TopoDSToStep_WireframeBuilder)
TopoDSToStep_WireframeBuilder_swigregister = _TopoDSToStep.TopoDSToStep_WireframeBuilder_swigregister
TopoDSToStep_WireframeBuilder_swigregister(TopoDSToStep_WireframeBuilder)



