# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Units module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_units.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Units.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Units')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Units')
    _Units = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Units', [dirname(__file__)])
        except ImportError:
            import _Units
            return _Units
        try:
            _mod = imp.load_module('_Units', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Units = swig_import_helper()
    del swig_import_helper
else:
    import _Units
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Units.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Units.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Units.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Units.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Units.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Units.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Units.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Units.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Units.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Units.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Units.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Units.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Units.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Units.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Units.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Units.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Units.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Units.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Units.process_exception(error, method_name, class_name)
process_exception = _Units.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.TColStd

def Handle_Units_Lexicon_Create() -> "opencascade::handle< Units_Lexicon >":
    return _Units.Handle_Units_Lexicon_Create()
Handle_Units_Lexicon_Create = _Units.Handle_Units_Lexicon_Create

def Handle_Units_Lexicon_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Units_Lexicon >":
    return _Units.Handle_Units_Lexicon_DownCast(t)
Handle_Units_Lexicon_DownCast = _Units.Handle_Units_Lexicon_DownCast

def Handle_Units_Lexicon_IsNull(t: 'opencascade::handle< Units_Lexicon > const &') -> "bool":
    return _Units.Handle_Units_Lexicon_IsNull(t)
Handle_Units_Lexicon_IsNull = _Units.Handle_Units_Lexicon_IsNull

def Handle_Units_Token_Create() -> "opencascade::handle< Units_Token >":
    return _Units.Handle_Units_Token_Create()
Handle_Units_Token_Create = _Units.Handle_Units_Token_Create

def Handle_Units_Token_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Units_Token >":
    return _Units.Handle_Units_Token_DownCast(t)
Handle_Units_Token_DownCast = _Units.Handle_Units_Token_DownCast

def Handle_Units_Token_IsNull(t: 'opencascade::handle< Units_Token > const &') -> "bool":
    return _Units.Handle_Units_Token_IsNull(t)
Handle_Units_Token_IsNull = _Units.Handle_Units_Token_IsNull

def Handle_Units_Unit_Create() -> "opencascade::handle< Units_Unit >":
    return _Units.Handle_Units_Unit_Create()
Handle_Units_Unit_Create = _Units.Handle_Units_Unit_Create

def Handle_Units_Unit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Units_Unit >":
    return _Units.Handle_Units_Unit_DownCast(t)
Handle_Units_Unit_DownCast = _Units.Handle_Units_Unit_DownCast

def Handle_Units_Unit_IsNull(t: 'opencascade::handle< Units_Unit > const &') -> "bool":
    return _Units.Handle_Units_Unit_IsNull(t)
Handle_Units_Unit_IsNull = _Units.Handle_Units_Unit_IsNull

def Handle_Units_UnitsDictionary_Create() -> "opencascade::handle< Units_UnitsDictionary >":
    return _Units.Handle_Units_UnitsDictionary_Create()
Handle_Units_UnitsDictionary_Create = _Units.Handle_Units_UnitsDictionary_Create

def Handle_Units_UnitsDictionary_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Units_UnitsDictionary >":
    return _Units.Handle_Units_UnitsDictionary_DownCast(t)
Handle_Units_UnitsDictionary_DownCast = _Units.Handle_Units_UnitsDictionary_DownCast

def Handle_Units_UnitsDictionary_IsNull(t: 'opencascade::handle< Units_UnitsDictionary > const &') -> "bool":
    return _Units.Handle_Units_UnitsDictionary_IsNull(t)
Handle_Units_UnitsDictionary_IsNull = _Units.Handle_Units_UnitsDictionary_IsNull

def Handle_Units_UnitsSystem_Create() -> "opencascade::handle< Units_UnitsSystem >":
    return _Units.Handle_Units_UnitsSystem_Create()
Handle_Units_UnitsSystem_Create = _Units.Handle_Units_UnitsSystem_Create

def Handle_Units_UnitsSystem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Units_UnitsSystem >":
    return _Units.Handle_Units_UnitsSystem_DownCast(t)
Handle_Units_UnitsSystem_DownCast = _Units.Handle_Units_UnitsSystem_DownCast

def Handle_Units_UnitsSystem_IsNull(t: 'opencascade::handle< Units_UnitsSystem > const &') -> "bool":
    return _Units.Handle_Units_UnitsSystem_IsNull(t)
Handle_Units_UnitsSystem_IsNull = _Units.Handle_Units_UnitsSystem_IsNull

def Handle_Units_ShiftedToken_Create() -> "opencascade::handle< Units_ShiftedToken >":
    return _Units.Handle_Units_ShiftedToken_Create()
Handle_Units_ShiftedToken_Create = _Units.Handle_Units_ShiftedToken_Create

def Handle_Units_ShiftedToken_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Units_ShiftedToken >":
    return _Units.Handle_Units_ShiftedToken_DownCast(t)
Handle_Units_ShiftedToken_DownCast = _Units.Handle_Units_ShiftedToken_DownCast

def Handle_Units_ShiftedToken_IsNull(t: 'opencascade::handle< Units_ShiftedToken > const &') -> "bool":
    return _Units.Handle_Units_ShiftedToken_IsNull(t)
Handle_Units_ShiftedToken_IsNull = _Units.Handle_Units_ShiftedToken_IsNull

def Handle_Units_ShiftedUnit_Create() -> "opencascade::handle< Units_ShiftedUnit >":
    return _Units.Handle_Units_ShiftedUnit_Create()
Handle_Units_ShiftedUnit_Create = _Units.Handle_Units_ShiftedUnit_Create

def Handle_Units_ShiftedUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Units_ShiftedUnit >":
    return _Units.Handle_Units_ShiftedUnit_DownCast(t)
Handle_Units_ShiftedUnit_DownCast = _Units.Handle_Units_ShiftedUnit_DownCast

def Handle_Units_ShiftedUnit_IsNull(t: 'opencascade::handle< Units_ShiftedUnit > const &') -> "bool":
    return _Units.Handle_Units_ShiftedUnit_IsNull(t)
Handle_Units_ShiftedUnit_IsNull = _Units.Handle_Units_ShiftedUnit_IsNull

def Handle_Units_UnitsLexicon_Create() -> "opencascade::handle< Units_UnitsLexicon >":
    return _Units.Handle_Units_UnitsLexicon_Create()
Handle_Units_UnitsLexicon_Create = _Units.Handle_Units_UnitsLexicon_Create

def Handle_Units_UnitsLexicon_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Units_UnitsLexicon >":
    return _Units.Handle_Units_UnitsLexicon_DownCast(t)
Handle_Units_UnitsLexicon_DownCast = _Units.Handle_Units_UnitsLexicon_DownCast

def Handle_Units_UnitsLexicon_IsNull(t: 'opencascade::handle< Units_UnitsLexicon > const &') -> "bool":
    return _Units.Handle_Units_UnitsLexicon_IsNull(t)
Handle_Units_UnitsLexicon_IsNull = _Units.Handle_Units_UnitsLexicon_IsNull

def Handle_Units_TokensSequence_Create() -> "opencascade::handle< Units_TokensSequence >":
    return _Units.Handle_Units_TokensSequence_Create()
Handle_Units_TokensSequence_Create = _Units.Handle_Units_TokensSequence_Create

def Handle_Units_TokensSequence_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Units_TokensSequence >":
    return _Units.Handle_Units_TokensSequence_DownCast(t)
Handle_Units_TokensSequence_DownCast = _Units.Handle_Units_TokensSequence_DownCast

def Handle_Units_TokensSequence_IsNull(t: 'opencascade::handle< Units_TokensSequence > const &') -> "bool":
    return _Units.Handle_Units_TokensSequence_IsNull(t)
Handle_Units_TokensSequence_IsNull = _Units.Handle_Units_TokensSequence_IsNull

def Handle_Units_QuantitiesSequence_Create() -> "opencascade::handle< Units_QuantitiesSequence >":
    return _Units.Handle_Units_QuantitiesSequence_Create()
Handle_Units_QuantitiesSequence_Create = _Units.Handle_Units_QuantitiesSequence_Create

def Handle_Units_QuantitiesSequence_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Units_QuantitiesSequence >":
    return _Units.Handle_Units_QuantitiesSequence_DownCast(t)
Handle_Units_QuantitiesSequence_DownCast = _Units.Handle_Units_QuantitiesSequence_DownCast

def Handle_Units_QuantitiesSequence_IsNull(t: 'opencascade::handle< Units_QuantitiesSequence > const &') -> "bool":
    return _Units.Handle_Units_QuantitiesSequence_IsNull(t)
Handle_Units_QuantitiesSequence_IsNull = _Units.Handle_Units_QuantitiesSequence_IsNull

def Handle_Units_UnitsSequence_Create() -> "opencascade::handle< Units_UnitsSequence >":
    return _Units.Handle_Units_UnitsSequence_Create()
Handle_Units_UnitsSequence_Create = _Units.Handle_Units_UnitsSequence_Create

def Handle_Units_UnitsSequence_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Units_UnitsSequence >":
    return _Units.Handle_Units_UnitsSequence_DownCast(t)
Handle_Units_UnitsSequence_DownCast = _Units.Handle_Units_UnitsSequence_DownCast

def Handle_Units_UnitsSequence_IsNull(t: 'opencascade::handle< Units_UnitsSequence > const &') -> "bool":
    return _Units.Handle_Units_UnitsSequence_IsNull(t)
Handle_Units_UnitsSequence_IsNull = _Units.Handle_Units_UnitsSequence_IsNull
class Units_TksSequence(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Units.Units_TksSequence_swiginit(self, _Units.new_Units_TksSequence(*args))
    delNode = staticmethod(_Units.Units_TksSequence_delNode)
    __swig_destroy__ = _Units.delete_Units_TksSequence
Units_TksSequence.begin = new_instancemethod(_Units.Units_TksSequence_begin, None, Units_TksSequence)
Units_TksSequence.end = new_instancemethod(_Units.Units_TksSequence_end, None, Units_TksSequence)
Units_TksSequence.cbegin = new_instancemethod(_Units.Units_TksSequence_cbegin, None, Units_TksSequence)
Units_TksSequence.cend = new_instancemethod(_Units.Units_TksSequence_cend, None, Units_TksSequence)
Units_TksSequence.Size = new_instancemethod(_Units.Units_TksSequence_Size, None, Units_TksSequence)
Units_TksSequence.Length = new_instancemethod(_Units.Units_TksSequence_Length, None, Units_TksSequence)
Units_TksSequence.Lower = new_instancemethod(_Units.Units_TksSequence_Lower, None, Units_TksSequence)
Units_TksSequence.Upper = new_instancemethod(_Units.Units_TksSequence_Upper, None, Units_TksSequence)
Units_TksSequence.IsEmpty = new_instancemethod(_Units.Units_TksSequence_IsEmpty, None, Units_TksSequence)
Units_TksSequence.Reverse = new_instancemethod(_Units.Units_TksSequence_Reverse, None, Units_TksSequence)
Units_TksSequence.Exchange = new_instancemethod(_Units.Units_TksSequence_Exchange, None, Units_TksSequence)
Units_TksSequence.Clear = new_instancemethod(_Units.Units_TksSequence_Clear, None, Units_TksSequence)
Units_TksSequence.Assign = new_instancemethod(_Units.Units_TksSequence_Assign, None, Units_TksSequence)
Units_TksSequence.Set = new_instancemethod(_Units.Units_TksSequence_Set, None, Units_TksSequence)
Units_TksSequence.Remove = new_instancemethod(_Units.Units_TksSequence_Remove, None, Units_TksSequence)
Units_TksSequence.Append = new_instancemethod(_Units.Units_TksSequence_Append, None, Units_TksSequence)
Units_TksSequence.Prepend = new_instancemethod(_Units.Units_TksSequence_Prepend, None, Units_TksSequence)
Units_TksSequence.InsertBefore = new_instancemethod(_Units.Units_TksSequence_InsertBefore, None, Units_TksSequence)
Units_TksSequence.InsertAfter = new_instancemethod(_Units.Units_TksSequence_InsertAfter, None, Units_TksSequence)
Units_TksSequence.Split = new_instancemethod(_Units.Units_TksSequence_Split, None, Units_TksSequence)
Units_TksSequence.First = new_instancemethod(_Units.Units_TksSequence_First, None, Units_TksSequence)
Units_TksSequence.ChangeFirst = new_instancemethod(_Units.Units_TksSequence_ChangeFirst, None, Units_TksSequence)
Units_TksSequence.Last = new_instancemethod(_Units.Units_TksSequence_Last, None, Units_TksSequence)
Units_TksSequence.ChangeLast = new_instancemethod(_Units.Units_TksSequence_ChangeLast, None, Units_TksSequence)
Units_TksSequence.Value = new_instancemethod(_Units.Units_TksSequence_Value, None, Units_TksSequence)
Units_TksSequence.ChangeValue = new_instancemethod(_Units.Units_TksSequence_ChangeValue, None, Units_TksSequence)
Units_TksSequence.__call__ = new_instancemethod(_Units.Units_TksSequence___call__, None, Units_TksSequence)
Units_TksSequence.SetValue = new_instancemethod(_Units.Units_TksSequence_SetValue, None, Units_TksSequence)
Units_TksSequence_swigregister = _Units.Units_TksSequence_swigregister
Units_TksSequence_swigregister(Units_TksSequence)

def Units_TksSequence_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Units.Units_TksSequence_delNode(theNode, theAl)
Units_TksSequence_delNode = _Units.Units_TksSequence_delNode

class Units_QtsSequence(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Units.Units_QtsSequence_swiginit(self, _Units.new_Units_QtsSequence(*args))
    delNode = staticmethod(_Units.Units_QtsSequence_delNode)
    __swig_destroy__ = _Units.delete_Units_QtsSequence
Units_QtsSequence.begin = new_instancemethod(_Units.Units_QtsSequence_begin, None, Units_QtsSequence)
Units_QtsSequence.end = new_instancemethod(_Units.Units_QtsSequence_end, None, Units_QtsSequence)
Units_QtsSequence.cbegin = new_instancemethod(_Units.Units_QtsSequence_cbegin, None, Units_QtsSequence)
Units_QtsSequence.cend = new_instancemethod(_Units.Units_QtsSequence_cend, None, Units_QtsSequence)
Units_QtsSequence.Size = new_instancemethod(_Units.Units_QtsSequence_Size, None, Units_QtsSequence)
Units_QtsSequence.Length = new_instancemethod(_Units.Units_QtsSequence_Length, None, Units_QtsSequence)
Units_QtsSequence.Lower = new_instancemethod(_Units.Units_QtsSequence_Lower, None, Units_QtsSequence)
Units_QtsSequence.Upper = new_instancemethod(_Units.Units_QtsSequence_Upper, None, Units_QtsSequence)
Units_QtsSequence.IsEmpty = new_instancemethod(_Units.Units_QtsSequence_IsEmpty, None, Units_QtsSequence)
Units_QtsSequence.Reverse = new_instancemethod(_Units.Units_QtsSequence_Reverse, None, Units_QtsSequence)
Units_QtsSequence.Exchange = new_instancemethod(_Units.Units_QtsSequence_Exchange, None, Units_QtsSequence)
Units_QtsSequence.Clear = new_instancemethod(_Units.Units_QtsSequence_Clear, None, Units_QtsSequence)
Units_QtsSequence.Assign = new_instancemethod(_Units.Units_QtsSequence_Assign, None, Units_QtsSequence)
Units_QtsSequence.Set = new_instancemethod(_Units.Units_QtsSequence_Set, None, Units_QtsSequence)
Units_QtsSequence.Remove = new_instancemethod(_Units.Units_QtsSequence_Remove, None, Units_QtsSequence)
Units_QtsSequence.Append = new_instancemethod(_Units.Units_QtsSequence_Append, None, Units_QtsSequence)
Units_QtsSequence.Prepend = new_instancemethod(_Units.Units_QtsSequence_Prepend, None, Units_QtsSequence)
Units_QtsSequence.InsertBefore = new_instancemethod(_Units.Units_QtsSequence_InsertBefore, None, Units_QtsSequence)
Units_QtsSequence.InsertAfter = new_instancemethod(_Units.Units_QtsSequence_InsertAfter, None, Units_QtsSequence)
Units_QtsSequence.Split = new_instancemethod(_Units.Units_QtsSequence_Split, None, Units_QtsSequence)
Units_QtsSequence.First = new_instancemethod(_Units.Units_QtsSequence_First, None, Units_QtsSequence)
Units_QtsSequence.ChangeFirst = new_instancemethod(_Units.Units_QtsSequence_ChangeFirst, None, Units_QtsSequence)
Units_QtsSequence.Last = new_instancemethod(_Units.Units_QtsSequence_Last, None, Units_QtsSequence)
Units_QtsSequence.ChangeLast = new_instancemethod(_Units.Units_QtsSequence_ChangeLast, None, Units_QtsSequence)
Units_QtsSequence.Value = new_instancemethod(_Units.Units_QtsSequence_Value, None, Units_QtsSequence)
Units_QtsSequence.ChangeValue = new_instancemethod(_Units.Units_QtsSequence_ChangeValue, None, Units_QtsSequence)
Units_QtsSequence.__call__ = new_instancemethod(_Units.Units_QtsSequence___call__, None, Units_QtsSequence)
Units_QtsSequence.SetValue = new_instancemethod(_Units.Units_QtsSequence_SetValue, None, Units_QtsSequence)
Units_QtsSequence_swigregister = _Units.Units_QtsSequence_swigregister
Units_QtsSequence_swigregister(Units_QtsSequence)

def Units_QtsSequence_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Units.Units_QtsSequence_delNode(theNode, theAl)
Units_QtsSequence_delNode = _Units.Units_QtsSequence_delNode

class Units_UtsSequence(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Units.Units_UtsSequence_swiginit(self, _Units.new_Units_UtsSequence(*args))
    delNode = staticmethod(_Units.Units_UtsSequence_delNode)
    __swig_destroy__ = _Units.delete_Units_UtsSequence
Units_UtsSequence.begin = new_instancemethod(_Units.Units_UtsSequence_begin, None, Units_UtsSequence)
Units_UtsSequence.end = new_instancemethod(_Units.Units_UtsSequence_end, None, Units_UtsSequence)
Units_UtsSequence.cbegin = new_instancemethod(_Units.Units_UtsSequence_cbegin, None, Units_UtsSequence)
Units_UtsSequence.cend = new_instancemethod(_Units.Units_UtsSequence_cend, None, Units_UtsSequence)
Units_UtsSequence.Size = new_instancemethod(_Units.Units_UtsSequence_Size, None, Units_UtsSequence)
Units_UtsSequence.Length = new_instancemethod(_Units.Units_UtsSequence_Length, None, Units_UtsSequence)
Units_UtsSequence.Lower = new_instancemethod(_Units.Units_UtsSequence_Lower, None, Units_UtsSequence)
Units_UtsSequence.Upper = new_instancemethod(_Units.Units_UtsSequence_Upper, None, Units_UtsSequence)
Units_UtsSequence.IsEmpty = new_instancemethod(_Units.Units_UtsSequence_IsEmpty, None, Units_UtsSequence)
Units_UtsSequence.Reverse = new_instancemethod(_Units.Units_UtsSequence_Reverse, None, Units_UtsSequence)
Units_UtsSequence.Exchange = new_instancemethod(_Units.Units_UtsSequence_Exchange, None, Units_UtsSequence)
Units_UtsSequence.Clear = new_instancemethod(_Units.Units_UtsSequence_Clear, None, Units_UtsSequence)
Units_UtsSequence.Assign = new_instancemethod(_Units.Units_UtsSequence_Assign, None, Units_UtsSequence)
Units_UtsSequence.Set = new_instancemethod(_Units.Units_UtsSequence_Set, None, Units_UtsSequence)
Units_UtsSequence.Remove = new_instancemethod(_Units.Units_UtsSequence_Remove, None, Units_UtsSequence)
Units_UtsSequence.Append = new_instancemethod(_Units.Units_UtsSequence_Append, None, Units_UtsSequence)
Units_UtsSequence.Prepend = new_instancemethod(_Units.Units_UtsSequence_Prepend, None, Units_UtsSequence)
Units_UtsSequence.InsertBefore = new_instancemethod(_Units.Units_UtsSequence_InsertBefore, None, Units_UtsSequence)
Units_UtsSequence.InsertAfter = new_instancemethod(_Units.Units_UtsSequence_InsertAfter, None, Units_UtsSequence)
Units_UtsSequence.Split = new_instancemethod(_Units.Units_UtsSequence_Split, None, Units_UtsSequence)
Units_UtsSequence.First = new_instancemethod(_Units.Units_UtsSequence_First, None, Units_UtsSequence)
Units_UtsSequence.ChangeFirst = new_instancemethod(_Units.Units_UtsSequence_ChangeFirst, None, Units_UtsSequence)
Units_UtsSequence.Last = new_instancemethod(_Units.Units_UtsSequence_Last, None, Units_UtsSequence)
Units_UtsSequence.ChangeLast = new_instancemethod(_Units.Units_UtsSequence_ChangeLast, None, Units_UtsSequence)
Units_UtsSequence.Value = new_instancemethod(_Units.Units_UtsSequence_Value, None, Units_UtsSequence)
Units_UtsSequence.ChangeValue = new_instancemethod(_Units.Units_UtsSequence_ChangeValue, None, Units_UtsSequence)
Units_UtsSequence.__call__ = new_instancemethod(_Units.Units_UtsSequence___call__, None, Units_UtsSequence)
Units_UtsSequence.SetValue = new_instancemethod(_Units.Units_UtsSequence_SetValue, None, Units_UtsSequence)
Units_UtsSequence_swigregister = _Units.Units_UtsSequence_swigregister
Units_UtsSequence_swigregister(Units_UtsSequence)

def Units_UtsSequence_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Units.Units_UtsSequence_delNode(theNode, theAl)
Units_UtsSequence_delNode = _Units.Units_UtsSequence_delNode

class units(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Convert(*args) -> "Standard_Real":
        """
        * Converts <avalue> expressed in <afirstunit> into the <asecondunit>.
        	:param avalue:
        	:type avalue: float
        	:param afirstunit:
        	:type afirstunit: char *
        	:param asecondunit:
        	:type asecondunit: char *
        	:rtype: float
        """
        return _Units.units_Convert(*args)

    Convert = staticmethod(Convert)

    def DictionaryOfUnits(*args) -> "opencascade::handle< Units_UnitsDictionary >":
        """
        * Returns a unique instance of the dictionary of units. If <amode> is True, then it forces the recomputation of the dictionary of units.
        	:param amode: default value is Standard_False
        	:type amode: bool
        	:rtype: opencascade::handle<Units_UnitsDictionary>
        """
        return _Units.units_DictionaryOfUnits(*args)

    DictionaryOfUnits = staticmethod(DictionaryOfUnits)

    def Dimensions(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        * return the dimension associated to the Type
        	:param aType:
        	:type aType: char *
        	:rtype: opencascade::handle<Units_Dimensions>
        """
        return _Units.units_Dimensions(*args)

    Dimensions = staticmethod(Dimensions)

    def FirstQuantity(*args) -> "char const *":
        """
        * Returns the first quantity string founded from the unit <aUnit>.
        	:param aunit:
        	:type aunit: char *
        	:rtype: char *
        """
        return _Units.units_FirstQuantity(*args)

    FirstQuantity = staticmethod(FirstQuantity)

    def FromSI(*args) -> "Standard_Real":
        """
        :param aData:
        	:type aData: float
        	:param aUnit:
        	:type aUnit: char *
        	:rtype: float
        :param aData:
        	:type aData: float
        	:param aUnit:
        	:type aUnit: char *
        	:param aDim:
        	:type aDim: Units_Dimensions
        	:rtype: float
        """
        return _Units.units_FromSI(*args)

    FromSI = staticmethod(FromSI)

    def LexiconFile(*args) -> "void":
        """
        * Defines the location of the file containing the lexicon useful in manipulating composite units.
        	:param afile:
        	:type afile: char *
        	:rtype: void
        """
        return _Units.units_LexiconFile(*args)

    LexiconFile = staticmethod(LexiconFile)

    def LexiconFormula(*args) -> "opencascade::handle< Units_Lexicon >":
        """
        * Return a unique instance of LexiconFormula.
        	:rtype: opencascade::handle<Units_Lexicon>
        """
        return _Units.units_LexiconFormula(*args)

    LexiconFormula = staticmethod(LexiconFormula)

    def LexiconUnits(*args) -> "opencascade::handle< Units_Lexicon >":
        """
        * Returns a unique instance of the Units_Lexicon. If <amode> is True, it forces the recomputation of the dictionary of units, and by consequence the completion of the Units_Lexicon.
        	:param amode: default value is Standard_True
        	:type amode: bool
        	:rtype: opencascade::handle<Units_Lexicon>
        """
        return _Units.units_LexiconUnits(*args)

    LexiconUnits = staticmethod(LexiconUnits)

    def NullDimensions(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        * Returns always the same instance of Dimensions.
        	:rtype: opencascade::handle<Units_Dimensions>
        """
        return _Units.units_NullDimensions(*args)

    NullDimensions = staticmethod(NullDimensions)

    def Quantity(*args) -> "opencascade::handle< Units_Quantity >":
        """
        * Returns a unique quantity instance corresponding to <aquantity>.
        	:param aquantity:
        	:type aquantity: char *
        	:rtype: opencascade::handle<Units_Quantity>
        """
        return _Units.units_Quantity(*args)

    Quantity = staticmethod(Quantity)

    def ToSI(*args) -> "Standard_Real":
        """
        :param aData:
        	:type aData: float
        	:param aUnit:
        	:type aUnit: char *
        	:rtype: float
        :param aData:
        	:type aData: float
        	:param aUnit:
        	:type aUnit: char *
        	:param aDim:
        	:type aDim: Units_Dimensions
        	:rtype: float
        """
        return _Units.units_ToSI(*args)

    ToSI = staticmethod(ToSI)

    def UnitsFile(*args) -> "void":
        """
        * Defines the location of the file containing all the information useful in creating the dictionary of all the units known to the system.
        	:param afile:
        	:type afile: char *
        	:rtype: void
        """
        return _Units.units_UnitsFile(*args)

    UnitsFile = staticmethod(UnitsFile)

    __repr__ = _dumps_object


    def __init__(self):
        _Units.units_swiginit(self, _Units.new_units())
    __swig_destroy__ = _Units.delete_units
units_swigregister = _Units.units_swigregister
units_swigregister(units)

def units_Convert(*args) -> "Standard_Real":
    """
    * Converts <avalue> expressed in <afirstunit> into the <asecondunit>.
    	:param avalue:
    	:type avalue: float
    	:param afirstunit:
    	:type afirstunit: char *
    	:param asecondunit:
    	:type asecondunit: char *
    	:rtype: float
    """
    return _Units.units_Convert(*args)

def units_DictionaryOfUnits(*args) -> "opencascade::handle< Units_UnitsDictionary >":
    """
    * Returns a unique instance of the dictionary of units. If <amode> is True, then it forces the recomputation of the dictionary of units.
    	:param amode: default value is Standard_False
    	:type amode: bool
    	:rtype: opencascade::handle<Units_UnitsDictionary>
    """
    return _Units.units_DictionaryOfUnits(*args)

def units_Dimensions(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    * return the dimension associated to the Type
    	:param aType:
    	:type aType: char *
    	:rtype: opencascade::handle<Units_Dimensions>
    """
    return _Units.units_Dimensions(*args)

def units_FirstQuantity(*args) -> "char const *":
    """
    * Returns the first quantity string founded from the unit <aUnit>.
    	:param aunit:
    	:type aunit: char *
    	:rtype: char *
    """
    return _Units.units_FirstQuantity(*args)

def units_FromSI(*args) -> "Standard_Real":
    """
    :param aData:
    	:type aData: float
    	:param aUnit:
    	:type aUnit: char *
    	:rtype: float
    :param aData:
    	:type aData: float
    	:param aUnit:
    	:type aUnit: char *
    	:param aDim:
    	:type aDim: Units_Dimensions
    	:rtype: float
    """
    return _Units.units_FromSI(*args)

def units_LexiconFile(*args) -> "void":
    """
    * Defines the location of the file containing the lexicon useful in manipulating composite units.
    	:param afile:
    	:type afile: char *
    	:rtype: void
    """
    return _Units.units_LexiconFile(*args)

def units_LexiconFormula(*args) -> "opencascade::handle< Units_Lexicon >":
    """
    * Return a unique instance of LexiconFormula.
    	:rtype: opencascade::handle<Units_Lexicon>
    """
    return _Units.units_LexiconFormula(*args)

def units_LexiconUnits(*args) -> "opencascade::handle< Units_Lexicon >":
    """
    * Returns a unique instance of the Units_Lexicon. If <amode> is True, it forces the recomputation of the dictionary of units, and by consequence the completion of the Units_Lexicon.
    	:param amode: default value is Standard_True
    	:type amode: bool
    	:rtype: opencascade::handle<Units_Lexicon>
    """
    return _Units.units_LexiconUnits(*args)

def units_NullDimensions(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    * Returns always the same instance of Dimensions.
    	:rtype: opencascade::handle<Units_Dimensions>
    """
    return _Units.units_NullDimensions(*args)

def units_Quantity(*args) -> "opencascade::handle< Units_Quantity >":
    """
    * Returns a unique quantity instance corresponding to <aquantity>.
    	:param aquantity:
    	:type aquantity: char *
    	:rtype: opencascade::handle<Units_Quantity>
    """
    return _Units.units_Quantity(*args)

def units_ToSI(*args) -> "Standard_Real":
    """
    :param aData:
    	:type aData: float
    	:param aUnit:
    	:type aUnit: char *
    	:rtype: float
    :param aData:
    	:type aData: float
    	:param aUnit:
    	:type aUnit: char *
    	:param aDim:
    	:type aDim: Units_Dimensions
    	:rtype: float
    """
    return _Units.units_ToSI(*args)

def units_UnitsFile(*args) -> "void":
    """
    * Defines the location of the file containing all the information useful in creating the dictionary of all the units known to the system.
    	:param afile:
    	:type afile: char *
    	:rtype: void
    """
    return _Units.units_UnitsFile(*args)

class Units_Explorer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(self, *args) -> "void":
        """
        * Initializes the instance of the class with the UnitsSystem <aunitssystem>.
        	:param aunitssystem:
        	:type aunitssystem: Units_UnitsSystem
        	:rtype: None
        * Initializes the instance of the class with the UnitsDictionary <aunitsdictionary>.
        	:param aunitsdictionary:
        	:type aunitsdictionary: Units_UnitsDictionary
        	:rtype: None
        * Initializes the instance of the class with the UnitsSystem <aunitssystem> and positioned at the quantity <aquantity>.
        	:param aunitssystem:
        	:type aunitssystem: Units_UnitsSystem
        	:param aquantity:
        	:type aquantity: char *
        	:rtype: None
        * Initializes the instance of the class with the UnitsDictionary <aunitsdictionary> and positioned at the quantity <aquantity>.
        	:param aunitsdictionary:
        	:type aunitsdictionary: Units_UnitsDictionary
        	:param aquantity:
        	:type aquantity: char *
        	:rtype: None
        """
        return _Units.Units_Explorer_Init(self, *args)


    def IsActive(self, *args) -> "Standard_Boolean":
        """
        * If the units system to explore is a user system, returns True if the current unit is active, False otherwise. //! If the units system to explore is the units dictionary, returns True if the current unit is the S.I. unit.
        	:rtype: bool
        """
        return _Units.Units_Explorer_IsActive(self, *args)


    def MoreQuantity(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is another Quantity to explore, False otherwise.
        	:rtype: bool
        """
        return _Units.Units_Explorer_MoreQuantity(self, *args)


    def MoreUnit(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is another Unit to explore, False otherwise.
        	:rtype: bool
        """
        return _Units.Units_Explorer_MoreUnit(self, *args)


    def NextQuantity(self, *args) -> "void":
        """
        * Sets the next Quantity current.
        	:rtype: None
        """
        return _Units.Units_Explorer_NextQuantity(self, *args)


    def NextUnit(self, *args) -> "void":
        """
        * Sets the next Unit current.
        	:rtype: None
        """
        return _Units.Units_Explorer_NextUnit(self, *args)


    def Quantity(self, *args) -> "TCollection_AsciiString":
        """
        * Returns the name of the current Quantity.
        	:rtype: TCollection_AsciiString
        """
        return _Units.Units_Explorer_Quantity(self, *args)


    def Unit(self, *args) -> "TCollection_AsciiString":
        """
        * Returns the name of the current unit.
        	:rtype: TCollection_AsciiString
        """
        return _Units.Units_Explorer_Unit(self, *args)


    def __init__(self, *args):
        """
        * Empty contructor of the class.
        	:rtype: None
        * Creates a new instance of the class, initialized with the UnitsSystem <aunitssystem>.
        	:param aunitssystem:
        	:type aunitssystem: Units_UnitsSystem
        	:rtype: None
        * Creates a new instance of the class, initialized with the UnitsDictionary <aunitsdictionary>.
        	:param aunitsdictionary:
        	:type aunitsdictionary: Units_UnitsDictionary
        	:rtype: None
        * Creates a new instance of the class, initialized with the UnitsSystem <aunitssystem> and positioned at the quantity <aquantity>.
        	:param aunitssystem:
        	:type aunitssystem: Units_UnitsSystem
        	:param aquantity:
        	:type aquantity: char *
        	:rtype: None
        * Creates a new instance of the class, initialized with the UnitsDictionary <aunitsdictionary> and positioned at the quantity <aquantity>.
        	:param aunitsdictionary:
        	:type aunitsdictionary: Units_UnitsDictionary
        	:param aquantity:
        	:type aquantity: char *
        	:rtype: None
        """
        _Units.Units_Explorer_swiginit(self, _Units.new_Units_Explorer(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Explorer
Units_Explorer.Init = new_instancemethod(_Units.Units_Explorer_Init, None, Units_Explorer)
Units_Explorer.IsActive = new_instancemethod(_Units.Units_Explorer_IsActive, None, Units_Explorer)
Units_Explorer.MoreQuantity = new_instancemethod(_Units.Units_Explorer_MoreQuantity, None, Units_Explorer)
Units_Explorer.MoreUnit = new_instancemethod(_Units.Units_Explorer_MoreUnit, None, Units_Explorer)
Units_Explorer.NextQuantity = new_instancemethod(_Units.Units_Explorer_NextQuantity, None, Units_Explorer)
Units_Explorer.NextUnit = new_instancemethod(_Units.Units_Explorer_NextUnit, None, Units_Explorer)
Units_Explorer.Quantity = new_instancemethod(_Units.Units_Explorer_Quantity, None, Units_Explorer)
Units_Explorer.Unit = new_instancemethod(_Units.Units_Explorer_Unit, None, Units_Explorer)
Units_Explorer_swigregister = _Units.Units_Explorer_swigregister
Units_Explorer_swigregister(Units_Explorer)

class Units_Lexicon(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddToken(self, *args) -> "void":
        """
        * Adds to the lexicon a new token with <aword>, <amean>, <avalue> as arguments. If there is already a token with the field <theword> equal to <aword>, the existing token is updated.
        	:param aword:
        	:type aword: char *
        	:param amean:
        	:type amean: char *
        	:param avalue:
        	:type avalue: float
        	:rtype: None
        """
        return _Units.Units_Lexicon_AddToken(self, *args)


    def Creates(self, *args) -> "void":
        """
        * Reads the file <afilename> to create a sequence of tokens stored in <thesequenceoftokens>.
        	:rtype: None
        """
        return _Units.Units_Lexicon_Creates(self, *args)


    def Dump(self, *args) -> "void":
        """
        * Useful for debugging.
        	:rtype: None
        """
        return _Units.Units_Lexicon_Dump(self, *args)


    def Sequence(self, *args) -> "opencascade::handle< Units_TokensSequence >":
        """
        * Returns the first item of the sequence of tokens.
        	:rtype: opencascade::handle<Units_TokensSequence>
        """
        return _Units.Units_Lexicon_Sequence(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty instance of Lexicon.
        	:rtype: None
        """
        _Units.Units_Lexicon_swiginit(self, _Units.new_Units_Lexicon(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_Lexicon_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Lexicon
Units_Lexicon.AddToken = new_instancemethod(_Units.Units_Lexicon_AddToken, None, Units_Lexicon)
Units_Lexicon.Creates = new_instancemethod(_Units.Units_Lexicon_Creates, None, Units_Lexicon)
Units_Lexicon.Dump = new_instancemethod(_Units.Units_Lexicon_Dump, None, Units_Lexicon)
Units_Lexicon.Sequence = new_instancemethod(_Units.Units_Lexicon_Sequence, None, Units_Lexicon)
Units_Lexicon_swigregister = _Units.Units_Lexicon_swigregister
Units_Lexicon_swigregister(Units_Lexicon)

class Units_Measurement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "Units_Measurement":
        """
        * Returns (if it is possible) a measurement which is the addition of <self> and <ameasurement>. The chosen returned unit is the unit of <self>.
        	:param ameasurement:
        	:type ameasurement: Units_Measurement
        	:rtype: Units_Measurement
        """
        return _Units.Units_Measurement_Add(self, *args)


    def Convert(self, *args) -> "void":
        """
        * Converts (if possible) the measurement object into another unit. <aunit> must have the same dimensionality as the unit contained in the token <thetoken>.
        	:param aunit:
        	:type aunit: char *
        	:rtype: None
        """
        return _Units.Units_Measurement_Convert(self, *args)


    def Divide(self, *args) -> "Units_Measurement":
        """
        * Returns a measurement which is the division of <self> by <ameasurement>.
        	:param ameasurement:
        	:type ameasurement: Units_Measurement
        	:rtype: Units_Measurement
        * Returns a measurement which is the division of <self> by the constant <avalue>.
        	:param avalue:
        	:type avalue: float
        	:rtype: Units_Measurement
        """
        return _Units.Units_Measurement_Divide(self, *args)


    def Dump(self, *args) -> "void":
        """
        * Useful for debugging.
        	:rtype: None
        """
        return _Units.Units_Measurement_Dump(self, *args)


    def Fractional(self, *args) -> "Units_Measurement":
        """
        * Returns a Measurement object with the fractional value of the measurement contained in <self>.
        	:rtype: Units_Measurement
        """
        return _Units.Units_Measurement_Fractional(self, *args)


    def HasToken(self, *args) -> "Standard_Boolean":
        """:rtype: bool"""
        return _Units.Units_Measurement_HasToken(self, *args)


    def Integer(self, *args) -> "Units_Measurement":
        """
        * Returns a Measurement object with the integer value of the measurement contained in <self>.
        	:rtype: Units_Measurement
        """
        return _Units.Units_Measurement_Integer(self, *args)


    def Measurement(self, *args) -> "Standard_Real":
        """
        * Returns the value of the measurement.
        	:rtype: float
        """
        return _Units.Units_Measurement_Measurement(self, *args)


    def Multiply(self, *args) -> "Units_Measurement":
        """
        * Returns a measurement which is the multiplication of <self> and <ameasurement>.
        	:param ameasurement:
        	:type ameasurement: Units_Measurement
        	:rtype: Units_Measurement
        * Returns a measurement which is the multiplication of <self> with the value <avalue>.
        	:param avalue:
        	:type avalue: float
        	:rtype: Units_Measurement
        """
        return _Units.Units_Measurement_Multiply(self, *args)


    def Power(self, *args) -> "Units_Measurement":
        """
        * Returns a measurement which is <self> powered <anexponent>.
        	:param anexponent:
        	:type anexponent: float
        	:rtype: Units_Measurement
        """
        return _Units.Units_Measurement_Power(self, *args)


    def Subtract(self, *args) -> "Units_Measurement":
        """
        * Returns (if it is possible) a measurement which is the subtraction of <self> and <ameasurement>. The chosen returned unit is the unit of <self>.
        	:param ameasurement:
        	:type ameasurement: Units_Measurement
        	:rtype: Units_Measurement
        """
        return _Units.Units_Measurement_Subtract(self, *args)


    def Token(self, *args) -> "opencascade::handle< Units_Token >":
        """
        * Returns the token contained in <self>.
        	:rtype: opencascade::handle<Units_Token>
        """
        return _Units.Units_Measurement_Token(self, *args)


    def __init__(self, *args):
        """
        * It is the empty constructor of the class.
        	:rtype: None
        * Returns an instance of this class. <avalue> defines the measurement, and <atoken> the token which defines the unit used.
        	:param avalue:
        	:type avalue: float
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: None
        * Returns an instance of this class. <avalue> defines the measurement, and <aunit> the unit used, described in natural language.
        	:param avalue:
        	:type avalue: float
        	:param aunit:
        	:type aunit: char *
        	:rtype: None
        """
        _Units.Units_Measurement_swiginit(self, _Units.new_Units_Measurement(*args))

    def __mul__(self, *args) -> "Units_Measurement":
        """
        :param ameasurement:
        	:type ameasurement: Units_Measurement
        	:rtype: Units_Measurement
        :param avalue:
        	:type avalue: float
        	:rtype: Units_Measurement
        """
        return _Units.Units_Measurement___mul__(self, *args)


    def __add__(self, *args) -> "Units_Measurement":
        """
        :param ameasurement:
        	:type ameasurement: Units_Measurement
        	:rtype: Units_Measurement
        """
        return _Units.Units_Measurement___add__(self, *args)


    def __sub__(self, *args) -> "Units_Measurement":
        """
        :param ameasurement:
        	:type ameasurement: Units_Measurement
        	:rtype: Units_Measurement
        """
        return _Units.Units_Measurement___sub__(self, *args)


    def __truediv__(self, *args):
        return _Units.Units_Measurement___truediv__(self, *args)
    __div__ = __truediv__



    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Measurement
Units_Measurement.Add = new_instancemethod(_Units.Units_Measurement_Add, None, Units_Measurement)
Units_Measurement.Convert = new_instancemethod(_Units.Units_Measurement_Convert, None, Units_Measurement)
Units_Measurement.Divide = new_instancemethod(_Units.Units_Measurement_Divide, None, Units_Measurement)
Units_Measurement.Dump = new_instancemethod(_Units.Units_Measurement_Dump, None, Units_Measurement)
Units_Measurement.Fractional = new_instancemethod(_Units.Units_Measurement_Fractional, None, Units_Measurement)
Units_Measurement.HasToken = new_instancemethod(_Units.Units_Measurement_HasToken, None, Units_Measurement)
Units_Measurement.Integer = new_instancemethod(_Units.Units_Measurement_Integer, None, Units_Measurement)
Units_Measurement.Measurement = new_instancemethod(_Units.Units_Measurement_Measurement, None, Units_Measurement)
Units_Measurement.Multiply = new_instancemethod(_Units.Units_Measurement_Multiply, None, Units_Measurement)
Units_Measurement.Power = new_instancemethod(_Units.Units_Measurement_Power, None, Units_Measurement)
Units_Measurement.Subtract = new_instancemethod(_Units.Units_Measurement_Subtract, None, Units_Measurement)
Units_Measurement.Token = new_instancemethod(_Units.Units_Measurement_Token, None, Units_Measurement)
Units_Measurement.__mul__ = new_instancemethod(_Units.Units_Measurement___mul__, None, Units_Measurement)
Units_Measurement.__add__ = new_instancemethod(_Units.Units_Measurement___add__, None, Units_Measurement)
Units_Measurement.__sub__ = new_instancemethod(_Units.Units_Measurement___sub__, None, Units_Measurement)
Units_Measurement_swigregister = _Units.Units_Measurement_swigregister
Units_Measurement_swigregister(Units_Measurement)

class Units_Sentence(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Dump(self, *args) -> "void":
        """
        * Useful for debugging.
        	:rtype: None
        """
        return _Units.Units_Sentence_Dump(self, *args)


    def Evaluate(self, *args) -> "opencascade::handle< Units_Token >":
        """
        * Computes and returns in a token the result of the expression.
        	:rtype: opencascade::handle<Units_Token>
        """
        return _Units.Units_Sentence_Evaluate(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Return True if number of created tokens > 0 (i.e creation of sentence is succesfull)
        	:rtype: bool
        """
        return _Units.Units_Sentence_IsDone(self, *args)


    def Sequence(self, *args) -> "void":
        """
        * Returns <thesequenceoftokens>.
        	:rtype: opencascade::handle<Units_TokensSequence>
        * Sets the field <thesequenceoftokens> to <asequenceoftokens>.
        	:param asequenceoftokens:
        	:type asequenceoftokens: Units_TokensSequence
        	:rtype: None
        """
        return _Units.Units_Sentence_Sequence(self, *args)


    def SetConstants(self, *args) -> "void":
        """
        * For each constant encountered, sets the value.
        	:rtype: None
        """
        return _Units.Units_Sentence_SetConstants(self, *args)


    def __init__(self, *args):
        """
        * Creates and returns a Sentence, by analyzing the string <astring> with the lexicon <alexicon>.
        	:param alexicon:
        	:type alexicon: Units_Lexicon
        	:param astring:
        	:type astring: char *
        	:rtype: None
        """
        _Units.Units_Sentence_swiginit(self, _Units.new_Units_Sentence(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Sentence
Units_Sentence.Dump = new_instancemethod(_Units.Units_Sentence_Dump, None, Units_Sentence)
Units_Sentence.Evaluate = new_instancemethod(_Units.Units_Sentence_Evaluate, None, Units_Sentence)
Units_Sentence.IsDone = new_instancemethod(_Units.Units_Sentence_IsDone, None, Units_Sentence)
Units_Sentence.Sequence = new_instancemethod(_Units.Units_Sentence_Sequence, None, Units_Sentence)
Units_Sentence.SetConstants = new_instancemethod(_Units.Units_Sentence_SetConstants, None, Units_Sentence)
Units_Sentence_swigregister = _Units.Units_Sentence_swigregister
Units_Sentence_swigregister(Units_Sentence)

class Units_Token(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Add(self, *args) -> "opencascade::handle< Units_Token >":
        """
        :param aninteger:
        	:type aninteger: int
        	:rtype: opencascade::handle<Units_Token>
        * Returns a token which is the addition of <self> and another token <atoken>. The addition is possible if and only if the dimensions are the same.
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: opencascade::handle<Units_Token>
        """
        return _Units.Units_Token_Add(self, *args)


    def Creates(self, *args) -> "opencascade::handle< Units_Token >":
        """
        * Creates and returns a token, which is a ShiftedToken.
        	:rtype: opencascade::handle<Units_Token>
        """
        return _Units.Units_Token_Creates(self, *args)


    def Dimensions(self, *args) -> "void":
        """
        * Returns the dimensions of the token <thedimensions>.
        	:rtype: opencascade::handle<Units_Dimensions>
        * Sets the field <thedimensions> to <adimensions>.
        	:param adimensions:
        	:type adimensions: Units_Dimensions
        	:rtype: None
        """
        return _Units.Units_Token_Dimensions(self, *args)


    def Divide(self, *args) -> "opencascade::handle< Units_Token >":
        """
        * Returns a token which is the division of <self> by another token <atoken>.
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: opencascade::handle<Units_Token>
        """
        return _Units.Units_Token_Divide(self, *args)


    def Divided(self, *args) -> "Standard_Real":
        """
        * This virtual method is called by the Measurement methods, to compute the measurement during a conversion.
        	:param avalue:
        	:type avalue: float
        	:rtype: float
        """
        return _Units.Units_Token_Divided(self, *args)


    def Dump(self, *args) -> "void":
        """
        * Useful for debugging
        	:param ashift:
        	:type ashift: int
        	:param alevel:
        	:type alevel: int
        	:rtype: void
        """
        return _Units.Units_Token_Dump(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the field <theword> and the string <astring> are the same, false otherwise.
        	:param astring:
        	:type astring: char *
        	:rtype: bool
        * Returns true if the field <theword> and the string <theword> contained in the token <atoken> are the same, false otherwise.
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: bool
        """
        return _Units.Units_Token_IsEqual(self, *args)


    def IsGreater(self, *args) -> "Standard_Boolean":
        """
        * Returns false if the field <theword> is strictly contained at the beginning of the string <astring>, true otherwise.
        	:param astring:
        	:type astring: char *
        	:rtype: bool
        * Returns false if the field <theword> is strictly contained at the beginning of the string <astring>, true otherwise.
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: bool
        """
        return _Units.Units_Token_IsGreater(self, *args)


    def IsGreaterOrEqual(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the string <astring> is strictly contained at the beginning of the field <theword> false otherwise.
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: bool
        """
        return _Units.Units_Token_IsGreaterOrEqual(self, *args)


    def IsLessOrEqual(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the field <theword> is strictly contained at the beginning of the string <astring>, false otherwise.
        	:param astring:
        	:type astring: char *
        	:rtype: bool
        """
        return _Units.Units_Token_IsLessOrEqual(self, *args)


    def IsNotEqual(self, *args) -> "Standard_Boolean":
        """
        * Returns false if the field <theword> and the string <astring> are the same, true otherwise.
        	:param astring:
        	:type astring: char *
        	:rtype: bool
        * Returns false if the field <theword> and the string <theword> contained in the token <atoken> are the same, true otherwise.
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: bool
        """
        return _Units.Units_Token_IsNotEqual(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        * Returns the length of the word.
        	:rtype: int
        """
        return _Units.Units_Token_Length(self, *args)


    def Mean(self, *args) -> "void":
        """
        * Returns the significance of the word <theword>, which is in the field <themean>.
        	:rtype: TCollection_AsciiString
        * Sets the field <themean> to <amean>.
        	:param amean:
        	:type amean: char *
        	:rtype: None
        """
        return _Units.Units_Token_Mean(self, *args)


    def Multiplied(self, *args) -> "Standard_Real":
        """
        * This virtual method is called by the Measurement methods, to compute the measurement during a conversion.
        	:param avalue:
        	:type avalue: float
        	:rtype: float
        """
        return _Units.Units_Token_Multiplied(self, *args)


    def Multiply(self, *args) -> "opencascade::handle< Units_Token >":
        """
        * Returns a token which is the product of <self> and another token <atoken>.
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: opencascade::handle<Units_Token>
        """
        return _Units.Units_Token_Multiply(self, *args)


    def Power(self, *args) -> "opencascade::handle< Units_Token >":
        """
        * Returns a token which is <self> to the power of another token <atoken>. The computation is possible only if <atoken> is a dimensionless constant.
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: opencascade::handle<Units_Token>
        * Returns a token which is <self> to the power of <anexponent>.
        	:param anexponent:
        	:type anexponent: float
        	:rtype: opencascade::handle<Units_Token>
        """
        return _Units.Units_Token_Power(self, *args)


    def Subtract(self, *args) -> "opencascade::handle< Units_Token >":
        """
        * Returns a token which is the subtraction of <self> and another token <atoken>. The subtraction is possible if and only if the dimensions are the same.
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: opencascade::handle<Units_Token>
        """
        return _Units.Units_Token_Subtract(self, *args)


    def __init__(self, *args):
        """
        * Creates and returns a empty token.
        	:rtype: None
        * Creates and returns a token. <aword> is a string containing the available word.
        	:param aword:
        	:type aword: char *
        	:rtype: None
        * Creates and returns a token. <atoken> is copied in the returned token.
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: None
        * Creates and returns a token. <aword> is a string containing the available word and <amean> gives the signification of the token.
        	:param aword:
        	:type aword: char *
        	:param amean:
        	:type amean: char *
        	:rtype: None
        * Creates and returns a token. <aword> is a string containing the available word, <amean> gives the signification of the token and <avalue> is the numeric value of the dimension.
        	:param aword:
        	:type aword: char *
        	:param amean:
        	:type amean: char *
        	:param avalue:
        	:type avalue: float
        	:rtype: None
        * Creates and returns a token. <aword> is a string containing the available word, <amean> gives the signification of the token, <avalue> is the numeric value of the dimension, and <adimensions> is the dimension of the given word <aword>.
        	:param aword:
        	:type aword: char *
        	:param amean:
        	:type amean: char *
        	:param avalue:
        	:type avalue: float
        	:param adimension:
        	:type adimension: Units_Dimensions
        	:rtype: None
        """
        _Units.Units_Token_swiginit(self, _Units.new_Units_Token(*args))

    def Update(self, *args) -> "void":
        """
        * Updates the token <self> with the additional signification <amean> by concatenation of the two strings <themean> and <amean>. If the two significations are the same , an information message is written in the output device.
        	:param amean:
        	:type amean: char *
        	:rtype: None
        """
        return _Units.Units_Token_Update(self, *args)


    def Value(self, *args) -> "void":
        """
        * Returns the value stored in the field <thevalue>.
        	:rtype: float
        * Sets the field <thevalue> to <avalue>.
        	:param avalue:
        	:type avalue: float
        	:rtype: None
        """
        return _Units.Units_Token_Value(self, *args)


    def Word(self, *args) -> "void":
        """
        * Returns the string <theword>
        	:rtype: TCollection_AsciiString
        * Sets the field <theword> to <aword>.
        	:param aword:
        	:type aword: char *
        	:rtype: None
        """
        return _Units.Units_Token_Word(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Units_Token_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Token
Units_Token.Add = new_instancemethod(_Units.Units_Token_Add, None, Units_Token)
Units_Token.Creates = new_instancemethod(_Units.Units_Token_Creates, None, Units_Token)
Units_Token.Dimensions = new_instancemethod(_Units.Units_Token_Dimensions, None, Units_Token)
Units_Token.Divide = new_instancemethod(_Units.Units_Token_Divide, None, Units_Token)
Units_Token.Divided = new_instancemethod(_Units.Units_Token_Divided, None, Units_Token)
Units_Token.Dump = new_instancemethod(_Units.Units_Token_Dump, None, Units_Token)
Units_Token.IsEqual = new_instancemethod(_Units.Units_Token_IsEqual, None, Units_Token)
Units_Token.IsGreater = new_instancemethod(_Units.Units_Token_IsGreater, None, Units_Token)
Units_Token.IsGreaterOrEqual = new_instancemethod(_Units.Units_Token_IsGreaterOrEqual, None, Units_Token)
Units_Token.IsLessOrEqual = new_instancemethod(_Units.Units_Token_IsLessOrEqual, None, Units_Token)
Units_Token.IsNotEqual = new_instancemethod(_Units.Units_Token_IsNotEqual, None, Units_Token)
Units_Token.Length = new_instancemethod(_Units.Units_Token_Length, None, Units_Token)
Units_Token.Mean = new_instancemethod(_Units.Units_Token_Mean, None, Units_Token)
Units_Token.Multiplied = new_instancemethod(_Units.Units_Token_Multiplied, None, Units_Token)
Units_Token.Multiply = new_instancemethod(_Units.Units_Token_Multiply, None, Units_Token)
Units_Token.Power = new_instancemethod(_Units.Units_Token_Power, None, Units_Token)
Units_Token.Subtract = new_instancemethod(_Units.Units_Token_Subtract, None, Units_Token)
Units_Token.Update = new_instancemethod(_Units.Units_Token_Update, None, Units_Token)
Units_Token.Value = new_instancemethod(_Units.Units_Token_Value, None, Units_Token)
Units_Token.Word = new_instancemethod(_Units.Units_Token_Word, None, Units_Token)
Units_Token_swigregister = _Units.Units_Token_swigregister
Units_Token_swigregister(Units_Token)

class Units_Unit(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Dump(self, *args) -> "void":
        """
        * Useful for debugging
        	:param ashift:
        	:type ashift: int
        	:param alevel:
        	:type alevel: int
        	:rtype: void
        """
        return _Units.Units_Unit_Dump(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        * Compares all the symbols linked within <self> with the name of <atoken>, and returns True if there is one symbol equal to the name, False otherwise.
        	:param astring:
        	:type astring: char *
        	:rtype: bool
        """
        return _Units.Units_Unit_IsEqual(self, *args)


    def Name(self, *args) -> "TCollection_AsciiString":
        """
        * Returns the name of the unit <thename>
        	:rtype: TCollection_AsciiString
        """
        return _Units.Units_Unit_Name(self, *args)


    def Quantity(self, *args) -> "void":
        """
        * Returns <thequantity> contained in <self>.
        	:rtype: opencascade::handle<Units_Quantity>
        * Sets the physical Quantity <aquantity> to <self>.
        	:param aquantity:
        	:type aquantity: Units_Quantity
        	:rtype: None
        """
        return _Units.Units_Unit_Quantity(self, *args)


    def Symbol(self, *args) -> "void":
        """
        * Adds a new symbol <asymbol> attached to <self>.
        	:param asymbol:
        	:type asymbol: char *
        	:rtype: None
        """
        return _Units.Units_Unit_Symbol(self, *args)


    def SymbolsSequence(self, *args) -> "opencascade::handle< TColStd_HSequenceOfHAsciiString >":
        """
        * Returns the sequence of symbols <thesymbolssequence>
        	:rtype: opencascade::handle<TColStd_HSequenceOfHAsciiString>
        """
        return _Units.Units_Unit_SymbolsSequence(self, *args)


    def Token(self, *args) -> "opencascade::handle< Units_Token >":
        """
        * Starting with <self>, returns a new Token object.
        	:rtype: opencascade::handle<Units_Token>
        """
        return _Units.Units_Unit_Token(self, *args)


    def __init__(self, *args):
        """
        * Creates and returns a unit. <aname> is the name of the unit, <asymbol> is the usual abbreviation of the unit, and <avalue> is the value in relation to the International System of Units.
        	:param aname:
        	:type aname: char *
        	:param asymbol:
        	:type asymbol: char *
        	:param avalue:
        	:type avalue: float
        	:param aquantity:
        	:type aquantity: Units_Quantity
        	:rtype: None
        * Creates and returns a unit. <aname> is the name of the unit, <asymbol> is the usual abbreviation of the unit.
        	:param aname:
        	:type aname: char *
        	:param asymbol:
        	:type asymbol: char *
        	:rtype: None
        * Creates and returns a unit. <aname> is the name of the unit.
        	:param aname:
        	:type aname: char *
        	:rtype: None
        """
        _Units.Units_Unit_swiginit(self, _Units.new_Units_Unit(*args))

    def Value(self, *args) -> "void":
        """
        * Returns the value in relation with the International System of Units.
        	:rtype: float
        * Sets the value <avalue> to <self>.
        	:param avalue:
        	:type avalue: float
        	:rtype: None
        """
        return _Units.Units_Unit_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Units_Unit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Unit
Units_Unit.Dump = new_instancemethod(_Units.Units_Unit_Dump, None, Units_Unit)
Units_Unit.IsEqual = new_instancemethod(_Units.Units_Unit_IsEqual, None, Units_Unit)
Units_Unit.Name = new_instancemethod(_Units.Units_Unit_Name, None, Units_Unit)
Units_Unit.Quantity = new_instancemethod(_Units.Units_Unit_Quantity, None, Units_Unit)
Units_Unit.Symbol = new_instancemethod(_Units.Units_Unit_Symbol, None, Units_Unit)
Units_Unit.SymbolsSequence = new_instancemethod(_Units.Units_Unit_SymbolsSequence, None, Units_Unit)
Units_Unit.Token = new_instancemethod(_Units.Units_Unit_Token, None, Units_Unit)
Units_Unit.Value = new_instancemethod(_Units.Units_Unit_Value, None, Units_Unit)
Units_Unit_swigregister = _Units.Units_Unit_swigregister
Units_Unit_swigregister(Units_Unit)

class Units_UnitsDictionary(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ActiveUnit(self, *args) -> "TCollection_AsciiString":
        """
        * Returns for <aquantity> the active unit.
        	:param aquantity:
        	:type aquantity: char *
        	:rtype: TCollection_AsciiString
        """
        return _Units.Units_UnitsDictionary_ActiveUnit(self, *args)


    def Creates(self, *args) -> "void":
        """
        * Returns a UnitsDictionary object which contains the sequence of all the units you want to consider, physical quantity by physical quantity.
        	:rtype: None
        """
        return _Units.Units_UnitsDictionary_Creates(self, *args)


    def Dump(self, *args) -> "void":
        """
        * Dumps only the sequence of quantities without the units if <alevel> is equal to zero, and for each quantity all the units stored if <alevel> is equal to one.
        	:param alevel:
        	:type alevel: int
        	:rtype: None
        * Dumps for a designated physical dimensions <adimensions> all the previously stored units.
        	:param adimensions:
        	:type adimensions: Units_Dimensions
        	:rtype: None
        """
        return _Units.Units_UnitsDictionary_Dump(self, *args)


    def Sequence(self, *args) -> "opencascade::handle< Units_QuantitiesSequence >":
        """
        * Returns the head of the sequence of physical quantities.
        	:rtype: opencascade::handle<Units_QuantitiesSequence>
        """
        return _Units.Units_UnitsDictionary_Sequence(self, *args)


    def __init__(self, *args):
        """
        * Returns an empty instance of UnitsDictionary.
        	:rtype: None
        """
        _Units.Units_UnitsDictionary_swiginit(self, _Units.new_Units_UnitsDictionary(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_UnitsDictionary_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_UnitsDictionary
Units_UnitsDictionary.ActiveUnit = new_instancemethod(_Units.Units_UnitsDictionary_ActiveUnit, None, Units_UnitsDictionary)
Units_UnitsDictionary.Creates = new_instancemethod(_Units.Units_UnitsDictionary_Creates, None, Units_UnitsDictionary)
Units_UnitsDictionary.Dump = new_instancemethod(_Units.Units_UnitsDictionary_Dump, None, Units_UnitsDictionary)
Units_UnitsDictionary.Sequence = new_instancemethod(_Units.Units_UnitsDictionary_Sequence, None, Units_UnitsDictionary)
Units_UnitsDictionary_swigregister = _Units.Units_UnitsDictionary_swigregister
Units_UnitsDictionary_swigregister(Units_UnitsDictionary)

class Units_UnitsSystem(OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Activate(self, *args) -> "void":
        """
        * Specifies for <aquantity> the unit <aunit> used.
        	:param aquantity:
        	:type aquantity: char *
        	:param aunit:
        	:type aunit: char *
        	:rtype: None
        """
        return _Units.Units_UnitsSystem_Activate(self, *args)


    def Activates(self, *args) -> "void":
        """
        * Activates the first unit of all defined system quantities
        	:rtype: None
        """
        return _Units.Units_UnitsSystem_Activates(self, *args)


    def ActiveUnit(self, *args) -> "TCollection_AsciiString":
        """
        * Returns for <aquantity> the active unit.
        	:param aquantity:
        	:type aquantity: char *
        	:rtype: TCollection_AsciiString
        """
        return _Units.Units_UnitsSystem_ActiveUnit(self, *args)


    def ActiveUnitsSequence(self, *args) -> "opencascade::handle< TColStd_HSequenceOfInteger >":
        """
        * Returns a sequence of integer in correspondance with the sequence of quantities, which indicates, for each redefined quantity, the index into the sequence of units, of the active unit.
        	:rtype: opencascade::handle<TColStd_HSequenceOfInteger>
        """
        return _Units.Units_UnitsSystem_ActiveUnitsSequence(self, *args)


    def ConvertSIValueToUserSystem(self, *args) -> "Standard_Real":
        """
        * Converts the real value <avalue> from the S.I. system of units to the user system of units. <aquantity> is the physical dimensions of the measurement.
        	:param aquantity:
        	:type aquantity: char *
        	:param avalue:
        	:type avalue: float
        	:rtype: float
        """
        return _Units.Units_UnitsSystem_ConvertSIValueToUserSystem(self, *args)


    def ConvertUserSystemValueToSI(self, *args) -> "Standard_Real":
        """
        * Converts the real value <avalue> from the user system of units to the S.I. system of units. <aquantity> is the physical dimensions of the measurement.
        	:param aquantity:
        	:type aquantity: char *
        	:param avalue:
        	:type avalue: float
        	:rtype: float
        """
        return _Units.Units_UnitsSystem_ConvertUserSystemValueToSI(self, *args)


    def ConvertValueToUserSystem(self, *args) -> "Standard_Real":
        """
        * Converts a real value <avalue> from the unit <aunit> belonging to the physical dimensions <aquantity> to the corresponding unit of the user system.
        	:param aquantity:
        	:type aquantity: char *
        	:param avalue:
        	:type avalue: float
        	:param aunit:
        	:type aunit: char *
        	:rtype: float
        """
        return _Units.Units_UnitsSystem_ConvertValueToUserSystem(self, *args)


    def Dump(self, *args) -> "void":
        """:rtype: None"""
        return _Units.Units_UnitsSystem_Dump(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * Returns True if no units has been defined in the system.
        	:rtype: bool
        """
        return _Units.Units_UnitsSystem_IsEmpty(self, *args)


    def QuantitiesSequence(self, *args) -> "opencascade::handle< Units_QuantitiesSequence >":
        """
        * Returns the sequence of refined quantities.
        	:rtype: opencascade::handle<Units_QuantitiesSequence>
        """
        return _Units.Units_UnitsSystem_QuantitiesSequence(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Removes for <aquantity> the unit <aunit> used.
        	:param aquantity:
        	:type aquantity: char *
        	:param aunit:
        	:type aunit: char *
        	:rtype: None
        """
        return _Units.Units_UnitsSystem_Remove(self, *args)


    def Specify(self, *args) -> "void":
        """
        * Specifies for <aquantity> the unit <aunit> used.
        	:param aquantity:
        	:type aquantity: char *
        	:param aunit:
        	:type aunit: char *
        	:rtype: None
        """
        return _Units.Units_UnitsSystem_Specify(self, *args)


    def __init__(self, *args):
        """
        * Returns an instance of UnitsSystem initialized to the S.I. units system.
        	:rtype: None
        * Returns an instance of UnitsSystem initialized to the S.I. units system upgraded by the base system units decription file. Attempts to find the four following files: $CSF_`aName`Defaults/.aName $CSF_`aName`SiteDefaults/.aName $CSF_`aName`GroupDefaults/.aName $CSF_`aName`UserDefaults/.aName See : Resource_Manager for the description of this file.
        	:param aName:
        	:type aName: char *
        	:param Verbose: default value is Standard_False
        	:type Verbose: bool
        	:rtype: None
        """
        _Units.Units_UnitsSystem_swiginit(self, _Units.new_Units_UnitsSystem(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_UnitsSystem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_UnitsSystem
Units_UnitsSystem.Activate = new_instancemethod(_Units.Units_UnitsSystem_Activate, None, Units_UnitsSystem)
Units_UnitsSystem.Activates = new_instancemethod(_Units.Units_UnitsSystem_Activates, None, Units_UnitsSystem)
Units_UnitsSystem.ActiveUnit = new_instancemethod(_Units.Units_UnitsSystem_ActiveUnit, None, Units_UnitsSystem)
Units_UnitsSystem.ActiveUnitsSequence = new_instancemethod(_Units.Units_UnitsSystem_ActiveUnitsSequence, None, Units_UnitsSystem)
Units_UnitsSystem.ConvertSIValueToUserSystem = new_instancemethod(_Units.Units_UnitsSystem_ConvertSIValueToUserSystem, None, Units_UnitsSystem)
Units_UnitsSystem.ConvertUserSystemValueToSI = new_instancemethod(_Units.Units_UnitsSystem_ConvertUserSystemValueToSI, None, Units_UnitsSystem)
Units_UnitsSystem.ConvertValueToUserSystem = new_instancemethod(_Units.Units_UnitsSystem_ConvertValueToUserSystem, None, Units_UnitsSystem)
Units_UnitsSystem.Dump = new_instancemethod(_Units.Units_UnitsSystem_Dump, None, Units_UnitsSystem)
Units_UnitsSystem.IsEmpty = new_instancemethod(_Units.Units_UnitsSystem_IsEmpty, None, Units_UnitsSystem)
Units_UnitsSystem.QuantitiesSequence = new_instancemethod(_Units.Units_UnitsSystem_QuantitiesSequence, None, Units_UnitsSystem)
Units_UnitsSystem.Remove = new_instancemethod(_Units.Units_UnitsSystem_Remove, None, Units_UnitsSystem)
Units_UnitsSystem.Specify = new_instancemethod(_Units.Units_UnitsSystem_Specify, None, Units_UnitsSystem)
Units_UnitsSystem_swigregister = _Units.Units_UnitsSystem_swigregister
Units_UnitsSystem_swigregister(Units_UnitsSystem)

class Units_MathSentence(Units_Sentence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates and returns a MathSentence object. The string <astring> describes an algebraic formula in natural language.
        	:param astring:
        	:type astring: char *
        	:rtype: None
        """
        _Units.Units_MathSentence_swiginit(self, _Units.new_Units_MathSentence(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_MathSentence
Units_MathSentence_swigregister = _Units.Units_MathSentence_swigregister
Units_MathSentence_swigregister(Units_MathSentence)

class Units_ShiftedToken(Units_Token):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Move(self, *args) -> "Standard_Real":
        """
        * Returns the gap <themove>
        	:rtype: float
        """
        return _Units.Units_ShiftedToken_Move(self, *args)


    def __init__(self, *args):
        """
        * Creates and returns a shifted token. <aword> is a string containing the available word, <amean> gives the signification of the token, <avalue> is the numeric value of the dimension, <amove> is the gap, and <adimensions> is the dimension of the given word <aword>.
        	:param aword:
        	:type aword: char *
        	:param amean:
        	:type amean: char *
        	:param avalue:
        	:type avalue: float
        	:param amove:
        	:type amove: float
        	:param adimensions:
        	:type adimensions: Units_Dimensions
        	:rtype: None
        """
        _Units.Units_ShiftedToken_swiginit(self, _Units.new_Units_ShiftedToken(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_ShiftedToken_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_ShiftedToken
Units_ShiftedToken.Move = new_instancemethod(_Units.Units_ShiftedToken_Move, None, Units_ShiftedToken)
Units_ShiftedToken_swigregister = _Units.Units_ShiftedToken_swigregister
Units_ShiftedToken_swigregister(Units_ShiftedToken)

class Units_ShiftedUnit(Units_Unit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Move(self, *args) -> "Standard_Real":
        """
        * Sets the field <themove> to <amove>
        	:param amove:
        	:type amove: float
        	:rtype: None
        * Returns the shifted value <themove>.
        	:rtype: float
        """
        return _Units.Units_ShiftedUnit_Move(self, *args)


    def __init__(self, *args):
        """
        * Creates and returns a shifted unit. <aname> is the name of the unit, <asymbol> is the usual abbreviation of the unit, <avalue> is the value in relation to the International System of Units, and <amove> is the gap in relation to another unit. //! For example Celcius dregee of temperature is an instance of ShiftedUnit with <avalue> equal to 1. and <amove> equal to 273.15.
        	:param aname:
        	:type aname: char *
        	:param asymbol:
        	:type asymbol: char *
        	:param avalue:
        	:type avalue: float
        	:param amove:
        	:type amove: float
        	:param aquantity:
        	:type aquantity: Units_Quantity
        	:rtype: None
        * Creates and returns a unit. <aname> is the name of the unit, <asymbol> is the usual abbreviation of the unit.
        	:param aname:
        	:type aname: char *
        	:param asymbol:
        	:type asymbol: char *
        	:rtype: None
        * Creates and returns a unit. <aname> is the name of the unit.
        	:param aname:
        	:type aname: char *
        	:rtype: None
        """
        _Units.Units_ShiftedUnit_swiginit(self, _Units.new_Units_ShiftedUnit(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_ShiftedUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_ShiftedUnit
Units_ShiftedUnit.Move = new_instancemethod(_Units.Units_ShiftedUnit_Move, None, Units_ShiftedUnit)
Units_ShiftedUnit_swigregister = _Units.Units_ShiftedUnit_swigregister
Units_ShiftedUnit_swigregister(Units_ShiftedUnit)

class Units_UnitSentence(Units_Sentence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Analyse(self, *args) -> "void":
        """
        * Analyzes the sequence of tokens created by the constructor to find the true significance of each token.
        	:rtype: None
        """
        return _Units.Units_UnitSentence_Analyse(self, *args)


    def SetUnits(self, *args) -> "void":
        """
        * For each token which represents a unit, finds in the sequence of physical quantities all the characteristics of the unit found.
        	:param aquantitiessequence:
        	:type aquantitiessequence: Units_QuantitiesSequence
        	:rtype: None
        """
        return _Units.Units_UnitSentence_SetUnits(self, *args)


    def __init__(self, *args):
        """
        * Creates and returns a UnitSentence. The string <astring> describes in natural language the unit or the composed unit to be analysed.
        	:param astring:
        	:type astring: char *
        	:rtype: None
        * Creates and returns a UnitSentence. The string <astring> describes in natural language the unit to be analysed. The sequence of physical quantities <asequenceofquantities> describes the available dictionary of units you want to use.
        	:param astring:
        	:type astring: char *
        	:param aquantitiessequence:
        	:type aquantitiessequence: Units_QuantitiesSequence
        	:rtype: None
        """
        _Units.Units_UnitSentence_swiginit(self, _Units.new_Units_UnitSentence(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_UnitSentence
Units_UnitSentence.Analyse = new_instancemethod(_Units.Units_UnitSentence_Analyse, None, Units_UnitSentence)
Units_UnitSentence.SetUnits = new_instancemethod(_Units.Units_UnitSentence_SetUnits, None, Units_UnitSentence)
Units_UnitSentence_swigregister = _Units.Units_UnitSentence_swigregister
Units_UnitSentence_swigregister(Units_UnitSentence)

class Units_UnitsLexicon(Units_Lexicon):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Creates(self, *args) -> "void":
        """
        * Reads the files <afilename1> and <afilename2> to create a sequence of tokens stored in <thesequenceoftokens>.
        	:param amode: default value is Standard_True
        	:type amode: bool
        	:rtype: None
        """
        return _Units.Units_UnitsLexicon_Creates(self, *args)


    def Dump(self, *args) -> "void":
        """
        * Useful for debugging.
        	:rtype: None
        """
        return _Units.Units_UnitsLexicon_Dump(self, *args)


    def __init__(self, *args):
        """
        * Returns an empty instance of UnitsLexicon
        	:rtype: None
        """
        _Units.Units_UnitsLexicon_swiginit(self, _Units.new_Units_UnitsLexicon(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_UnitsLexicon_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_UnitsLexicon
Units_UnitsLexicon.Creates = new_instancemethod(_Units.Units_UnitsLexicon_Creates, None, Units_UnitsLexicon)
Units_UnitsLexicon.Dump = new_instancemethod(_Units.Units_UnitsLexicon_Dump, None, Units_UnitsLexicon)
Units_UnitsLexicon_swigregister = _Units.Units_UnitsLexicon_swigregister
Units_UnitsLexicon_swigregister(Units_UnitsLexicon)

class Units_TokensSequence(Units_TksSequence, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Units.Units_TokensSequence_swiginit(self, _Units.new_Units_TokensSequence(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_TokensSequence_DownCast(t)

    __swig_destroy__ = _Units.delete_Units_TokensSequence
Units_TokensSequence.Sequence = new_instancemethod(_Units.Units_TokensSequence_Sequence, None, Units_TokensSequence)
Units_TokensSequence.Append = new_instancemethod(_Units.Units_TokensSequence_Append, None, Units_TokensSequence)
Units_TokensSequence.ChangeSequence = new_instancemethod(_Units.Units_TokensSequence_ChangeSequence, None, Units_TokensSequence)
Units_TokensSequence_swigregister = _Units.Units_TokensSequence_swigregister
Units_TokensSequence_swigregister(Units_TokensSequence)

class Units_QuantitiesSequence(Units_QtsSequence, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Units.Units_QuantitiesSequence_swiginit(self, _Units.new_Units_QuantitiesSequence(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_QuantitiesSequence_DownCast(t)

    __swig_destroy__ = _Units.delete_Units_QuantitiesSequence
Units_QuantitiesSequence.Sequence = new_instancemethod(_Units.Units_QuantitiesSequence_Sequence, None, Units_QuantitiesSequence)
Units_QuantitiesSequence.Append = new_instancemethod(_Units.Units_QuantitiesSequence_Append, None, Units_QuantitiesSequence)
Units_QuantitiesSequence.ChangeSequence = new_instancemethod(_Units.Units_QuantitiesSequence_ChangeSequence, None, Units_QuantitiesSequence)
Units_QuantitiesSequence_swigregister = _Units.Units_QuantitiesSequence_swigregister
Units_QuantitiesSequence_swigregister(Units_QuantitiesSequence)

class Units_UnitsSequence(Units_UtsSequence, OCC.Core.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Units.Units_UnitsSequence_swiginit(self, _Units.new_Units_UnitsSequence(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_UnitsSequence_DownCast(t)

    __swig_destroy__ = _Units.delete_Units_UnitsSequence
Units_UnitsSequence.Sequence = new_instancemethod(_Units.Units_UnitsSequence_Sequence, None, Units_UnitsSequence)
Units_UnitsSequence.Append = new_instancemethod(_Units.Units_UnitsSequence_Append, None, Units_UnitsSequence)
Units_UnitsSequence.ChangeSequence = new_instancemethod(_Units.Units_UnitsSequence_ChangeSequence, None, Units_UnitsSequence)
Units_UnitsSequence_swigregister = _Units.Units_UnitsSequence_swigregister
Units_UnitsSequence_swigregister(Units_UnitsSequence)



