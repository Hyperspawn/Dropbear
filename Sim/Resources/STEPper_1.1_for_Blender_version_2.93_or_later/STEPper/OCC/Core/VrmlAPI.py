# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
VrmlAPI module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_vrmlapi.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _VrmlAPI.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VrmlAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VrmlAPI')
    _VrmlAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VrmlAPI', [dirname(__file__)])
        except ImportError:
            import _VrmlAPI
            return _VrmlAPI
        try:
            _mod = imp.load_module('_VrmlAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VrmlAPI = swig_import_helper()
    del swig_import_helper
else:
    import _VrmlAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VrmlAPI.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_VrmlAPI.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_VrmlAPI.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_VrmlAPI.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_VrmlAPI.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_VrmlAPI.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_VrmlAPI.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_VrmlAPI.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_VrmlAPI.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_VrmlAPI.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_VrmlAPI.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_VrmlAPI.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_VrmlAPI.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_VrmlAPI.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_VrmlAPI.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_VrmlAPI.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_VrmlAPI.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _VrmlAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _VrmlAPI.process_exception(error, method_name, class_name)
process_exception = _VrmlAPI.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.VrmlConverter
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Aspect
import OCC.Core.Quantity
import OCC.Core.Vrml
import OCC.Core.HLRAlgo
import OCC.Core.TopTools
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.TDocStd
import OCC.Core.TDF
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
VrmlAPI_ShadedRepresentation = _VrmlAPI.VrmlAPI_ShadedRepresentation
VrmlAPI_WireFrameRepresentation = _VrmlAPI.VrmlAPI_WireFrameRepresentation
VrmlAPI_BothRepresentation = _VrmlAPI.VrmlAPI_BothRepresentation
class vrmlapi(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Write(*args) -> "Standard_Boolean":
        """
        * With help of this class user can change parameters of writing. Converts the shape aShape to VRML format of the passed version and writes it to the file identified by aFileName using default parameters.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aFileName:
        	:type aFileName: char *
        	:param aVersion: default value is 2
        	:type aVersion: int
        	:rtype: bool
        """
        return _VrmlAPI.vrmlapi_Write(*args)

    Write = staticmethod(Write)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlAPI.vrmlapi_swiginit(self, _VrmlAPI.new_vrmlapi())
    __swig_destroy__ = _VrmlAPI.delete_vrmlapi
vrmlapi_swigregister = _VrmlAPI.vrmlapi_swigregister
vrmlapi_swigregister(vrmlapi)

def vrmlapi_Write(*args) -> "Standard_Boolean":
    """
    * With help of this class user can change parameters of writing. Converts the shape aShape to VRML format of the passed version and writes it to the file identified by aFileName using default parameters.
    	:param aShape:
    	:type aShape: TopoDS_Shape
    	:param aFileName:
    	:type aFileName: char *
    	:param aVersion: default value is 2
    	:type aVersion: int
    	:rtype: bool
    """
    return _VrmlAPI.vrmlapi_Write(*args)

class VrmlAPI_Writer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Drawer(self, *args) -> "opencascade::handle< VrmlConverter_Drawer >":
        """
        * Returns drawer object
        	:rtype: opencascade::handle<VrmlConverter_Drawer>
        """
        return _VrmlAPI.VrmlAPI_Writer_Drawer(self, *args)


    def GetFreeBoundsMaterial(self, *args) -> "opencascade::handle< Vrml_Material >":
        """:rtype: opencascade::handle<Vrml_Material>"""
        return _VrmlAPI.VrmlAPI_Writer_GetFreeBoundsMaterial(self, *args)


    def GetFrontMaterial(self, *args) -> "opencascade::handle< Vrml_Material >":
        """:rtype: opencascade::handle<Vrml_Material>"""
        return _VrmlAPI.VrmlAPI_Writer_GetFrontMaterial(self, *args)


    def GetLineMaterial(self, *args) -> "opencascade::handle< Vrml_Material >":
        """:rtype: opencascade::handle<Vrml_Material>"""
        return _VrmlAPI.VrmlAPI_Writer_GetLineMaterial(self, *args)


    def GetPointsMaterial(self, *args) -> "opencascade::handle< Vrml_Material >":
        """:rtype: opencascade::handle<Vrml_Material>"""
        return _VrmlAPI.VrmlAPI_Writer_GetPointsMaterial(self, *args)


    def GetRepresentation(self, *args) -> "VrmlAPI_RepresentationOfShape":
        """
        * Returns the representation of the shape which is written to the VRML file. Types of representation are set through the VrmlAPI_RepresentationOfShape enumeration.
        	:rtype: VrmlAPI_RepresentationOfShape
        """
        return _VrmlAPI.VrmlAPI_Writer_GetRepresentation(self, *args)


    def GetUisoMaterial(self, *args) -> "opencascade::handle< Vrml_Material >":
        """:rtype: opencascade::handle<Vrml_Material>"""
        return _VrmlAPI.VrmlAPI_Writer_GetUisoMaterial(self, *args)


    def GetUnfreeBoundsMaterial(self, *args) -> "opencascade::handle< Vrml_Material >":
        """:rtype: opencascade::handle<Vrml_Material>"""
        return _VrmlAPI.VrmlAPI_Writer_GetUnfreeBoundsMaterial(self, *args)


    def GetVisoMaterial(self, *args) -> "opencascade::handle< Vrml_Material >":
        """:rtype: opencascade::handle<Vrml_Material>"""
        return _VrmlAPI.VrmlAPI_Writer_GetVisoMaterial(self, *args)


    def GetWireMaterial(self, *args) -> "opencascade::handle< Vrml_Material >":
        """:rtype: opencascade::handle<Vrml_Material>"""
        return _VrmlAPI.VrmlAPI_Writer_GetWireMaterial(self, *args)


    def ResetToDefaults(self, *args) -> "void":
        """
        * Resets all parameters (representation, deflection) to their default values..
        	:rtype: None
        """
        return _VrmlAPI.VrmlAPI_Writer_ResetToDefaults(self, *args)


    def SetAmbientColorToMaterial(self, *args) -> "void":
        """
        :param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param Color:
        	:type Color: Quantity_HArray1OfColor
        	:rtype: None
        """
        return _VrmlAPI.VrmlAPI_Writer_SetAmbientColorToMaterial(self, *args)


    def SetDeflection(self, *args) -> "void":
        """
        * Sets the deflection aDef of the mesh algorithm which is used to compute the shaded representation of the translated shape. The default value is -1. When the deflection value is less than 0, the deflection is calculated from the relative size of the shaped.
        	:param aDef:
        	:type aDef: float
        	:rtype: None
        """
        return _VrmlAPI.VrmlAPI_Writer_SetDeflection(self, *args)


    def SetDiffuseColorToMaterial(self, *args) -> "void":
        """
        :param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param Color:
        	:type Color: Quantity_HArray1OfColor
        	:rtype: None
        """
        return _VrmlAPI.VrmlAPI_Writer_SetDiffuseColorToMaterial(self, *args)


    def SetEmissiveColorToMaterial(self, *args) -> "void":
        """
        :param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param Color:
        	:type Color: Quantity_HArray1OfColor
        	:rtype: None
        """
        return _VrmlAPI.VrmlAPI_Writer_SetEmissiveColorToMaterial(self, *args)


    def SetRepresentation(self, *args) -> "void":
        """
        * Sets the representation of the shape aRep which is written to the VRML file. The three options are : - shaded - wireframe - both shaded and wireframe (default) defined through the VrmlAPI_RepresentationOfShape enumeration.
        	:param aRep:
        	:type aRep: VrmlAPI_RepresentationOfShape
        	:rtype: None
        """
        return _VrmlAPI.VrmlAPI_Writer_SetRepresentation(self, *args)


    def SetShininessToMaterial(self, *args) -> "void":
        """
        :param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param aShininess:
        	:type aShininess: float
        	:rtype: None
        """
        return _VrmlAPI.VrmlAPI_Writer_SetShininessToMaterial(self, *args)


    def SetSpecularColorToMaterial(self, *args) -> "void":
        """
        :param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param Color:
        	:type Color: Quantity_HArray1OfColor
        	:rtype: None
        """
        return _VrmlAPI.VrmlAPI_Writer_SetSpecularColorToMaterial(self, *args)


    def SetTransparencyToMaterial(self, *args) -> "void":
        """
        * Set transparency to given material
        	:param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param aTransparency:
        	:type aTransparency: float
        	:rtype: None
        """
        return _VrmlAPI.VrmlAPI_Writer_SetTransparencyToMaterial(self, *args)


    def __init__(self, *args):
        """
        * Creates a writer object with default parameters.
        	:rtype: None
        """
        _VrmlAPI.VrmlAPI_Writer_swiginit(self, _VrmlAPI.new_VrmlAPI_Writer(*args))

    def Write(self, *args) -> "Standard_Boolean":
        """
        * Converts the shape aShape to VRML format of the passed version and writes it to the file identified by aFile.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aFile:
        	:type aFile: char *
        	:param aVersion: default value is 2
        	:type aVersion: int
        	:rtype: bool
        """
        return _VrmlAPI.VrmlAPI_Writer_Write(self, *args)


    def WriteDoc(self, *args) -> "Standard_Boolean":
        """
        * Converts the document to VRML format of the passed version and writes it to the file identified by aFile.
        	:param theDoc:
        	:type theDoc: TDocStd_Document
        	:param theFile:
        	:type theFile: char *
        	:param theScale:
        	:type theScale: float
        	:rtype: bool
        """
        return _VrmlAPI.VrmlAPI_Writer_WriteDoc(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlAPI.delete_VrmlAPI_Writer
VrmlAPI_Writer.Drawer = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_Drawer, None, VrmlAPI_Writer)
VrmlAPI_Writer.GetFreeBoundsMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_GetFreeBoundsMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.GetFrontMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_GetFrontMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.GetLineMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_GetLineMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.GetPointsMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_GetPointsMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.GetRepresentation = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_GetRepresentation, None, VrmlAPI_Writer)
VrmlAPI_Writer.GetUisoMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_GetUisoMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.GetUnfreeBoundsMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_GetUnfreeBoundsMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.GetVisoMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_GetVisoMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.GetWireMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_GetWireMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.ResetToDefaults = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_ResetToDefaults, None, VrmlAPI_Writer)
VrmlAPI_Writer.SetAmbientColorToMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_SetAmbientColorToMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.SetDeflection = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_SetDeflection, None, VrmlAPI_Writer)
VrmlAPI_Writer.SetDiffuseColorToMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_SetDiffuseColorToMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.SetEmissiveColorToMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_SetEmissiveColorToMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.SetRepresentation = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_SetRepresentation, None, VrmlAPI_Writer)
VrmlAPI_Writer.SetShininessToMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_SetShininessToMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.SetSpecularColorToMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_SetSpecularColorToMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.SetTransparencyToMaterial = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_SetTransparencyToMaterial, None, VrmlAPI_Writer)
VrmlAPI_Writer.Write = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_Write, None, VrmlAPI_Writer)
VrmlAPI_Writer.WriteDoc = new_instancemethod(_VrmlAPI.VrmlAPI_Writer_WriteDoc, None, VrmlAPI_Writer)
VrmlAPI_Writer_swigregister = _VrmlAPI.VrmlAPI_Writer_swigregister
VrmlAPI_Writer_swigregister(VrmlAPI_Writer)



