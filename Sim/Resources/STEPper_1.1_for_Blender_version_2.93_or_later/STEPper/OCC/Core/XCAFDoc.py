# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XCAFDoc module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xcafdoc.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _XCAFDoc.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XCAFDoc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XCAFDoc')
    _XCAFDoc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XCAFDoc', [dirname(__file__)])
        except ImportError:
            import _XCAFDoc
            return _XCAFDoc
        try:
            _mod = imp.load_module('_XCAFDoc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XCAFDoc = swig_import_helper()
    del swig_import_helper
else:
    import _XCAFDoc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XCAFDoc.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_XCAFDoc.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_XCAFDoc.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_XCAFDoc.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_XCAFDoc.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_XCAFDoc.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_XCAFDoc.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_XCAFDoc.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_XCAFDoc.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_XCAFDoc.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_XCAFDoc.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_XCAFDoc.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_XCAFDoc.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_XCAFDoc.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_XCAFDoc.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_XCAFDoc.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_XCAFDoc.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _XCAFDoc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XCAFDoc.process_exception(error, method_name, class_name)
process_exception = _XCAFDoc.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.TDF
import OCC.Core.TColStd
import OCC.Core.gp
import OCC.Core.Quantity
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.XCAFDimTolObjects
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
import OCC.Core.XCAFNoteObjects
import OCC.Core.OSD
import OCC.Core.TopTools
import OCC.Core.TDataStd
import OCC.Core.XCAFView
XCAFDoc_ColorGen = _XCAFDoc.XCAFDoc_ColorGen
XCAFDoc_ColorSurf = _XCAFDoc.XCAFDoc_ColorSurf
XCAFDoc_ColorCurv = _XCAFDoc.XCAFDoc_ColorCurv

def Handle_XCAFDoc_Area_Create() -> "opencascade::handle< XCAFDoc_Area >":
    return _XCAFDoc.Handle_XCAFDoc_Area_Create()
Handle_XCAFDoc_Area_Create = _XCAFDoc.Handle_XCAFDoc_Area_Create

def Handle_XCAFDoc_Area_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_Area >":
    return _XCAFDoc.Handle_XCAFDoc_Area_DownCast(t)
Handle_XCAFDoc_Area_DownCast = _XCAFDoc.Handle_XCAFDoc_Area_DownCast

def Handle_XCAFDoc_Area_IsNull(t: 'opencascade::handle< XCAFDoc_Area > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_Area_IsNull(t)
Handle_XCAFDoc_Area_IsNull = _XCAFDoc.Handle_XCAFDoc_Area_IsNull

def Handle_XCAFDoc_AssemblyItemRef_Create() -> "opencascade::handle< XCAFDoc_AssemblyItemRef >":
    return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Create()
Handle_XCAFDoc_AssemblyItemRef_Create = _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Create

def Handle_XCAFDoc_AssemblyItemRef_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_AssemblyItemRef >":
    return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_DownCast(t)
Handle_XCAFDoc_AssemblyItemRef_DownCast = _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_DownCast

def Handle_XCAFDoc_AssemblyItemRef_IsNull(t: 'opencascade::handle< XCAFDoc_AssemblyItemRef > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsNull(t)
Handle_XCAFDoc_AssemblyItemRef_IsNull = _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsNull

def Handle_XCAFDoc_Centroid_Create() -> "opencascade::handle< XCAFDoc_Centroid >":
    return _XCAFDoc.Handle_XCAFDoc_Centroid_Create()
Handle_XCAFDoc_Centroid_Create = _XCAFDoc.Handle_XCAFDoc_Centroid_Create

def Handle_XCAFDoc_Centroid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_Centroid >":
    return _XCAFDoc.Handle_XCAFDoc_Centroid_DownCast(t)
Handle_XCAFDoc_Centroid_DownCast = _XCAFDoc.Handle_XCAFDoc_Centroid_DownCast

def Handle_XCAFDoc_Centroid_IsNull(t: 'opencascade::handle< XCAFDoc_Centroid > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_Centroid_IsNull(t)
Handle_XCAFDoc_Centroid_IsNull = _XCAFDoc.Handle_XCAFDoc_Centroid_IsNull

def Handle_XCAFDoc_ClippingPlaneTool_Create() -> "opencascade::handle< XCAFDoc_ClippingPlaneTool >":
    return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Create()
Handle_XCAFDoc_ClippingPlaneTool_Create = _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Create

def Handle_XCAFDoc_ClippingPlaneTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_ClippingPlaneTool >":
    return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_DownCast(t)
Handle_XCAFDoc_ClippingPlaneTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_DownCast

def Handle_XCAFDoc_ClippingPlaneTool_IsNull(t: 'opencascade::handle< XCAFDoc_ClippingPlaneTool > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IsNull(t)
Handle_XCAFDoc_ClippingPlaneTool_IsNull = _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IsNull

def Handle_XCAFDoc_Color_Create() -> "opencascade::handle< XCAFDoc_Color >":
    return _XCAFDoc.Handle_XCAFDoc_Color_Create()
Handle_XCAFDoc_Color_Create = _XCAFDoc.Handle_XCAFDoc_Color_Create

def Handle_XCAFDoc_Color_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_Color >":
    return _XCAFDoc.Handle_XCAFDoc_Color_DownCast(t)
Handle_XCAFDoc_Color_DownCast = _XCAFDoc.Handle_XCAFDoc_Color_DownCast

def Handle_XCAFDoc_Color_IsNull(t: 'opencascade::handle< XCAFDoc_Color > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_Color_IsNull(t)
Handle_XCAFDoc_Color_IsNull = _XCAFDoc.Handle_XCAFDoc_Color_IsNull

def Handle_XCAFDoc_ColorTool_Create() -> "opencascade::handle< XCAFDoc_ColorTool >":
    return _XCAFDoc.Handle_XCAFDoc_ColorTool_Create()
Handle_XCAFDoc_ColorTool_Create = _XCAFDoc.Handle_XCAFDoc_ColorTool_Create

def Handle_XCAFDoc_ColorTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_ColorTool >":
    return _XCAFDoc.Handle_XCAFDoc_ColorTool_DownCast(t)
Handle_XCAFDoc_ColorTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ColorTool_DownCast

def Handle_XCAFDoc_ColorTool_IsNull(t: 'opencascade::handle< XCAFDoc_ColorTool > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsNull(t)
Handle_XCAFDoc_ColorTool_IsNull = _XCAFDoc.Handle_XCAFDoc_ColorTool_IsNull

def Handle_XCAFDoc_Datum_Create() -> "opencascade::handle< XCAFDoc_Datum >":
    return _XCAFDoc.Handle_XCAFDoc_Datum_Create()
Handle_XCAFDoc_Datum_Create = _XCAFDoc.Handle_XCAFDoc_Datum_Create

def Handle_XCAFDoc_Datum_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_Datum >":
    return _XCAFDoc.Handle_XCAFDoc_Datum_DownCast(t)
Handle_XCAFDoc_Datum_DownCast = _XCAFDoc.Handle_XCAFDoc_Datum_DownCast

def Handle_XCAFDoc_Datum_IsNull(t: 'opencascade::handle< XCAFDoc_Datum > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_Datum_IsNull(t)
Handle_XCAFDoc_Datum_IsNull = _XCAFDoc.Handle_XCAFDoc_Datum_IsNull

def Handle_XCAFDoc_DimTol_Create() -> "opencascade::handle< XCAFDoc_DimTol >":
    return _XCAFDoc.Handle_XCAFDoc_DimTol_Create()
Handle_XCAFDoc_DimTol_Create = _XCAFDoc.Handle_XCAFDoc_DimTol_Create

def Handle_XCAFDoc_DimTol_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_DimTol >":
    return _XCAFDoc.Handle_XCAFDoc_DimTol_DownCast(t)
Handle_XCAFDoc_DimTol_DownCast = _XCAFDoc.Handle_XCAFDoc_DimTol_DownCast

def Handle_XCAFDoc_DimTol_IsNull(t: 'opencascade::handle< XCAFDoc_DimTol > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_DimTol_IsNull(t)
Handle_XCAFDoc_DimTol_IsNull = _XCAFDoc.Handle_XCAFDoc_DimTol_IsNull

def Handle_XCAFDoc_Dimension_Create() -> "opencascade::handle< XCAFDoc_Dimension >":
    return _XCAFDoc.Handle_XCAFDoc_Dimension_Create()
Handle_XCAFDoc_Dimension_Create = _XCAFDoc.Handle_XCAFDoc_Dimension_Create

def Handle_XCAFDoc_Dimension_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_Dimension >":
    return _XCAFDoc.Handle_XCAFDoc_Dimension_DownCast(t)
Handle_XCAFDoc_Dimension_DownCast = _XCAFDoc.Handle_XCAFDoc_Dimension_DownCast

def Handle_XCAFDoc_Dimension_IsNull(t: 'opencascade::handle< XCAFDoc_Dimension > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_Dimension_IsNull(t)
Handle_XCAFDoc_Dimension_IsNull = _XCAFDoc.Handle_XCAFDoc_Dimension_IsNull

def Handle_XCAFDoc_DocumentTool_Create() -> "opencascade::handle< XCAFDoc_DocumentTool >":
    return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Create()
Handle_XCAFDoc_DocumentTool_Create = _XCAFDoc.Handle_XCAFDoc_DocumentTool_Create

def Handle_XCAFDoc_DocumentTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_DocumentTool >":
    return _XCAFDoc.Handle_XCAFDoc_DocumentTool_DownCast(t)
Handle_XCAFDoc_DocumentTool_DownCast = _XCAFDoc.Handle_XCAFDoc_DocumentTool_DownCast

def Handle_XCAFDoc_DocumentTool_IsNull(t: 'opencascade::handle< XCAFDoc_DocumentTool > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_DocumentTool_IsNull(t)
Handle_XCAFDoc_DocumentTool_IsNull = _XCAFDoc.Handle_XCAFDoc_DocumentTool_IsNull

def Handle_XCAFDoc_GraphNode_Create() -> "opencascade::handle< XCAFDoc_GraphNode >":
    return _XCAFDoc.Handle_XCAFDoc_GraphNode_Create()
Handle_XCAFDoc_GraphNode_Create = _XCAFDoc.Handle_XCAFDoc_GraphNode_Create

def Handle_XCAFDoc_GraphNode_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_GraphNode >":
    return _XCAFDoc.Handle_XCAFDoc_GraphNode_DownCast(t)
Handle_XCAFDoc_GraphNode_DownCast = _XCAFDoc.Handle_XCAFDoc_GraphNode_DownCast

def Handle_XCAFDoc_GraphNode_IsNull(t: 'opencascade::handle< XCAFDoc_GraphNode > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_GraphNode_IsNull(t)
Handle_XCAFDoc_GraphNode_IsNull = _XCAFDoc.Handle_XCAFDoc_GraphNode_IsNull

def Handle_XCAFDoc_LayerTool_Create() -> "opencascade::handle< XCAFDoc_LayerTool >":
    return _XCAFDoc.Handle_XCAFDoc_LayerTool_Create()
Handle_XCAFDoc_LayerTool_Create = _XCAFDoc.Handle_XCAFDoc_LayerTool_Create

def Handle_XCAFDoc_LayerTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_LayerTool >":
    return _XCAFDoc.Handle_XCAFDoc_LayerTool_DownCast(t)
Handle_XCAFDoc_LayerTool_DownCast = _XCAFDoc.Handle_XCAFDoc_LayerTool_DownCast

def Handle_XCAFDoc_LayerTool_IsNull(t: 'opencascade::handle< XCAFDoc_LayerTool > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsNull(t)
Handle_XCAFDoc_LayerTool_IsNull = _XCAFDoc.Handle_XCAFDoc_LayerTool_IsNull

def Handle_XCAFDoc_Location_Create() -> "opencascade::handle< XCAFDoc_Location >":
    return _XCAFDoc.Handle_XCAFDoc_Location_Create()
Handle_XCAFDoc_Location_Create = _XCAFDoc.Handle_XCAFDoc_Location_Create

def Handle_XCAFDoc_Location_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_Location >":
    return _XCAFDoc.Handle_XCAFDoc_Location_DownCast(t)
Handle_XCAFDoc_Location_DownCast = _XCAFDoc.Handle_XCAFDoc_Location_DownCast

def Handle_XCAFDoc_Location_IsNull(t: 'opencascade::handle< XCAFDoc_Location > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_Location_IsNull(t)
Handle_XCAFDoc_Location_IsNull = _XCAFDoc.Handle_XCAFDoc_Location_IsNull

def Handle_XCAFDoc_Material_Create() -> "opencascade::handle< XCAFDoc_Material >":
    return _XCAFDoc.Handle_XCAFDoc_Material_Create()
Handle_XCAFDoc_Material_Create = _XCAFDoc.Handle_XCAFDoc_Material_Create

def Handle_XCAFDoc_Material_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_Material >":
    return _XCAFDoc.Handle_XCAFDoc_Material_DownCast(t)
Handle_XCAFDoc_Material_DownCast = _XCAFDoc.Handle_XCAFDoc_Material_DownCast

def Handle_XCAFDoc_Material_IsNull(t: 'opencascade::handle< XCAFDoc_Material > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_Material_IsNull(t)
Handle_XCAFDoc_Material_IsNull = _XCAFDoc.Handle_XCAFDoc_Material_IsNull

def Handle_XCAFDoc_MaterialTool_Create() -> "opencascade::handle< XCAFDoc_MaterialTool >":
    return _XCAFDoc.Handle_XCAFDoc_MaterialTool_Create()
Handle_XCAFDoc_MaterialTool_Create = _XCAFDoc.Handle_XCAFDoc_MaterialTool_Create

def Handle_XCAFDoc_MaterialTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_MaterialTool >":
    return _XCAFDoc.Handle_XCAFDoc_MaterialTool_DownCast(t)
Handle_XCAFDoc_MaterialTool_DownCast = _XCAFDoc.Handle_XCAFDoc_MaterialTool_DownCast

def Handle_XCAFDoc_MaterialTool_IsNull(t: 'opencascade::handle< XCAFDoc_MaterialTool > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_MaterialTool_IsNull(t)
Handle_XCAFDoc_MaterialTool_IsNull = _XCAFDoc.Handle_XCAFDoc_MaterialTool_IsNull

def Handle_XCAFDoc_Note_Create() -> "opencascade::handle< XCAFDoc_Note >":
    return _XCAFDoc.Handle_XCAFDoc_Note_Create()
Handle_XCAFDoc_Note_Create = _XCAFDoc.Handle_XCAFDoc_Note_Create

def Handle_XCAFDoc_Note_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_Note >":
    return _XCAFDoc.Handle_XCAFDoc_Note_DownCast(t)
Handle_XCAFDoc_Note_DownCast = _XCAFDoc.Handle_XCAFDoc_Note_DownCast

def Handle_XCAFDoc_Note_IsNull(t: 'opencascade::handle< XCAFDoc_Note > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_Note_IsNull(t)
Handle_XCAFDoc_Note_IsNull = _XCAFDoc.Handle_XCAFDoc_Note_IsNull

def Handle_XCAFDoc_NotesTool_Create() -> "opencascade::handle< XCAFDoc_NotesTool >":
    return _XCAFDoc.Handle_XCAFDoc_NotesTool_Create()
Handle_XCAFDoc_NotesTool_Create = _XCAFDoc.Handle_XCAFDoc_NotesTool_Create

def Handle_XCAFDoc_NotesTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_NotesTool >":
    return _XCAFDoc.Handle_XCAFDoc_NotesTool_DownCast(t)
Handle_XCAFDoc_NotesTool_DownCast = _XCAFDoc.Handle_XCAFDoc_NotesTool_DownCast

def Handle_XCAFDoc_NotesTool_IsNull(t: 'opencascade::handle< XCAFDoc_NotesTool > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_NotesTool_IsNull(t)
Handle_XCAFDoc_NotesTool_IsNull = _XCAFDoc.Handle_XCAFDoc_NotesTool_IsNull

def Handle_XCAFDoc_ShapeMapTool_Create() -> "opencascade::handle< XCAFDoc_ShapeMapTool >":
    return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Create()
Handle_XCAFDoc_ShapeMapTool_Create = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Create

def Handle_XCAFDoc_ShapeMapTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_ShapeMapTool >":
    return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DownCast(t)
Handle_XCAFDoc_ShapeMapTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DownCast

def Handle_XCAFDoc_ShapeMapTool_IsNull(t: 'opencascade::handle< XCAFDoc_ShapeMapTool > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsNull(t)
Handle_XCAFDoc_ShapeMapTool_IsNull = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsNull

def Handle_XCAFDoc_ShapeTool_Create() -> "opencascade::handle< XCAFDoc_ShapeTool >":
    return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Create()
Handle_XCAFDoc_ShapeTool_Create = _XCAFDoc.Handle_XCAFDoc_ShapeTool_Create

def Handle_XCAFDoc_ShapeTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_ShapeTool >":
    return _XCAFDoc.Handle_XCAFDoc_ShapeTool_DownCast(t)
Handle_XCAFDoc_ShapeTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ShapeTool_DownCast

def Handle_XCAFDoc_ShapeTool_IsNull(t: 'opencascade::handle< XCAFDoc_ShapeTool > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsNull(t)
Handle_XCAFDoc_ShapeTool_IsNull = _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsNull

def Handle_XCAFDoc_View_Create() -> "opencascade::handle< XCAFDoc_View >":
    return _XCAFDoc.Handle_XCAFDoc_View_Create()
Handle_XCAFDoc_View_Create = _XCAFDoc.Handle_XCAFDoc_View_Create

def Handle_XCAFDoc_View_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_View >":
    return _XCAFDoc.Handle_XCAFDoc_View_DownCast(t)
Handle_XCAFDoc_View_DownCast = _XCAFDoc.Handle_XCAFDoc_View_DownCast

def Handle_XCAFDoc_View_IsNull(t: 'opencascade::handle< XCAFDoc_View > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_View_IsNull(t)
Handle_XCAFDoc_View_IsNull = _XCAFDoc.Handle_XCAFDoc_View_IsNull

def Handle_XCAFDoc_ViewTool_Create() -> "opencascade::handle< XCAFDoc_ViewTool >":
    return _XCAFDoc.Handle_XCAFDoc_ViewTool_Create()
Handle_XCAFDoc_ViewTool_Create = _XCAFDoc.Handle_XCAFDoc_ViewTool_Create

def Handle_XCAFDoc_ViewTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_ViewTool >":
    return _XCAFDoc.Handle_XCAFDoc_ViewTool_DownCast(t)
Handle_XCAFDoc_ViewTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ViewTool_DownCast

def Handle_XCAFDoc_ViewTool_IsNull(t: 'opencascade::handle< XCAFDoc_ViewTool > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_ViewTool_IsNull(t)
Handle_XCAFDoc_ViewTool_IsNull = _XCAFDoc.Handle_XCAFDoc_ViewTool_IsNull

def Handle_XCAFDoc_Volume_Create() -> "opencascade::handle< XCAFDoc_Volume >":
    return _XCAFDoc.Handle_XCAFDoc_Volume_Create()
Handle_XCAFDoc_Volume_Create = _XCAFDoc.Handle_XCAFDoc_Volume_Create

def Handle_XCAFDoc_Volume_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_Volume >":
    return _XCAFDoc.Handle_XCAFDoc_Volume_DownCast(t)
Handle_XCAFDoc_Volume_DownCast = _XCAFDoc.Handle_XCAFDoc_Volume_DownCast

def Handle_XCAFDoc_Volume_IsNull(t: 'opencascade::handle< XCAFDoc_Volume > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_Volume_IsNull(t)
Handle_XCAFDoc_Volume_IsNull = _XCAFDoc.Handle_XCAFDoc_Volume_IsNull

def Handle_XCAFDoc_NoteBinData_Create() -> "opencascade::handle< XCAFDoc_NoteBinData >":
    return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Create()
Handle_XCAFDoc_NoteBinData_Create = _XCAFDoc.Handle_XCAFDoc_NoteBinData_Create

def Handle_XCAFDoc_NoteBinData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_NoteBinData >":
    return _XCAFDoc.Handle_XCAFDoc_NoteBinData_DownCast(t)
Handle_XCAFDoc_NoteBinData_DownCast = _XCAFDoc.Handle_XCAFDoc_NoteBinData_DownCast

def Handle_XCAFDoc_NoteBinData_IsNull(t: 'opencascade::handle< XCAFDoc_NoteBinData > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsNull(t)
Handle_XCAFDoc_NoteBinData_IsNull = _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsNull

def Handle_XCAFDoc_NoteComment_Create() -> "opencascade::handle< XCAFDoc_NoteComment >":
    return _XCAFDoc.Handle_XCAFDoc_NoteComment_Create()
Handle_XCAFDoc_NoteComment_Create = _XCAFDoc.Handle_XCAFDoc_NoteComment_Create

def Handle_XCAFDoc_NoteComment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_NoteComment >":
    return _XCAFDoc.Handle_XCAFDoc_NoteComment_DownCast(t)
Handle_XCAFDoc_NoteComment_DownCast = _XCAFDoc.Handle_XCAFDoc_NoteComment_DownCast

def Handle_XCAFDoc_NoteComment_IsNull(t: 'opencascade::handle< XCAFDoc_NoteComment > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_NoteComment_IsNull(t)
Handle_XCAFDoc_NoteComment_IsNull = _XCAFDoc.Handle_XCAFDoc_NoteComment_IsNull

def Handle_XCAFDoc_NoteBalloon_Create() -> "opencascade::handle< XCAFDoc_NoteBalloon >":
    return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Create()
Handle_XCAFDoc_NoteBalloon_Create = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Create

def Handle_XCAFDoc_NoteBalloon_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFDoc_NoteBalloon >":
    return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_DownCast(t)
Handle_XCAFDoc_NoteBalloon_DownCast = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_DownCast

def Handle_XCAFDoc_NoteBalloon_IsNull(t: 'opencascade::handle< XCAFDoc_NoteBalloon > const &') -> "bool":
    return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsNull(t)
Handle_XCAFDoc_NoteBalloon_IsNull = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsNull
class XCAFDoc_DataMapOfShapeLabel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_swiginit(self, _XCAFDoc.new_XCAFDoc_DataMapOfShapeLabel(*args))
    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_DataMapOfShapeLabel
XCAFDoc_DataMapOfShapeLabel.begin = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_begin, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.end = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_end, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.cbegin = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_cbegin, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.cend = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_cend, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Exchange = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Exchange, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Assign = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Assign, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Set = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Set, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.ReSize = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_ReSize, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Bind = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Bind, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Bound = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Bound, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.IsBound = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_IsBound, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.UnBind = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_UnBind, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Seek = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Seek, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Find = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Find, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.ChangeSeek = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_ChangeSeek, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.ChangeFind = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_ChangeFind, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.__call__ = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel___call__, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Clear = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Clear, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel.Size = new_instancemethod(_XCAFDoc.XCAFDoc_DataMapOfShapeLabel_Size, None, XCAFDoc_DataMapOfShapeLabel)
XCAFDoc_DataMapOfShapeLabel_swigregister = _XCAFDoc.XCAFDoc_DataMapOfShapeLabel_swigregister
XCAFDoc_DataMapOfShapeLabel_swigregister(XCAFDoc_DataMapOfShapeLabel)

class XCAFDoc_GraphNodeSequence(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _XCAFDoc.XCAFDoc_GraphNodeSequence_swiginit(self, _XCAFDoc.new_XCAFDoc_GraphNodeSequence(*args))
    delNode = staticmethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_delNode)
    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_GraphNodeSequence
XCAFDoc_GraphNodeSequence.begin = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_begin, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.end = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_end, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.cbegin = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_cbegin, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.cend = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_cend, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Size = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Size, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Length = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Length, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Lower = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Lower, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Upper = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Upper, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.IsEmpty = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_IsEmpty, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Reverse = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Reverse, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Exchange = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Exchange, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Clear = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Clear, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Assign = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Assign, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Set = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Set, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Remove = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Remove, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Append = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Append, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Prepend = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Prepend, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.InsertBefore = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_InsertBefore, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.InsertAfter = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_InsertAfter, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Split = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Split, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.First = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_First, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.ChangeFirst = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_ChangeFirst, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Last = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Last, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.ChangeLast = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_ChangeLast, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.Value = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_Value, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.ChangeValue = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_ChangeValue, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.__call__ = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence___call__, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence.SetValue = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNodeSequence_SetValue, None, XCAFDoc_GraphNodeSequence)
XCAFDoc_GraphNodeSequence_swigregister = _XCAFDoc.XCAFDoc_GraphNodeSequence_swigregister
XCAFDoc_GraphNodeSequence_swigregister(XCAFDoc_GraphNodeSequence)

def XCAFDoc_GraphNodeSequence_delNode(theNode: 'NCollection_SeqNode *', theAl: 'TDF_HAllocator') -> "void":
    return _XCAFDoc.XCAFDoc_GraphNodeSequence_delNode(theNode, theAl)
XCAFDoc_GraphNodeSequence_delNode = _XCAFDoc.XCAFDoc_GraphNodeSequence_delNode

class xcafdoc(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AssemblyGUID(*args) -> "Standard_GUID const &":
        """
        * class for containing GraphNodes. Returns GUID for UAttribute identifying assembly
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_AssemblyGUID(*args)

    AssemblyGUID = staticmethod(AssemblyGUID)

    def ColorByLayerGUID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.xcafdoc_ColorByLayerGUID(*args)

    ColorByLayerGUID = staticmethod(ColorByLayerGUID)

    def ColorRefGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for TreeNode representing specified types of colors
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_ColorRefGUID(*args)

    ColorRefGUID = staticmethod(ColorRefGUID)

    def DatumRefGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for TreeNode representing specified types of datum
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_DatumRefGUID(*args)

    DatumRefGUID = staticmethod(DatumRefGUID)

    def DatumTolRefGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for TreeNode representing connections Datum-Toler
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_DatumTolRefGUID(*args)

    DatumTolRefGUID = staticmethod(DatumTolRefGUID)

    def DimTolRefGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for TreeNode representing specified types of DGT
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_DimTolRefGUID(*args)

    DimTolRefGUID = staticmethod(DimTolRefGUID)

    def DimensionRefFirstGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for TreeNode representing specified types of Dimension
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_DimensionRefFirstGUID(*args)

    DimensionRefFirstGUID = staticmethod(DimensionRefFirstGUID)

    def DimensionRefSecondGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for TreeNode representing specified types of Dimension
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_DimensionRefSecondGUID(*args)

    DimensionRefSecondGUID = staticmethod(DimensionRefSecondGUID)

    def ExternRefGUID(*args) -> "Standard_GUID const &":
        """
        * Returns GUID for UAttribute identifying external reference on no-step file
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_ExternRefGUID(*args)

    ExternRefGUID = staticmethod(ExternRefGUID)

    def GeomToleranceRefGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for TreeNode representing specified types of GeomTolerance
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_GeomToleranceRefGUID(*args)

    GeomToleranceRefGUID = staticmethod(GeomToleranceRefGUID)

    def InvisibleGUID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.xcafdoc_InvisibleGUID(*args)

    InvisibleGUID = staticmethod(InvisibleGUID)

    def LayerRefGUID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.xcafdoc_LayerRefGUID(*args)

    LayerRefGUID = staticmethod(LayerRefGUID)

    def LockGUID(*args) -> "Standard_GUID const &":
        """
        * Returns GUID for UAttribute identifying lock flag
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_LockGUID(*args)

    LockGUID = staticmethod(LockGUID)

    def MaterialRefGUID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.xcafdoc_MaterialRefGUID(*args)

    MaterialRefGUID = staticmethod(MaterialRefGUID)

    def NoteRefGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for representing notes
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_NoteRefGUID(*args)

    NoteRefGUID = staticmethod(NoteRefGUID)

    def SHUORefGUID(*args) -> "Standard_GUID const &":
        """
        * Returns GUID for UAttribute identifying specified higher usage occurrence
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_SHUORefGUID(*args)

    SHUORefGUID = staticmethod(SHUORefGUID)

    def ShapeRefGUID(*args) -> "Standard_GUID const &":
        """
        * Returns GUID for TreeNode representing assembly link
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_ShapeRefGUID(*args)

    ShapeRefGUID = staticmethod(ShapeRefGUID)

    def ViewRefAnnotationGUID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.xcafdoc_ViewRefAnnotationGUID(*args)

    ViewRefAnnotationGUID = staticmethod(ViewRefAnnotationGUID)

    def ViewRefGDTGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for TreeNode representing specified types of View
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_ViewRefGDTGUID(*args)

    ViewRefGDTGUID = staticmethod(ViewRefGDTGUID)

    def ViewRefGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for TreeNode representing specified types of View
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_ViewRefGUID(*args)

    ViewRefGUID = staticmethod(ViewRefGUID)

    def ViewRefNoteGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for GraphNode representing specified types of View
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_ViewRefNoteGUID(*args)

    ViewRefNoteGUID = staticmethod(ViewRefNoteGUID)

    def ViewRefPlaneGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for TreeNode representing specified types of View
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_ViewRefPlaneGUID(*args)

    ViewRefPlaneGUID = staticmethod(ViewRefPlaneGUID)

    def ViewRefShapeGUID(*args) -> "Standard_GUID const &":
        """
        * Return GUIDs for TreeNode representing specified types of View
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.xcafdoc_ViewRefShapeGUID(*args)

    ViewRefShapeGUID = staticmethod(ViewRefShapeGUID)

    __repr__ = _dumps_object


    def __init__(self):
        _XCAFDoc.xcafdoc_swiginit(self, _XCAFDoc.new_xcafdoc())
    __swig_destroy__ = _XCAFDoc.delete_xcafdoc
xcafdoc_swigregister = _XCAFDoc.xcafdoc_swigregister
xcafdoc_swigregister(xcafdoc)

def xcafdoc_AssemblyGUID(*args) -> "Standard_GUID const &":
    """
    * class for containing GraphNodes. Returns GUID for UAttribute identifying assembly
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_AssemblyGUID(*args)

def xcafdoc_ColorByLayerGUID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.xcafdoc_ColorByLayerGUID(*args)

def xcafdoc_ColorRefGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for TreeNode representing specified types of colors
    	:param type:
    	:type type: XCAFDoc_ColorType
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_ColorRefGUID(*args)

def xcafdoc_DatumRefGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for TreeNode representing specified types of datum
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_DatumRefGUID(*args)

def xcafdoc_DatumTolRefGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for TreeNode representing connections Datum-Toler
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_DatumTolRefGUID(*args)

def xcafdoc_DimTolRefGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for TreeNode representing specified types of DGT
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_DimTolRefGUID(*args)

def xcafdoc_DimensionRefFirstGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for TreeNode representing specified types of Dimension
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_DimensionRefFirstGUID(*args)

def xcafdoc_DimensionRefSecondGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for TreeNode representing specified types of Dimension
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_DimensionRefSecondGUID(*args)

def xcafdoc_ExternRefGUID(*args) -> "Standard_GUID const &":
    """
    * Returns GUID for UAttribute identifying external reference on no-step file
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_ExternRefGUID(*args)

def xcafdoc_GeomToleranceRefGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for TreeNode representing specified types of GeomTolerance
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_GeomToleranceRefGUID(*args)

def xcafdoc_InvisibleGUID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.xcafdoc_InvisibleGUID(*args)

def xcafdoc_LayerRefGUID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.xcafdoc_LayerRefGUID(*args)

def xcafdoc_LockGUID(*args) -> "Standard_GUID const &":
    """
    * Returns GUID for UAttribute identifying lock flag
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_LockGUID(*args)

def xcafdoc_MaterialRefGUID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.xcafdoc_MaterialRefGUID(*args)

def xcafdoc_NoteRefGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for representing notes
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_NoteRefGUID(*args)

def xcafdoc_SHUORefGUID(*args) -> "Standard_GUID const &":
    """
    * Returns GUID for UAttribute identifying specified higher usage occurrence
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_SHUORefGUID(*args)

def xcafdoc_ShapeRefGUID(*args) -> "Standard_GUID const &":
    """
    * Returns GUID for TreeNode representing assembly link
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_ShapeRefGUID(*args)

def xcafdoc_ViewRefAnnotationGUID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.xcafdoc_ViewRefAnnotationGUID(*args)

def xcafdoc_ViewRefGDTGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for TreeNode representing specified types of View
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_ViewRefGDTGUID(*args)

def xcafdoc_ViewRefGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for TreeNode representing specified types of View
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_ViewRefGUID(*args)

def xcafdoc_ViewRefNoteGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for GraphNode representing specified types of View
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_ViewRefNoteGUID(*args)

def xcafdoc_ViewRefPlaneGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for TreeNode representing specified types of View
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_ViewRefPlaneGUID(*args)

def xcafdoc_ViewRefShapeGUID(*args) -> "Standard_GUID const &":
    """
    * Return GUIDs for TreeNode representing specified types of View
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.xcafdoc_ViewRefShapeGUID(*args)

class XCAFDoc_Area(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(XCAFDoc_Area self) -> std::string"""
        return _XCAFDoc.XCAFDoc_Area_DumpToString(self)


    def Get(*args) -> "Standard_Real &":
        """
        :rtype: float
        * Returns volume of area as argument and succes status returns false if no such attribute at the <label>
        	:param label:
        	:type label: TDF_Label
        	:param area:
        	:type area: float
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_Area_Get(*args)

    Get = staticmethod(Get)

    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_Area_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args) -> "opencascade::handle< XCAFDoc_Area >":
        """
        * Sets a value of volume
        	:param vol:
        	:type vol: float
        	:rtype: None
        * Find, or create, an Area attribute and set its value
        	:param label:
        	:type label: TDF_Label
        	:param area:
        	:type area: float
        	:rtype: opencascade::handle<XCAFDoc_Area>
        """
        return _XCAFDoc.XCAFDoc_Area_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        * class methods =============
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_Area_swiginit(self, _XCAFDoc.new_XCAFDoc_Area(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_Area_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Area
XCAFDoc_Area.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_Area_DumpToString, None, XCAFDoc_Area)
XCAFDoc_Area_swigregister = _XCAFDoc.XCAFDoc_Area_swigregister
XCAFDoc_Area_swigregister(XCAFDoc_Area)

def XCAFDoc_Area_Get(*args) -> "Standard_Real &":
    """
    :rtype: float
    * Returns volume of area as argument and succes status returns false if no such attribute at the <label>
    	:param label:
    	:type label: TDF_Label
    	:param area:
    	:type area: float
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_Area_Get(*args)

def XCAFDoc_Area_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_Area_GetID(*args)

def XCAFDoc_Area_Set(*args) -> "opencascade::handle< XCAFDoc_Area >":
    """
    * Sets a value of volume
    	:param vol:
    	:type vol: float
    	:rtype: None
    * Find, or create, an Area attribute and set its value
    	:param label:
    	:type label: TDF_Label
    	:param area:
    	:type area: float
    	:rtype: opencascade::handle<XCAFDoc_Area>
    """
    return _XCAFDoc.XCAFDoc_Area_Set(*args)

class XCAFDoc_AssemblyItemId(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetPath(self, *args) -> "TColStd_ListOfAsciiString const &":
        """
        * Returns the full path as a list of label entries.
        	:rtype: TColStd_ListOfAsciiString
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_GetPath(self, *args)


    def Init(self, *args) -> "void":
        """
        * Initializes the item ID from a list of strings, where every string is a label entry. \param [in] thePath - list of label entries.
        	:param thePath:
        	:type thePath: TColStd_ListOfAsciiString
        	:rtype: None
        * Initializes the item ID from a formatted path, where label entries are separated by '/' symbol. \param [in] theString - formatted full path.
        	:param theString:
        	:type theString: TCollection_AsciiString
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_Init(self, *args)


    def IsChild(self, *args) -> "Standard_Boolean":
        """
        * Checks if this item is a child of the given item. \param [in] theOther - potentially ancestor item. eturn true if the item is a child of theOther item, otherwise - false.
        	:param theOther:
        	:type theOther: XCAFDoc_AssemblyItemId
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_IsChild(self, *args)


    def IsDirectChild(self, *args) -> "Standard_Boolean":
        """
        * Checks if this item is a direct child of the given item. \param [in] theOther - potentially parent item. eturn true if the item is a direct child of theOther item, otherwise - false.
        	:param theOther:
        	:type theOther: XCAFDoc_AssemblyItemId
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_IsDirectChild(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        * Checks for item IDs equality. \param [in] theOther - the item ID to check equality with. eturn true if this ID is equal to theOther, otherwise - false.
        	:param theOther:
        	:type theOther: XCAFDoc_AssemblyItemId
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_IsEqual(self, *args)


    def IsNull(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the full path is empty, otherwise - false.
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_IsNull(self, *args)


    def Nullify(self, *args) -> "void":
        """
        * Clears the full path.
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_Nullify(self, *args)


    def ToString(self, *args) -> "TCollection_AsciiString":
        """
        * Returns the full pass as a formatted string.
        	:rtype: TCollection_AsciiString
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_ToString(self, *args)


    def __init__(self, *args):
        """
        * Constructs an empty item ID.
        	:rtype: None
        * Constructs an item ID from a list of strings, where every string is a label entry. \param [in] thePath - list of label entries.
        	:param thePath:
        	:type thePath: TColStd_ListOfAsciiString
        	:rtype: None
        * Constructs an item ID from a formatted path, where label entries are separated by '/' symbol. \param [in] theString - formatted full path.
        	:param theString:
        	:type theString: TCollection_AsciiString
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_AssemblyItemId_swiginit(self, _XCAFDoc.new_XCAFDoc_AssemblyItemId(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_AssemblyItemId
XCAFDoc_AssemblyItemId.GetPath = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemId_GetPath, None, XCAFDoc_AssemblyItemId)
XCAFDoc_AssemblyItemId.Init = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemId_Init, None, XCAFDoc_AssemblyItemId)
XCAFDoc_AssemblyItemId.IsChild = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemId_IsChild, None, XCAFDoc_AssemblyItemId)
XCAFDoc_AssemblyItemId.IsDirectChild = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemId_IsDirectChild, None, XCAFDoc_AssemblyItemId)
XCAFDoc_AssemblyItemId.IsEqual = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemId_IsEqual, None, XCAFDoc_AssemblyItemId)
XCAFDoc_AssemblyItemId.IsNull = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemId_IsNull, None, XCAFDoc_AssemblyItemId)
XCAFDoc_AssemblyItemId.Nullify = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemId_Nullify, None, XCAFDoc_AssemblyItemId)
XCAFDoc_AssemblyItemId.ToString = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemId_ToString, None, XCAFDoc_AssemblyItemId)
XCAFDoc_AssemblyItemId_swigregister = _XCAFDoc.XCAFDoc_AssemblyItemId_swigregister
XCAFDoc_AssemblyItemId_swigregister(XCAFDoc_AssemblyItemId)

class XCAFDoc_AssemblyItemRef(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ClearExtraRef(self, *args) -> "void":
        """
        * @} Reverts the reference to empty state.
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_ClearExtraRef(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(XCAFDoc_AssemblyItemRef self) -> std::string"""
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_DumpToString(self)


    def Get(*args) -> "opencascade::handle< XCAFDoc_AssemblyItemRef >":
        """
        * Finds a reference attribute on the given label and returns it, if it is found
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_Get(*args)

    Get = staticmethod(Get)

    def GetGUID(self, *args) -> "Standard_GUID":
        """
        * Returns the assembly item's attribute that the reference points to. If the reference doesn't point to an attribute, returns an empty GUID.
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_GetGUID(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_GetID(*args)

    GetID = staticmethod(GetID)

    def GetItem(self, *args) -> "XCAFDoc_AssemblyItemId const &":
        """
        * @} Returns the assembly item ID that the reference points to.
        	:rtype: XCAFDoc_AssemblyItemId
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_GetItem(self, *args)


    def GetSubshapeIndex(self, *args) -> "Standard_Integer":
        """
        * Returns the assembly item's subshape that the reference points to. If the reference doesn't point to a subshape, returns 0.
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_GetSubshapeIndex(self, *args)


    def HasExtraRef(self, *args) -> "Standard_Boolean":
        """
        * @name Extra reference functions. @{ Checks if the reference points on an item's shapeindex or attribute.
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_HasExtraRef(self, *args)


    def IsGUID(self, *args) -> "Standard_Boolean":
        """
        * Checks is the reference points to an item's attribute.
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_IsGUID(self, *args)


    def IsOrphan(self, *args) -> "Standard_Boolean":
        """
        * Checks if the reference points to a really existing item in XDE document.
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_IsOrphan(self, *args)


    def IsSubshapeIndex(self, *args) -> "Standard_Boolean":
        """
        * Checks is the reference points to an item's subshape.
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_IsSubshapeIndex(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_AssemblyItemRef >":
        """
        * @name Set reference attribute functions. @{ Create (if not exist) a reference to an assembly item. \param [in] theLabel - label to add the attribute. \param [in] theItemId - assembly item ID. eturn A handle to the attribute instance.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
        * Create (if not exist) a reference to an assembly item's label attribute. \param [in] theLabel - label to add the attribute. \param [in] theItemId - assembly item ID. \param [in] theGUID - assembly item's label attribute ID. eturn A handle to the attribute instance.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
        * Create (if not exist) a reference to an assembly item's subshape. \param [in] theLabel - label to add the attribute. \param [in] theItemId - assembly item ID. \param [in] theShapeIndex - assembly item's subshape index. eturn A handle to the attribute instance.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theShapeIndex:
        	:type theShapeIndex: int
        	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_Set(*args)

    Set = staticmethod(Set)

    def SetGUID(self, *args) -> "void":
        """
        * Sets the assembly item's label attribute that the reference points to. The base assembly item will not change.
        	:param theAttrGUID:
        	:type theAttrGUID: Standard_GUID
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_SetGUID(self, *args)


    def SetItem(self, *args) -> "void":
        """
        * @name Set reference data functions. @{ Sets the assembly item ID that the reference points to. Extra reference data (if any) will be cleared.
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:rtype: None
        * Sets the assembly item ID from a list of label entries that the reference points to. Extra reference data (if any) will be cleared.
        	:param thePath:
        	:type thePath: TColStd_ListOfAsciiString
        	:rtype: None
        * Sets the assembly item ID from a formatted path that the reference points to. Extra reference data (if any) will be cleared.
        	:param theString:
        	:type theString: TCollection_AsciiString
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_SetItem(self, *args)


    def SetSubshapeIndex(self, *args) -> "void":
        """
        * Sets the assembly item's subshape that the reference points to. The base assembly item will not change.
        	:param theShapeIndex:
        	:type theShapeIndex: int
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_SetSubshapeIndex(self, *args)


    def __init__(self, *args):
        """
        * @} Creates an empty reference attribute.
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_AssemblyItemRef_swiginit(self, _XCAFDoc.new_XCAFDoc_AssemblyItemRef(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_AssemblyItemRef_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_AssemblyItemRef
XCAFDoc_AssemblyItemRef.ClearExtraRef = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_ClearExtraRef, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_DumpToString, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef.GetGUID = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_GetGUID, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef.GetItem = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_GetItem, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef.GetSubshapeIndex = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_GetSubshapeIndex, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef.HasExtraRef = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_HasExtraRef, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef.IsGUID = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_IsGUID, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef.IsOrphan = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_IsOrphan, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef.IsSubshapeIndex = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_IsSubshapeIndex, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef.SetGUID = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_SetGUID, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef.SetItem = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_SetItem, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef.SetSubshapeIndex = new_instancemethod(_XCAFDoc.XCAFDoc_AssemblyItemRef_SetSubshapeIndex, None, XCAFDoc_AssemblyItemRef)
XCAFDoc_AssemblyItemRef_swigregister = _XCAFDoc.XCAFDoc_AssemblyItemRef_swigregister
XCAFDoc_AssemblyItemRef_swigregister(XCAFDoc_AssemblyItemRef)

def XCAFDoc_AssemblyItemRef_Get(*args) -> "opencascade::handle< XCAFDoc_AssemblyItemRef >":
    """
    * Finds a reference attribute on the given label and returns it, if it is found
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
    """
    return _XCAFDoc.XCAFDoc_AssemblyItemRef_Get(*args)

def XCAFDoc_AssemblyItemRef_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_AssemblyItemRef_GetID(*args)

def XCAFDoc_AssemblyItemRef_Set(*args) -> "opencascade::handle< XCAFDoc_AssemblyItemRef >":
    """
    * @name Set reference attribute functions. @{ Create (if not exist) a reference to an assembly item. \param [in] theLabel - label to add the attribute. \param [in] theItemId - assembly item ID. eturn A handle to the attribute instance.
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:param theItemId:
    	:type theItemId: XCAFDoc_AssemblyItemId
    	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
    * Create (if not exist) a reference to an assembly item's label attribute. \param [in] theLabel - label to add the attribute. \param [in] theItemId - assembly item ID. \param [in] theGUID - assembly item's label attribute ID. eturn A handle to the attribute instance.
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:param theItemId:
    	:type theItemId: XCAFDoc_AssemblyItemId
    	:param theGUID:
    	:type theGUID: Standard_GUID
    	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
    * Create (if not exist) a reference to an assembly item's subshape. \param [in] theLabel - label to add the attribute. \param [in] theItemId - assembly item ID. \param [in] theShapeIndex - assembly item's subshape index. eturn A handle to the attribute instance.
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:param theItemId:
    	:type theItemId: XCAFDoc_AssemblyItemId
    	:param theShapeIndex:
    	:type theShapeIndex: int
    	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
    """
    return _XCAFDoc.XCAFDoc_AssemblyItemRef_Set(*args)

class XCAFDoc_Centroid(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(XCAFDoc_Centroid self) -> std::string"""
        return _XCAFDoc.XCAFDoc_Centroid_DumpToString(self)


    def Get(*args) -> "Standard_Boolean":
        """
        :rtype: gp_Pnt
        * Returns point as argument returns false if no such attribute at the <label>
        	:param label:
        	:type label: TDF_Label
        	:param pnt:
        	:type pnt: gp_Pnt
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_Centroid_Get(*args)

    Get = staticmethod(Get)

    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_Centroid_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args) -> "void":
        """
        * Find, or create, a Location attribute and set it's value the Location attribute is returned. Location methods ===============
        	:param label:
        	:type label: TDF_Label
        	:param pnt:
        	:type pnt: gp_Pnt
        	:rtype: opencascade::handle<XCAFDoc_Centroid>
        :param pnt:
        	:type pnt: gp_Pnt
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_Centroid_Set(self, *args)


    def __init__(self, *args):
        """
        * class methods =============
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_Centroid_swiginit(self, _XCAFDoc.new_XCAFDoc_Centroid(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_Centroid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Centroid
XCAFDoc_Centroid.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_Centroid_DumpToString, None, XCAFDoc_Centroid)
XCAFDoc_Centroid.Set = new_instancemethod(_XCAFDoc.XCAFDoc_Centroid_Set, None, XCAFDoc_Centroid)
XCAFDoc_Centroid_swigregister = _XCAFDoc.XCAFDoc_Centroid_swigregister
XCAFDoc_Centroid_swigregister(XCAFDoc_Centroid)

def XCAFDoc_Centroid_Get(*args) -> "Standard_Boolean":
    """
    :rtype: gp_Pnt
    * Returns point as argument returns false if no such attribute at the <label>
    	:param label:
    	:type label: TDF_Label
    	:param pnt:
    	:type pnt: gp_Pnt
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_Centroid_Get(*args)

def XCAFDoc_Centroid_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_Centroid_GetID(*args)

class XCAFDoc_ClippingPlaneTool(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddClippingPlane(self, *args) -> "TDF_Label":
        """
        * Adds a clipping plane definition to a ClippingPlane table and returns its label (returns existing label if the same clipping plane is already defined)
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:param theName:
        	:type theName: TCollection_ExtendedString
        	:param theCapping:
        	:type theCapping: bool
        	:rtype: TDF_Label
        * Adds a clipping plane definition to a ClippingPlane table and returns its label (returns existing label if the same clipping plane is already defined)
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:param theName:
        	:type theName: TCollection_HAsciiString
        	:param theCapping:
        	:type theCapping: bool
        	:rtype: TDF_Label
        * Adds a clipping plane definition to a ClippingPlane table and returns its label (returns existing label if the same clipping plane is already defined)
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:param theName:
        	:type theName: TCollection_ExtendedString
        	:rtype: TDF_Label
        * Adds a clipping plane definition to a ClippingPlane table and returns its label (returns existing label if the same clipping plane is already defined)
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:param theName:
        	:type theName: TCollection_HAsciiString
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_AddClippingPlane(self, *args)


    def BaseLabel(self, *args) -> "TDF_Label":
        """
        * returns the label under which ClippingPlanes are stored
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_BaseLabel(self, *args)


    def GetCapping(self, *args) -> "Standard_Boolean":
        """
        * Get capping value for given clipping plane label Return capping value
        	:param theClippingPlaneL:
        	:type theClippingPlaneL: TDF_Label
        	:rtype: bool
        * Get capping value for given clipping plane label Return true if Label is valid abd capping is exist.
        	:param theClippingPlaneL:
        	:type theClippingPlaneL: TDF_Label
        	:param theCapping:
        	:type theCapping: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_GetCapping(self, *args)


    def GetClippingPlane(self, *args) -> "Standard_Boolean":
        """
        * Returns ClippingPlane defined by label lab Returns False if the label is not in ClippingPlane table or does not define a ClippingPlane
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:param theName:
        	:type theName: TCollection_ExtendedString
        	:param theCapping:
        	:type theCapping: bool
        	:rtype: bool
        * Returns ClippingPlane defined by label lab Returns False if the label is not in ClippingPlane table or does not define a ClippingPlane
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:param theName:
        	:type theName: TCollection_HAsciiString
        	:param theCapping:
        	:type theCapping: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_GetClippingPlane(self, *args)


    def GetClippingPlanes(self, *args) -> "void":
        """
        * Returns a sequence of clipping planes currently stored in the ClippingPlane table
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_GetClippingPlanes(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_GetID(*args)

    GetID = staticmethod(GetID)

    def IsClippingPlane(self, *args) -> "Standard_Boolean":
        """
        * Returns True if label belongs to a ClippingPlane table and is a ClippingPlane definition
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_IsClippingPlane(self, *args)


    def RemoveClippingPlane(self, *args) -> "Standard_Boolean":
        """
        * Removes clipping plane from the ClippingPlane table Return false and do nothing if clipping plane is referenced in at least one View
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_RemoveClippingPlane(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_ClippingPlaneTool >":
        """
        * Creates (if not exist) ClippingPlaneTool.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_ClippingPlaneTool>
        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_Set(*args)

    Set = staticmethod(Set)

    def SetCapping(self, *args) -> "void":
        """
        * Set new value of capping for given clipping plane label
        	:param theClippingPlaneL:
        	:type theClippingPlaneL: TDF_Label
        	:param theCapping:
        	:type theCapping: bool
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_SetCapping(self, *args)


    def UpdateClippingPlane(self, *args) -> "void":
        """
        * Sets new value of plane and name to the given clipping plane label or do nothing, if the given label is not a clipping plane label
        	:param theLabelL:
        	:type theLabelL: TDF_Label
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:param theName:
        	:type theName: TCollection_ExtendedString
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_UpdateClippingPlane(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_ClippingPlaneTool_swiginit(self, _XCAFDoc.new_XCAFDoc_ClippingPlaneTool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_ClippingPlaneTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_ClippingPlaneTool
XCAFDoc_ClippingPlaneTool.AddClippingPlane = new_instancemethod(_XCAFDoc.XCAFDoc_ClippingPlaneTool_AddClippingPlane, None, XCAFDoc_ClippingPlaneTool)
XCAFDoc_ClippingPlaneTool.BaseLabel = new_instancemethod(_XCAFDoc.XCAFDoc_ClippingPlaneTool_BaseLabel, None, XCAFDoc_ClippingPlaneTool)
XCAFDoc_ClippingPlaneTool.GetCapping = new_instancemethod(_XCAFDoc.XCAFDoc_ClippingPlaneTool_GetCapping, None, XCAFDoc_ClippingPlaneTool)
XCAFDoc_ClippingPlaneTool.GetClippingPlane = new_instancemethod(_XCAFDoc.XCAFDoc_ClippingPlaneTool_GetClippingPlane, None, XCAFDoc_ClippingPlaneTool)
XCAFDoc_ClippingPlaneTool.GetClippingPlanes = new_instancemethod(_XCAFDoc.XCAFDoc_ClippingPlaneTool_GetClippingPlanes, None, XCAFDoc_ClippingPlaneTool)
XCAFDoc_ClippingPlaneTool.IsClippingPlane = new_instancemethod(_XCAFDoc.XCAFDoc_ClippingPlaneTool_IsClippingPlane, None, XCAFDoc_ClippingPlaneTool)
XCAFDoc_ClippingPlaneTool.RemoveClippingPlane = new_instancemethod(_XCAFDoc.XCAFDoc_ClippingPlaneTool_RemoveClippingPlane, None, XCAFDoc_ClippingPlaneTool)
XCAFDoc_ClippingPlaneTool.SetCapping = new_instancemethod(_XCAFDoc.XCAFDoc_ClippingPlaneTool_SetCapping, None, XCAFDoc_ClippingPlaneTool)
XCAFDoc_ClippingPlaneTool.UpdateClippingPlane = new_instancemethod(_XCAFDoc.XCAFDoc_ClippingPlaneTool_UpdateClippingPlane, None, XCAFDoc_ClippingPlaneTool)
XCAFDoc_ClippingPlaneTool_swigregister = _XCAFDoc.XCAFDoc_ClippingPlaneTool_swigregister
XCAFDoc_ClippingPlaneTool_swigregister(XCAFDoc_ClippingPlaneTool)

def XCAFDoc_ClippingPlaneTool_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_ClippingPlaneTool_GetID(*args)

def XCAFDoc_ClippingPlaneTool_Set(*args) -> "opencascade::handle< XCAFDoc_ClippingPlaneTool >":
    """
    * Creates (if not exist) ClippingPlaneTool.
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_ClippingPlaneTool>
    """
    return _XCAFDoc.XCAFDoc_ClippingPlaneTool_Set(*args)

class XCAFDoc_Color(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetAlpha(self, *args) -> "Standard_ShortReal":
        """:rtype: Standard_ShortReal"""
        return _XCAFDoc.XCAFDoc_Color_GetAlpha(self, *args)


    def GetColor(self, *args) -> "Quantity_Color const &":
        """:rtype: Quantity_Color"""
        return _XCAFDoc.XCAFDoc_Color_GetColor(self, *args)


    def GetColorRGBA(self, *args) -> "Quantity_ColorRGBA const &":
        """:rtype: Quantity_ColorRGBA"""
        return _XCAFDoc.XCAFDoc_Color_GetColorRGBA(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_Color_GetID(*args)

    GetID = staticmethod(GetID)

    def GetNOC(self, *args) -> "Quantity_NameOfColor":
        """:rtype: Quantity_NameOfColor"""
        return _XCAFDoc.XCAFDoc_Color_GetNOC(self, *args)


    def GetRGB(self, *args) -> "void":
        """
        :param R:
        	:type R: float
        	:param G:
        	:type G: float
        	:param B:
        	:type B: float
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_Color_GetRGB(self, *args)


    def Set(self, *args) -> "void":
        """
        :param label:
        	:type label: TDF_Label
        	:param C:
        	:type C: Quantity_Color
        	:rtype: opencascade::handle<XCAFDoc_Color>
        :param label:
        	:type label: TDF_Label
        	:param C:
        	:type C: Quantity_ColorRGBA
        	:rtype: opencascade::handle<XCAFDoc_Color>
        :param label:
        	:type label: TDF_Label
        	:param C:
        	:type C: Quantity_NameOfColor
        	:rtype: opencascade::handle<XCAFDoc_Color>
        * Find, or create, a Color attribute and set it's value the Color attribute is returned.
        	:param label:
        	:type label: TDF_Label
        	:param R:
        	:type R: float
        	:param G:
        	:type G: float
        	:param B:
        	:type B: float
        	:param alpha: default value is 1.0
        	:type alpha: float
        	:rtype: opencascade::handle<XCAFDoc_Color>
        :param C:
        	:type C: Quantity_Color
        	:rtype: None
        :param C:
        	:type C: Quantity_ColorRGBA
        	:rtype: None
        :param C:
        	:type C: Quantity_NameOfColor
        	:rtype: None
        :param R:
        	:type R: float
        	:param G:
        	:type G: float
        	:param B:
        	:type B: float
        	:param alpha: default value is 1.0
        	:type alpha: float
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_Color_Set(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_Color_swiginit(self, _XCAFDoc.new_XCAFDoc_Color(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_Color_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Color
XCAFDoc_Color.GetAlpha = new_instancemethod(_XCAFDoc.XCAFDoc_Color_GetAlpha, None, XCAFDoc_Color)
XCAFDoc_Color.GetColor = new_instancemethod(_XCAFDoc.XCAFDoc_Color_GetColor, None, XCAFDoc_Color)
XCAFDoc_Color.GetColorRGBA = new_instancemethod(_XCAFDoc.XCAFDoc_Color_GetColorRGBA, None, XCAFDoc_Color)
XCAFDoc_Color.GetNOC = new_instancemethod(_XCAFDoc.XCAFDoc_Color_GetNOC, None, XCAFDoc_Color)
XCAFDoc_Color.GetRGB = new_instancemethod(_XCAFDoc.XCAFDoc_Color_GetRGB, None, XCAFDoc_Color)
XCAFDoc_Color.Set = new_instancemethod(_XCAFDoc.XCAFDoc_Color_Set, None, XCAFDoc_Color)
XCAFDoc_Color_swigregister = _XCAFDoc.XCAFDoc_Color_swigregister
XCAFDoc_Color_swigregister(XCAFDoc_Color)

def XCAFDoc_Color_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_Color_GetID(*args)

class XCAFDoc_ColorTool(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddColor(self, *args) -> "TDF_Label":
        """
        * Adds a color definition to a colortable and returns its label (returns existing label if the same color is already defined)
        	:param col:
        	:type col: Quantity_Color
        	:rtype: TDF_Label
        * Adds a color definition to a colortable and returns its label (returns existing label if the same color is already defined)
        	:param col:
        	:type col: Quantity_ColorRGBA
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ColorTool_AddColor(self, *args)


    def BaseLabel(self, *args) -> "TDF_Label":
        """
        * returns the label under which colors are stored
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ColorTool_BaseLabel(self, *args)


    def FindColor(self, *args) -> "TDF_Label":
        """
        * Finds a color definition in a colortable and returns its label if found Returns False if color is not found in colortable
        	:param col:
        	:type col: Quantity_Color
        	:param lab:
        	:type lab: TDF_Label
        	:rtype: bool
        * Finds a color definition in a colortable and returns its label if found Returns False if color is not found in colortable
        	:param col:
        	:type col: Quantity_ColorRGBA
        	:param lab:
        	:type lab: TDF_Label
        	:rtype: bool
        * Finds a color definition in a colortable and returns its label if found (or Null label else)
        	:param col:
        	:type col: Quantity_Color
        	:rtype: TDF_Label
        * Finds a color definition in a colortable and returns its label if found (or Null label else)
        	:param col:
        	:type col: Quantity_ColorRGBA
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ColorTool_FindColor(self, *args)


    def GetColor(self, *args) -> "Standard_Boolean":
        """
        * Returns color defined by label lab Returns False if the label is not in colortable or does not define a color
        	:param lab:
        	:type lab: TDF_Label
        	:param col:
        	:type col: Quantity_Color
        	:rtype: bool
        * Returns color defined by label lab Returns False if the label is not in colortable or does not define a color
        	:param lab:
        	:type lab: TDF_Label
        	:param col:
        	:type col: Quantity_ColorRGBA
        	:rtype: bool
        * Returns label with color assigned to <L> as <type> Returns False if no such color is assigned
        	:param L:
        	:type L: TDF_Label
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:param colorL:
        	:type colorL: TDF_Label
        	:rtype: bool
        * Returns color assigned to <L> as <type> Returns False if no such color is assigned
        	:param L:
        	:type L: TDF_Label
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:param color:
        	:type color: Quantity_Color
        	:rtype: bool
        * Returns color assigned to <L> as <type> Returns False if no such color is assigned
        	:param L:
        	:type L: TDF_Label
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:param color:
        	:type color: Quantity_ColorRGBA
        	:rtype: bool
        * Returns label with color assigned to <L> as <type> Returns False if no such color is assigned
        	:param S:
        	:type S: TopoDS_Shape
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:param colorL:
        	:type colorL: TDF_Label
        	:rtype: bool
        * Returns color assigned to <L> as <type> Returns False if no such color is assigned
        	:param S:
        	:type S: TopoDS_Shape
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:param color:
        	:type color: Quantity_Color
        	:rtype: bool
        * Returns color assigned to <L> as <type> Returns False if no such color is assigned
        	:param S:
        	:type S: TopoDS_Shape
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:param color:
        	:type color: Quantity_ColorRGBA
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ColorTool_GetColor(self, *args)


    def GetColors(self, *args) -> "void":
        """
        * Returns a sequence of colors currently stored in the colortable
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ColorTool_GetColors(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_ColorTool_GetID(*args)

    GetID = staticmethod(GetID)

    def GetInstanceColor(self, *args) -> "Standard_Boolean":
        """
        * Gets the color of component that styled with SHUO structure Returns False if no sush component or color type
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:param color:
        	:type color: Quantity_Color
        	:rtype: bool
        * Gets the color of component that styled with SHUO structure Returns False if no sush component or color type
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:param color:
        	:type color: Quantity_ColorRGBA
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ColorTool_GetInstanceColor(self, *args)


    def IsColor(self, *args) -> "Standard_Boolean":
        """
        * Returns True if label belongs to a colortable and is a color definition
        	:param lab:
        	:type lab: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsColor(self, *args)


    def IsColorByLayer(self, *args) -> "Standard_Boolean":
        """
        * Return True if object color defined by its Layer, False if not.
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsColorByLayer(self, *args)


    def IsInstanceVisible(self, *args) -> "Standard_Boolean":
        """
        * Gets the visibility status of component that styled with SHUO structure Returns False if no sush component
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsInstanceVisible(self, *args)


    def IsSet(self, *args) -> "Standard_Boolean":
        """
        * Returns True if label <L> has a color assignment of the type <type>
        	:param L:
        	:type L: TDF_Label
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:rtype: bool
        * Returns True if label <L> has a color assignment of the type <type>
        	:param S:
        	:type S: TopoDS_Shape
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsSet(self, *args)


    def IsVisible(self, *args) -> "Standard_Boolean":
        """
        * Return True if object on this label is visible, False if invisible.
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsVisible(self, *args)


    def RemoveColor(self, *args) -> "void":
        """
        * Removes color from the colortable
        	:param lab:
        	:type lab: TDF_Label
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ColorTool_RemoveColor(self, *args)


    def ReverseChainsOfTreeNodes(self, *args) -> "Standard_Boolean":
        """
        * Reverses order in chains of TreeNodes (from Last to First) under each Color Label since we became to use function ::Prepend() instead of ::Append() in method SetColor() for acceleration
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ColorTool_ReverseChainsOfTreeNodes(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_ColorTool >":
        """
        * Creates (if not exist) ColorTool.
        	:param L:
        	:type L: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_ColorTool>
        """
        return _XCAFDoc.XCAFDoc_ColorTool_Set(*args)

    Set = staticmethod(Set)

    def SetColor(self, *args) -> "Standard_Boolean":
        """
        * Sets a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color defined by <colorL>. Color of shape is defined following way in dependance with type of color. If type of color is XCAFDoc_ColorGen - then this color defines default color for surfaces and curves. If for shape color with types XCAFDoc_ColorSurf or XCAFDoc_ColorCurv is specified then such color overrides generic color.
        	:param L:
        	:type L: TDF_Label
        	:param colorL:
        	:type colorL: TDF_Label
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:rtype: None
        * Sets a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color <Color> in the colortable Adds a color as necessary
        	:param L:
        	:type L: TDF_Label
        	:param Color:
        	:type Color: Quantity_Color
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:rtype: None
        * Sets a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color <Color> in the colortable Adds a color as necessary
        	:param L:
        	:type L: TDF_Label
        	:param Color:
        	:type Color: Quantity_ColorRGBA
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:rtype: None
        * Sets a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color defined by <colorL> Returns False if cannot find a label for shape S
        	:param S:
        	:type S: TopoDS_Shape
        	:param colorL:
        	:type colorL: TDF_Label
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:rtype: bool
        * Sets a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color <Color> in the colortable Adds a color as necessary Returns False if cannot find a label for shape S
        	:param S:
        	:type S: TopoDS_Shape
        	:param Color:
        	:type Color: Quantity_Color
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:rtype: bool
        * Sets a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color <Color> in the colortable Adds a color as necessary Returns False if cannot find a label for shape S
        	:param S:
        	:type S: TopoDS_Shape
        	:param Color:
        	:type Color: Quantity_ColorRGBA
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ColorTool_SetColor(self, *args)


    def SetColorByLayer(self, *args) -> "void":
        """
        * Set the Color defined by Layer flag on label. Do nothing if there no any object. Set UAttribute with corresponding GUID.
        	:param shapeLabel:
        	:type shapeLabel: TDF_Label
        	:param isColorByLayer: default value is Standard_False
        	:type isColorByLayer: bool
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ColorTool_SetColorByLayer(self, *args)


    def SetInstanceColor(self, *args) -> "Standard_Boolean":
        """
        * Sets the color of component that styled with SHUO structure Returns False if no sush component found NOTE: create SHUO structeure if it is necessary and if <isCreateSHUO>
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:param color:
        	:type color: Quantity_Color
        	:param isCreateSHUO: default value is Standard_True
        	:type isCreateSHUO: bool
        	:rtype: bool
        * Sets the color of component that styled with SHUO structure Returns False if no sush component found NOTE: create SHUO structeure if it is necessary and if <isCreateSHUO>
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:param color:
        	:type color: Quantity_ColorRGBA
        	:param isCreateSHUO: default value is Standard_True
        	:type isCreateSHUO: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ColorTool_SetInstanceColor(self, *args)


    def SetVisibility(self, *args) -> "void":
        """
        * Set the visibility of object on label. Do nothing if there no any object. Set UAttribute with corresponding GUID.
        	:param shapeLabel:
        	:type shapeLabel: TDF_Label
        	:param isvisible: default value is Standard_True
        	:type isvisible: bool
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ColorTool_SetVisibility(self, *args)


    def ShapeTool(self, *args) -> "opencascade::handle< XCAFDoc_ShapeTool > const &":
        """
        * Returns internal XCAFDoc_ShapeTool tool
        	:rtype: opencascade::handle<XCAFDoc_ShapeTool>
        """
        return _XCAFDoc.XCAFDoc_ColorTool_ShapeTool(self, *args)


    def UnSetColor(self, *args) -> "Standard_Boolean":
        """
        * Removes a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color
        	:param L:
        	:type L: TDF_Label
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:rtype: None
        * Removes a link with GUID defined by <type> (see XCAFDoc::ColorRefGUID()) from label <L> to color Returns True if such link existed
        	:param S:
        	:type S: TopoDS_Shape
        	:param type:
        	:type type: XCAFDoc_ColorType
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ColorTool_UnSetColor(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_ColorTool_swiginit(self, _XCAFDoc.new_XCAFDoc_ColorTool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_ColorTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_ColorTool
XCAFDoc_ColorTool.AddColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_AddColor, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.BaseLabel = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_BaseLabel, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.FindColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_FindColor, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.GetColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_GetColor, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.GetColors = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_GetColors, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.GetInstanceColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_GetInstanceColor, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.IsColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_IsColor, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.IsColorByLayer = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_IsColorByLayer, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.IsInstanceVisible = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_IsInstanceVisible, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.IsSet = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_IsSet, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.IsVisible = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_IsVisible, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.RemoveColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_RemoveColor, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.ReverseChainsOfTreeNodes = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_ReverseChainsOfTreeNodes, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.SetColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_SetColor, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.SetColorByLayer = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_SetColorByLayer, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.SetInstanceColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_SetInstanceColor, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.SetVisibility = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_SetVisibility, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.ShapeTool = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_ShapeTool, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool.UnSetColor = new_instancemethod(_XCAFDoc.XCAFDoc_ColorTool_UnSetColor, None, XCAFDoc_ColorTool)
XCAFDoc_ColorTool_swigregister = _XCAFDoc.XCAFDoc_ColorTool_swigregister
XCAFDoc_ColorTool_swigregister(XCAFDoc_ColorTool)

def XCAFDoc_ColorTool_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_ColorTool_GetID(*args)

def XCAFDoc_ColorTool_Set(*args) -> "opencascade::handle< XCAFDoc_ColorTool >":
    """
    * Creates (if not exist) ColorTool.
    	:param L:
    	:type L: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_ColorTool>
    """
    return _XCAFDoc.XCAFDoc_ColorTool_Set(*args)

class XCAFDoc_Datum(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetDescription(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _XCAFDoc.XCAFDoc_Datum_GetDescription(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_Datum_GetID(*args)

    GetID = staticmethod(GetID)

    def GetIdentification(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _XCAFDoc.XCAFDoc_Datum_GetIdentification(self, *args)


    def GetName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _XCAFDoc.XCAFDoc_Datum_GetName(self, *args)


    def GetObject(self, *args) -> "opencascade::handle< XCAFDimTolObjects_DatumObject >":
        """
        * Returns dimension object data taken from the paren's label and its sub-labels.
        	:rtype: opencascade::handle<XCAFDimTolObjects_DatumObject>
        """
        return _XCAFDoc.XCAFDoc_Datum_GetObject(self, *args)


    def Set(self, *args) -> "void":
        """
        :param label:
        	:type label: TDF_Label
        	:param aName:
        	:type aName: TCollection_HAsciiString
        	:param aDescription:
        	:type aDescription: TCollection_HAsciiString
        	:param anIdentification:
        	:type anIdentification: TCollection_HAsciiString
        	:rtype: opencascade::handle<XCAFDoc_Datum>
        :param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_Datum>
        :param aName:
        	:type aName: TCollection_HAsciiString
        	:param aDescription:
        	:type aDescription: TCollection_HAsciiString
        	:param anIdentification:
        	:type anIdentification: TCollection_HAsciiString
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_Datum_Set(self, *args)


    def SetObject(self, *args) -> "void":
        """
        * Updates parent's label and its sub-labels with data taken from theDatumObject. Old data associated with the label will be lost.
        	:param theDatumObject:
        	:type theDatumObject: XCAFDimTolObjects_DatumObject
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_Datum_SetObject(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_Datum_swiginit(self, _XCAFDoc.new_XCAFDoc_Datum(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_Datum_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Datum
XCAFDoc_Datum.GetDescription = new_instancemethod(_XCAFDoc.XCAFDoc_Datum_GetDescription, None, XCAFDoc_Datum)
XCAFDoc_Datum.GetIdentification = new_instancemethod(_XCAFDoc.XCAFDoc_Datum_GetIdentification, None, XCAFDoc_Datum)
XCAFDoc_Datum.GetName = new_instancemethod(_XCAFDoc.XCAFDoc_Datum_GetName, None, XCAFDoc_Datum)
XCAFDoc_Datum.GetObject = new_instancemethod(_XCAFDoc.XCAFDoc_Datum_GetObject, None, XCAFDoc_Datum)
XCAFDoc_Datum.Set = new_instancemethod(_XCAFDoc.XCAFDoc_Datum_Set, None, XCAFDoc_Datum)
XCAFDoc_Datum.SetObject = new_instancemethod(_XCAFDoc.XCAFDoc_Datum_SetObject, None, XCAFDoc_Datum)
XCAFDoc_Datum_swigregister = _XCAFDoc.XCAFDoc_Datum_swigregister
XCAFDoc_Datum_swigregister(XCAFDoc_Datum)

def XCAFDoc_Datum_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_Datum_GetID(*args)

class XCAFDoc_DimTol(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetDescription(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _XCAFDoc.XCAFDoc_DimTol_GetDescription(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_DimTol_GetID(*args)

    GetID = staticmethod(GetID)

    def GetKind(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _XCAFDoc.XCAFDoc_DimTol_GetKind(self, *args)


    def GetName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _XCAFDoc.XCAFDoc_DimTol_GetName(self, *args)


    def GetVal(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """:rtype: opencascade::handle<TColStd_HArray1OfReal>"""
        return _XCAFDoc.XCAFDoc_DimTol_GetVal(self, *args)


    def Set(self, *args) -> "void":
        """
        :param label:
        	:type label: TDF_Label
        	:param kind:
        	:type kind: int
        	:param aVal:
        	:type aVal: TColStd_HArray1OfReal
        	:param aName:
        	:type aName: TCollection_HAsciiString
        	:param aDescription:
        	:type aDescription: TCollection_HAsciiString
        	:rtype: opencascade::handle<XCAFDoc_DimTol>
        :param kind:
        	:type kind: int
        	:param aVal:
        	:type aVal: TColStd_HArray1OfReal
        	:param aName:
        	:type aName: TCollection_HAsciiString
        	:param aDescription:
        	:type aDescription: TCollection_HAsciiString
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_DimTol_Set(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_DimTol_swiginit(self, _XCAFDoc.new_XCAFDoc_DimTol(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_DimTol_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_DimTol
XCAFDoc_DimTol.GetDescription = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol_GetDescription, None, XCAFDoc_DimTol)
XCAFDoc_DimTol.GetKind = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol_GetKind, None, XCAFDoc_DimTol)
XCAFDoc_DimTol.GetName = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol_GetName, None, XCAFDoc_DimTol)
XCAFDoc_DimTol.GetVal = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol_GetVal, None, XCAFDoc_DimTol)
XCAFDoc_DimTol.Set = new_instancemethod(_XCAFDoc.XCAFDoc_DimTol_Set, None, XCAFDoc_DimTol)
XCAFDoc_DimTol_swigregister = _XCAFDoc.XCAFDoc_DimTol_swigregister
XCAFDoc_DimTol_swigregister(XCAFDoc_DimTol)

def XCAFDoc_DimTol_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_DimTol_GetID(*args)

class XCAFDoc_Dimension(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_Dimension_GetID(*args)

    GetID = staticmethod(GetID)

    def GetObject(self, *args) -> "opencascade::handle< XCAFDimTolObjects_DimensionObject >":
        """
        * Returns dimension object data taken from the paren's label and its sub-labels.
        	:rtype: opencascade::handle<XCAFDimTolObjects_DimensionObject>
        """
        return _XCAFDoc.XCAFDoc_Dimension_GetObject(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_Dimension >":
        """
        :param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_Dimension>
        """
        return _XCAFDoc.XCAFDoc_Dimension_Set(*args)

    Set = staticmethod(Set)

    def SetObject(self, *args) -> "void":
        """
        * Updates parent's label and its sub-labels with data taken from theDimensionObject. Old data associated with the label will be lost.
        	:param theDimensionObject:
        	:type theDimensionObject: XCAFDimTolObjects_DimensionObject
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_Dimension_SetObject(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_Dimension_swiginit(self, _XCAFDoc.new_XCAFDoc_Dimension(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_Dimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Dimension
XCAFDoc_Dimension.GetObject = new_instancemethod(_XCAFDoc.XCAFDoc_Dimension_GetObject, None, XCAFDoc_Dimension)
XCAFDoc_Dimension.SetObject = new_instancemethod(_XCAFDoc.XCAFDoc_Dimension_SetObject, None, XCAFDoc_Dimension)
XCAFDoc_Dimension_swigregister = _XCAFDoc.XCAFDoc_Dimension_swigregister
XCAFDoc_Dimension_swigregister(XCAFDoc_Dimension)

def XCAFDoc_Dimension_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_Dimension_GetID(*args)

def XCAFDoc_Dimension_Set(*args) -> "opencascade::handle< XCAFDoc_Dimension >":
    """
    :param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_Dimension>
    """
    return _XCAFDoc.XCAFDoc_Dimension_Set(*args)

class XCAFDoc_DocumentTool(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ClippingPlaneTool(*args) -> "opencascade::handle< XCAFDoc_ClippingPlaneTool >":
        """
        * Creates (if it does not exist) ClippingPlaneTool attribute on ClippingPlanesLabel().
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_ClippingPlaneTool>
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ClippingPlaneTool(*args)

    ClippingPlaneTool = staticmethod(ClippingPlaneTool)

    def ClippingPlanesLabel(*args) -> "TDF_Label":
        """
        * Returns sub-label of DocLabel() with tag 8.
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ClippingPlanesLabel(*args)

    ClippingPlanesLabel = staticmethod(ClippingPlanesLabel)

    def ColorTool(*args) -> "opencascade::handle< XCAFDoc_ColorTool >":
        """
        * Creates (if it does not exist) ColorTool attribute on ColorsLabel().
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_ColorTool>
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ColorTool(*args)

    ColorTool = staticmethod(ColorTool)

    def ColorsLabel(*args) -> "TDF_Label":
        """
        * Returns sub-label of DocLabel() with tag 2.
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ColorsLabel(*args)

    ColorsLabel = staticmethod(ColorsLabel)

    def DGTsLabel(*args) -> "TDF_Label":
        """
        * Returns sub-label of DocLabel() with tag 4.
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_DGTsLabel(*args)

    DGTsLabel = staticmethod(DGTsLabel)

    def DimTolTool(*args) -> "opencascade::handle< XCAFDoc_DimTolTool >":
        """
        * Creates (if it does not exist) DimTolTool attribute on DGTsLabel().
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_DimTolTool>
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_DimTolTool(*args)

    DimTolTool = staticmethod(DimTolTool)

    def DocLabel(*args) -> "TDF_Label":
        """
        * Returns label where the DocumentTool attribute is or 0.1 if DocumentTool is not yet set.
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_DocLabel(*args)

    DocLabel = staticmethod(DocLabel)

    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_DocumentTool_GetID(*args)

    GetID = staticmethod(GetID)

    def Init(self, *args) -> "void":
        """
        * to be called when reading this attribute from file
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_Init(self, *args)


    def IsXCAFDocument(*args) -> "Standard_Boolean":
        """
        :param Doc:
        	:type Doc: TDocStd_Document
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_IsXCAFDocument(*args)

    IsXCAFDocument = staticmethod(IsXCAFDocument)

    def LayerTool(*args) -> "opencascade::handle< XCAFDoc_LayerTool >":
        """
        * Creates (if it does not exist) LayerTool attribute on LayersLabel().
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_LayerTool>
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_LayerTool(*args)

    LayerTool = staticmethod(LayerTool)

    def LayersLabel(*args) -> "TDF_Label":
        """
        * Returns sub-label of DocLabel() with tag 3.
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_LayersLabel(*args)

    LayersLabel = staticmethod(LayersLabel)

    def MaterialTool(*args) -> "opencascade::handle< XCAFDoc_MaterialTool >":
        """
        * Creates (if it does not exist) DimTolTool attribute on DGTsLabel().
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_MaterialTool>
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_MaterialTool(*args)

    MaterialTool = staticmethod(MaterialTool)

    def MaterialsLabel(*args) -> "TDF_Label":
        """
        * Returns sub-label of DocLabel() with tag 5.
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_MaterialsLabel(*args)

    MaterialsLabel = staticmethod(MaterialsLabel)

    def NotesLabel(*args) -> "TDF_Label":
        """
        * Returns sub-label of DocLabel() with tag 9.
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_NotesLabel(*args)

    NotesLabel = staticmethod(NotesLabel)

    def NotesTool(*args) -> "opencascade::handle< XCAFDoc_NotesTool >":
        """
        * Creates (if it does not exist) NotesTool attribute on NotesLabel().
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_NotesTool>
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_NotesTool(*args)

    NotesTool = staticmethod(NotesTool)

    def Set(*args) -> "opencascade::handle< XCAFDoc_DocumentTool >":
        """
        * Create (if not exist) DocumentTool attribute on 0.1 label if <IsAcces> is true, else on <L> label. This label will be returned by DocLabel(); If the attribute is already set it won't be reset on <L> even if <IsAcces> is false. ColorTool and ShapeTool attributes are also set by this method.
        	:param L:
        	:type L: TDF_Label
        	:param IsAcces: default value is Standard_True
        	:type IsAcces: bool
        	:rtype: opencascade::handle<XCAFDoc_DocumentTool>
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_Set(*args)

    Set = staticmethod(Set)

    def ShapeTool(*args) -> "opencascade::handle< XCAFDoc_ShapeTool >":
        """
        * Creates (if it does not exist) ShapeTool attribute on ShapesLabel().
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_ShapeTool>
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ShapeTool(*args)

    ShapeTool = staticmethod(ShapeTool)

    def ShapesLabel(*args) -> "TDF_Label":
        """
        * Returns sub-label of DocLabel() with tag 1.
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ShapesLabel(*args)

    ShapesLabel = staticmethod(ShapesLabel)

    def ViewTool(*args) -> "opencascade::handle< XCAFDoc_ViewTool >":
        """
        * Creates (if it does not exist) ViewTool attribute on ViewsLabel().
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_ViewTool>
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ViewTool(*args)

    ViewTool = staticmethod(ViewTool)

    def ViewsLabel(*args) -> "TDF_Label":
        """
        * Returns sub-label of DocLabel() with tag 7.
        	:param acces:
        	:type acces: TDF_Label
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ViewsLabel(*args)

    ViewsLabel = staticmethod(ViewsLabel)

    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_DocumentTool_swiginit(self, _XCAFDoc.new_XCAFDoc_DocumentTool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_DocumentTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_DocumentTool
XCAFDoc_DocumentTool.Init = new_instancemethod(_XCAFDoc.XCAFDoc_DocumentTool_Init, None, XCAFDoc_DocumentTool)
XCAFDoc_DocumentTool_swigregister = _XCAFDoc.XCAFDoc_DocumentTool_swigregister
XCAFDoc_DocumentTool_swigregister(XCAFDoc_DocumentTool)

def XCAFDoc_DocumentTool_ClippingPlaneTool(*args) -> "opencascade::handle< XCAFDoc_ClippingPlaneTool >":
    """
    * Creates (if it does not exist) ClippingPlaneTool attribute on ClippingPlanesLabel().
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_ClippingPlaneTool>
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ClippingPlaneTool(*args)

def XCAFDoc_DocumentTool_ClippingPlanesLabel(*args) -> "TDF_Label":
    """
    * Returns sub-label of DocLabel() with tag 8.
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: TDF_Label
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ClippingPlanesLabel(*args)

def XCAFDoc_DocumentTool_ColorTool(*args) -> "opencascade::handle< XCAFDoc_ColorTool >":
    """
    * Creates (if it does not exist) ColorTool attribute on ColorsLabel().
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_ColorTool>
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ColorTool(*args)

def XCAFDoc_DocumentTool_ColorsLabel(*args) -> "TDF_Label":
    """
    * Returns sub-label of DocLabel() with tag 2.
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: TDF_Label
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ColorsLabel(*args)

def XCAFDoc_DocumentTool_DGTsLabel(*args) -> "TDF_Label":
    """
    * Returns sub-label of DocLabel() with tag 4.
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: TDF_Label
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_DGTsLabel(*args)

def XCAFDoc_DocumentTool_DimTolTool(*args) -> "opencascade::handle< XCAFDoc_DimTolTool >":
    """
    * Creates (if it does not exist) DimTolTool attribute on DGTsLabel().
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_DimTolTool>
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_DimTolTool(*args)

def XCAFDoc_DocumentTool_DocLabel(*args) -> "TDF_Label":
    """
    * Returns label where the DocumentTool attribute is or 0.1 if DocumentTool is not yet set.
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: TDF_Label
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_DocLabel(*args)

def XCAFDoc_DocumentTool_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_DocumentTool_GetID(*args)

def XCAFDoc_DocumentTool_IsXCAFDocument(*args) -> "Standard_Boolean":
    """
    :param Doc:
    	:type Doc: TDocStd_Document
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_IsXCAFDocument(*args)

def XCAFDoc_DocumentTool_LayerTool(*args) -> "opencascade::handle< XCAFDoc_LayerTool >":
    """
    * Creates (if it does not exist) LayerTool attribute on LayersLabel().
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_LayerTool>
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_LayerTool(*args)

def XCAFDoc_DocumentTool_LayersLabel(*args) -> "TDF_Label":
    """
    * Returns sub-label of DocLabel() with tag 3.
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: TDF_Label
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_LayersLabel(*args)

def XCAFDoc_DocumentTool_MaterialTool(*args) -> "opencascade::handle< XCAFDoc_MaterialTool >":
    """
    * Creates (if it does not exist) DimTolTool attribute on DGTsLabel().
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_MaterialTool>
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_MaterialTool(*args)

def XCAFDoc_DocumentTool_MaterialsLabel(*args) -> "TDF_Label":
    """
    * Returns sub-label of DocLabel() with tag 5.
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: TDF_Label
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_MaterialsLabel(*args)

def XCAFDoc_DocumentTool_NotesLabel(*args) -> "TDF_Label":
    """
    * Returns sub-label of DocLabel() with tag 9.
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: TDF_Label
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_NotesLabel(*args)

def XCAFDoc_DocumentTool_NotesTool(*args) -> "opencascade::handle< XCAFDoc_NotesTool >":
    """
    * Creates (if it does not exist) NotesTool attribute on NotesLabel().
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_NotesTool>
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_NotesTool(*args)

def XCAFDoc_DocumentTool_Set(*args) -> "opencascade::handle< XCAFDoc_DocumentTool >":
    """
    * Create (if not exist) DocumentTool attribute on 0.1 label if <IsAcces> is true, else on <L> label. This label will be returned by DocLabel(); If the attribute is already set it won't be reset on <L> even if <IsAcces> is false. ColorTool and ShapeTool attributes are also set by this method.
    	:param L:
    	:type L: TDF_Label
    	:param IsAcces: default value is Standard_True
    	:type IsAcces: bool
    	:rtype: opencascade::handle<XCAFDoc_DocumentTool>
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_Set(*args)

def XCAFDoc_DocumentTool_ShapeTool(*args) -> "opencascade::handle< XCAFDoc_ShapeTool >":
    """
    * Creates (if it does not exist) ShapeTool attribute on ShapesLabel().
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_ShapeTool>
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ShapeTool(*args)

def XCAFDoc_DocumentTool_ShapesLabel(*args) -> "TDF_Label":
    """
    * Returns sub-label of DocLabel() with tag 1.
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: TDF_Label
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ShapesLabel(*args)

def XCAFDoc_DocumentTool_ViewTool(*args) -> "opencascade::handle< XCAFDoc_ViewTool >":
    """
    * Creates (if it does not exist) ViewTool attribute on ViewsLabel().
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_ViewTool>
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ViewTool(*args)

def XCAFDoc_DocumentTool_ViewsLabel(*args) -> "TDF_Label":
    """
    * Returns sub-label of DocLabel() with tag 7.
    	:param acces:
    	:type acces: TDF_Label
    	:rtype: TDF_Label
    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ViewsLabel(*args)

class XCAFDoc_Editor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Expand(*args) -> "Standard_Boolean":
        """
        * Convert Shape (compound/compsolid/shell/wire) to assembly. Only compounds expanded recursively
        	:param Doc:
        	:type Doc: TDF_Label
        	:param Shape:
        	:type Shape: TDF_Label
        	:param recursively: default value is Standard_True
        	:type recursively: bool
        	:rtype: bool
        * Convert all compounds in Doc to assembly
        	:param Doc:
        	:type Doc: TDF_Label
        	:param recursively: default value is Standard_True
        	:type recursively: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_Editor_Expand(*args)

    Expand = staticmethod(Expand)

    __repr__ = _dumps_object


    def __init__(self):
        _XCAFDoc.XCAFDoc_Editor_swiginit(self, _XCAFDoc.new_XCAFDoc_Editor())
    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Editor
XCAFDoc_Editor_swigregister = _XCAFDoc.XCAFDoc_Editor_swigregister
XCAFDoc_Editor_swigregister(XCAFDoc_Editor)

def XCAFDoc_Editor_Expand(*args) -> "Standard_Boolean":
    """
    * Convert Shape (compound/compsolid/shell/wire) to assembly. Only compounds expanded recursively
    	:param Doc:
    	:type Doc: TDF_Label
    	:param Shape:
    	:type Shape: TDF_Label
    	:param recursively: default value is Standard_True
    	:type recursively: bool
    	:rtype: bool
    * Convert all compounds in Doc to assembly
    	:param Doc:
    	:type Doc: TDF_Label
    	:param recursively: default value is Standard_True
    	:type recursively: bool
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_Editor_Expand(*args)

class XCAFDoc_GraphNode(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChildIndex(self, *args) -> "Standard_Integer":
        """
        * Return index of <Ch>, or zero if there is no such Graphnode.
        	:param Ch:
        	:type Ch: XCAFDoc_GraphNode
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_GraphNode_ChildIndex(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(XCAFDoc_GraphNode self) -> std::string"""
        return _XCAFDoc.XCAFDoc_GraphNode_DumpToString(self)


    def FatherIndex(self, *args) -> "Standard_Integer":
        """
        * Return index of <F>, or zero if there is no such Graphnode.
        	:param F:
        	:type F: XCAFDoc_GraphNode
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_GraphNode_FatherIndex(self, *args)


    def Find(*args) -> "Standard_Boolean":
        """
        * class methods working on the node =================================== Shortcut to search a Graph node attribute with default GraphID. Returns true if found.
        	:param L:
        	:type L: TDF_Label
        	:param G:
        	:type G: XCAFDoc_GraphNode
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_GraphNode_Find(*args)

    Find = staticmethod(Find)

    def GetChild(self, *args) -> "opencascade::handle< XCAFDoc_GraphNode >":
        """
        * Return GraphNode by index from GraphNodeSequence.
        	:param Chindex:
        	:type Chindex: int
        	:rtype: opencascade::handle<XCAFDoc_GraphNode>
        """
        return _XCAFDoc.XCAFDoc_GraphNode_GetChild(self, *args)


    def GetDefaultGraphID(*args) -> "Standard_GUID const &":
        """
        * returns a default Graph ID. this ID is used by the <Set> method without explicit tree ID. Instance methods: ================
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.XCAFDoc_GraphNode_GetDefaultGraphID(*args)

    GetDefaultGraphID = staticmethod(GetDefaultGraphID)

    def GetFather(self, *args) -> "opencascade::handle< XCAFDoc_GraphNode >":
        """
        * Return GraphNode by index from GraphNodeSequence.
        	:param Findex:
        	:type Findex: int
        	:rtype: opencascade::handle<XCAFDoc_GraphNode>
        """
        return _XCAFDoc.XCAFDoc_GraphNode_GetFather(self, *args)


    def IsChild(self, *args) -> "Standard_Boolean":
        """
        * returns True if <self> is child of <F>.
        	:param F:
        	:type F: XCAFDoc_GraphNode
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_GraphNode_IsChild(self, *args)


    def IsFather(self, *args) -> "Standard_Boolean":
        """
        * returns True if <self> is father of <Ch>.
        	:param Ch:
        	:type Ch: XCAFDoc_GraphNode
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_GraphNode_IsFather(self, *args)


    def NbChildren(self, *args) -> "Standard_Integer":
        """
        * return Number of Childrens GraphNodes. Implementation of Attribute methods: ===================================
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_GraphNode_NbChildren(self, *args)


    def NbFathers(self, *args) -> "Standard_Integer":
        """
        * return Number of Fathers GraphNodes.
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_GraphNode_NbFathers(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_GraphNode >":
        """
        * Finds or Creates a GraphNode attribute on the label <L> with the default Graph ID, returned by the method <GetDefaultGraphID>. Returns the created/found GraphNode attribute.
        	:param L:
        	:type L: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_GraphNode>
        * Finds or Creates a GraphNode attribute on the label <L>, with an explicit tree ID. <ExplicitGraphID> is the ID returned by <TDF_Attribute::ID> method. Returns the found/created GraphNode attribute.
        	:param L:
        	:type L: TDF_Label
        	:param ExplicitGraphID:
        	:type ExplicitGraphID: Standard_GUID
        	:rtype: opencascade::handle<XCAFDoc_GraphNode>
        """
        return _XCAFDoc.XCAFDoc_GraphNode_Set(*args)

    Set = staticmethod(Set)

    def SetChild(self, *args) -> "Standard_Integer":
        """
        * Set GraphNode <Ch> as child of me and returns index of <Ch> in Sequence that containing Children GraphNodes. return index of <Ch> from GraphNodeSequnece
        	:param Ch:
        	:type Ch: XCAFDoc_GraphNode
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_GraphNode_SetChild(self, *args)


    def SetFather(self, *args) -> "Standard_Integer":
        """
        * Set GraphNode <F> as father of me and returns index of <F> in Sequence that containing Fathers GraphNodes. return index of <F> from GraphNodeSequnece
        	:param F:
        	:type F: XCAFDoc_GraphNode
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_GraphNode_SetFather(self, *args)


    def SetGraphID(self, *args) -> "void":
        """
        :param explicitID:
        	:type explicitID: Standard_GUID
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_GraphNode_SetGraphID(self, *args)


    def UnSetChild(self, *args) -> "void":
        """
        * Remove <Ch> from GraphNodeSequence. and remove link between father and child.
        	:param Ch:
        	:type Ch: XCAFDoc_GraphNode
        	:rtype: None
        * Remove Child GraphNode by index from Children GraphNodeSequence. and remove link between father and child.
        	:param Chindex:
        	:type Chindex: int
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_GraphNode_UnSetChild(self, *args)


    def UnSetFather(self, *args) -> "void":
        """
        * Remove <F> from Fathers GraphNodeSequence. and remove link between father and child.
        	:param F:
        	:type F: XCAFDoc_GraphNode
        	:rtype: None
        * Remove Father GraphNode by index from Fathers GraphNodeSequence. and remove link between father and child.
        	:param Findex:
        	:type Findex: int
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_GraphNode_UnSetFather(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_GraphNode_swiginit(self, _XCAFDoc.new_XCAFDoc_GraphNode(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_GraphNode_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_GraphNode
XCAFDoc_GraphNode.ChildIndex = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_ChildIndex, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_DumpToString, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.FatherIndex = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_FatherIndex, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.GetChild = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_GetChild, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.GetFather = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_GetFather, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.IsChild = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_IsChild, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.IsFather = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_IsFather, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.NbChildren = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_NbChildren, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.NbFathers = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_NbFathers, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.SetChild = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_SetChild, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.SetFather = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_SetFather, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.SetGraphID = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_SetGraphID, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.UnSetChild = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_UnSetChild, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode.UnSetFather = new_instancemethod(_XCAFDoc.XCAFDoc_GraphNode_UnSetFather, None, XCAFDoc_GraphNode)
XCAFDoc_GraphNode_swigregister = _XCAFDoc.XCAFDoc_GraphNode_swigregister
XCAFDoc_GraphNode_swigregister(XCAFDoc_GraphNode)

def XCAFDoc_GraphNode_Find(*args) -> "Standard_Boolean":
    """
    * class methods working on the node =================================== Shortcut to search a Graph node attribute with default GraphID. Returns true if found.
    	:param L:
    	:type L: TDF_Label
    	:param G:
    	:type G: XCAFDoc_GraphNode
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_GraphNode_Find(*args)

def XCAFDoc_GraphNode_GetDefaultGraphID(*args) -> "Standard_GUID const &":
    """
    * returns a default Graph ID. this ID is used by the <Set> method without explicit tree ID. Instance methods: ================
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.XCAFDoc_GraphNode_GetDefaultGraphID(*args)

def XCAFDoc_GraphNode_Set(*args) -> "opencascade::handle< XCAFDoc_GraphNode >":
    """
    * Finds or Creates a GraphNode attribute on the label <L> with the default Graph ID, returned by the method <GetDefaultGraphID>. Returns the created/found GraphNode attribute.
    	:param L:
    	:type L: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_GraphNode>
    * Finds or Creates a GraphNode attribute on the label <L>, with an explicit tree ID. <ExplicitGraphID> is the ID returned by <TDF_Attribute::ID> method. Returns the found/created GraphNode attribute.
    	:param L:
    	:type L: TDF_Label
    	:param ExplicitGraphID:
    	:type ExplicitGraphID: Standard_GUID
    	:rtype: opencascade::handle<XCAFDoc_GraphNode>
    """
    return _XCAFDoc.XCAFDoc_GraphNode_Set(*args)

class XCAFDoc_LayerTool(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddLayer(self, *args) -> "TDF_Label":
        """
        * Adds a Layer definition to a Layertable and returns its label (returns existing label if the same Layer is already defined)
        	:param aLayer:
        	:type aLayer: TCollection_ExtendedString
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_LayerTool_AddLayer(self, *args)


    def BaseLabel(self, *args) -> "TDF_Label":
        """
        * returns the label under which Layers are stored
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_LayerTool_BaseLabel(self, *args)


    def FindLayer(self, *args) -> "TDF_Label":
        """
        * Finds a Layer definition in a Layertable and returns its label if found Returns False if Layer is not found in Layertable
        	:param aLayer:
        	:type aLayer: TCollection_ExtendedString
        	:param lab:
        	:type lab: TDF_Label
        	:rtype: bool
        * Finds a Layer definition in a Layertable and returns its label if found (or Null label else)
        	:param aLayer:
        	:type aLayer: TCollection_ExtendedString
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_LayerTool_FindLayer(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_LayerTool_GetID(*args)

    GetID = staticmethod(GetID)

    def GetLayer(self, *args) -> "Standard_Boolean":
        """
        * Returns Layer defined by label lab Returns False if the label is not in Layertable or does not define a Layer
        	:param lab:
        	:type lab: TDF_Label
        	:param aLayer:
        	:type aLayer: TCollection_ExtendedString
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetLayer(self, *args)


    def GetLayerLabels(self, *args) -> "void":
        """
        * Returns a sequence of Layers currently stored in the Layertable
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetLayerLabels(self, *args)


    def GetLayers(self, *args) -> "opencascade::handle< TColStd_HSequenceOfExtendedString >":
        """
        * Return sequence of strings <aLayerS> that assosiated with label <L>.
        	:param L:
        	:type L: TDF_Label
        	:param aLayerS:
        	:type aLayerS: TColStd_HSequenceOfExtendedString
        	:rtype: bool
        * Return sequence of labels <aLayerSL> that assosiated with label <L>.
        	:param L:
        	:type L: TDF_Label
        	:param aLayerLS:
        	:type aLayerLS: TDF_LabelSequence
        	:rtype: bool
        * Return sequence of strings that assosiated with label <L>.
        	:param L:
        	:type L: TDF_Label
        	:rtype: opencascade::handle<TColStd_HSequenceOfExtendedString>
        * Return sequence of strings <aLayerS> that assosiated with shape <Sh>.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param aLayerS:
        	:type aLayerS: TColStd_HSequenceOfExtendedString
        	:rtype: bool
        * Return sequence of labels <aLayerLS> that assosiated with shape <Sh>.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param aLayerLS:
        	:type aLayerLS: TDF_LabelSequence
        	:rtype: bool
        * Return sequence of strings that assosiated with shape <Sh>.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:rtype: opencascade::handle<TColStd_HSequenceOfExtendedString>
        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetLayers(self, *args)


    def GetShapesOfLayer(self, *args) -> "void":
        """
        * Return sequanese of shape labels that assigned with layers to <ShLabels>.
        	:param layerL:
        	:type layerL: TDF_Label
        	:param ShLabels:
        	:type ShLabels: TDF_LabelSequence
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetShapesOfLayer(self, *args)


    def IsLayer(self, *args) -> "Standard_Boolean":
        """
        * Returns True if label belongs to a Layertable and is a Layer definition
        	:param lab:
        	:type lab: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_LayerTool_IsLayer(self, *args)


    def IsSet(self, *args) -> "Standard_Boolean":
        """
        * Returns True if label <L> has a Layer assosiated with the <aLayer>.
        	:param L:
        	:type L: TDF_Label
        	:param aLayer:
        	:type aLayer: TCollection_ExtendedString
        	:rtype: bool
        * Returns True if label <L> has a Layer assosiated with the <aLayerL> label.
        	:param L:
        	:type L: TDF_Label
        	:param aLayerL:
        	:type aLayerL: TDF_Label
        	:rtype: bool
        * Returns True if shape <Sh> has a Layer assosiated with the <aLayer>.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param aLayer:
        	:type aLayer: TCollection_ExtendedString
        	:rtype: bool
        * Returns True if shape <Sh> has a Layer assosiated with the <aLayerL>.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param aLayerL:
        	:type aLayerL: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_LayerTool_IsSet(self, *args)


    def IsVisible(self, *args) -> "Standard_Boolean":
        """
        * Return True if layer is visible, False if invisible.
        	:param layerL:
        	:type layerL: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_LayerTool_IsVisible(self, *args)


    def RemoveLayer(self, *args) -> "void":
        """
        * Removes Layer from the Layertable
        	:param lab:
        	:type lab: TDF_Label
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_LayerTool_RemoveLayer(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_LayerTool >":
        """
        * Creates (if not exist) LayerTool.
        	:param L:
        	:type L: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_LayerTool>
        """
        return _XCAFDoc.XCAFDoc_LayerTool_Set(*args)

    Set = staticmethod(Set)

    def SetLayer(self, *args) -> "Standard_Boolean":
        """
        * Sets a link from label <L> to Layer defined by <LayerL> optional parametr <shapeInOneLayer> show could shape be in number of layers or only in one.
        	:param L:
        	:type L: TDF_Label
        	:param LayerL:
        	:type LayerL: TDF_Label
        	:param shapeInOneLayer: default value is Standard_False
        	:type shapeInOneLayer: bool
        	:rtype: None
        * Sets a link from label <L> to Layer <aLayer> in the Layertable Adds a Layer as necessary optional parametr <shapeInOneLayer> show could shape be in number of layers or only in one.
        	:param L:
        	:type L: TDF_Label
        	:param aLayer:
        	:type aLayer: TCollection_ExtendedString
        	:param shapeInOneLayer: default value is Standard_False
        	:type shapeInOneLayer: bool
        	:rtype: None
        * Sets a link from label that containig shape <Sh> with layer that situated at label <LayerL>. optional parametr <shapeInOneLayer> show could shape be in number of layers or only in one. return False if no such shape <Sh> or label <LayerL>
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param LayerL:
        	:type LayerL: TDF_Label
        	:param shapeInOneLayer: default value is Standard_False
        	:type shapeInOneLayer: bool
        	:rtype: bool
        * Sets a link from label that containig shape <Sh> with layer <aLayer>. Add <aLayer> to LayerTable if nessesery. optional parametr <shapeInOneLayer> show could shape be in number of layers or only in one. return False if no such shape <Sh>.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param aLayer:
        	:type aLayer: TCollection_ExtendedString
        	:param shapeInOneLayer: default value is Standard_False
        	:type shapeInOneLayer: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_LayerTool_SetLayer(self, *args)


    def SetVisibility(self, *args) -> "void":
        """
        * Set the visibility of layer. If layer is invisible when on it's layer will set UAttribute with corresponding GUID.
        	:param layerL:
        	:type layerL: TDF_Label
        	:param isvisible: default value is Standard_True
        	:type isvisible: bool
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_LayerTool_SetVisibility(self, *args)


    def ShapeTool(self, *args) -> "opencascade::handle< XCAFDoc_ShapeTool > const &":
        """
        * Returns internal XCAFDoc_ShapeTool tool
        	:rtype: opencascade::handle<XCAFDoc_ShapeTool>
        """
        return _XCAFDoc.XCAFDoc_LayerTool_ShapeTool(self, *args)


    def UnSetLayers(self, *args) -> "Standard_Boolean":
        """
        * Removes a link from label <L> to all layers
        	:param L:
        	:type L: TDF_Label
        	:rtype: None
        * Remove link between shape <Sh> and all Layers at LayerTable. return False if no such shape <Sh> in XCAF Document.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_LayerTool_UnSetLayers(self, *args)


    def UnSetOneLayer(self, *args) -> "Standard_Boolean":
        """
        * Remove link from label <L> and Layer <aLayer>. returns False if no such layer.
        	:param L:
        	:type L: TDF_Label
        	:param aLayer:
        	:type aLayer: TCollection_ExtendedString
        	:rtype: bool
        * Remove link from label <L> and Layer <aLayerL>. returns False if <aLayerL> is not a layer label.
        	:param L:
        	:type L: TDF_Label
        	:param aLayerL:
        	:type aLayerL: TDF_Label
        	:rtype: bool
        * Remove link between shape <Sh> and layer <aLayer>. returns False if no such layer <aLayer> or shape <Sh>.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param aLayer:
        	:type aLayer: TCollection_ExtendedString
        	:rtype: bool
        * Remove link between shape <Sh> and layer <aLayerL>. returns False if no such layer <aLayerL> or shape <Sh>.
        	:param Sh:
        	:type Sh: TopoDS_Shape
        	:param aLayerL:
        	:type aLayerL: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_LayerTool_UnSetOneLayer(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_LayerTool_swiginit(self, _XCAFDoc.new_XCAFDoc_LayerTool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_LayerTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_LayerTool
XCAFDoc_LayerTool.AddLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_AddLayer, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.BaseLabel = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_BaseLabel, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.FindLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_FindLayer, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.GetLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_GetLayer, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.GetLayerLabels = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_GetLayerLabels, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.GetLayers = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_GetLayers, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.GetShapesOfLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_GetShapesOfLayer, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.IsLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_IsLayer, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.IsSet = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_IsSet, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.IsVisible = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_IsVisible, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.RemoveLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_RemoveLayer, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.SetLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_SetLayer, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.SetVisibility = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_SetVisibility, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.ShapeTool = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_ShapeTool, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.UnSetLayers = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_UnSetLayers, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool.UnSetOneLayer = new_instancemethod(_XCAFDoc.XCAFDoc_LayerTool_UnSetOneLayer, None, XCAFDoc_LayerTool)
XCAFDoc_LayerTool_swigregister = _XCAFDoc.XCAFDoc_LayerTool_swigregister
XCAFDoc_LayerTool_swigregister(XCAFDoc_LayerTool)

def XCAFDoc_LayerTool_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_LayerTool_GetID(*args)

def XCAFDoc_LayerTool_Set(*args) -> "opencascade::handle< XCAFDoc_LayerTool >":
    """
    * Creates (if not exist) LayerTool.
    	:param L:
    	:type L: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_LayerTool>
    """
    return _XCAFDoc.XCAFDoc_LayerTool_Set(*args)

class XCAFDoc_Location(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Get(self, *args) -> "TopLoc_Location const &":
        """
        * Returns True if there is a reference on the same label
        	:rtype: TopLoc_Location
        """
        return _XCAFDoc.XCAFDoc_Location_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_Location_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args) -> "void":
        """
        * Find, or create, a Location attribute and set it's value the Location attribute is returned. Location methods ===============
        	:param label:
        	:type label: TDF_Label
        	:param Loc:
        	:type Loc: TopLoc_Location
        	:rtype: opencascade::handle<XCAFDoc_Location>
        :param Loc:
        	:type Loc: TopLoc_Location
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_Location_Set(self, *args)


    def __init__(self, *args):
        """
        * class methods =============
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_Location_swiginit(self, _XCAFDoc.new_XCAFDoc_Location(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_Location_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Location
XCAFDoc_Location.Get = new_instancemethod(_XCAFDoc.XCAFDoc_Location_Get, None, XCAFDoc_Location)
XCAFDoc_Location.Set = new_instancemethod(_XCAFDoc.XCAFDoc_Location_Set, None, XCAFDoc_Location)
XCAFDoc_Location_swigregister = _XCAFDoc.XCAFDoc_Location_swigregister
XCAFDoc_Location_swigregister(XCAFDoc_Location)

def XCAFDoc_Location_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_Location_GetID(*args)

class XCAFDoc_Material(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetDensName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _XCAFDoc.XCAFDoc_Material_GetDensName(self, *args)


    def GetDensValType(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _XCAFDoc.XCAFDoc_Material_GetDensValType(self, *args)


    def GetDensity(self, *args) -> "Standard_Real":
        """:rtype: float"""
        return _XCAFDoc.XCAFDoc_Material_GetDensity(self, *args)


    def GetDescription(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _XCAFDoc.XCAFDoc_Material_GetDescription(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_Material_GetID(*args)

    GetID = staticmethod(GetID)

    def GetName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """:rtype: opencascade::handle<TCollection_HAsciiString>"""
        return _XCAFDoc.XCAFDoc_Material_GetName(self, *args)


    def Set(self, *args) -> "void":
        """
        :param label:
        	:type label: TDF_Label
        	:param aName:
        	:type aName: TCollection_HAsciiString
        	:param aDescription:
        	:type aDescription: TCollection_HAsciiString
        	:param aDensity:
        	:type aDensity: float
        	:param aDensName:
        	:type aDensName: TCollection_HAsciiString
        	:param aDensValType:
        	:type aDensValType: TCollection_HAsciiString
        	:rtype: opencascade::handle<XCAFDoc_Material>
        :param aName:
        	:type aName: TCollection_HAsciiString
        	:param aDescription:
        	:type aDescription: TCollection_HAsciiString
        	:param aDensity:
        	:type aDensity: float
        	:param aDensName:
        	:type aDensName: TCollection_HAsciiString
        	:param aDensValType:
        	:type aDensValType: TCollection_HAsciiString
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_Material_Set(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_Material_swiginit(self, _XCAFDoc.new_XCAFDoc_Material(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_Material_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Material
XCAFDoc_Material.GetDensName = new_instancemethod(_XCAFDoc.XCAFDoc_Material_GetDensName, None, XCAFDoc_Material)
XCAFDoc_Material.GetDensValType = new_instancemethod(_XCAFDoc.XCAFDoc_Material_GetDensValType, None, XCAFDoc_Material)
XCAFDoc_Material.GetDensity = new_instancemethod(_XCAFDoc.XCAFDoc_Material_GetDensity, None, XCAFDoc_Material)
XCAFDoc_Material.GetDescription = new_instancemethod(_XCAFDoc.XCAFDoc_Material_GetDescription, None, XCAFDoc_Material)
XCAFDoc_Material.GetName = new_instancemethod(_XCAFDoc.XCAFDoc_Material_GetName, None, XCAFDoc_Material)
XCAFDoc_Material.Set = new_instancemethod(_XCAFDoc.XCAFDoc_Material_Set, None, XCAFDoc_Material)
XCAFDoc_Material_swigregister = _XCAFDoc.XCAFDoc_Material_swigregister
XCAFDoc_Material_swigregister(XCAFDoc_Material)

def XCAFDoc_Material_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_Material_GetID(*args)

class XCAFDoc_MaterialTool(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddMaterial(self, *args) -> "TDF_Label":
        """
        * Adds a Material definition to a table and returns its label
        	:param aName:
        	:type aName: TCollection_HAsciiString
        	:param aDescription:
        	:type aDescription: TCollection_HAsciiString
        	:param aDensity:
        	:type aDensity: float
        	:param aDensName:
        	:type aDensName: TCollection_HAsciiString
        	:param aDensValType:
        	:type aDensValType: TCollection_HAsciiString
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_MaterialTool_AddMaterial(self, *args)


    def BaseLabel(self, *args) -> "TDF_Label":
        """
        * returns the label under which colors are stored
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_MaterialTool_BaseLabel(self, *args)


    def GetDensityForShape(*args) -> "Standard_Real":
        """
        * Find referred material and return density from it if no material --> return 0
        	:param ShapeL:
        	:type ShapeL: TDF_Label
        	:rtype: float
        """
        return _XCAFDoc.XCAFDoc_MaterialTool_GetDensityForShape(*args)

    GetDensityForShape = staticmethod(GetDensityForShape)

    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_MaterialTool_GetID(*args)

    GetID = staticmethod(GetID)

    def GetMaterial(self, *args) -> "Standard_Boolean":
        """
        * Returns Material assigned to <MatL> Returns False if no such Material is assigned
        	:param MatL:
        	:type MatL: TDF_Label
        	:param aName:
        	:type aName: TCollection_HAsciiString
        	:param aDescription:
        	:type aDescription: TCollection_HAsciiString
        	:param aDensity:
        	:type aDensity: float
        	:param aDensName:
        	:type aDensName: TCollection_HAsciiString
        	:param aDensValType:
        	:type aDensValType: TCollection_HAsciiString
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_MaterialTool_GetMaterial(self, *args)


    def GetMaterialLabels(self, *args) -> "void":
        """
        * Returns a sequence of materials currently stored in the material table
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_MaterialTool_GetMaterialLabels(self, *args)


    def IsMaterial(self, *args) -> "Standard_Boolean":
        """
        * Returns True if label belongs to a material table and is a Material definition
        	:param lab:
        	:type lab: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_MaterialTool_IsMaterial(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_MaterialTool >":
        """
        * Creates (if not exist) MaterialTool.
        	:param L:
        	:type L: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_MaterialTool>
        """
        return _XCAFDoc.XCAFDoc_MaterialTool_Set(*args)

    Set = staticmethod(Set)

    def SetMaterial(self, *args) -> "void":
        """
        * Sets a link with GUID
        	:param L:
        	:type L: TDF_Label
        	:param MatL:
        	:type MatL: TDF_Label
        	:rtype: None
        * Sets a link with GUID Adds a Material as necessary
        	:param L:
        	:type L: TDF_Label
        	:param aName:
        	:type aName: TCollection_HAsciiString
        	:param aDescription:
        	:type aDescription: TCollection_HAsciiString
        	:param aDensity:
        	:type aDensity: float
        	:param aDensName:
        	:type aDensName: TCollection_HAsciiString
        	:param aDensValType:
        	:type aDensValType: TCollection_HAsciiString
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_MaterialTool_SetMaterial(self, *args)


    def ShapeTool(self, *args) -> "opencascade::handle< XCAFDoc_ShapeTool > const &":
        """
        * Returns internal XCAFDoc_ShapeTool tool
        	:rtype: opencascade::handle<XCAFDoc_ShapeTool>
        """
        return _XCAFDoc.XCAFDoc_MaterialTool_ShapeTool(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_MaterialTool_swiginit(self, _XCAFDoc.new_XCAFDoc_MaterialTool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_MaterialTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_MaterialTool
XCAFDoc_MaterialTool.AddMaterial = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_AddMaterial, None, XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.BaseLabel = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_BaseLabel, None, XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.GetMaterial = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_GetMaterial, None, XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.GetMaterialLabels = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_GetMaterialLabels, None, XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.IsMaterial = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_IsMaterial, None, XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.SetMaterial = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_SetMaterial, None, XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool.ShapeTool = new_instancemethod(_XCAFDoc.XCAFDoc_MaterialTool_ShapeTool, None, XCAFDoc_MaterialTool)
XCAFDoc_MaterialTool_swigregister = _XCAFDoc.XCAFDoc_MaterialTool_swigregister
XCAFDoc_MaterialTool_swigregister(XCAFDoc_MaterialTool)

def XCAFDoc_MaterialTool_GetDensityForShape(*args) -> "Standard_Real":
    """
    * Find referred material and return density from it if no material --> return 0
    	:param ShapeL:
    	:type ShapeL: TDF_Label
    	:rtype: float
    """
    return _XCAFDoc.XCAFDoc_MaterialTool_GetDensityForShape(*args)

def XCAFDoc_MaterialTool_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_MaterialTool_GetID(*args)

def XCAFDoc_MaterialTool_Set(*args) -> "opencascade::handle< XCAFDoc_MaterialTool >":
    """
    * Creates (if not exist) MaterialTool.
    	:param L:
    	:type L: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_MaterialTool>
    """
    return _XCAFDoc.XCAFDoc_MaterialTool_Set(*args)

class XCAFDoc_Note(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(XCAFDoc_Note self) -> std::string"""
        return _XCAFDoc.XCAFDoc_Note_DumpToString(self)


    def Get(*args) -> "opencascade::handle< XCAFDoc_Note >":
        """
        * Finds a reference attribute on the given label and returns it, if it is found
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_Note>
        """
        return _XCAFDoc.XCAFDoc_Note_Get(*args)

    Get = staticmethod(Get)

    def GetObject(self, *args) -> "opencascade::handle< XCAFNoteObjects_NoteObject >":
        """
        * Returns auxiliary data object
        	:rtype: opencascade::handle<XCAFNoteObjects_NoteObject>
        """
        return _XCAFDoc.XCAFDoc_Note_GetObject(self, *args)


    def IsMine(*args) -> "Standard_Boolean":
        """
        * Checks if the given label represents a note.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_Note_IsMine(*args)

    IsMine = staticmethod(IsMine)

    def IsOrphan(self, *args) -> "Standard_Boolean":
        """
        * Checks if the note isn't linked to annotated items.
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_Note_IsOrphan(self, *args)


    def Set(self, *args) -> "void":
        """
        * Sets the user name and the timestamp of the note. \param [in] theUserName - the user associated with the note. \param [in] theTimeStamp - timestamp of the note. eturn A handle to the attribute instance.
        	:param theUserName:
        	:type theUserName: TCollection_ExtendedString
        	:param theTimeStamp:
        	:type theTimeStamp: TCollection_ExtendedString
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_Note_Set(self, *args)


    def SetObject(self, *args) -> "void":
        """
        * Updates auxiliary data
        	:param theObject:
        	:type theObject: XCAFNoteObjects_NoteObject
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_Note_SetObject(self, *args)


    def TimeStamp(self, *args) -> "TCollection_ExtendedString const &":
        """
        * Returns the timestamp of the note.
        	:rtype: TCollection_ExtendedString
        """
        return _XCAFDoc.XCAFDoc_Note_TimeStamp(self, *args)


    def UserName(self, *args) -> "TCollection_ExtendedString const &":
        """
        * Returns the user name, who created the note.
        	:rtype: TCollection_ExtendedString
        """
        return _XCAFDoc.XCAFDoc_Note_UserName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_Note_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Note
XCAFDoc_Note.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_Note_DumpToString, None, XCAFDoc_Note)
XCAFDoc_Note.GetObject = new_instancemethod(_XCAFDoc.XCAFDoc_Note_GetObject, None, XCAFDoc_Note)
XCAFDoc_Note.IsOrphan = new_instancemethod(_XCAFDoc.XCAFDoc_Note_IsOrphan, None, XCAFDoc_Note)
XCAFDoc_Note.Set = new_instancemethod(_XCAFDoc.XCAFDoc_Note_Set, None, XCAFDoc_Note)
XCAFDoc_Note.SetObject = new_instancemethod(_XCAFDoc.XCAFDoc_Note_SetObject, None, XCAFDoc_Note)
XCAFDoc_Note.TimeStamp = new_instancemethod(_XCAFDoc.XCAFDoc_Note_TimeStamp, None, XCAFDoc_Note)
XCAFDoc_Note.UserName = new_instancemethod(_XCAFDoc.XCAFDoc_Note_UserName, None, XCAFDoc_Note)
XCAFDoc_Note_swigregister = _XCAFDoc.XCAFDoc_Note_swigregister
XCAFDoc_Note_swigregister(XCAFDoc_Note)

def XCAFDoc_Note_Get(*args) -> "opencascade::handle< XCAFDoc_Note >":
    """
    * Finds a reference attribute on the given label and returns it, if it is found
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_Note>
    """
    return _XCAFDoc.XCAFDoc_Note_Get(*args)

def XCAFDoc_Note_IsMine(*args) -> "Standard_Boolean":
    """
    * Checks if the given label represents a note.
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_Note_IsMine(*args)

class XCAFDoc_NotesTool(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddNote(self, *args) -> "opencascade::handle< XCAFDoc_AssemblyItemRef >":
        """
        * @} @name Annotation functions @{ Adds the given note to the assembly item. \param [in] theNoteLabel - note label. \param [in] theItemId - assembly item ID. eturn a handle to the assembly reference attribute.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
        * Adds the given note to the labeled item. \param [in] theNoteLabel - note label. \param [in] theItemLabel - item label. eturn a handle to the assembly reference attribute.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
        """
        return _XCAFDoc.XCAFDoc_NotesTool_AddNote(self, *args)


    def AddNoteToAttr(self, *args) -> "opencascade::handle< XCAFDoc_AssemblyItemRef >":
        """
        * Adds the given note to the assembly item's attribute. \param [in] theNoteLabel - note label. \param [in] theItemId - assembly item ID. \param [in] theGUID - assembly item's attribute GUID. eturn a handle to the assembly reference attribute.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
        * Adds the given note to the labeled item's attribute. \param [in] theNoteLabel - note label. \param [in] theItemLabel - item label. \param [in] theGUID - assembly item's attribute GUID. eturn a handle to the assembly reference attribute.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
        """
        return _XCAFDoc.XCAFDoc_NotesTool_AddNoteToAttr(self, *args)


    def AddNoteToSubshape(self, *args) -> "opencascade::handle< XCAFDoc_AssemblyItemRef >":
        """
        * Adds the given note to the assembly item's subshape. \param [in] theNoteLabel - note label. \param [in] theItemId - assembly item ID. \param [in] theSubshapeIndex - assembly item's subshape index. eturn a handle to the assembly reference attribute.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theSubshapeIndex:
        	:type theSubshapeIndex: int
        	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
        * Adds the given note to the labeled item's subshape. \param [in] theNoteLabel - note label. \param [in] theItemLabel - item label. \param [in] theSubshapeIndex - assembly item's subshape index. eturn a handle to the assembly reference attribute.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:param theSubshapeIndex:
        	:type theSubshapeIndex: int
        	:rtype: opencascade::handle<XCAFDoc_AssemblyItemRef>
        """
        return _XCAFDoc.XCAFDoc_NotesTool_AddNoteToSubshape(self, *args)


    def CreateBalloon(self, *args) -> "opencascade::handle< XCAFDoc_Note >":
        """
        * Create a new 'balloon' note. Creates a new label under the notes hive and attaches ef XCAFDoc_NoteBalloon attribute (derived ftom ef XCAFDoc_Note). \param [in] theUserName - the user associated with the note. \param [in] theTimeStamp - timestamp of the note. \param [in] theComment - textual comment. eturn a handle to the base note attribute.
        	:param theUserName:
        	:type theUserName: TCollection_ExtendedString
        	:param theTimeStamp:
        	:type theTimeStamp: TCollection_ExtendedString
        	:param theComment:
        	:type theComment: TCollection_ExtendedString
        	:rtype: opencascade::handle<XCAFDoc_Note>
        """
        return _XCAFDoc.XCAFDoc_NotesTool_CreateBalloon(self, *args)


    def CreateBinData(self, *args) -> "opencascade::handle< XCAFDoc_Note >":
        """
        * Create a new note with data loaded from a binary file. Creates a new label under the notes hive and attaches ef XCAFDoc_NoteComment attribute (derived ftom ef XCAFDoc_Note). \param [in] theUserName - the user associated with the note. \param [in] theTimeStamp - timestamp of the note. \param [in] theTitle - file title. \param [in] theMIMEtype - MIME type of the file. \param [in] theFile - input binary file. eturn a handle to the base note attribute.
        	:param theUserName:
        	:type theUserName: TCollection_ExtendedString
        	:param theTimeStamp:
        	:type theTimeStamp: TCollection_ExtendedString
        	:param theTitle:
        	:type theTitle: TCollection_ExtendedString
        	:param theMIMEtype:
        	:type theMIMEtype: TCollection_AsciiString
        	:param theFile:
        	:type theFile: OSD_File
        	:rtype: opencascade::handle<XCAFDoc_Note>
        * Create a new note with data loaded from a byte data array. Creates a new label under the notes hive and attaches ef XCAFDoc_NoteComment attribute (derived ftom ef XCAFDoc_Note). \param [in] theUserName - the user associated with the note. \param [in] theTimeStamp - timestamp of the note. \param [in] theTitle - data title. \param [in] theMIMEtype - MIME type of the file. \param [in] theData - byte data array. eturn a handle to the base note attribute.
        	:param theUserName:
        	:type theUserName: TCollection_ExtendedString
        	:param theTimeStamp:
        	:type theTimeStamp: TCollection_ExtendedString
        	:param theTitle:
        	:type theTitle: TCollection_ExtendedString
        	:param theMIMEtype:
        	:type theMIMEtype: TCollection_AsciiString
        	:param theData:
        	:type theData: TColStd_HArray1OfByte
        	:rtype: opencascade::handle<XCAFDoc_Note>
        """
        return _XCAFDoc.XCAFDoc_NotesTool_CreateBinData(self, *args)


    def CreateComment(self, *args) -> "opencascade::handle< XCAFDoc_Note >":
        """
        * @} @name Note creation functions @{ Create a new comment note. Creates a new label under the notes hive and attaches ef XCAFDoc_NoteComment attribute (derived ftom ef XCAFDoc_Note). \param [in] theUserName - the user associated with the note. \param [in] theTimeStamp - timestamp of the note. \param [in] theComment - textual comment. eturn a handle to the base note attribute.
        	:param theUserName:
        	:type theUserName: TCollection_ExtendedString
        	:param theTimeStamp:
        	:type theTimeStamp: TCollection_ExtendedString
        	:param theComment:
        	:type theComment: TCollection_ExtendedString
        	:rtype: opencascade::handle<XCAFDoc_Note>
        """
        return _XCAFDoc.XCAFDoc_NotesTool_CreateComment(self, *args)


    def DeleteAllNotes(self, *args) -> "Standard_Integer":
        """
        * Deletes all notes. Clears all annotations. eturn number of deleted notes.
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_NotesTool_DeleteAllNotes(self, *args)


    def DeleteNote(self, *args) -> "Standard_Boolean":
        """
        * @} @name Delete note functions @{ Deletes the given note. Removes all links with items annotated by the note. \param [in] theNoteLabel - note label. eturn true if the note is deleted, otherwise - false.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_NotesTool_DeleteNote(self, *args)


    def DeleteNotes(self, *args) -> "Standard_Integer":
        """
        * Deletes the given notes. Removes all links with items annotated by the notes. \param [in] theNoteLabels - note label sequence. eturn number of deleted notes.
        	:param theNoteLabels:
        	:type theNoteLabels: TDF_LabelSequence
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_NotesTool_DeleteNotes(self, *args)


    def DeleteOrphanNotes(self, *args) -> "Standard_Integer":
        """
        * Deletes all notes that aren't linked to annotated items. eturn number of deleted notes.
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_NotesTool_DeleteOrphanNotes(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(XCAFDoc_NotesTool self) -> std::string"""
        return _XCAFDoc.XCAFDoc_NotesTool_DumpToString(self)


    def FindAnnotatedItem(self, *args) -> "TDF_Label":
        """
        * @name Find annotated item functions @{ Finds a label of the given assembly item ID in the annotated items hive. \param [in] theItemId - assembly item ID. eturn annotated item label if it is found, otherwise - null label.
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:rtype: TDF_Label
        * Finds a label of the given labeled item in the annotated items hive. \param [in] theItemLabel - item label. eturn annotated item label if it is found, otherwise - null label.
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_NotesTool_FindAnnotatedItem(self, *args)


    def FindAnnotatedItemAttr(self, *args) -> "TDF_Label":
        """
        * Finds a label of the given assembly item's attribute in the annotated items hive. \param [in] theItemId - assembly item ID. \param [in] theGUID - assembly item's attribute GUID. eturn annotated item label if it is found, otherwise - null label.
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:rtype: TDF_Label
        * Finds a label of the given labeled item's attribute in the annotated items hive. \param [in] theItemLabel - item label. \param [in] theGUID - item's attribute GUID. eturn annotated item label if it is found, otherwise - null label.
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_NotesTool_FindAnnotatedItemAttr(self, *args)


    def FindAnnotatedItemSubshape(self, *args) -> "TDF_Label":
        """
        * Finds a label of the given assembly item's subshape in the annotated items hive. \param [in] theItemId - assembly item ID. \param [in] theSubshapeIndex - assembly item's subshape index. eturn annotated item label if it is found, otherwise - null label.
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theSubshapeIndex:
        	:type theSubshapeIndex: int
        	:rtype: TDF_Label
        * Finds a label of the given labeled item's subshape in the annotated items hive. \param [in] theItemLabel - item label. \param [in] theSubshapeIndex - labeled item's subshape index. eturn annotated item label if it is found, otherwise - null label.
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:param theSubshapeIndex:
        	:type theSubshapeIndex: int
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_NotesTool_FindAnnotatedItemSubshape(self, *args)


    def GetAnnotatedItems(self, *args) -> "void":
        """
        * Returns all labels from the annotated items hive. The label sequence isn't cleared beforehand. \param [out] theNoteLabels - sequence of labels.
        	:param theLabels:
        	:type theLabels: TDF_LabelSequence
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetAnnotatedItems(self, *args)


    def GetAnnotatedItemsLabel(self, *args) -> "TDF_Label":
        """
        * Returns the label of the annotated items hive.
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetAnnotatedItemsLabel(self, *args)


    def GetAttrNotes(self, *args) -> "Standard_Integer":
        """
        * Gets all note labels of the assembly item's attribute. Notes linked to the item itself or to item's subshapes aren't taken into account. The label sequence isn't cleared beforehand. \param [in] theItemId - assembly item ID. \param [in] theGUID - assembly item's attribute GUID. \param [out] theNoteLabels - sequence of labels. eturn number of added labels.
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:param theNoteLabels:
        	:type theNoteLabels: TDF_LabelSequence
        	:rtype: int
        * Gets all note labels of the labeled item's attribute. Notes linked to the item itself or to item's subshapes aren't taken into account. The label sequence isn't cleared beforehand. \param [in] theItemLabel - item label. \param [in] theGUID - item's attribute GUID. \param [out] theNoteLabels - sequence of labels. eturn number of added labels.
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:param theNoteLabels:
        	:type theNoteLabels: TDF_LabelSequence
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetAttrNotes(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns default attribute GUID
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetID(*args)

    GetID = staticmethod(GetID)

    def GetNotes(self, *args) -> "Standard_Integer":
        """
        * Returns all labels from the notes hive. The label sequence isn't cleared beforehand. \param [out] theNoteLabels - sequence of labels.
        	:param theNoteLabels:
        	:type theNoteLabels: TDF_LabelSequence
        	:rtype: None
        * @} @name Get notes from annotated items functions @{ Gets all note labels of the assembly item. Notes linked to item's subshapes or attributes aren't taken into account. The label sequence isn't cleared beforehand. \param [in] theItemId - assembly item ID. \param [out] theNoteLabels - sequence of labels. eturn number of added labels.
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theNoteLabels:
        	:type theNoteLabels: TDF_LabelSequence
        	:rtype: int
        * Gets all note labels of the labeled item. Notes linked to item's attributes aren't taken into account. The label sequence isn't cleared beforehand. \param [in] theItemLabel - item label. \param [out] theNoteLabels - sequence of labels. eturn number of added labels.
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:param theNoteLabels:
        	:type theNoteLabels: TDF_LabelSequence
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetNotes(self, *args)


    def GetNotesLabel(self, *args) -> "TDF_Label":
        """
        * Returns the label of the notes hive.
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetNotesLabel(self, *args)


    def GetOrphanNotes(self, *args) -> "void":
        """
        * Returns note labels that aren't linked to annotated items. The label sequence isn't cleared beforehand. \param [out] theNoteLabels - sequence of labels.
        	:param theNoteLabels:
        	:type theNoteLabels: TDF_LabelSequence
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetOrphanNotes(self, *args)


    def GetSubshapeNotes(self, *args) -> "Standard_Integer":
        """
        * Gets all note labels of the annotated item. Notes linked to the item itself or to item's attributes taken into account. The label sequence isn't cleared beforehand. \param [in] theItemId - assembly item ID. \param [in] theSubshapeIndex - assembly item's subshape index. \param [out] theNoteLabels - sequence of labels. eturn number of added labels.
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theSubshapeIndex:
        	:type theSubshapeIndex: int
        	:param theNoteLabels:
        	:type theNoteLabels: TDF_LabelSequence
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetSubshapeNotes(self, *args)


    def IsAnnotatedItem(self, *args) -> "Standard_Boolean":
        """
        * Checks if the given assembly item is annotated. \param [in] theItemId - assembly item ID. eturn true if the item is annotated, otherwise - false.
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:rtype: bool
        * Checks if the given labeled item is annotated. \param [in] theItemLabel - item label. eturn true if the item is annotated, otherwise - false.
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_NotesTool_IsAnnotatedItem(self, *args)


    def NbAnnotatedItems(self, *args) -> "Standard_Integer":
        """
        * Returns the number of labels in the annotated items hive.
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_NotesTool_NbAnnotatedItems(self, *args)


    def NbNotes(self, *args) -> "Standard_Integer":
        """
        * Returns the number of labels in the notes hive.
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_NotesTool_NbNotes(self, *args)


    def NbOrphanNotes(self, *args) -> "Standard_Integer":
        """
        * @} @name Orphan annotated items functions @{ Returns number of notes that aren't linked to annotated items.
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_NotesTool_NbOrphanNotes(self, *args)


    def RemoveAllAttrNotes(self, *args) -> "Standard_Boolean":
        """
        * Removes all notes from the assembly item's attribute. \param [in] theItemId - assembly item ID. \param [in] theGUID - assembly item's attribute GUID. \param [in] theDelIfOrphan - deletes removed notes from the notes  hive if there are no more annotated items  linked with the notes. eturn true if the notes are removed, otherwise - false.
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:param theDelIfOrphan: default value is Standard_False
        	:type theDelIfOrphan: bool
        	:rtype: bool
        * Removes all notes from the labeled item's attribute. \param [in] theItemLabel - item label. \param [in] theGUID - labeled item's attribute GUID. \param [in] theDelIfOrphan - deletes removed notes from the notes  hive if there are no more annotated items  linked with the notes. eturn true if the notes are removed, otherwise - false.
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:param theDelIfOrphan: default value is Standard_False
        	:type theDelIfOrphan: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveAllAttrNotes(self, *args)


    def RemoveAllNotes(self, *args) -> "Standard_Boolean":
        """
        * Removes all notes from the assembly item. \param [in] theItemId - assembly item ID. \param [in] theDelIfOrphan - deletes removed notes from the notes  hive if there are no more annotated items  linked with the notes. eturn true if the notes are removed, otherwise - false.
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theDelIfOrphan: default value is Standard_False
        	:type theDelIfOrphan: bool
        	:rtype: bool
        * Removes all notes from the labeled item. \param [in] theItemLabel - item label. \param [in] theDelIfOrphan - deletes removed notes from the notes  hive if there are no more annotated items  linked with the notes. eturn true if the notes are removed, otherwise - false.
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:param theDelIfOrphan: default value is Standard_False
        	:type theDelIfOrphan: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveAllNotes(self, *args)


    def RemoveAllSubshapeNotes(self, *args) -> "Standard_Boolean":
        """
        * Removes all notes from the assembly item's subshape. \param [in] theItemId - assembly item ID. \param [in] theSubshapeIndex - assembly item's subshape index. \param [in] theDelIfOrphan - deletes removed notes from the notes  hive if there are no more annotated items  linked with the notes. eturn true if the notes are removed, otherwise - false.
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theSubshapeIndex:
        	:type theSubshapeIndex: int
        	:param theDelIfOrphan: default value is Standard_False
        	:type theDelIfOrphan: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveAllSubshapeNotes(self, *args)


    def RemoveAttrNote(self, *args) -> "Standard_Boolean":
        """
        * Removes a note from the assembly item's attribute. \param [in] theNoteLabel - note label. \param [in] theItemId - assembly item ID. \param [in] theGUID - assembly item's attribute GUID. \param [in] theDelIfOrphan - deletes the note from the notes hive  if there are no more assembly item's  attribute linked with the note. eturn true if the note is removed, otherwise - false.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:param theDelIfOrphan: default value is Standard_False
        	:type theDelIfOrphan: bool
        	:rtype: bool
        * Removes a note from the labeled item's attribute. \param [in] theNoteLabel - note label. \param [in] theItemLabel - item label. \param [in] theGUID - labeled item's attribute GUID. \param [in] theDelIfOrphan - deletes the note from the notes hive  if there are no more assembly item's  attribute linked with the note. eturn true if the note is removed, otherwise - false.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:param theGUID:
        	:type theGUID: Standard_GUID
        	:param theDelIfOrphan: default value is Standard_False
        	:type theDelIfOrphan: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveAttrNote(self, *args)


    def RemoveNote(self, *args) -> "Standard_Boolean":
        """
        * @} @name Remove annotation functions @{ Removes the given note from the assembly item. \param [in] theNoteLabel - note label. \param [in] theItemId - assembly item ID. \param [in] theDelIfOrphan - deletes the note from the notes hive  if there are no more assembly items  linked with the note. eturn true if the note is removed, otherwise - false.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theDelIfOrphan: default value is Standard_False
        	:type theDelIfOrphan: bool
        	:rtype: bool
        * Removes the given note from the labeled item. \param [in] theNoteLabel - note label. \param [in] theItemLabel - item label. \param [in] theDelIfOrphan - deletes the note from the notes hive  if there are no more labeled items  linked with the note. eturn true if the note is removed, otherwise - false.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:param theDelIfOrphan: default value is Standard_False
        	:type theDelIfOrphan: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveNote(self, *args)


    def RemoveSubshapeNote(self, *args) -> "Standard_Boolean":
        """
        * Removes the given note from the assembly item's subshape. \param [in] theNoteLabel - note label. \param [in] theItemId - assembly item ID. \param [in] theSubshapeIndex - assembly item's subshape index. \param [in] theDelIfOrphan - deletes the note from the notes hive  if there are no more assembly item's  subshape linked with the note. eturn true if the note is removed, otherwise - false.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemId:
        	:type theItemId: XCAFDoc_AssemblyItemId
        	:param theSubshapeIndex:
        	:type theSubshapeIndex: int
        	:param theDelIfOrphan: default value is Standard_False
        	:type theDelIfOrphan: bool
        	:rtype: bool
        * Removes the given note from the labeled item's subshape. \param [in] theNoteLabel - note label. \param [in] theItemLabel - item label. \param [in] theSubshapeIndex - labeled item's subshape index. \param [in] theDelIfOrphan - deletes the note from the notes hive  if there are no more assembly item's  subshape linked with the note. eturn true if the note is removed, otherwise - false.
        	:param theNoteLabel:
        	:type theNoteLabel: TDF_Label
        	:param theItemLabel:
        	:type theItemLabel: TDF_Label
        	:param theSubshapeIndex:
        	:type theSubshapeIndex: int
        	:param theDelIfOrphan: default value is Standard_False
        	:type theDelIfOrphan: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveSubshapeNote(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_NotesTool >":
        """
        * Create (if not exist) a notes tool from XCAFDoc on theLabel.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_NotesTool>
        """
        return _XCAFDoc.XCAFDoc_NotesTool_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        * Creates an empty notes tool.
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_NotesTool_swiginit(self, _XCAFDoc.new_XCAFDoc_NotesTool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_NotesTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_NotesTool
XCAFDoc_NotesTool.AddNote = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_AddNote, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.AddNoteToAttr = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_AddNoteToAttr, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.AddNoteToSubshape = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_AddNoteToSubshape, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.CreateBalloon = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_CreateBalloon, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.CreateBinData = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_CreateBinData, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.CreateComment = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_CreateComment, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.DeleteAllNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_DeleteAllNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.DeleteNote = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_DeleteNote, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.DeleteNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_DeleteNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.DeleteOrphanNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_DeleteOrphanNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_DumpToString, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.FindAnnotatedItem = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_FindAnnotatedItem, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.FindAnnotatedItemAttr = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_FindAnnotatedItemAttr, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.FindAnnotatedItemSubshape = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_FindAnnotatedItemSubshape, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.GetAnnotatedItems = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_GetAnnotatedItems, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.GetAnnotatedItemsLabel = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_GetAnnotatedItemsLabel, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.GetAttrNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_GetAttrNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.GetNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_GetNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.GetNotesLabel = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_GetNotesLabel, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.GetOrphanNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_GetOrphanNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.GetSubshapeNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_GetSubshapeNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.IsAnnotatedItem = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_IsAnnotatedItem, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.NbAnnotatedItems = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_NbAnnotatedItems, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.NbNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_NbNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.NbOrphanNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_NbOrphanNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.RemoveAllAttrNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_RemoveAllAttrNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.RemoveAllNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_RemoveAllNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.RemoveAllSubshapeNotes = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_RemoveAllSubshapeNotes, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.RemoveAttrNote = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_RemoveAttrNote, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.RemoveNote = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_RemoveNote, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool.RemoveSubshapeNote = new_instancemethod(_XCAFDoc.XCAFDoc_NotesTool_RemoveSubshapeNote, None, XCAFDoc_NotesTool)
XCAFDoc_NotesTool_swigregister = _XCAFDoc.XCAFDoc_NotesTool_swigregister
XCAFDoc_NotesTool_swigregister(XCAFDoc_NotesTool)

def XCAFDoc_NotesTool_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns default attribute GUID
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.XCAFDoc_NotesTool_GetID(*args)

def XCAFDoc_NotesTool_Set(*args) -> "opencascade::handle< XCAFDoc_NotesTool >":
    """
    * Create (if not exist) a notes tool from XCAFDoc on theLabel.
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_NotesTool>
    """
    return _XCAFDoc.XCAFDoc_NotesTool_Set(*args)

class XCAFDoc_ShapeMapTool(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_ShapeMapTool_GetID(*args)

    GetID = staticmethod(GetID)

    def GetMap(self, *args) -> "TopTools_IndexedMapOfShape const &":
        """:rtype: TopTools_IndexedMapOfShape"""
        return _XCAFDoc.XCAFDoc_ShapeMapTool_GetMap(self, *args)


    def IsSubShape(self, *args) -> "Standard_Boolean":
        """
        * Checks whether shape <sub> is subshape of shape stored on label shapeL
        	:param sub:
        	:type sub: TopoDS_Shape
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_IsSubShape(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_ShapeMapTool >":
        """
        * Create (if not exist) ShapeTool from XCAFDoc on <L>.
        	:param L:
        	:type L: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_ShapeMapTool>
        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_Set(*args)

    Set = staticmethod(Set)

    def SetShape(self, *args) -> "void":
        """
        * Sets representation (TopoDS_Shape) for top-level shape
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_SetShape(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty tool
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_ShapeMapTool_swiginit(self, _XCAFDoc.new_XCAFDoc_ShapeMapTool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_ShapeMapTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_ShapeMapTool
XCAFDoc_ShapeMapTool.GetMap = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeMapTool_GetMap, None, XCAFDoc_ShapeMapTool)
XCAFDoc_ShapeMapTool.IsSubShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeMapTool_IsSubShape, None, XCAFDoc_ShapeMapTool)
XCAFDoc_ShapeMapTool.SetShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeMapTool_SetShape, None, XCAFDoc_ShapeMapTool)
XCAFDoc_ShapeMapTool_swigregister = _XCAFDoc.XCAFDoc_ShapeMapTool_swigregister
XCAFDoc_ShapeMapTool_swigregister(XCAFDoc_ShapeMapTool)

def XCAFDoc_ShapeMapTool_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_ShapeMapTool_GetID(*args)

def XCAFDoc_ShapeMapTool_Set(*args) -> "opencascade::handle< XCAFDoc_ShapeMapTool >":
    """
    * Create (if not exist) ShapeTool from XCAFDoc on <L>.
    	:param L:
    	:type L: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_ShapeMapTool>
    """
    return _XCAFDoc.XCAFDoc_ShapeMapTool_Set(*args)

class XCAFDoc_ShapeTool(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddComponent(self, *args) -> "TDF_Label":
        """
        * Adds a component given by its label and location to the assembly Note: assembly must be IsAssembly() or IsSimpleShape()
        	:param assembly:
        	:type assembly: TDF_Label
        	:param comp:
        	:type comp: TDF_Label
        	:param Loc:
        	:type Loc: TopLoc_Location
        	:rtype: TDF_Label
        * Adds a shape (located) as a component to the assembly If necessary, creates an additional top-level shape for component and return the Label of component. If expand is True and component is Compound, it will be created as assembly also Note: assembly must be IsAssembly() or IsSimpleShape()
        	:param assembly:
        	:type assembly: TDF_Label
        	:param comp:
        	:type comp: TopoDS_Shape
        	:param expand: default value is Standard_False
        	:type expand: bool
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AddComponent(self, *args)


    def AddShape(self, *args) -> "TDF_Label":
        """
        * Adds a new top-level (creates and returns a new label) If makeAssembly is True, treats TopAbs_COMPOUND shapes as assemblies (creates assembly structure). NOTE: <makePrepare> replace components without location in assmebly by located components to avoid some problems. If AutoNaming() is True then automatically attaches names.
        	:param S:
        	:type S: TopoDS_Shape
        	:param makeAssembly: default value is Standard_True
        	:type makeAssembly: bool
        	:param makePrepare: default value is Standard_True
        	:type makePrepare: bool
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AddShape(self, *args)


    def AddSubShape(self, *args) -> "Standard_Boolean":
        """
        * Adds a label for subshape <sub> of shape stored on label shapeL Returns Null label if it is not subshape
        	:param shapeL:
        	:type shapeL: TDF_Label
        	:param sub:
        	:type sub: TopoDS_Shape
        	:rtype: TDF_Label
        * Adds (of finds already existed) a label for subshape <sub> of shape stored on label shapeL. Label addedSubShapeL returns added (found) label or empty in case of wrong subshape. Returns True, if new shape was added, False in case of already existed subshape/wrong subshape
        	:param shapeL:
        	:type shapeL: TDF_Label
        	:param sub:
        	:type sub: TopoDS_Shape
        	:param addedSubShapeL:
        	:type addedSubShapeL: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AddSubShape(self, *args)


    def AutoNaming(*args) -> "Standard_Boolean":
        """
        * Returns current auto-naming mode. See SetAutoNaming() for description.
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AutoNaming(*args)

    AutoNaming = staticmethod(AutoNaming)

    def BaseLabel(self, *args) -> "TDF_Label":
        """
        * returns the label under which shapes are stored
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_BaseLabel(self, *args)


    def ComputeShapes(self, *args) -> "void":
        """
        * recursive
        	:param L:
        	:type L: TDF_Label
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_ComputeShapes(self, *args)


    def ComputeSimpleShapes(self, *args) -> "void":
        """
        * Compute a sequence of simple shapes
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_ComputeSimpleShapes(self, *args)


    def Dump(self, *args) -> "Standard_OStream &":
        """
        :param theDumpLog:
        	:type theDumpLog: Standard_OStream
        	:param deep:
        	:type deep: bool
        	:rtype: Standard_OStream
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Dump(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(XCAFDoc_ShapeTool self) -> std::string"""
        return _XCAFDoc.XCAFDoc_ShapeTool_DumpToString(self)


    def DumpShape(*args) -> "void":
        """
        * Print to std::ostream <theDumpLog> type of shape found on <L> label and the entry of <L>, with <level> tabs before. If <deep>, print also TShape and Location addresses
        	:param theDumpLog:
        	:type theDumpLog: Standard_OStream
        	:param L:
        	:type L: TDF_Label
        	:param level: default value is 0
        	:type level: int
        	:param deep: default value is Standard_False
        	:type deep: bool
        	:rtype: void
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_DumpShape(*args)

    DumpShape = staticmethod(DumpShape)

    def Expand(self, *args) -> "Standard_Boolean":
        """
        * Convert Shape (compound/compsolid/shell/wire) to assembly
        	:param Shape:
        	:type Shape: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Expand(self, *args)


    def FindComponent(self, *args) -> "Standard_Boolean":
        """
        * Serach the path of labels in the document, that corresponds the component from any assembly Try to search the sequence of labels with location that produce this shape as component of any assembly NOTE: Clear sequence of labels before filling
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindComponent(self, *args)


    def FindMainShape(self, *args) -> "TDF_Label":
        """
        * Performs a search among top-level shapes to find the shape containing <sub> as subshape Checks only simple shapes, and returns the first found label (which should be the only one for valid model)
        	:param sub:
        	:type sub: TopoDS_Shape
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindMainShape(self, *args)


    def FindMainShapeUsingMap(self, *args) -> "TDF_Label":
        """
        :param sub:
        	:type sub: TopoDS_Shape
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindMainShapeUsingMap(self, *args)


    def FindSHUO(*args) -> "Standard_Boolean":
        """
        * Searchs the SHUO by labels of components from upper_usage componet to next_usage Returns null attribute if no SHUO found
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:param theSHUOAttr:
        	:type theSHUOAttr: XCAFDoc_GraphNode
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindSHUO(*args)

    FindSHUO = staticmethod(FindSHUO)

    def FindShape(self, *args) -> "TDF_Label":
        """
        * Returns the label corresponding to shape S (searches among top-level shapes, not including subcomponents of assemblies and subshapes) If findInstance is False (default), seach for the input shape without location If findInstance is True, searches for the input shape as is. Return True if <S> is found.
        	:param S:
        	:type S: TopoDS_Shape
        	:param L:
        	:type L: TDF_Label
        	:param findInstance: default value is Standard_False
        	:type findInstance: bool
        	:rtype: bool
        * Does the same as previous method Returns Null label if not found
        	:param S:
        	:type S: TopoDS_Shape
        	:param findInstance: default value is Standard_False
        	:type findInstance: bool
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindShape(self, *args)


    def FindSubShape(self, *args) -> "Standard_Boolean":
        """
        * Finds a label for subshape <sub> of shape stored on label shapeL Returns Null label if it is not found
        	:param shapeL:
        	:type shapeL: TDF_Label
        	:param sub:
        	:type sub: TopoDS_Shape
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindSubShape(self, *args)


    def GetAllComponentSHUO(*args) -> "Standard_Boolean":
        """
        * Returns founded SHUO GraphNodes of indicated component Returns false in other case
        	:param CompLabel:
        	:type CompLabel: TDF_Label
        	:param SHUOAttrs:
        	:type SHUOAttrs: TDF_AttributeSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetAllComponentSHUO(*args)

    GetAllComponentSHUO = staticmethod(GetAllComponentSHUO)

    def GetAllSHUOInstances(self, *args) -> "Standard_Boolean":
        """
        * Seaching for component shapes that styled by shuo Returns empty sequence of shape if no any shape is found.
        	:param theSHUO:
        	:type theSHUO: XCAFDoc_GraphNode
        	:param theSHUOShapeSeq:
        	:type theSHUOShapeSeq: TopTools_SequenceOfShape
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetAllSHUOInstances(self, *args)


    def GetComponents(*args) -> "Standard_Boolean":
        """
        * Returns list of components of assembly Returns False if label is not assembly
        	:param L:
        	:type L: TDF_Label
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:param getsubchilds: default value is Standard_False
        	:type getsubchilds: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetComponents(*args)

    GetComponents = staticmethod(GetComponents)

    def GetExternRefs(*args) -> "void":
        """
        * Gets the names of references on the no-step files
        	:param L:
        	:type L: TDF_Label
        	:param SHAS:
        	:type SHAS: TColStd_SequenceOfHAsciiString
        	:rtype: void
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetExternRefs(*args)

    GetExternRefs = staticmethod(GetExternRefs)

    def GetFreeShapes(self, *args) -> "void":
        """
        * Returns a sequence of all top-level shapes which are free (i.e. not referred by any other)
        	:param FreeLabels:
        	:type FreeLabels: TDF_LabelSequence
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetFreeShapes(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_ShapeTool_GetID(*args)

    GetID = staticmethod(GetID)

    def GetLocation(*args) -> "TopLoc_Location":
        """
        * Returns location of instance
        	:param L:
        	:type L: TDF_Label
        	:rtype: TopLoc_Location
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetLocation(*args)

    GetLocation = staticmethod(GetLocation)

    def GetNamedProperties(self, *args) -> "opencascade::handle< TDataStd_NamedData >":
        """
        * Method to get NamedData attribute assigned to the given shape label. @param theLabel [in] the shape Label @param theToCreate [in] create and assign attribute if it doesn't exist returns Handle to the NamedData attribute or Null if there is none
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theToCreate: default value is Standard_False
        	:type theToCreate: bool
        	:rtype: opencascade::handle<TDataStd_NamedData>
        * Method to get NamedData attribute assigned to a label of the given shape. @param theShape [in] input shape @param theToCreate [in] create and assign attribute if it doesn't exist returns Handle to the NamedData attribute or Null if there is none
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theToCreate: default value is Standard_False
        	:type theToCreate: bool
        	:rtype: opencascade::handle<TDataStd_NamedData>
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetNamedProperties(self, *args)


    def GetReferredShape(*args) -> "Standard_Boolean":
        """
        * Returns label which corresponds to a shape referred by L Returns False if label is not reference
        	:param L:
        	:type L: TDF_Label
        	:param Label:
        	:type Label: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetReferredShape(*args)

    GetReferredShape = staticmethod(GetReferredShape)

    def GetSHUO(*args) -> "Standard_Boolean":
        """
        * Returns founded SHUO GraphNode attribute <aSHUOAttr> Returns false in other case
        	:param SHUOLabel:
        	:type SHUOLabel: TDF_Label
        	:param aSHUOAttr:
        	:type aSHUOAttr: XCAFDoc_GraphNode
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUO(*args)

    GetSHUO = staticmethod(GetSHUO)

    def GetSHUOInstance(self, *args) -> "TopoDS_Shape":
        """
        * Search for the component shape that styled by shuo Returns null shape if no any shape is found.
        	:param theSHUO:
        	:type theSHUO: XCAFDoc_GraphNode
        	:rtype: TopoDS_Shape
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUOInstance(self, *args)


    def GetSHUONextUsage(*args) -> "Standard_Boolean":
        """
        * Returns the sequence of labels of SHUO attributes, which is next_usage for this upper_usage SHUO attribute (that indicated by label) NOTE: returns next_usages only on one level (not recurse) NOTE: do not clear the sequence before filling
        	:param UpperUsageL:
        	:type UpperUsageL: TDF_Label
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUONextUsage(*args)

    GetSHUONextUsage = staticmethod(GetSHUONextUsage)

    def GetSHUOUpperUsage(*args) -> "Standard_Boolean":
        """
        * Returns the sequence of labels of SHUO attributes, which is upper_usage for this next_usage SHUO attribute (that indicated by label) NOTE: returns upper_usages only on one level (not recurse) NOTE: do not clear the sequence before filling
        	:param NextUsageL:
        	:type NextUsageL: TDF_Label
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUOUpperUsage(*args)

    GetSHUOUpperUsage = staticmethod(GetSHUOUpperUsage)

    def GetShape(*args) -> "TopoDS_Shape":
        """
        * To get TopoDS_Shape from shape's label For component, returns new shape with correct location Returns False if label does not contain shape
        	:param L:
        	:type L: TDF_Label
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: bool
        * To get TopoDS_Shape from shape's label For component, returns new shape with correct location Returns Null shape if label does not contain shape
        	:param L:
        	:type L: TDF_Label
        	:rtype: TopoDS_Shape
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetShape(*args)

    GetShape = staticmethod(GetShape)

    def GetShapes(self, *args) -> "void":
        """
        * Returns a sequence of all top-level shapes
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetShapes(self, *args)


    def GetSubShapes(*args) -> "Standard_Boolean":
        """
        * Returns list of labels identifying subshapes of the given shape Returns False if no subshapes are placed on that label
        	:param L:
        	:type L: TDF_Label
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSubShapes(*args)

    GetSubShapes = staticmethod(GetSubShapes)

    def GetUsers(*args) -> "Standard_Integer":
        """
        * Returns list of labels which refer shape L as component Returns number of users (0 if shape is free)
        	:param L:
        	:type L: TDF_Label
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:param getsubchilds: default value is Standard_False
        	:type getsubchilds: bool
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetUsers(*args)

    GetUsers = staticmethod(GetUsers)

    def Init(self, *args) -> "void":
        """
        * set hasComponents into false
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Init(self, *args)


    def IsAssembly(*args) -> "Standard_Boolean":
        """
        * Returns True if the label is a label of assembly, i.e. contains sublabels which are assembly components This is relevant only if IsShape() is True
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsAssembly(*args)

    IsAssembly = staticmethod(IsAssembly)

    def IsComponent(*args) -> "Standard_Boolean":
        """
        * Return true if <L> is reference serving as component of assembly
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsComponent(*args)

    IsComponent = staticmethod(IsComponent)

    def IsCompound(*args) -> "Standard_Boolean":
        """
        * Returns True if the label is a label of compound, i.e. contains some sublabels This is relevant only if IsShape() is True
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsCompound(*args)

    IsCompound = staticmethod(IsCompound)

    def IsExternRef(*args) -> "Standard_Boolean":
        """
        * Returns True if the label is a label of external references, i.e. there are some reference on the no-step files, which are described in document only their names
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsExternRef(*args)

    IsExternRef = staticmethod(IsExternRef)

    def IsFree(*args) -> "Standard_Boolean":
        """
        * Returns True if the label is not used by any assembly, i.e. contains sublabels which are assembly components This is relevant only if IsShape() is True (There is no Father TreeNode on this <L>)
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsFree(*args)

    IsFree = staticmethod(IsFree)

    def IsReference(*args) -> "Standard_Boolean":
        """
        * Return true if <L> is a located instance of other shape i.e. reference
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsReference(*args)

    IsReference = staticmethod(IsReference)

    def IsShape(*args) -> "Standard_Boolean":
        """
        * Returns True if the label represents a shape (simple shape, assembly or reference)
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsShape(*args)

    IsShape = staticmethod(IsShape)

    def IsSimpleShape(*args) -> "Standard_Boolean":
        """
        * Returns True if the label is a label of simple shape
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsSimpleShape(*args)

    IsSimpleShape = staticmethod(IsSimpleShape)

    def IsSubShape(self, *args) -> "Standard_Boolean":
        """
        * Return true if <L> is subshape of the top-level shape
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        * Checks whether shape <sub> is subshape of shape stored on label shapeL
        	:param shapeL:
        	:type shapeL: TDF_Label
        	:param sub:
        	:type sub: TopoDS_Shape
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsSubShape(self, *args)


    def IsTopLevel(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the label is a label of top-level shape, as opposed to component of assembly or subshape
        	:param L:
        	:type L: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsTopLevel(self, *args)


    def NbComponents(*args) -> "Standard_Integer":
        """
        * Returns number of Assembles components
        	:param L:
        	:type L: TDF_Label
        	:param getsubchilds: default value is Standard_False
        	:type getsubchilds: bool
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_NbComponents(*args)

    NbComponents = staticmethod(NbComponents)

    def NewShape(self, *args) -> "TDF_Label":
        """
        * Creates new (empty) top-level shape. Initially it holds empty TopoDS_Compound
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_NewShape(self, *args)


    def RemoveComponent(self, *args) -> "void":
        """
        * Removes a component from its assembly
        	:param comp:
        	:type comp: TDF_Label
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_RemoveComponent(self, *args)


    def RemoveSHUO(self, *args) -> "Standard_Boolean":
        """
        * Remove SHUO from component sublabel, remove all dependencies on other SHUO. Returns False if cannot remove SHUO dependencies. NOTE: remove any styles that associated with this SHUO.
        	:param SHUOLabel:
        	:type SHUOLabel: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_RemoveSHUO(self, *args)


    def RemoveShape(self, *args) -> "Standard_Boolean":
        """
        * Removes shape (whole label and all its sublabels) If removeCompletely is true, removes complete shape If removeCompletely is false, removes instance(location) only Returns False (and does nothing) if shape is not free or is not top-level shape
        	:param L:
        	:type L: TDF_Label
        	:param removeCompletely: default value is Standard_True
        	:type removeCompletely: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_RemoveShape(self, *args)


    def Search(self, *args) -> "Standard_Boolean":
        """
        * General tool to find a (sub) shape in the document * If findInstance is True, and S has a non-null location, first tries to find the shape among the top-level shapes with this location * If not found, and findComponent is True, tries to find the shape among the components of assemblies * If not found, tries to find the shape without location among top-level shapes * If not found and findSubshape is True, tries to find a shape as a subshape of top-level simple shapes Returns False if nothing is found
        	:param S:
        	:type S: TopoDS_Shape
        	:param L:
        	:type L: TDF_Label
        	:param findInstance: default value is Standard_True
        	:type findInstance: bool
        	:param findComponent: default value is Standard_True
        	:type findComponent: bool
        	:param findSubshape: default value is Standard_True
        	:type findSubshape: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Search(self, *args)


    def SearchUsingMap(self, *args) -> "Standard_Boolean":
        """
        :param S:
        	:type S: TopoDS_Shape
        	:param L:
        	:type L: TDF_Label
        	:param findWithoutLoc:
        	:type findWithoutLoc: bool
        	:param findSubshape:
        	:type findSubshape: bool
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SearchUsingMap(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_ShapeTool >":
        """
        * Create (if not exist) ShapeTool from XCAFDoc on <L>.
        	:param L:
        	:type L: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_ShapeTool>
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Set(*args)

    Set = staticmethod(Set)

    def SetAutoNaming(*args) -> "void":
        """
        * Sets auto-naming mode to <V>. If True then for added shapes, links, assemblies and SHUO's, the TDataStd_Name attribute is automatically added. For shapes it contains a shape type (e.g. 'SOLID', 'SHELL', etc); for links it has a form '=>[0:1:1:2]' (where a tag is a label containing a shape without a location); for assemblies it is 'ASSEMBLY', and 'SHUO' for SHUO's. This setting is global; it cannot be made a member function as it is used by static methods as well. By default, auto-naming is enabled. See also AutoNaming().
        	:param V:
        	:type V: bool
        	:rtype: void
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetAutoNaming(*args)

    SetAutoNaming = staticmethod(SetAutoNaming)

    def SetExternRefs(self, *args) -> "void":
        """
        * Sets the names of references on the no-step files
        	:param SHAS:
        	:type SHAS: TColStd_SequenceOfHAsciiString
        	:rtype: TDF_Label
        * Sets the names of references on the no-step files
        	:param L:
        	:type L: TDF_Label
        	:param SHAS:
        	:type SHAS: TColStd_SequenceOfHAsciiString
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetExternRefs(self, *args)


    def SetInstanceSHUO(self, *args) -> "opencascade::handle< XCAFDoc_GraphNode >":
        """
        * Search for the component shape by labelks path and set SHUO structure for founded label structure Returns null attribute if no component in any assembly found.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: opencascade::handle<XCAFDoc_GraphNode>
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetInstanceSHUO(self, *args)


    def SetSHUO(self, *args) -> "Standard_Boolean":
        """
        * Sets the SHUO structure between upper_usage and next_usage create multy-level (if number of labels > 2) SHUO from first to last Initialise out <MainSHUOAttr> by main upper_usage SHUO attribute. Returns False if some of labels in not component label
        	:param Labels:
        	:type Labels: TDF_LabelSequence
        	:param MainSHUOAttr:
        	:type MainSHUOAttr: XCAFDoc_GraphNode
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetSHUO(self, *args)


    def SetShape(self, *args) -> "void":
        """
        * Sets representation (TopoDS_Shape) for top-level shape.
        	:param L:
        	:type L: TDF_Label
        	:param S:
        	:type S: TopoDS_Shape
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetShape(self, *args)


    def UpdateAssemblies(self, *args) -> "void":
        """
        * Top-down update for all assembly compounds stored in the document.
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ShapeTool_UpdateAssemblies(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty tool Creates a tool to work with a document <Doc> Attaches to label XCAFDoc::LabelShapes()
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_ShapeTool_swiginit(self, _XCAFDoc.new_XCAFDoc_ShapeTool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_ShapeTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_ShapeTool
XCAFDoc_ShapeTool.AddComponent = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_AddComponent, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.AddShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_AddShape, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.AddSubShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_AddSubShape, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.BaseLabel = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_BaseLabel, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.ComputeShapes = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_ComputeShapes, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.ComputeSimpleShapes = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_ComputeSimpleShapes, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.Dump = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_Dump, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_DumpToString, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.Expand = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_Expand, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.FindComponent = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_FindComponent, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.FindMainShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_FindMainShape, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.FindMainShapeUsingMap = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_FindMainShapeUsingMap, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.FindShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_FindShape, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.FindSubShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_FindSubShape, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.GetAllSHUOInstances = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_GetAllSHUOInstances, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.GetFreeShapes = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_GetFreeShapes, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.GetNamedProperties = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_GetNamedProperties, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.GetSHUOInstance = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_GetSHUOInstance, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.GetShapes = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_GetShapes, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.Init = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_Init, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.IsSubShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_IsSubShape, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.IsTopLevel = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_IsTopLevel, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.NewShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_NewShape, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.RemoveComponent = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_RemoveComponent, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.RemoveSHUO = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_RemoveSHUO, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.RemoveShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_RemoveShape, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.Search = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_Search, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.SearchUsingMap = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_SearchUsingMap, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.SetExternRefs = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_SetExternRefs, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.SetInstanceSHUO = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_SetInstanceSHUO, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.SetSHUO = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_SetSHUO, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.SetShape = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_SetShape, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool.UpdateAssemblies = new_instancemethod(_XCAFDoc.XCAFDoc_ShapeTool_UpdateAssemblies, None, XCAFDoc_ShapeTool)
XCAFDoc_ShapeTool_swigregister = _XCAFDoc.XCAFDoc_ShapeTool_swigregister
XCAFDoc_ShapeTool_swigregister(XCAFDoc_ShapeTool)

def XCAFDoc_ShapeTool_AutoNaming(*args) -> "Standard_Boolean":
    """
    * Returns current auto-naming mode. See SetAutoNaming() for description.
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_AutoNaming(*args)

def XCAFDoc_ShapeTool_DumpShape(*args) -> "void":
    """
    * Print to std::ostream <theDumpLog> type of shape found on <L> label and the entry of <L>, with <level> tabs before. If <deep>, print also TShape and Location addresses
    	:param theDumpLog:
    	:type theDumpLog: Standard_OStream
    	:param L:
    	:type L: TDF_Label
    	:param level: default value is 0
    	:type level: int
    	:param deep: default value is Standard_False
    	:type deep: bool
    	:rtype: void
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_DumpShape(*args)

def XCAFDoc_ShapeTool_FindSHUO(*args) -> "Standard_Boolean":
    """
    * Searchs the SHUO by labels of components from upper_usage componet to next_usage Returns null attribute if no SHUO found
    	:param Labels:
    	:type Labels: TDF_LabelSequence
    	:param theSHUOAttr:
    	:type theSHUOAttr: XCAFDoc_GraphNode
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_FindSHUO(*args)

def XCAFDoc_ShapeTool_GetAllComponentSHUO(*args) -> "Standard_Boolean":
    """
    * Returns founded SHUO GraphNodes of indicated component Returns false in other case
    	:param CompLabel:
    	:type CompLabel: TDF_Label
    	:param SHUOAttrs:
    	:type SHUOAttrs: TDF_AttributeSequence
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetAllComponentSHUO(*args)

def XCAFDoc_ShapeTool_GetComponents(*args) -> "Standard_Boolean":
    """
    * Returns list of components of assembly Returns False if label is not assembly
    	:param L:
    	:type L: TDF_Label
    	:param Labels:
    	:type Labels: TDF_LabelSequence
    	:param getsubchilds: default value is Standard_False
    	:type getsubchilds: bool
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetComponents(*args)

def XCAFDoc_ShapeTool_GetExternRefs(*args) -> "void":
    """
    * Gets the names of references on the no-step files
    	:param L:
    	:type L: TDF_Label
    	:param SHAS:
    	:type SHAS: TColStd_SequenceOfHAsciiString
    	:rtype: void
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetExternRefs(*args)

def XCAFDoc_ShapeTool_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_ShapeTool_GetID(*args)

def XCAFDoc_ShapeTool_GetLocation(*args) -> "TopLoc_Location":
    """
    * Returns location of instance
    	:param L:
    	:type L: TDF_Label
    	:rtype: TopLoc_Location
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetLocation(*args)

def XCAFDoc_ShapeTool_GetReferredShape(*args) -> "Standard_Boolean":
    """
    * Returns label which corresponds to a shape referred by L Returns False if label is not reference
    	:param L:
    	:type L: TDF_Label
    	:param Label:
    	:type Label: TDF_Label
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetReferredShape(*args)

def XCAFDoc_ShapeTool_GetSHUO(*args) -> "Standard_Boolean":
    """
    * Returns founded SHUO GraphNode attribute <aSHUOAttr> Returns false in other case
    	:param SHUOLabel:
    	:type SHUOLabel: TDF_Label
    	:param aSHUOAttr:
    	:type aSHUOAttr: XCAFDoc_GraphNode
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUO(*args)

def XCAFDoc_ShapeTool_GetSHUONextUsage(*args) -> "Standard_Boolean":
    """
    * Returns the sequence of labels of SHUO attributes, which is next_usage for this upper_usage SHUO attribute (that indicated by label) NOTE: returns next_usages only on one level (not recurse) NOTE: do not clear the sequence before filling
    	:param UpperUsageL:
    	:type UpperUsageL: TDF_Label
    	:param Labels:
    	:type Labels: TDF_LabelSequence
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUONextUsage(*args)

def XCAFDoc_ShapeTool_GetSHUOUpperUsage(*args) -> "Standard_Boolean":
    """
    * Returns the sequence of labels of SHUO attributes, which is upper_usage for this next_usage SHUO attribute (that indicated by label) NOTE: returns upper_usages only on one level (not recurse) NOTE: do not clear the sequence before filling
    	:param NextUsageL:
    	:type NextUsageL: TDF_Label
    	:param Labels:
    	:type Labels: TDF_LabelSequence
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUOUpperUsage(*args)

def XCAFDoc_ShapeTool_GetShape(*args) -> "TopoDS_Shape":
    """
    * To get TopoDS_Shape from shape's label For component, returns new shape with correct location Returns False if label does not contain shape
    	:param L:
    	:type L: TDF_Label
    	:param S:
    	:type S: TopoDS_Shape
    	:rtype: bool
    * To get TopoDS_Shape from shape's label For component, returns new shape with correct location Returns Null shape if label does not contain shape
    	:param L:
    	:type L: TDF_Label
    	:rtype: TopoDS_Shape
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetShape(*args)

def XCAFDoc_ShapeTool_GetSubShapes(*args) -> "Standard_Boolean":
    """
    * Returns list of labels identifying subshapes of the given shape Returns False if no subshapes are placed on that label
    	:param L:
    	:type L: TDF_Label
    	:param Labels:
    	:type Labels: TDF_LabelSequence
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetSubShapes(*args)

def XCAFDoc_ShapeTool_GetUsers(*args) -> "Standard_Integer":
    """
    * Returns list of labels which refer shape L as component Returns number of users (0 if shape is free)
    	:param L:
    	:type L: TDF_Label
    	:param Labels:
    	:type Labels: TDF_LabelSequence
    	:param getsubchilds: default value is Standard_False
    	:type getsubchilds: bool
    	:rtype: int
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetUsers(*args)

def XCAFDoc_ShapeTool_IsAssembly(*args) -> "Standard_Boolean":
    """
    * Returns True if the label is a label of assembly, i.e. contains sublabels which are assembly components This is relevant only if IsShape() is True
    	:param L:
    	:type L: TDF_Label
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsAssembly(*args)

def XCAFDoc_ShapeTool_IsComponent(*args) -> "Standard_Boolean":
    """
    * Return true if <L> is reference serving as component of assembly
    	:param L:
    	:type L: TDF_Label
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsComponent(*args)

def XCAFDoc_ShapeTool_IsCompound(*args) -> "Standard_Boolean":
    """
    * Returns True if the label is a label of compound, i.e. contains some sublabels This is relevant only if IsShape() is True
    	:param L:
    	:type L: TDF_Label
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsCompound(*args)

def XCAFDoc_ShapeTool_IsExternRef(*args) -> "Standard_Boolean":
    """
    * Returns True if the label is a label of external references, i.e. there are some reference on the no-step files, which are described in document only their names
    	:param L:
    	:type L: TDF_Label
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsExternRef(*args)

def XCAFDoc_ShapeTool_IsFree(*args) -> "Standard_Boolean":
    """
    * Returns True if the label is not used by any assembly, i.e. contains sublabels which are assembly components This is relevant only if IsShape() is True (There is no Father TreeNode on this <L>)
    	:param L:
    	:type L: TDF_Label
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsFree(*args)

def XCAFDoc_ShapeTool_IsReference(*args) -> "Standard_Boolean":
    """
    * Return true if <L> is a located instance of other shape i.e. reference
    	:param L:
    	:type L: TDF_Label
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsReference(*args)

def XCAFDoc_ShapeTool_IsShape(*args) -> "Standard_Boolean":
    """
    * Returns True if the label represents a shape (simple shape, assembly or reference)
    	:param L:
    	:type L: TDF_Label
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsShape(*args)

def XCAFDoc_ShapeTool_IsSimpleShape(*args) -> "Standard_Boolean":
    """
    * Returns True if the label is a label of simple shape
    	:param L:
    	:type L: TDF_Label
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsSimpleShape(*args)

def XCAFDoc_ShapeTool_NbComponents(*args) -> "Standard_Integer":
    """
    * Returns number of Assembles components
    	:param L:
    	:type L: TDF_Label
    	:param getsubchilds: default value is Standard_False
    	:type getsubchilds: bool
    	:rtype: int
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_NbComponents(*args)

def XCAFDoc_ShapeTool_Set(*args) -> "opencascade::handle< XCAFDoc_ShapeTool >":
    """
    * Create (if not exist) ShapeTool from XCAFDoc on <L>.
    	:param L:
    	:type L: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_ShapeTool>
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_Set(*args)

def XCAFDoc_ShapeTool_SetAutoNaming(*args) -> "void":
    """
    * Sets auto-naming mode to <V>. If True then for added shapes, links, assemblies and SHUO's, the TDataStd_Name attribute is automatically added. For shapes it contains a shape type (e.g. 'SOLID', 'SHELL', etc); for links it has a form '=>[0:1:1:2]' (where a tag is a label containing a shape without a location); for assemblies it is 'ASSEMBLY', and 'SHUO' for SHUO's. This setting is global; it cannot be made a member function as it is used by static methods as well. By default, auto-naming is enabled. See also AutoNaming().
    	:param V:
    	:type V: bool
    	:rtype: void
    """
    return _XCAFDoc.XCAFDoc_ShapeTool_SetAutoNaming(*args)

class XCAFDoc_View(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_View_GetID(*args)

    GetID = staticmethod(GetID)

    def GetObject(self, *args) -> "opencascade::handle< XCAFView_Object >":
        """
        * Returns view object data taken from the paren's label and its sub-labels.
        	:rtype: opencascade::handle<XCAFView_Object>
        """
        return _XCAFDoc.XCAFDoc_View_GetObject(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_View >":
        """
        :param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_View>
        """
        return _XCAFDoc.XCAFDoc_View_Set(*args)

    Set = staticmethod(Set)

    def SetObject(self, *args) -> "void":
        """
        * Updates parent's label and its sub-labels with data taken from theViewObject. Old data associated with the label will be lost.
        	:param theViewObject:
        	:type theViewObject: XCAFView_Object
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_View_SetObject(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_View_swiginit(self, _XCAFDoc.new_XCAFDoc_View(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_View_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_View
XCAFDoc_View.GetObject = new_instancemethod(_XCAFDoc.XCAFDoc_View_GetObject, None, XCAFDoc_View)
XCAFDoc_View.SetObject = new_instancemethod(_XCAFDoc.XCAFDoc_View_SetObject, None, XCAFDoc_View)
XCAFDoc_View_swigregister = _XCAFDoc.XCAFDoc_View_swigregister
XCAFDoc_View_swigregister(XCAFDoc_View)

def XCAFDoc_View_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_View_GetID(*args)

def XCAFDoc_View_Set(*args) -> "opencascade::handle< XCAFDoc_View >":
    """
    :param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_View>
    """
    return _XCAFDoc.XCAFDoc_View_Set(*args)

class XCAFDoc_ViewTool(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddView(self, *args) -> "TDF_Label":
        """
        * Adds a view definition to a View table and returns its label
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ViewTool_AddView(self, *args)


    def BaseLabel(self, *args) -> "TDF_Label":
        """
        * Returns the label under which Views are stored
        	:rtype: TDF_Label
        """
        return _XCAFDoc.XCAFDoc_ViewTool_BaseLabel(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_ViewTool_GetID(*args)

    GetID = staticmethod(GetID)

    def GetRefAnnotationLabel(self, *args) -> "Standard_Boolean":
        """
        * Returns Annotation labels defined for label theViewL Returns False if the theViewL is not in View table
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:param theAnnotationLabels:
        	:type theAnnotationLabels: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetRefAnnotationLabel(self, *args)


    def GetRefClippingPlaneLabel(self, *args) -> "Standard_Boolean":
        """
        * Returns ClippingPlane labels defined for label theViewL Returns False if the theViewL is not in View table
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:param theClippingPlaneLabels:
        	:type theClippingPlaneLabels: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetRefClippingPlaneLabel(self, *args)


    def GetRefGDTLabel(self, *args) -> "Standard_Boolean":
        """
        * Returns GDT labels defined for label theViewL Returns False if the theViewL is not in View table
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:param theGDTLabels:
        	:type theGDTLabels: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetRefGDTLabel(self, *args)


    def GetRefNoteLabel(self, *args) -> "Standard_Boolean":
        """
        * Returns Notes labels defined for label theViewL Returns False if the theViewL is not in View table
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:param theNoteLabels:
        	:type theNoteLabels: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetRefNoteLabel(self, *args)


    def GetRefShapeLabel(self, *args) -> "Standard_Boolean":
        """
        * Returns shape labels defined for label theViewL Returns False if the theViewL is not in View table
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:param theShapeLabels:
        	:type theShapeLabels: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetRefShapeLabel(self, *args)


    def GetViewLabels(self, *args) -> "void":
        """
        * Returns a sequence of View labels currently stored in the View table
        	:param theLabels:
        	:type theLabels: TDF_LabelSequence
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabels(self, *args)


    def GetViewLabelsForAnnotation(self, *args) -> "Standard_Boolean":
        """
        * Returns all View labels defined for label AnnotationL
        	:param theAnnotationL:
        	:type theAnnotationL: TDF_Label
        	:param theViews:
        	:type theViews: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForAnnotation(self, *args)


    def GetViewLabelsForClippingPlane(self, *args) -> "Standard_Boolean":
        """
        * Returns all View labels defined for label ClippingPlaneL
        	:param theClippingPlaneL:
        	:type theClippingPlaneL: TDF_Label
        	:param theViews:
        	:type theViews: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForClippingPlane(self, *args)


    def GetViewLabelsForGDT(self, *args) -> "Standard_Boolean":
        """
        * Returns all View labels defined for label GDTL
        	:param theGDTL:
        	:type theGDTL: TDF_Label
        	:param theViews:
        	:type theViews: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForGDT(self, *args)


    def GetViewLabelsForNote(self, *args) -> "Standard_Boolean":
        """
        * Returns all View labels defined for label NoteL
        	:param theNoteL:
        	:type theNoteL: TDF_Label
        	:param theViews:
        	:type theViews: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForNote(self, *args)


    def GetViewLabelsForShape(self, *args) -> "Standard_Boolean":
        """
        * Returns all View labels defined for label ShapeL
        	:param theShapeL:
        	:type theShapeL: TDF_Label
        	:param theViews:
        	:type theViews: TDF_LabelSequence
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForShape(self, *args)


    def IsLocked(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the given View is marked as locked
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_IsLocked(self, *args)


    def IsView(self, *args) -> "Standard_Boolean":
        """
        * Returns True if label belongs to a View table and is a View definition
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_ViewTool_IsView(self, *args)


    def Lock(self, *args) -> "void":
        """
        * Mark the given View as locked
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ViewTool_Lock(self, *args)


    def RemoveView(self, *args) -> "void":
        """
        * Remove View
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ViewTool_RemoveView(self, *args)


    def Set(*args) -> "opencascade::handle< XCAFDoc_ViewTool >":
        """
        * Creates (if not exist) ViewTool.
        	:param L:
        	:type L: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_ViewTool>
        """
        return _XCAFDoc.XCAFDoc_ViewTool_Set(*args)

    Set = staticmethod(Set)

    def SetClippingPlanes(self, *args) -> "void":
        """
        * Set Clipping planes to given View
        	:param theClippingPlaneLabels:
        	:type theClippingPlaneLabels: TDF_LabelSequence
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ViewTool_SetClippingPlanes(self, *args)


    def SetView(self, *args) -> "void":
        """
        * Sets a link with GUID
        	:param theShapes:
        	:type theShapes: TDF_LabelSequence
        	:param theGDTs:
        	:type theGDTs: TDF_LabelSequence
        	:param theClippingPlanes:
        	:type theClippingPlanes: TDF_LabelSequence
        	:param theNotes:
        	:type theNotes: TDF_LabelSequence
        	:param theAnnotations:
        	:type theAnnotations: TDF_LabelSequence
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:rtype: None
        * Sets a link with GUID
        	:param theShapes:
        	:type theShapes: TDF_LabelSequence
        	:param theGDTs:
        	:type theGDTs: TDF_LabelSequence
        	:param theClippingPlanes:
        	:type theClippingPlanes: TDF_LabelSequence
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:rtype: None
        * Sets a link with GUID
        	:param theShapes:
        	:type theShapes: TDF_LabelSequence
        	:param theGDTs:
        	:type theGDTs: TDF_LabelSequence
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ViewTool_SetView(self, *args)


    def Unlock(self, *args) -> "void":
        """
        * Unlock the given View
        	:param theViewL:
        	:type theViewL: TDF_Label
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_ViewTool_Unlock(self, *args)


    def __init__(self, *args):
        """:rtype: None"""
        _XCAFDoc.XCAFDoc_ViewTool_swiginit(self, _XCAFDoc.new_XCAFDoc_ViewTool(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_ViewTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_ViewTool
XCAFDoc_ViewTool.AddView = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_AddView, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.BaseLabel = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_BaseLabel, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.GetRefAnnotationLabel = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_GetRefAnnotationLabel, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.GetRefClippingPlaneLabel = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_GetRefClippingPlaneLabel, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.GetRefGDTLabel = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_GetRefGDTLabel, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.GetRefNoteLabel = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_GetRefNoteLabel, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.GetRefShapeLabel = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_GetRefShapeLabel, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.GetViewLabels = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_GetViewLabels, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.GetViewLabelsForAnnotation = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForAnnotation, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.GetViewLabelsForClippingPlane = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForClippingPlane, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.GetViewLabelsForGDT = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForGDT, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.GetViewLabelsForNote = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForNote, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.GetViewLabelsForShape = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForShape, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.IsLocked = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_IsLocked, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.IsView = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_IsView, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.Lock = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_Lock, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.RemoveView = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_RemoveView, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.SetClippingPlanes = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_SetClippingPlanes, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.SetView = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_SetView, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool.Unlock = new_instancemethod(_XCAFDoc.XCAFDoc_ViewTool_Unlock, None, XCAFDoc_ViewTool)
XCAFDoc_ViewTool_swigregister = _XCAFDoc.XCAFDoc_ViewTool_swigregister
XCAFDoc_ViewTool_swigregister(XCAFDoc_ViewTool)

def XCAFDoc_ViewTool_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_ViewTool_GetID(*args)

def XCAFDoc_ViewTool_Set(*args) -> "opencascade::handle< XCAFDoc_ViewTool >":
    """
    * Creates (if not exist) ViewTool.
    	:param L:
    	:type L: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_ViewTool>
    """
    return _XCAFDoc.XCAFDoc_ViewTool_Set(*args)

class XCAFDoc_Volume(OCC.Core.TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DumpToString(self) -> "std::string":
        """DumpToString(XCAFDoc_Volume self) -> std::string"""
        return _XCAFDoc.XCAFDoc_Volume_DumpToString(self)


    def Get(*args) -> "Standard_Real &":
        """
        :rtype: float
        * Returns volume as argument returns false if no such attribute at the <label>
        	:param label:
        	:type label: TDF_Label
        	:param vol:
        	:type vol: float
        	:rtype: bool
        """
        return _XCAFDoc.XCAFDoc_Volume_Get(*args)

    Get = staticmethod(Get)

    def GetID(*args) -> "Standard_GUID const &":
        """:rtype: Standard_GUID"""
        return _XCAFDoc.XCAFDoc_Volume_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args) -> "opencascade::handle< XCAFDoc_Volume >":
        """
        * Sets a value of volume
        	:param vol:
        	:type vol: float
        	:rtype: None
        * Find, or create, an Volume attribute and set its value
        	:param label:
        	:type label: TDF_Label
        	:param vol:
        	:type vol: float
        	:rtype: opencascade::handle<XCAFDoc_Volume>
        """
        return _XCAFDoc.XCAFDoc_Volume_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        * class methods =============
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_Volume_swiginit(self, _XCAFDoc.new_XCAFDoc_Volume(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_Volume_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Volume
XCAFDoc_Volume.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_Volume_DumpToString, None, XCAFDoc_Volume)
XCAFDoc_Volume_swigregister = _XCAFDoc.XCAFDoc_Volume_swigregister
XCAFDoc_Volume_swigregister(XCAFDoc_Volume)

def XCAFDoc_Volume_Get(*args) -> "Standard_Real &":
    """
    :rtype: float
    * Returns volume as argument returns false if no such attribute at the <label>
    	:param label:
    	:type label: TDF_Label
    	:param vol:
    	:type vol: float
    	:rtype: bool
    """
    return _XCAFDoc.XCAFDoc_Volume_Get(*args)

def XCAFDoc_Volume_GetID(*args) -> "Standard_GUID const &":
    """:rtype: Standard_GUID"""
    return _XCAFDoc.XCAFDoc_Volume_GetID(*args)

def XCAFDoc_Volume_Set(*args) -> "opencascade::handle< XCAFDoc_Volume >":
    """
    * Sets a value of volume
    	:param vol:
    	:type vol: float
    	:rtype: None
    * Find, or create, an Volume attribute and set its value
    	:param label:
    	:type label: TDF_Label
    	:param vol:
    	:type vol: float
    	:rtype: opencascade::handle<XCAFDoc_Volume>
    """
    return _XCAFDoc.XCAFDoc_Volume_Set(*args)

class XCAFDoc_NoteBinData(XCAFDoc_Note):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Data(self, *args) -> "opencascade::handle< TColStd_HArray1OfByte > const &":
        """
        * Returns byte data array.
        	:rtype: opencascade::handle<TColStd_HArray1OfByte>
        """
        return _XCAFDoc.XCAFDoc_NoteBinData_Data(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(XCAFDoc_NoteBinData self) -> std::string"""
        return _XCAFDoc.XCAFDoc_NoteBinData_DumpToString(self)


    def Get(*args) -> "opencascade::handle< XCAFDoc_NoteBinData >":
        """
        * Finds a binary data attribute on the given label and returns it, if it is found
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_NoteBinData>
        """
        return _XCAFDoc.XCAFDoc_NoteBinData_Get(*args)

    Get = staticmethod(Get)

    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns default attribute GUID
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.XCAFDoc_NoteBinData_GetID(*args)

    GetID = staticmethod(GetID)

    def MIMEtype(self, *args) -> "TCollection_AsciiString const &":
        """
        * Returns data MIME type.
        	:rtype: TCollection_AsciiString
        """
        return _XCAFDoc.XCAFDoc_NoteBinData_MIMEtype(self, *args)


    def Set(self, *args) -> "void":
        """
        * @name Set attribute functions. @{ Create (if not exist) a binary note with data loaded from a binary file. \param [in] theLabel - label to add the attribute. \param [in] theUserName - the name of the user, who created the note. \param [in] theTimeStamp - creation timestamp of the note. \param [in] theTitle - file title. \param [in] theMIMEtype - MIME type of the file. \param [in] theFile - input binary file. eturn A handle to the attribute instance.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theUserName:
        	:type theUserName: TCollection_ExtendedString
        	:param theTimeStamp:
        	:type theTimeStamp: TCollection_ExtendedString
        	:param theTitle:
        	:type theTitle: TCollection_ExtendedString
        	:param theMIMEtype:
        	:type theMIMEtype: TCollection_AsciiString
        	:param theFile:
        	:type theFile: OSD_File
        	:rtype: opencascade::handle<XCAFDoc_NoteBinData>
        * Create (if not exist) a binary note byte data array. \param [in] theLabel - label to add the attribute. \param [in] theUserName - the name of the user, who created the note. \param [in] theTimeStamp - creation timestamp of the note. \param [in] theTitle - data title. \param [in] theMIMEtype - MIME type of data. \param [in] theData - byte data array. eturn A handle to the attribute instance.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theUserName:
        	:type theUserName: TCollection_ExtendedString
        	:param theTimeStamp:
        	:type theTimeStamp: TCollection_ExtendedString
        	:param theTitle:
        	:type theTitle: TCollection_ExtendedString
        	:param theMIMEtype:
        	:type theMIMEtype: TCollection_AsciiString
        	:param theData:
        	:type theData: TColStd_HArray1OfByte
        	:rtype: opencascade::handle<XCAFDoc_NoteBinData>
        * @name Set attribute data functions. @{ Sets title, MIME type and data from a binary file. \param [in] theTitle - file title. \param [in] theMIMEtype - MIME type of the file. \param [in] theFile - input binary file.
        	:param theTitle:
        	:type theTitle: TCollection_ExtendedString
        	:param theMIMEtype:
        	:type theMIMEtype: TCollection_AsciiString
        	:param theFile:
        	:type theFile: OSD_File
        	:rtype: bool
        * Sets title, MIME type and data from a byte array. \param [in] theTitle - data title. \param [in] theMIMEtype - MIME type of data. \param [in] theData - byte data array.
        	:param theTitle:
        	:type theTitle: TCollection_ExtendedString
        	:param theMIMEtype:
        	:type theMIMEtype: TCollection_AsciiString
        	:param theData:
        	:type theData: TColStd_HArray1OfByte
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_NoteBinData_Set(self, *args)


    def Size(self, *args) -> "Standard_Integer":
        """
        * Size of data in bytes.
        	:rtype: int
        """
        return _XCAFDoc.XCAFDoc_NoteBinData_Size(self, *args)


    def Title(self, *args) -> "TCollection_ExtendedString const &":
        """
        * @} Returns the note title.
        	:rtype: TCollection_ExtendedString
        """
        return _XCAFDoc.XCAFDoc_NoteBinData_Title(self, *args)


    def __init__(self, *args):
        """
        * @} Creates an empty binary data note.
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_NoteBinData_swiginit(self, _XCAFDoc.new_XCAFDoc_NoteBinData(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_NoteBinData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_NoteBinData
XCAFDoc_NoteBinData.Data = new_instancemethod(_XCAFDoc.XCAFDoc_NoteBinData_Data, None, XCAFDoc_NoteBinData)
XCAFDoc_NoteBinData.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_NoteBinData_DumpToString, None, XCAFDoc_NoteBinData)
XCAFDoc_NoteBinData.MIMEtype = new_instancemethod(_XCAFDoc.XCAFDoc_NoteBinData_MIMEtype, None, XCAFDoc_NoteBinData)
XCAFDoc_NoteBinData.Set = new_instancemethod(_XCAFDoc.XCAFDoc_NoteBinData_Set, None, XCAFDoc_NoteBinData)
XCAFDoc_NoteBinData.Size = new_instancemethod(_XCAFDoc.XCAFDoc_NoteBinData_Size, None, XCAFDoc_NoteBinData)
XCAFDoc_NoteBinData.Title = new_instancemethod(_XCAFDoc.XCAFDoc_NoteBinData_Title, None, XCAFDoc_NoteBinData)
XCAFDoc_NoteBinData_swigregister = _XCAFDoc.XCAFDoc_NoteBinData_swigregister
XCAFDoc_NoteBinData_swigregister(XCAFDoc_NoteBinData)

def XCAFDoc_NoteBinData_Get(*args) -> "opencascade::handle< XCAFDoc_NoteBinData >":
    """
    * Finds a binary data attribute on the given label and returns it, if it is found
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_NoteBinData>
    """
    return _XCAFDoc.XCAFDoc_NoteBinData_Get(*args)

def XCAFDoc_NoteBinData_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns default attribute GUID
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.XCAFDoc_NoteBinData_GetID(*args)

class XCAFDoc_NoteComment(XCAFDoc_Note):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Comment(self, *args) -> "TCollection_ExtendedString const &":
        """
        * Returns the comment text.
        	:rtype: TCollection_ExtendedString
        """
        return _XCAFDoc.XCAFDoc_NoteComment_Comment(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(XCAFDoc_NoteComment self) -> std::string"""
        return _XCAFDoc.XCAFDoc_NoteComment_DumpToString(self)


    def Get(*args) -> "opencascade::handle< XCAFDoc_NoteComment >":
        """
        * Finds a reference attribute on the given label and returns it, if it is found
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_NoteComment>
        """
        return _XCAFDoc.XCAFDoc_NoteComment_Get(*args)

    Get = staticmethod(Get)

    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns default attribute GUID
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.XCAFDoc_NoteComment_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args) -> "void":
        """
        * Create (if not exist) a comment note on the given label. \param [in] theLabel - note label. \param [in] theUserName - the name of the user, who created the note. \param [in] theTimeStamp - creation timestamp of the note. \param [in] theComment - comment text.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theUserName:
        	:type theUserName: TCollection_ExtendedString
        	:param theTimeStamp:
        	:type theTimeStamp: TCollection_ExtendedString
        	:param theComment:
        	:type theComment: TCollection_ExtendedString
        	:rtype: opencascade::handle<XCAFDoc_NoteComment>
        * Sets the comment text.
        	:param theComment:
        	:type theComment: TCollection_ExtendedString
        	:rtype: None
        """
        return _XCAFDoc.XCAFDoc_NoteComment_Set(self, *args)


    def __init__(self, *args):
        """
        * Creates an empty comment note.
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_NoteComment_swiginit(self, _XCAFDoc.new_XCAFDoc_NoteComment(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_NoteComment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_NoteComment
XCAFDoc_NoteComment.Comment = new_instancemethod(_XCAFDoc.XCAFDoc_NoteComment_Comment, None, XCAFDoc_NoteComment)
XCAFDoc_NoteComment.DumpToString = new_instancemethod(_XCAFDoc.XCAFDoc_NoteComment_DumpToString, None, XCAFDoc_NoteComment)
XCAFDoc_NoteComment.Set = new_instancemethod(_XCAFDoc.XCAFDoc_NoteComment_Set, None, XCAFDoc_NoteComment)
XCAFDoc_NoteComment_swigregister = _XCAFDoc.XCAFDoc_NoteComment_swigregister
XCAFDoc_NoteComment_swigregister(XCAFDoc_NoteComment)

def XCAFDoc_NoteComment_Get(*args) -> "opencascade::handle< XCAFDoc_NoteComment >":
    """
    * Finds a reference attribute on the given label and returns it, if it is found
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_NoteComment>
    """
    return _XCAFDoc.XCAFDoc_NoteComment_Get(*args)

def XCAFDoc_NoteComment_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns default attribute GUID
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.XCAFDoc_NoteComment_GetID(*args)

class XCAFDoc_NoteBalloon(XCAFDoc_NoteComment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Get(*args) -> "opencascade::handle< XCAFDoc_NoteBalloon >":
        """
        * Finds a reference attribute on the given label and returns it, if it is found
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:rtype: opencascade::handle<XCAFDoc_NoteBalloon>
        """
        return _XCAFDoc.XCAFDoc_NoteBalloon_Get(*args)

    Get = staticmethod(Get)

    def GetID(*args) -> "Standard_GUID const &":
        """
        * Returns default attribute GUID
        	:rtype: Standard_GUID
        """
        return _XCAFDoc.XCAFDoc_NoteBalloon_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args) -> "opencascade::handle< XCAFDoc_NoteBalloon >":
        """
        * Create (if not exist) a comment note on the given label. \param [in] theLabel - note label. \param [in] theUserName - the name of the user, who created the note. \param [in] theTimeStamp - creation timestamp of the note. \param [in] theComment - comment text.
        	:param theLabel:
        	:type theLabel: TDF_Label
        	:param theUserName:
        	:type theUserName: TCollection_ExtendedString
        	:param theTimeStamp:
        	:type theTimeStamp: TCollection_ExtendedString
        	:param theComment:
        	:type theComment: TCollection_ExtendedString
        	:rtype: opencascade::handle<XCAFDoc_NoteBalloon>
        """
        return _XCAFDoc.XCAFDoc_NoteBalloon_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        * Creates an empty comment note.
        	:rtype: None
        """
        _XCAFDoc.XCAFDoc_NoteBalloon_swiginit(self, _XCAFDoc.new_XCAFDoc_NoteBalloon(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XCAFDoc_NoteBalloon_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_NoteBalloon
XCAFDoc_NoteBalloon_swigregister = _XCAFDoc.XCAFDoc_NoteBalloon_swigregister
XCAFDoc_NoteBalloon_swigregister(XCAFDoc_NoteBalloon)

def XCAFDoc_NoteBalloon_Get(*args) -> "opencascade::handle< XCAFDoc_NoteBalloon >":
    """
    * Finds a reference attribute on the given label and returns it, if it is found
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:rtype: opencascade::handle<XCAFDoc_NoteBalloon>
    """
    return _XCAFDoc.XCAFDoc_NoteBalloon_Get(*args)

def XCAFDoc_NoteBalloon_GetID(*args) -> "Standard_GUID const &":
    """
    * Returns default attribute GUID
    	:rtype: Standard_GUID
    """
    return _XCAFDoc.XCAFDoc_NoteBalloon_GetID(*args)

def XCAFDoc_NoteBalloon_Set(*args) -> "opencascade::handle< XCAFDoc_NoteBalloon >":
    """
    * Create (if not exist) a comment note on the given label. \param [in] theLabel - note label. \param [in] theUserName - the name of the user, who created the note. \param [in] theTimeStamp - creation timestamp of the note. \param [in] theComment - comment text.
    	:param theLabel:
    	:type theLabel: TDF_Label
    	:param theUserName:
    	:type theUserName: TCollection_ExtendedString
    	:param theTimeStamp:
    	:type theTimeStamp: TCollection_ExtendedString
    	:param theComment:
    	:type theComment: TCollection_ExtendedString
    	:rtype: opencascade::handle<XCAFDoc_NoteBalloon>
    """
    return _XCAFDoc.XCAFDoc_NoteBalloon_Set(*args)



