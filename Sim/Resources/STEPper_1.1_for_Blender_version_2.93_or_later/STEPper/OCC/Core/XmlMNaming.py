# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XmlMNaming module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xmlmnaming.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _XmlMNaming.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlMNaming')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlMNaming')
    _XmlMNaming = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlMNaming', [dirname(__file__)])
        except ImportError:
            import _XmlMNaming
            return _XmlMNaming
        try:
            _mod = imp.load_module('_XmlMNaming', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlMNaming = swig_import_helper()
    del swig_import_helper
else:
    import _XmlMNaming
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMNaming.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_XmlMNaming.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_XmlMNaming.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_XmlMNaming.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_XmlMNaming.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_XmlMNaming.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_XmlMNaming.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_XmlMNaming.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_XmlMNaming.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_XmlMNaming.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_XmlMNaming.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_XmlMNaming.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_XmlMNaming.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_XmlMNaming.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_XmlMNaming.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_XmlMNaming.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_XmlMNaming.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _XmlMNaming.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XmlMNaming.process_exception(error, method_name, class_name)
process_exception = _XmlMNaming.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.XmlMDF
import OCC.Core.Message
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc

def Handle_XmlMNaming_NamedShapeDriver_Create() -> "opencascade::handle< XmlMNaming_NamedShapeDriver >":
    return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_Create()
Handle_XmlMNaming_NamedShapeDriver_Create = _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_Create

def Handle_XmlMNaming_NamedShapeDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlMNaming_NamedShapeDriver >":
    return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_DownCast(t)
Handle_XmlMNaming_NamedShapeDriver_DownCast = _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_DownCast

def Handle_XmlMNaming_NamedShapeDriver_IsNull(t: 'opencascade::handle< XmlMNaming_NamedShapeDriver > const &') -> "bool":
    return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_IsNull(t)
Handle_XmlMNaming_NamedShapeDriver_IsNull = _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_IsNull

def Handle_XmlMNaming_NamingDriver_Create() -> "opencascade::handle< XmlMNaming_NamingDriver >":
    return _XmlMNaming.Handle_XmlMNaming_NamingDriver_Create()
Handle_XmlMNaming_NamingDriver_Create = _XmlMNaming.Handle_XmlMNaming_NamingDriver_Create

def Handle_XmlMNaming_NamingDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlMNaming_NamingDriver >":
    return _XmlMNaming.Handle_XmlMNaming_NamingDriver_DownCast(t)
Handle_XmlMNaming_NamingDriver_DownCast = _XmlMNaming.Handle_XmlMNaming_NamingDriver_DownCast

def Handle_XmlMNaming_NamingDriver_IsNull(t: 'opencascade::handle< XmlMNaming_NamingDriver > const &') -> "bool":
    return _XmlMNaming.Handle_XmlMNaming_NamingDriver_IsNull(t)
Handle_XmlMNaming_NamingDriver_IsNull = _XmlMNaming.Handle_XmlMNaming_NamingDriver_IsNull
class xmlmnaming(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args) -> "void":
        """
        * Adds the attribute drivers to <aDriverTable>.
        	:param aDriverTable:
        	:type aDriverTable: XmlMDF_ADriverTable
        	:param aMessageDriver:
        	:type aMessageDriver: Message_Messenger
        	:rtype: void
        """
        return _XmlMNaming.xmlmnaming_AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    __repr__ = _dumps_object


    def __init__(self):
        _XmlMNaming.xmlmnaming_swiginit(self, _XmlMNaming.new_xmlmnaming())
    __swig_destroy__ = _XmlMNaming.delete_xmlmnaming
xmlmnaming_swigregister = _XmlMNaming.xmlmnaming_swigregister
xmlmnaming_swigregister(xmlmnaming)

def xmlmnaming_AddDrivers(*args) -> "void":
    """
    * Adds the attribute drivers to <aDriverTable>.
    	:param aDriverTable:
    	:type aDriverTable: XmlMDF_ADriverTable
    	:param aMessageDriver:
    	:type aMessageDriver: Message_Messenger
    	:rtype: void
    """
    return _XmlMNaming.xmlmnaming_AddDrivers(*args)

class XmlMNaming_NamedShapeDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        * Clear myShapeSet
        	:rtype: None
        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_Clear(self, *args)


    def GetShapesLocations(self, *args) -> "TopTools_LocationSet &":
        """
        * get the format of topology
        	:rtype: TopTools_LocationSet
        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_GetShapesLocations(self, *args)


    def Paste(self, *args) -> "void":
        """
        :param theSource:
        	:type theSource: XmlObjMgt_Persistent
        	:param theTarget:
        	:type theTarget: TDF_Attribute
        	:param theRelocTable:
        	:type theRelocTable: XmlObjMgt_RRelocationTable
        	:rtype: bool
        :param theSource:
        	:type theSource: TDF_Attribute
        	:param theTarget:
        	:type theTarget: XmlObjMgt_Persistent
        	:param theRelocTable:
        	:type theRelocTable: XmlObjMgt_SRelocationTable
        	:rtype: void
        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_Paste(self, *args)


    def ReadShapeSection(self, *args) -> "void":
        """
        * Input the shapes from DOM element
        	:param anElement:
        	:type anElement: XmlObjMgt_Element
        	:rtype: None
        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_ReadShapeSection(self, *args)


    def WriteShapeSection(self, *args) -> "void":
        """
        * Output the shapes into DOM element
        	:param anElement:
        	:type anElement: XmlObjMgt_Element
        	:rtype: None
        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_WriteShapeSection(self, *args)


    def __init__(self, *args):
        """
        :param aMessageDriver:
        	:type aMessageDriver: Message_Messenger
        	:rtype: None
        """
        _XmlMNaming.XmlMNaming_NamedShapeDriver_swiginit(self, _XmlMNaming.new_XmlMNaming_NamedShapeDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlMNaming_NamedShapeDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_NamedShapeDriver
XmlMNaming_NamedShapeDriver.Clear = new_instancemethod(_XmlMNaming.XmlMNaming_NamedShapeDriver_Clear, None, XmlMNaming_NamedShapeDriver)
XmlMNaming_NamedShapeDriver.GetShapesLocations = new_instancemethod(_XmlMNaming.XmlMNaming_NamedShapeDriver_GetShapesLocations, None, XmlMNaming_NamedShapeDriver)
XmlMNaming_NamedShapeDriver.Paste = new_instancemethod(_XmlMNaming.XmlMNaming_NamedShapeDriver_Paste, None, XmlMNaming_NamedShapeDriver)
XmlMNaming_NamedShapeDriver.ReadShapeSection = new_instancemethod(_XmlMNaming.XmlMNaming_NamedShapeDriver_ReadShapeSection, None, XmlMNaming_NamedShapeDriver)
XmlMNaming_NamedShapeDriver.WriteShapeSection = new_instancemethod(_XmlMNaming.XmlMNaming_NamedShapeDriver_WriteShapeSection, None, XmlMNaming_NamedShapeDriver)
XmlMNaming_NamedShapeDriver_swigregister = _XmlMNaming.XmlMNaming_NamedShapeDriver_swigregister
XmlMNaming_NamedShapeDriver_swigregister(XmlMNaming_NamedShapeDriver)

class XmlMNaming_NamingDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Paste(self, *args) -> "void":
        """
        :param theSource:
        	:type theSource: XmlObjMgt_Persistent
        	:param theTarget:
        	:type theTarget: TDF_Attribute
        	:param theRelocTable:
        	:type theRelocTable: XmlObjMgt_RRelocationTable
        	:rtype: bool
        :param theSource:
        	:type theSource: TDF_Attribute
        	:param theTarget:
        	:type theTarget: XmlObjMgt_Persistent
        	:param theRelocTable:
        	:type theRelocTable: XmlObjMgt_SRelocationTable
        	:rtype: None
        """
        return _XmlMNaming.XmlMNaming_NamingDriver_Paste(self, *args)


    def __init__(self, *args):
        """
        :param aMessageDriver:
        	:type aMessageDriver: Message_Messenger
        	:rtype: None
        """
        _XmlMNaming.XmlMNaming_NamingDriver_swiginit(self, _XmlMNaming.new_XmlMNaming_NamingDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlMNaming_NamingDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_NamingDriver
XmlMNaming_NamingDriver.Paste = new_instancemethod(_XmlMNaming.XmlMNaming_NamingDriver_Paste, None, XmlMNaming_NamingDriver)
XmlMNaming_NamingDriver_swigregister = _XmlMNaming.XmlMNaming_NamingDriver_swigregister
XmlMNaming_NamingDriver_swigregister(XmlMNaming_NamingDriver)

class XmlMNaming_Shape1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Element(self, *args) -> "XmlObjMgt_Element const &":
        """
        * return myElement
        	:rtype: XmlObjMgt_Element
        """
        return _XmlMNaming.XmlMNaming_Shape1_Element(self, *args)


    def LocId(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _XmlMNaming.XmlMNaming_Shape1_LocId(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """:rtype: TopAbs_Orientation"""
        return _XmlMNaming.XmlMNaming_Shape1_Orientation(self, *args)


    def SetShape(self, *args) -> "void":
        """
        :param ID:
        	:type ID: int
        	:param LocID:
        	:type LocID: int
        	:param Orient:
        	:type Orient: TopAbs_Orientation
        	:rtype: None
        """
        return _XmlMNaming.XmlMNaming_Shape1_SetShape(self, *args)


    def SetVertex(self, *args) -> "void":
        """
        :param theVertex:
        	:type theVertex: TopoDS_Shape
        	:rtype: None
        """
        return _XmlMNaming.XmlMNaming_Shape1_SetVertex(self, *args)


    def TShapeId(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _XmlMNaming.XmlMNaming_Shape1_TShapeId(self, *args)


    def __init__(self, *args):
        """
        :param Doc:
        	:type Doc: XmlObjMgt_Document
        	:rtype: None
        :param E:
        	:type E: XmlObjMgt_Element
        	:rtype: None
        """
        _XmlMNaming.XmlMNaming_Shape1_swiginit(self, _XmlMNaming.new_XmlMNaming_Shape1(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_Shape1
XmlMNaming_Shape1.Element = new_instancemethod(_XmlMNaming.XmlMNaming_Shape1_Element, None, XmlMNaming_Shape1)
XmlMNaming_Shape1.LocId = new_instancemethod(_XmlMNaming.XmlMNaming_Shape1_LocId, None, XmlMNaming_Shape1)
XmlMNaming_Shape1.Orientation = new_instancemethod(_XmlMNaming.XmlMNaming_Shape1_Orientation, None, XmlMNaming_Shape1)
XmlMNaming_Shape1.SetShape = new_instancemethod(_XmlMNaming.XmlMNaming_Shape1_SetShape, None, XmlMNaming_Shape1)
XmlMNaming_Shape1.SetVertex = new_instancemethod(_XmlMNaming.XmlMNaming_Shape1_SetVertex, None, XmlMNaming_Shape1)
XmlMNaming_Shape1.TShapeId = new_instancemethod(_XmlMNaming.XmlMNaming_Shape1_TShapeId, None, XmlMNaming_Shape1)
XmlMNaming_Shape1_swigregister = _XmlMNaming.XmlMNaming_Shape1_swigregister
XmlMNaming_Shape1_swigregister(XmlMNaming_Shape1)



