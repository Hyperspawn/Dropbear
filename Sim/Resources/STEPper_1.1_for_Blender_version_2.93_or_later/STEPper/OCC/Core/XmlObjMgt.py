# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XmlObjMgt module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xmlobjmgt.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _XmlObjMgt.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlObjMgt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlObjMgt')
    _XmlObjMgt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlObjMgt', [dirname(__file__)])
        except ImportError:
            import _XmlObjMgt
            return _XmlObjMgt
        try:
            _mod = imp.load_module('_XmlObjMgt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlObjMgt = swig_import_helper()
    del swig_import_helper
else:
    import _XmlObjMgt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlObjMgt.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_XmlObjMgt.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_XmlObjMgt.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_XmlObjMgt.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_XmlObjMgt.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_XmlObjMgt.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_XmlObjMgt.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_XmlObjMgt.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_XmlObjMgt.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_XmlObjMgt.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_XmlObjMgt.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_XmlObjMgt.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_XmlObjMgt.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_XmlObjMgt.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_XmlObjMgt.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_XmlObjMgt.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_XmlObjMgt.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _XmlObjMgt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XmlObjMgt.process_exception(error, method_name, class_name)
process_exception = _XmlObjMgt.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.LDOM
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.Storage
class xmlobjmgt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FindChildByName(*args) -> "XmlObjMgt_Element":
        """
        :param theSource:
        	:type theSource: XmlObjMgt_Element
        	:param theName:
        	:type theName: XmlObjMgt_DOMString
        	:rtype: XmlObjMgt_Element
        """
        return _XmlObjMgt.xmlobjmgt_FindChildByName(*args)

    FindChildByName = staticmethod(FindChildByName)

    def FindChildByRef(*args) -> "XmlObjMgt_Element":
        """
        :param theSource:
        	:type theSource: XmlObjMgt_Element
        	:param theRefName:
        	:type theRefName: XmlObjMgt_DOMString
        	:rtype: XmlObjMgt_Element
        """
        return _XmlObjMgt.xmlobjmgt_FindChildByRef(*args)

    FindChildByRef = staticmethod(FindChildByRef)

    def FindChildElement(*args) -> "XmlObjMgt_Element":
        """
        :param theSource:
        	:type theSource: XmlObjMgt_Element
        	:param theObjId:
        	:type theObjId: int
        	:rtype: XmlObjMgt_Element
        """
        return _XmlObjMgt.xmlobjmgt_FindChildElement(*args)

    FindChildElement = staticmethod(FindChildElement)

    def GetExtendedString(*args) -> "Standard_Boolean":
        """
        * Get attribute <theElement extstring='theString' ...>
        	:param theElement:
        	:type theElement: XmlObjMgt_Element
        	:param theString:
        	:type theString: TCollection_ExtendedString
        	:rtype: bool
        """
        return _XmlObjMgt.xmlobjmgt_GetExtendedString(*args)

    GetExtendedString = staticmethod(GetExtendedString)

    def GetInteger(*args) -> "Standard_Integer &":
        """
        :param theString:
        	:type theString: char *
        	:param theValue:
        	:type theValue: int
        	:rtype: bool
        """
        return _XmlObjMgt.xmlobjmgt_GetInteger(*args)

    GetInteger = staticmethod(GetInteger)

    def GetReal(*args) -> "Standard_Real &":
        """
        :param theString:
        	:type theString: char *
        	:param theValue:
        	:type theValue: float
        	:rtype: bool
        :param theString:
        	:type theString: XmlObjMgt_DOMString
        	:param theValue:
        	:type theValue: float
        	:rtype: bool
        """
        return _XmlObjMgt.xmlobjmgt_GetReal(*args)

    GetReal = staticmethod(GetReal)

    def GetStringValue(*args) -> "XmlObjMgt_DOMString":
        """
        * Returns the first child text node
        	:param theElement:
        	:type theElement: XmlObjMgt_Element
        	:rtype: XmlObjMgt_DOMString
        """
        return _XmlObjMgt.xmlobjmgt_GetStringValue(*args)

    GetStringValue = staticmethod(GetStringValue)

    def GetTagEntryString(*args) -> "Standard_Boolean":
        """
        * Convert XPath expression (DOMString) into TagEntry string returns False on Error
        	:param theTarget:
        	:type theTarget: XmlObjMgt_DOMString
        	:param theTagEntry:
        	:type theTagEntry: TCollection_AsciiString
        	:rtype: bool
        """
        return _XmlObjMgt.xmlobjmgt_GetTagEntryString(*args)

    GetTagEntryString = staticmethod(GetTagEntryString)

    def IdString(*args) -> "XmlObjMgt_DOMString const &":
        """
        * Define the name of XMLattribute 'ID' (to be used everywhere)
        	:rtype: XmlObjMgt_DOMString
        """
        return _XmlObjMgt.xmlobjmgt_IdString(*args)

    IdString = staticmethod(IdString)

    def SetExtendedString(*args) -> "Standard_Boolean":
        """
        * Add attribute <theElement extstring='theString' ...>
        	:param theElement:
        	:type theElement: XmlObjMgt_Element
        	:param theString:
        	:type theString: TCollection_ExtendedString
        	:rtype: bool
        """
        return _XmlObjMgt.xmlobjmgt_SetExtendedString(*args)

    SetExtendedString = staticmethod(SetExtendedString)

    def SetStringValue(*args) -> "void":
        """
        * Add theData as the last child text node to theElement isClearText(True) avoids analysis of the string and replacement of characters like '<' and '&' during XML file storage. Do NEVER set isClearText unless you have a hell of a reason
        	:param theElement:
        	:type theElement: XmlObjMgt_Element
        	:param theData:
        	:type theData: XmlObjMgt_DOMString
        	:param isClearText: default value is Standard_False
        	:type isClearText: bool
        	:rtype: void
        """
        return _XmlObjMgt.xmlobjmgt_SetStringValue(*args)

    SetStringValue = staticmethod(SetStringValue)

    def SetTagEntryString(*args) -> "void":
        """
        * Convert XPath expression (DOMString) into TagEntry string returns False on Error
        	:param theSource:
        	:type theSource: XmlObjMgt_DOMString
        	:param theTagEntry:
        	:type theTagEntry: TCollection_AsciiString
        	:rtype: void
        """
        return _XmlObjMgt.xmlobjmgt_SetTagEntryString(*args)

    SetTagEntryString = staticmethod(SetTagEntryString)

    __repr__ = _dumps_object


    def __init__(self):
        _XmlObjMgt.xmlobjmgt_swiginit(self, _XmlObjMgt.new_xmlobjmgt())
    __swig_destroy__ = _XmlObjMgt.delete_xmlobjmgt
xmlobjmgt_swigregister = _XmlObjMgt.xmlobjmgt_swigregister
xmlobjmgt_swigregister(xmlobjmgt)

def xmlobjmgt_FindChildByName(*args) -> "XmlObjMgt_Element":
    """
    :param theSource:
    	:type theSource: XmlObjMgt_Element
    	:param theName:
    	:type theName: XmlObjMgt_DOMString
    	:rtype: XmlObjMgt_Element
    """
    return _XmlObjMgt.xmlobjmgt_FindChildByName(*args)

def xmlobjmgt_FindChildByRef(*args) -> "XmlObjMgt_Element":
    """
    :param theSource:
    	:type theSource: XmlObjMgt_Element
    	:param theRefName:
    	:type theRefName: XmlObjMgt_DOMString
    	:rtype: XmlObjMgt_Element
    """
    return _XmlObjMgt.xmlobjmgt_FindChildByRef(*args)

def xmlobjmgt_FindChildElement(*args) -> "XmlObjMgt_Element":
    """
    :param theSource:
    	:type theSource: XmlObjMgt_Element
    	:param theObjId:
    	:type theObjId: int
    	:rtype: XmlObjMgt_Element
    """
    return _XmlObjMgt.xmlobjmgt_FindChildElement(*args)

def xmlobjmgt_GetExtendedString(*args) -> "Standard_Boolean":
    """
    * Get attribute <theElement extstring='theString' ...>
    	:param theElement:
    	:type theElement: XmlObjMgt_Element
    	:param theString:
    	:type theString: TCollection_ExtendedString
    	:rtype: bool
    """
    return _XmlObjMgt.xmlobjmgt_GetExtendedString(*args)

def xmlobjmgt_GetInteger(*args) -> "Standard_Integer &":
    """
    :param theString:
    	:type theString: char *
    	:param theValue:
    	:type theValue: int
    	:rtype: bool
    """
    return _XmlObjMgt.xmlobjmgt_GetInteger(*args)

def xmlobjmgt_GetReal(*args) -> "Standard_Real &":
    """
    :param theString:
    	:type theString: char *
    	:param theValue:
    	:type theValue: float
    	:rtype: bool
    :param theString:
    	:type theString: XmlObjMgt_DOMString
    	:param theValue:
    	:type theValue: float
    	:rtype: bool
    """
    return _XmlObjMgt.xmlobjmgt_GetReal(*args)

def xmlobjmgt_GetStringValue(*args) -> "XmlObjMgt_DOMString":
    """
    * Returns the first child text node
    	:param theElement:
    	:type theElement: XmlObjMgt_Element
    	:rtype: XmlObjMgt_DOMString
    """
    return _XmlObjMgt.xmlobjmgt_GetStringValue(*args)

def xmlobjmgt_GetTagEntryString(*args) -> "Standard_Boolean":
    """
    * Convert XPath expression (DOMString) into TagEntry string returns False on Error
    	:param theTarget:
    	:type theTarget: XmlObjMgt_DOMString
    	:param theTagEntry:
    	:type theTagEntry: TCollection_AsciiString
    	:rtype: bool
    """
    return _XmlObjMgt.xmlobjmgt_GetTagEntryString(*args)

def xmlobjmgt_IdString(*args) -> "XmlObjMgt_DOMString const &":
    """
    * Define the name of XMLattribute 'ID' (to be used everywhere)
    	:rtype: XmlObjMgt_DOMString
    """
    return _XmlObjMgt.xmlobjmgt_IdString(*args)

def xmlobjmgt_SetExtendedString(*args) -> "Standard_Boolean":
    """
    * Add attribute <theElement extstring='theString' ...>
    	:param theElement:
    	:type theElement: XmlObjMgt_Element
    	:param theString:
    	:type theString: TCollection_ExtendedString
    	:rtype: bool
    """
    return _XmlObjMgt.xmlobjmgt_SetExtendedString(*args)

def xmlobjmgt_SetStringValue(*args) -> "void":
    """
    * Add theData as the last child text node to theElement isClearText(True) avoids analysis of the string and replacement of characters like '<' and '&' during XML file storage. Do NEVER set isClearText unless you have a hell of a reason
    	:param theElement:
    	:type theElement: XmlObjMgt_Element
    	:param theData:
    	:type theData: XmlObjMgt_DOMString
    	:param isClearText: default value is Standard_False
    	:type isClearText: bool
    	:rtype: void
    """
    return _XmlObjMgt.xmlobjmgt_SetStringValue(*args)

def xmlobjmgt_SetTagEntryString(*args) -> "void":
    """
    * Convert XPath expression (DOMString) into TagEntry string returns False on Error
    	:param theSource:
    	:type theSource: XmlObjMgt_DOMString
    	:param theTagEntry:
    	:type theTagEntry: TCollection_AsciiString
    	:rtype: void
    """
    return _XmlObjMgt.xmlobjmgt_SetTagEntryString(*args)

class XmlObjMgt_Array1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateArrayElement(self, *args) -> "void":
        """
        * Create DOM_Element representing the array, under 'theParent'
        	:param theParent:
        	:type theParent: XmlObjMgt_Element
        	:param theName:
        	:type theName: XmlObjMgt_DOMString
        	:rtype: None
        """
        return _XmlObjMgt.XmlObjMgt_Array1_CreateArrayElement(self, *args)


    def Element(self, *args) -> "XmlObjMgt_Element const &":
        """
        * Returns the DOM element of <self>.
        	:rtype: XmlObjMgt_Element
        """
        return _XmlObjMgt.XmlObjMgt_Array1_Element(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        * Returns the number of elements of <self>.
        	:rtype: int
        """
        return _XmlObjMgt.XmlObjMgt_Array1_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        * Returns the lower bound.
        	:rtype: int
        """
        return _XmlObjMgt.XmlObjMgt_Array1_Lower(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Set the <Index>th element of the array to <Value>.
        	:param Index:
        	:type Index: int
        	:param Value:
        	:type Value: XmlObjMgt_Element
        	:rtype: None
        """
        return _XmlObjMgt.XmlObjMgt_Array1_SetValue(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        * Returns the upper bound.
        	:rtype: int
        """
        return _XmlObjMgt.XmlObjMgt_Array1_Upper(self, *args)


    def Value(self, *args) -> "XmlObjMgt_Element":
        """
        * Returns the value of <Index>th element of the array.
        	:param Index:
        	:type Index: int
        	:rtype: XmlObjMgt_Element
        """
        return _XmlObjMgt.XmlObjMgt_Array1_Value(self, *args)


    def __init__(self, *args):
        """
        * Create an array of lower bound <Low> and upper bound <Up>. Range error is raised when <Up> is less than <Low>.
        	:param Low:
        	:type Low: int
        	:param Up:
        	:type Up: int
        	:rtype: None
        * for restoration from DOM_Element which is child of theParent: <theParent ...> <theName ...>
        	:param theParent:
        	:type theParent: XmlObjMgt_Element
        	:param theName:
        	:type theName: XmlObjMgt_DOMString
        	:rtype: None
        """
        _XmlObjMgt.XmlObjMgt_Array1_swiginit(self, _XmlObjMgt.new_XmlObjMgt_Array1(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_Array1
XmlObjMgt_Array1.CreateArrayElement = new_instancemethod(_XmlObjMgt.XmlObjMgt_Array1_CreateArrayElement, None, XmlObjMgt_Array1)
XmlObjMgt_Array1.Element = new_instancemethod(_XmlObjMgt.XmlObjMgt_Array1_Element, None, XmlObjMgt_Array1)
XmlObjMgt_Array1.Length = new_instancemethod(_XmlObjMgt.XmlObjMgt_Array1_Length, None, XmlObjMgt_Array1)
XmlObjMgt_Array1.Lower = new_instancemethod(_XmlObjMgt.XmlObjMgt_Array1_Lower, None, XmlObjMgt_Array1)
XmlObjMgt_Array1.SetValue = new_instancemethod(_XmlObjMgt.XmlObjMgt_Array1_SetValue, None, XmlObjMgt_Array1)
XmlObjMgt_Array1.Upper = new_instancemethod(_XmlObjMgt.XmlObjMgt_Array1_Upper, None, XmlObjMgt_Array1)
XmlObjMgt_Array1.Value = new_instancemethod(_XmlObjMgt.XmlObjMgt_Array1_Value, None, XmlObjMgt_Array1)
XmlObjMgt_Array1_swigregister = _XmlObjMgt.XmlObjMgt_Array1_swigregister
XmlObjMgt_Array1_swigregister(XmlObjMgt_Array1)

class XmlObjMgt_GP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Translate(*args) -> "Standard_Boolean":
        """
        :param aTrsf:
        	:type aTrsf: gp_Trsf
        	:rtype: XmlObjMgt_DOMString
        :param aMat:
        	:type aMat: gp_Mat
        	:rtype: XmlObjMgt_DOMString
        :param anXYZ:
        	:type anXYZ: gp_XYZ
        	:rtype: XmlObjMgt_DOMString
        :param aStr:
        	:type aStr: XmlObjMgt_DOMString
        	:param T:
        	:type T: gp_Trsf
        	:rtype: bool
        :param aStr:
        	:type aStr: XmlObjMgt_DOMString
        	:param T:
        	:type T: gp_Mat
        	:rtype: bool
        :param aStr:
        	:type aStr: XmlObjMgt_DOMString
        	:param T:
        	:type T: gp_XYZ
        	:rtype: bool
        """
        return _XmlObjMgt.XmlObjMgt_GP_Translate(*args)

    Translate = staticmethod(Translate)

    __repr__ = _dumps_object


    def __init__(self):
        _XmlObjMgt.XmlObjMgt_GP_swiginit(self, _XmlObjMgt.new_XmlObjMgt_GP())
    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_GP
XmlObjMgt_GP_swigregister = _XmlObjMgt.XmlObjMgt_GP_swigregister
XmlObjMgt_GP_swigregister(XmlObjMgt_GP)

def XmlObjMgt_GP_Translate(*args) -> "Standard_Boolean":
    """
    :param aTrsf:
    	:type aTrsf: gp_Trsf
    	:rtype: XmlObjMgt_DOMString
    :param aMat:
    	:type aMat: gp_Mat
    	:rtype: XmlObjMgt_DOMString
    :param anXYZ:
    	:type anXYZ: gp_XYZ
    	:rtype: XmlObjMgt_DOMString
    :param aStr:
    	:type aStr: XmlObjMgt_DOMString
    	:param T:
    	:type T: gp_Trsf
    	:rtype: bool
    :param aStr:
    	:type aStr: XmlObjMgt_DOMString
    	:param T:
    	:type T: gp_Mat
    	:rtype: bool
    :param aStr:
    	:type aStr: XmlObjMgt_DOMString
    	:param T:
    	:type T: gp_XYZ
    	:rtype: bool
    """
    return _XmlObjMgt.XmlObjMgt_GP_Translate(*args)

class XmlObjMgt_Persistent(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateElement(self, *args) -> "void":
        """
        * myElement := <theType id='theID'/>
        	:param theParent:
        	:type theParent: XmlObjMgt_Element
        	:param theType:
        	:type theType: XmlObjMgt_DOMString
        	:param theID:
        	:type theID: int
        	:rtype: None
        """
        return _XmlObjMgt.XmlObjMgt_Persistent_CreateElement(self, *args)


    def Element(self, *args) -> "XmlObjMgt_Element const &":
        """
        * return myElement
        	:rtype: XmlObjMgt_Element
        """
        return _XmlObjMgt.XmlObjMgt_Persistent_Element(self, *args)


    def Id(self, *args) -> "Standard_Integer":
        """:rtype: int"""
        return _XmlObjMgt.XmlObjMgt_Persistent_Id(self, *args)


    def SetId(self, *args) -> "void":
        """
        :param theId:
        	:type theId: int
        	:rtype: None
        """
        return _XmlObjMgt.XmlObjMgt_Persistent_SetId(self, *args)


    def __init__(self, *args):
        """
        * empty constructor
        	:rtype: None
        * constructor
        	:param theElement:
        	:type theElement: XmlObjMgt_Element
        	:rtype: None
        * constructor from sub-element of Element referenced by theRef
        	:param theElement:
        	:type theElement: XmlObjMgt_Element
        	:param theRef:
        	:type theRef: XmlObjMgt_DOMString
        	:rtype: None
        """
        _XmlObjMgt.XmlObjMgt_Persistent_swiginit(self, _XmlObjMgt.new_XmlObjMgt_Persistent(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_Persistent
XmlObjMgt_Persistent.CreateElement = new_instancemethod(_XmlObjMgt.XmlObjMgt_Persistent_CreateElement, None, XmlObjMgt_Persistent)
XmlObjMgt_Persistent.Element = new_instancemethod(_XmlObjMgt.XmlObjMgt_Persistent_Element, None, XmlObjMgt_Persistent)
XmlObjMgt_Persistent.Id = new_instancemethod(_XmlObjMgt.XmlObjMgt_Persistent_Id, None, XmlObjMgt_Persistent)
XmlObjMgt_Persistent.SetId = new_instancemethod(_XmlObjMgt.XmlObjMgt_Persistent_SetId, None, XmlObjMgt_Persistent)
XmlObjMgt_Persistent_swigregister = _XmlObjMgt.XmlObjMgt_Persistent_swigregister
XmlObjMgt_Persistent_swigregister(XmlObjMgt_Persistent)

class XmlObjMgt_RRelocationTable(OCC.Core.TColStd.TColStd_DataMapOfIntegerTransient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        :param doReleaseMemory: default value is Standard_True
        	:type doReleaseMemory: bool
        	:rtype: None
        """
        return _XmlObjMgt.XmlObjMgt_RRelocationTable_Clear(self, *args)


    def GetHeaderData(self, *args) -> "opencascade::handle< Storage_HeaderData > const &":
        """
        * Returns a handle to the header data of the file that is begin read
        	:rtype: opencascade::handle<Storage_HeaderData>
        """
        return _XmlObjMgt.XmlObjMgt_RRelocationTable_GetHeaderData(self, *args)


    def SetHeaderData(self, *args) -> "void":
        """
        * Sets the storage header data. //! @param theHeaderData header data of the file that is begin read
        	:param theHeaderData:
        	:type theHeaderData: Storage_HeaderData
        	:rtype: None
        """
        return _XmlObjMgt.XmlObjMgt_RRelocationTable_SetHeaderData(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        _XmlObjMgt.XmlObjMgt_RRelocationTable_swiginit(self, _XmlObjMgt.new_XmlObjMgt_RRelocationTable())
    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_RRelocationTable
XmlObjMgt_RRelocationTable.Clear = new_instancemethod(_XmlObjMgt.XmlObjMgt_RRelocationTable_Clear, None, XmlObjMgt_RRelocationTable)
XmlObjMgt_RRelocationTable.GetHeaderData = new_instancemethod(_XmlObjMgt.XmlObjMgt_RRelocationTable_GetHeaderData, None, XmlObjMgt_RRelocationTable)
XmlObjMgt_RRelocationTable.SetHeaderData = new_instancemethod(_XmlObjMgt.XmlObjMgt_RRelocationTable_SetHeaderData, None, XmlObjMgt_RRelocationTable)
XmlObjMgt_RRelocationTable_swigregister = _XmlObjMgt.XmlObjMgt_RRelocationTable_swigregister
XmlObjMgt_RRelocationTable_swigregister(XmlObjMgt_RRelocationTable)

class XmlObjMgt_SRelocationTable(OCC.Core.TColStd.TColStd_IndexedMapOfTransient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        :param doReleaseMemory: default value is Standard_True
        	:type doReleaseMemory: bool
        	:rtype: None
        """
        return _XmlObjMgt.XmlObjMgt_SRelocationTable_Clear(self, *args)


    def GetHeaderData(self, *args) -> "opencascade::handle< Storage_HeaderData > const &":
        """
        * Returns a handle to the header data of the file that is begin read
        	:rtype: opencascade::handle<Storage_HeaderData>
        """
        return _XmlObjMgt.XmlObjMgt_SRelocationTable_GetHeaderData(self, *args)


    def SetHeaderData(self, *args) -> "void":
        """
        * Sets the storage header data. //! @param theHeaderData header data of the file that is begin read
        	:param theHeaderData:
        	:type theHeaderData: Storage_HeaderData
        	:rtype: None
        """
        return _XmlObjMgt.XmlObjMgt_SRelocationTable_SetHeaderData(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        _XmlObjMgt.XmlObjMgt_SRelocationTable_swiginit(self, _XmlObjMgt.new_XmlObjMgt_SRelocationTable())
    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_SRelocationTable
XmlObjMgt_SRelocationTable.Clear = new_instancemethod(_XmlObjMgt.XmlObjMgt_SRelocationTable_Clear, None, XmlObjMgt_SRelocationTable)
XmlObjMgt_SRelocationTable.GetHeaderData = new_instancemethod(_XmlObjMgt.XmlObjMgt_SRelocationTable_GetHeaderData, None, XmlObjMgt_SRelocationTable)
XmlObjMgt_SRelocationTable.SetHeaderData = new_instancemethod(_XmlObjMgt.XmlObjMgt_SRelocationTable_SetHeaderData, None, XmlObjMgt_SRelocationTable)
XmlObjMgt_SRelocationTable_swigregister = _XmlObjMgt.XmlObjMgt_SRelocationTable_swigregister
XmlObjMgt_SRelocationTable_swigregister(XmlObjMgt_SRelocationTable)



